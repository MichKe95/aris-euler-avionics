
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  080163b8  080163b8  000263b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a70  08016a70  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08016a70  08016a70  00026a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a78  08016a78  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a78  08016a78  00026a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a7c  08016a7c  00026a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08016a80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d0c  200001fc  08016c7c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20012f08  08016c7c  00032f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034f0f  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006746  00000000  00000000  0006513b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002320  00000000  00000000  0006b888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002028  00000000  00000000  0006dba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b0fe  00000000  00000000  0006fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023a61  00000000  00000000  0007acce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000feff6  00000000  00000000  0009e72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019d725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d8  00000000  00000000  0019d7a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801639c 	.word	0x0801639c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801639c 	.word	0x0801639c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b091      	sub	sp, #68	; 0x44
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f002 fc3a 	bl	80037f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f8b7 	bl	80010f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <main+0x110>)
 8000f88:	4a40      	ldr	r2, [pc, #256]	; (800108c <main+0x114>)
 8000f8a:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <main+0x110>)
 8000f8e:	4a40      	ldr	r2, [pc, #256]	; (8001090 <main+0x118>)
 8000f90:	60da      	str	r2, [r3, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fa2b 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000f96:	f000 fa03 	bl	80013a0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000f9a:	f000 f9c9 	bl	8001330 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f957 	bl	8001250 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8000fa2:	f000 f935 	bl	8001210 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000fa6:	f000 f98b 	bl	80012c0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000faa:	f00a f93d 	bl	800b228 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000fae:	f012 ff25 	bl	8013dfc <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb2:	f00e ff2b 	bl	800fe0c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Barometer Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 8000fb6:	4b37      	ldr	r3, [pc, #220]	; (8001094 <main+0x11c>)
 8000fb8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 8000fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00f f8f2 	bl	80101b0 <osMutexNew>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <main+0x120>)
 8000fd0:	601a      	str	r2, [r3, #0]

   /* Barometer Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <main+0x124>)
 8000fd4:	f107 0420 	add.w	r4, r7, #32
 8000fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00f f8e4 	bl	80101b0 <osMutexNew>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <main+0x128>)
 8000fec:	601a      	str	r2, [r3, #0]

    /* Barometer Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <main+0x12c>)
 8000ff0:	f107 0410 	add.w	r4, r7, #16
 8000ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00f f8d6 	bl	80101b0 <osMutexNew>
 8001004:	4602      	mov	r2, r0
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <main+0x130>)
 8001008:	601a      	str	r2, [r3, #0]

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <main+0x134>)
 800100c:	463c      	mov	r4, r7
 800100e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 8001014:	463b      	mov	r3, r7
 8001016:	4618      	mov	r0, r3
 8001018:	f00f f8ca 	bl	80101b0 <osMutexNew>
 800101c:	4602      	mov	r2, r0
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <main+0x138>)
 8001020:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8001022:	2200      	movs	r2, #0
 8001024:	2196      	movs	r1, #150	; 0x96
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	f00f fb9c 	bl	8010764 <osMessageQueueNew>
 800102c:	4602      	mov	r2, r0
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <main+0x13c>)
 8001030:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <main+0x140>)
 8001034:	2100      	movs	r1, #0
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <main+0x144>)
 8001038:	f00e ffa6 	bl	800ff88 <osThreadNew>
 800103c:	4602      	mov	r2, r0
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <main+0x148>)
 8001040:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <main+0x14c>)
 8001044:	2100      	movs	r1, #0
 8001046:	4820      	ldr	r0, [pc, #128]	; (80010c8 <main+0x150>)
 8001048:	f00e ff9e 	bl	800ff88 <osThreadNew>
 800104c:	4602      	mov	r2, r0
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <main+0x154>)
 8001050:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <main+0x158>)
 8001054:	2100      	movs	r1, #0
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <main+0x15c>)
 8001058:	f00e ff96 	bl	800ff88 <osThreadNew>
 800105c:	4602      	mov	r2, r0
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <main+0x160>)
 8001060:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <main+0x164>)
 8001064:	2100      	movs	r1, #0
 8001066:	481e      	ldr	r0, [pc, #120]	; (80010e0 <main+0x168>)
 8001068:	f00e ff8e 	bl	800ff88 <osThreadNew>
 800106c:	4602      	mov	r2, r0
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <main+0x16c>)
 8001070:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8001072:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <main+0x170>)
 8001074:	2100      	movs	r1, #0
 8001076:	481d      	ldr	r0, [pc, #116]	; (80010ec <main+0x174>)
 8001078:	f00e ff86 	bl	800ff88 <osThreadNew>
 800107c:	4602      	mov	r2, r0
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <main+0x178>)
 8001080:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001082:	f00e ff19 	bl	800feb8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001086:	e7fe      	b.n	8001086 <main+0x10e>
 8001088:	e0042000 	.word	0xe0042000
 800108c:	07e01bff 	.word	0x07e01bff
 8001090:	00070003 	.word	0x00070003
 8001094:	08016410 	.word	0x08016410
 8001098:	2000aa2c 	.word	0x2000aa2c
 800109c:	0801642c 	.word	0x0801642c
 80010a0:	20010cd4 	.word	0x20010cd4
 80010a4:	08016448 	.word	0x08016448
 80010a8:	2000aa30 	.word	0x2000aa30
 80010ac:	08016464 	.word	0x08016464
 80010b0:	2000ca90 	.word	0x2000ca90
 80010b4:	2000cbb4 	.word	0x2000cbb4
 80010b8:	08016890 	.word	0x08016890
 80010bc:	080014b1 	.word	0x080014b1
 80010c0:	20008808 	.word	0x20008808
 80010c4:	080168b4 	.word	0x080168b4
 80010c8:	080025dd 	.word	0x080025dd
 80010cc:	2000aa28 	.word	0x2000aa28
 80010d0:	080168d8 	.word	0x080168d8
 80010d4:	08001d99 	.word	0x08001d99
 80010d8:	20010cd0 	.word	0x20010cd0
 80010dc:	080168fc 	.word	0x080168fc
 80010e0:	0800243d 	.word	0x0800243d
 80010e4:	200088f8 	.word	0x200088f8
 80010e8:	08016920 	.word	0x08016920
 80010ec:	080020a9 	.word	0x080020a9
 80010f0:	20008870 	.word	0x20008870

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0b4      	sub	sp, #208	; 0xd0
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f013 fc27 	bl	8014956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2284      	movs	r2, #132	; 0x84
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f013 fc18 	bl	8014956 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <SystemClock_Config+0x114>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a37      	ldr	r2, [pc, #220]	; (8001208 <SystemClock_Config+0x114>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <SystemClock_Config+0x114>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <SystemClock_Config+0x118>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001146:	4a31      	ldr	r2, [pc, #196]	; (800120c <SystemClock_Config+0x118>)
 8001148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <SystemClock_Config+0x118>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115a:	2301      	movs	r3, #1
 800115c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 800117c:	23a8      	movs	r3, #168	; 0xa8
 800117e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001188:	2307      	movs	r3, #7
 800118a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001192:	4618      	mov	r0, r3
 8001194:	f004 fba0 	bl	80058d8 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800119e:	f000 f9a1 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c8:	2105      	movs	r1, #5
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fe28 	bl	8005e20 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80011d6:	f000 f985 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80011da:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80011de:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 f82b 	bl	800624c <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80011fc:	f000 f972 	bl	80014e4 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	37d0      	adds	r7, #208	; 0xd0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <MX_SDMMC1_SD_Init+0x3c>)
 8001218:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20008874 	.word	0x20008874
 800124c:	40012c00 	.word	0x40012c00

08001250 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <MX_SPI1_Init+0x6c>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI1_Init+0x68>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001268:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800126c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI1_Init+0x68>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SPI1_Init+0x68>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001294:	2207      	movs	r2, #7
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_SPI1_Init+0x68>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI1_Init+0x68>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_SPI1_Init+0x68>)
 80012a6:	f006 fe7d 	bl	8007fa4 <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80012b0:	f000 f918 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000cb50 	.word	0x2000cb50
 80012bc:	40013000 	.word	0x40013000

080012c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_SPI2_Init+0x68>)
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <MX_SPI2_Init+0x6c>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_SPI2_Init+0x68>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_SPI2_Init+0x68>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_SPI2_Init+0x68>)
 80012d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_SPI2_Init+0x68>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_SPI2_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI2_Init+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <MX_SPI2_Init+0x68>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI2_Init+0x68>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_SPI2_Init+0x68>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI2_Init+0x68>)
 8001304:	2207      	movs	r2, #7
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_SPI2_Init+0x68>)
 800130a:	2200      	movs	r2, #0
 800130c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI2_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_SPI2_Init+0x68>)
 8001316:	f006 fe45 	bl	8007fa4 <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001320:	f000 f8e0 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000880c 	.word	0x2000880c
 800132c:	40003800 	.word	0x40003800

08001330 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_SPI3_Init+0x68>)
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <MX_SPI3_Init+0x6c>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_SPI3_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_SPI3_Init+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_SPI3_Init+0x68>)
 8001348:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800134c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_SPI3_Init+0x68>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_SPI3_Init+0x68>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_SPI3_Init+0x68>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_SPI3_Init+0x68>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_SPI3_Init+0x68>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_SPI3_Init+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_SPI3_Init+0x68>)
 8001374:	2207      	movs	r2, #7
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <MX_SPI3_Init+0x68>)
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_SPI3_Init+0x68>)
 8001380:	2200      	movs	r2, #0
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_SPI3_Init+0x68>)
 8001386:	f006 fe0d 	bl	8007fa4 <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001390:	f000 f8a8 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000a8fc 	.word	0x2000a8fc
 800139c:	40003c00 	.word	0x40003c00

080013a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_DMA_Init+0x48>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <MX_DMA_Init+0x48>)
 80013ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MX_DMA_Init+0x48>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2105      	movs	r1, #5
 80013c2:	203b      	movs	r0, #59	; 0x3b
 80013c4:	f002 fb1e 	bl	8003a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013c8:	203b      	movs	r0, #59	; 0x3b
 80013ca:	f002 fb37 	bl	8003a3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	2045      	movs	r0, #69	; 0x45
 80013d4:	f002 fb16 	bl	8003a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013d8:	2045      	movs	r0, #69	; 0x45
 80013da:	f002 fb2f 	bl	8003a3c <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_GPIO_Init+0xbc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_GPIO_Init+0xbc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2108      	movs	r1, #8
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_GPIO_Init+0xc0>)
 8001480:	f003 f838 	bl	80044f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001484:	2308      	movs	r3, #8
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_GPIO_Init+0xc0>)
 800149c:	f002 fe80 	bl	80041a0 <HAL_GPIO_Init>

}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020800 	.word	0x40020800

080014b0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f00e fe0b 	bl	80100d4 <osDelay>
 80014be:	e7fb      	b.n	80014b8 <StartDefaultTask+0x8>

080014c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014d2:	f002 f99d 	bl	8003810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010000 	.word	0x40010000

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	210f      	movs	r1, #15
 800152e:	f06f 0001 	mvn.w	r0, #1
 8001532:	f002 fa67 	bl	8003a04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6d      	ldr	r2, [pc, #436]	; (8001718 <HAL_SD_MspInit+0x1d4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	f040 80d4 	bne.w	8001710 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001568:	4b6c      	ldr	r3, [pc, #432]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	4a6b      	ldr	r2, [pc, #428]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800156e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001572:	6453      	str	r3, [r2, #68]	; 0x44
 8001574:	4b69      	ldr	r3, [pc, #420]	; (800171c <HAL_SD_MspInit+0x1d8>)
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	4b66      	ldr	r3, [pc, #408]	; (800171c <HAL_SD_MspInit+0x1d8>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a65      	ldr	r2, [pc, #404]	; (800171c <HAL_SD_MspInit+0x1d8>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a5f      	ldr	r2, [pc, #380]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_SD_MspInit+0x1d8>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80015b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015c2:	230c      	movs	r3, #12
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4854      	ldr	r0, [pc, #336]	; (8001720 <HAL_SD_MspInit+0x1dc>)
 80015ce:	f002 fde7 	bl	80041a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015e4:	230c      	movs	r3, #12
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	484c      	ldr	r0, [pc, #304]	; (8001720 <HAL_SD_MspInit+0x1dc>)
 80015f0:	f002 fdd6 	bl	80041a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f4:	2304      	movs	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001604:	230c      	movs	r3, #12
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4845      	ldr	r0, [pc, #276]	; (8001724 <HAL_SD_MspInit+0x1e0>)
 8001610:	f002 fdc6 	bl	80041a0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001616:	4a45      	ldr	r2, [pc, #276]	; (800172c <HAL_SD_MspInit+0x1e8>)
 8001618:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800161c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001620:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800163c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001640:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001644:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001648:	2220      	movs	r2, #32
 800164a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001654:	2204      	movs	r2, #4
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800165a:	2203      	movs	r2, #3
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001660:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001668:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800166e:	482e      	ldr	r0, [pc, #184]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001670:	f002 f9f2 	bl	8003a58 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 800167a:	f7ff ff33 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <HAL_SD_MspInit+0x1f0>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 8001692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001696:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 800169a:	2240      	movs	r2, #64	; 0x40
 800169c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016be:	2220      	movs	r2, #32
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016d0:	2203      	movs	r2, #3
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016e6:	f002 f9b7 	bl	8003a58 <HAL_DMA_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 80016f0:	f7ff fef8 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016fa:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2105      	movs	r1, #5
 8001704:	2031      	movs	r0, #49	; 0x31
 8001706:	f002 f97d 	bl	8003a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800170a:	2031      	movs	r0, #49	; 0x31
 800170c:	f002 f996 	bl	8003a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40023800 	.word	0x40023800
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	2000caf0 	.word	0x2000caf0
 800172c:	40026458 	.word	0x40026458
 8001730:	20010c70 	.word	0x20010c70
 8001734:	400264a0 	.word	0x400264a0

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a68      	ldr	r2, [pc, #416]	; (80018f8 <HAL_SPI_MspInit+0x1c0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d131      	bne.n	80017be <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a67      	ldr	r2, [pc, #412]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b62      	ldr	r3, [pc, #392]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a61      	ldr	r2, [pc, #388]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800178a:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179c:	2305      	movs	r3, #5
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4856      	ldr	r0, [pc, #344]	; (8001900 <HAL_SPI_MspInit+0x1c8>)
 80017a8:	f002 fcfa 	bl	80041a0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2105      	movs	r1, #5
 80017b0:	2023      	movs	r0, #35	; 0x23
 80017b2:	f002 f927 	bl	8003a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017b6:	2023      	movs	r0, #35	; 0x23
 80017b8:	f002 f940 	bl	8003a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017bc:	e097      	b.n	80018ee <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_SPI_MspInit+0x1cc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d131      	bne.n	800182c <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017c8:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180a:	2305      	movs	r3, #5
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	483c      	ldr	r0, [pc, #240]	; (8001908 <HAL_SPI_MspInit+0x1d0>)
 8001816:	f002 fcc3 	bl	80041a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	2024      	movs	r0, #36	; 0x24
 8001820:	f002 f8f0 	bl	8003a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001824:	2024      	movs	r0, #36	; 0x24
 8001826:	f002 f909 	bl	8003a3c <HAL_NVIC_EnableIRQ>
}
 800182a:	e060      	b.n	80018ee <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_SPI_MspInit+0x1d4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d15b      	bne.n	80018ee <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a24      	ldr	r2, [pc, #144]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800187e:	2310      	movs	r3, #16
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188e:	2306      	movs	r3, #6
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	4819      	ldr	r0, [pc, #100]	; (8001900 <HAL_SPI_MspInit+0x1c8>)
 800189a:	f002 fc81 	bl	80041a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800189e:	2304      	movs	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80018ae:	2307      	movs	r3, #7
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4813      	ldr	r0, [pc, #76]	; (8001908 <HAL_SPI_MspInit+0x1d0>)
 80018ba:	f002 fc71 	bl	80041a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018be:	2318      	movs	r3, #24
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ce:	2306      	movs	r3, #6
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	4619      	mov	r1, r3
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <HAL_SPI_MspInit+0x1d0>)
 80018da:	f002 fc61 	bl	80041a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2105      	movs	r1, #5
 80018e2:	2033      	movs	r0, #51	; 0x33
 80018e4:	f002 f88e 	bl	8003a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80018e8:	2033      	movs	r0, #51	; 0x33
 80018ea:	f002 f8a7 	bl	8003a3c <HAL_NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3738      	adds	r7, #56	; 0x38
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40003800 	.word	0x40003800
 8001908:	40020400 	.word	0x40020400
 800190c:	40003c00 	.word	0x40003c00

08001910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	2019      	movs	r0, #25
 8001926:	f002 f86d 	bl	8003a04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800192a:	2019      	movs	r0, #25
 800192c:	f002 f886 	bl	8003a3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_InitTick+0xa0>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_InitTick+0xa0>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6453      	str	r3, [r2, #68]	; 0x44
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_InitTick+0xa0>)
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001948:	f107 0210 	add.w	r2, r7, #16
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fc48 	bl	80061e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001958:	f004 fc32 	bl	80061c0 <HAL_RCC_GetPCLK2Freq>
 800195c:	4603      	mov	r3, r0
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_InitTick+0xa4>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3b01      	subs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_InitTick+0xa8>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_InitTick+0xac>)
 8001974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_InitTick+0xa8>)
 8001978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_InitTick+0xa8>)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_InitTick+0xa8>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_InitTick+0xa8>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HAL_InitTick+0xa8>)
 8001992:	f007 f95a 	bl	8008c4a <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d104      	bne.n	80019a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800199c:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_InitTick+0xa8>)
 800199e:	f007 f989 	bl	8008cb4 <HAL_TIM_Base_Start_IT>
 80019a2:	4603      	mov	r3, r0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	20010cd8 	.word	0x20010cd8
 80019bc:	40010000 	.word	0x40010000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019fa:	f007 f985 	bl	8008d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20010cd8 	.word	0x20010cd8

08001a08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <SPI1_IRQHandler+0x10>)
 8001a0e:	f006 fcb3 	bl	8008378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000cb50 	.word	0x2000cb50

08001a1c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <SPI2_IRQHandler+0x10>)
 8001a22:	f006 fca9 	bl	8008378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000880c 	.word	0x2000880c

08001a30 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <SDMMC1_IRQHandler+0x10>)
 8001a36:	f005 fa31 	bl	8006e9c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20008874 	.word	0x20008874

08001a44 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <SPI3_IRQHandler+0x10>)
 8001a4a:	f006 fc95 	bl	8008378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000a8fc 	.word	0x2000a8fc

08001a58 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA2_Stream3_IRQHandler+0x10>)
 8001a5e:	f002 f92b 	bl	8003cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000caf0 	.word	0x2000caf0

08001a6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <OTG_FS_IRQHandler+0x10>)
 8001a72:	f002 feb8 	bl	80047e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20012b00 	.word	0x20012b00

08001a80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA2_Stream6_IRQHandler+0x10>)
 8001a86:	f002 f917 	bl	8003cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20010c70 	.word	0x20010c70

08001a94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x50>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x16>
		heap_end = &end;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <_sbrk+0x50>)
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <_sbrk+0x54>)
 8001aa8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <_sbrk+0x50>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <_sbrk+0x50>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	466a      	mov	r2, sp
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d907      	bls.n	8001ace <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001abe:	f012 ff05 	bl	80148cc <__errno>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	e006      	b.n	8001adc <_sbrk+0x48>
	}

	heap_end += incr;
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <_sbrk+0x50>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <_sbrk+0x50>)
 8001ad8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200002b8 	.word	0x200002b8
 8001ae8:	20012f08 	.word	0x20012f08

08001aec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <SystemInit+0x5c>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <SystemInit+0x5c>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <SystemInit+0x60>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <SystemInit+0x60>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <SystemInit+0x60>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <SystemInit+0x60>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	490d      	ldr	r1, [pc, #52]	; (8001b4c <SystemInit+0x60>)
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <SystemInit+0x64>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <SystemInit+0x60>)
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <SystemInit+0x68>)
 8001b22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <SystemInit+0x60>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <SystemInit+0x60>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x60>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SystemInit+0x5c>)
 8001b38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3c:	609a      	str	r2, [r3, #8]
#endif
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	fef6ffff 	.word	0xfef6ffff
 8001b54:	24003010 	.word	0x24003010

08001b58 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	b0b3      	sub	sp, #204	; 0xcc
 8001b5c:	af06      	add	r7, sp, #24
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	72fb      	strb	r3, [r7, #11]
 8001b66:	4613      	mov	r3, r2
 8001b68:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	2296      	movs	r2, #150	; 0x96
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f012 feef 	bl	8014956 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8001b78:	7afb      	ldrb	r3, [r7, #11]
 8001b7a:	7aba      	ldrb	r2, [r7, #10]
 8001b7c:	f107 0010 	add.w	r0, r7, #16
 8001b80:	9202      	str	r2, [sp, #8]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2301      	movs	r3, #1
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a3c      	ldr	r2, [pc, #240]	; (8001c7c <logSensor+0x124>)
 8001b8c:	2196      	movs	r1, #150	; 0x96
 8001b8e:	f012 ffa3 	bl	8014ad8 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8001b92:	7abb      	ldrb	r3, [r7, #10]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d002      	beq.n	8001b9e <logSensor+0x46>
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d01d      	beq.n	8001bd8 <logSensor+0x80>
 8001b9c:	e04b      	b.n	8001c36 <logSensor+0xde>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fb31 	bl	8000210 <strlen>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	1898      	adds	r0, r3, r2
 8001bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001bc6:	6892      	ldr	r2, [r2, #8]
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4a2c      	ldr	r2, [pc, #176]	; (8001c80 <logSensor+0x128>)
 8001bd0:	2196      	movs	r1, #150	; 0x96
 8001bd2:	f012 ff81 	bl	8014ad8 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8001bd6:	e044      	b.n	8001c62 <logSensor+0x10a>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fb14 	bl	8000210 <strlen>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	189e      	adds	r6, r3, r2
 8001bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c02:	6952      	ldr	r2, [r2, #20]
 8001c04:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001c08:	6809      	ldr	r1, [r1, #0]
 8001c0a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001c0e:	6840      	ldr	r0, [r0, #4]
 8001c10:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8001c14:	68a4      	ldr	r4, [r4, #8]
 8001c16:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8001c1a:	69ad      	ldr	r5, [r5, #24]
 8001c1c:	9505      	str	r5, [sp, #20]
 8001c1e:	9404      	str	r4, [sp, #16]
 8001c20:	9003      	str	r0, [sp, #12]
 8001c22:	9102      	str	r1, [sp, #8]
 8001c24:	9201      	str	r2, [sp, #4]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <logSensor+0x12c>)
 8001c2c:	2196      	movs	r1, #150	; 0x96
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f012 ff52 	bl	8014ad8 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
	}
		break;
 8001c34:	e015      	b.n	8001c62 <logSensor+0x10a>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fae8 	bl	8000210 <strlen>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4413      	add	r3, r2
 8001c48:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <logSensor+0x130>)
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c50:	6028      	str	r0, [r5, #0]
 8001c52:	6069      	str	r1, [r5, #4]
 8001c54:	60aa      	str	r2, [r5, #8]
 8001c56:	60eb      	str	r3, [r5, #12]
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	6128      	str	r0, [r5, #16]
 8001c5c:	7923      	ldrb	r3, [r4, #4]
 8001c5e:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8001c60:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <logSensor+0x134>)
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	f107 0110 	add.w	r1, r7, #16
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f00e fdff 	bl	8010870 <osMessageQueuePut>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	37b4      	adds	r7, #180	; 0xb4
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7c:	08016474 	.word	0x08016474
 8001c80:	08016484 	.word	0x08016484
 8001c84:	08016494 	.word	0x08016494
 8001c88:	080164b4 	.word	0x080164b4
 8001c8c:	2000cbb4 	.word	0x2000cbb4

08001c90 <logEstimatorVar>:
			rocket_state);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, int32_t estimator_var_data) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0aa      	sub	sp, #168	; 0xa8
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	log_entry_t log_entry = { 0 };
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	2296      	movs	r2, #150	; 0x96
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f012 fe57 	bl	8014956 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld\n", ts, ESTIMATOR_VAR,
 8001ca8:	f107 0008 	add.w	r0, r7, #8
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <logEstimatorVar+0x48>)
 8001cb8:	2196      	movs	r1, #150	; 0x96
 8001cba:	f012 ff0d 	bl	8014ad8 <sniprintf>
			estimator_var_data);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <logEstimatorVar+0x4c>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	f107 0108 	add.w	r1, r7, #8
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f00e fdd1 	bl	8010870 <osMessageQueuePut>
 8001cce:	4603      	mov	r3, r0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	37a0      	adds	r7, #160	; 0xa0
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	080164d8 	.word	0x080164d8
 8001cdc:	2000cbb4 	.word	0x2000cbb4

08001ce0 <logMsg>:

osStatus_t logMsg(timestamp_t ts, char *msg) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0aa      	sub	sp, #168	; 0xa8
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	log_entry_t log_entry = { 0 };
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	2296      	movs	r2, #150	; 0x96
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f012 fe2f 	bl	8014956 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%s\n", ts, MSG, msg);
 8001cf8:	f107 0008 	add.w	r0, r7, #8
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2304      	movs	r3, #4
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <logMsg+0x48>)
 8001d08:	2196      	movs	r1, #150	; 0x96
 8001d0a:	f012 fee5 	bl	8014ad8 <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <logMsg+0x4c>)
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	f107 0108 	add.w	r1, r7, #8
 8001d16:	2300      	movs	r3, #0
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f00e fda9 	bl	8010870 <osMessageQueuePut>
 8001d1e:	4603      	mov	r3, r0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	37a0      	adds	r7, #160	; 0xa0
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	080164e4 	.word	0x080164e4
 8001d2c:	2000cbb4 	.word	0x2000cbb4

08001d30 <UsbPrint>:

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8001d30:	b40f      	push	{r0, r1, r2, r3}
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <UsbPrint+0x60>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00e face 	bl	80102e4 <osMutexAcquire>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	21c8      	movs	r1, #200	; 0xc8
 8001d5a:	480e      	ldr	r0, [pc, #56]	; (8001d94 <UsbPrint+0x64>)
 8001d5c:	f012 ff1c 	bl	8014b98 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <UsbPrint+0x64>)
 8001d62:	f7fe fa55 	bl	8000210 <strlen>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <UsbPrint+0x64>)
 8001d6e:	f012 f903 	bl	8013f78 <CDC_Transmit_FS>
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <UsbPrint+0x60>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00e fb10 	bl	80103a0 <osMutexRelease>
	}
#endif
	return ret;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d8c:	b004      	add	sp, #16
 8001d8e:	4770      	bx	lr
 8001d90:	2000ca90 	.word	0x2000ca90
 8001d94:	2000a960 	.word	0x2000a960

08001d98 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4618      	mov	r0, r3
 8001daa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001dae:	461a      	mov	r2, r3
 8001db0:	2100      	movs	r1, #0
 8001db2:	f012 fdd0 	bl	8014956 <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	6053      	str	r3, [r2, #4]
 8001dd2:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001e04:	f00e f88e 	bl	800ff24 <osKernelGetTickCount>
 8001e08:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8001e0c:	f00e f8b2 	bl	800ff74 <osKernelGetTickFreq>
 8001e10:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8001e14:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001e18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 8001e22:	f107 021c 	add.w	r2, r7, #28
 8001e26:	f107 0110 	add.w	r1, r7, #16
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	4618      	mov	r0, r3
 8001e30:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 8001e34:	f000 f8a8 	bl	8001f88 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8001e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e48:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eeb1 7a67 	vneg.f32	s14, s15
 8001e58:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e68:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e70:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e7c:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8001e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e84:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001e88:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 8001e94:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001e98:	f7fe fb76 	bl	8000588 <__aeabi_f2d>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001f60 <vTaskController+0x1c8>
 8001ea4:	ec44 3b10 	vmov	d0, r3, r4
 8001ea8:	f013 f9ce 	bl	8015248 <fmin>
 8001eac:	eeb0 7a40 	vmov.f32	s14, s0
 8001eb0:	eef0 7a60 	vmov.f32	s15, s1
 8001eb4:	eeb0 1a47 	vmov.f32	s2, s14
 8001eb8:	eef0 1a67 	vmov.f32	s3, s15
 8001ebc:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001f68 <vTaskController+0x1d0>
 8001ec0:	f013 f99b 	bl	80151fa <fmax>
 8001ec4:	ec54 3b10 	vmov	r3, r4, d0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	4621      	mov	r1, r4
 8001ecc:	f7fe fe84 	bl	8000bd8 <__aeabi_d2f>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 8001ed6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ee2:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eea:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	ee17 0a90 	vmov	r0, s15
 8001ef6:	f7fe fb47 	bl	8000588 <__aeabi_f2d>
 8001efa:	4603      	mov	r3, r0
 8001efc:	460c      	mov	r4, r1
 8001efe:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001f70 <vTaskController+0x1d8>
 8001f02:	ec44 3b10 	vmov	d0, r3, r4
 8001f06:	f013 f99f 	bl	8015248 <fmin>
 8001f0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f0e:	eef0 7a60 	vmov.f32	s15, s1
 8001f12:	eeb0 1a47 	vmov.f32	s2, s14
 8001f16:	eef0 1a67 	vmov.f32	s3, s15
 8001f1a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001f78 <vTaskController+0x1e0>
 8001f1e:	f013 f96c 	bl	80151fa <fmax>
 8001f22:	ec54 3b10 	vmov	r3, r4, d0
 8001f26:	4618      	mov	r0, r3
 8001f28:	4621      	mov	r1, r4
 8001f2a:	f7fe fe55 	bl	8000bd8 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8001f34:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f38:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

		//char* msg = (char*) malloc(30 * sizeof(char));
		//sprintf(msg, "Controlling sth...");
		logMsg(tick_count, "Controlling something...");
 8001f3c:	4910      	ldr	r1, [pc, #64]	; (8001f80 <vTaskController+0x1e8>)
 8001f3e:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f42:	f7ff fecd 	bl	8001ce0 <logMsg>
		logEstimatorVar(tick_count, 20202020);
 8001f46:	490f      	ldr	r1, [pc, #60]	; (8001f84 <vTaskController+0x1ec>)
 8001f48:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f4c:	f7ff fea0 	bl	8001c90 <logEstimatorVar>
		/* Sleep */
		osDelayUntil(tick_count);
 8001f50:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f54:	f00e f8ec 	bl	8010130 <osDelayUntil>
		tick_count += tick_update;
 8001f58:	e75c      	b.n	8001e14 <vTaskController+0x7c>
 8001f5a:	bf00      	nop
 8001f5c:	f3af 8000 	nop.w
 8001f60:	00000000 	.word	0x00000000
 8001f64:	3ff00000 	.word	0x3ff00000
	...
 8001f74:	40240000 	.word	0x40240000
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	c0240000 	.word	0xc0240000
 8001f80:	080164f0 	.word	0x080164f0
 8001f84:	01344224 	.word	0x01344224

08001f88 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f92:	60b8      	str	r0, [r7, #8]
 8001f94:	6079      	str	r1, [r7, #4]
 8001f96:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e07b      	b.n	800209a <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7fe faf0 	bl	8000588 <__aeabi_f2d>
 8001fa8:	4604      	mov	r4, r0
 8001faa:	460d      	mov	r5, r1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f1c3 031d 	rsb	r3, r3, #29
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fad6 	bl	8000564 <__aeabi_i2d>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	ec43 2b11 	vmov	d1, r2, r3
 8001fc0:	ec45 4b10 	vmov	d0, r4, r5
 8001fc4:	f013 f994 	bl	80152f0 <pow>
 8001fc8:	ec54 3b10 	vmov	r3, r4, d0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	4621      	mov	r1, r4
 8001fd0:	f7fe fde2 	bl	8000b98 <__aeabi_d2uiz>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd3 6a00 	vldr	s13, [r3]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	edd3 6a00 	vldr	s13, [r3]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002030:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3308      	adds	r3, #8
 8002038:	ed93 7a00 	vldr	s14, [r3]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	edd3 6a00 	vldr	s13, [r3]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3308      	adds	r3, #8
 800205e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002062:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	ed93 7a00 	vldr	s14, [r3]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	edd3 6a00 	vldr	s13, [r3]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b1d      	cmp	r3, #29
 800209e:	dd80      	ble.n	8001fa2 <CalcPolynomial+0x1a>
	}

}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}

080020a8 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b0cc      	sub	sp, #304	; 0x130
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80020b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 80020c4:	48c3      	ldr	r0, [pc, #780]	; (80023d4 <vTaskSdCard+0x32c>)
 80020c6:	f7ff fe33 	bl	8001d30 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 80020ca:	48c3      	ldr	r0, [pc, #780]	; (80023d8 <vTaskSdCard+0x330>)
 80020cc:	f7ff fe30 	bl	8001d30 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 80020d0:	2201      	movs	r2, #1
 80020d2:	49c2      	ldr	r1, [pc, #776]	; (80023dc <vTaskSdCard+0x334>)
 80020d4:	48c2      	ldr	r0, [pc, #776]	; (80023e0 <vTaskSdCard+0x338>)
 80020d6:	f00c fe19 	bl	800ed0c <f_mount>
 80020da:	4603      	mov	r3, r0
 80020dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80020e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00b      	beq.n	8002100 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 80020e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020ec:	4619      	mov	r1, r3
 80020ee:	48bd      	ldr	r0, [pc, #756]	; (80023e4 <vTaskSdCard+0x33c>)
 80020f0:	f7ff fe1e 	bl	8001d30 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 80020f4:	4bbc      	ldr	r3, [pc, #752]	; (80023e8 <vTaskSdCard+0x340>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 80020fa:	2064      	movs	r0, #100	; 0x64
 80020fc:	f00d ffea 	bl	80100d4 <osDelay>
		}
	} while (res != FR_OK);
 8002100:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e3      	bne.n	80020d0 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8002108:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 80a9 	bne.w	8002264 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8002112:	48b6      	ldr	r0, [pc, #728]	; (80023ec <vTaskSdCard+0x344>)
 8002114:	f7ff fe0c 	bl	8001d30 <UsbPrint>

		unsigned int file_number = 1;
 8002118:	2301      	movs	r3, #1
 800211a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 800211e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002122:	f107 0008 	add.w	r0, r7, #8
 8002126:	4bb2      	ldr	r3, [pc, #712]	; (80023f0 <vTaskSdCard+0x348>)
 8002128:	4aac      	ldr	r2, [pc, #688]	; (80023dc <vTaskSdCard+0x334>)
 800212a:	f00d fda7 	bl	800fc7c <f_findfirst>
 800212e:	4603      	mov	r3, r0
 8002130:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8002134:	e02b      	b.n	800218e <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8002136:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800213a:	3b30      	subs	r3, #48	; 0x30
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8002142:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002146:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	18ca      	adds	r2, r1, r3
 8002154:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002158:	3b30      	subs	r3, #48	; 0x30
 800215a:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800215c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			if (current_file_number + 1 > file_number) {
 8002160:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002164:	3301      	adds	r3, #1
 8002166:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800216a:	429a      	cmp	r2, r3
 800216c:	d204      	bcs.n	8002178 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 800216e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002172:	3301      	adds	r3, #1
 8002174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8002178:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f00d fd52 	bl	800fc2c <f_findnext>
 8002188:	4603      	mov	r3, r0
 800218a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 800218e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <vTaskSdCard+0xf6>
 8002196:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1cb      	bne.n	8002136 <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 800219e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 80021a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021aa:	4619      	mov	r1, r3
 80021ac:	4891      	ldr	r0, [pc, #580]	; (80023f4 <vTaskSdCard+0x34c>)
 80021ae:	f7ff fdbf 	bl	8001d30 <UsbPrint>
					res);
			goto resetSDCard;
 80021b2:	e78a      	b.n	80020ca <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 80021b4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021b8:	4a8f      	ldr	r2, [pc, #572]	; (80023f8 <vTaskSdCard+0x350>)
 80021ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80021bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80021c0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80021c4:	4b8d      	ldr	r3, [pc, #564]	; (80023fc <vTaskSdCard+0x354>)
 80021c6:	fba3 2301 	umull	r2, r3, r3, r1
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	1aca      	subs	r2, r1, r3
 80021d6:	b2d3      	uxtb	r3, r2
 80021d8:	3330      	adds	r3, #48	; 0x30
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80021e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021e4:	4a85      	ldr	r2, [pc, #532]	; (80023fc <vTaskSdCard+0x354>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	08d9      	lsrs	r1, r3, #3
 80021ec:	4b83      	ldr	r3, [pc, #524]	; (80023fc <vTaskSdCard+0x354>)
 80021ee:	fba3 2301 	umull	r2, r3, r3, r1
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	1aca      	subs	r2, r1, r3
 80021fe:	b2d3      	uxtb	r3, r2
 8002200:	3330      	adds	r3, #48	; 0x30
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8002208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800220c:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <vTaskSdCard+0x358>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0959      	lsrs	r1, r3, #5
 8002214:	4b79      	ldr	r3, [pc, #484]	; (80023fc <vTaskSdCard+0x354>)
 8002216:	fba3 2301 	umull	r2, r3, r3, r1
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	1aca      	subs	r2, r1, r3
 8002226:	b2d3      	uxtb	r3, r2
 8002228:	3330      	adds	r3, #48	; 0x30
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8002230:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002234:	4619      	mov	r1, r3
 8002236:	4873      	ldr	r0, [pc, #460]	; (8002404 <vTaskSdCard+0x35c>)
 8002238:	f7ff fd7a 	bl	8001d30 <UsbPrint>

		res = f_closedir(&dj);
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	4618      	mov	r0, r3
 8002242:	f00d fc85 	bl	800fb50 <f_closedir>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 800224c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8002254:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002258:	4619      	mov	r1, r3
 800225a:	486b      	ldr	r0, [pc, #428]	; (8002408 <vTaskSdCard+0x360>)
 800225c:	f7ff fd68 	bl	8001d30 <UsbPrint>
			goto resetSDCard;
 8002260:	bf00      	nop
 8002262:	e732      	b.n	80020ca <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8002264:	4869      	ldr	r0, [pc, #420]	; (800240c <vTaskSdCard+0x364>)
 8002266:	f7ff fd63 	bl	8001d30 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 800226a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800226e:	2212      	movs	r2, #18
 8002270:	4619      	mov	r1, r3
 8002272:	4867      	ldr	r0, [pc, #412]	; (8002410 <vTaskSdCard+0x368>)
 8002274:	f00c fdae 	bl	800edd4 <f_open>
 8002278:	4603      	mov	r3, r0
 800227a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 800227e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8002286:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800228a:	4619      	mov	r1, r3
 800228c:	4861      	ldr	r0, [pc, #388]	; (8002414 <vTaskSdCard+0x36c>)
 800228e:	f7ff fd4f 	bl	8001d30 <UsbPrint>
		goto resetSDCard;
 8002292:	e71a      	b.n	80020ca <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8002294:	4860      	ldr	r0, [pc, #384]	; (8002418 <vTaskSdCard+0x370>)
 8002296:	f7ff fd4b 	bl	8001d30 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <vTaskSdCard+0x368>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4619      	mov	r1, r3
 80022a0:	485b      	ldr	r0, [pc, #364]	; (8002410 <vTaskSdCard+0x368>)
 80022a2:	f00d f989 	bl	800f5b8 <f_lseek>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 80022ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 80022b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022b8:	4619      	mov	r1, r3
 80022ba:	4858      	ldr	r0, [pc, #352]	; (800241c <vTaskSdCard+0x374>)
 80022bc:	f7ff fd38 	bl	8001d30 <UsbPrint>
		goto resetSDCard;
 80022c0:	e703      	b.n	80020ca <vTaskSdCard+0x22>
	}

	int msgCounter = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <vTaskSdCard+0x378>)
 80022ca:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80022ce:	461d      	mov	r5, r3
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022d8:	c407      	stmia	r4!, {r0, r1, r2}
 80022da:	8023      	strh	r3, [r4, #0]
 80022dc:	3402      	adds	r4, #2
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	7023      	strb	r3, [r4, #0]
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 80022ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fd ff8c 	bl	8000210 <strlen>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <vTaskSdCard+0x37c>)
 8002300:	4843      	ldr	r0, [pc, #268]	; (8002410 <vTaskSdCard+0x368>)
 8002302:	f00c ff2c 	bl	800f15e <f_write>
 8002306:	4603      	mov	r3, r0
 8002308:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 800230c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8002314:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002318:	4619      	mov	r1, r3
 800231a:	4843      	ldr	r0, [pc, #268]	; (8002428 <vTaskSdCard+0x380>)
 800231c:	f7ff fd08 	bl	8001d30 <UsbPrint>
		goto resetSDCard;
 8002320:	e6d3      	b.n	80020ca <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8002322:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002326:	2296      	movs	r2, #150	; 0x96
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f012 fb13 	bl	8014956 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8002330:	4b3e      	ldr	r3, [pc, #248]	; (800242c <vTaskSdCard+0x384>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	2200      	movs	r2, #0
 800233e:	f00e fb0b 	bl	8010958 <osMessageQueueGet>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f3      	bne.n	8002330 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8002348:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800234c:	4618      	mov	r0, r3
 800234e:	f7fd ff5f 	bl	8000210 <strlen>
 8002352:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			if (num_bytes > 0) {
 8002356:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 800235e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <vTaskSdCard+0x37c>)
 8002364:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002368:	4829      	ldr	r0, [pc, #164]	; (8002410 <vTaskSdCard+0x368>)
 800236a:	f00c fef8 	bl	800f15e <f_write>
 800236e:	4603      	mov	r3, r0
 8002370:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8002374:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 800237c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002380:	4619      	mov	r1, r3
 8002382:	4829      	ldr	r0, [pc, #164]	; (8002428 <vTaskSdCard+0x380>)
 8002384:	f7ff fcd4 	bl	8001d30 <UsbPrint>
							res);
					goto resetSDCard;
 8002388:	e69f      	b.n	80020ca <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 800238a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800238e:	3301      	adds	r3, #1
 8002390:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8002394:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002398:	2b7f      	cmp	r3, #127	; 0x7f
 800239a:	ddc9      	ble.n	8002330 <vTaskSdCard+0x288>
				msgCounter = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 80023a2:	4823      	ldr	r0, [pc, #140]	; (8002430 <vTaskSdCard+0x388>)
 80023a4:	f7ff fcc4 	bl	8001d30 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80023a8:	2108      	movs	r1, #8
 80023aa:	4822      	ldr	r0, [pc, #136]	; (8002434 <vTaskSdCard+0x38c>)
 80023ac:	f002 f8bb 	bl	8004526 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 80023b0:	4817      	ldr	r0, [pc, #92]	; (8002410 <vTaskSdCard+0x368>)
 80023b2:	f00d f878 	bl	800f4a6 <f_sync>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 80023bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0b5      	beq.n	8002330 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 80023c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023c8:	4619      	mov	r1, r3
 80023ca:	481b      	ldr	r0, [pc, #108]	; (8002438 <vTaskSdCard+0x390>)
 80023cc:	f7ff fcb0 	bl	8001d30 <UsbPrint>
					goto resetSDCard;
 80023d0:	e67b      	b.n	80020ca <vTaskSdCard+0x22>
 80023d2:	bf00      	nop
 80023d4:	0801650c 	.word	0x0801650c
 80023d8:	08016534 	.word	0x08016534
 80023dc:	08016558 	.word	0x08016558
 80023e0:	20010f48 	.word	0x20010f48
 80023e4:	0801655c 	.word	0x0801655c
 80023e8:	200002ec 	.word	0x200002ec
 80023ec:	08016588 	.word	0x08016588
 80023f0:	080165ac 	.word	0x080165ac
 80023f4:	080165b8 	.word	0x080165b8
 80023f8:	080165f0 	.word	0x080165f0
 80023fc:	cccccccd 	.word	0xcccccccd
 8002400:	51eb851f 	.word	0x51eb851f
 8002404:	080165fc 	.word	0x080165fc
 8002408:	08016620 	.word	0x08016620
 800240c:	08016650 	.word	0x08016650
 8002410:	20010d18 	.word	0x20010d18
 8002414:	08016674 	.word	0x08016674
 8002418:	080166a0 	.word	0x080166a0
 800241c:	080166c8 	.word	0x080166c8
 8002420:	0801676c 	.word	0x0801676c
 8002424:	2001117c 	.word	0x2001117c
 8002428:	080166f8 	.word	0x080166f8
 800242c:	2000cbb4 	.word	0x2000cbb4
 8002430:	08016724 	.word	0x08016724
 8002434:	40020800 	.word	0x40020800
 8002438:	08016744 	.word	0x08016744

0800243c <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 800243c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af04      	add	r7, sp, #16
 8002442:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8002444:	f00d fd6e 	bl	800ff24 <osKernelGetTickCount>
 8002448:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 800244a:	f00d fd93 	bl	800ff74 <osKernelGetTickFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <vTaskSensRead+0x144>)
 8002452:	fba3 2302 	umull	r2, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	60bb      	str	r3, [r7, #8]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8002462:	2228      	movs	r2, #40	; 0x28
 8002464:	4947      	ldr	r1, [pc, #284]	; (8002584 <vTaskSensRead+0x148>)
 8002466:	4848      	ldr	r0, [pc, #288]	; (8002588 <vTaskSensRead+0x14c>)
 8002468:	f005 fe2e 	bl	80080c8 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <vTaskSensRead+0x150>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	211e      	movs	r1, #30
 8002472:	4618      	mov	r0, r3
 8002474:	f00d ff36 	bl	80102e4 <osMutexAcquire>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <vTaskSensRead+0x6c>
			sb3_baro = sb3_data.baro;
 800247e:	4b44      	ldr	r3, [pc, #272]	; (8002590 <vTaskSensRead+0x154>)
 8002480:	4a40      	ldr	r2, [pc, #256]	; (8002584 <vTaskSensRead+0x148>)
 8002482:	ca07      	ldmia	r2, {r0, r1, r2}
 8002484:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8002488:	4a42      	ldr	r2, [pc, #264]	; (8002594 <vTaskSensRead+0x158>)
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <vTaskSensRead+0x148>)
 800248c:	4615      	mov	r5, r2
 800248e:	f103 040c 	add.w	r4, r3, #12
 8002492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002496:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800249a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <vTaskSensRead+0x150>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f00d ff7c 	bl	80103a0 <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 80024a8:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <vTaskSensRead+0x15c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	211e      	movs	r1, #30
 80024ae:	4618      	mov	r0, r3
 80024b0:	f00d ff18 	bl	80102e4 <osMutexAcquire>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d114      	bne.n	80024e4 <vTaskSensRead+0xa8>
			sb2_baro = sb3_data.baro;
 80024ba:	4b38      	ldr	r3, [pc, #224]	; (800259c <vTaskSensRead+0x160>)
 80024bc:	4a31      	ldr	r2, [pc, #196]	; (8002584 <vTaskSensRead+0x148>)
 80024be:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 80024c4:	4a36      	ldr	r2, [pc, #216]	; (80025a0 <vTaskSensRead+0x164>)
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <vTaskSensRead+0x148>)
 80024c8:	4615      	mov	r5, r2
 80024ca:	f103 040c 	add.w	r4, r3, #12
 80024ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 80024da:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <vTaskSensRead+0x15c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f00d ff5e 	bl	80103a0 <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <vTaskSensRead+0x168>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	211e      	movs	r1, #30
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00d fefa 	bl	80102e4 <osMutexAcquire>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d114      	bne.n	8002520 <vTaskSensRead+0xe4>
			sb1_baro = sb3_data.baro;
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <vTaskSensRead+0x16c>)
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <vTaskSensRead+0x148>)
 80024fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80024fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <vTaskSensRead+0x170>)
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <vTaskSensRead+0x148>)
 8002504:	4615      	mov	r5, r2
 8002506:	f103 040c 	add.w	r4, r3, #12
 800250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002512:	e885 0007 	stmia.w	r5, {r0, r1, r2}
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <vTaskSensRead+0x168>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f00d ff40 	bl	80103a0 <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <vTaskSensRead+0x154>)
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <vTaskSensRead+0x154>)
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4821      	ldr	r0, [pc, #132]	; (80025b0 <vTaskSensRead+0x174>)
 800252c:	f7ff fc00 	bl	8001d30 <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <vTaskSensRead+0x158>)
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <vTaskSensRead+0x158>)
 8002536:	685d      	ldr	r5, [r3, #4]
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <vTaskSensRead+0x158>)
 800253a:	689e      	ldr	r6, [r3, #8]
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <vTaskSensRead+0x158>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <vTaskSensRead+0x158>)
 8002542:	6912      	ldr	r2, [r2, #16]
 8002544:	4913      	ldr	r1, [pc, #76]	; (8002594 <vTaskSensRead+0x158>)
 8002546:	6949      	ldr	r1, [r1, #20]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	9003      	str	r0, [sp, #12]
 800254c:	9102      	str	r1, [sp, #8]
 800254e:	9201      	str	r2, [sp, #4]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4633      	mov	r3, r6
 8002554:	462a      	mov	r2, r5
 8002556:	4621      	mov	r1, r4
 8002558:	4816      	ldr	r0, [pc, #88]	; (80025b4 <vTaskSensRead+0x178>)
 800255a:	f7ff fbe9 	bl	8001d30 <UsbPrint>
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
				sb3_imu.acc_z, tick_count);

		logSensor(tick_count, 3, BARO, &sb3_baro);
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <vTaskSensRead+0x154>)
 8002560:	2201      	movs	r2, #1
 8002562:	2103      	movs	r1, #3
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff faf7 	bl	8001b58 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <vTaskSensRead+0x158>)
 800256c:	2202      	movs	r2, #2
 800256e:	2103      	movs	r1, #3
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7ff faf1 	bl	8001b58 <logSensor>

		osDelayUntil(tick_count);
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f00d fdda 	bl	8010130 <osDelayUntil>
		tick_count += tick_update;
 800257c:	e76d      	b.n	800245a <vTaskSensRead+0x1e>
 800257e:	bf00      	nop
 8002580:	51eb851f 	.word	0x51eb851f
 8002584:	20000290 	.word	0x20000290
 8002588:	2000a8fc 	.word	0x2000a8fc
 800258c:	2000aa30 	.word	0x2000aa30
 8002590:	20000268 	.word	0x20000268
 8002594:	20000274 	.word	0x20000274
 8002598:	20010cd4 	.word	0x20010cd4
 800259c:	20000240 	.word	0x20000240
 80025a0:	2000024c 	.word	0x2000024c
 80025a4:	2000aa2c 	.word	0x2000aa2c
 80025a8:	20000218 	.word	0x20000218
 80025ac:	20000224 	.word	0x20000224
 80025b0:	0801678c 	.word	0x0801678c
 80025b4:	080167ac 	.word	0x080167ac

080025b8 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 80025c0:	2228      	movs	r2, #40	; 0x28
 80025c2:	4904      	ldr	r1, [pc, #16]	; (80025d4 <HAL_SPI_RxCpltCallback+0x1c>)
 80025c4:	4804      	ldr	r0, [pc, #16]	; (80025d8 <HAL_SPI_RxCpltCallback+0x20>)
 80025c6:	f005 fd7f 	bl	80080c8 <HAL_SPI_Receive_IT>

}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000290 	.word	0x20000290
 80025d8:	2000a8fc 	.word	0x2000a8fc

080025dc <vTaskStateEst>:
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]);

void vTaskStateEst(void *argument) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;

	/* Variables */

	/* Fixed Variables */
	float Ad[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80025e8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80025ec:	2224      	movs	r2, #36	; 0x24
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f012 f9b0 	bl	8014956 <memset>
	float Ad_T[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80025f6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80025fa:	2224      	movs	r2, #36	; 0x24
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f012 f9a9 	bl	8014956 <memset>
	float Bd[NUMBER_STATES][NUMBER_INPUTS] = { 0 };
 8002604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
	float Gd[NUMBER_STATES][NUMBER_NOISE] = { 0 };
 8002610:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
	float Gd_T[NUMBER_NOISE][NUMBER_STATES] = { 0 };
 800261c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
	float H[NUMBER_SENSOR][NUMBER_STATES] = { 0 };
 8002628:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800262c:	4618      	mov	r0, r3
 800262e:	2324      	movs	r3, #36	; 0x24
 8002630:	461a      	mov	r2, r3
 8002632:	2100      	movs	r1, #0
 8002634:	f012 f98f 	bl	8014956 <memset>
	float H_T[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8002638:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800263c:	4618      	mov	r0, r3
 800263e:	2324      	movs	r3, #36	; 0x24
 8002640:	461a      	mov	r2, r3
 8002642:	2100      	movs	r1, #0
 8002644:	f012 f987 	bl	8014956 <memset>
	float Q[NUMBER_NOISE][NUMBER_NOISE] = { 0 };
 8002648:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
	float R[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8002652:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002656:	4618      	mov	r0, r3
 8002658:	2324      	movs	r3, #36	; 0x24
 800265a:	461a      	mov	r2, r3
 800265c:	2100      	movs	r1, #0
 800265e:	f012 f97a 	bl	8014956 <memset>
	float u[NUMBER_INPUTS] = { 0 };
 8002662:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

	/* State Variables */
	float x_priori[NUMBER_STATES] = { 0 };
 800266c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002670:	461a      	mov	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	6053      	str	r3, [r2, #4]
 8002678:	6093      	str	r3, [r2, #8]
	float x_est[NUMBER_STATES] = { 0 };
 800267a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800267e:	461a      	mov	r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	6053      	str	r3, [r2, #4]
 8002686:	6093      	str	r3, [r2, #8]
	float P_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8002688:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800268c:	4618      	mov	r0, r3
 800268e:	2324      	movs	r3, #36	; 0x24
 8002690:	461a      	mov	r2, r3
 8002692:	2100      	movs	r1, #0
 8002694:	f012 f95f 	bl	8014956 <memset>
	float P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8002698:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800269c:	4618      	mov	r0, r3
 800269e:	2324      	movs	r3, #36	; 0x24
 80026a0:	461a      	mov	r2, r3
 80026a2:	2100      	movs	r1, #0
 80026a4:	f012 f957 	bl	8014956 <memset>
	float State_Inovation[NUMBER_SENSOR] = { 0 };
 80026a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026ac:	461a      	mov	r2, r3
 80026ae:	2300      	movs	r3, #0
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	6053      	str	r3, [r2, #4]
 80026b4:	6093      	str	r3, [r2, #8]
	float Cov_Inovation[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80026b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026ba:	4618      	mov	r0, r3
 80026bc:	2324      	movs	r3, #36	; 0x24
 80026be:	461a      	mov	r2, r3
 80026c0:	2100      	movs	r1, #0
 80026c2:	f012 f948 	bl	8014956 <memset>
	float Cov_Inovation_Inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80026c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80026ca:	4618      	mov	r0, r3
 80026cc:	2324      	movs	r3, #36	; 0x24
 80026ce:	461a      	mov	r2, r3
 80026d0:	2100      	movs	r1, #0
 80026d2:	f012 f940 	bl	8014956 <memset>
	float K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 80026d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026da:	4618      	mov	r0, r3
 80026dc:	2324      	movs	r3, #36	; 0x24
 80026de:	461a      	mov	r2, r3
 80026e0:	2100      	movs	r1, #0
 80026e2:	f012 f938 	bl	8014956 <memset>
	float measurements[NUMBER_SENSOR] = { 0 };
 80026e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026ea:	461a      	mov	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	6053      	str	r3, [r2, #4]
 80026f2:	6093      	str	r3, [r2, #8]

	/* Placeholder Variables */
	float Placeholder_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80026f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026f8:	4618      	mov	r0, r3
 80026fa:	2324      	movs	r3, #36	; 0x24
 80026fc:	461a      	mov	r2, r3
 80026fe:	2100      	movs	r1, #0
 8002700:	f012 f929 	bl	8014956 <memset>
	float Placeholder_est[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8002704:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002708:	4618      	mov	r0, r3
 800270a:	2324      	movs	r3, #36	; 0x24
 800270c:	461a      	mov	r2, r3
 800270e:	2100      	movs	r1, #0
 8002710:	f012 f921 	bl	8014956 <memset>
	float Placeholder_K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8002714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002718:	4618      	mov	r0, r3
 800271a:	2324      	movs	r3, #36	; 0x24
 800271c:	461a      	mov	r2, r3
 800271e:	2100      	movs	r1, #0
 8002720:	f012 f919 	bl	8014956 <memset>
	float Placeholder_P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8002724:	f107 0308 	add.w	r3, r7, #8
 8002728:	4618      	mov	r0, r3
 800272a:	2324      	movs	r3, #36	; 0x24
 800272c:	461a      	mov	r2, r3
 800272e:	2100      	movs	r1, #0
 8002730:	f012 f911 	bl	8014956 <memset>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8002734:	f00d fbf6 	bl	800ff24 <osKernelGetTickCount>
 8002738:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 800273c:	f00d fc1a 	bl	800ff74 <osKernelGetTickFreq>
 8002740:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	for (;;) {
		tick_count += tick_update;
 8002744:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8002748:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800274c:	4413      	add	r3, r2
 800274e:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4

		/* Prediction Step */
		/* Calculation of x_priori */
		memset(x_priori, 0, NUMBER_STATES*sizeof(x_priori[0]));
 8002752:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002756:	220c      	movs	r2, #12
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f012 f8fb 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8002766:	e071      	b.n	800284c <vTaskStateEst+0x270>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800276e:	e02f      	b.n	80027d0 <vTaskStateEst+0x1f4>
				x_priori[j] += Ad[j][i] * x_est[i];
 8002770:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002774:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8002796:	4413      	add	r3, r2
 8002798:	3ba0      	subs	r3, #160	; 0xa0
 800279a:	edd3 6a00 	vldr	s13, [r3]
 800279e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80027a2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80027ba:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 80027c6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027ca:	3301      	adds	r3, #1
 80027cc:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80027d0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	ddcb      	ble.n	8002770 <vTaskStateEst+0x194>
			}
			for(int k = 0; k < NUMBER_INPUTS; k++){
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80027de:	e02c      	b.n	800283a <vTaskStateEst+0x25e>
				x_priori[j] += Bd[j][k] * u[k];
 80027e0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80027e4:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	ed93 7a00 	vldr	s14, [r3]
 80027f0:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80027f4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8002800:	4413      	add	r3, r2
 8002802:	3bd0      	subs	r3, #208	; 0xd0
 8002804:	edd3 6a00 	vldr	s13, [r3]
 8002808:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800280c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002820:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002824:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_INPUTS; k++){
 8002830:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002834:	3301      	adds	r3, #1
 8002836:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 800283a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800283e:	2b00      	cmp	r3, #0
 8002840:	ddce      	ble.n	80027e0 <vTaskStateEst+0x204>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002842:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002846:	3301      	adds	r3, #1
 8002848:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800284c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002850:	2b02      	cmp	r3, #2
 8002852:	dd89      	ble.n	8002768 <vTaskStateEst+0x18c>
			}
		}

		/* Calculation of P_priori */
		/* Ad * P_est_prior * Ad_T */
		memset(Placeholder_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_priori[0][0]));
 8002854:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002858:	2224      	movs	r2, #36	; 0x24
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f012 f87a 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8002868:	e05b      	b.n	8002922 <vTaskStateEst+0x346>
			for(int i = 0; i < NUMBER_STATES; i++){
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002870:	e04e      	b.n	8002910 <vTaskStateEst+0x334>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002878:	e041      	b.n	80028fe <vTaskStateEst+0x322>
					Placeholder_priori[j][i] +=  Ad[j][k] * P_est[k][i];
 800287a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800287e:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80028ac:	4413      	add	r3, r2
 80028ae:	3ba0      	subs	r3, #160	; 0xa0
 80028b0:	edd3 6a00 	vldr	s13, [r3]
 80028b4:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80028b8:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80028dc:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 80028f4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80028f8:	3301      	adds	r3, #1
 80028fa:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80028fe:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002902:	2b02      	cmp	r3, #2
 8002904:	ddb9      	ble.n	800287a <vTaskStateEst+0x29e>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002906:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800290a:	3301      	adds	r3, #1
 800290c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002910:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8002914:	2b02      	cmp	r3, #2
 8002916:	ddac      	ble.n	8002872 <vTaskStateEst+0x296>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002918:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8002922:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8002926:	2b02      	cmp	r3, #2
 8002928:	dd9f      	ble.n	800286a <vTaskStateEst+0x28e>
				}
			}
		}
		memset(P_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(P_priori[0][0]));
 800292a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f012 f80f 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800293e:	e05b      	b.n	80029f8 <vTaskStateEst+0x41c>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8002946:	e04e      	b.n	80029e6 <vTaskStateEst+0x40a>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 800294e:	e041      	b.n	80029d4 <vTaskStateEst+0x3f8>
					P_priori[j][i] +=  Placeholder_priori[j][k] * Ad_T[k][i];
 8002950:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002954:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	ed93 7a00 	vldr	s14, [r3]
 800296c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002970:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	edd3 6a00 	vldr	s13, [r3]
 8002988:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800299e:	4413      	add	r3, r2
 80029a0:	3bc4      	subs	r3, #196	; 0xc4
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80029b2:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 80029ca:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80029ce:	3301      	adds	r3, #1
 80029d0:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80029d4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80029d8:	2b02      	cmp	r3, #2
 80029da:	ddb9      	ble.n	8002950 <vTaskStateEst+0x374>
			for(int i = 0; i < NUMBER_STATES; i++){
 80029dc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80029e0:	3301      	adds	r3, #1
 80029e2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80029e6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	ddac      	ble.n	8002948 <vTaskStateEst+0x36c>
		for(int j = 0; j < NUMBER_STATES; j++){
 80029ee:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80029f2:	3301      	adds	r3, #1
 80029f4:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 80029f8:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	dd9f      	ble.n	8002940 <vTaskStateEst+0x364>
		/* If Q is dimension 1, very easy -> do later */

		/* Update Step */
		/* state_inov = measurement - H * x_priori */
		/* H*P_priori */
		memset(State_Inovation, 0, NUMBER_SENSOR*sizeof(State_Inovation[0]));
 8002a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a04:	220c      	movs	r2, #12
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f011 ffa4 	bl	8014956 <memset>
		memset(Placeholder_est, 0, NUMBER_SENSOR*NUMBER_STATES*sizeof(Placeholder_est[0][0]));
 8002a0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f011 ff9d 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8002a22:	e08f      	b.n	8002b44 <vTaskStateEst+0x568>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8002a2a:	e081      	b.n	8002b30 <vTaskStateEst+0x554>
				State_Inovation[j] += measurements[j] - H[j][i]*x_priori[i];
 8002a2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002a30:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	ed93 7a00 	vldr	s14, [r3]
 8002a3c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a40:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	edd3 6a00 	vldr	s13, [r3]
 8002a4c:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002a50:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	ed93 6a00 	vldr	s12, [r3]
 8002a68:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002a6c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002a88:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002a9a:	e040      	b.n	8002b1e <vTaskStateEst+0x542>
					Placeholder_est[j][i] += H[j][k] * P_priori[k][i];
 8002a9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002aa0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	ed93 7a00 	vldr	s14, [r3]
 8002ab8:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002abc:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	edd3 6a00 	vldr	s13, [r3]
 8002ad4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002ad8:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002afc:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002b14:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002b1e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	ddba      	ble.n	8002a9c <vTaskStateEst+0x4c0>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002b26:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8002b30:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f77f af79 	ble.w	8002a2c <vTaskStateEst+0x450>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002b3a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8002b44:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	f77f af6b 	ble.w	8002a24 <vTaskStateEst+0x448>
		}

		/* CHECK AGAIN STARTING HERE */

		/* S = H*P*H_T + R */
		memset(Cov_Inovation, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(Cov_Inovation[0][0]));
 8002b4e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f011 fefd 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8002b62:	e086      	b.n	8002c72 <vTaskStateEst+0x696>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002b6a:	e079      	b.n	8002c60 <vTaskStateEst+0x684>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8002b72:	e040      	b.n	8002bf6 <vTaskStateEst+0x61a>
					Cov_Inovation[j][i] += Placeholder_est[j][k] * H_T[k][i];
 8002b74:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002b78:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	ed93 7a00 	vldr	s14, [r3]
 8002b90:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002b94:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	edd3 6a00 	vldr	s13, [r3]
 8002bac:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002bb0:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd0:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002bd4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002bec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8002bf6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	ddba      	ble.n	8002b74 <vTaskStateEst+0x598>
				}
				Cov_Inovation[j][i] += R[j][i];
 8002bfe:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002c02:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002c1e:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002c3e:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002c56:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002c60:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	dd81      	ble.n	8002b6c <vTaskStateEst+0x590>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002c68:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8002c72:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	f77f af74 	ble.w	8002b64 <vTaskStateEst+0x588>
			}
		}

		/* Calculate Pseudoinverse of Cov_Inovation */
		pinv(LAMBDA, Cov_Inovation, Cov_Inovation_Inv);
 8002c7c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002c80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 800301c <vTaskStateEst+0xa40>
 8002c8c:	f000 fa26 	bl	80030dc <pinv>

		/* K  = P_priori * H_T * Cov_Inovation_Inv */
		memset(Placeholder_K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(Placeholder_K[0][0]));
 8002c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c94:	2224      	movs	r2, #36	; 0x24
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f011 fe5c 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002ca4:	e05a      	b.n	8002d5c <vTaskStateEst+0x780>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002cac:	e04d      	b.n	8002d4a <vTaskStateEst+0x76e>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002cb4:	e040      	b.n	8002d38 <vTaskStateEst+0x75c>
					Placeholder_K[j][i] += P_priori[j][k] * H_T[k][i];
 8002cb6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002cba:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	ed93 7a00 	vldr	s14, [r3]
 8002cd2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002cd6:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	edd3 6a00 	vldr	s13, [r3]
 8002cee:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002cf2:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d12:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002d16:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002d2e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002d32:	3301      	adds	r3, #1
 8002d34:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002d38:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	ddba      	ble.n	8002cb6 <vTaskStateEst+0x6da>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002d40:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002d44:	3301      	adds	r3, #1
 8002d46:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002d4a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	ddad      	ble.n	8002cae <vTaskStateEst+0x6d2>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002d52:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002d56:	3301      	adds	r3, #1
 8002d58:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002d5c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	dda0      	ble.n	8002ca6 <vTaskStateEst+0x6ca>
				}
			}
		}
		memset(K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(K[0][0]));
 8002d64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d68:	2224      	movs	r2, #36	; 0x24
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f011 fdf2 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8002d78:	e05a      	b.n	8002e30 <vTaskStateEst+0x854>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002d80:	e04d      	b.n	8002e1e <vTaskStateEst+0x842>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002d88:	e040      	b.n	8002e0c <vTaskStateEst+0x830>
					K[j][i] += Placeholder_K[j][k] * Cov_Inovation_Inv[k][i];
 8002d8a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002d8e:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	ed93 7a00 	vldr	s14, [r3]
 8002da6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002daa:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	edd3 6a00 	vldr	s13, [r3]
 8002dc2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002dc6:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002dea:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002e02:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002e06:	3301      	adds	r3, #1
 8002e08:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002e0c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	ddba      	ble.n	8002d8a <vTaskStateEst+0x7ae>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002e14:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002e1e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	ddad      	ble.n	8002d82 <vTaskStateEst+0x7a6>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002e26:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8002e30:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	dda0      	ble.n	8002d7a <vTaskStateEst+0x79e>
				}
			}
		}

		/* x_est = x_priori + K*measurements */
		memset(x_est, 0, NUMBER_STATES*sizeof(x_est[0]));
 8002e38:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002e3c:	220c      	movs	r2, #12
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f011 fd88 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8002e4c:	e045      	b.n	8002eda <vTaskStateEst+0x8fe>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002e54:	e038      	b.n	8002ec8 <vTaskStateEst+0x8ec>
				x_est[j] += x_priori[j] + K[j][i]*State_Inovation[i];
 8002e56:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002e5a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	ed93 7a00 	vldr	s14, [r3]
 8002e66:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002e6a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	edd3 6a00 	vldr	s13, [r3]
 8002e76:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002e7a:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	ed93 6a00 	vldr	s12, [r3]
 8002e92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e96:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eae:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002eb2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002ebe:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002ec8:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	ddc2      	ble.n	8002e56 <vTaskStateEst+0x87a>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002ed0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8002eda:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	ddb5      	ble.n	8002e4e <vTaskStateEst+0x872>
			}
		}


		/* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
		memset(Placeholder_P_est, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_P_est[0][0]));
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	2224      	movs	r2, #36	; 0x24
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f011 fd33 	bl	8014956 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8002ef6:	e080      	b.n	8002ffa <vTaskStateEst+0xa1e>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002efe:	e073      	b.n	8002fe8 <vTaskStateEst+0xa0c>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002f00:	2300      	movs	r3, #0
 8002f02:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002f06:	e040      	b.n	8002f8a <vTaskStateEst+0x9ae>
					Placeholder_P_est[j][i] -= K[j][k] * H[k][i];
 8002f08:	f107 0108 	add.w	r1, r7, #8
 8002f0c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	ed93 7a00 	vldr	s14, [r3]
 8002f24:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002f28:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	edd3 6a00 	vldr	s13, [r3]
 8002f40:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002f44:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f64:	f107 0108 	add.w	r1, r7, #8
 8002f68:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002f80:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002f84:	3301      	adds	r3, #1
 8002f86:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002f8a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	ddba      	ble.n	8002f08 <vTaskStateEst+0x92c>
				}
				if(j == i){
 8002f92:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002f96:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11f      	bne.n	8002fde <vTaskStateEst+0xa02>
					Placeholder_P_est[j][i] += 1;
 8002f9e:	f107 0108 	add.w	r1, r7, #8
 8002fa2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fc2:	f107 0108 	add.w	r1, r7, #8
 8002fc6:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 8002fde:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002fe8:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	dd87      	ble.n	8002f00 <vTaskStateEst+0x924>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002ff0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8002ffa:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f77f af7a 	ble.w	8002ef8 <vTaskStateEst+0x91c>
				}
			}
		}
		for(int j = 0; j < NUMBER_STATES; j++){
 8003004:	2300      	movs	r3, #0
 8003006:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800300a:	e05c      	b.n	80030c6 <vTaskStateEst+0xaea>
			for(int i = 0; i < NUMBER_STATES; i++){
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8003012:	e04f      	b.n	80030b4 <vTaskStateEst+0xad8>
				for(int k = 0; k < NUMBER_STATES; k++){
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800301a:	e042      	b.n	80030a2 <vTaskStateEst+0xac6>
 800301c:	3dcccccd 	.word	0x3dcccccd
					P_est[j][i] += Placeholder_P_est[j][k] * P_priori[k][i];
 8003020:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8003024:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	f107 0108 	add.w	r1, r7, #8
 8003040:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	edd3 6a00 	vldr	s13, [r3]
 8003058:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800305c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8003080:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8003098:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800309c:	3301      	adds	r3, #1
 800309e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80030a2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	ddba      	ble.n	8003020 <vTaskStateEst+0xa44>
			for(int i = 0; i < NUMBER_STATES; i++){
 80030aa:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80030ae:	3301      	adds	r3, #1
 80030b0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80030b4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	ddab      	ble.n	8003014 <vTaskStateEst+0xa38>
		for(int j = 0; j < NUMBER_STATES; j++){
 80030bc:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80030c0:	3301      	adds	r3, #1
 80030c2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80030c6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	dd9e      	ble.n	800300c <vTaskStateEst+0xa30>
		/* OUTPUT IS x_est */




		osDelayUntil(tick_count);
 80030ce:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80030d2:	f00d f82d 	bl	8010130 <osDelayUntil>
		tick_count += tick_update;
 80030d6:	f7ff bb35 	b.w	8002744 <vTaskStateEst+0x168>
 80030da:	bf00      	nop

080030dc <pinv>:
	Gd = G_init;


}

void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]){
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0a6      	sub	sp, #152	; 0x98
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80030e6:	60b8      	str	r0, [r7, #8]
 80030e8:	6079      	str	r1, [r7, #4]

	/* More Penrose Pseudoinverse */
	/* pinv = A_T*(A*A_T*lambda^2*eye(size(A)))^-1 */
	float Matrix_T[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80030ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f011 fc2f 	bl	8014956 <memset>
	float Matrix_to_inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80030f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030fc:	2224      	movs	r2, #36	; 0x24
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f011 fc28 	bl	8014956 <memset>
	float First_Inverse[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f011 fc21 	bl	8014956 <memset>


	for(int j = 0; j < NUMBER_SENSOR; j++){
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800311a:	e08b      	b.n	8003234 <pinv+0x158>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003122:	e07d      	b.n	8003220 <pinv+0x144>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800312a:	e070      	b.n	800320e <pinv+0x132>
				Matrix_to_inv[j][i] +=  Matrix[j][k] * Matrix_T[k][i];
 800312c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003142:	4413      	add	r3, r2
 8003144:	3b60      	subs	r3, #96	; 0x60
 8003146:	ed93 7a00 	vldr	s14, [r3]
 800314a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	461a      	mov	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	441a      	add	r2, r3
 800315c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	edd3 6a00 	vldr	s13, [r3]
 8003168:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800317e:	4413      	add	r3, r2
 8003180:	3b3c      	subs	r3, #60	; 0x3c
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800318a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80031a4:	4413      	add	r3, r2
 80031a6:	3b60      	subs	r3, #96	; 0x60
 80031a8:	edc3 7a00 	vstr	s15, [r3]
				if(i == j){
 80031ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80031b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d125      	bne.n	8003204 <pinv+0x128>
					Matrix_to_inv[j][i] += lambda * lambda;
 80031b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80031ce:	4413      	add	r3, r2
 80031d0:	3b60      	subs	r3, #96	; 0x60
 80031d2:	ed93 7a00 	vldr	s14, [r3]
 80031d6:	edd7 6a03 	vldr	s13, [r7, #12]
 80031da:	edd7 7a03 	vldr	s15, [r7, #12]
 80031de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80031fc:	4413      	add	r3, r2
 80031fe:	3b60      	subs	r3, #96	; 0x60
 8003200:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003208:	3301      	adds	r3, #1
 800320a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800320e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003212:	2b02      	cmp	r3, #2
 8003214:	dd8a      	ble.n	800312c <pinv+0x50>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8003216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800321a:	3301      	adds	r3, #1
 800321c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003224:	2b02      	cmp	r3, #2
 8003226:	f77f af7d 	ble.w	8003124 <pinv+0x48>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 800322a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800322e:	3301      	adds	r3, #1
 8003230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003238:	2b02      	cmp	r3, #2
 800323a:	f77f af6f 	ble.w	800311c <pinv+0x40>
				}
			}
		}
	}

	cofactor(Matrix_to_inv, First_Inverse, NUMBER_SENSOR);
 800323e:	f107 0214 	add.w	r2, r7, #20
 8003242:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003246:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f000 f93b 	bl	80034c8 <cofactor>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003258:	e05e      	b.n	8003318 <pinv+0x23c>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003260:	e051      	b.n	8003306 <pinv+0x22a>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003268:	e044      	b.n	80032f4 <pinv+0x218>
				Inverse[j][i] +=  Matrix_T[j][k] * First_Inverse[k][i];
 800326a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	441a      	add	r2, r3
 800327c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	ed93 7a00 	vldr	s14, [r3]
 8003288:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800329e:	4413      	add	r3, r2
 80032a0:	3b3c      	subs	r3, #60	; 0x3c
 80032a2:	edd3 6a00 	vldr	s13, [r3]
 80032a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80032bc:	4413      	add	r3, r2
 80032be:	3b84      	subs	r3, #132	; 0x84
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	441a      	add	r2, r3
 80032da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 80032ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ee:	3301      	adds	r3, #1
 80032f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	ddb6      	ble.n	800326a <pinv+0x18e>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80032fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003300:	3301      	adds	r3, #1
 8003302:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800330a:	2b02      	cmp	r3, #2
 800330c:	dda9      	ble.n	8003262 <pinv+0x186>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 800330e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003312:	3301      	adds	r3, #1
 8003314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800331c:	2b02      	cmp	r3, #2
 800331e:	dd9c      	ble.n	800325a <pinv+0x17e>
			}
		}
	}


}
 8003320:	bf00      	nop
 8003322:	3798      	adds	r7, #152	; 0x98
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <determinant>:

/*For calculating Determinant of the Matrix */
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	ed2d 8b02 	vpush	{d8}
 800332e:	b092      	sub	sp, #72	; 0x48
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	ed87 0a00 	vstr	s0, [r7]
	float s = 1, det = 0, b[NUMBER_SENSOR][NUMBER_SENSOR];
 8003338:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	643b      	str	r3, [r7, #64]	; 0x40
	int i, j, m, n, c;
	if (size == 1)
 8003344:	edd7 7a00 	vldr	s15, [r7]
 8003348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800334c:	eef4 7a47 	vcmp.f32	s15, s14
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	d102      	bne.n	800335c <determinant+0x34>
	{
		return (a[0][0]);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	e0ab      	b.n	80034b4 <determinant+0x18c>
	}
	else
	{
		det = 0;
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
		for (c = 0; c < size; c++)
 8003362:	2300      	movs	r3, #0
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003366:	e097      	b.n	8003498 <determinant+0x170>
		{
			m = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
			n = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
			for (i = 0;i < size; i++)
 8003370:	2300      	movs	r3, #0
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003374:	e05a      	b.n	800342c <determinant+0x104>
			{
				for (j = 0 ;j < size; j++)
 8003376:	2300      	movs	r3, #0
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
 800337a:	e048      	b.n	800340e <determinant+0xe6>
				{
					b[i][j] = 0;
 800337c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800338e:	4413      	add	r3, r2
 8003390:	3b40      	subs	r3, #64	; 0x40
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d034      	beq.n	8003408 <determinant+0xe0>
 800339e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d030      	beq.n	8003408 <determinant+0xe0>
					{
						b[m][n] = a[i][j];
 80033a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	441a      	add	r2, r3
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80033d0:	4413      	add	r3, r2
 80033d2:	3b40      	subs	r3, #64	; 0x40
 80033d4:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033e0:	edd7 7a00 	vldr	s15, [r7]
 80033e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f4:	d503      	bpl.n	80033fe <determinant+0xd6>
							n++;
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	3301      	adds	r3, #1
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
 80033fc:	e004      	b.n	8003408 <determinant+0xe0>
						else
						{
							n = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	633b      	str	r3, [r7, #48]	; 0x30
							m++;
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	3301      	adds	r3, #1
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
				for (j = 0 ;j < size; j++)
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	3301      	adds	r3, #1
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003418:	ed97 7a00 	vldr	s14, [r7]
 800341c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	dcaa      	bgt.n	800337c <determinant+0x54>
			for (i = 0;i < size; i++)
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	3301      	adds	r3, #1
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003436:	ed97 7a00 	vldr	s14, [r7]
 800343a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	dc98      	bgt.n	8003376 <determinant+0x4e>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, size - 1));
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	ed93 8a00 	vldr	s16, [r3]
 8003450:	edd7 7a00 	vldr	s15, [r7]
 8003454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003458:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff5f 	bl	8003328 <determinant>
 800346a:	eef0 7a40 	vmov.f32	s15, s0
 800346e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003472:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			s = -1 * s;
 8003486:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800348a:	eef1 7a67 	vneg.f32	s15, s15
 800348e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		for (c = 0; c < size; c++)
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	3301      	adds	r3, #1
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a2:	ed97 7a00 	vldr	s14, [r7]
 80034a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	f73f af5b 	bgt.w	8003368 <determinant+0x40>
		}
	}

	return (det);
 80034b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b4:	ee07 3a90 	vmov	s15, r3
}
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	3748      	adds	r7, #72	; 0x48
 80034be:	46bd      	mov	sp, r7
 80034c0:	ecbd 8b02 	vpop	{d8}
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <cofactor>:

void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	b09d      	sub	sp, #116	; 0x74
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	ed87 0a01 	vstr	s0, [r7, #4]
	float b[NUMBER_SENSOR][NUMBER_SENSOR], fac[NUMBER_SENSOR][NUMBER_SENSOR];
	int p, q, m, n, i, j;
	for (q = 0;q < size; q++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034da:	e0b3      	b.n	8003644 <cofactor+0x17c>
	{
		for (p = 0;p < size; p++)
 80034dc:	2300      	movs	r3, #0
 80034de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034e0:	e0a0      	b.n	8003624 <cofactor+0x15c>
		{
			m = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	667b      	str	r3, [r7, #100]	; 0x64
			n = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	663b      	str	r3, [r7, #96]	; 0x60
			for (i = 0;i < size; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ee:	e04d      	b.n	800358c <cofactor+0xc4>
			{
				for (j = 0;j < size; j++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80034f4:	e03b      	b.n	800356e <cofactor+0xa6>
				{
					if (i != q && j != p)
 80034f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d034      	beq.n	8003568 <cofactor+0xa0>
 80034fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	429a      	cmp	r2, r3
 8003504:	d030      	beq.n	8003568 <cofactor+0xa0>
					{
						b[m][n] = num[i][j];
 8003506:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	441a      	add	r2, r3
 8003516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003530:	4413      	add	r3, r2
 8003532:	3b3c      	subs	r3, #60	; 0x3c
 8003534:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 8003536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003540:	edd7 7a01 	vldr	s15, [r7, #4]
 8003544:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003548:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800354c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	d503      	bpl.n	800355e <cofactor+0x96>
							n++;
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	3301      	adds	r3, #1
 800355a:	663b      	str	r3, [r7, #96]	; 0x60
 800355c:	e004      	b.n	8003568 <cofactor+0xa0>
						else
						{
							n = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	663b      	str	r3, [r7, #96]	; 0x60
							m++;
 8003562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003564:	3301      	adds	r3, #1
 8003566:	667b      	str	r3, [r7, #100]	; 0x64
				for (j = 0;j < size; j++)
 8003568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800356a:	3301      	adds	r3, #1
 800356c:	65bb      	str	r3, [r7, #88]	; 0x58
 800356e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003578:	ed97 7a01 	vldr	s14, [r7, #4]
 800357c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003584:	dcb7      	bgt.n	80034f6 <cofactor+0x2e>
			for (i = 0;i < size; i++)
 8003586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003588:	3301      	adds	r3, #1
 800358a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800358c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003596:	ed97 7a01 	vldr	s14, [r7, #4]
 800359a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a2:	dca5      	bgt.n	80034f0 <cofactor+0x28>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, size - 1);
 80035a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	4413      	add	r3, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fc ffda 	bl	8000564 <__aeabi_i2d>
 80035b0:	4603      	mov	r3, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	ec44 3b11 	vmov	d1, r3, r4
 80035b8:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8003678 <cofactor+0x1b0>
 80035bc:	f011 fe98 	bl	80152f0 <pow>
 80035c0:	ec56 5b10 	vmov	r5, r6, d0
 80035c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035d4:	eeb0 0a67 	vmov.f32	s0, s15
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fea5 	bl	8003328 <determinant>
 80035de:	ee10 3a10 	vmov	r3, s0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ffd0 	bl	8000588 <__aeabi_f2d>
 80035e8:	4603      	mov	r3, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	461a      	mov	r2, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	4628      	mov	r0, r5
 80035f2:	4631      	mov	r1, r6
 80035f4:	f7fd f820 	bl	8000638 <__aeabi_dmul>
 80035f8:	4603      	mov	r3, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	4618      	mov	r0, r3
 80035fe:	4621      	mov	r1, r4
 8003600:	f7fd faea 	bl	8000bd8 <__aeabi_d2f>
 8003604:	4601      	mov	r1, r0
 8003606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003618:	4413      	add	r3, r2
 800361a:	3b60      	subs	r3, #96	; 0x60
 800361c:	6019      	str	r1, [r3, #0]
		for (p = 0;p < size; p++)
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	3301      	adds	r3, #1
 8003622:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	f73f af52 	bgt.w	80034e2 <cofactor+0x1a>
	for (q = 0;q < size; q++)
 800363e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003640:	3301      	adds	r3, #1
 8003642:	66bb      	str	r3, [r7, #104]	; 0x68
 8003644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	f73f af3f 	bgt.w	80034dc <cofactor+0x14>
		}
	}
	transpose(inverse, num, fac, size);
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	ed97 0a01 	vldr	s0, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	f000 f808 	bl	8003680 <transpose>
}
 8003670:	bf00      	nop
 8003672:	3774      	adds	r7, #116	; 0x74
 8003674:	46bd      	mov	sp, r7
 8003676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003678:	00000000 	.word	0x00000000
 800367c:	bff00000 	.word	0xbff00000

08003680 <transpose>:
/*Finding transpose of matrix*/
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b090      	sub	sp, #64	; 0x40
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	ed87 0a00 	vstr	s0, [r7]
	int i, j;
	float b[NUMBER_SENSOR][NUMBER_SENSOR], d;

	for (i = 0;i < size; i++)
 8003690:	2300      	movs	r3, #0
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003694:	e02c      	b.n	80036f0 <transpose+0x70>
	{
		for (j = 0;j < size; j++)
 8003696:	2300      	movs	r3, #0
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
 800369a:	e01a      	b.n	80036d2 <transpose+0x52>
		{
			b[i][j] = fac[j][i];
 800369c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	441a      	add	r2, r3
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80036c6:	4413      	add	r3, r2
 80036c8:	3b30      	subs	r3, #48	; 0x30
 80036ca:	6019      	str	r1, [r3, #0]
		for (j = 0;j < size; j++)
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	3301      	adds	r3, #1
 80036d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036dc:	ed97 7a00 	vldr	s14, [r7]
 80036e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e8:	dcd8      	bgt.n	800369c <transpose+0x1c>
	for (i = 0;i < size; i++)
 80036ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ec:	3301      	adds	r3, #1
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	ed97 7a00 	vldr	s14, [r7]
 80036fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	dcc6      	bgt.n	8003696 <transpose+0x16>
		}
	}
	d = determinant(num, size);
 8003708:	ed97 0a00 	vldr	s0, [r7]
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	f7ff fe0b 	bl	8003328 <determinant>
 8003712:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	for (i = 0;i < size; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371a:	e032      	b.n	8003782 <transpose+0x102>
	{
		for (j = 0;j < size; j++)
 800371c:	2300      	movs	r3, #0
 800371e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003720:	e020      	b.n	8003764 <transpose+0xe4>
		{
			inverse[i][j] = b[i][j] / d;
 8003722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003734:	4413      	add	r3, r2
 8003736:	3b30      	subs	r3, #48	; 0x30
 8003738:	edd3 6a00 	vldr	s13, [r3]
 800373c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	441a      	add	r2, r3
 800374c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0;j < size; j++)
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	3301      	adds	r3, #1
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376e:	ed97 7a00 	vldr	s14, [r7]
 8003772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377a:	dcd2      	bgt.n	8003722 <transpose+0xa2>
	for (i = 0;i < size; i++)
 800377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377e:	3301      	adds	r3, #1
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378c:	ed97 7a00 	vldr	s14, [r7]
 8003790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	dcc0      	bgt.n	800371c <transpose+0x9c>
		}
	}
}
 800379a:	bf00      	nop
 800379c:	3740      	adds	r7, #64	; 0x40
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037aa:	e003      	b.n	80037b4 <LoopCopyDataInit>

080037ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037b2:	3104      	adds	r1, #4

080037b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037b4:	480b      	ldr	r0, [pc, #44]	; (80037e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037bc:	d3f6      	bcc.n	80037ac <CopyDataInit>
  ldr  r2, =_sbss
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037c0:	e002      	b.n	80037c8 <LoopFillZerobss>

080037c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037c4:	f842 3b04 	str.w	r3, [r2], #4

080037c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037cc:	d3f9      	bcc.n	80037c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037ce:	f7fe f98d 	bl	8001aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037d2:	f011 f881 	bl	80148d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d6:	f7fd fbcf 	bl	8000f78 <main>
  bx  lr    
 80037da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037dc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80037e0:	08016a80 	.word	0x08016a80
  ldr  r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037e8:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80037ec:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 80037f0:	20012f08 	.word	0x20012f08

080037f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f4:	e7fe      	b.n	80037f4 <ADC_IRQHandler>

080037f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fa:	2003      	movs	r0, #3
 80037fc:	f000 f8f7 	bl	80039ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003800:	2000      	movs	r0, #0
 8003802:	f7fe f885 	bl	8001910 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003806:	f7fd fe75 	bl	80014f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_IncTick+0x20>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_IncTick+0x24>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4413      	add	r3, r2
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_IncTick+0x24>)
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000008 	.word	0x20000008
 8003834:	20011180 	.word	0x20011180

08003838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return uwTick;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_GetTick+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20011180 	.word	0x20011180

08003850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003858:	f7ff ffee 	bl	8003838 <HAL_GetTick>
 800385c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d005      	beq.n	8003876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_Delay+0x40>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003876:	bf00      	nop
 8003878:	f7ff ffde 	bl	8003838 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	d8f7      	bhi.n	8003878 <HAL_Delay+0x28>
  {
  }
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000008 	.word	0x20000008

08003894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <__NVIC_SetPriorityGrouping+0x40>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b0:	4013      	ands	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <__NVIC_SetPriorityGrouping+0x44>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <__NVIC_SetPriorityGrouping+0x40>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	60d3      	str	r3, [r2, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000ed00 	.word	0xe000ed00
 80038d8:	05fa0000 	.word	0x05fa0000

080038dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <__NVIC_GetPriorityGrouping+0x18>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	f003 0307 	and.w	r3, r3, #7
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	2b00      	cmp	r3, #0
 8003908:	db0b      	blt.n	8003922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	4907      	ldr	r1, [pc, #28]	; (8003930 <__NVIC_EnableIRQ+0x38>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2001      	movs	r0, #1
 800391a:	fa00 f202 	lsl.w	r2, r0, r2
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000e100 	.word	0xe000e100

08003934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	6039      	str	r1, [r7, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	2b00      	cmp	r3, #0
 8003946:	db0a      	blt.n	800395e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	490c      	ldr	r1, [pc, #48]	; (8003980 <__NVIC_SetPriority+0x4c>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	0112      	lsls	r2, r2, #4
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	440b      	add	r3, r1
 8003958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800395c:	e00a      	b.n	8003974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4908      	ldr	r1, [pc, #32]	; (8003984 <__NVIC_SetPriority+0x50>)
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	3b04      	subs	r3, #4
 800396c:	0112      	lsls	r2, r2, #4
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	440b      	add	r3, r1
 8003972:	761a      	strb	r2, [r3, #24]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000e100 	.word	0xe000e100
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f1c3 0307 	rsb	r3, r3, #7
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	bf28      	it	cs
 80039a6:	2304      	movcs	r3, #4
 80039a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d902      	bls.n	80039b8 <NVIC_EncodePriority+0x30>
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3b03      	subs	r3, #3
 80039b6:	e000      	b.n	80039ba <NVIC_EncodePriority+0x32>
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	f04f 32ff 	mov.w	r2, #4294967295
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	401a      	ands	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d0:	f04f 31ff 	mov.w	r1, #4294967295
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	43d9      	mvns	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	4313      	orrs	r3, r2
         );
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ff4c 	bl	8003894 <__NVIC_SetPriorityGrouping>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a16:	f7ff ff61 	bl	80038dc <__NVIC_GetPriorityGrouping>
 8003a1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	6978      	ldr	r0, [r7, #20]
 8003a22:	f7ff ffb1 	bl	8003988 <NVIC_EncodePriority>
 8003a26:	4602      	mov	r2, r0
 8003a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff80 	bl	8003934 <__NVIC_SetPriority>
}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff54 	bl	80038f8 <__NVIC_EnableIRQ>
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a64:	f7ff fee8 	bl	8003838 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e099      	b.n	8003ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a94:	e00f      	b.n	8003ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a96:	f7ff fecf 	bl	8003838 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d908      	bls.n	8003ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2203      	movs	r2, #3
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e078      	b.n	8003ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e8      	bne.n	8003a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_DMA_Init+0x158>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d107      	bne.n	8003b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0307 	bic.w	r3, r3, #7
 8003b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d117      	bne.n	8003b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00e      	beq.n	8003b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 faa5 	bl	80040ac <DMA_CheckFifoParam>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b76:	2301      	movs	r3, #1
 8003b78:	e016      	b.n	8003ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa5c 	bl	8004040 <DMA_CalcBaseAndBitshift>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	223f      	movs	r2, #63	; 0x3f
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	f010803f 	.word	0xf010803f

08003bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_DMA_Start_IT+0x26>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e048      	b.n	8003c6c <HAL_DMA_Start_IT+0xb8>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d137      	bne.n	8003c5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f9ee 	bl	8003fe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	223f      	movs	r2, #63	; 0x3f
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0216 	orr.w	r2, r2, #22
 8003c22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c32:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0208 	orr.w	r2, r2, #8
 8003c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e005      	b.n	8003c6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
 8003c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d004      	beq.n	8003c92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00c      	b.n	8003cac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2205      	movs	r2, #5
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003cc4:	4b92      	ldr	r3, [pc, #584]	; (8003f10 <HAL_DMA_IRQHandler+0x258>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a92      	ldr	r2, [pc, #584]	; (8003f14 <HAL_DMA_IRQHandler+0x25c>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	0a9b      	lsrs	r3, r3, #10
 8003cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01a      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	2208      	movs	r2, #8
 8003d12:	409a      	lsls	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2201      	movs	r2, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	2201      	movs	r2, #1
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f043 0202 	orr.w	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	2204      	movs	r2, #4
 8003d60:	409a      	lsls	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d012      	beq.n	8003d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2210      	movs	r2, #16
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d043      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d03c      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	2210      	movs	r2, #16
 8003db4:	409a      	lsls	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d018      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d108      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d024      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
 8003de6:	e01f      	b.n	8003e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01b      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
 8003df8:	e016      	b.n	8003e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0208 	bic.w	r2, r2, #8
 8003e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 808e 	beq.w	8003f56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8086 	beq.w	8003f56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	2220      	movs	r2, #32
 8003e50:	409a      	lsls	r2, r3
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d136      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0216 	bic.w	r2, r2, #22
 8003e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <HAL_DMA_IRQHandler+0x1da>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0208 	bic.w	r2, r2, #8
 8003ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	223f      	movs	r2, #63	; 0x3f
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d07d      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
        }
        return;
 8003ece:	e078      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01c      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d108      	bne.n	8003efe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d030      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
 8003efc:	e02b      	b.n	8003f56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d027      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	e022      	b.n	8003f56 <HAL_DMA_IRQHandler+0x29e>
 8003f10:	20000000 	.word	0x20000000
 8003f14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0210 	bic.w	r2, r2, #16
 8003f34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d032      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d022      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2205      	movs	r2, #5
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d307      	bcc.n	8003f9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f2      	bne.n	8003f82 <HAL_DMA_IRQHandler+0x2ca>
 8003f9c:	e000      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
 8003fc0:	e000      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fc2:	bf00      	nop
    }
  }
}
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop

08003fcc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004000:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d108      	bne.n	8004024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004022:	e007      	b.n	8004034 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	3b10      	subs	r3, #16
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <DMA_CalcBaseAndBitshift+0x60>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <DMA_CalcBaseAndBitshift+0x64>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d908      	bls.n	8004080 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <DMA_CalcBaseAndBitshift+0x68>)
 8004076:	4013      	ands	r3, r2
 8004078:	1d1a      	adds	r2, r3, #4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	659a      	str	r2, [r3, #88]	; 0x58
 800407e:	e006      	b.n	800408e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <DMA_CalcBaseAndBitshift+0x68>)
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	aaaaaaab 	.word	0xaaaaaaab
 80040a4:	0801695c 	.word	0x0801695c
 80040a8:	fffffc00 	.word	0xfffffc00

080040ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11f      	bne.n	8004106 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d855      	bhi.n	8004178 <DMA_CheckFifoParam+0xcc>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <DMA_CheckFifoParam+0x28>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040f7 	.word	0x080040f7
 80040dc:	080040e5 	.word	0x080040e5
 80040e0:	08004179 	.word	0x08004179
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d045      	beq.n	800417c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f4:	e042      	b.n	800417c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fe:	d13f      	bne.n	8004180 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004104:	e03c      	b.n	8004180 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410e:	d121      	bne.n	8004154 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d836      	bhi.n	8004184 <DMA_CheckFifoParam+0xd8>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <DMA_CheckFifoParam+0x70>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800412d 	.word	0x0800412d
 8004120:	08004133 	.word	0x08004133
 8004124:	0800412d 	.word	0x0800412d
 8004128:	08004145 	.word	0x08004145
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e02f      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d024      	beq.n	8004188 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004142:	e021      	b.n	8004188 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800414c:	d11e      	bne.n	800418c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004152:	e01b      	b.n	800418c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <DMA_CheckFifoParam+0xb4>
 800415a:	2b03      	cmp	r3, #3
 800415c:	d003      	beq.n	8004166 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800415e:	e018      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      break;
 8004164:	e015      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00e      	beq.n	8004190 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      break;
 8004176:	e00b      	b.n	8004190 <DMA_CheckFifoParam+0xe4>
      break;
 8004178:	bf00      	nop
 800417a:	e00a      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;
 800417c:	bf00      	nop
 800417e:	e008      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;
 8004180:	bf00      	nop
 8004182:	e006      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;
 8004184:	bf00      	nop
 8004186:	e004      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;   
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;
 8004190:	bf00      	nop
    }
  } 
  
  return status; 
 8004192:	7bfb      	ldrb	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e175      	b.n	80044ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 8164 	bne.w	80044a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d00b      	beq.n	80041fe <HAL_GPIO_Init+0x5e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d007      	beq.n	80041fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041f2:	2b11      	cmp	r3, #17
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b12      	cmp	r3, #18
 80041fc:	d130      	bne.n	8004260 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	2203      	movs	r2, #3
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004234:	2201      	movs	r2, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 0201 	and.w	r2, r3, #1
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	2203      	movs	r2, #3
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d003      	beq.n	80042a0 <HAL_GPIO_Init+0x100>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b12      	cmp	r3, #18
 800429e:	d123      	bne.n	80042e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	08da      	lsrs	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	220f      	movs	r2, #15
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80be 	beq.w	80044a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <HAL_GPIO_Init+0x320>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	4a64      	ldr	r2, [pc, #400]	; (80044c0 <HAL_GPIO_Init+0x320>)
 8004330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004334:	6453      	str	r3, [r2, #68]	; 0x44
 8004336:	4b62      	ldr	r3, [pc, #392]	; (80044c0 <HAL_GPIO_Init+0x320>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004342:	4a60      	ldr	r2, [pc, #384]	; (80044c4 <HAL_GPIO_Init+0x324>)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	3302      	adds	r3, #2
 800434a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	220f      	movs	r2, #15
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a57      	ldr	r2, [pc, #348]	; (80044c8 <HAL_GPIO_Init+0x328>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d037      	beq.n	80043de <HAL_GPIO_Init+0x23e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a56      	ldr	r2, [pc, #344]	; (80044cc <HAL_GPIO_Init+0x32c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d031      	beq.n	80043da <HAL_GPIO_Init+0x23a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a55      	ldr	r2, [pc, #340]	; (80044d0 <HAL_GPIO_Init+0x330>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d02b      	beq.n	80043d6 <HAL_GPIO_Init+0x236>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a54      	ldr	r2, [pc, #336]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d025      	beq.n	80043d2 <HAL_GPIO_Init+0x232>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a53      	ldr	r2, [pc, #332]	; (80044d8 <HAL_GPIO_Init+0x338>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01f      	beq.n	80043ce <HAL_GPIO_Init+0x22e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a52      	ldr	r2, [pc, #328]	; (80044dc <HAL_GPIO_Init+0x33c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d019      	beq.n	80043ca <HAL_GPIO_Init+0x22a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <HAL_GPIO_Init+0x340>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_GPIO_Init+0x226>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a50      	ldr	r2, [pc, #320]	; (80044e4 <HAL_GPIO_Init+0x344>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00d      	beq.n	80043c2 <HAL_GPIO_Init+0x222>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	; (80044e8 <HAL_GPIO_Init+0x348>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <HAL_GPIO_Init+0x21e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4e      	ldr	r2, [pc, #312]	; (80044ec <HAL_GPIO_Init+0x34c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_GPIO_Init+0x21a>
 80043b6:	2309      	movs	r3, #9
 80043b8:	e012      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043ba:	230a      	movs	r3, #10
 80043bc:	e010      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043be:	2308      	movs	r3, #8
 80043c0:	e00e      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043c2:	2307      	movs	r3, #7
 80043c4:	e00c      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043c6:	2306      	movs	r3, #6
 80043c8:	e00a      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043ca:	2305      	movs	r3, #5
 80043cc:	e008      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043ce:	2304      	movs	r3, #4
 80043d0:	e006      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043d2:	2303      	movs	r3, #3
 80043d4:	e004      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e002      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_GPIO_Init+0x240>
 80043de:	2300      	movs	r3, #0
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	f002 0203 	and.w	r2, r2, #3
 80043e6:	0092      	lsls	r2, r2, #2
 80043e8:	4093      	lsls	r3, r2
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043f0:	4934      	ldr	r1, [pc, #208]	; (80044c4 <HAL_GPIO_Init+0x324>)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	3302      	adds	r3, #2
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043fe:	4b3c      	ldr	r3, [pc, #240]	; (80044f0 <HAL_GPIO_Init+0x350>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004422:	4a33      	ldr	r2, [pc, #204]	; (80044f0 <HAL_GPIO_Init+0x350>)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004428:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_GPIO_Init+0x350>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800444c:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <HAL_GPIO_Init+0x350>)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_GPIO_Init+0x350>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004476:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_GPIO_Init+0x350>)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <HAL_GPIO_Init+0x350>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a0:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <HAL_GPIO_Init+0x350>)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	f67f ae86 	bls.w	80041c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044b4:	bf00      	nop
 80044b6:	3724      	adds	r7, #36	; 0x24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40013800 	.word	0x40013800
 80044c8:	40020000 	.word	0x40020000
 80044cc:	40020400 	.word	0x40020400
 80044d0:	40020800 	.word	0x40020800
 80044d4:	40020c00 	.word	0x40020c00
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40021400 	.word	0x40021400
 80044e0:	40021800 	.word	0x40021800
 80044e4:	40021c00 	.word	0x40021c00
 80044e8:	40022000 	.word	0x40022000
 80044ec:	40022400 	.word	0x40022400
 80044f0:	40013c00 	.word	0x40013c00

080044f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
 8004500:	4613      	mov	r3, r2
 8004502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004504:	787b      	ldrb	r3, [r7, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004510:	e003      	b.n	800451a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	041a      	lsls	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	619a      	str	r2, [r3, #24]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004546:	e002      	b.n	800454e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	619a      	str	r2, [r3, #24]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800455a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455c:	b08f      	sub	sp, #60	; 0x3c
 800455e:	af0a      	add	r7, sp, #40	; 0x28
 8004560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e116      	b.n	800479a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f00f fe4e 	bl	8014228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2203      	movs	r2, #3
 8004590:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f005 fc25 	bl	8009dfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	687e      	ldr	r6, [r7, #4]
 80045b8:	466d      	mov	r5, sp
 80045ba:	f106 0410 	add.w	r4, r6, #16
 80045be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80045ce:	1d33      	adds	r3, r6, #4
 80045d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d2:	6838      	ldr	r0, [r7, #0]
 80045d4:	f005 fb06 	bl	8009be4 <USB_CoreInit>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0d7      	b.n	800479a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f005 fc13 	bl	8009e1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	e04a      	b.n	8004692 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	333d      	adds	r3, #61	; 0x3d
 800460c:	2201      	movs	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	333c      	adds	r3, #60	; 0x3c
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	b298      	uxth	r0, r3
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	3342      	adds	r3, #66	; 0x42
 8004638:	4602      	mov	r2, r0
 800463a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	333f      	adds	r3, #63	; 0x3f
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3344      	adds	r3, #68	; 0x44
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	3348      	adds	r3, #72	; 0x48
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3350      	adds	r3, #80	; 0x50
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	3301      	adds	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	7bfa      	ldrb	r2, [r7, #15]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d3af      	bcc.n	80045fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	e044      	b.n	800472c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	3301      	adds	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
 800472c:	7bfa      	ldrb	r2, [r7, #15]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d3b5      	bcc.n	80046a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	687e      	ldr	r6, [r7, #4]
 800473e:	466d      	mov	r5, sp
 8004740:	f106 0410 	add.w	r4, r6, #16
 8004744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004750:	e885 0003 	stmia.w	r5, {r0, r1}
 8004754:	1d33      	adds	r3, r6, #4
 8004756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f005 fb89 	bl	8009e70 <USB_DevInit>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e014      	b.n	800479a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b01      	cmp	r3, #1
 8004786:	d102      	bne.n	800478e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f001 f881 	bl	8005890 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f006 fbd8 	bl	800af48 <USB_DevDisconnect>

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_PCD_Start+0x16>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e012      	b.n	80047de <HAL_PCD_Start+0x3c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f006 fba7 	bl	800af18 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f005 fb02 	bl	8009dd8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047e6:	b590      	push	{r4, r7, lr}
 80047e8:	b08d      	sub	sp, #52	; 0x34
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f006 fc4e 	bl	800b09e <USB_GetMode>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 83ca 	bne.w	8004f9e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f006 fbb2 	bl	800af78 <USB_ReadInterrupts>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 83c0 	beq.w	8004f9c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f006 fba9 	bl	800af78 <USB_ReadInterrupts>
 8004826:	4603      	mov	r3, r0
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b02      	cmp	r3, #2
 800482e:	d107      	bne.n	8004840 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f002 0202 	and.w	r2, r2, #2
 800483e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f006 fb97 	bl	800af78 <USB_ReadInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b10      	cmp	r3, #16
 8004852:	d161      	bne.n	8004918 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0210 	bic.w	r2, r2, #16
 8004862:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	3304      	adds	r3, #4
 8004882:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	0c5b      	lsrs	r3, r3, #17
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2b02      	cmp	r3, #2
 800488e:	d124      	bne.n	80048da <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d035      	beq.n	8004908 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	6a38      	ldr	r0, [r7, #32]
 80048b0:	f006 fa0f 	bl	800acd2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c0:	441a      	add	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d2:	441a      	add	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	e016      	b.n	8004908 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	0c5b      	lsrs	r3, r3, #17
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d110      	bne.n	8004908 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048ec:	2208      	movs	r2, #8
 80048ee:	4619      	mov	r1, r3
 80048f0:	6a38      	ldr	r0, [r7, #32]
 80048f2:	f006 f9ee 	bl	800acd2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004902:	441a      	add	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0210 	orr.w	r2, r2, #16
 8004916:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f006 fb2b 	bl	800af78 <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004928:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800492c:	d16e      	bne.n	8004a0c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f006 fb31 	bl	800af9e <USB_ReadDevAllOutEpInterrupt>
 800493c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800493e:	e062      	b.n	8004a06 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d057      	beq.n	80049fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f006 fb56 	bl	800b006 <USB_ReadDevOutEPInterrupt>
 800495a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	461a      	mov	r2, r3
 8004974:	2301      	movs	r3, #1
 8004976:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fdde 	bl	800553c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	2308      	movs	r3, #8
 800499a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800499c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fed8 	bl	8005754 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	461a      	mov	r2, r3
 80049bc:	2310      	movs	r3, #16
 80049be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	461a      	mov	r2, r3
 80049d8:	2320      	movs	r3, #32
 80049da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	461a      	mov	r2, r3
 80049f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	3301      	adds	r3, #1
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d199      	bne.n	8004940 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f006 fab1 	bl	800af78 <USB_ReadInterrupts>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a20:	f040 80c0 	bne.w	8004ba4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f006 fad2 	bl	800afd2 <USB_ReadDevAllInEpInterrupt>
 8004a2e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004a34:	e0b2      	b.n	8004b9c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a7 	beq.w	8004b90 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f006 faf8 	bl	800b042 <USB_ReadDevInEPInterrupt>
 8004a52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d057      	beq.n	8004b0e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	2201      	movs	r2, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7e:	4013      	ands	r3, r2
 8004a80:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2301      	movs	r3, #1
 8004a92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d132      	bne.n	8004b02 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3348      	adds	r3, #72	; 0x48
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4403      	add	r3, r0
 8004abc:	3344      	adds	r3, #68	; 0x44
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4419      	add	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4403      	add	r3, r0
 8004ad0:	3348      	adds	r3, #72	; 0x48
 8004ad2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d113      	bne.n	8004b02 <HAL_PCD_IRQHandler+0x31c>
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	4613      	mov	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3350      	adds	r3, #80	; 0x50
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d108      	bne.n	8004b02 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004afa:	461a      	mov	r2, r3
 8004afc:	2101      	movs	r1, #1
 8004afe:	f006 fb01 	bl	800b104 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f00f fc10 	bl	801432e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	461a      	mov	r2, r3
 8004b26:	2308      	movs	r3, #8
 8004b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	461a      	mov	r2, r3
 8004b42:	2310      	movs	r3, #16
 8004b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2340      	movs	r3, #64	; 0x40
 8004b60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fc48 	bl	8005420 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	3301      	adds	r3, #1
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f47f af49 	bne.w	8004a36 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f006 f9e5 	bl	800af78 <USB_ReadInterrupts>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bb8:	d122      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d108      	bne.n	8004bea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004be0:	2100      	movs	r1, #0
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f00f fdf2 	bl	80147cc <HAL_PCDEx_LPM_Callback>
 8004be8:	e002      	b.n	8004bf0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f00f fc16 	bl	801441c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f006 f9b7 	bl	800af78 <USB_ReadInterrupts>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c14:	d112      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d102      	bne.n	8004c2c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f00f fbd2 	bl	80143d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c3a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f006 f999 	bl	800af78 <USB_ReadInterrupts>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c50:	d121      	bne.n	8004c96 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004c60:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d111      	bne.n	8004c90 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c86:	2101      	movs	r1, #1
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f00f fd9f 	bl	80147cc <HAL_PCDEx_LPM_Callback>
 8004c8e:	e002      	b.n	8004c96 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f00f fb9d 	bl	80143d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f006 f96c 	bl	800af78 <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	f040 80c7 	bne.w	8004e3c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2110      	movs	r1, #16
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f005 fa3f 	bl	800a14c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd2:	e056      	b.n	8004d82 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ce6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d06:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	461a      	mov	r2, r3
 8004d36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	3301      	adds	r3, #1
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3a3      	bcc.n	8004cd4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d016      	beq.n	8004dd6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db8:	f043 030b 	orr.w	r3, r3, #11
 8004dbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dce:	f043 030b 	orr.w	r3, r3, #11
 8004dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8004dd4:	e015      	b.n	8004e02 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	4619      	mov	r1, r3
 8004de6:	f242 032b 	movw	r3, #8235	; 0x202b
 8004dea:	4313      	orrs	r3, r2
 8004dec:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfc:	f043 030b 	orr.w	r3, r3, #11
 8004e00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e26:	461a      	mov	r2, r3
 8004e28:	f006 f96c 	bl	800b104 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f006 f899 	bl	800af78 <USB_ReadInterrupts>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	d124      	bne.n	8004e9c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f006 f930 	bl	800b0bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f005 f9d4 	bl	800a20e <USB_GetDevSpeed>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681c      	ldr	r4, [r3, #0]
 8004e72:	f001 f999 	bl	80061a8 <HAL_RCC_GetHCLKFreq>
 8004e76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4620      	mov	r0, r4
 8004e82:	f004 ff07 	bl	8009c94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f00f fa79 	bl	801437e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f006 f869 	bl	800af78 <USB_ReadInterrupts>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d10a      	bne.n	8004ec6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f00f fa56 	bl	8014362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f002 0208 	and.w	r2, r2, #8
 8004ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f006 f854 	bl	800af78 <USB_ReadInterrupts>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eda:	d10f      	bne.n	8004efc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f00f fab8 	bl	801445c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f006 f839 	bl	800af78 <USB_ReadInterrupts>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f10:	d10f      	bne.n	8004f32 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f00f fa8b 	bl	8014438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f006 f81e 	bl	800af78 <USB_ReadInterrupts>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d10a      	bne.n	8004f5e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f00f fa99 	bl	8014480 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f006 f808 	bl	800af78 <USB_ReadInterrupts>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d115      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f00f fa89 	bl	801449c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	e000      	b.n	8004f9e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004f9c:	bf00      	nop
    }
  }
}
 8004f9e:	3734      	adds	r7, #52	; 0x34
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd90      	pop	{r4, r7, pc}

08004fa4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_PCD_SetAddress+0x1a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e013      	b.n	8004fe6 <HAL_PCD_SetAddress+0x42>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f005 ff78 	bl	800aecc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	70fb      	strb	r3, [r7, #3]
 8005000:	460b      	mov	r3, r1
 8005002:	803b      	strh	r3, [r7, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800500c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	da0f      	bge.n	8005034 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	f003 020f 	and.w	r2, r3, #15
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	3338      	adds	r3, #56	; 0x38
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	3304      	adds	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	705a      	strb	r2, [r3, #1]
 8005032:	e00f      	b.n	8005054 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	3304      	adds	r3, #4
 800504c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005060:	883a      	ldrh	r2, [r7, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	78ba      	ldrb	r2, [r7, #2]
 800506a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800507e:	78bb      	ldrb	r3, [r7, #2]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d102      	bne.n	800508a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_PCD_EP_Open+0xaa>
 8005094:	2302      	movs	r3, #2
 8005096:	e00e      	b.n	80050b6 <HAL_PCD_EP_Open+0xc8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68f9      	ldr	r1, [r7, #12]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f005 f8d6 	bl	800a258 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80050b4:	7afb      	ldrb	r3, [r7, #11]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da0f      	bge.n	80050f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	f003 020f 	and.w	r2, r3, #15
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	3338      	adds	r3, #56	; 0x38
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	3304      	adds	r3, #4
 80050e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	705a      	strb	r2, [r3, #1]
 80050f0:	e00f      	b.n	8005112 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	f003 020f 	and.w	r2, r3, #15
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	4413      	add	r3, r2
 8005108:	3304      	adds	r3, #4
 800510a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	b2da      	uxtb	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_PCD_EP_Close+0x6e>
 8005128:	2302      	movs	r3, #2
 800512a:	e00e      	b.n	800514a <HAL_PCD_EP_Close+0x8c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	4618      	mov	r0, r3
 800513c:	f005 f914 	bl	800a368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b086      	sub	sp, #24
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	460b      	mov	r3, r1
 8005160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005162:	7afb      	ldrb	r3, [r7, #11]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	3304      	adds	r3, #4
 800517a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2200      	movs	r2, #0
 800518c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2200      	movs	r2, #0
 8005192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005194:	7afb      	ldrb	r3, [r7, #11]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	b2da      	uxtb	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d102      	bne.n	80051ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d109      	bne.n	80051cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	f005 fbf7 	bl	800a9b8 <USB_EP0StartXfer>
 80051ca:	e008      	b.n	80051de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	6979      	ldr	r1, [r7, #20]
 80051da:	f005 f9a1 	bl	800a520 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	460b      	mov	r3, r1
 8005226:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005228:	7afb      	ldrb	r3, [r7, #11]
 800522a:	f003 020f 	and.w	r2, r3, #15
 800522e:	4613      	mov	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	3338      	adds	r3, #56	; 0x38
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	3304      	adds	r3, #4
 800523e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2200      	movs	r2, #0
 8005250:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2201      	movs	r2, #1
 8005256:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	b2da      	uxtb	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005272:	7afb      	ldrb	r3, [r7, #11]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	6979      	ldr	r1, [r7, #20]
 800528a:	f005 fb95 	bl	800a9b8 <USB_EP0StartXfer>
 800528e:	e008      	b.n	80052a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	f005 f93f 	bl	800a520 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	f003 020f 	and.w	r2, r3, #15
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d901      	bls.n	80052ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e050      	b.n	800536c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da0f      	bge.n	80052f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	f003 020f 	and.w	r2, r3, #15
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	3338      	adds	r3, #56	; 0x38
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4413      	add	r3, r2
 80052e6:	3304      	adds	r3, #4
 80052e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	705a      	strb	r2, [r3, #1]
 80052f0:	e00d      	b.n	800530e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	3304      	adds	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	b2da      	uxtb	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_PCD_EP_SetStall+0x82>
 800532a:	2302      	movs	r3, #2
 800532c:	e01e      	b.n	800536c <HAL_PCD_EP_SetStall+0xc0>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	4618      	mov	r0, r3
 800533e:	f005 fcf1 	bl	800ad24 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	b2d9      	uxtb	r1, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800535c:	461a      	mov	r2, r3
 800535e:	f005 fed1 	bl	800b104 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	f003 020f 	and.w	r2, r3, #15
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d901      	bls.n	8005392 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e042      	b.n	8005418 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005396:	2b00      	cmp	r3, #0
 8005398:	da0f      	bge.n	80053ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	3338      	adds	r3, #56	; 0x38
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	3304      	adds	r3, #4
 80053b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	705a      	strb	r2, [r3, #1]
 80053b8:	e00f      	b.n	80053da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	3304      	adds	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_PCD_EP_ClrStall+0x86>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e00e      	b.n	8005418 <HAL_PCD_EP_ClrStall+0xa4>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68f9      	ldr	r1, [r7, #12]
 8005408:	4618      	mov	r0, r3
 800540a:	f005 fcf9 	bl	800ae00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	3338      	adds	r3, #56	; 0x38
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	3304      	adds	r3, #4
 8005446:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	429a      	cmp	r2, r3
 8005452:	d901      	bls.n	8005458 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e06c      	b.n	8005532 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	429a      	cmp	r2, r3
 800546c:	d902      	bls.n	8005474 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	3303      	adds	r3, #3
 8005478:	089b      	lsrs	r3, r3, #2
 800547a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800547c:	e02b      	b.n	80054d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	429a      	cmp	r2, r3
 8005492:	d902      	bls.n	800549a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3303      	adds	r3, #3
 800549e:	089b      	lsrs	r3, r3, #2
 80054a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68d9      	ldr	r1, [r3, #12]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4603      	mov	r3, r0
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f005 fbd5 	bl	800ac68 <USB_WritePacket>

    ep->xfer_buff  += len;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	441a      	add	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d809      	bhi.n	8005500 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d203      	bcs.n	8005500 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1be      	bne.n	800547e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	695a      	ldr	r2, [r3, #20]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	429a      	cmp	r2, r3
 800550a:	d811      	bhi.n	8005530 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	2201      	movs	r2, #1
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	43db      	mvns	r3, r3
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552c:	4013      	ands	r3, r2
 800552e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	333c      	adds	r3, #60	; 0x3c
 8005554:	3304      	adds	r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	f040 80a0 	bne.w	80056b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d015      	beq.n	80055aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a72      	ldr	r2, [pc, #456]	; (800574c <PCD_EP_OutXfrComplete_int+0x210>)
 8005582:	4293      	cmp	r3, r2
 8005584:	f240 80dd 	bls.w	8005742 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80d7 	beq.w	8005742 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a6:	6093      	str	r3, [r2, #8]
 80055a8:	e0cb      	b.n	8005742 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	461a      	mov	r2, r3
 80055c2:	2320      	movs	r3, #32
 80055c4:	6093      	str	r3, [r2, #8]
 80055c6:	e0bc      	b.n	8005742 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 80b7 	bne.w	8005742 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a5d      	ldr	r2, [pc, #372]	; (800574c <PCD_EP_OutXfrComplete_int+0x210>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d90f      	bls.n	80055fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	461a      	mov	r2, r3
 80055f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f8:	6093      	str	r3, [r2, #8]
 80055fa:	e0a2      	b.n	8005742 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800560e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	0159      	lsls	r1, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	440b      	add	r3, r1
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005622:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4403      	add	r3, r0
 8005632:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005636:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800564a:	6819      	ldr	r1, [r3, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4403      	add	r3, r0
 800565a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4419      	add	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4403      	add	r3, r0
 8005670:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005674:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d114      	bne.n	80056a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d108      	bne.n	80056a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800569e:	461a      	mov	r2, r3
 80056a0:	2101      	movs	r1, #1
 80056a2:	f005 fd2f 	bl	800b104 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f00e fe23 	bl	80142f8 <HAL_PCD_DataOutStageCallback>
 80056b2:	e046      	b.n	8005742 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4a26      	ldr	r2, [pc, #152]	; (8005750 <PCD_EP_OutXfrComplete_int+0x214>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d124      	bne.n	8005706 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	461a      	mov	r2, r3
 80056d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d8:	6093      	str	r3, [r2, #8]
 80056da:	e032      	b.n	8005742 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	461a      	mov	r2, r3
 80056f4:	2320      	movs	r3, #32
 80056f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f00e fdfa 	bl	80142f8 <HAL_PCD_DataOutStageCallback>
 8005704:	e01d      	b.n	8005742 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d114      	bne.n	8005736 <PCD_EP_OutXfrComplete_int+0x1fa>
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800572e:	461a      	mov	r2, r3
 8005730:	2100      	movs	r1, #0
 8005732:	f005 fce7 	bl	800b104 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f00e fddb 	bl	80142f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	4f54300a 	.word	0x4f54300a
 8005750:	4f54310a 	.word	0x4f54310a

08005754 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	333c      	adds	r3, #60	; 0x3c
 800576c:	3304      	adds	r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <PCD_EP_OutSetupPacket_int+0x88>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d90e      	bls.n	80057a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	461a      	mov	r2, r3
 80057a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f00e fd93 	bl	80142d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <PCD_EP_OutSetupPacket_int+0x88>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d90c      	bls.n	80057d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d108      	bne.n	80057d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057c8:	461a      	mov	r2, r3
 80057ca:	2101      	movs	r1, #1
 80057cc:	f005 fc9a 	bl	800b104 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	4f54300a 	.word	0x4f54300a

080057e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
 80057ec:	4613      	mov	r3, r2
 80057ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80057fe:	883b      	ldrh	r3, [r7, #0]
 8005800:	0419      	lsls	r1, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	430a      	orrs	r2, r1
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
 800580c:	e028      	b.n	8005860 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4413      	add	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
 8005820:	e00d      	b.n	800583e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	3340      	adds	r3, #64	; 0x40
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4413      	add	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	3301      	adds	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	3b01      	subs	r3, #1
 8005844:	429a      	cmp	r2, r3
 8005846:	d3ec      	bcc.n	8005822 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005848:	883b      	ldrh	r3, [r7, #0]
 800584a:	0418      	lsls	r0, r3, #16
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6819      	ldr	r1, [r3, #0]
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	3b01      	subs	r3, #1
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	4302      	orrs	r2, r0
 8005858:	3340      	adds	r3, #64	; 0x40
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	887a      	ldrh	r2, [r7, #2]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	10000003 	.word	0x10000003

080058d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80058e0:	2300      	movs	r3, #0
 80058e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e291      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8087 	beq.w	8005a0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058fc:	4b96      	ldr	r3, [pc, #600]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 030c 	and.w	r3, r3, #12
 8005904:	2b04      	cmp	r3, #4
 8005906:	d00c      	beq.n	8005922 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005908:	4b93      	ldr	r3, [pc, #588]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b08      	cmp	r3, #8
 8005912:	d112      	bne.n	800593a <HAL_RCC_OscConfig+0x62>
 8005914:	4b90      	ldr	r3, [pc, #576]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005920:	d10b      	bne.n	800593a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005922:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d06c      	beq.n	8005a08 <HAL_RCC_OscConfig+0x130>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d168      	bne.n	8005a08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e26b      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005942:	d106      	bne.n	8005952 <HAL_RCC_OscConfig+0x7a>
 8005944:	4b84      	ldr	r3, [pc, #528]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a83      	ldr	r2, [pc, #524]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 800594a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e02e      	b.n	80059b0 <HAL_RCC_OscConfig+0xd8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10c      	bne.n	8005974 <HAL_RCC_OscConfig+0x9c>
 800595a:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a7e      	ldr	r2, [pc, #504]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	4b7c      	ldr	r3, [pc, #496]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a7b      	ldr	r2, [pc, #492]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 800596c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e01d      	b.n	80059b0 <HAL_RCC_OscConfig+0xd8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800597c:	d10c      	bne.n	8005998 <HAL_RCC_OscConfig+0xc0>
 800597e:	4b76      	ldr	r3, [pc, #472]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a75      	ldr	r2, [pc, #468]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4b73      	ldr	r3, [pc, #460]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a72      	ldr	r2, [pc, #456]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e00b      	b.n	80059b0 <HAL_RCC_OscConfig+0xd8>
 8005998:	4b6f      	ldr	r3, [pc, #444]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a6e      	ldr	r2, [pc, #440]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 800599e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	4b6c      	ldr	r3, [pc, #432]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a6b      	ldr	r2, [pc, #428]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fd ff3e 	bl	8003838 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c0:	f7fd ff3a 	bl	8003838 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	; 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e21f      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	4b61      	ldr	r3, [pc, #388]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCC_OscConfig+0xe8>
 80059de:	e014      	b.n	8005a0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fd ff2a 	bl	8003838 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e8:	f7fd ff26 	bl	8003838 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b64      	cmp	r3, #100	; 0x64
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e20b      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fa:	4b57      	ldr	r3, [pc, #348]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x110>
 8005a06:	e000      	b.n	8005a0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d069      	beq.n	8005aea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a16:	4b50      	ldr	r3, [pc, #320]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a22:	4b4d      	ldr	r3, [pc, #308]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d11c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x190>
 8005a2e:	4b4a      	ldr	r3, [pc, #296]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3a:	4b47      	ldr	r3, [pc, #284]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_RCC_OscConfig+0x17a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d001      	beq.n	8005a52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e1df      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a52:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	493d      	ldr	r1, [pc, #244]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a66:	e040      	b.n	8005aea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a70:	4b39      	ldr	r3, [pc, #228]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a38      	ldr	r2, [pc, #224]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fd fedc 	bl	8003838 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a84:	f7fd fed8 	bl	8003838 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1bd      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a96:	4b30      	ldr	r3, [pc, #192]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa2:	4b2d      	ldr	r3, [pc, #180]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4929      	ldr	r1, [pc, #164]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]
 8005ab6:	e018      	b.n	8005aea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab8:	4b27      	ldr	r3, [pc, #156]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fd feb8 	bl	8003838 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005acc:	f7fd feb4 	bl	8003838 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e199      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d038      	beq.n	8005b68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d019      	beq.n	8005b32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afe:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0a:	f7fd fe95 	bl	8003838 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b12:	f7fd fe91 	bl	8003838 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e176      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b24:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x23a>
 8005b30:	e01a      	b.n	8005b68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b36:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fd fe7b 	bl	8003838 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b46:	f7fd fe77 	bl	8003838 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d903      	bls.n	8005b5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e15c      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
 8005b58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5c:	4b91      	ldr	r3, [pc, #580]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1ee      	bne.n	8005b46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80a4 	beq.w	8005cbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b76:	4b8b      	ldr	r3, [pc, #556]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b82:	4b88      	ldr	r3, [pc, #544]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	4a87      	ldr	r2, [pc, #540]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8e:	4b85      	ldr	r3, [pc, #532]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b9e:	4b82      	ldr	r3, [pc, #520]	; (8005da8 <HAL_RCC_OscConfig+0x4d0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d118      	bne.n	8005bdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005baa:	4b7f      	ldr	r3, [pc, #508]	; (8005da8 <HAL_RCC_OscConfig+0x4d0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a7e      	ldr	r2, [pc, #504]	; (8005da8 <HAL_RCC_OscConfig+0x4d0>)
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb6:	f7fd fe3f 	bl	8003838 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbe:	f7fd fe3b 	bl	8003838 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b64      	cmp	r3, #100	; 0x64
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e120      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd0:	4b75      	ldr	r3, [pc, #468]	; (8005da8 <HAL_RCC_OscConfig+0x4d0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x31a>
 8005be4:	4b6f      	ldr	r3, [pc, #444]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	4a6e      	ldr	r2, [pc, #440]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf0:	e02d      	b.n	8005c4e <HAL_RCC_OscConfig+0x376>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x33c>
 8005bfa:	4b6a      	ldr	r3, [pc, #424]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	4a69      	ldr	r2, [pc, #420]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6713      	str	r3, [r2, #112]	; 0x70
 8005c06:	4b67      	ldr	r3, [pc, #412]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a66      	ldr	r2, [pc, #408]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c0c:	f023 0304 	bic.w	r3, r3, #4
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	e01c      	b.n	8005c4e <HAL_RCC_OscConfig+0x376>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d10c      	bne.n	8005c36 <HAL_RCC_OscConfig+0x35e>
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	4a60      	ldr	r2, [pc, #384]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c22:	f043 0304 	orr.w	r3, r3, #4
 8005c26:	6713      	str	r3, [r2, #112]	; 0x70
 8005c28:	4b5e      	ldr	r3, [pc, #376]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	4a5d      	ldr	r2, [pc, #372]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6713      	str	r3, [r2, #112]	; 0x70
 8005c34:	e00b      	b.n	8005c4e <HAL_RCC_OscConfig+0x376>
 8005c36:	4b5b      	ldr	r3, [pc, #364]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	4a5a      	ldr	r2, [pc, #360]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	6713      	str	r3, [r2, #112]	; 0x70
 8005c42:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	4a57      	ldr	r2, [pc, #348]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c48:	f023 0304 	bic.w	r3, r3, #4
 8005c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d015      	beq.n	8005c82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fd fdef 	bl	8003838 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fd fdeb 	bl	8003838 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e0ce      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c74:	4b4b      	ldr	r3, [pc, #300]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ee      	beq.n	8005c5e <HAL_RCC_OscConfig+0x386>
 8005c80:	e014      	b.n	8005cac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fd fdd9 	bl	8003838 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8a:	f7fd fdd5 	bl	8003838 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0b8      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca0:	4b40      	ldr	r3, [pc, #256]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1ee      	bne.n	8005c8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d105      	bne.n	8005cbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb2:	4b3c      	ldr	r3, [pc, #240]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4a3b      	ldr	r2, [pc, #236]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80a4 	beq.w	8005e10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cc8:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 030c 	and.w	r3, r3, #12
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d06b      	beq.n	8005dac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d149      	bne.n	8005d70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cdc:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a30      	ldr	r2, [pc, #192]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fda6 	bl	8003838 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf0:	f7fd fda2 	bl	8003838 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e087      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	3b01      	subs	r3, #1
 8005d28:	041b      	lsls	r3, r3, #16
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	061b      	lsls	r3, r3, #24
 8005d32:	4313      	orrs	r3, r2
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fd fd76 	bl	8003838 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d50:	f7fd fd72 	bl	8003838 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e057      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x478>
 8005d6e:	e04f      	b.n	8005e10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0b      	ldr	r2, [pc, #44]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fd fd5c 	bl	8003838 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fd fd58 	bl	8003838 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e03d      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	4b03      	ldr	r3, [pc, #12]	; (8005da4 <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x4ac>
 8005da2:	e035      	b.n	8005e10 <HAL_RCC_OscConfig+0x538>
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCC_OscConfig+0x544>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d028      	beq.n	8005e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d121      	bne.n	8005e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d11a      	bne.n	8005e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005de2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d111      	bne.n	8005e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	3b01      	subs	r3, #1
 8005df6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d107      	bne.n	8005e0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800

08005e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0d0      	b.n	8005fda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e38:	4b6a      	ldr	r3, [pc, #424]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d910      	bls.n	8005e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e46:	4b67      	ldr	r3, [pc, #412]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 020f 	bic.w	r2, r3, #15
 8005e4e:	4965      	ldr	r1, [pc, #404]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e56:	4b63      	ldr	r3, [pc, #396]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d001      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0b8      	b.n	8005fda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d020      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e80:	4b59      	ldr	r3, [pc, #356]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	4a58      	ldr	r2, [pc, #352]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e98:	4b53      	ldr	r3, [pc, #332]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4a52      	ldr	r2, [pc, #328]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ea2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea4:	4b50      	ldr	r3, [pc, #320]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	494d      	ldr	r1, [pc, #308]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d040      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d107      	bne.n	8005eda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eca:	4b47      	ldr	r3, [pc, #284]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d115      	bne.n	8005f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e07f      	b.n	8005fda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d107      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee2:	4b41      	ldr	r3, [pc, #260]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e073      	b.n	8005fda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef2:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e06b      	b.n	8005fda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f02:	4b39      	ldr	r3, [pc, #228]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f023 0203 	bic.w	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	4936      	ldr	r1, [pc, #216]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f14:	f7fd fc90 	bl	8003838 <HAL_GetTick>
 8005f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1a:	e00a      	b.n	8005f32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f1c:	f7fd fc8c 	bl	8003838 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e053      	b.n	8005fda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f32:	4b2d      	ldr	r3, [pc, #180]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 020c 	and.w	r2, r3, #12
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d1eb      	bne.n	8005f1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d210      	bcs.n	8005f74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f023 020f 	bic.w	r2, r3, #15
 8005f5a:	4922      	ldr	r1, [pc, #136]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e032      	b.n	8005fda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f80:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4916      	ldr	r1, [pc, #88]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f9e:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	490e      	ldr	r1, [pc, #56]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fb2:	f000 f821 	bl	8005ff8 <HAL_RCC_GetSysClockFreq>
 8005fb6:	4601      	mov	r1, r0
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <HAL_RCC_ClockConfig+0x1cc>)
 8005fc4:	5cd3      	ldrb	r3, [r2, r3]
 8005fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8005fca:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8005fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_RCC_ClockConfig+0x1d4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fb fc9c 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40023c00 	.word	0x40023c00
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	08016944 	.word	0x08016944
 8005ff0:	20000000 	.word	0x20000000
 8005ff4:	20000004 	.word	0x20000004

08005ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	2300      	movs	r3, #0
 8006008:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800600e:	4b63      	ldr	r3, [pc, #396]	; (800619c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b04      	cmp	r3, #4
 8006018:	d007      	beq.n	800602a <HAL_RCC_GetSysClockFreq+0x32>
 800601a:	2b08      	cmp	r3, #8
 800601c:	d008      	beq.n	8006030 <HAL_RCC_GetSysClockFreq+0x38>
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 80b4 	bne.w	800618c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006024:	4b5e      	ldr	r3, [pc, #376]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006026:	60bb      	str	r3, [r7, #8]
      break;
 8006028:	e0b3      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800602a:	4b5e      	ldr	r3, [pc, #376]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800602c:	60bb      	str	r3, [r7, #8]
      break;
 800602e:	e0b0      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006030:	4b5a      	ldr	r3, [pc, #360]	; (800619c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006038:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800603a:	4b58      	ldr	r3, [pc, #352]	; (800619c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04a      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006046:	4b55      	ldr	r3, [pc, #340]	; (800619c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	099b      	lsrs	r3, r3, #6
 800604c:	f04f 0400 	mov.w	r4, #0
 8006050:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	ea03 0501 	and.w	r5, r3, r1
 800605c:	ea04 0602 	and.w	r6, r4, r2
 8006060:	4629      	mov	r1, r5
 8006062:	4632      	mov	r2, r6
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	f04f 0400 	mov.w	r4, #0
 800606c:	0154      	lsls	r4, r2, #5
 800606e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006072:	014b      	lsls	r3, r1, #5
 8006074:	4619      	mov	r1, r3
 8006076:	4622      	mov	r2, r4
 8006078:	1b49      	subs	r1, r1, r5
 800607a:	eb62 0206 	sbc.w	r2, r2, r6
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	f04f 0400 	mov.w	r4, #0
 8006086:	0194      	lsls	r4, r2, #6
 8006088:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800608c:	018b      	lsls	r3, r1, #6
 800608e:	1a5b      	subs	r3, r3, r1
 8006090:	eb64 0402 	sbc.w	r4, r4, r2
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	00e2      	lsls	r2, r4, #3
 800609e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060a2:	00d9      	lsls	r1, r3, #3
 80060a4:	460b      	mov	r3, r1
 80060a6:	4614      	mov	r4, r2
 80060a8:	195b      	adds	r3, r3, r5
 80060aa:	eb44 0406 	adc.w	r4, r4, r6
 80060ae:	f04f 0100 	mov.w	r1, #0
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	0262      	lsls	r2, r4, #9
 80060b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80060bc:	0259      	lsls	r1, r3, #9
 80060be:	460b      	mov	r3, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	4621      	mov	r1, r4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f04f 0400 	mov.w	r4, #0
 80060cc:	461a      	mov	r2, r3
 80060ce:	4623      	mov	r3, r4
 80060d0:	f7fa fdd2 	bl	8000c78 <__aeabi_uldivmod>
 80060d4:	4603      	mov	r3, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e049      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060dc:	4b2f      	ldr	r3, [pc, #188]	; (800619c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	099b      	lsrs	r3, r3, #6
 80060e2:	f04f 0400 	mov.w	r4, #0
 80060e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	ea03 0501 	and.w	r5, r3, r1
 80060f2:	ea04 0602 	and.w	r6, r4, r2
 80060f6:	4629      	mov	r1, r5
 80060f8:	4632      	mov	r2, r6
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	f04f 0400 	mov.w	r4, #0
 8006102:	0154      	lsls	r4, r2, #5
 8006104:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006108:	014b      	lsls	r3, r1, #5
 800610a:	4619      	mov	r1, r3
 800610c:	4622      	mov	r2, r4
 800610e:	1b49      	subs	r1, r1, r5
 8006110:	eb62 0206 	sbc.w	r2, r2, r6
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	f04f 0400 	mov.w	r4, #0
 800611c:	0194      	lsls	r4, r2, #6
 800611e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006122:	018b      	lsls	r3, r1, #6
 8006124:	1a5b      	subs	r3, r3, r1
 8006126:	eb64 0402 	sbc.w	r4, r4, r2
 800612a:	f04f 0100 	mov.w	r1, #0
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	00e2      	lsls	r2, r4, #3
 8006134:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006138:	00d9      	lsls	r1, r3, #3
 800613a:	460b      	mov	r3, r1
 800613c:	4614      	mov	r4, r2
 800613e:	195b      	adds	r3, r3, r5
 8006140:	eb44 0406 	adc.w	r4, r4, r6
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	02a2      	lsls	r2, r4, #10
 800614e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006152:	0299      	lsls	r1, r3, #10
 8006154:	460b      	mov	r3, r1
 8006156:	4614      	mov	r4, r2
 8006158:	4618      	mov	r0, r3
 800615a:	4621      	mov	r1, r4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f04f 0400 	mov.w	r4, #0
 8006162:	461a      	mov	r2, r3
 8006164:	4623      	mov	r3, r4
 8006166:	f7fa fd87 	bl	8000c78 <__aeabi_uldivmod>
 800616a:	4603      	mov	r3, r0
 800616c:	460c      	mov	r4, r1
 800616e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	3301      	adds	r3, #1
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	60bb      	str	r3, [r7, #8]
      break;
 800618a:	e002      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800618e:	60bb      	str	r3, [r7, #8]
      break;
 8006190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006192:	68bb      	ldr	r3, [r7, #8]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	00f42400 	.word	0x00f42400
 80061a4:	007a1200 	.word	0x007a1200

080061a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061ac:	4b03      	ldr	r3, [pc, #12]	; (80061bc <HAL_RCC_GetHCLKFreq+0x14>)
 80061ae:	681b      	ldr	r3, [r3, #0]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000000 	.word	0x20000000

080061c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061c4:	f7ff fff0 	bl	80061a8 <HAL_RCC_GetHCLKFreq>
 80061c8:	4601      	mov	r1, r0
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	0b5b      	lsrs	r3, r3, #13
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4a03      	ldr	r2, [pc, #12]	; (80061e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d6:	5cd3      	ldrb	r3, [r2, r3]
 80061d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	08016954 	.word	0x08016954

080061e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	220f      	movs	r2, #15
 80061f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <HAL_RCC_GetClockConfig+0x5c>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0203 	and.w	r2, r3, #3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006204:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <HAL_RCC_GetClockConfig+0x5c>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <HAL_RCC_GetClockConfig+0x5c>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800621c:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_RCC_GetClockConfig+0x5c>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	08db      	lsrs	r3, r3, #3
 8006222:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <HAL_RCC_GetClockConfig+0x60>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	601a      	str	r2, [r3, #0]
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40023800 	.word	0x40023800
 8006248:	40023c00 	.word	0x40023c00

0800624c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d012      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006274:	4b69      	ldr	r3, [pc, #420]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	4a68      	ldr	r2, [pc, #416]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800627e:	6093      	str	r3, [r2, #8]
 8006280:	4b66      	ldr	r3, [pc, #408]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006288:	4964      	ldr	r1, [pc, #400]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628a:	4313      	orrs	r3, r2
 800628c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006296:	2301      	movs	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d017      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062a6:	4b5d      	ldr	r3, [pc, #372]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	4959      	ldr	r1, [pc, #356]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c4:	d101      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80062c6:	2301      	movs	r3, #1
 80062c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80062d2:	2301      	movs	r3, #1
 80062d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d017      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062e2:	4b4e      	ldr	r3, [pc, #312]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	494a      	ldr	r1, [pc, #296]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006300:	d101      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006302:	2301      	movs	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800630e:	2301      	movs	r3, #1
 8006310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800631e:	2301      	movs	r3, #1
 8006320:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 808b 	beq.w	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006330:	4b3a      	ldr	r3, [pc, #232]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	4a39      	ldr	r2, [pc, #228]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633a:	6413      	str	r3, [r2, #64]	; 0x40
 800633c:	4b37      	ldr	r3, [pc, #220]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006348:	4b35      	ldr	r3, [pc, #212]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a34      	ldr	r2, [pc, #208]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800634e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006354:	f7fd fa70 	bl	8003838 <HAL_GetTick>
 8006358:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800635a:	e008      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800635c:	f7fd fa6c 	bl	8003838 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b64      	cmp	r3, #100	; 0x64
 8006368:	d901      	bls.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e31e      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800636e:	4b2c      	ldr	r3, [pc, #176]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800637a:	4b28      	ldr	r3, [pc, #160]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800637c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006382:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d035      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	429a      	cmp	r2, r3
 8006396:	d02e      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006398:	4b20      	ldr	r3, [pc, #128]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063a2:	4b1e      	ldr	r3, [pc, #120]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	4a1d      	ldr	r2, [pc, #116]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4a1a      	ldr	r2, [pc, #104]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063c0:	4b16      	ldr	r3, [pc, #88]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d114      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fd fa34 	bl	8003838 <HAL_GetTick>
 80063d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d2:	e00a      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d4:	f7fd fa30 	bl	8003838 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e2e0      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ea:	4b0c      	ldr	r3, [pc, #48]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ee      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006402:	d111      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006412:	400b      	ands	r3, r1
 8006414:	4901      	ldr	r1, [pc, #4]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006416:	4313      	orrs	r3, r2
 8006418:	608b      	str	r3, [r1, #8]
 800641a:	e00b      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800641c:	40023800 	.word	0x40023800
 8006420:	40007000 	.word	0x40007000
 8006424:	0ffffcff 	.word	0x0ffffcff
 8006428:	4bac      	ldr	r3, [pc, #688]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4aab      	ldr	r2, [pc, #684]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800642e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006432:	6093      	str	r3, [r2, #8]
 8006434:	4ba9      	ldr	r3, [pc, #676]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006440:	49a6      	ldr	r1, [pc, #664]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006442:	4313      	orrs	r3, r2
 8006444:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b00      	cmp	r3, #0
 8006450:	d010      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006452:	4ba2      	ldr	r3, [pc, #648]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006458:	4aa0      	ldr	r2, [pc, #640]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800645a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006462:	4b9e      	ldr	r3, [pc, #632]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006464:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	499b      	ldr	r1, [pc, #620]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006480:	4b96      	ldr	r3, [pc, #600]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006486:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648e:	4993      	ldr	r1, [pc, #588]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064a2:	4b8e      	ldr	r3, [pc, #568]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b0:	498a      	ldr	r1, [pc, #552]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064c4:	4b85      	ldr	r3, [pc, #532]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d2:	4982      	ldr	r1, [pc, #520]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064e6:	4b7d      	ldr	r3, [pc, #500]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	4979      	ldr	r1, [pc, #484]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006508:	4b74      	ldr	r3, [pc, #464]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650e:	f023 0203 	bic.w	r2, r3, #3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006516:	4971      	ldr	r1, [pc, #452]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800652a:	4b6c      	ldr	r3, [pc, #432]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006530:	f023 020c 	bic.w	r2, r3, #12
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006538:	4968      	ldr	r1, [pc, #416]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800654c:	4b63      	ldr	r3, [pc, #396]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006552:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655a:	4960      	ldr	r1, [pc, #384]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800656e:	4b5b      	ldr	r3, [pc, #364]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006574:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657c:	4957      	ldr	r1, [pc, #348]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006590:	4b52      	ldr	r3, [pc, #328]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	494f      	ldr	r1, [pc, #316]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80065b2:	4b4a      	ldr	r3, [pc, #296]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c0:	4946      	ldr	r1, [pc, #280]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80065d4:	4b41      	ldr	r3, [pc, #260]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	493e      	ldr	r1, [pc, #248]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80065f6:	4b39      	ldr	r3, [pc, #228]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006604:	4935      	ldr	r1, [pc, #212]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006618:	4b30      	ldr	r3, [pc, #192]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006626:	492d      	ldr	r1, [pc, #180]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d011      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800663a:	4b28      	ldr	r3, [pc, #160]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800663c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006640:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006648:	4924      	ldr	r1, [pc, #144]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006658:	d101      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800666a:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006670:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006678:	4918      	ldr	r1, [pc, #96]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800668c:	4b13      	ldr	r3, [pc, #76]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800669c:	490f      	ldr	r1, [pc, #60]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d005      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066b2:	f040 80d8 	bne.w	8006866 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a08      	ldr	r2, [pc, #32]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c2:	f7fd f8b9 	bl	8003838 <HAL_GetTick>
 80066c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066c8:	e00a      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066ca:	f7fd f8b5 	bl	8003838 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b64      	cmp	r3, #100	; 0x64
 80066d6:	d903      	bls.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e167      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x760>
 80066dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066e0:	4bad      	ldr	r3, [pc, #692]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1ee      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d021      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11d      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006700:	4ba5      	ldr	r3, [pc, #660]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800670e:	4ba2      	ldr	r3, [pc, #648]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	019a      	lsls	r2, r3, #6
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	041b      	lsls	r3, r3, #16
 8006726:	431a      	orrs	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	061b      	lsls	r3, r3, #24
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	071b      	lsls	r3, r3, #28
 8006734:	4998      	ldr	r1, [pc, #608]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006750:	d00a      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800675a:	2b00      	cmp	r3, #0
 800675c:	d02e      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006766:	d129      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006768:	4b8b      	ldr	r3, [pc, #556]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800676a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006776:	4b88      	ldr	r3, [pc, #544]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800677c:	0f1b      	lsrs	r3, r3, #28
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	019a      	lsls	r2, r3, #6
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	041b      	lsls	r3, r3, #16
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	061b      	lsls	r3, r3, #24
 8006796:	431a      	orrs	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	071b      	lsls	r3, r3, #28
 800679c:	497e      	ldr	r1, [pc, #504]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067a4:	4b7c      	ldr	r3, [pc, #496]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067aa:	f023 021f 	bic.w	r2, r3, #31
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	3b01      	subs	r3, #1
 80067b4:	4978      	ldr	r1, [pc, #480]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01d      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067c8:	4b73      	ldr	r3, [pc, #460]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ce:	0e1b      	lsrs	r3, r3, #24
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067d6:	4b70      	ldr	r3, [pc, #448]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067dc:	0f1b      	lsrs	r3, r3, #28
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	019a      	lsls	r2, r3, #6
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	431a      	orrs	r2, r3
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	061b      	lsls	r3, r3, #24
 80067f6:	431a      	orrs	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	071b      	lsls	r3, r3, #28
 80067fc:	4966      	ldr	r1, [pc, #408]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d011      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	019a      	lsls	r2, r3, #6
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	041b      	lsls	r3, r3, #16
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	061b      	lsls	r3, r3, #24
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	071b      	lsls	r3, r3, #28
 800682c:	495a      	ldr	r1, [pc, #360]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006834:	4b58      	ldr	r3, [pc, #352]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a57      	ldr	r2, [pc, #348]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800683a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800683e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006840:	f7fc fffa 	bl	8003838 <HAL_GetTick>
 8006844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006846:	e008      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006848:	f7fc fff6 	bl	8003838 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b64      	cmp	r3, #100	; 0x64
 8006854:	d901      	bls.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e0a8      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800685a:	4b4f      	ldr	r3, [pc, #316]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b01      	cmp	r3, #1
 800686a:	f040 809e 	bne.w	80069aa <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800686e:	4b4a      	ldr	r3, [pc, #296]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a49      	ldr	r2, [pc, #292]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687a:	f7fc ffdd 	bl	8003838 <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006882:	f7fc ffd9 	bl	8003838 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b64      	cmp	r3, #100	; 0x64
 800688e:	d901      	bls.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e08b      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006894:	4b40      	ldr	r3, [pc, #256]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a0:	d0ef      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d02e      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d12a      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068ca:	4b33      	ldr	r3, [pc, #204]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068d8:	4b2f      	ldr	r3, [pc, #188]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80068da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068de:	0f1b      	lsrs	r3, r3, #28
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	019a      	lsls	r2, r3, #6
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	061b      	lsls	r3, r3, #24
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	071b      	lsls	r3, r3, #28
 80068fe:	4926      	ldr	r1, [pc, #152]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006900:	4313      	orrs	r3, r2
 8006902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800690c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	3b01      	subs	r3, #1
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	491f      	ldr	r1, [pc, #124]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d022      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006934:	d11d      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006936:	4b18      	ldr	r3, [pc, #96]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693c:	0e1b      	lsrs	r3, r3, #24
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006944:	4b14      	ldr	r3, [pc, #80]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694a:	0f1b      	lsrs	r3, r3, #28
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	019a      	lsls	r2, r3, #6
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	431a      	orrs	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	061b      	lsls	r3, r3, #24
 8006964:	431a      	orrs	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	071b      	lsls	r3, r3, #28
 800696a:	490b      	ldr	r1, [pc, #44]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a08      	ldr	r2, [pc, #32]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697e:	f7fc ff5b 	bl	8003838 <HAL_GetTick>
 8006982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006984:	e00a      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006986:	f7fc ff57 	bl	8003838 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b64      	cmp	r3, #100	; 0x64
 8006992:	d903      	bls.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e009      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006998:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a8:	d1ed      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3720      	adds	r7, #32
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40023800 	.word	0x40023800

080069b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e022      	b.n	8006a10 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d105      	bne.n	80069e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fa fdb1 	bl	8001544 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2203      	movs	r2, #3
 80069e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f814 	bl	8006a18 <HAL_SD_InitCard>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e00a      	b.n	8006a10 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a18:	b5b0      	push	{r4, r5, r7, lr}
 8006a1a:	b08e      	sub	sp, #56	; 0x38
 8006a1c:	af04      	add	r7, sp, #16
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006a34:	2376      	movs	r3, #118	; 0x76
 8006a36:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681d      	ldr	r5, [r3, #0]
 8006a3c:	466c      	mov	r4, sp
 8006a3e:	f107 0314 	add.w	r3, r7, #20
 8006a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a4a:	f107 0308 	add.w	r3, r7, #8
 8006a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a50:	4628      	mov	r0, r5
 8006a52:	f002 fb5f 	bl	8009114 <SDMMC_Init>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e03b      	b.n	8006ae0 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a76:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 fb93 	bl	80091a8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a90:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 ffca 	bl	8007a2c <SD_PowerON>
 8006a98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e013      	b.n	8006ae0 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fee9 	bl	8007890 <SD_InitCard>
 8006abe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3728      	adds	r7, #40	; 0x28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bdb0      	pop	{r4, r5, r7, pc}

08006ae8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08c      	sub	sp, #48	; 0x30
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d107      	bne.n	8006b10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0cc      	b.n	8006caa <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 80c5 	bne.w	8006ca8 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	441a      	add	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d907      	bls.n	8006b42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e0b3      	b.n	8006caa <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2203      	movs	r2, #3
 8006b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	4a53      	ldr	r2, [pc, #332]	; (8006cb4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006b68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	4a52      	ldr	r2, [pc, #328]	; (8006cb8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8006b70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2200      	movs	r2, #0
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3380      	adds	r3, #128	; 0x80
 8006b84:	4619      	mov	r1, r3
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	025b      	lsls	r3, r3, #9
 8006b8c:	089b      	lsrs	r3, r3, #2
 8006b8e:	f7fd f811 	bl	8003bb4 <HAL_DMA_Start_IT>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d017      	beq.n	8006bc8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006ba6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a43      	ldr	r2, [pc, #268]	; (8006cbc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e070      	b.n	8006caa <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0208 	orr.w	r2, r2, #8
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d002      	beq.n	8006be6 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	025b      	lsls	r3, r3, #9
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f002 fb6e 	bl	80092d0 <SDMMC_CmdBlockLength>
 8006bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00f      	beq.n	8006c1c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2e      	ldr	r2, [pc, #184]	; (8006cbc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e046      	b.n	8006caa <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	025b      	lsls	r3, r3, #9
 8006c26:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c28:	2390      	movs	r3, #144	; 0x90
 8006c2a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f107 0210 	add.w	r2, r7, #16
 8006c40:	4611      	mov	r1, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f002 fb18 	bl	8009278 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d90a      	bls.n	8006c64 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2282      	movs	r2, #130	; 0x82
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f002 fb7c 	bl	8009358 <SDMMC_CmdReadMultiBlock>
 8006c60:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c62:	e009      	b.n	8006c78 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2281      	movs	r2, #129	; 0x81
 8006c68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c70:	4618      	mov	r0, r3
 8006c72:	f002 fb4f 	bl	8009314 <SDMMC_CmdReadSingleBlock>
 8006c76:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d012      	beq.n	8006ca4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a0e      	ldr	r2, [pc, #56]	; (8006cbc <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e002      	b.n	8006caa <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3730      	adds	r7, #48	; 0x30
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	0800769f 	.word	0x0800769f
 8006cb8:	08007711 	.word	0x08007711
 8006cbc:	004005ff 	.word	0x004005ff

08006cc0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08c      	sub	sp, #48	; 0x30
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d107      	bne.n	8006ce8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0cf      	b.n	8006e88 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 80c8 	bne.w	8006e86 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d907      	bls.n	8006d1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e0b6      	b.n	8006e88 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2200      	movs	r2, #0
 8006d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 021a 	orr.w	r2, r2, #26
 8006d38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	4a54      	ldr	r2, [pc, #336]	; (8006e90 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	4a53      	ldr	r2, [pc, #332]	; (8006e94 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006d48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	2200      	movs	r2, #0
 8006d50:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d002      	beq.n	8006d60 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	025b      	lsls	r3, r3, #9
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f002 fab1 	bl	80092d0 <SDMMC_CmdBlockLength>
 8006d6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00f      	beq.n	8006d96 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a47      	ldr	r2, [pc, #284]	; (8006e98 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e078      	b.n	8006e88 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d90a      	bls.n	8006db2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	22a0      	movs	r2, #160	; 0xa0
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006da8:	4618      	mov	r0, r3
 8006daa:	f002 fb19 	bl	80093e0 <SDMMC_CmdWriteMultiBlock>
 8006dae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006db0:	e009      	b.n	8006dc6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2290      	movs	r2, #144	; 0x90
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 faec 	bl	800939c <SDMMC_CmdWriteSingleBlock>
 8006dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d012      	beq.n	8006df2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a31      	ldr	r2, [pc, #196]	; (8006e98 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e04a      	b.n	8006e88 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0208 	orr.w	r2, r2, #8
 8006e00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3380      	adds	r3, #128	; 0x80
 8006e0e:	461a      	mov	r2, r3
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	025b      	lsls	r3, r3, #9
 8006e14:	089b      	lsrs	r3, r3, #2
 8006e16:	f7fc fecd 	bl	8003bb4 <HAL_DMA_Start_IT>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01a      	beq.n	8006e56 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 021a 	bic.w	r2, r2, #26
 8006e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e018      	b.n	8006e88 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	025b      	lsls	r3, r3, #9
 8006e60:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e62:	2390      	movs	r3, #144	; 0x90
 8006e64:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f107 0210 	add.w	r2, r7, #16
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f002 f9fb 	bl	8009278 <SDMMC_ConfigData>

      return HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	e000      	b.n	8006e88 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8006e86:	2302      	movs	r3, #2
  }
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3730      	adds	r7, #48	; 0x30
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	08007675 	.word	0x08007675
 8006e94:	08007711 	.word	0x08007711
 8006e98:	004005ff 	.word	0x004005ff

08006e9c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <HAL_SD_IRQHandler+0x2e>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 ffc8 	bl	8007e58 <SD_Read_IT>
 8006ec8:	e153      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 808d 	beq.w	8006ff4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4ba3      	ldr	r3, [pc, #652]	; (800717c <HAL_SD_IRQHandler+0x2e0>)
 8006ef0:	400b      	ands	r3, r1
 8006ef2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d039      	beq.n	8006f82 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_SD_IRQHandler+0x86>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d011      	beq.n	8006f46 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f002 fa7c 	bl	8009424 <SDMMC_CmdStopTransfer>
 8006f2c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f921 	bl	8007188 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <HAL_SD_IRQHandler+0xd6>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f004 f9fe 	bl	800b374 <HAL_SD_RxCpltCallback>
 8006f78:	e0fb      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f004 f9f0 	bl	800b360 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f80:	e0f7      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80f2 	beq.w	8007172 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d011      	beq.n	8006fbc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f002 fa41 	bl	8009424 <SDMMC_CmdStopTransfer>
 8006fa2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f8e6 	bl	8007188 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 80d5 	bne.w	8007172 <HAL_SD_IRQHandler+0x2d6>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 80cf 	bne.w	8007172 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0208 	bic.w	r2, r2, #8
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f004 f9b7 	bl	800b360 <HAL_SD_TxCpltCallback>
}
 8006ff2:	e0be      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_SD_IRQHandler+0x178>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 ff74 	bl	8007efa <SD_Write_IT>
 8007012:	e0ae      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 80a7 	beq.w	8007172 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	f043 0202 	orr.w	r2, r3, #2
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	f043 0208 	orr.w	r2, r3, #8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	f043 0210 	orr.w	r2, r3, #16
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f240 523a 	movw	r2, #1338	; 0x53a
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80070a4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f002 f9ba 	bl	8009424 <SDMMC_CmdStopTransfer>
 80070b0:	4602      	mov	r2, r0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	431a      	orrs	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f857 	bl	8007188 <HAL_SD_ErrorCallback>
}
 80070da:	e04a      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d045      	beq.n	8007172 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <HAL_SD_IRQHandler+0x25e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d011      	beq.n	800711e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	4a20      	ldr	r2, [pc, #128]	; (8007180 <HAL_SD_IRQHandler+0x2e4>)
 8007100:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	4618      	mov	r0, r3
 8007108:	f7fc fdb4 	bl	8003c74 <HAL_DMA_Abort_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d02f      	beq.n	8007172 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fb4c 	bl	80077b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800711c:	e029      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_SD_IRQHandler+0x296>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	4a13      	ldr	r2, [pc, #76]	; (8007184 <HAL_SD_IRQHandler+0x2e8>)
 8007138:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	4618      	mov	r0, r3
 8007140:	f7fc fd98 	bl	8003c74 <HAL_DMA_Abort_IT>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d013      	beq.n	8007172 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fb67 	bl	8007822 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007154:	e00d      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f004 f8ee 	bl	800b34c <HAL_SD_AbortCallback>
}
 8007170:	e7ff      	b.n	8007172 <HAL_SD_IRQHandler+0x2d6>
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	ffff3ec5 	.word	0xffff3ec5
 8007180:	080077b5 	.word	0x080077b5
 8007184:	08007823 	.word	0x08007823

08007188 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071aa:	0f9b      	lsrs	r3, r3, #30
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b6:	0e9b      	lsrs	r3, r3, #26
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c8:	0e1b      	lsrs	r3, r3, #24
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e6:	0a1b      	lsrs	r3, r3, #8
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071fc:	0d1b      	lsrs	r3, r3, #20
 80071fe:	b29a      	uxth	r2, r3
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007208:	0c1b      	lsrs	r3, r3, #16
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	b2da      	uxtb	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800721a:	0bdb      	lsrs	r3, r3, #15
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	b2da      	uxtb	r2, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800722c:	0b9b      	lsrs	r3, r3, #14
 800722e:	b2db      	uxtb	r3, r3
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	b2da      	uxtb	r2, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800723e:	0b5b      	lsrs	r3, r3, #13
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	b2da      	uxtb	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007250:	0b1b      	lsrs	r3, r3, #12
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2200      	movs	r2, #0
 8007262:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007268:	2b00      	cmp	r3, #0
 800726a:	d163      	bne.n	8007334 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007270:	009a      	lsls	r2, r3, #2
 8007272:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007276:	4013      	ands	r3, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800727c:	0f92      	lsrs	r2, r2, #30
 800727e:	431a      	orrs	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007288:	0edb      	lsrs	r3, r3, #27
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	b2da      	uxtb	r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ac:	0d5b      	lsrs	r3, r3, #21
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072be:	0c9b      	lsrs	r3, r3, #18
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d0:	0bdb      	lsrs	r3, r3, #15
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	7e1b      	ldrb	r3, [r3, #24]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	3302      	adds	r3, #2
 80072f4:	2201      	movs	r2, #1
 80072f6:	fa02 f303 	lsl.w	r3, r2, r3
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80072fe:	fb02 f203 	mul.w	r2, r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	7a1b      	ldrb	r3, [r3, #8]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f003 030f 	and.w	r3, r3, #15
 8007310:	2201      	movs	r2, #1
 8007312:	409a      	lsls	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007320:	0a52      	lsrs	r2, r2, #9
 8007322:	fb02 f203 	mul.w	r2, r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007330:	661a      	str	r2, [r3, #96]	; 0x60
 8007332:	e031      	b.n	8007398 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007338:	2b01      	cmp	r3, #1
 800733a:	d11d      	bne.n	8007378 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007340:	041b      	lsls	r3, r3, #16
 8007342:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	431a      	orrs	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	3301      	adds	r3, #1
 8007358:	029a      	lsls	r2, r3, #10
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800736c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	661a      	str	r2, [r3, #96]	; 0x60
 8007376:	e00f      	b.n	8007398 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a58      	ldr	r2, [pc, #352]	; (80074e0 <HAL_SD_GetCardCSD+0x344>)
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e09d      	b.n	80074d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739c:	0b9b      	lsrs	r3, r3, #14
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ae:	09db      	lsrs	r3, r3, #7
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d0:	0fdb      	lsrs	r3, r3, #31
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073dc:	0f5b      	lsrs	r3, r3, #29
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ee:	0e9b      	lsrs	r3, r3, #26
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007400:	0d9b      	lsrs	r3, r3, #22
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	b2da      	uxtb	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	0d5b      	lsrs	r3, r3, #21
 8007414:	b2db      	uxtb	r3, r3
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	b2da      	uxtb	r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	0c1b      	lsrs	r3, r3, #16
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	b2da      	uxtb	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	0bdb      	lsrs	r3, r3, #15
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	b2da      	uxtb	r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007456:	0b9b      	lsrs	r3, r3, #14
 8007458:	b2db      	uxtb	r3, r3
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	b2da      	uxtb	r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746a:	0b5b      	lsrs	r3, r3, #13
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	b2da      	uxtb	r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747e:	0b1b      	lsrs	r3, r3, #12
 8007480:	b2db      	uxtb	r3, r3
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	b2da      	uxtb	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007492:	0a9b      	lsrs	r3, r3, #10
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	b2da      	uxtb	r2, r3
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	004005ff 	.word	0x004005ff

080074e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800753c:	b5b0      	push	{r4, r5, r7, lr}
 800753e:	b08e      	sub	sp, #56	; 0x38
 8007540:	af04      	add	r7, sp, #16
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2203      	movs	r2, #3
 800754a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007552:	2b03      	cmp	r3, #3
 8007554:	d02e      	beq.n	80075b4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755c:	d106      	bne.n	800756c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	639a      	str	r2, [r3, #56]	; 0x38
 800756a:	e029      	b.n	80075c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007572:	d10a      	bne.n	800758a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fb0f 	bl	8007b98 <SD_WideBus_Enable>
 800757a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38
 8007588:	e01a      	b.n	80075c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb4c 	bl	8007c2e <SD_WideBus_Disable>
 8007596:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	639a      	str	r2, [r3, #56]	; 0x38
 80075a4:	e00c      	b.n	80075c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38
 80075b2:	e005      	b.n	80075c0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e024      	b.n	8007626 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681d      	ldr	r5, [r3, #0]
 8007602:	466c      	mov	r4, sp
 8007604:	f107 0318 	add.w	r3, r7, #24
 8007608:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800760c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007610:	f107 030c 	add.w	r3, r7, #12
 8007614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007616:	4628      	mov	r0, r5
 8007618:	f001 fd7c 	bl	8009114 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3728      	adds	r7, #40	; 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bdb0      	pop	{r4, r5, r7, pc}
 800762e:	bf00      	nop
 8007630:	004005ff 	.word	0x004005ff

08007634 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007640:	f107 030c 	add.w	r3, r7, #12
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa7e 	bl	8007b48 <SD_SendStatus>
 800764c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	0a5b      	lsrs	r3, r3, #9
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800766a:	693b      	ldr	r3, [r7, #16]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007690:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	2b82      	cmp	r3, #130	; 0x82
 80076b2:	d111      	bne.n	80076d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 feb3 	bl	8009424 <SDMMC_CmdStopTransfer>
 80076be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d008      	beq.n	80076d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fd58 	bl	8007188 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f022 0208 	bic.w	r2, r2, #8
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f003 fe37 	bl	800b374 <HAL_SD_RxCpltCallback>
#endif
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fc fc54 	bl	8003fcc <HAL_DMA_GetError>
 8007724:	4603      	mov	r3, r0
 8007726:	2b02      	cmp	r3, #2
 8007728:	d03e      	beq.n	80077a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d002      	beq.n	8007746 <SD_DMAError+0x36>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d12d      	bne.n	80077a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <SD_DMAError+0xa0>)
 800774c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800775c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800776a:	6978      	ldr	r0, [r7, #20]
 800776c:	f7ff ff62 	bl	8007634 <HAL_SD_GetCardState>
 8007770:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b06      	cmp	r3, #6
 8007776:	d002      	beq.n	800777e <SD_DMAError+0x6e>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b05      	cmp	r3, #5
 800777c:	d10a      	bne.n	8007794 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fe4e 	bl	8009424 <SDMMC_CmdStopTransfer>
 8007788:	4602      	mov	r2, r0
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	431a      	orrs	r2, r3
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80077a2:	6978      	ldr	r0, [r7, #20]
 80077a4:	f7ff fcf0 	bl	8007188 <HAL_SD_ErrorCallback>
#endif
  }
}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	004005ff 	.word	0x004005ff

080077b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff ff31 	bl	8007634 <HAL_SD_GetCardState>
 80077d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b06      	cmp	r3, #6
 80077e6:	d002      	beq.n	80077ee <SD_DMATxAbort+0x3a>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	d10a      	bne.n	8007804 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 fe16 	bl	8009424 <SDMMC_CmdStopTransfer>
 80077f8:	4602      	mov	r2, r0
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	431a      	orrs	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f003 fd9d 	bl	800b34c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007812:	e002      	b.n	800781a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f7ff fcb7 	bl	8007188 <HAL_SD_ErrorCallback>
}
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f240 523a 	movw	r2, #1338	; 0x53a
 8007838:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fefa 	bl	8007634 <HAL_SD_GetCardState>
 8007840:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b06      	cmp	r3, #6
 8007854:	d002      	beq.n	800785c <SD_DMARxAbort+0x3a>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b05      	cmp	r3, #5
 800785a:	d10a      	bne.n	8007872 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f001 fddf 	bl	8009424 <SDMMC_CmdStopTransfer>
 8007866:	4602      	mov	r2, r0
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	431a      	orrs	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	2b00      	cmp	r3, #0
 8007878:	d103      	bne.n	8007882 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f003 fd66 	bl	800b34c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007880:	e002      	b.n	8007888 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff fc80 	bl	8007188 <HAL_SD_ErrorCallback>
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007890:	b5b0      	push	{r4, r5, r7, lr}
 8007892:	b094      	sub	sp, #80	; 0x50
 8007894:	af04      	add	r7, sp, #16
 8007896:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007898:	2301      	movs	r3, #1
 800789a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 fc90 	bl	80091c6 <SDMMC_GetPowerState>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80078b0:	e0b7      	b.n	8007a22 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d02f      	beq.n	800791a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 febb 	bl	800963a <SDMMC_CmdSendCID>
 80078c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80078c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80078cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ce:	e0a8      	b.n	8007a22 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 fcbb 	bl	8009252 <SDMMC_GetResponse>
 80078dc:	4602      	mov	r2, r0
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2104      	movs	r1, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 fcb2 	bl	8009252 <SDMMC_GetResponse>
 80078ee:	4602      	mov	r2, r0
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2108      	movs	r1, #8
 80078fa:	4618      	mov	r0, r3
 80078fc:	f001 fca9 	bl	8009252 <SDMMC_GetResponse>
 8007900:	4602      	mov	r2, r0
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	210c      	movs	r1, #12
 800790c:	4618      	mov	r0, r3
 800790e:	f001 fca0 	bl	8009252 <SDMMC_GetResponse>
 8007912:	4602      	mov	r2, r0
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791e:	2b03      	cmp	r3, #3
 8007920:	d00d      	beq.n	800793e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f107 020e 	add.w	r2, r7, #14
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f001 fec1 	bl	80096b4 <SDMMC_CmdSetRelAdd>
 8007932:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <SD_InitCard+0xae>
    {
      return errorstate;
 800793a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793c:	e071      	b.n	8007a22 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007942:	2b03      	cmp	r3, #3
 8007944:	d036      	beq.n	80079b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007946:	89fb      	ldrh	r3, [r7, #14]
 8007948:	461a      	mov	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	041b      	lsls	r3, r3, #16
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f001 fe8b 	bl	8009676 <SDMMC_CmdSendCSD>
 8007960:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796a:	e05a      	b.n	8007a22 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2100      	movs	r1, #0
 8007972:	4618      	mov	r0, r3
 8007974:	f001 fc6d 	bl	8009252 <SDMMC_GetResponse>
 8007978:	4602      	mov	r2, r0
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2104      	movs	r1, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f001 fc64 	bl	8009252 <SDMMC_GetResponse>
 800798a:	4602      	mov	r2, r0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2108      	movs	r1, #8
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fc5b 	bl	8009252 <SDMMC_GetResponse>
 800799c:	4602      	mov	r2, r0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	210c      	movs	r1, #12
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 fc52 	bl	8009252 <SDMMC_GetResponse>
 80079ae:	4602      	mov	r2, r0
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2104      	movs	r1, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 fc49 	bl	8009252 <SDMMC_GetResponse>
 80079c0:	4603      	mov	r3, r0
 80079c2:	0d1a      	lsrs	r2, r3, #20
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80079c8:	f107 0310 	add.w	r3, r7, #16
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fbe4 	bl	800719c <HAL_SD_GetCardCSD>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079de:	e020      	b.n	8007a22 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e8:	041b      	lsls	r3, r3, #16
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	461a      	mov	r2, r3
 80079f0:	4623      	mov	r3, r4
 80079f2:	4608      	mov	r0, r1
 80079f4:	f001 fd38 	bl	8009468 <SDMMC_CmdSelDesel>
 80079f8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80079fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <SD_InitCard+0x174>
  {
    return errorstate;
 8007a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a02:	e00e      	b.n	8007a22 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681d      	ldr	r5, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	466c      	mov	r4, sp
 8007a0c:	f103 0210 	add.w	r2, r3, #16
 8007a10:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a16:	3304      	adds	r3, #4
 8007a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f001 fb7a 	bl	8009114 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3740      	adds	r7, #64	; 0x40
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f001 fd32 	bl	80094ae <SDMMC_CmdGoIdleState>
 8007a4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	e072      	b.n	8007b3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 fd45 	bl	80094ea <SDMMC_CmdOperCond>
 8007a60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00d      	beq.n	8007a84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 fd1b 	bl	80094ae <SDMMC_CmdGoIdleState>
 8007a78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	e05b      	b.n	8007b3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d137      	bne.n	8007b02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2100      	movs	r1, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 fd45 	bl	8009528 <SDMMC_CmdAppCommand>
 8007a9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d02d      	beq.n	8007b02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007aaa:	e047      	b.n	8007b3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 fd38 	bl	8009528 <SDMMC_CmdAppCommand>
 8007ab8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <SD_PowerON+0x98>
    {
      return errorstate;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	e03b      	b.n	8007b3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	491e      	ldr	r1, [pc, #120]	; (8007b44 <SD_PowerON+0x118>)
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 fd4e 	bl	800956c <SDMMC_CmdAppOperCommand>
 8007ad0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ad8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007adc:	e02e      	b.n	8007b3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fbb4 	bl	8009252 <SDMMC_GetResponse>
 8007aea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	0fdb      	lsrs	r3, r3, #31
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <SD_PowerON+0xcc>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e000      	b.n	8007afa <SD_PowerON+0xce>
 8007af8:	2300      	movs	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]

    count++;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d802      	bhi.n	8007b12 <SD_PowerON+0xe6>
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0cc      	beq.n	8007aac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d902      	bls.n	8007b22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b20:	e00c      	b.n	8007b3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	645a      	str	r2, [r3, #68]	; 0x44
 8007b32:	e002      	b.n	8007b3a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	c1100000 	.word	0xc1100000

08007b48 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007b58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b5c:	e018      	b.n	8007b90 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	f001 fdc3 	bl	80096f6 <SDMMC_CmdSendStatus>
 8007b70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	e009      	b.n	8007b90 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fb65 	bl	8009252 <SDMMC_GetResponse>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fb4f 	bl	8009252 <SDMMC_GetResponse>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bbe:	d102      	bne.n	8007bc6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bc4:	e02f      	b.n	8007c26 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f879 	bl	8007cc4 <SD_FindSCR>
 8007bd2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	e023      	b.n	8007c26 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01c      	beq.n	8007c22 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f001 fc97 	bl	8009528 <SDMMC_CmdAppCommand>
 8007bfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	e00f      	b.n	8007c26 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2102      	movs	r1, #2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fcd1 	bl	80095b4 <SDMMC_CmdBusWidth>
 8007c12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	e003      	b.n	8007c26 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e001      	b.n	8007c26 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b086      	sub	sp, #24
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2100      	movs	r1, #0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 fb04 	bl	8009252 <SDMMC_GetResponse>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c54:	d102      	bne.n	8007c5c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c5a:	e02f      	b.n	8007cbc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c5c:	f107 030c 	add.w	r3, r7, #12
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f82e 	bl	8007cc4 <SD_FindSCR>
 8007c68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	e023      	b.n	8007cbc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01c      	beq.n	8007cb8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f001 fc4c 	bl	8009528 <SDMMC_CmdAppCommand>
 8007c90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	e00f      	b.n	8007cbc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 fc86 	bl	80095b4 <SDMMC_CmdBusWidth>
 8007ca8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	e003      	b.n	8007cbc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e001      	b.n	8007cbc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007cb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b08f      	sub	sp, #60	; 0x3c
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cce:	f7fb fdb3 	bl	8003838 <HAL_GetTick>
 8007cd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60bb      	str	r3, [r7, #8]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2108      	movs	r1, #8
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 faf0 	bl	80092d0 <SDMMC_CmdBlockLength>
 8007cf0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <SD_FindSCR+0x38>
  {
    return errorstate;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	e0a9      	b.n	8007e50 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f001 fc0d 	bl	8009528 <SDMMC_CmdAppCommand>
 8007d0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	e09a      	b.n	8007e50 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007d20:	2308      	movs	r3, #8
 8007d22:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007d24:	2330      	movs	r3, #48	; 0x30
 8007d26:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f107 0210 	add.w	r2, r7, #16
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fa9a 	bl	8009278 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f001 fc55 	bl	80095f8 <SDMMC_CmdSendSCR>
 8007d4e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d022      	beq.n	8007d9c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	e07a      	b.n	8007e50 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00e      	beq.n	8007d86 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6819      	ldr	r1, [r3, #0]
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	f107 0208 	add.w	r2, r7, #8
 8007d74:	18d4      	adds	r4, r2, r3
 8007d76:	4608      	mov	r0, r1
 8007d78:	f001 f9f8 	bl	800916c <SDMMC_ReadFIFO>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	6023      	str	r3, [r4, #0]
      index++;
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	3301      	adds	r3, #1
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d86:	f7fb fd57 	bl	8003838 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d102      	bne.n	8007d9c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007d96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d9a:	e059      	b.n	8007e50 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da2:	f240 432a 	movw	r3, #1066	; 0x42a
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0d6      	beq.n	8007d5a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	e044      	b.n	8007e50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e037      	b.n	8007e50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2220      	movs	r2, #32
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007df6:	2320      	movs	r3, #32
 8007df8:	e02a      	b.n	8007e50 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	061a      	lsls	r2, r3, #24
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	0e1b      	lsrs	r3, r3, #24
 8007e20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	601a      	str	r2, [r3, #0]
    scr++;
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	3304      	adds	r3, #4
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	061a      	lsls	r2, r3, #24
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	0a1b      	lsrs	r3, r3, #8
 8007e3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	0e1b      	lsrs	r3, r3, #24
 8007e48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	373c      	adds	r7, #60	; 0x3c
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd90      	pop	{r4, r7, pc}

08007e58 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d03f      	beq.n	8007ef2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007e72:	2300      	movs	r3, #0
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	e033      	b.n	8007ee0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f975 	bl	800916c <SDMMC_ReadFIFO>
 8007e82:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	0e1b      	lsrs	r3, r3, #24
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	3301      	adds	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b07      	cmp	r3, #7
 8007ee4:	d9c8      	bls.n	8007e78 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b086      	sub	sp, #24
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d043      	beq.n	8007f9c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	e037      	b.n	8007f8a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	021a      	lsls	r2, r3, #8
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	041a      	lsls	r2, r3, #16
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	061a      	lsls	r2, r3, #24
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f107 0208 	add.w	r2, r7, #8
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 f901 	bl	8009186 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	3301      	adds	r3, #1
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b07      	cmp	r3, #7
 8007f8e:	d9c4      	bls.n	8007f1a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e084      	b.n	80080c0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7f9 fbb1 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ff6:	d902      	bls.n	8007ffe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	e002      	b.n	8008004 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008002:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800800c:	d007      	beq.n	800801e <HAL_SPI_Init+0x7a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008016:	d002      	beq.n	800801e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800802e:	d903      	bls.n	8008038 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	631a      	str	r2, [r3, #48]	; 0x30
 8008036:	e002      	b.n	800803e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	431a      	orrs	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	ea42 0103 	orr.w	r1, r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	f003 0204 	and.w	r2, r3, #4
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	ea42 0103 	orr.w	r1, r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69da      	ldr	r2, [r3, #28]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d110      	bne.n	8008104 <HAL_SPI_Receive_IT+0x3c>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ea:	d10b      	bne.n	8008104 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2204      	movs	r2, #4
 80080f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 f88c 	bl	8008218 <HAL_SPI_TransmitReceive_IT>
 8008100:	4603      	mov	r3, r0
 8008102:	e081      	b.n	8008208 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_SPI_Receive_IT+0x4a>
 800810e:	2302      	movs	r3, #2
 8008110:	e07a      	b.n	8008208 <HAL_SPI_Receive_IT+0x140>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b01      	cmp	r3, #1
 8008124:	d002      	beq.n	800812c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8008126:	2302      	movs	r3, #2
 8008128:	75fb      	strb	r3, [r7, #23]
    goto error;
 800812a:	e068      	b.n	80081fe <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_SPI_Receive_IT+0x70>
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d102      	bne.n	800813e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800813c:	e05f      	b.n	80081fe <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2204      	movs	r2, #4
 8008142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	88fa      	ldrh	r2, [r7, #6]
 8008156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	88fa      	ldrh	r2, [r7, #6]
 800815e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008182:	d90b      	bls.n	800819c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008192:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <HAL_SPI_Receive_IT+0x148>)
 8008198:	64da      	str	r2, [r3, #76]	; 0x4c
 800819a:	e00a      	b.n	80081b2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081aa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a19      	ldr	r2, [pc, #100]	; (8008214 <HAL_SPI_Receive_IT+0x14c>)
 80081b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ba:	d107      	bne.n	80081cc <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081ca:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80081da:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d008      	beq.n	80081fc <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	e000      	b.n	80081fe <HAL_SPI_Receive_IT+0x136>
  }

error :
 80081fc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	08008831 	.word	0x08008831
 8008214:	080087e1 	.word	0x080087e1

08008218 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_SPI_TransmitReceive_IT+0x20>
 8008234:	2302      	movs	r3, #2
 8008236:	e091      	b.n	800835c <HAL_SPI_TransmitReceive_IT+0x144>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008246:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800824e:	7dbb      	ldrb	r3, [r7, #22]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d00d      	beq.n	8008270 <HAL_SPI_TransmitReceive_IT+0x58>
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800825a:	d106      	bne.n	800826a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <HAL_SPI_TransmitReceive_IT+0x52>
 8008264:	7dbb      	ldrb	r3, [r7, #22]
 8008266:	2b04      	cmp	r3, #4
 8008268:	d002      	beq.n	8008270 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800826a:	2302      	movs	r3, #2
 800826c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800826e:	e070      	b.n	8008352 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <HAL_SPI_TransmitReceive_IT+0x6a>
 800827c:	887b      	ldrh	r3, [r7, #2]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008286:	e064      	b.n	8008352 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b04      	cmp	r3, #4
 8008292:	d003      	beq.n	800829c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2205      	movs	r2, #5
 8008298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	887a      	ldrh	r2, [r7, #2]
 80082ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	887a      	ldrh	r2, [r7, #2]
 80082b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	887a      	ldrh	r2, [r7, #2]
 80082be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	887a      	ldrh	r2, [r7, #2]
 80082c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082d2:	d906      	bls.n	80082e2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4a24      	ldr	r2, [pc, #144]	; (8008368 <HAL_SPI_TransmitReceive_IT+0x150>)
 80082d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_SPI_TransmitReceive_IT+0x154>)
 80082de:	651a      	str	r2, [r3, #80]	; 0x50
 80082e0:	e005      	b.n	80082ee <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4a22      	ldr	r2, [pc, #136]	; (8008370 <HAL_SPI_TransmitReceive_IT+0x158>)
 80082e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4a22      	ldr	r2, [pc, #136]	; (8008374 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80082ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082f6:	d802      	bhi.n	80082fe <HAL_SPI_TransmitReceive_IT+0xe6>
 80082f8:	887b      	ldrh	r3, [r7, #2]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d908      	bls.n	8008310 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	e007      	b.n	8008320 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800831e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800832e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d008      	beq.n	8008350 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e000      	b.n	8008352 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008350:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
}
 800835c:	4618      	mov	r0, r3
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	0800871b 	.word	0x0800871b
 800836c:	08008781 	.word	0x08008781
 8008370:	080085cb 	.word	0x080085cb
 8008374:	08008689 	.word	0x08008689

08008378 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	099b      	lsrs	r3, r3, #6
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10f      	bne.n	80083bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	099b      	lsrs	r3, r3, #6
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
    return;
 80083ba:	e0d8      	b.n	800856e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <HAL_SPI_IRQHandler+0x66>
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	09db      	lsrs	r3, r3, #7
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	4798      	blx	r3
    return;
 80083dc:	e0c7      	b.n	800856e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	095b      	lsrs	r3, r3, #5
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10c      	bne.n	8008404 <HAL_SPI_IRQHandler+0x8c>
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	099b      	lsrs	r3, r3, #6
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <HAL_SPI_IRQHandler+0x8c>
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 80b5 	beq.w	800856e <HAL_SPI_IRQHandler+0x1f6>
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 80ae 	beq.w	800856e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	099b      	lsrs	r3, r3, #6
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d023      	beq.n	8008466 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d011      	beq.n	800844e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842e:	f043 0204 	orr.w	r2, r3, #4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	e00b      	b.n	8008466 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800844e:	2300      	movs	r3, #0
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	693b      	ldr	r3, [r7, #16]
        return;
 8008464:	e083      	b.n	800856e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d014      	beq.n	800849c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008476:	f043 0201 	orr.w	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ac:	f043 0208 	orr.w	r2, r3, #8
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084b4:	2300      	movs	r3, #0
 80084b6:	60bb      	str	r3, [r7, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	60bb      	str	r3, [r7, #8]
 80084c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d050      	beq.n	800856c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <HAL_SPI_IRQHandler+0x17e>
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d034      	beq.n	8008560 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0203 	bic.w	r2, r2, #3
 8008504:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850a:	2b00      	cmp	r3, #0
 800850c:	d011      	beq.n	8008532 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	4a18      	ldr	r2, [pc, #96]	; (8008574 <HAL_SPI_IRQHandler+0x1fc>)
 8008514:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851a:	4618      	mov	r0, r3
 800851c:	f7fb fbaa 	bl	8003c74 <HAL_DMA_Abort_IT>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008536:	2b00      	cmp	r3, #0
 8008538:	d016      	beq.n	8008568 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853e:	4a0d      	ldr	r2, [pc, #52]	; (8008574 <HAL_SPI_IRQHandler+0x1fc>)
 8008540:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008546:	4618      	mov	r0, r3
 8008548:	f7fb fb94 	bl	8003c74 <HAL_DMA_Abort_IT>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800855e:	e003      	b.n	8008568 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f813 	bl	800858c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008566:	e000      	b.n	800856a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008568:	bf00      	nop
    return;
 800856a:	bf00      	nop
 800856c:	bf00      	nop
  }
}
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	080085a1 	.word	0x080085a1

08008578 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff ffe5 	bl	800858c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d923      	bls.n	8008626 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	b292      	uxth	r2, r2
 80085ea:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	1c9a      	adds	r2, r3, #2
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b02      	subs	r3, #2
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800860e:	b29b      	uxth	r3, r3
 8008610:	2b01      	cmp	r3, #1
 8008612:	d11f      	bne.n	8008654 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008622:	605a      	str	r2, [r3, #4]
 8008624:	e016      	b.n	8008654 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f103 020c 	add.w	r2, r3, #12
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	7812      	ldrb	r2, [r2, #0]
 8008634:	b2d2      	uxtb	r2, r2
 8008636:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008648:	b29b      	uxth	r3, r3
 800864a:	3b01      	subs	r3, #1
 800864c:	b29a      	uxth	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10f      	bne.n	8008680 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800866e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa73 	bl	8008b66 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b01      	cmp	r3, #1
 8008698:	d912      	bls.n	80086c0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	881a      	ldrh	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	1c9a      	adds	r2, r3, #2
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b02      	subs	r3, #2
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086be:	e012      	b.n	80086e6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d110      	bne.n	8008712 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086fe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008706:	b29b      	uxth	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fa2a 	bl	8008b66 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68da      	ldr	r2, [r3, #12]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	b292      	uxth	r2, r2
 800872e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	1c9a      	adds	r2, r3, #2
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008752:	b29b      	uxth	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10f      	bne.n	8008778 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008766:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f9f7 	bl	8008b66 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	881a      	ldrh	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	1c9a      	adds	r2, r3, #2
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d110      	bne.n	80087d8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087c4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f9c7 	bl	8008b66 <SPI_CloseRxTx_ISR>
    }
  }
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f103 020c 	add.w	r2, r3, #12
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	7812      	ldrb	r2, [r2, #0]
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800880a:	b29b      	uxth	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f9e1 	bl	8008bea <SPI_CloseRx_ISR>
  }
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	b292      	uxth	r2, r2
 8008844:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	1c9a      	adds	r2, r3, #2
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008856:	b29b      	uxth	r3, r3
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008868:	b29b      	uxth	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f9bb 	bl	8008bea <SPI_CloseRx_ISR>
  }
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	4613      	mov	r3, r2
 800888a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800888c:	e04c      	b.n	8008928 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d048      	beq.n	8008928 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008896:	f7fa ffcf 	bl	8003838 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d902      	bls.n	80088ac <SPI_WaitFlagStateUntilTimeout+0x30>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d13d      	bne.n	8008928 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088c4:	d111      	bne.n	80088ea <SPI_WaitFlagStateUntilTimeout+0x6e>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ce:	d004      	beq.n	80088da <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d8:	d107      	bne.n	80088ea <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f2:	d10f      	bne.n	8008914 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e00f      	b.n	8008948 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	4013      	ands	r3, r2
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	429a      	cmp	r2, r3
 8008936:	bf0c      	ite	eq
 8008938:	2301      	moveq	r3, #1
 800893a:	2300      	movne	r3, #0
 800893c:	b2db      	uxtb	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	429a      	cmp	r2, r3
 8008944:	d1a3      	bne.n	800888e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800895e:	e057      	b.n	8008a10 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008966:	d106      	bne.n	8008976 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	330c      	adds	r3, #12
 8008974:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d048      	beq.n	8008a10 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800897e:	f7fa ff5b 	bl	8003838 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d902      	bls.n	8008994 <SPI_WaitFifoStateUntilTimeout+0x44>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d13d      	bne.n	8008a10 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089ac:	d111      	bne.n	80089d2 <SPI_WaitFifoStateUntilTimeout+0x82>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b6:	d004      	beq.n	80089c2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c0:	d107      	bne.n	80089d2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089da:	d10f      	bne.n	80089fc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e008      	b.n	8008a22 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d19f      	bne.n	8008960 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b086      	sub	sp, #24
 8008a2e:	af02      	add	r7, sp, #8
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a3e:	d111      	bne.n	8008a64 <SPI_EndRxTransaction+0x3a>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a48:	d004      	beq.n	8008a54 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a52:	d107      	bne.n	8008a64 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a62:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2180      	movs	r1, #128	; 0x80
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f7ff ff04 	bl	800887c <SPI_WaitFlagStateUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7e:	f043 0220 	orr.w	r2, r3, #32
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e023      	b.n	8008ad2 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a92:	d11d      	bne.n	8008ad0 <SPI_EndRxTransaction+0xa6>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a9c:	d004      	beq.n	8008aa8 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa6:	d113      	bne.n	8008ad0 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7ff ff4b 	bl	8008950 <SPI_WaitFifoStateUntilTimeout>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac4:	f043 0220 	orr.w	r2, r3, #32
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e000      	b.n	8008ad2 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af02      	add	r7, sp, #8
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7ff ff2c 	bl	8008950 <SPI_WaitFifoStateUntilTimeout>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b02:	f043 0220 	orr.w	r2, r3, #32
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e027      	b.n	8008b5e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2200      	movs	r2, #0
 8008b16:	2180      	movs	r1, #128	; 0x80
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7ff feaf 	bl	800887c <SPI_WaitFlagStateUntilTimeout>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d007      	beq.n	8008b34 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e014      	b.n	8008b5e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff ff05 	bl	8008950 <SPI_WaitFifoStateUntilTimeout>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d007      	beq.n	8008b5c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b50:	f043 0220 	orr.w	r2, r3, #32
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e000      	b.n	8008b5e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b6e:	f7fa fe63 	bl	8003838 <HAL_GetTick>
 8008b72:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0220 	bic.w	r2, r2, #32
 8008b82:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	2164      	movs	r1, #100	; 0x64
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7ff ffa6 	bl	8008ada <SPI_EndRxTxTransaction>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b98:	f043 0220 	orr.w	r2, r3, #32
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d115      	bne.n	8008bd4 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	d107      	bne.n	8008bc4 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7f9 fcfb 	bl	80025b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008bc2:	e00e      	b.n	8008be2 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff fcd3 	bl	8008578 <HAL_SPI_TxRxCpltCallback>
}
 8008bd2:	e006      	b.n	8008be2 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff fcd5 	bl	800858c <HAL_SPI_ErrorCallback>
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c00:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008c02:	f7fa fe19 	bl	8003838 <HAL_GetTick>
 8008c06:	4603      	mov	r3, r0
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2164      	movs	r1, #100	; 0x64
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff ff0c 	bl	8008a2a <SPI_EndRxTransaction>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1c:	f043 0220 	orr.w	r2, r3, #32
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7f9 fcbf 	bl	80025b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008c3a:	e002      	b.n	8008c42 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff fca5 	bl	800858c <HAL_SPI_ErrorCallback>
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e01d      	b.n	8008c98 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f815 	bl	8008ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f000 f985 	bl	8008f98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <HAL_TIM_Base_Start_IT+0x50>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b06      	cmp	r3, #6
 8008cdc:	d00b      	beq.n	8008cf6 <HAL_TIM_Base_Start_IT+0x42>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce4:	d007      	beq.n	8008cf6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f042 0201 	orr.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	00010007 	.word	0x00010007

08008d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d122      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d11b      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0202 	mvn.w	r2, #2
 8008d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f905 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008d50:	e005      	b.n	8008d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f8f7 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f908 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d122      	bne.n	8008db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d11b      	bne.n	8008db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f06f 0204 	mvn.w	r2, #4
 8008d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f8db 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008da4:	e005      	b.n	8008db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f8cd 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f8de 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b08      	cmp	r3, #8
 8008dc4:	d122      	bne.n	8008e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d11b      	bne.n	8008e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f06f 0208 	mvn.w	r2, #8
 8008ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2204      	movs	r2, #4
 8008de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f8b1 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008df8:	e005      	b.n	8008e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f8a3 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f8b4 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	2b10      	cmp	r3, #16
 8008e18:	d122      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d11b      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0210 	mvn.w	r2, #16
 8008e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2208      	movs	r2, #8
 8008e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f887 	bl	8008f5a <HAL_TIM_IC_CaptureCallback>
 8008e4c:	e005      	b.n	8008e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f879 	bl	8008f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f88a 	bl	8008f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d10e      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d107      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f06f 0201 	mvn.w	r2, #1
 8008e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7f8 fb1a 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e96:	2b80      	cmp	r3, #128	; 0x80
 8008e98:	d10e      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea4:	2b80      	cmp	r3, #128	; 0x80
 8008ea6:	d107      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f91a 	bl	80090ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec6:	d10e      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed2:	2b80      	cmp	r3, #128	; 0x80
 8008ed4:	d107      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f90d 	bl	8009100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef0:	2b40      	cmp	r3, #64	; 0x40
 8008ef2:	d10e      	bne.n	8008f12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d107      	bne.n	8008f12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f838 	bl	8008f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d10e      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d107      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f06f 0220 	mvn.w	r2, #32
 8008f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8cd 	bl	80090d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
	...

08008f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a40      	ldr	r2, [pc, #256]	; (80090ac <TIM_Base_SetConfig+0x114>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d013      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb6:	d00f      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a3d      	ldr	r2, [pc, #244]	; (80090b0 <TIM_Base_SetConfig+0x118>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00b      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a3c      	ldr	r2, [pc, #240]	; (80090b4 <TIM_Base_SetConfig+0x11c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d007      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a3b      	ldr	r2, [pc, #236]	; (80090b8 <TIM_Base_SetConfig+0x120>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_Base_SetConfig+0x40>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a3a      	ldr	r2, [pc, #232]	; (80090bc <TIM_Base_SetConfig+0x124>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d108      	bne.n	8008fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2f      	ldr	r2, [pc, #188]	; (80090ac <TIM_Base_SetConfig+0x114>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d02b      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff8:	d027      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a2c      	ldr	r2, [pc, #176]	; (80090b0 <TIM_Base_SetConfig+0x118>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d023      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a2b      	ldr	r2, [pc, #172]	; (80090b4 <TIM_Base_SetConfig+0x11c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01f      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a2a      	ldr	r2, [pc, #168]	; (80090b8 <TIM_Base_SetConfig+0x120>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d01b      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a29      	ldr	r2, [pc, #164]	; (80090bc <TIM_Base_SetConfig+0x124>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d017      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a28      	ldr	r2, [pc, #160]	; (80090c0 <TIM_Base_SetConfig+0x128>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d013      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a27      	ldr	r2, [pc, #156]	; (80090c4 <TIM_Base_SetConfig+0x12c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00f      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a26      	ldr	r2, [pc, #152]	; (80090c8 <TIM_Base_SetConfig+0x130>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00b      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a25      	ldr	r2, [pc, #148]	; (80090cc <TIM_Base_SetConfig+0x134>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d007      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a24      	ldr	r2, [pc, #144]	; (80090d0 <TIM_Base_SetConfig+0x138>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_Base_SetConfig+0xb2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a23      	ldr	r2, [pc, #140]	; (80090d4 <TIM_Base_SetConfig+0x13c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d108      	bne.n	800905c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <TIM_Base_SetConfig+0x114>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_Base_SetConfig+0xf8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a0c      	ldr	r2, [pc, #48]	; (80090bc <TIM_Base_SetConfig+0x124>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d103      	bne.n	8009098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	615a      	str	r2, [r3, #20]
}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40010000 	.word	0x40010000
 80090b0:	40000400 	.word	0x40000400
 80090b4:	40000800 	.word	0x40000800
 80090b8:	40000c00 	.word	0x40000c00
 80090bc:	40010400 	.word	0x40010400
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800
 80090cc:	40001800 	.word	0x40001800
 80090d0:	40001c00 	.word	0x40001c00
 80090d4:	40002000 	.word	0x40002000

080090d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009114:	b084      	sub	sp, #16
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	f107 001c 	add.w	r0, r7, #28
 8009122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800912a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800912c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800912e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009132:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009136:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800913a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800913e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	4b07      	ldr	r3, [pc, #28]	; (8009168 <SDMMC_Init+0x54>)
 800914c:	4013      	ands	r3, r2
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	431a      	orrs	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	b004      	add	sp, #16
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	ffff8100 	.word	0xffff8100

0800916c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2203      	movs	r2, #3
 80091b4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80091b6:	2002      	movs	r0, #2
 80091b8:	f7fa fb4a 	bl	8003850 <HAL_Delay>
  
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0303 	and.w	r3, r3, #3
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
	...

080091e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009202:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009208:	431a      	orrs	r2, r3
                       Command->CPSM);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800920e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	4313      	orrs	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	4b06      	ldr	r3, [pc, #24]	; (8009234 <SDMMC_SendCommand+0x50>)
 800921c:	4013      	ands	r3, r2
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	fffff000 	.word	0xfffff000

08009238 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	b2db      	uxtb	r3, r3
}
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3314      	adds	r3, #20
 8009260:	461a      	mov	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	4413      	add	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
}  
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800929e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80092a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80092aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	431a      	orrs	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0

}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80092de:	2310      	movs	r3, #16
 80092e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092e2:	2340      	movs	r3, #64	; 0x40
 80092e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092f0:	f107 0308 	add.w	r3, r7, #8
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff ff74 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80092fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009300:	2110      	movs	r1, #16
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa42 	bl	800978c <SDMMC_GetCmdResp1>
 8009308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800930a:	69fb      	ldr	r3, [r7, #28]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3720      	adds	r7, #32
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009322:	2311      	movs	r3, #17
 8009324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009326:	2340      	movs	r3, #64	; 0x40
 8009328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800932a:	2300      	movs	r3, #0
 800932c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800932e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009334:	f107 0308 	add.w	r3, r7, #8
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff ff52 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009340:	f241 3288 	movw	r2, #5000	; 0x1388
 8009344:	2111      	movs	r1, #17
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa20 	bl	800978c <SDMMC_GetCmdResp1>
 800934c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800934e:	69fb      	ldr	r3, [r7, #28]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3720      	adds	r7, #32
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009366:	2312      	movs	r3, #18
 8009368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009378:	f107 0308 	add.w	r3, r7, #8
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff ff30 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009384:	f241 3288 	movw	r2, #5000	; 0x1388
 8009388:	2112      	movs	r1, #18
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f9fe 	bl	800978c <SDMMC_GetCmdResp1>
 8009390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009392:	69fb      	ldr	r3, [r7, #28]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3720      	adds	r7, #32
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80093aa:	2318      	movs	r3, #24
 80093ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093ae:	2340      	movs	r3, #64	; 0x40
 80093b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093bc:	f107 0308 	add.w	r3, r7, #8
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff ff0e 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80093c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093cc:	2118      	movs	r1, #24
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f9dc 	bl	800978c <SDMMC_GetCmdResp1>
 80093d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093d6:	69fb      	ldr	r3, [r7, #28]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3720      	adds	r7, #32
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80093ee:	2319      	movs	r3, #25
 80093f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093f2:	2340      	movs	r3, #64	; 0x40
 80093f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093f6:	2300      	movs	r3, #0
 80093f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009400:	f107 0308 	add.w	r3, r7, #8
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff feec 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800940c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009410:	2119      	movs	r1, #25
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f9ba 	bl	800978c <SDMMC_GetCmdResp1>
 8009418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800941a:	69fb      	ldr	r3, [r7, #28]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3720      	adds	r7, #32
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800942c:	2300      	movs	r3, #0
 800942e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009430:	230c      	movs	r3, #12
 8009432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009434:	2340      	movs	r3, #64	; 0x40
 8009436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800943c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009440:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009442:	f107 0308 	add.w	r3, r7, #8
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff fecb 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800944e:	4a05      	ldr	r2, [pc, #20]	; (8009464 <SDMMC_CmdStopTransfer+0x40>)
 8009450:	210c      	movs	r1, #12
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f99a 	bl	800978c <SDMMC_GetCmdResp1>
 8009458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800945a:	69fb      	ldr	r3, [r7, #28]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3720      	adds	r7, #32
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	05f5e100 	.word	0x05f5e100

08009468 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08a      	sub	sp, #40	; 0x28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009478:	2307      	movs	r3, #7
 800947a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800947c:	2340      	movs	r3, #64	; 0x40
 800947e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009480:	2300      	movs	r3, #0
 8009482:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009488:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800948a:	f107 0310 	add.w	r3, r7, #16
 800948e:	4619      	mov	r1, r3
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fea7 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009496:	f241 3288 	movw	r2, #5000	; 0x1388
 800949a:	2107      	movs	r1, #7
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f975 	bl	800978c <SDMMC_GetCmdResp1>
 80094a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3728      	adds	r7, #40	; 0x28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b088      	sub	sp, #32
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094cc:	f107 0308 	add.w	r3, r7, #8
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fe86 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f92f 	bl	800973c <SDMMC_GetCmdError>
 80094de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094e0:	69fb      	ldr	r3, [r7, #28]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3720      	adds	r7, #32
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b088      	sub	sp, #32
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80094f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80094f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80094f8:	2308      	movs	r3, #8
 80094fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009508:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800950a:	f107 0308 	add.w	r3, r7, #8
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7ff fe67 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fb18 	bl	8009b4c <SDMMC_GetCmdResp7>
 800951c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800951e:	69fb      	ldr	r3, [r7, #28]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3720      	adds	r7, #32
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009536:	2337      	movs	r3, #55	; 0x37
 8009538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800953a:	2340      	movs	r3, #64	; 0x40
 800953c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009548:	f107 0308 	add.w	r3, r7, #8
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fe48 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009554:	f241 3288 	movw	r2, #5000	; 0x1388
 8009558:	2137      	movs	r1, #55	; 0x37
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f916 	bl	800978c <SDMMC_GetCmdResp1>
 8009560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009562:	69fb      	ldr	r3, [r7, #28]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3720      	adds	r7, #32
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <SDMMC_CmdAppOperCommand+0x44>)
 800957a:	4313      	orrs	r3, r2
 800957c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800957e:	2329      	movs	r3, #41	; 0x29
 8009580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009582:	2340      	movs	r3, #64	; 0x40
 8009584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009586:	2300      	movs	r3, #0
 8009588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800958a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800958e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009590:	f107 0308 	add.w	r3, r7, #8
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff fe24 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fa27 	bl	80099f0 <SDMMC_GetCmdResp3>
 80095a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095a4:	69fb      	ldr	r3, [r7, #28]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	80100000 	.word	0x80100000

080095b4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80095c2:	2306      	movs	r3, #6
 80095c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095c6:	2340      	movs	r3, #64	; 0x40
 80095c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095ca:	2300      	movs	r3, #0
 80095cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095d4:	f107 0308 	add.w	r3, r7, #8
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fe02 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80095e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e4:	2106      	movs	r1, #6
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f8d0 	bl	800978c <SDMMC_GetCmdResp1>
 80095ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ee:	69fb      	ldr	r3, [r7, #28]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009604:	2333      	movs	r3, #51	; 0x33
 8009606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009608:	2340      	movs	r3, #64	; 0x40
 800960a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800960c:	2300      	movs	r3, #0
 800960e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009616:	f107 0308 	add.w	r3, r7, #8
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff fde1 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009622:	f241 3288 	movw	r2, #5000	; 0x1388
 8009626:	2133      	movs	r1, #51	; 0x33
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f8af 	bl	800978c <SDMMC_GetCmdResp1>
 800962e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009630:	69fb      	ldr	r3, [r7, #28]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b088      	sub	sp, #32
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009646:	2302      	movs	r3, #2
 8009648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800964a:	23c0      	movs	r3, #192	; 0xc0
 800964c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009656:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009658:	f107 0308 	add.w	r3, r7, #8
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff fdc0 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f97d 	bl	8009964 <SDMMC_GetCmdResp2>
 800966a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800966c:	69fb      	ldr	r3, [r7, #28]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009684:	2309      	movs	r3, #9
 8009686:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009688:	23c0      	movs	r3, #192	; 0xc0
 800968a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800968c:	2300      	movs	r3, #0
 800968e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009694:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff fda1 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f95e 	bl	8009964 <SDMMC_GetCmdResp2>
 80096a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096aa:	69fb      	ldr	r3, [r7, #28]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3720      	adds	r7, #32
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80096c2:	2303      	movs	r3, #3
 80096c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096c6:	2340      	movs	r3, #64	; 0x40
 80096c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff fd82 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	2103      	movs	r1, #3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f9bd 	bl	8009a64 <SDMMC_GetCmdResp6>
 80096ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096ec:	69fb      	ldr	r3, [r7, #28]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3720      	adds	r7, #32
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b088      	sub	sp, #32
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009704:	230d      	movs	r3, #13
 8009706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009708:	2340      	movs	r3, #64	; 0x40
 800970a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009716:	f107 0308 	add.w	r3, r7, #8
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff fd61 	bl	80091e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009722:	f241 3288 	movw	r2, #5000	; 0x1388
 8009726:	210d      	movs	r1, #13
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f82f 	bl	800978c <SDMMC_GetCmdResp1>
 800972e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009730:	69fb      	ldr	r3, [r7, #28]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800973c:	b490      	push	{r4, r7}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009744:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <SDMMC_GetCmdError+0x48>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a0f      	ldr	r2, [pc, #60]	; (8009788 <SDMMC_GetCmdError+0x4c>)
 800974a:	fba2 2303 	umull	r2, r3, r2, r3
 800974e:	0a5b      	lsrs	r3, r3, #9
 8009750:	f241 3288 	movw	r2, #5000	; 0x1388
 8009754:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009758:	4623      	mov	r3, r4
 800975a:	1e5c      	subs	r4, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009764:	e009      	b.n	800977a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0f2      	beq.n	8009758 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	22c5      	movs	r2, #197	; 0xc5
 8009776:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bc90      	pop	{r4, r7}
 8009782:	4770      	bx	lr
 8009784:	20000000 	.word	0x20000000
 8009788:	10624dd3 	.word	0x10624dd3

0800978c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	460b      	mov	r3, r1
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800979a:	4b6f      	ldr	r3, [pc, #444]	; (8009958 <SDMMC_GetCmdResp1+0x1cc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a6f      	ldr	r2, [pc, #444]	; (800995c <SDMMC_GetCmdResp1+0x1d0>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	0a5b      	lsrs	r3, r3, #9
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80097ac:	4623      	mov	r3, r4
 80097ae:	1e5c      	subs	r4, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097b8:	e0c9      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0f0      	beq.n	80097ac <SDMMC_GetCmdResp1+0x20>
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1eb      	bne.n	80097ac <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d004      	beq.n	80097ea <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2204      	movs	r2, #4
 80097e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097e6:	2304      	movs	r3, #4
 80097e8:	e0b1      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e0a6      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	22c5      	movs	r2, #197	; 0xc5
 8009804:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff fd16 	bl	8009238 <SDMMC_GetCommandResponse>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	4293      	cmp	r3, r2
 8009814:	d001      	beq.n	800981a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009816:	2301      	movs	r3, #1
 8009818:	e099      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800981a:	2100      	movs	r1, #0
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff fd18 	bl	8009252 <SDMMC_GetResponse>
 8009822:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4b4e      	ldr	r3, [pc, #312]	; (8009960 <SDMMC_GetCmdResp1+0x1d4>)
 8009828:	4013      	ands	r3, r2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800982e:	2300      	movs	r3, #0
 8009830:	e08d      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	da02      	bge.n	800983e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800983c:	e087      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009848:	2340      	movs	r3, #64	; 0x40
 800984a:	e080      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009856:	2380      	movs	r3, #128	; 0x80
 8009858:	e079      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009868:	e071      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009878:	e069      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009888:	e061      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009898:	e059      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098a8:	e051      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098b8:	e049      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80098c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098c8:	e041      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80098d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098d8:	e039      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80098e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098e8:	e031      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80098f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80098f8:	e029      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009904:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009908:	e021      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009914:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009918:	e019      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009928:	e011      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009934:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009938:	e009      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f003 0308 	and.w	r3, r3, #8
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009944:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009948:	e001      	b.n	800994e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800994a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800994e:	4618      	mov	r0, r3
 8009950:	371c      	adds	r7, #28
 8009952:	46bd      	mov	sp, r7
 8009954:	bd90      	pop	{r4, r7, pc}
 8009956:	bf00      	nop
 8009958:	20000000 	.word	0x20000000
 800995c:	10624dd3 	.word	0x10624dd3
 8009960:	fdffe008 	.word	0xfdffe008

08009964 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009964:	b490      	push	{r4, r7}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800996c:	4b1e      	ldr	r3, [pc, #120]	; (80099e8 <SDMMC_GetCmdResp2+0x84>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a1e      	ldr	r2, [pc, #120]	; (80099ec <SDMMC_GetCmdResp2+0x88>)
 8009972:	fba2 2303 	umull	r2, r3, r2, r3
 8009976:	0a5b      	lsrs	r3, r3, #9
 8009978:	f241 3288 	movw	r2, #5000	; 0x1388
 800997c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009980:	4623      	mov	r3, r4
 8009982:	1e5c      	subs	r4, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800998c:	e026      	b.n	80099dc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009992:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0f0      	beq.n	8009980 <SDMMC_GetCmdResp2+0x1c>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1eb      	bne.n	8009980 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d004      	beq.n	80099be <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2204      	movs	r2, #4
 80099b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099ba:	2304      	movs	r3, #4
 80099bc:	e00e      	b.n	80099dc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d004      	beq.n	80099d4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e003      	b.n	80099dc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	22c5      	movs	r2, #197	; 0xc5
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc90      	pop	{r4, r7}
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	20000000 	.word	0x20000000
 80099ec:	10624dd3 	.word	0x10624dd3

080099f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80099f0:	b490      	push	{r4, r7}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099f8:	4b18      	ldr	r3, [pc, #96]	; (8009a5c <SDMMC_GetCmdResp3+0x6c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a18      	ldr	r2, [pc, #96]	; (8009a60 <SDMMC_GetCmdResp3+0x70>)
 80099fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009a02:	0a5b      	lsrs	r3, r3, #9
 8009a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	1e5c      	subs	r4, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a18:	e01b      	b.n	8009a52 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0f0      	beq.n	8009a0c <SDMMC_GetCmdResp3+0x1c>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1eb      	bne.n	8009a0c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a38:	f003 0304 	and.w	r3, r3, #4
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d004      	beq.n	8009a4a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2204      	movs	r2, #4
 8009a44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a46:	2304      	movs	r3, #4
 8009a48:	e003      	b.n	8009a52 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	22c5      	movs	r2, #197	; 0xc5
 8009a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc90      	pop	{r4, r7}
 8009a5a:	4770      	bx	lr
 8009a5c:	20000000 	.word	0x20000000
 8009a60:	10624dd3 	.word	0x10624dd3

08009a64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009a64:	b590      	push	{r4, r7, lr}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a72:	4b34      	ldr	r3, [pc, #208]	; (8009b44 <SDMMC_GetCmdResp6+0xe0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a34      	ldr	r2, [pc, #208]	; (8009b48 <SDMMC_GetCmdResp6+0xe4>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	0a5b      	lsrs	r3, r3, #9
 8009a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a82:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a86:	4623      	mov	r3, r4
 8009a88:	1e5c      	subs	r4, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d102      	bne.n	8009a94 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a92:	e052      	b.n	8009b3a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a98:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0f0      	beq.n	8009a86 <SDMMC_GetCmdResp6+0x22>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1eb      	bne.n	8009a86 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab2:	f003 0304 	and.w	r3, r3, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d004      	beq.n	8009ac4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2204      	movs	r2, #4
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	e03a      	b.n	8009b3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d004      	beq.n	8009ada <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e02f      	b.n	8009b3a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff fbac 	bl	8009238 <SDMMC_GetCommandResponse>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d001      	beq.n	8009aee <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e025      	b.n	8009b3a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	22c5      	movs	r2, #197	; 0xc5
 8009af2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009af4:	2100      	movs	r1, #0
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7ff fbab 	bl	8009252 <SDMMC_GetResponse>
 8009afc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d106      	bne.n	8009b16 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	0c1b      	lsrs	r3, r3, #16
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009b12:	2300      	movs	r3, #0
 8009b14:	e011      	b.n	8009b3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b24:	e009      	b.n	8009b3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b34:	e001      	b.n	8009b3a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd90      	pop	{r4, r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000000 	.word	0x20000000
 8009b48:	10624dd3 	.word	0x10624dd3

08009b4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009b4c:	b490      	push	{r4, r7}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b54:	4b21      	ldr	r3, [pc, #132]	; (8009bdc <SDMMC_GetCmdResp7+0x90>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a21      	ldr	r2, [pc, #132]	; (8009be0 <SDMMC_GetCmdResp7+0x94>)
 8009b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5e:	0a5b      	lsrs	r3, r3, #9
 8009b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b68:	4623      	mov	r3, r4
 8009b6a:	1e5c      	subs	r4, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b74:	e02c      	b.n	8009bd0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f0      	beq.n	8009b68 <SDMMC_GetCmdResp7+0x1c>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1eb      	bne.n	8009b68 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2204      	movs	r2, #4
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ba2:	2304      	movs	r3, #4
 8009ba4:	e014      	b.n	8009bd0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d004      	beq.n	8009bbc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e009      	b.n	8009bd0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2240      	movs	r2, #64	; 0x40
 8009bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009bce:	2300      	movs	r3, #0
  
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc90      	pop	{r4, r7}
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20000000 	.word	0x20000000
 8009be0:	10624dd3 	.word	0x10624dd3

08009be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009be4:	b084      	sub	sp, #16
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	f107 001c 	add.w	r0, r7, #28
 8009bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d120      	bne.n	8009c3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68da      	ldr	r2, [r3, #12]
 8009c0c:	4b20      	ldr	r3, [pc, #128]	; (8009c90 <USB_CoreInit+0xac>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d105      	bne.n	8009c32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 fac4 	bl	800b1c0 <USB_CoreReset>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]
 8009c3c:	e010      	b.n	8009c60 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 fab8 	bl	800b1c0 <USB_CoreReset>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d10b      	bne.n	8009c7e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f043 0206 	orr.w	r2, r3, #6
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f043 0220 	orr.w	r2, r3, #32
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c8a:	b004      	add	sp, #16
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	ffbdffbf 	.word	0xffbdffbf

08009c94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d165      	bne.n	8009d74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4a41      	ldr	r2, [pc, #260]	; (8009db0 <USB_SetTurnaroundTime+0x11c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d906      	bls.n	8009cbe <USB_SetTurnaroundTime+0x2a>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4a40      	ldr	r2, [pc, #256]	; (8009db4 <USB_SetTurnaroundTime+0x120>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d802      	bhi.n	8009cbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009cb8:	230f      	movs	r3, #15
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e062      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4a3c      	ldr	r2, [pc, #240]	; (8009db4 <USB_SetTurnaroundTime+0x120>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d906      	bls.n	8009cd4 <USB_SetTurnaroundTime+0x40>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4a3b      	ldr	r2, [pc, #236]	; (8009db8 <USB_SetTurnaroundTime+0x124>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d802      	bhi.n	8009cd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009cce:	230e      	movs	r3, #14
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e057      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4a38      	ldr	r2, [pc, #224]	; (8009db8 <USB_SetTurnaroundTime+0x124>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d906      	bls.n	8009cea <USB_SetTurnaroundTime+0x56>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	4a37      	ldr	r2, [pc, #220]	; (8009dbc <USB_SetTurnaroundTime+0x128>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d802      	bhi.n	8009cea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ce4:	230d      	movs	r3, #13
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	e04c      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4a33      	ldr	r2, [pc, #204]	; (8009dbc <USB_SetTurnaroundTime+0x128>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d906      	bls.n	8009d00 <USB_SetTurnaroundTime+0x6c>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4a32      	ldr	r2, [pc, #200]	; (8009dc0 <USB_SetTurnaroundTime+0x12c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d802      	bhi.n	8009d00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e041      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4a2f      	ldr	r2, [pc, #188]	; (8009dc0 <USB_SetTurnaroundTime+0x12c>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d906      	bls.n	8009d16 <USB_SetTurnaroundTime+0x82>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	4a2e      	ldr	r2, [pc, #184]	; (8009dc4 <USB_SetTurnaroundTime+0x130>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d802      	bhi.n	8009d16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d10:	230b      	movs	r3, #11
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e036      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4a2a      	ldr	r2, [pc, #168]	; (8009dc4 <USB_SetTurnaroundTime+0x130>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d906      	bls.n	8009d2c <USB_SetTurnaroundTime+0x98>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4a29      	ldr	r2, [pc, #164]	; (8009dc8 <USB_SetTurnaroundTime+0x134>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d802      	bhi.n	8009d2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009d26:	230a      	movs	r3, #10
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e02b      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4a26      	ldr	r2, [pc, #152]	; (8009dc8 <USB_SetTurnaroundTime+0x134>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d906      	bls.n	8009d42 <USB_SetTurnaroundTime+0xae>
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4a25      	ldr	r2, [pc, #148]	; (8009dcc <USB_SetTurnaroundTime+0x138>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d802      	bhi.n	8009d42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009d3c:	2309      	movs	r3, #9
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e020      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	4a21      	ldr	r2, [pc, #132]	; (8009dcc <USB_SetTurnaroundTime+0x138>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d906      	bls.n	8009d58 <USB_SetTurnaroundTime+0xc4>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	4a20      	ldr	r2, [pc, #128]	; (8009dd0 <USB_SetTurnaroundTime+0x13c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d802      	bhi.n	8009d58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d52:	2308      	movs	r3, #8
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e015      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	4a1d      	ldr	r2, [pc, #116]	; (8009dd0 <USB_SetTurnaroundTime+0x13c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d906      	bls.n	8009d6e <USB_SetTurnaroundTime+0xda>
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4a1c      	ldr	r2, [pc, #112]	; (8009dd4 <USB_SetTurnaroundTime+0x140>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d802      	bhi.n	8009d6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d68:	2307      	movs	r3, #7
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e00a      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d6e:	2306      	movs	r3, #6
 8009d70:	617b      	str	r3, [r7, #20]
 8009d72:	e007      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009d74:	79fb      	ldrb	r3, [r7, #7]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d7a:	2309      	movs	r3, #9
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	e001      	b.n	8009d84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d80:	2309      	movs	r3, #9
 8009d82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	029b      	lsls	r3, r3, #10
 8009d98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	00d8acbf 	.word	0x00d8acbf
 8009db4:	00e4e1bf 	.word	0x00e4e1bf
 8009db8:	00f423ff 	.word	0x00f423ff
 8009dbc:	0106737f 	.word	0x0106737f
 8009dc0:	011a499f 	.word	0x011a499f
 8009dc4:	01312cff 	.word	0x01312cff
 8009dc8:	014ca43f 	.word	0x014ca43f
 8009dcc:	016e35ff 	.word	0x016e35ff
 8009dd0:	01a6ab1f 	.word	0x01a6ab1f
 8009dd4:	01e847ff 	.word	0x01e847ff

08009dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f043 0201 	orr.w	r2, r3, #1
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f023 0201 	bic.w	r2, r3, #1
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d106      	bne.n	8009e48 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60da      	str	r2, [r3, #12]
 8009e46:	e00b      	b.n	8009e60 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e48:	78fb      	ldrb	r3, [r7, #3]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d106      	bne.n	8009e5c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	e001      	b.n	8009e60 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e003      	b.n	8009e68 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009e60:	2032      	movs	r0, #50	; 0x32
 8009e62:	f7f9 fcf5 	bl	8003850 <HAL_Delay>

  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e70:	b084      	sub	sp, #16
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	613b      	str	r3, [r7, #16]
 8009e8e:	e009      	b.n	8009ea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	3340      	adds	r3, #64	; 0x40
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	613b      	str	r3, [r7, #16]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b0e      	cmp	r3, #14
 8009ea8:	d9f2      	bls.n	8009e90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11c      	bne.n	8009eea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ebe:	f043 0302 	orr.w	r3, r3, #2
 8009ec2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	e005      	b.n	8009ef6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009efc:	461a      	mov	r2, r3
 8009efe:	2300      	movs	r3, #0
 8009f00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f10:	461a      	mov	r2, r3
 8009f12:	680b      	ldr	r3, [r1, #0]
 8009f14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d10c      	bne.n	8009f36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d104      	bne.n	8009f2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f22:	2100      	movs	r1, #0
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f959 	bl	800a1dc <USB_SetDevSpeed>
 8009f2a:	e018      	b.n	8009f5e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f954 	bl	800a1dc <USB_SetDevSpeed>
 8009f34:	e013      	b.n	8009f5e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d10c      	bne.n	8009f56 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d104      	bne.n	8009f4c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f42:	2100      	movs	r1, #0
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f949 	bl	800a1dc <USB_SetDevSpeed>
 8009f4a:	e008      	b.n	8009f5e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f944 	bl	800a1dc <USB_SetDevSpeed>
 8009f54:	e003      	b.n	8009f5e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f56:	2103      	movs	r1, #3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f93f 	bl	800a1dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f5e:	2110      	movs	r1, #16
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f8f3 	bl	800a14c <USB_FlushTxFifo>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f911 	bl	800a198 <USB_FlushRxFifo>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f86:	461a      	mov	r2, r3
 8009f88:	2300      	movs	r3, #0
 8009f8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f92:	461a      	mov	r2, r3
 8009f94:	2300      	movs	r3, #0
 8009f96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	613b      	str	r3, [r7, #16]
 8009fa8:	e043      	b.n	800a032 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fc0:	d118      	bne.n	8009ff4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	e013      	b.n	800a006 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fea:	461a      	mov	r2, r3
 8009fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	e008      	b.n	800a006 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a000:	461a      	mov	r2, r3
 800a002:	2300      	movs	r3, #0
 800a004:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a012:	461a      	mov	r2, r3
 800a014:	2300      	movs	r3, #0
 800a016:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	461a      	mov	r2, r3
 800a026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a02a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	3301      	adds	r3, #1
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	429a      	cmp	r2, r3
 800a038:	d3b7      	bcc.n	8009faa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a03a:	2300      	movs	r3, #0
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	e043      	b.n	800a0c8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a056:	d118      	bne.n	800a08a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06a:	461a      	mov	r2, r3
 800a06c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e013      	b.n	800a09c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a080:	461a      	mov	r2, r3
 800a082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	e008      	b.n	800a09c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a096:	461a      	mov	r2, r3
 800a098:	2300      	movs	r3, #0
 800a09a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	613b      	str	r3, [r7, #16]
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d3b7      	bcc.n	800a040 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a0f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d105      	bne.n	800a104 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	f043 0210 	orr.w	r2, r3, #16
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	699a      	ldr	r2, [r3, #24]
 800a108:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <USB_DevInit+0x2d4>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	f043 0208 	orr.w	r2, r3, #8
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a124:	2b01      	cmp	r3, #1
 800a126:	d105      	bne.n	800a134 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699a      	ldr	r2, [r3, #24]
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <USB_DevInit+0x2d8>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a140:	b004      	add	sp, #16
 800a142:	4770      	bx	lr
 800a144:	803c3800 	.word	0x803c3800
 800a148:	40000004 	.word	0x40000004

0800a14c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	019b      	lsls	r3, r3, #6
 800a15e:	f043 0220 	orr.w	r2, r3, #32
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3301      	adds	r3, #1
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4a09      	ldr	r2, [pc, #36]	; (800a194 <USB_FlushTxFifo+0x48>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d901      	bls.n	800a178 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e006      	b.n	800a186 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	f003 0320 	and.w	r3, r3, #32
 800a180:	2b20      	cmp	r3, #32
 800a182:	d0f0      	beq.n	800a166 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	00030d40 	.word	0x00030d40

0800a198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2210      	movs	r2, #16
 800a1a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4a09      	ldr	r2, [pc, #36]	; (800a1d8 <USB_FlushRxFifo+0x40>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d901      	bls.n	800a1bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e006      	b.n	800a1ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b10      	cmp	r3, #16
 800a1c6:	d0f0      	beq.n	800a1aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	00030d40 	.word	0x00030d40

0800a1dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a20e:	b480      	push	{r7}
 800a210:	b087      	sub	sp, #28
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 0306 	and.w	r3, r3, #6
 800a226:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d102      	bne.n	800a234 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a22e:	2300      	movs	r3, #0
 800a230:	75fb      	strb	r3, [r7, #23]
 800a232:	e00a      	b.n	800a24a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d002      	beq.n	800a240 <USB_GetDevSpeed+0x32>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b06      	cmp	r3, #6
 800a23e:	d102      	bne.n	800a246 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a240:	2302      	movs	r3, #2
 800a242:	75fb      	strb	r3, [r7, #23]
 800a244:	e001      	b.n	800a24a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a246:	230f      	movs	r3, #15
 800a248:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d139      	bne.n	800a2e8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a27a:	69da      	ldr	r2, [r3, #28]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	f003 030f 	and.w	r3, r3, #15
 800a284:	2101      	movs	r1, #1
 800a286:	fa01 f303 	lsl.w	r3, r1, r3
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	68f9      	ldr	r1, [r7, #12]
 800a28e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a292:	4313      	orrs	r3, r2
 800a294:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d153      	bne.n	800a354 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	78db      	ldrb	r3, [r3, #3]
 800a2c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	059b      	lsls	r3, r3, #22
 800a2ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	0159      	lsls	r1, r3, #5
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	440b      	add	r3, r1
 800a2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4b20      	ldr	r3, [pc, #128]	; (800a364 <USB_ActivateEndpoint+0x10c>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	600b      	str	r3, [r1, #0]
 800a2e6:	e035      	b.n	800a354 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ee:	69da      	ldr	r2, [r3, #28]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	f003 030f 	and.w	r3, r3, #15
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a2fe:	041b      	lsls	r3, r3, #16
 800a300:	68f9      	ldr	r1, [r7, #12]
 800a302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a306:	4313      	orrs	r3, r2
 800a308:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d119      	bne.n	800a354 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	4413      	add	r3, r2
 800a328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	78db      	ldrb	r3, [r3, #3]
 800a33a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a33c:	430b      	orrs	r3, r1
 800a33e:	431a      	orrs	r2, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	0159      	lsls	r1, r3, #5
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	440b      	add	r3, r1
 800a348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34c:	4619      	mov	r1, r3
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <USB_ActivateEndpoint+0x10c>)
 800a350:	4313      	orrs	r3, r2
 800a352:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	10008000 	.word	0x10008000

0800a368 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	785b      	ldrb	r3, [r3, #1]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d161      	bne.n	800a448 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a39a:	d11f      	bne.n	800a3dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	0151      	lsls	r1, r2, #5
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	440a      	add	r2, r1
 800a3b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	43db      	mvns	r3, r3
 800a3f6:	68f9      	ldr	r1, [r7, #12]
 800a3f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a406:	69da      	ldr	r2, [r3, #28]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	f003 030f 	and.w	r3, r3, #15
 800a410:	2101      	movs	r1, #1
 800a412:	fa01 f303 	lsl.w	r3, r1, r3
 800a416:	b29b      	uxth	r3, r3
 800a418:	43db      	mvns	r3, r3
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a420:	4013      	ands	r3, r2
 800a422:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	0159      	lsls	r1, r3, #5
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	440b      	add	r3, r1
 800a43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43e:	4619      	mov	r1, r3
 800a440:	4b35      	ldr	r3, [pc, #212]	; (800a518 <USB_DeactivateEndpoint+0x1b0>)
 800a442:	4013      	ands	r3, r2
 800a444:	600b      	str	r3, [r1, #0]
 800a446:	e060      	b.n	800a50a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a45a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a45e:	d11f      	bne.n	800a4a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	0151      	lsls	r1, r2, #5
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	440a      	add	r2, r1
 800a476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a47a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a47e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4413      	add	r3, r2
 800a488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	0151      	lsls	r1, r2, #5
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	440a      	add	r2, r1
 800a496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a49a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a49e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	f003 030f 	and.w	r3, r3, #15
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b6:	041b      	lsls	r3, r3, #16
 800a4b8:	43db      	mvns	r3, r3
 800a4ba:	68f9      	ldr	r1, [r7, #12]
 800a4bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ca:	69da      	ldr	r2, [r3, #28]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	43db      	mvns	r3, r3
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	0159      	lsls	r1, r3, #5
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	440b      	add	r3, r1
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a502:	4619      	mov	r1, r3
 800a504:	4b05      	ldr	r3, [pc, #20]	; (800a51c <USB_DeactivateEndpoint+0x1b4>)
 800a506:	4013      	ands	r3, r2
 800a508:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	ec337800 	.word	0xec337800
 800a51c:	eff37800 	.word	0xeff37800

0800a520 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08a      	sub	sp, #40	; 0x28
 800a524:	af02      	add	r7, sp, #8
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	f040 8163 	bne.w	800a808 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d132      	bne.n	800a5b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	4413      	add	r3, r2
 800a552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	0159      	lsls	r1, r3, #5
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	440b      	add	r3, r1
 800a560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a564:	4619      	mov	r1, r3
 800a566:	4ba5      	ldr	r3, [pc, #660]	; (800a7fc <USB_EPStartXfer+0x2dc>)
 800a568:	4013      	ands	r3, r2
 800a56a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	0151      	lsls	r1, r2, #5
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	440a      	add	r2, r1
 800a582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a58a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a598:	691a      	ldr	r2, [r3, #16]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	0159      	lsls	r1, r3, #5
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	440b      	add	r3, r1
 800a5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4b95      	ldr	r3, [pc, #596]	; (800a800 <USB_EPStartXfer+0x2e0>)
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	610b      	str	r3, [r1, #16]
 800a5ae:	e074      	b.n	800a69a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5bc:	691a      	ldr	r2, [r3, #16]
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	0159      	lsls	r1, r3, #5
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	440b      	add	r3, r1
 800a5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4b8c      	ldr	r3, [pc, #560]	; (800a800 <USB_EPStartXfer+0x2e0>)
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5de:	691a      	ldr	r2, [r3, #16]
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	0159      	lsls	r1, r3, #5
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	440b      	add	r3, r1
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4b83      	ldr	r3, [pc, #524]	; (800a7fc <USB_EPStartXfer+0x2dc>)
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a600:	691a      	ldr	r2, [r3, #16]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	6959      	ldr	r1, [r3, #20]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	440b      	add	r3, r1
 800a60c:	1e59      	subs	r1, r3, #1
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	fbb1 f3f3 	udiv	r3, r1, r3
 800a616:	04d9      	lsls	r1, r3, #19
 800a618:	4b7a      	ldr	r3, [pc, #488]	; (800a804 <USB_EPStartXfer+0x2e4>)
 800a61a:	400b      	ands	r3, r1
 800a61c:	69b9      	ldr	r1, [r7, #24]
 800a61e:	0148      	lsls	r0, r1, #5
 800a620:	69f9      	ldr	r1, [r7, #28]
 800a622:	4401      	add	r1, r0
 800a624:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a628:	4313      	orrs	r3, r2
 800a62a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a638:	691a      	ldr	r2, [r3, #16]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a642:	69b9      	ldr	r1, [r7, #24]
 800a644:	0148      	lsls	r0, r1, #5
 800a646:	69f9      	ldr	r1, [r7, #28]
 800a648:	4401      	add	r1, r0
 800a64a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a64e:	4313      	orrs	r3, r2
 800a650:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	78db      	ldrb	r3, [r3, #3]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d11f      	bne.n	800a69a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	0151      	lsls	r1, r2, #5
 800a66c:	69fa      	ldr	r2, [r7, #28]
 800a66e:	440a      	add	r2, r1
 800a670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a674:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a678:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	0151      	lsls	r1, r2, #5
 800a68c:	69fa      	ldr	r2, [r7, #28]
 800a68e:	440a      	add	r2, r1
 800a690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a698:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d14b      	bne.n	800a738 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d009      	beq.n	800a6bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	78db      	ldrb	r3, [r3, #3]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d128      	bne.n	800a716 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d110      	bne.n	800a6f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	0151      	lsls	r1, r2, #5
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	440a      	add	r2, r1
 800a6ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	e00f      	b.n	800a716 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69ba      	ldr	r2, [r7, #24]
 800a706:	0151      	lsls	r1, r2, #5
 800a708:	69fa      	ldr	r2, [r7, #28]
 800a70a:	440a      	add	r2, r1
 800a70c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a714:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	e133      	b.n	800a9a0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	0151      	lsls	r1, r2, #5
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	440a      	add	r2, r1
 800a74e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a756:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	78db      	ldrb	r3, [r3, #3]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d015      	beq.n	800a78c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 811b 	beq.w	800a9a0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	2101      	movs	r1, #1
 800a77c:	fa01 f303 	lsl.w	r3, r1, r3
 800a780:	69f9      	ldr	r1, [r7, #28]
 800a782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a786:	4313      	orrs	r3, r2
 800a788:	634b      	str	r3, [r1, #52]	; 0x34
 800a78a:	e109      	b.n	800a9a0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d110      	bne.n	800a7be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69ba      	ldr	r2, [r7, #24]
 800a7ac:	0151      	lsls	r1, r2, #5
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	440a      	add	r2, r1
 800a7b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	e00f      	b.n	800a7de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	69ba      	ldr	r2, [r7, #24]
 800a7ce:	0151      	lsls	r1, r2, #5
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	68d9      	ldr	r1, [r3, #12]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	781a      	ldrb	r2, [r3, #0]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	b298      	uxth	r0, r3
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 fa38 	bl	800ac68 <USB_WritePacket>
 800a7f8:	e0d2      	b.n	800a9a0 <USB_EPStartXfer+0x480>
 800a7fa:	bf00      	nop
 800a7fc:	e007ffff 	.word	0xe007ffff
 800a800:	fff80000 	.word	0xfff80000
 800a804:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a814:	691a      	ldr	r2, [r3, #16]
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	0159      	lsls	r1, r3, #5
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	440b      	add	r3, r1
 800a81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a822:	4619      	mov	r1, r3
 800a824:	4b61      	ldr	r3, [pc, #388]	; (800a9ac <USB_EPStartXfer+0x48c>)
 800a826:	4013      	ands	r3, r2
 800a828:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a836:	691a      	ldr	r2, [r3, #16]
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	0159      	lsls	r1, r3, #5
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	440b      	add	r3, r1
 800a840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a844:	4619      	mov	r1, r3
 800a846:	4b5a      	ldr	r3, [pc, #360]	; (800a9b0 <USB_EPStartXfer+0x490>)
 800a848:	4013      	ands	r3, r2
 800a84a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d123      	bne.n	800a89c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a860:	691a      	ldr	r2, [r3, #16]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a86a:	69b9      	ldr	r1, [r7, #24]
 800a86c:	0148      	lsls	r0, r1, #5
 800a86e:	69f9      	ldr	r1, [r7, #28]
 800a870:	4401      	add	r1, r0
 800a872:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a876:	4313      	orrs	r3, r2
 800a878:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a898:	6113      	str	r3, [r2, #16]
 800a89a:	e033      	b.n	800a904 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	695a      	ldr	r2, [r3, #20]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	1e5a      	subs	r2, r3, #1
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8be:	691a      	ldr	r2, [r3, #16]
 800a8c0:	8afb      	ldrh	r3, [r7, #22]
 800a8c2:	04d9      	lsls	r1, r3, #19
 800a8c4:	4b3b      	ldr	r3, [pc, #236]	; (800a9b4 <USB_EPStartXfer+0x494>)
 800a8c6:	400b      	ands	r3, r1
 800a8c8:	69b9      	ldr	r1, [r7, #24]
 800a8ca:	0148      	lsls	r0, r1, #5
 800a8cc:	69f9      	ldr	r1, [r7, #28]
 800a8ce:	4401      	add	r1, r0
 800a8d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e4:	691a      	ldr	r2, [r3, #16]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	8af9      	ldrh	r1, [r7, #22]
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8f4:	69b9      	ldr	r1, [r7, #24]
 800a8f6:	0148      	lsls	r0, r1, #5
 800a8f8:	69f9      	ldr	r1, [r7, #28]
 800a8fa:	4401      	add	r1, r0
 800a8fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a900:	4313      	orrs	r3, r2
 800a902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a904:	79fb      	ldrb	r3, [r7, #7]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d10d      	bne.n	800a926 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d009      	beq.n	800a926 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	68d9      	ldr	r1, [r3, #12]
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a922:	460a      	mov	r2, r1
 800a924:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	78db      	ldrb	r3, [r3, #3]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d128      	bne.n	800a980 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d110      	bne.n	800a960 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	0151      	lsls	r1, r2, #5
 800a950:	69fa      	ldr	r2, [r7, #28]
 800a952:	440a      	add	r2, r1
 800a954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	e00f      	b.n	800a980 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	015a      	lsls	r2, r3, #5
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	4413      	add	r3, r2
 800a968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	0151      	lsls	r1, r2, #5
 800a972:	69fa      	ldr	r2, [r7, #28]
 800a974:	440a      	add	r2, r1
 800a976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a97a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a97e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	015a      	lsls	r2, r3, #5
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	4413      	add	r3, r2
 800a988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	0151      	lsls	r1, r2, #5
 800a992:	69fa      	ldr	r2, [r7, #28]
 800a994:	440a      	add	r2, r1
 800a996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a99a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a99e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3720      	adds	r7, #32
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	fff80000 	.word	0xfff80000
 800a9b0:	e007ffff 	.word	0xe007ffff
 800a9b4:	1ff80000 	.word	0x1ff80000

0800a9b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	785b      	ldrb	r3, [r3, #1]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	f040 80cd 	bne.w	800ab74 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d132      	bne.n	800aa48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ee:	691a      	ldr	r2, [r3, #16]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	0159      	lsls	r1, r3, #5
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	440b      	add	r3, r1
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4b98      	ldr	r3, [pc, #608]	; (800ac60 <USB_EP0StartXfer+0x2a8>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa30:	691a      	ldr	r2, [r3, #16]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	0159      	lsls	r1, r3, #5
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	440b      	add	r3, r1
 800aa3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4b88      	ldr	r3, [pc, #544]	; (800ac64 <USB_EP0StartXfer+0x2ac>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	610b      	str	r3, [r1, #16]
 800aa46:	e04e      	b.n	800aae6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa54:	691a      	ldr	r2, [r3, #16]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	0159      	lsls	r1, r3, #5
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	440b      	add	r3, r1
 800aa5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa62:	4619      	mov	r1, r3
 800aa64:	4b7f      	ldr	r3, [pc, #508]	; (800ac64 <USB_EP0StartXfer+0x2ac>)
 800aa66:	4013      	ands	r3, r2
 800aa68:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa76:	691a      	ldr	r2, [r3, #16]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	0159      	lsls	r1, r3, #5
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	440b      	add	r3, r1
 800aa80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa84:	4619      	mov	r1, r3
 800aa86:	4b76      	ldr	r3, [pc, #472]	; (800ac60 <USB_EP0StartXfer+0x2a8>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	695a      	ldr	r2, [r3, #20]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d903      	bls.n	800aaa0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	689a      	ldr	r2, [r3, #8]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	0151      	lsls	r1, r2, #5
 800aab2:	697a      	ldr	r2, [r7, #20]
 800aab4:	440a      	add	r2, r1
 800aab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aabe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aacc:	691a      	ldr	r2, [r3, #16]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aad6:	6939      	ldr	r1, [r7, #16]
 800aad8:	0148      	lsls	r0, r1, #5
 800aada:	6979      	ldr	r1, [r7, #20]
 800aadc:	4401      	add	r1, r0
 800aade:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aae2:	4313      	orrs	r3, r2
 800aae4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d11e      	bne.n	800ab2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d009      	beq.n	800ab08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab00:	461a      	mov	r2, r3
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	0151      	lsls	r1, r2, #5
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	440a      	add	r2, r1
 800ab1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	e092      	b.n	800ac50 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d07e      	beq.n	800ac50 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	f003 030f 	and.w	r3, r3, #15
 800ab62:	2101      	movs	r1, #1
 800ab64:	fa01 f303 	lsl.w	r3, r1, r3
 800ab68:	6979      	ldr	r1, [r7, #20]
 800ab6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	634b      	str	r3, [r1, #52]	; 0x34
 800ab72:	e06d      	b.n	800ac50 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	015a      	lsls	r2, r3, #5
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	0159      	lsls	r1, r3, #5
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	440b      	add	r3, r1
 800ab8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4b34      	ldr	r3, [pc, #208]	; (800ac64 <USB_EP0StartXfer+0x2ac>)
 800ab92:	4013      	ands	r3, r2
 800ab94:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba2:	691a      	ldr	r2, [r3, #16]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	0159      	lsls	r1, r3, #5
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	440b      	add	r3, r1
 800abac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb0:	4619      	mov	r1, r3
 800abb2:	4b2b      	ldr	r3, [pc, #172]	; (800ac60 <USB_EP0StartXfer+0x2a8>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	0151      	lsls	r1, r2, #5
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	440a      	add	r2, r1
 800abde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abe6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	691a      	ldr	r2, [r3, #16]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abfe:	6939      	ldr	r1, [r7, #16]
 800ac00:	0148      	lsls	r0, r1, #5
 800ac02:	6979      	ldr	r1, [r7, #20]
 800ac04:	4401      	add	r1, r0
 800ac06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d10d      	bne.n	800ac30 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d009      	beq.n	800ac30 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	68d9      	ldr	r1, [r3, #12]
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2c:	460a      	mov	r2, r1
 800ac2e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	015a      	lsls	r2, r3, #5
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	4413      	add	r3, r2
 800ac38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	0151      	lsls	r1, r2, #5
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	440a      	add	r2, r1
 800ac46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	371c      	adds	r7, #28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	e007ffff 	.word	0xe007ffff
 800ac64:	fff80000 	.word	0xfff80000

0800ac68 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b089      	sub	sp, #36	; 0x24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	4611      	mov	r1, r2
 800ac74:	461a      	mov	r2, r3
 800ac76:	460b      	mov	r3, r1
 800ac78:	71fb      	strb	r3, [r7, #7]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ac86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d11a      	bne.n	800acc4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac8e:	88bb      	ldrh	r3, [r7, #4]
 800ac90:	3303      	adds	r3, #3
 800ac92:	089b      	lsrs	r3, r3, #2
 800ac94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac96:	2300      	movs	r3, #0
 800ac98:	61bb      	str	r3, [r7, #24]
 800ac9a:	e00f      	b.n	800acbc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	031a      	lsls	r2, r3, #12
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca8:	461a      	mov	r2, r3
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	3304      	adds	r3, #4
 800acb4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	3301      	adds	r3, #1
 800acba:	61bb      	str	r3, [r7, #24]
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d3eb      	bcc.n	800ac9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3724      	adds	r7, #36	; 0x24
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b089      	sub	sp, #36	; 0x24
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	4613      	mov	r3, r2
 800acde:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ace8:	88fb      	ldrh	r3, [r7, #6]
 800acea:	3303      	adds	r3, #3
 800acec:	089b      	lsrs	r3, r3, #2
 800acee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800acf0:	2300      	movs	r3, #0
 800acf2:	61bb      	str	r3, [r7, #24]
 800acf4:	e00b      	b.n	800ad0e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	3304      	adds	r3, #4
 800ad06:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	61bb      	str	r3, [r7, #24]
 800ad0e:	69ba      	ldr	r2, [r7, #24]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d3ef      	bcc.n	800acf6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ad16:	69fb      	ldr	r3, [r7, #28]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3724      	adds	r7, #36	; 0x24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d12c      	bne.n	800ad9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	db12      	blt.n	800ad78 <USB_EPSetStall+0x54>
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00f      	beq.n	800ad78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	0151      	lsls	r1, r2, #5
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	440a      	add	r2, r1
 800ad8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad96:	6013      	str	r3, [r2, #0]
 800ad98:	e02b      	b.n	800adf2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	db12      	blt.n	800add2 <USB_EPSetStall+0xae>
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00f      	beq.n	800add2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	0151      	lsls	r1, r2, #5
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	440a      	add	r2, r1
 800adc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800add0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	0151      	lsls	r1, r2, #5
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	440a      	add	r2, r1
 800ade8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adf0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3714      	adds	r7, #20
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	785b      	ldrb	r3, [r3, #1]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d128      	bne.n	800ae6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	78db      	ldrb	r3, [r3, #3]
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d003      	beq.n	800ae4c <USB_EPClearStall+0x4c>
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	78db      	ldrb	r3, [r3, #3]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d138      	bne.n	800aebe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	0151      	lsls	r1, r2, #5
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	440a      	add	r2, r1
 800ae62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae6a:	6013      	str	r3, [r2, #0]
 800ae6c:	e027      	b.n	800aebe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	78db      	ldrb	r3, [r3, #3]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d003      	beq.n	800ae9e <USB_EPClearStall+0x9e>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	78db      	ldrb	r3, [r3, #3]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d10f      	bne.n	800aebe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aebc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aeee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800af00:	68f9      	ldr	r1, [r7, #12]
 800af02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af06:	4313      	orrs	r3, r2
 800af08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af32:	f023 0302 	bic.w	r3, r3, #2
 800af36:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800af38:	2003      	movs	r0, #3
 800af3a:	f7f8 fc89 	bl	8003850 <HAL_Delay>

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af62:	f043 0302 	orr.w	r3, r3, #2
 800af66:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800af68:	2003      	movs	r0, #3
 800af6a:	f7f8 fc71 	bl	8003850 <HAL_Delay>

  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	4013      	ands	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800af90:	68fb      	ldr	r3, [r7, #12]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	4013      	ands	r3, r2
 800afc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	0c1b      	lsrs	r3, r3, #16
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800afd2:	b480      	push	{r7}
 800afd4:	b085      	sub	sp, #20
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	4013      	ands	r3, r2
 800aff4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	b29b      	uxth	r3, r3
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b006:	b480      	push	{r7}
 800b008:	b085      	sub	sp, #20
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	460b      	mov	r3, r1
 800b010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b016:	78fb      	ldrb	r3, [r7, #3]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	4013      	ands	r3, r2
 800b032:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b034:	68bb      	ldr	r3, [r7, #8]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b042:	b480      	push	{r7}
 800b044:	b087      	sub	sp, #28
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	460b      	mov	r3, r1
 800b04c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b064:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b066:	78fb      	ldrb	r3, [r7, #3]
 800b068:	f003 030f 	and.w	r3, r3, #15
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	fa22 f303 	lsr.w	r3, r2, r3
 800b072:	01db      	lsls	r3, r3, #7
 800b074:	b2db      	uxtb	r3, r3
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b07c:	78fb      	ldrb	r3, [r7, #3]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	4013      	ands	r3, r2
 800b08e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b090:	68bb      	ldr	r3, [r7, #8]
}
 800b092:	4618      	mov	r0, r3
 800b094:	371c      	adds	r7, #28
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b083      	sub	sp, #12
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	f003 0301 	and.w	r3, r3, #1
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
	...

0800b0bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4b09      	ldr	r3, [pc, #36]	; (800b100 <USB_ActivateSetup+0x44>)
 800b0da:	4013      	ands	r3, r2
 800b0dc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	fffff800 	.word	0xfffff800

0800b104 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	460b      	mov	r3, r1
 800b10e:	607a      	str	r2, [r7, #4]
 800b110:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	333c      	adds	r3, #60	; 0x3c
 800b11a:	3304      	adds	r3, #4
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	4a26      	ldr	r2, [pc, #152]	; (800b1bc <USB_EP0_OutStart+0xb8>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d90a      	bls.n	800b13e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b138:	d101      	bne.n	800b13e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	e037      	b.n	800b1ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b144:	461a      	mov	r2, r3
 800b146:	2300      	movs	r3, #0
 800b148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b15c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b16c:	f043 0318 	orr.w	r3, r3, #24
 800b170:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b180:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b184:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b186:	7afb      	ldrb	r3, [r7, #11]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d10f      	bne.n	800b1ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	697a      	ldr	r2, [r7, #20]
 800b1a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b1aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	371c      	adds	r7, #28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	4f54300a 	.word	0x4f54300a

0800b1c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	4a13      	ldr	r2, [pc, #76]	; (800b224 <USB_CoreReset+0x64>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d901      	bls.n	800b1de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	e01b      	b.n	800b216 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	daf2      	bge.n	800b1cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	f043 0201 	orr.w	r2, r3, #1
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4a09      	ldr	r2, [pc, #36]	; (800b224 <USB_CoreReset+0x64>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d901      	bls.n	800b208 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b204:	2303      	movs	r3, #3
 800b206:	e006      	b.n	800b216 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	2b01      	cmp	r3, #1
 800b212:	d0f0      	beq.n	800b1f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	00030d40 	.word	0x00030d40

0800b228 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b22c:	4904      	ldr	r1, [pc, #16]	; (800b240 <MX_FATFS_Init+0x18>)
 800b22e:	4805      	ldr	r0, [pc, #20]	; (800b244 <MX_FATFS_Init+0x1c>)
 800b230:	f004 fd8e 	bl	800fd50 <FATFS_LinkDriver>
 800b234:	4603      	mov	r3, r0
 800b236:	461a      	mov	r2, r3
 800b238:	4b03      	ldr	r3, [pc, #12]	; (800b248 <MX_FATFS_Init+0x20>)
 800b23a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b23c:	bf00      	nop
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	20011188 	.word	0x20011188
 800b244:	08016964 	.word	0x08016964
 800b248:	20011184 	.word	0x20011184

0800b24c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b250:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800b252:	4618      	mov	r0, r3
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b266:	f000 f896 	bl	800b396 <BSP_SD_IsDetected>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d001      	beq.n	800b274 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b270:	2302      	movs	r3, #2
 800b272:	e012      	b.n	800b29a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b274:	480b      	ldr	r0, [pc, #44]	; (800b2a4 <BSP_SD_Init+0x48>)
 800b276:	f7fb fb9f 	bl	80069b8 <HAL_SD_Init>
 800b27a:	4603      	mov	r3, r0
 800b27c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d109      	bne.n	800b298 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b288:	4806      	ldr	r0, [pc, #24]	; (800b2a4 <BSP_SD_Init+0x48>)
 800b28a:	f7fc f957 	bl	800753c <HAL_SD_ConfigWideBusOperation>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b298:	79fb      	ldrb	r3, [r7, #7]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20008874 	.word	0x20008874

0800b2a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	68f9      	ldr	r1, [r7, #12]
 800b2be:	4806      	ldr	r0, [pc, #24]	; (800b2d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b2c0:	f7fb fc12 	bl	8006ae8 <HAL_SD_ReadBlocks_DMA>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20008874 	.word	0x20008874

0800b2dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	4806      	ldr	r0, [pc, #24]	; (800b30c <BSP_SD_WriteBlocks_DMA+0x30>)
 800b2f4:	f7fb fce4 	bl	8006cc0 <HAL_SD_WriteBlocks_DMA>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b302:	7dfb      	ldrb	r3, [r7, #23]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	20008874 	.word	0x20008874

0800b310 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b314:	4805      	ldr	r0, [pc, #20]	; (800b32c <BSP_SD_GetCardState+0x1c>)
 800b316:	f7fc f98d 	bl	8007634 <HAL_SD_GetCardState>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	bf14      	ite	ne
 800b320:	2301      	movne	r3, #1
 800b322:	2300      	moveq	r3, #0
 800b324:	b2db      	uxtb	r3, r3
}
 800b326:	4618      	mov	r0, r3
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20008874 	.word	0x20008874

0800b330 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	4803      	ldr	r0, [pc, #12]	; (800b348 <BSP_SD_GetCardInfo+0x18>)
 800b33c:	f7fc f8d2 	bl	80074e4 <HAL_SD_GetCardInfo>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	20008874 	.word	0x20008874

0800b34c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b354:	f000 f818 	bl	800b388 <BSP_SD_AbortCallback>
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b368:	f000 f998 	bl	800b69c <BSP_SD_WriteCpltCallback>
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b37c:	f000 f9a0 	bl	800b6c0 <BSP_SD_ReadCpltCallback>
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0

}
 800b38c:	bf00      	nop
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b39c:	2301      	movs	r3, #1
 800b39e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	b2db      	uxtb	r3, r3
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800b3b8:	f004 fdb4 	bl	800ff24 <osKernelGetTickCount>
 800b3bc:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800b3be:	e006      	b.n	800b3ce <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b3c0:	f7ff ffa6 	bl	800b310 <BSP_SD_GetCardState>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e009      	b.n	800b3e2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800b3ce:	f004 fda9 	bl	800ff24 <osKernelGetTickCount>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d8f0      	bhi.n	800b3c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b3de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <SD_CheckStatus+0x38>)
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b3fc:	f7ff ff88 	bl	800b310 <BSP_SD_GetCardState>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d107      	bne.n	800b416 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b406:	4b07      	ldr	r3, [pc, #28]	; (800b424 <SD_CheckStatus+0x38>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	f023 0301 	bic.w	r3, r3, #1
 800b410:	b2da      	uxtb	r2, r3
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <SD_CheckStatus+0x38>)
 800b414:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b416:	4b03      	ldr	r3, [pc, #12]	; (800b424 <SD_CheckStatus+0x38>)
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	b2db      	uxtb	r3, r3
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	20000009 	.word	0x20000009

0800b428 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <SD_initialize+0x7c>)
 800b434:	2201      	movs	r2, #1
 800b436:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800b438:	f004 fd1c 	bl	800fe74 <osKernelGetState>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d129      	bne.n	800b496 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b442:	f7ff ff0b 	bl	800b25c <BSP_SD_Init>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d107      	bne.n	800b45c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff ffcc 	bl	800b3ec <SD_CheckStatus>
 800b454:	4603      	mov	r3, r0
 800b456:	461a      	mov	r2, r3
 800b458:	4b12      	ldr	r3, [pc, #72]	; (800b4a4 <SD_initialize+0x7c>)
 800b45a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b45c:	4b11      	ldr	r3, [pc, #68]	; (800b4a4 <SD_initialize+0x7c>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b01      	cmp	r3, #1
 800b464:	d017      	beq.n	800b496 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800b466:	4b10      	ldr	r3, [pc, #64]	; (800b4a8 <SD_initialize+0x80>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d107      	bne.n	800b47e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800b46e:	2200      	movs	r2, #0
 800b470:	2102      	movs	r1, #2
 800b472:	200a      	movs	r0, #10
 800b474:	f005 f976 	bl	8010764 <osMessageQueueNew>
 800b478:	4602      	mov	r2, r0
 800b47a:	4b0b      	ldr	r3, [pc, #44]	; (800b4a8 <SD_initialize+0x80>)
 800b47c:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800b47e:	4b0a      	ldr	r3, [pc, #40]	; (800b4a8 <SD_initialize+0x80>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800b486:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <SD_initialize+0x7c>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	f043 0301 	orr.w	r3, r3, #1
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <SD_initialize+0x7c>)
 800b494:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b496:	4b03      	ldr	r3, [pc, #12]	; (800b4a4 <SD_initialize+0x7c>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	b2db      	uxtb	r3, r3
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000009 	.word	0x20000009
 800b4a8:	200002bc 	.word	0x200002bc

0800b4ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff ff97 	bl	800b3ec <SD_CheckStatus>
 800b4be:	4603      	mov	r3, r0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	607a      	str	r2, [r7, #4]
 800b4d2:	603b      	str	r3, [r7, #0]
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b4dc:	f247 5030 	movw	r0, #30000	; 0x7530
 800b4e0:	f7ff ff66 	bl	800b3b0 <SD_CheckStatusWithTimeout>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	da01      	bge.n	800b4ee <SD_read+0x26>
  {
    return res;
 800b4ea:	7ffb      	ldrb	r3, [r7, #31]
 800b4ec:	e02f      	b.n	800b54e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	68b8      	ldr	r0, [r7, #8]
 800b4f4:	f7ff fed8 	bl	800b2a8 <BSP_SD_ReadBlocks_DMA>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800b4fc:	7fbb      	ldrb	r3, [r7, #30]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d124      	bne.n	800b54c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <SD_read+0x90>)
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	f107 0112 	add.w	r1, r7, #18
 800b50a:	f247 5330 	movw	r3, #30000	; 0x7530
 800b50e:	2200      	movs	r2, #0
 800b510:	f005 fa22 	bl	8010958 <osMessageQueueGet>
 800b514:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d117      	bne.n	800b54c <SD_read+0x84>
 800b51c:	8a7b      	ldrh	r3, [r7, #18]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d114      	bne.n	800b54c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800b522:	f004 fcff 	bl	800ff24 <osKernelGetTickCount>
 800b526:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b528:	e007      	b.n	800b53a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b52a:	f7ff fef1 	bl	800b310 <BSP_SD_GetCardState>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <SD_read+0x72>
              {
                res = RES_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b538:	e008      	b.n	800b54c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b53a:	f004 fcf3 	bl	800ff24 <osKernelGetTickCount>
 800b53e:	4602      	mov	r2, r0
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	f247 522f 	movw	r2, #29999	; 0x752f
 800b548:	4293      	cmp	r3, r2
 800b54a:	d9ee      	bls.n	800b52a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b54c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	200002bc 	.word	0x200002bc

0800b55c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af00      	add	r7, sp, #0
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b570:	f247 5030 	movw	r0, #30000	; 0x7530
 800b574:	f7ff ff1c 	bl	800b3b0 <SD_CheckStatusWithTimeout>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	da01      	bge.n	800b582 <SD_write+0x26>
  {
    return res;
 800b57e:	7ffb      	ldrb	r3, [r7, #31]
 800b580:	e02d      	b.n	800b5de <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	6879      	ldr	r1, [r7, #4]
 800b586:	68b8      	ldr	r0, [r7, #8]
 800b588:	f7ff fea8 	bl	800b2dc <BSP_SD_WriteBlocks_DMA>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d124      	bne.n	800b5dc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b592:	4b15      	ldr	r3, [pc, #84]	; (800b5e8 <SD_write+0x8c>)
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f107 0112 	add.w	r1, r7, #18
 800b59a:	f247 5330 	movw	r3, #30000	; 0x7530
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f005 f9da 	bl	8010958 <osMessageQueueGet>
 800b5a4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d117      	bne.n	800b5dc <SD_write+0x80>
 800b5ac:	8a7b      	ldrh	r3, [r7, #18]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d114      	bne.n	800b5dc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800b5b2:	f004 fcb7 	bl	800ff24 <osKernelGetTickCount>
 800b5b6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b5b8:	e007      	b.n	800b5ca <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b5ba:	f7ff fea9 	bl	800b310 <BSP_SD_GetCardState>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <SD_write+0x6e>
          {
            res = RES_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	77fb      	strb	r3, [r7, #31]
            break;
 800b5c8:	e008      	b.n	800b5dc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b5ca:	f004 fcab 	bl	800ff24 <osKernelGetTickCount>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d9ee      	bls.n	800b5ba <SD_write+0x5e>
    }

  }
#endif

  return res;
 800b5dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3720      	adds	r7, #32
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	200002bc 	.word	0x200002bc

0800b5ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08c      	sub	sp, #48	; 0x30
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	603a      	str	r2, [r7, #0]
 800b5f6:	71fb      	strb	r3, [r7, #7]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b602:	4b25      	ldr	r3, [pc, #148]	; (800b698 <SD_ioctl+0xac>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	b2db      	uxtb	r3, r3
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <SD_ioctl+0x28>
 800b610:	2303      	movs	r3, #3
 800b612:	e03c      	b.n	800b68e <SD_ioctl+0xa2>

  switch (cmd)
 800b614:	79bb      	ldrb	r3, [r7, #6]
 800b616:	2b03      	cmp	r3, #3
 800b618:	d834      	bhi.n	800b684 <SD_ioctl+0x98>
 800b61a:	a201      	add	r2, pc, #4	; (adr r2, 800b620 <SD_ioctl+0x34>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b631 	.word	0x0800b631
 800b624:	0800b639 	.word	0x0800b639
 800b628:	0800b651 	.word	0x0800b651
 800b62c:	0800b66b 	.word	0x0800b66b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b636:	e028      	b.n	800b68a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b638:	f107 030c 	add.w	r3, r7, #12
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fe77 	bl	800b330 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b64e:	e01c      	b.n	800b68a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b650:	f107 030c 	add.w	r3, r7, #12
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff fe6b 	bl	800b330 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b668:	e00f      	b.n	800b68a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b66a:	f107 030c 	add.w	r3, r7, #12
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff fe5e 	bl	800b330 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	0a5a      	lsrs	r2, r3, #9
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b682:	e002      	b.n	800b68a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b684:	2304      	movs	r3, #4
 800b686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3730      	adds	r7, #48	; 0x30
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20000009 	.word	0x20000009

0800b69c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800b6a6:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <BSP_SD_WriteCpltCallback+0x20>)
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	1db9      	adds	r1, r7, #6
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f005 f8de 	bl	8010870 <osMessageQueuePut>
#endif
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	200002bc 	.word	0x200002bc

0800b6c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <BSP_SD_ReadCpltCallback+0x20>)
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	1db9      	adds	r1, r7, #6
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f005 f8cc 	bl	8010870 <osMessageQueuePut>
#endif
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	200002bc 	.word	0x200002bc

0800b6e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b6f4:	f009 f914 	bl	8014920 <malloc>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d105      	bne.n	800b70e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b70a:	2302      	movs	r3, #2
 800b70c:	e066      	b.n	800b7dc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	7c1b      	ldrb	r3, [r3, #16]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d119      	bne.n	800b752 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b71e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b722:	2202      	movs	r2, #2
 800b724:	2181      	movs	r1, #129	; 0x81
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f008 ff2d 	bl	8014586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b732:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b736:	2202      	movs	r2, #2
 800b738:	2101      	movs	r1, #1
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f008 ff23 	bl	8014586 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2210      	movs	r2, #16
 800b74c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b750:	e016      	b.n	800b780 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b752:	2340      	movs	r3, #64	; 0x40
 800b754:	2202      	movs	r2, #2
 800b756:	2181      	movs	r1, #129	; 0x81
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f008 ff14 	bl	8014586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b764:	2340      	movs	r3, #64	; 0x40
 800b766:	2202      	movs	r2, #2
 800b768:	2101      	movs	r1, #1
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f008 ff0b 	bl	8014586 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2210      	movs	r2, #16
 800b77c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b780:	2308      	movs	r3, #8
 800b782:	2203      	movs	r2, #3
 800b784:	2182      	movs	r1, #130	; 0x82
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f008 fefd 	bl	8014586 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	7c1b      	ldrb	r3, [r3, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d109      	bne.n	800b7ca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f008 ffce 	bl	8014764 <USBD_LL_PrepareReceive>
 800b7c8:	e007      	b.n	800b7da <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7d0:	2340      	movs	r3, #64	; 0x40
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f008 ffc5 	bl	8014764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b7f4:	2181      	movs	r1, #129	; 0x81
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f008 feeb 	bl	80145d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b802:	2101      	movs	r1, #1
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f008 fee4 	bl	80145d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b812:	2182      	movs	r1, #130	; 0x82
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f008 fedc 	bl	80145d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00e      	beq.n	800b852 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b844:	4618      	mov	r0, r3
 800b846:	f009 f873 	bl	8014930 <free>
    pdev->pClassData = NULL;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b86c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b882:	2b00      	cmp	r3, #0
 800b884:	d03a      	beq.n	800b8fc <USBD_CDC_Setup+0xa0>
 800b886:	2b20      	cmp	r3, #32
 800b888:	f040 8097 	bne.w	800b9ba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	88db      	ldrh	r3, [r3, #6]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d029      	beq.n	800b8e8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	da11      	bge.n	800b8c2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b8aa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	88d2      	ldrh	r2, [r2, #6]
 800b8b0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b8b2:	6939      	ldr	r1, [r7, #16]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	88db      	ldrh	r3, [r3, #6]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 fac7 	bl	800ce4e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b8c0:	e082      	b.n	800b9c8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	785a      	ldrb	r2, [r3, #1]
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	88db      	ldrh	r3, [r3, #6]
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b8d8:	6939      	ldr	r1, [r7, #16]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	88db      	ldrh	r3, [r3, #6]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 fae0 	bl	800cea6 <USBD_CtlPrepareRx>
    break;
 800b8e6:	e06f      	b.n	800b9c8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	7850      	ldrb	r0, [r2, #1]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	4798      	blx	r3
    break;
 800b8fa:	e065      	b.n	800b9c8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	785b      	ldrb	r3, [r3, #1]
 800b900:	2b0b      	cmp	r3, #11
 800b902:	d84f      	bhi.n	800b9a4 <USBD_CDC_Setup+0x148>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <USBD_CDC_Setup+0xb0>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b93d 	.word	0x0800b93d
 800b910:	0800b9b3 	.word	0x0800b9b3
 800b914:	0800b9a5 	.word	0x0800b9a5
 800b918:	0800b9a5 	.word	0x0800b9a5
 800b91c:	0800b9a5 	.word	0x0800b9a5
 800b920:	0800b9a5 	.word	0x0800b9a5
 800b924:	0800b9a5 	.word	0x0800b9a5
 800b928:	0800b9a5 	.word	0x0800b9a5
 800b92c:	0800b9a5 	.word	0x0800b9a5
 800b930:	0800b9a5 	.word	0x0800b9a5
 800b934:	0800b965 	.word	0x0800b965
 800b938:	0800b98d 	.word	0x0800b98d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b942:	2b03      	cmp	r3, #3
 800b944:	d107      	bne.n	800b956 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b946:	f107 030c 	add.w	r3, r7, #12
 800b94a:	2202      	movs	r2, #2
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f001 fa7d 	bl	800ce4e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b954:	e030      	b.n	800b9b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b956:	6839      	ldr	r1, [r7, #0]
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f001 fa07 	bl	800cd6c <USBD_CtlError>
        ret = USBD_FAIL;
 800b95e:	2303      	movs	r3, #3
 800b960:	75fb      	strb	r3, [r7, #23]
      break;
 800b962:	e029      	b.n	800b9b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d107      	bne.n	800b97e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b96e:	f107 030f 	add.w	r3, r7, #15
 800b972:	2201      	movs	r2, #1
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f001 fa69 	bl	800ce4e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b97c:	e01c      	b.n	800b9b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f001 f9f3 	bl	800cd6c <USBD_CtlError>
        ret = USBD_FAIL;
 800b986:	2303      	movs	r3, #3
 800b988:	75fb      	strb	r3, [r7, #23]
      break;
 800b98a:	e015      	b.n	800b9b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b992:	2b03      	cmp	r3, #3
 800b994:	d00f      	beq.n	800b9b6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 f9e7 	bl	800cd6c <USBD_CtlError>
        ret = USBD_FAIL;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b9a2:	e008      	b.n	800b9b6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f001 f9e0 	bl	800cd6c <USBD_CtlError>
      ret = USBD_FAIL;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b0:	e002      	b.n	800b9b8 <USBD_CDC_Setup+0x15c>
      break;
 800b9b2:	bf00      	nop
 800b9b4:	e008      	b.n	800b9c8 <USBD_CDC_Setup+0x16c>
      break;
 800b9b6:	bf00      	nop
    }
    break;
 800b9b8:	e006      	b.n	800b9c8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 f9d5 	bl	800cd6c <USBD_CtlError>
    ret = USBD_FAIL;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	75fb      	strb	r3, [r7, #23]
    break;
 800b9c6:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop

0800b9d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e049      	b.n	800ba8a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b9fe:	78fa      	ldrb	r2, [r7, #3]
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	4613      	mov	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	440b      	add	r3, r1
 800ba0c:	3318      	adds	r3, #24
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d029      	beq.n	800ba68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba14:	78fa      	ldrb	r2, [r7, #3]
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	440b      	add	r3, r1
 800ba22:	3318      	adds	r3, #24
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	78f9      	ldrb	r1, [r7, #3]
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	00db      	lsls	r3, r3, #3
 800ba2e:	1a5b      	subs	r3, r3, r1
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4403      	add	r3, r0
 800ba34:	3344      	adds	r3, #68	; 0x44
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba3c:	fb03 f301 	mul.w	r3, r3, r1
 800ba40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d110      	bne.n	800ba68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ba46:	78fa      	ldrb	r2, [r7, #3]
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	440b      	add	r3, r1
 800ba54:	3318      	adds	r3, #24
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba5a:	78f9      	ldrb	r1, [r7, #3]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	2200      	movs	r2, #0
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f008 fe5e 	bl	8014722 <USBD_LL_Transmit>
 800ba66:	e00f      	b.n	800ba88 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bab0:	2303      	movs	r3, #3
 800bab2:	e015      	b.n	800bae0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f008 fe74 	bl	80147a6 <USBD_LL_GetRxDataSize>
 800babe:	4602      	mov	r2, r0
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bada:	4611      	mov	r1, r2
 800badc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baf6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d015      	beq.n	800bb2e <USBD_CDC_EP0_RxReady+0x46>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb08:	2bff      	cmp	r3, #255	; 0xff
 800bb0a:	d010      	beq.n	800bb2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bb1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb22:	b292      	uxth	r2, r2
 800bb24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	22ff      	movs	r2, #255	; 0xff
 800bb2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2243      	movs	r2, #67	; 0x43
 800bb44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bb46:	4b03      	ldr	r3, [pc, #12]	; (800bb54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr
 800bb54:	20000094 	.word	0x20000094

0800bb58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2243      	movs	r2, #67	; 0x43
 800bb64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bb66:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	20000050 	.word	0x20000050

0800bb78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2243      	movs	r2, #67	; 0x43
 800bb84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bb86:	4b03      	ldr	r3, [pc, #12]	; (800bb94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	200000d8 	.word	0x200000d8

0800bb98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	220a      	movs	r2, #10
 800bba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bba6:	4b03      	ldr	r3, [pc, #12]	; (800bbb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	2000000c 	.word	0x2000000c

0800bbb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e004      	b.n	800bbd6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b087      	sub	sp, #28
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbf4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	371c      	adds	r7, #28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc24:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d101      	bne.n	800bc5e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc5a:	2303      	movs	r3, #3
 800bc5c:	e01a      	b.n	800bc94 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d114      	bne.n	800bc92 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc86:	2181      	movs	r1, #129	; 0x81
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f008 fd4a 	bl	8014722 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e016      	b.n	800bce8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7c1b      	ldrb	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d109      	bne.n	800bcd6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bccc:	2101      	movs	r1, #1
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f008 fd48 	bl	8014764 <USBD_LL_PrepareReceive>
 800bcd4:	e007      	b.n	800bce6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcdc:	2340      	movs	r3, #64	; 0x40
 800bcde:	2101      	movs	r1, #1
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f008 fd3f 	bl	8014764 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e025      	b.n	800bd54 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d003      	beq.n	800bd1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	79fa      	ldrb	r2, [r7, #7]
 800bd46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f008 fbb5 	bl	80144b8 <USBD_LL_Init>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e010      	b.n	800bd96 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd84:	f107 020e 	add.w	r2, r7, #14
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f008 fbd2 	bl	8014550 <USBD_LL_Start>
 800bdac:	4603      	mov	r3, r0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b083      	sub	sp, #12
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d009      	beq.n	800bdfa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	78fa      	ldrb	r2, [r7, #3]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	4798      	blx	r3
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	78fa      	ldrb	r2, [r7, #3]
 800be24:	4611      	mov	r1, r2
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
  }

  return USBD_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 ff56 	bl	800ccf8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800be5a:	461a      	mov	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be68:	f003 031f 	and.w	r3, r3, #31
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d00e      	beq.n	800be8e <USBD_LL_SetupStage+0x5a>
 800be70:	2b01      	cmp	r3, #1
 800be72:	d302      	bcc.n	800be7a <USBD_LL_SetupStage+0x46>
 800be74:	2b02      	cmp	r3, #2
 800be76:	d014      	beq.n	800bea2 <USBD_LL_SetupStage+0x6e>
 800be78:	e01d      	b.n	800beb6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa18 	bl	800c2b8 <USBD_StdDevReq>
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
      break;
 800be8c:	e020      	b.n	800bed0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa7c 	bl	800c394 <USBD_StdItfReq>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bea0:	e016      	b.n	800bed0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fab8 	bl	800c420 <USBD_StdEPReq>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
      break;
 800beb4:	e00c      	b.n	800bed0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bebc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f008 fba3 	bl	8014610 <USBD_LL_StallEP>
 800beca:	4603      	mov	r3, r0
 800becc:	73fb      	strb	r3, [r7, #15]
      break;
 800bece:	bf00      	nop
  }

  return ret;
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b086      	sub	sp, #24
 800bede:	af00      	add	r7, sp, #0
 800bee0:	60f8      	str	r0, [r7, #12]
 800bee2:	460b      	mov	r3, r1
 800bee4:	607a      	str	r2, [r7, #4]
 800bee6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bee8:	7afb      	ldrb	r3, [r7, #11]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d137      	bne.n	800bf5e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bef4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800befc:	2b03      	cmp	r3, #3
 800befe:	d14a      	bne.n	800bf96 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	689a      	ldr	r2, [r3, #8]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d913      	bls.n	800bf34 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	1ad2      	subs	r2, r2, r3
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	68da      	ldr	r2, [r3, #12]
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	4293      	cmp	r3, r2
 800bf24:	bf28      	it	cs
 800bf26:	4613      	movcs	r3, r2
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f000 ffd7 	bl	800cee0 <USBD_CtlContinueRx>
 800bf32:	e030      	b.n	800bf96 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00a      	beq.n	800bf56 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d105      	bne.n	800bf56 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f000 ffd3 	bl	800cf02 <USBD_CtlSendStatus>
 800bf5c:	e01b      	b.n	800bf96 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d013      	beq.n	800bf92 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d10e      	bne.n	800bf92 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	7afa      	ldrb	r2, [r7, #11]
 800bf7e:	4611      	mov	r1, r2
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	4798      	blx	r3
 800bf84:	4603      	mov	r3, r0
 800bf86:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	e002      	b.n	800bf98 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e000      	b.n	800bf98 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bfae:	7afb      	ldrb	r3, [r7, #11]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d16a      	bne.n	800c08a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3314      	adds	r3, #20
 800bfb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d155      	bne.n	800c070 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	689a      	ldr	r2, [r3, #8]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d914      	bls.n	800bffa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	689a      	ldr	r2, [r3, #8]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	1ad2      	subs	r2, r2, r3
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 ff4c 	bl	800ce84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfec:	2300      	movs	r3, #0
 800bfee:	2200      	movs	r2, #0
 800bff0:	2100      	movs	r1, #0
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f008 fbb6 	bl	8014764 <USBD_LL_PrepareReceive>
 800bff8:	e03a      	b.n	800c070 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	429a      	cmp	r2, r3
 800c004:	d11c      	bne.n	800c040 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	685a      	ldr	r2, [r3, #4]
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c00e:	429a      	cmp	r2, r3
 800c010:	d316      	bcc.n	800c040 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d20f      	bcs.n	800c040 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c020:	2200      	movs	r2, #0
 800c022:	2100      	movs	r1, #0
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 ff2d 	bl	800ce84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c032:	2300      	movs	r3, #0
 800c034:	2200      	movs	r2, #0
 800c036:	2100      	movs	r1, #0
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f008 fb93 	bl	8014764 <USBD_LL_PrepareReceive>
 800c03e:	e017      	b.n	800c070 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00a      	beq.n	800c062 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c052:	2b03      	cmp	r3, #3
 800c054:	d105      	bne.n	800c062 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c062:	2180      	movs	r1, #128	; 0x80
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f008 fad3 	bl	8014610 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f000 ff5c 	bl	800cf28 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c076:	2b01      	cmp	r3, #1
 800c078:	d123      	bne.n	800c0c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f7ff fe9b 	bl	800bdb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c088:	e01b      	b.n	800c0c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d013      	beq.n	800c0be <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d10e      	bne.n	800c0be <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	7afa      	ldrb	r2, [r7, #11]
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	4798      	blx	r3
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c0b4:	7dfb      	ldrb	r3, [r7, #23]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
 800c0bc:	e002      	b.n	800c0c4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e000      	b.n	800c0c4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3718      	adds	r7, #24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d009      	beq.n	800c110 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	6852      	ldr	r2, [r2, #4]
 800c108:	b2d2      	uxtb	r2, r2
 800c10a:	4611      	mov	r1, r2
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c110:	2340      	movs	r3, #64	; 0x40
 800c112:	2200      	movs	r2, #0
 800c114:	2100      	movs	r1, #0
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f008 fa35 	bl	8014586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2240      	movs	r2, #64	; 0x40
 800c128:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c12c:	2340      	movs	r3, #64	; 0x40
 800c12e:	2200      	movs	r2, #0
 800c130:	2180      	movs	r1, #128	; 0x80
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f008 fa27 	bl	8014586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2240      	movs	r2, #64	; 0x40
 800c142:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c14e:	b480      	push	{r7}
 800c150:	b083      	sub	sp, #12
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	460b      	mov	r3, r1
 800c158:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	78fa      	ldrb	r2, [r7, #3]
 800c15e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2204      	movs	r2, #4
 800c186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a6:	2b04      	cmp	r3, #4
 800c1a8:	d105      	bne.n	800c1b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	d10b      	bne.n	800c1ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d005      	beq.n	800c1ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c212:	b480      	push	{r7}
 800c214:	b083      	sub	sp, #12
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	460b      	mov	r3, r1
 800c21c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d009      	beq.n	800c270 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	6852      	ldr	r2, [r2, #4]
 800c268:	b2d2      	uxtb	r2, r2
 800c26a:	4611      	mov	r1, r2
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	4798      	blx	r3
  }

  return USBD_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b087      	sub	sp, #28
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	3301      	adds	r3, #1
 800c290:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c298:	8a3b      	ldrh	r3, [r7, #16]
 800c29a:	021b      	lsls	r3, r3, #8
 800c29c:	b21a      	sxth	r2, r3
 800c29e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	b21b      	sxth	r3, r3
 800c2a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c2a8:	89fb      	ldrh	r3, [r7, #14]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	371c      	adds	r7, #28
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
	...

0800c2b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	d004      	beq.n	800c2dc <USBD_StdDevReq+0x24>
 800c2d2:	2b40      	cmp	r3, #64	; 0x40
 800c2d4:	d002      	beq.n	800c2dc <USBD_StdDevReq+0x24>
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <USBD_StdDevReq+0x38>
 800c2da:	e050      	b.n	800c37e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	4798      	blx	r3
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ee:	e04b      	b.n	800c388 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	785b      	ldrb	r3, [r3, #1]
 800c2f4:	2b09      	cmp	r3, #9
 800c2f6:	d83c      	bhi.n	800c372 <USBD_StdDevReq+0xba>
 800c2f8:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <USBD_StdDevReq+0x48>)
 800c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fe:	bf00      	nop
 800c300:	0800c355 	.word	0x0800c355
 800c304:	0800c369 	.word	0x0800c369
 800c308:	0800c373 	.word	0x0800c373
 800c30c:	0800c35f 	.word	0x0800c35f
 800c310:	0800c373 	.word	0x0800c373
 800c314:	0800c333 	.word	0x0800c333
 800c318:	0800c329 	.word	0x0800c329
 800c31c:	0800c373 	.word	0x0800c373
 800c320:	0800c34b 	.word	0x0800c34b
 800c324:	0800c33d 	.word	0x0800c33d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f9ce 	bl	800c6cc <USBD_GetDescriptor>
      break;
 800c330:	e024      	b.n	800c37c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fb5d 	bl	800c9f4 <USBD_SetAddress>
      break;
 800c33a:	e01f      	b.n	800c37c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fb9a 	bl	800ca78 <USBD_SetConfig>
 800c344:	4603      	mov	r3, r0
 800c346:	73fb      	strb	r3, [r7, #15]
      break;
 800c348:	e018      	b.n	800c37c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fc37 	bl	800cbc0 <USBD_GetConfig>
      break;
 800c352:	e013      	b.n	800c37c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fc66 	bl	800cc28 <USBD_GetStatus>
      break;
 800c35c:	e00e      	b.n	800c37c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fc94 	bl	800cc8e <USBD_SetFeature>
      break;
 800c366:	e009      	b.n	800c37c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fca3 	bl	800ccb6 <USBD_ClrFeature>
      break;
 800c370:	e004      	b.n	800c37c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fcf9 	bl	800cd6c <USBD_CtlError>
      break;
 800c37a:	bf00      	nop
    }
    break;
 800c37c:	e004      	b.n	800c388 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fcf3 	bl	800cd6c <USBD_CtlError>
    break;
 800c386:	bf00      	nop
  }

  return ret;
 800c388:	7bfb      	ldrb	r3, [r7, #15]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop

0800c394 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3aa:	2b20      	cmp	r3, #32
 800c3ac:	d003      	beq.n	800c3b6 <USBD_StdItfReq+0x22>
 800c3ae:	2b40      	cmp	r3, #64	; 0x40
 800c3b0:	d001      	beq.n	800c3b6 <USBD_StdItfReq+0x22>
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d12a      	bne.n	800c40c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d81d      	bhi.n	800c3fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	889b      	ldrh	r3, [r3, #4]
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d813      	bhi.n	800c3f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	4798      	blx	r3
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	88db      	ldrh	r3, [r3, #6]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d110      	bne.n	800c408 <USBD_StdItfReq+0x74>
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10d      	bne.n	800c408 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fd88 	bl	800cf02 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c3f2:	e009      	b.n	800c408 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fcb8 	bl	800cd6c <USBD_CtlError>
      break;
 800c3fc:	e004      	b.n	800c408 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 fcb3 	bl	800cd6c <USBD_CtlError>
      break;
 800c406:	e000      	b.n	800c40a <USBD_StdItfReq+0x76>
      break;
 800c408:	bf00      	nop
    }
    break;
 800c40a:	e004      	b.n	800c416 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fcac 	bl	800cd6c <USBD_CtlError>
    break;
 800c414:	bf00      	nop
  }

  return ret;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	889b      	ldrh	r3, [r3, #4]
 800c432:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d004      	beq.n	800c44a <USBD_StdEPReq+0x2a>
 800c440:	2b40      	cmp	r3, #64	; 0x40
 800c442:	d002      	beq.n	800c44a <USBD_StdEPReq+0x2a>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00a      	beq.n	800c45e <USBD_StdEPReq+0x3e>
 800c448:	e135      	b.n	800c6b6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	4798      	blx	r3
 800c458:	4603      	mov	r3, r0
 800c45a:	73fb      	strb	r3, [r7, #15]
    break;
 800c45c:	e130      	b.n	800c6c0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	785b      	ldrb	r3, [r3, #1]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d03e      	beq.n	800c4e4 <USBD_StdEPReq+0xc4>
 800c466:	2b03      	cmp	r3, #3
 800c468:	d002      	beq.n	800c470 <USBD_StdEPReq+0x50>
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d077      	beq.n	800c55e <USBD_StdEPReq+0x13e>
 800c46e:	e11c      	b.n	800c6aa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c476:	2b02      	cmp	r3, #2
 800c478:	d002      	beq.n	800c480 <USBD_StdEPReq+0x60>
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d015      	beq.n	800c4aa <USBD_StdEPReq+0x8a>
 800c47e:	e02b      	b.n	800c4d8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00c      	beq.n	800c4a0 <USBD_StdEPReq+0x80>
 800c486:	7bbb      	ldrb	r3, [r7, #14]
 800c488:	2b80      	cmp	r3, #128	; 0x80
 800c48a:	d009      	beq.n	800c4a0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f008 f8bd 	bl	8014610 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c496:	2180      	movs	r1, #128	; 0x80
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f008 f8b9 	bl	8014610 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c49e:	e020      	b.n	800c4e2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fc62 	bl	800cd6c <USBD_CtlError>
        break;
 800c4a8:	e01b      	b.n	800c4e2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	885b      	ldrh	r3, [r3, #2]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10e      	bne.n	800c4d0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_StdEPReq+0xb0>
 800c4b8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ba:	2b80      	cmp	r3, #128	; 0x80
 800c4bc:	d008      	beq.n	800c4d0 <USBD_StdEPReq+0xb0>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	88db      	ldrh	r3, [r3, #6]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d104      	bne.n	800c4d0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f008 f8a0 	bl	8014610 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fd16 	bl	800cf02 <USBD_CtlSendStatus>

        break;
 800c4d6:	e004      	b.n	800c4e2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fc46 	bl	800cd6c <USBD_CtlError>
        break;
 800c4e0:	bf00      	nop
      }
      break;
 800c4e2:	e0e7      	b.n	800c6b4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d002      	beq.n	800c4f4 <USBD_StdEPReq+0xd4>
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d015      	beq.n	800c51e <USBD_StdEPReq+0xfe>
 800c4f2:	e02d      	b.n	800c550 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00c      	beq.n	800c514 <USBD_StdEPReq+0xf4>
 800c4fa:	7bbb      	ldrb	r3, [r7, #14]
 800c4fc:	2b80      	cmp	r3, #128	; 0x80
 800c4fe:	d009      	beq.n	800c514 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c500:	7bbb      	ldrb	r3, [r7, #14]
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f008 f883 	bl	8014610 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c50a:	2180      	movs	r1, #128	; 0x80
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f008 f87f 	bl	8014610 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c512:	e023      	b.n	800c55c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fc28 	bl	800cd6c <USBD_CtlError>
        break;
 800c51c:	e01e      	b.n	800c55c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	885b      	ldrh	r3, [r3, #2]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d119      	bne.n	800c55a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d004      	beq.n	800c53a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c530:	7bbb      	ldrb	r3, [r7, #14]
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f008 f88a 	bl	801464e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fce1 	bl	800cf02 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	4798      	blx	r3
        }
        break;
 800c54e:	e004      	b.n	800c55a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fc0a 	bl	800cd6c <USBD_CtlError>
        break;
 800c558:	e000      	b.n	800c55c <USBD_StdEPReq+0x13c>
        break;
 800c55a:	bf00      	nop
      }
      break;
 800c55c:	e0aa      	b.n	800c6b4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c564:	2b02      	cmp	r3, #2
 800c566:	d002      	beq.n	800c56e <USBD_StdEPReq+0x14e>
 800c568:	2b03      	cmp	r3, #3
 800c56a:	d032      	beq.n	800c5d2 <USBD_StdEPReq+0x1b2>
 800c56c:	e097      	b.n	800c69e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c56e:	7bbb      	ldrb	r3, [r7, #14]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <USBD_StdEPReq+0x164>
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	2b80      	cmp	r3, #128	; 0x80
 800c578:	d004      	beq.n	800c584 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fbf5 	bl	800cd6c <USBD_CtlError>
          break;
 800c582:	e091      	b.n	800c6a8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	da0b      	bge.n	800c5a4 <USBD_StdEPReq+0x184>
 800c58c:	7bbb      	ldrb	r3, [r7, #14]
 800c58e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c592:	4613      	mov	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	3310      	adds	r3, #16
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	4413      	add	r3, r2
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	e00b      	b.n	800c5bc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
 800c5a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fc3f 	bl	800ce4e <USBD_CtlSendData>
        break;
 800c5d0:	e06a      	b.n	800c6a8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c5d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	da11      	bge.n	800c5fe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5da:	7bbb      	ldrb	r3, [r7, #14]
 800c5dc:	f003 020f 	and.w	r2, r3, #15
 800c5e0:	6879      	ldr	r1, [r7, #4]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	440b      	add	r3, r1
 800c5ec:	3324      	adds	r3, #36	; 0x24
 800c5ee:	881b      	ldrh	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d117      	bne.n	800c624 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fbb8 	bl	800cd6c <USBD_CtlError>
            break;
 800c5fc:	e054      	b.n	800c6a8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	f003 020f 	and.w	r2, r3, #15
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	4613      	mov	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	440b      	add	r3, r1
 800c610:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d104      	bne.n	800c624 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fba5 	bl	800cd6c <USBD_CtlError>
            break;
 800c622:	e041      	b.n	800c6a8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	da0b      	bge.n	800c644 <USBD_StdEPReq+0x224>
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c632:	4613      	mov	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	3310      	adds	r3, #16
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	4413      	add	r3, r2
 800c640:	3304      	adds	r3, #4
 800c642:	e00b      	b.n	800c65c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c644:	7bbb      	ldrb	r3, [r7, #14]
 800c646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c64a:	4613      	mov	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	4413      	add	r3, r2
 800c65a:	3304      	adds	r3, #4
 800c65c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d002      	beq.n	800c66a <USBD_StdEPReq+0x24a>
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	2b80      	cmp	r3, #128	; 0x80
 800c668:	d103      	bne.n	800c672 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	e00e      	b.n	800c690 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c672:	7bbb      	ldrb	r3, [r7, #14]
 800c674:	4619      	mov	r1, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f008 f808 	bl	801468c <USBD_LL_IsStallEP>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d003      	beq.n	800c68a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2201      	movs	r2, #1
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	e002      	b.n	800c690 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2200      	movs	r2, #0
 800c68e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2202      	movs	r2, #2
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fbd9 	bl	800ce4e <USBD_CtlSendData>
          break;
 800c69c:	e004      	b.n	800c6a8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fb63 	bl	800cd6c <USBD_CtlError>
        break;
 800c6a6:	bf00      	nop
      }
      break;
 800c6a8:	e004      	b.n	800c6b4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fb5d 	bl	800cd6c <USBD_CtlError>
      break;
 800c6b2:	bf00      	nop
    }
    break;
 800c6b4:	e004      	b.n	800c6c0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fb57 	bl	800cd6c <USBD_CtlError>
    break;
 800c6be:	bf00      	nop
  }

  return ret;
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
	...

0800c6cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	885b      	ldrh	r3, [r3, #2]
 800c6e6:	0a1b      	lsrs	r3, r3, #8
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	2b0e      	cmp	r3, #14
 800c6ee:	f200 8152 	bhi.w	800c996 <USBD_GetDescriptor+0x2ca>
 800c6f2:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <USBD_GetDescriptor+0x2c>)
 800c6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f8:	0800c769 	.word	0x0800c769
 800c6fc:	0800c781 	.word	0x0800c781
 800c700:	0800c7c1 	.word	0x0800c7c1
 800c704:	0800c997 	.word	0x0800c997
 800c708:	0800c997 	.word	0x0800c997
 800c70c:	0800c937 	.word	0x0800c937
 800c710:	0800c963 	.word	0x0800c963
 800c714:	0800c997 	.word	0x0800c997
 800c718:	0800c997 	.word	0x0800c997
 800c71c:	0800c997 	.word	0x0800c997
 800c720:	0800c997 	.word	0x0800c997
 800c724:	0800c997 	.word	0x0800c997
 800c728:	0800c997 	.word	0x0800c997
 800c72c:	0800c997 	.word	0x0800c997
 800c730:	0800c735 	.word	0x0800c735
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c73a:	69db      	ldr	r3, [r3, #28]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00b      	beq.n	800c758 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	7c12      	ldrb	r2, [r2, #16]
 800c74c:	f107 0108 	add.w	r1, r7, #8
 800c750:	4610      	mov	r0, r2
 800c752:	4798      	blx	r3
 800c754:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c756:	e126      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fb06 	bl	800cd6c <USBD_CtlError>
      err++;
 800c760:	7afb      	ldrb	r3, [r7, #11]
 800c762:	3301      	adds	r3, #1
 800c764:	72fb      	strb	r3, [r7, #11]
    break;
 800c766:	e11e      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	7c12      	ldrb	r2, [r2, #16]
 800c774:	f107 0108 	add.w	r1, r7, #8
 800c778:	4610      	mov	r0, r2
 800c77a:	4798      	blx	r3
 800c77c:	60f8      	str	r0, [r7, #12]
    break;
 800c77e:	e112      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7c1b      	ldrb	r3, [r3, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10d      	bne.n	800c7a4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c790:	f107 0208 	add.w	r2, r7, #8
 800c794:	4610      	mov	r0, r2
 800c796:	4798      	blx	r3
 800c798:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3301      	adds	r3, #1
 800c79e:	2202      	movs	r2, #2
 800c7a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c7a2:	e100      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ac:	f107 0208 	add.w	r2, r7, #8
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	4798      	blx	r3
 800c7b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	701a      	strb	r2, [r3, #0]
    break;
 800c7be:	e0f2      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	885b      	ldrh	r3, [r3, #2]
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b05      	cmp	r3, #5
 800c7c8:	f200 80ac 	bhi.w	800c924 <USBD_GetDescriptor+0x258>
 800c7cc:	a201      	add	r2, pc, #4	; (adr r2, 800c7d4 <USBD_GetDescriptor+0x108>)
 800c7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d2:	bf00      	nop
 800c7d4:	0800c7ed 	.word	0x0800c7ed
 800c7d8:	0800c821 	.word	0x0800c821
 800c7dc:	0800c855 	.word	0x0800c855
 800c7e0:	0800c889 	.word	0x0800c889
 800c7e4:	0800c8bd 	.word	0x0800c8bd
 800c7e8:	0800c8f1 	.word	0x0800c8f1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00b      	beq.n	800c810 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	7c12      	ldrb	r2, [r2, #16]
 800c804:	f107 0108 	add.w	r1, r7, #8
 800c808:	4610      	mov	r0, r2
 800c80a:	4798      	blx	r3
 800c80c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c80e:	e091      	b.n	800c934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 faaa 	bl	800cd6c <USBD_CtlError>
        err++;
 800c818:	7afb      	ldrb	r3, [r7, #11]
 800c81a:	3301      	adds	r3, #1
 800c81c:	72fb      	strb	r3, [r7, #11]
      break;
 800c81e:	e089      	b.n	800c934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	7c12      	ldrb	r2, [r2, #16]
 800c838:	f107 0108 	add.w	r1, r7, #8
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c842:	e077      	b.n	800c934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa90 	bl	800cd6c <USBD_CtlError>
        err++;
 800c84c:	7afb      	ldrb	r3, [r7, #11]
 800c84e:	3301      	adds	r3, #1
 800c850:	72fb      	strb	r3, [r7, #11]
      break;
 800c852:	e06f      	b.n	800c934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	7c12      	ldrb	r2, [r2, #16]
 800c86c:	f107 0108 	add.w	r1, r7, #8
 800c870:	4610      	mov	r0, r2
 800c872:	4798      	blx	r3
 800c874:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c876:	e05d      	b.n	800c934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fa76 	bl	800cd6c <USBD_CtlError>
        err++;
 800c880:	7afb      	ldrb	r3, [r7, #11]
 800c882:	3301      	adds	r3, #1
 800c884:	72fb      	strb	r3, [r7, #11]
      break;
 800c886:	e055      	b.n	800c934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00b      	beq.n	800c8ac <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	7c12      	ldrb	r2, [r2, #16]
 800c8a0:	f107 0108 	add.w	r1, r7, #8
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4798      	blx	r3
 800c8a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8aa:	e043      	b.n	800c934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fa5c 	bl	800cd6c <USBD_CtlError>
        err++;
 800c8b4:	7afb      	ldrb	r3, [r7, #11]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	72fb      	strb	r3, [r7, #11]
      break;
 800c8ba:	e03b      	b.n	800c934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00b      	beq.n	800c8e0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	7c12      	ldrb	r2, [r2, #16]
 800c8d4:	f107 0108 	add.w	r1, r7, #8
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4798      	blx	r3
 800c8dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8de:	e029      	b.n	800c934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fa42 	bl	800cd6c <USBD_CtlError>
        err++;
 800c8e8:	7afb      	ldrb	r3, [r7, #11]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	72fb      	strb	r3, [r7, #11]
      break;
 800c8ee:	e021      	b.n	800c934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00b      	beq.n	800c914 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	7c12      	ldrb	r2, [r2, #16]
 800c908:	f107 0108 	add.w	r1, r7, #8
 800c90c:	4610      	mov	r0, r2
 800c90e:	4798      	blx	r3
 800c910:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c912:	e00f      	b.n	800c934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa28 	bl	800cd6c <USBD_CtlError>
        err++;
 800c91c:	7afb      	ldrb	r3, [r7, #11]
 800c91e:	3301      	adds	r3, #1
 800c920:	72fb      	strb	r3, [r7, #11]
      break;
 800c922:	e007      	b.n	800c934 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fa20 	bl	800cd6c <USBD_CtlError>
      err++;
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	3301      	adds	r3, #1
 800c930:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c932:	bf00      	nop
    }
    break;
 800c934:	e037      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	7c1b      	ldrb	r3, [r3, #16]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d109      	bne.n	800c952 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c946:	f107 0208 	add.w	r2, r7, #8
 800c94a:	4610      	mov	r0, r2
 800c94c:	4798      	blx	r3
 800c94e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c950:	e029      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c952:	6839      	ldr	r1, [r7, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fa09 	bl	800cd6c <USBD_CtlError>
      err++;
 800c95a:	7afb      	ldrb	r3, [r7, #11]
 800c95c:	3301      	adds	r3, #1
 800c95e:	72fb      	strb	r3, [r7, #11]
    break;
 800c960:	e021      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	7c1b      	ldrb	r3, [r3, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10d      	bne.n	800c986 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c972:	f107 0208 	add.w	r2, r7, #8
 800c976:	4610      	mov	r0, r2
 800c978:	4798      	blx	r3
 800c97a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3301      	adds	r3, #1
 800c980:	2207      	movs	r2, #7
 800c982:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c984:	e00f      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 f9ef 	bl	800cd6c <USBD_CtlError>
      err++;
 800c98e:	7afb      	ldrb	r3, [r7, #11]
 800c990:	3301      	adds	r3, #1
 800c992:	72fb      	strb	r3, [r7, #11]
    break;
 800c994:	e007      	b.n	800c9a6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 f9e7 	bl	800cd6c <USBD_CtlError>
    err++;
 800c99e:	7afb      	ldrb	r3, [r7, #11]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	72fb      	strb	r3, [r7, #11]
    break;
 800c9a4:	bf00      	nop
  }

  if (err != 0U)
 800c9a6:	7afb      	ldrb	r3, [r7, #11]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d11e      	bne.n	800c9ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	88db      	ldrh	r3, [r3, #6]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d016      	beq.n	800c9e2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c9b4:	893b      	ldrh	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00e      	beq.n	800c9d8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	88da      	ldrh	r2, [r3, #6]
 800c9be:	893b      	ldrh	r3, [r7, #8]
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	bf28      	it	cs
 800c9c4:	4613      	movcs	r3, r2
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9ca:	893b      	ldrh	r3, [r7, #8]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fa3c 	bl	800ce4e <USBD_CtlSendData>
 800c9d6:	e009      	b.n	800c9ec <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 f9c6 	bl	800cd6c <USBD_CtlError>
 800c9e0:	e004      	b.n	800c9ec <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fa8d 	bl	800cf02 <USBD_CtlSendStatus>
 800c9e8:	e000      	b.n	800c9ec <USBD_GetDescriptor+0x320>
    return;
 800c9ea:	bf00      	nop
    }
  }
}
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop

0800c9f4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	889b      	ldrh	r3, [r3, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d130      	bne.n	800ca68 <USBD_SetAddress+0x74>
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	88db      	ldrh	r3, [r3, #6]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d12c      	bne.n	800ca68 <USBD_SetAddress+0x74>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	885b      	ldrh	r3, [r3, #2]
 800ca12:	2b7f      	cmp	r3, #127	; 0x7f
 800ca14:	d828      	bhi.n	800ca68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	885b      	ldrh	r3, [r3, #2]
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca28:	2b03      	cmp	r3, #3
 800ca2a:	d104      	bne.n	800ca36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f99c 	bl	800cd6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca34:	e01c      	b.n	800ca70 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	7bfa      	ldrb	r2, [r7, #15]
 800ca3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	4619      	mov	r1, r3
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f007 fe4e 	bl	80146e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fa5a 	bl	800cf02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d004      	beq.n	800ca5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5c:	e008      	b.n	800ca70 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca66:	e003      	b.n	800ca70 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f97e 	bl	800cd6c <USBD_CtlError>
  }
}
 800ca70:	bf00      	nop
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	885b      	ldrh	r3, [r3, #2]
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	4b4b      	ldr	r3, [pc, #300]	; (800cbbc <USBD_SetConfig+0x144>)
 800ca8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca90:	4b4a      	ldr	r3, [pc, #296]	; (800cbbc <USBD_SetConfig+0x144>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d905      	bls.n	800caa4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f966 	bl	800cd6c <USBD_CtlError>
    return USBD_FAIL;
 800caa0:	2303      	movs	r3, #3
 800caa2:	e087      	b.n	800cbb4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d002      	beq.n	800cab4 <USBD_SetConfig+0x3c>
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d025      	beq.n	800cafe <USBD_SetConfig+0x86>
 800cab2:	e071      	b.n	800cb98 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cab4:	4b41      	ldr	r3, [pc, #260]	; (800cbbc <USBD_SetConfig+0x144>)
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d01c      	beq.n	800caf6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cabc:	4b3f      	ldr	r3, [pc, #252]	; (800cbbc <USBD_SetConfig+0x144>)
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	461a      	mov	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cac6:	4b3d      	ldr	r3, [pc, #244]	; (800cbbc <USBD_SetConfig+0x144>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff f97d 	bl	800bdcc <USBD_SetClassConfig>
 800cad2:	4603      	mov	r3, r0
 800cad4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d004      	beq.n	800cae6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 f944 	bl	800cd6c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cae4:	e065      	b.n	800cbb2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa0b 	bl	800cf02 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2203      	movs	r2, #3
 800caf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800caf4:	e05d      	b.n	800cbb2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fa03 	bl	800cf02 <USBD_CtlSendStatus>
    break;
 800cafc:	e059      	b.n	800cbb2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cafe:	4b2f      	ldr	r3, [pc, #188]	; (800cbbc <USBD_SetConfig+0x144>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d112      	bne.n	800cb2c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2202      	movs	r2, #2
 800cb0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cb0e:	4b2b      	ldr	r3, [pc, #172]	; (800cbbc <USBD_SetConfig+0x144>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	461a      	mov	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb18:	4b28      	ldr	r3, [pc, #160]	; (800cbbc <USBD_SetConfig+0x144>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7ff f970 	bl	800be04 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f9ec 	bl	800cf02 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cb2a:	e042      	b.n	800cbb2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cb2c:	4b23      	ldr	r3, [pc, #140]	; (800cbbc <USBD_SetConfig+0x144>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	461a      	mov	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d02a      	beq.n	800cb90 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff f95e 	bl	800be04 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cb48:	4b1c      	ldr	r3, [pc, #112]	; (800cbbc <USBD_SetConfig+0x144>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb52:	4b1a      	ldr	r3, [pc, #104]	; (800cbbc <USBD_SetConfig+0x144>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff f937 	bl	800bdcc <USBD_SetClassConfig>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cb62:	7bfb      	ldrb	r3, [r7, #15]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00f      	beq.n	800cb88 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cb68:	6839      	ldr	r1, [r7, #0]
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f8fe 	bl	800cd6c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff f943 	bl	800be04 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2202      	movs	r2, #2
 800cb82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cb86:	e014      	b.n	800cbb2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f9ba 	bl	800cf02 <USBD_CtlSendStatus>
    break;
 800cb8e:	e010      	b.n	800cbb2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f9b6 	bl	800cf02 <USBD_CtlSendStatus>
    break;
 800cb96:	e00c      	b.n	800cbb2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f8e6 	bl	800cd6c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <USBD_SetConfig+0x144>)
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	4619      	mov	r1, r3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff f92c 	bl	800be04 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cbac:	2303      	movs	r3, #3
 800cbae:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb0:	bf00      	nop
  }

  return ret;
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	200002c0 	.word	0x200002c0

0800cbc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	88db      	ldrh	r3, [r3, #6]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d004      	beq.n	800cbdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbd2:	6839      	ldr	r1, [r7, #0]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f8c9 	bl	800cd6c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cbda:	e021      	b.n	800cc20 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	db17      	blt.n	800cc16 <USBD_GetConfig+0x56>
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	dd02      	ble.n	800cbf0 <USBD_GetConfig+0x30>
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d00b      	beq.n	800cc06 <USBD_GetConfig+0x46>
 800cbee:	e012      	b.n	800cc16 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f925 	bl	800ce4e <USBD_CtlSendData>
      break;
 800cc04:	e00c      	b.n	800cc20 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3304      	adds	r3, #4
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f91d 	bl	800ce4e <USBD_CtlSendData>
      break;
 800cc14:	e004      	b.n	800cc20 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f8a7 	bl	800cd6c <USBD_CtlError>
      break;
 800cc1e:	bf00      	nop
}
 800cc20:	bf00      	nop
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d81e      	bhi.n	800cc7c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	88db      	ldrh	r3, [r3, #6]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d004      	beq.n	800cc50 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f88f 	bl	800cd6c <USBD_CtlError>
      break;
 800cc4e:	e01a      	b.n	800cc86 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	f043 0202 	orr.w	r2, r3, #2
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	330c      	adds	r3, #12
 800cc70:	2202      	movs	r2, #2
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f8ea 	bl	800ce4e <USBD_CtlSendData>
    break;
 800cc7a:	e004      	b.n	800cc86 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f874 	bl	800cd6c <USBD_CtlError>
    break;
 800cc84:	bf00      	nop
  }
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	885b      	ldrh	r3, [r3, #2]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d106      	bne.n	800ccae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f92a 	bl	800cf02 <USBD_CtlSendStatus>
  }
}
 800ccae:	bf00      	nop
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b082      	sub	sp, #8
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d80b      	bhi.n	800cce4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	885b      	ldrh	r3, [r3, #2]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d10c      	bne.n	800ccee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f910 	bl	800cf02 <USBD_CtlSendStatus>
      }
      break;
 800cce2:	e004      	b.n	800ccee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f840 	bl	800cd6c <USBD_CtlError>
      break;
 800ccec:	e000      	b.n	800ccf0 <USBD_ClrFeature+0x3a>
      break;
 800ccee:	bf00      	nop
  }
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	781a      	ldrb	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3301      	adds	r3, #1
 800cd12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	781a      	ldrb	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7ff faa9 	bl	800c27a <SWAPBYTE>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	3301      	adds	r3, #1
 800cd34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f7ff fa9c 	bl	800c27a <SWAPBYTE>
 800cd42:	4603      	mov	r3, r0
 800cd44:	461a      	mov	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	3301      	adds	r3, #1
 800cd54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f7ff fa8f 	bl	800c27a <SWAPBYTE>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461a      	mov	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	80da      	strh	r2, [r3, #6]
}
 800cd64:	bf00      	nop
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd76:	2180      	movs	r1, #128	; 0x80
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f007 fc49 	bl	8014610 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd7e:	2100      	movs	r1, #0
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f007 fc45 	bl	8014610 <USBD_LL_StallEP>
}
 800cd86:	bf00      	nop
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b086      	sub	sp, #24
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	60f8      	str	r0, [r7, #12]
 800cd96:	60b9      	str	r1, [r7, #8]
 800cd98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d036      	beq.n	800ce12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cda8:	6938      	ldr	r0, [r7, #16]
 800cdaa:	f000 f836 	bl	800ce1a <USBD_GetLen>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	7812      	ldrb	r2, [r2, #0]
 800cdc6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	2203      	movs	r2, #3
 800cdd6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	3301      	adds	r3, #1
 800cddc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdde:	e013      	b.n	800ce08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	4413      	add	r3, r2
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	7812      	ldrb	r2, [r2, #0]
 800cdea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	613b      	str	r3, [r7, #16]
    idx++;
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	2200      	movs	r2, #0
 800ce00:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	3301      	adds	r3, #1
 800ce06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1e7      	bne.n	800cde0 <USBD_GetString+0x52>
 800ce10:	e000      	b.n	800ce14 <USBD_GetString+0x86>
    return;
 800ce12:	bf00      	nop
  }
}
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce2a:	e005      	b.n	800ce38 <USBD_GetLen+0x1e>
  {
    len++;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	3301      	adds	r3, #1
 800ce36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1f5      	bne.n	800ce2c <USBD_GetLen+0x12>
  }

  return len;
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	2100      	movs	r1, #0
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f007 fc54 	bl	8014722 <USBD_LL_Transmit>

  return USBD_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	2100      	movs	r1, #0
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f007 fc43 	bl	8014722 <USBD_LL_Transmit>

  return USBD_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b084      	sub	sp, #16
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	60f8      	str	r0, [r7, #12]
 800ceae:	60b9      	str	r1, [r7, #8]
 800ceb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2203      	movs	r2, #3
 800ceb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	2100      	movs	r1, #0
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f007 fc47 	bl	8014764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	2100      	movs	r1, #0
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f007 fc36 	bl	8014764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b082      	sub	sp, #8
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2204      	movs	r2, #4
 800cf0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf12:	2300      	movs	r3, #0
 800cf14:	2200      	movs	r2, #0
 800cf16:	2100      	movs	r1, #0
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f007 fc02 	bl	8014722 <USBD_LL_Transmit>

  return USBD_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2205      	movs	r2, #5
 800cf34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf38:	2300      	movs	r3, #0
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f007 fc10 	bl	8014764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
	...

0800cf50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf5a:	79fb      	ldrb	r3, [r7, #7]
 800cf5c:	4a08      	ldr	r2, [pc, #32]	; (800cf80 <disk_status+0x30>)
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	79fa      	ldrb	r2, [r7, #7]
 800cf68:	4905      	ldr	r1, [pc, #20]	; (800cf80 <disk_status+0x30>)
 800cf6a:	440a      	add	r2, r1
 800cf6c:	7a12      	ldrb	r2, [r2, #8]
 800cf6e:	4610      	mov	r0, r2
 800cf70:	4798      	blx	r3
 800cf72:	4603      	mov	r3, r0
 800cf74:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	200002ec 	.word	0x200002ec

0800cf84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf92:	79fb      	ldrb	r3, [r7, #7]
 800cf94:	4a0d      	ldr	r2, [pc, #52]	; (800cfcc <disk_initialize+0x48>)
 800cf96:	5cd3      	ldrb	r3, [r2, r3]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d111      	bne.n	800cfc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
 800cf9e:	4a0b      	ldr	r2, [pc, #44]	; (800cfcc <disk_initialize+0x48>)
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	4a09      	ldr	r2, [pc, #36]	; (800cfcc <disk_initialize+0x48>)
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	79fa      	ldrb	r2, [r7, #7]
 800cfb2:	4906      	ldr	r1, [pc, #24]	; (800cfcc <disk_initialize+0x48>)
 800cfb4:	440a      	add	r2, r1
 800cfb6:	7a12      	ldrb	r2, [r2, #8]
 800cfb8:	4610      	mov	r0, r2
 800cfba:	4798      	blx	r3
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	200002ec 	.word	0x200002ec

0800cfd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cfd0:	b590      	push	{r4, r7, lr}
 800cfd2:	b087      	sub	sp, #28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60b9      	str	r1, [r7, #8]
 800cfd8:	607a      	str	r2, [r7, #4]
 800cfda:	603b      	str	r3, [r7, #0]
 800cfdc:	4603      	mov	r3, r0
 800cfde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	4a0a      	ldr	r2, [pc, #40]	; (800d00c <disk_read+0x3c>)
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	689c      	ldr	r4, [r3, #8]
 800cfec:	7bfb      	ldrb	r3, [r7, #15]
 800cfee:	4a07      	ldr	r2, [pc, #28]	; (800d00c <disk_read+0x3c>)
 800cff0:	4413      	add	r3, r2
 800cff2:	7a18      	ldrb	r0, [r3, #8]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	68b9      	ldr	r1, [r7, #8]
 800cffa:	47a0      	blx	r4
 800cffc:	4603      	mov	r3, r0
 800cffe:	75fb      	strb	r3, [r7, #23]
  return res;
 800d000:	7dfb      	ldrb	r3, [r7, #23]
}
 800d002:	4618      	mov	r0, r3
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	bd90      	pop	{r4, r7, pc}
 800d00a:	bf00      	nop
 800d00c:	200002ec 	.word	0x200002ec

0800d010 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d010:	b590      	push	{r4, r7, lr}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	60b9      	str	r1, [r7, #8]
 800d018:	607a      	str	r2, [r7, #4]
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	4603      	mov	r3, r0
 800d01e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d020:	7bfb      	ldrb	r3, [r7, #15]
 800d022:	4a0a      	ldr	r2, [pc, #40]	; (800d04c <disk_write+0x3c>)
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4413      	add	r3, r2
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	68dc      	ldr	r4, [r3, #12]
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
 800d02e:	4a07      	ldr	r2, [pc, #28]	; (800d04c <disk_write+0x3c>)
 800d030:	4413      	add	r3, r2
 800d032:	7a18      	ldrb	r0, [r3, #8]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	68b9      	ldr	r1, [r7, #8]
 800d03a:	47a0      	blx	r4
 800d03c:	4603      	mov	r3, r0
 800d03e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d040:	7dfb      	ldrb	r3, [r7, #23]
}
 800d042:	4618      	mov	r0, r3
 800d044:	371c      	adds	r7, #28
 800d046:	46bd      	mov	sp, r7
 800d048:	bd90      	pop	{r4, r7, pc}
 800d04a:	bf00      	nop
 800d04c:	200002ec 	.word	0x200002ec

0800d050 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	603a      	str	r2, [r7, #0]
 800d05a:	71fb      	strb	r3, [r7, #7]
 800d05c:	460b      	mov	r3, r1
 800d05e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d060:	79fb      	ldrb	r3, [r7, #7]
 800d062:	4a09      	ldr	r2, [pc, #36]	; (800d088 <disk_ioctl+0x38>)
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	79fa      	ldrb	r2, [r7, #7]
 800d06e:	4906      	ldr	r1, [pc, #24]	; (800d088 <disk_ioctl+0x38>)
 800d070:	440a      	add	r2, r1
 800d072:	7a10      	ldrb	r0, [r2, #8]
 800d074:	79b9      	ldrb	r1, [r7, #6]
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	4798      	blx	r3
 800d07a:	4603      	mov	r3, r0
 800d07c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	200002ec 	.word	0x200002ec

0800d08c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	3301      	adds	r3, #1
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d09c:	89fb      	ldrh	r3, [r7, #14]
 800d09e:	021b      	lsls	r3, r3, #8
 800d0a0:	b21a      	sxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	b21b      	sxth	r3, r3
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	b21b      	sxth	r3, r3
 800d0ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d0ae:	89fb      	ldrh	r3, [r7, #14]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	3303      	adds	r3, #3
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	021b      	lsls	r3, r3, #8
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	3202      	adds	r2, #2
 800d0d4:	7812      	ldrb	r2, [r2, #0]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	021b      	lsls	r3, r3, #8
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	3201      	adds	r2, #1
 800d0e2:	7812      	ldrb	r2, [r2, #0]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	021b      	lsls	r3, r3, #8
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	7812      	ldrb	r2, [r2, #0]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d102:	b480      	push	{r7}
 800d104:	b083      	sub	sp, #12
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	460b      	mov	r3, r1
 800d10c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	1c5a      	adds	r2, r3, #1
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	887a      	ldrh	r2, [r7, #2]
 800d116:	b2d2      	uxtb	r2, r2
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	887b      	ldrh	r3, [r7, #2]
 800d11c:	0a1b      	lsrs	r3, r3, #8
 800d11e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	607a      	str	r2, [r7, #4]
 800d126:	887a      	ldrh	r2, [r7, #2]
 800d128:	b2d2      	uxtb	r2, r2
 800d12a:	701a      	strb	r2, [r3, #0]
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	1c5a      	adds	r2, r3, #1
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	b2d2      	uxtb	r2, r2
 800d14c:	701a      	strb	r2, [r3, #0]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	0a1b      	lsrs	r3, r3, #8
 800d152:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	1c5a      	adds	r2, r3, #1
 800d158:	607a      	str	r2, [r7, #4]
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	b2d2      	uxtb	r2, r2
 800d15e:	701a      	strb	r2, [r3, #0]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	0a1b      	lsrs	r3, r3, #8
 800d164:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	1c5a      	adds	r2, r3, #1
 800d16a:	607a      	str	r2, [r7, #4]
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	b2d2      	uxtb	r2, r2
 800d170:	701a      	strb	r2, [r3, #0]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	0a1b      	lsrs	r3, r3, #8
 800d176:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	607a      	str	r2, [r7, #4]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	b2d2      	uxtb	r2, r2
 800d182:	701a      	strb	r2, [r3, #0]
}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d190:	b480      	push	{r7}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00d      	beq.n	800d1c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	1c53      	adds	r3, r2, #1
 800d1ae:	613b      	str	r3, [r7, #16]
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	1c59      	adds	r1, r3, #1
 800d1b4:	6179      	str	r1, [r7, #20]
 800d1b6:	7812      	ldrb	r2, [r2, #0]
 800d1b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	607b      	str	r3, [r7, #4]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d1f1      	bne.n	800d1aa <mem_cpy+0x1a>
	}
}
 800d1c6:	bf00      	nop
 800d1c8:	371c      	adds	r7, #28
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d1d2:	b480      	push	{r7}
 800d1d4:	b087      	sub	sp, #28
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	60f8      	str	r0, [r7, #12]
 800d1da:	60b9      	str	r1, [r7, #8]
 800d1dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	617a      	str	r2, [r7, #20]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	b2d2      	uxtb	r2, r2
 800d1ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	607b      	str	r3, [r7, #4]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1f3      	bne.n	800d1e2 <mem_set+0x10>
}
 800d1fa:	bf00      	nop
 800d1fc:	371c      	adds	r7, #28
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d206:	b480      	push	{r7}
 800d208:	b089      	sub	sp, #36	; 0x24
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	60f8      	str	r0, [r7, #12]
 800d20e:	60b9      	str	r1, [r7, #8]
 800d210:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	61fa      	str	r2, [r7, #28]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	61ba      	str	r2, [r7, #24]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	1acb      	subs	r3, r1, r3
 800d232:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3b01      	subs	r3, #1
 800d238:	607b      	str	r3, [r7, #4]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <mem_cmp+0x40>
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d0eb      	beq.n	800d21e <mem_cmp+0x18>

	return r;
 800d246:	697b      	ldr	r3, [r7, #20]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3724      	adds	r7, #36	; 0x24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d25e:	e002      	b.n	800d266 <chk_chr+0x12>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	3301      	adds	r3, #1
 800d264:	607b      	str	r3, [r7, #4]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d005      	beq.n	800d27a <chk_chr+0x26>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	4293      	cmp	r3, r2
 800d278:	d1f2      	bne.n	800d260 <chk_chr+0xc>
	return *str;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	781b      	ldrb	r3, [r3, #0]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b082      	sub	sp, #8
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d009      	beq.n	800d2ac <lock_fs+0x22>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f002 fd8d 	bl	800fdbc <ff_req_grant>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <lock_fs+0x22>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e000      	b.n	800d2ae <lock_fs+0x24>
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	460b      	mov	r3, r1
 800d2c0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00d      	beq.n	800d2e4 <unlock_fs+0x2e>
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	2b0c      	cmp	r3, #12
 800d2cc:	d00a      	beq.n	800d2e4 <unlock_fs+0x2e>
 800d2ce:	78fb      	ldrb	r3, [r7, #3]
 800d2d0:	2b0b      	cmp	r3, #11
 800d2d2:	d007      	beq.n	800d2e4 <unlock_fs+0x2e>
 800d2d4:	78fb      	ldrb	r3, [r7, #3]
 800d2d6:	2b0f      	cmp	r3, #15
 800d2d8:	d004      	beq.n	800d2e4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f002 fd81 	bl	800fde6 <ff_rel_grant>
	}
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60bb      	str	r3, [r7, #8]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	60fb      	str	r3, [r7, #12]
 800d2fe:	e029      	b.n	800d354 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d300:	4a27      	ldr	r2, [pc, #156]	; (800d3a0 <chk_lock+0xb4>)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	011b      	lsls	r3, r3, #4
 800d306:	4413      	add	r3, r2
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d01d      	beq.n	800d34a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d30e:	4a24      	ldr	r2, [pc, #144]	; (800d3a0 <chk_lock+0xb4>)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	4413      	add	r3, r2
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d116      	bne.n	800d34e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d320:	4a1f      	ldr	r2, [pc, #124]	; (800d3a0 <chk_lock+0xb4>)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	011b      	lsls	r3, r3, #4
 800d326:	4413      	add	r3, r2
 800d328:	3304      	adds	r3, #4
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d330:	429a      	cmp	r2, r3
 800d332:	d10c      	bne.n	800d34e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d334:	4a1a      	ldr	r2, [pc, #104]	; (800d3a0 <chk_lock+0xb4>)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	4413      	add	r3, r2
 800d33c:	3308      	adds	r3, #8
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d344:	429a      	cmp	r2, r3
 800d346:	d102      	bne.n	800d34e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d348:	e007      	b.n	800d35a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d34a:	2301      	movs	r3, #1
 800d34c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3301      	adds	r3, #1
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d9d2      	bls.n	800d300 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d109      	bne.n	800d374 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d102      	bne.n	800d36c <chk_lock+0x80>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d101      	bne.n	800d370 <chk_lock+0x84>
 800d36c:	2300      	movs	r3, #0
 800d36e:	e010      	b.n	800d392 <chk_lock+0xa6>
 800d370:	2312      	movs	r3, #18
 800d372:	e00e      	b.n	800d392 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d108      	bne.n	800d38c <chk_lock+0xa0>
 800d37a:	4a09      	ldr	r2, [pc, #36]	; (800d3a0 <chk_lock+0xb4>)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	011b      	lsls	r3, r3, #4
 800d380:	4413      	add	r3, r2
 800d382:	330c      	adds	r3, #12
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d38a:	d101      	bne.n	800d390 <chk_lock+0xa4>
 800d38c:	2310      	movs	r3, #16
 800d38e:	e000      	b.n	800d392 <chk_lock+0xa6>
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3714      	adds	r7, #20
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	200002cc 	.word	0x200002cc

0800d3a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	607b      	str	r3, [r7, #4]
 800d3ae:	e002      	b.n	800d3b6 <enq_lock+0x12>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	607b      	str	r3, [r7, #4]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d806      	bhi.n	800d3ca <enq_lock+0x26>
 800d3bc:	4a09      	ldr	r2, [pc, #36]	; (800d3e4 <enq_lock+0x40>)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	011b      	lsls	r3, r3, #4
 800d3c2:	4413      	add	r3, r2
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1f2      	bne.n	800d3b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	bf14      	ite	ne
 800d3d0:	2301      	movne	r3, #1
 800d3d2:	2300      	moveq	r3, #0
 800d3d4:	b2db      	uxtb	r3, r3
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	200002cc 	.word	0x200002cc

0800d3e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60fb      	str	r3, [r7, #12]
 800d3f6:	e01f      	b.n	800d438 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d3f8:	4a41      	ldr	r2, [pc, #260]	; (800d500 <inc_lock+0x118>)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	011b      	lsls	r3, r3, #4
 800d3fe:	4413      	add	r3, r2
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	429a      	cmp	r2, r3
 800d408:	d113      	bne.n	800d432 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d40a:	4a3d      	ldr	r2, [pc, #244]	; (800d500 <inc_lock+0x118>)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	011b      	lsls	r3, r3, #4
 800d410:	4413      	add	r3, r2
 800d412:	3304      	adds	r3, #4
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d109      	bne.n	800d432 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d41e:	4a38      	ldr	r2, [pc, #224]	; (800d500 <inc_lock+0x118>)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	4413      	add	r3, r2
 800d426:	3308      	adds	r3, #8
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d42e:	429a      	cmp	r2, r3
 800d430:	d006      	beq.n	800d440 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	3301      	adds	r3, #1
 800d436:	60fb      	str	r3, [r7, #12]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d9dc      	bls.n	800d3f8 <inc_lock+0x10>
 800d43e:	e000      	b.n	800d442 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d440:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b02      	cmp	r3, #2
 800d446:	d132      	bne.n	800d4ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d448:	2300      	movs	r3, #0
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	e002      	b.n	800d454 <inc_lock+0x6c>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3301      	adds	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2b01      	cmp	r3, #1
 800d458:	d806      	bhi.n	800d468 <inc_lock+0x80>
 800d45a:	4a29      	ldr	r2, [pc, #164]	; (800d500 <inc_lock+0x118>)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	011b      	lsls	r3, r3, #4
 800d460:	4413      	add	r3, r2
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1f2      	bne.n	800d44e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d101      	bne.n	800d472 <inc_lock+0x8a>
 800d46e:	2300      	movs	r3, #0
 800d470:	e040      	b.n	800d4f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	4922      	ldr	r1, [pc, #136]	; (800d500 <inc_lock+0x118>)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	440b      	add	r3, r1
 800d47e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	689a      	ldr	r2, [r3, #8]
 800d484:	491e      	ldr	r1, [pc, #120]	; (800d500 <inc_lock+0x118>)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	011b      	lsls	r3, r3, #4
 800d48a:	440b      	add	r3, r1
 800d48c:	3304      	adds	r3, #4
 800d48e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	695a      	ldr	r2, [r3, #20]
 800d494:	491a      	ldr	r1, [pc, #104]	; (800d500 <inc_lock+0x118>)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	011b      	lsls	r3, r3, #4
 800d49a:	440b      	add	r3, r1
 800d49c:	3308      	adds	r3, #8
 800d49e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d4a0:	4a17      	ldr	r2, [pc, #92]	; (800d500 <inc_lock+0x118>)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	011b      	lsls	r3, r3, #4
 800d4a6:	4413      	add	r3, r2
 800d4a8:	330c      	adds	r3, #12
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d009      	beq.n	800d4c8 <inc_lock+0xe0>
 800d4b4:	4a12      	ldr	r2, [pc, #72]	; (800d500 <inc_lock+0x118>)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	011b      	lsls	r3, r3, #4
 800d4ba:	4413      	add	r3, r2
 800d4bc:	330c      	adds	r3, #12
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <inc_lock+0xe0>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	e015      	b.n	800d4f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d108      	bne.n	800d4e0 <inc_lock+0xf8>
 800d4ce:	4a0c      	ldr	r2, [pc, #48]	; (800d500 <inc_lock+0x118>)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	011b      	lsls	r3, r3, #4
 800d4d4:	4413      	add	r3, r2
 800d4d6:	330c      	adds	r3, #12
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	b29a      	uxth	r2, r3
 800d4de:	e001      	b.n	800d4e4 <inc_lock+0xfc>
 800d4e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4e4:	4906      	ldr	r1, [pc, #24]	; (800d500 <inc_lock+0x118>)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	011b      	lsls	r3, r3, #4
 800d4ea:	440b      	add	r3, r1
 800d4ec:	330c      	adds	r3, #12
 800d4ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3301      	adds	r3, #1
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	200002cc 	.word	0x200002cc

0800d504 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	3b01      	subs	r3, #1
 800d510:	607b      	str	r3, [r7, #4]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d825      	bhi.n	800d564 <dec_lock+0x60>
		n = Files[i].ctr;
 800d518:	4a17      	ldr	r2, [pc, #92]	; (800d578 <dec_lock+0x74>)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	011b      	lsls	r3, r3, #4
 800d51e:	4413      	add	r3, r2
 800d520:	330c      	adds	r3, #12
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d526:	89fb      	ldrh	r3, [r7, #14]
 800d528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d52c:	d101      	bne.n	800d532 <dec_lock+0x2e>
 800d52e:	2300      	movs	r3, #0
 800d530:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d532:	89fb      	ldrh	r3, [r7, #14]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <dec_lock+0x3a>
 800d538:	89fb      	ldrh	r3, [r7, #14]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d53e:	4a0e      	ldr	r2, [pc, #56]	; (800d578 <dec_lock+0x74>)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	011b      	lsls	r3, r3, #4
 800d544:	4413      	add	r3, r2
 800d546:	330c      	adds	r3, #12
 800d548:	89fa      	ldrh	r2, [r7, #14]
 800d54a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d54c:	89fb      	ldrh	r3, [r7, #14]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d105      	bne.n	800d55e <dec_lock+0x5a>
 800d552:	4a09      	ldr	r2, [pc, #36]	; (800d578 <dec_lock+0x74>)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	011b      	lsls	r3, r3, #4
 800d558:	4413      	add	r3, r2
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	737b      	strb	r3, [r7, #13]
 800d562:	e001      	b.n	800d568 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d564:	2302      	movs	r3, #2
 800d566:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d568:	7b7b      	ldrb	r3, [r7, #13]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	200002cc 	.word	0x200002cc

0800d57c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d584:	2300      	movs	r3, #0
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	e010      	b.n	800d5ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d58a:	4a0d      	ldr	r2, [pc, #52]	; (800d5c0 <clear_lock+0x44>)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	011b      	lsls	r3, r3, #4
 800d590:	4413      	add	r3, r2
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	429a      	cmp	r2, r3
 800d598:	d105      	bne.n	800d5a6 <clear_lock+0x2a>
 800d59a:	4a09      	ldr	r2, [pc, #36]	; (800d5c0 <clear_lock+0x44>)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	011b      	lsls	r3, r3, #4
 800d5a0:	4413      	add	r3, r2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d9eb      	bls.n	800d58a <clear_lock+0xe>
	}
}
 800d5b2:	bf00      	nop
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	200002cc 	.word	0x200002cc

0800d5c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	78db      	ldrb	r3, [r3, #3]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d034      	beq.n	800d642 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	7858      	ldrb	r0, [r3, #1]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	697a      	ldr	r2, [r7, #20]
 800d5ec:	f7ff fd10 	bl	800d010 <disk_write>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d002      	beq.n	800d5fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	73fb      	strb	r3, [r7, #15]
 800d5fa:	e022      	b.n	800d642 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	1ad2      	subs	r2, r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d217      	bcs.n	800d642 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	789b      	ldrb	r3, [r3, #2]
 800d616:	613b      	str	r3, [r7, #16]
 800d618:	e010      	b.n	800d63c <sync_window+0x78>
					wsect += fs->fsize;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	69db      	ldr	r3, [r3, #28]
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	4413      	add	r3, r2
 800d622:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7858      	ldrb	r0, [r3, #1]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d62e:	2301      	movs	r3, #1
 800d630:	697a      	ldr	r2, [r7, #20]
 800d632:	f7ff fced 	bl	800d010 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	3b01      	subs	r3, #1
 800d63a:	613b      	str	r3, [r7, #16]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d8eb      	bhi.n	800d61a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d642:	7bfb      	ldrb	r3, [r7, #15]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3718      	adds	r7, #24
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d01b      	beq.n	800d69c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff ffad 	bl	800d5c4 <sync_window>
 800d66a:	4603      	mov	r3, r0
 800d66c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d113      	bne.n	800d69c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7858      	ldrb	r0, [r3, #1]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d67e:	2301      	movs	r3, #1
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	f7ff fca5 	bl	800cfd0 <disk_read>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d004      	beq.n	800d696 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d68c:	f04f 33ff 	mov.w	r3, #4294967295
 800d690:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d692:	2301      	movs	r3, #1
 800d694:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	683a      	ldr	r2, [r7, #0]
 800d69a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff ff87 	bl	800d5c4 <sync_window>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d6ba:	7bfb      	ldrb	r3, [r7, #15]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d158      	bne.n	800d772 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b03      	cmp	r3, #3
 800d6c6:	d148      	bne.n	800d75a <sync_fs+0xb2>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	791b      	ldrb	r3, [r3, #4]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d144      	bne.n	800d75a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3334      	adds	r3, #52	; 0x34
 800d6d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6d8:	2100      	movs	r1, #0
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff fd79 	bl	800d1d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	3334      	adds	r3, #52	; 0x34
 800d6e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff fd08 	bl	800d102 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	3334      	adds	r3, #52	; 0x34
 800d6f6:	4921      	ldr	r1, [pc, #132]	; (800d77c <sync_fs+0xd4>)
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fd1d 	bl	800d138 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3334      	adds	r3, #52	; 0x34
 800d702:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d706:	491e      	ldr	r1, [pc, #120]	; (800d780 <sync_fs+0xd8>)
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fd15 	bl	800d138 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3334      	adds	r3, #52	; 0x34
 800d712:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	4619      	mov	r1, r3
 800d71c:	4610      	mov	r0, r2
 800d71e:	f7ff fd0b 	bl	800d138 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	3334      	adds	r3, #52	; 0x34
 800d726:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	4619      	mov	r1, r3
 800d730:	4610      	mov	r0, r2
 800d732:	f7ff fd01 	bl	800d138 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	1c5a      	adds	r2, r3, #1
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	7858      	ldrb	r0, [r3, #1]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d74e:	2301      	movs	r3, #1
 800d750:	f7ff fc5e 	bl	800d010 <disk_write>
			fs->fsi_flag = 0;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	785b      	ldrb	r3, [r3, #1]
 800d75e:	2200      	movs	r2, #0
 800d760:	2100      	movs	r1, #0
 800d762:	4618      	mov	r0, r3
 800d764:	f7ff fc74 	bl	800d050 <disk_ioctl>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <sync_fs+0xca>
 800d76e:	2301      	movs	r3, #1
 800d770:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d772:	7bfb      	ldrb	r3, [r7, #15]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	41615252 	.word	0x41615252
 800d780:	61417272 	.word	0x61417272

0800d784 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	3b02      	subs	r3, #2
 800d792:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	3b02      	subs	r3, #2
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d301      	bcc.n	800d7a4 <clust2sect+0x20>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	e008      	b.n	800d7b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	895b      	ldrh	r3, [r3, #10]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	fb03 f202 	mul.w	r2, r3, r2
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	4413      	add	r3, r2
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b086      	sub	sp, #24
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
 800d7ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d904      	bls.n	800d7e2 <get_fat+0x20>
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d302      	bcc.n	800d7e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	617b      	str	r3, [r7, #20]
 800d7e6:	e08c      	b.n	800d902 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	2b02      	cmp	r3, #2
 800d7f4:	d045      	beq.n	800d882 <get_fat+0xc0>
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d05d      	beq.n	800d8b6 <get_fat+0xf4>
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d177      	bne.n	800d8ee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	085b      	lsrs	r3, r3, #1
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	4413      	add	r3, r2
 800d80a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	0a5b      	lsrs	r3, r3, #9
 800d814:	4413      	add	r3, r2
 800d816:	4619      	mov	r1, r3
 800d818:	6938      	ldr	r0, [r7, #16]
 800d81a:	f7ff ff17 	bl	800d64c <move_window>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d167      	bne.n	800d8f4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	60fa      	str	r2, [r7, #12]
 800d82a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d82e:	693a      	ldr	r2, [r7, #16]
 800d830:	4413      	add	r3, r2
 800d832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d836:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	0a5b      	lsrs	r3, r3, #9
 800d840:	4413      	add	r3, r2
 800d842:	4619      	mov	r1, r3
 800d844:	6938      	ldr	r0, [r7, #16]
 800d846:	f7ff ff01 	bl	800d64c <move_window>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d153      	bne.n	800d8f8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	4413      	add	r3, r2
 800d85a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d85e:	021b      	lsls	r3, r3, #8
 800d860:	461a      	mov	r2, r3
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	4313      	orrs	r3, r2
 800d866:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	f003 0301 	and.w	r3, r3, #1
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d002      	beq.n	800d878 <get_fat+0xb6>
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	091b      	lsrs	r3, r3, #4
 800d876:	e002      	b.n	800d87e <get_fat+0xbc>
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d87e:	617b      	str	r3, [r7, #20]
			break;
 800d880:	e03f      	b.n	800d902 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	0a1b      	lsrs	r3, r3, #8
 800d88a:	4413      	add	r3, r2
 800d88c:	4619      	mov	r1, r3
 800d88e:	6938      	ldr	r0, [r7, #16]
 800d890:	f7ff fedc 	bl	800d64c <move_window>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d130      	bne.n	800d8fc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	005b      	lsls	r3, r3, #1
 800d8a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d8a8:	4413      	add	r3, r2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff fbee 	bl	800d08c <ld_word>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	617b      	str	r3, [r7, #20]
			break;
 800d8b4:	e025      	b.n	800d902 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	09db      	lsrs	r3, r3, #7
 800d8be:	4413      	add	r3, r2
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	6938      	ldr	r0, [r7, #16]
 800d8c4:	f7ff fec2 	bl	800d64c <move_window>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d118      	bne.n	800d900 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8dc:	4413      	add	r3, r2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fbec 	bl	800d0bc <ld_dword>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d8ea:	617b      	str	r3, [r7, #20]
			break;
 800d8ec:	e009      	b.n	800d902 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	617b      	str	r3, [r7, #20]
 800d8f2:	e006      	b.n	800d902 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8f4:	bf00      	nop
 800d8f6:	e004      	b.n	800d902 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8f8:	bf00      	nop
 800d8fa:	e002      	b.n	800d902 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8fc:	bf00      	nop
 800d8fe:	e000      	b.n	800d902 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d900:	bf00      	nop
		}
	}

	return val;
 800d902:	697b      	ldr	r3, [r7, #20]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d90c:	b590      	push	{r4, r7, lr}
 800d90e:	b089      	sub	sp, #36	; 0x24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d918:	2302      	movs	r3, #2
 800d91a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	f240 80d6 	bls.w	800dad0 <put_fat+0x1c4>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	f080 80d0 	bcs.w	800dad0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b02      	cmp	r3, #2
 800d936:	d073      	beq.n	800da20 <put_fat+0x114>
 800d938:	2b03      	cmp	r3, #3
 800d93a:	f000 8091 	beq.w	800da60 <put_fat+0x154>
 800d93e:	2b01      	cmp	r3, #1
 800d940:	f040 80c6 	bne.w	800dad0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	61bb      	str	r3, [r7, #24]
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	085b      	lsrs	r3, r3, #1
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	4413      	add	r3, r2
 800d950:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	0a5b      	lsrs	r3, r3, #9
 800d95a:	4413      	add	r3, r2
 800d95c:	4619      	mov	r1, r3
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7ff fe74 	bl	800d64c <move_window>
 800d964:	4603      	mov	r3, r0
 800d966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d968:	7ffb      	ldrb	r3, [r7, #31]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f040 80a9 	bne.w	800dac2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	1c59      	adds	r1, r3, #1
 800d97a:	61b9      	str	r1, [r7, #24]
 800d97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d980:	4413      	add	r3, r2
 800d982:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00d      	beq.n	800d9aa <put_fat+0x9e>
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b25b      	sxtb	r3, r3
 800d994:	f003 030f 	and.w	r3, r3, #15
 800d998:	b25a      	sxtb	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	011b      	lsls	r3, r3, #4
 800d9a0:	b25b      	sxtb	r3, r3
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	b25b      	sxtb	r3, r3
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	e001      	b.n	800d9ae <put_fat+0xa2>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	0a5b      	lsrs	r3, r3, #9
 800d9c0:	4413      	add	r3, r2
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f7ff fe41 	bl	800d64c <move_window>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9ce:	7ffb      	ldrb	r3, [r7, #31]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d178      	bne.n	800dac6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e0:	4413      	add	r3, r2
 800d9e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	f003 0301 	and.w	r3, r3, #1
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d003      	beq.n	800d9f6 <put_fat+0xea>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	091b      	lsrs	r3, r3, #4
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	e00e      	b.n	800da14 <put_fat+0x108>
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	b25b      	sxtb	r3, r3
 800d9fc:	f023 030f 	bic.w	r3, r3, #15
 800da00:	b25a      	sxtb	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	0a1b      	lsrs	r3, r3, #8
 800da06:	b25b      	sxtb	r3, r3
 800da08:	f003 030f 	and.w	r3, r3, #15
 800da0c:	b25b      	sxtb	r3, r3
 800da0e:	4313      	orrs	r3, r2
 800da10:	b25b      	sxtb	r3, r3
 800da12:	b2db      	uxtb	r3, r3
 800da14:	697a      	ldr	r2, [r7, #20]
 800da16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2201      	movs	r2, #1
 800da1c:	70da      	strb	r2, [r3, #3]
			break;
 800da1e:	e057      	b.n	800dad0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	0a1b      	lsrs	r3, r3, #8
 800da28:	4413      	add	r3, r2
 800da2a:	4619      	mov	r1, r3
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f7ff fe0d 	bl	800d64c <move_window>
 800da32:	4603      	mov	r3, r0
 800da34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da36:	7ffb      	ldrb	r3, [r7, #31]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d146      	bne.n	800daca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	005b      	lsls	r3, r3, #1
 800da46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800da4a:	4413      	add	r3, r2
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	b292      	uxth	r2, r2
 800da50:	4611      	mov	r1, r2
 800da52:	4618      	mov	r0, r3
 800da54:	f7ff fb55 	bl	800d102 <st_word>
			fs->wflag = 1;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2201      	movs	r2, #1
 800da5c:	70da      	strb	r2, [r3, #3]
			break;
 800da5e:	e037      	b.n	800dad0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	09db      	lsrs	r3, r3, #7
 800da68:	4413      	add	r3, r2
 800da6a:	4619      	mov	r1, r3
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f7ff fded 	bl	800d64c <move_window>
 800da72:	4603      	mov	r3, r0
 800da74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da76:	7ffb      	ldrb	r3, [r7, #31]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d128      	bne.n	800dace <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da90:	4413      	add	r3, r2
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fb12 	bl	800d0bc <ld_dword>
 800da98:	4603      	mov	r3, r0
 800da9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da9e:	4323      	orrs	r3, r4
 800daa0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dab0:	4413      	add	r3, r2
 800dab2:	6879      	ldr	r1, [r7, #4]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7ff fb3f 	bl	800d138 <st_dword>
			fs->wflag = 1;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2201      	movs	r2, #1
 800dabe:	70da      	strb	r2, [r3, #3]
			break;
 800dac0:	e006      	b.n	800dad0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800dac2:	bf00      	nop
 800dac4:	e004      	b.n	800dad0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800dac6:	bf00      	nop
 800dac8:	e002      	b.n	800dad0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800daca:	bf00      	nop
 800dacc:	e000      	b.n	800dad0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800dace:	bf00      	nop
		}
	}
	return res;
 800dad0:	7ffb      	ldrb	r3, [r7, #31]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3724      	adds	r7, #36	; 0x24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd90      	pop	{r4, r7, pc}

0800dada <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b088      	sub	sp, #32
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d904      	bls.n	800db00 <remove_chain+0x26>
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d301      	bcc.n	800db04 <remove_chain+0x2a>
 800db00:	2302      	movs	r3, #2
 800db02:	e04b      	b.n	800db9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00c      	beq.n	800db24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800db0a:	f04f 32ff 	mov.w	r2, #4294967295
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	69b8      	ldr	r0, [r7, #24]
 800db12:	f7ff fefb 	bl	800d90c <put_fat>
 800db16:	4603      	mov	r3, r0
 800db18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800db1a:	7ffb      	ldrb	r3, [r7, #31]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <remove_chain+0x4a>
 800db20:	7ffb      	ldrb	r3, [r7, #31]
 800db22:	e03b      	b.n	800db9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f7ff fe4b 	bl	800d7c2 <get_fat>
 800db2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d031      	beq.n	800db98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d101      	bne.n	800db3e <remove_chain+0x64>
 800db3a:	2302      	movs	r3, #2
 800db3c:	e02e      	b.n	800db9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db44:	d101      	bne.n	800db4a <remove_chain+0x70>
 800db46:	2301      	movs	r3, #1
 800db48:	e028      	b.n	800db9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db4a:	2200      	movs	r2, #0
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	69b8      	ldr	r0, [r7, #24]
 800db50:	f7ff fedc 	bl	800d90c <put_fat>
 800db54:	4603      	mov	r3, r0
 800db56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db58:	7ffb      	ldrb	r3, [r7, #31]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <remove_chain+0x88>
 800db5e:	7ffb      	ldrb	r3, [r7, #31]
 800db60:	e01c      	b.n	800db9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	695a      	ldr	r2, [r3, #20]
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	3b02      	subs	r3, #2
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d20b      	bcs.n	800db88 <remove_chain+0xae>
			fs->free_clst++;
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	695b      	ldr	r3, [r3, #20]
 800db74:	1c5a      	adds	r2, r3, #1
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	791b      	ldrb	r3, [r3, #4]
 800db7e:	f043 0301 	orr.w	r3, r3, #1
 800db82:	b2da      	uxtb	r2, r3
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	429a      	cmp	r2, r3
 800db94:	d3c6      	bcc.n	800db24 <remove_chain+0x4a>
 800db96:	e000      	b.n	800db9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3720      	adds	r7, #32
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10d      	bne.n	800dbd6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d004      	beq.n	800dbd0 <create_chain+0x2c>
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	69ba      	ldr	r2, [r7, #24]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d31b      	bcc.n	800dc08 <create_chain+0x64>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	61bb      	str	r3, [r7, #24]
 800dbd4:	e018      	b.n	800dc08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff fdf2 	bl	800d7c2 <get_fat>
 800dbde:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d801      	bhi.n	800dbea <create_chain+0x46>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e070      	b.n	800dccc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf0:	d101      	bne.n	800dbf6 <create_chain+0x52>
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	e06a      	b.n	800dccc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d201      	bcs.n	800dc04 <create_chain+0x60>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	e063      	b.n	800dccc <create_chain+0x128>
		scl = clst;
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	699b      	ldr	r3, [r3, #24]
 800dc16:	69fa      	ldr	r2, [r7, #28]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d307      	bcc.n	800dc2c <create_chain+0x88>
				ncl = 2;
 800dc1c:	2302      	movs	r3, #2
 800dc1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d901      	bls.n	800dc2c <create_chain+0x88>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	e04f      	b.n	800dccc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dc2c:	69f9      	ldr	r1, [r7, #28]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7ff fdc7 	bl	800d7c2 <get_fat>
 800dc34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00e      	beq.n	800dc5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d003      	beq.n	800dc4a <create_chain+0xa6>
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc48:	d101      	bne.n	800dc4e <create_chain+0xaa>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	e03e      	b.n	800dccc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc4e:	69fa      	ldr	r2, [r7, #28]
 800dc50:	69bb      	ldr	r3, [r7, #24]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d1da      	bne.n	800dc0c <create_chain+0x68>
 800dc56:	2300      	movs	r3, #0
 800dc58:	e038      	b.n	800dccc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc60:	69f9      	ldr	r1, [r7, #28]
 800dc62:	6938      	ldr	r0, [r7, #16]
 800dc64:	f7ff fe52 	bl	800d90c <put_fat>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc6c:	7dfb      	ldrb	r3, [r7, #23]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d109      	bne.n	800dc86 <create_chain+0xe2>
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d006      	beq.n	800dc86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc78:	69fa      	ldr	r2, [r7, #28]
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	6938      	ldr	r0, [r7, #16]
 800dc7e:	f7ff fe45 	bl	800d90c <put_fat>
 800dc82:	4603      	mov	r3, r0
 800dc84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc86:	7dfb      	ldrb	r3, [r7, #23]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d116      	bne.n	800dcba <create_chain+0x116>
		fs->last_clst = ncl;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	69fa      	ldr	r2, [r7, #28]
 800dc90:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	695a      	ldr	r2, [r3, #20]
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	3b02      	subs	r3, #2
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d804      	bhi.n	800dcaa <create_chain+0x106>
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	695b      	ldr	r3, [r3, #20]
 800dca4:	1e5a      	subs	r2, r3, #1
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	791b      	ldrb	r3, [r3, #4]
 800dcae:	f043 0301 	orr.w	r3, r3, #1
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	711a      	strb	r2, [r3, #4]
 800dcb8:	e007      	b.n	800dcca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dcba:	7dfb      	ldrb	r3, [r7, #23]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d102      	bne.n	800dcc6 <create_chain+0x122>
 800dcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc4:	e000      	b.n	800dcc8 <create_chain+0x124>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dcca:	69fb      	ldr	r3, [r7, #28]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3720      	adds	r7, #32
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b087      	sub	sp, #28
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce8:	3304      	adds	r3, #4
 800dcea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	0a5b      	lsrs	r3, r3, #9
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	8952      	ldrh	r2, [r2, #10]
 800dcf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	1d1a      	adds	r2, r3, #4
 800dcfe:	613a      	str	r2, [r7, #16]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d101      	bne.n	800dd0e <clmt_clust+0x3a>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	e010      	b.n	800dd30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d307      	bcc.n	800dd26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	617b      	str	r3, [r7, #20]
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	3304      	adds	r3, #4
 800dd22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd24:	e7e9      	b.n	800dcfa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dd26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	4413      	add	r3, r2
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	371c      	adds	r7, #28
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd52:	d204      	bcs.n	800dd5e <dir_sdi+0x22>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	f003 031f 	and.w	r3, r3, #31
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd5e:	2302      	movs	r3, #2
 800dd60:	e063      	b.n	800de2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d106      	bne.n	800dd82 <dir_sdi+0x46>
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d902      	bls.n	800dd82 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10c      	bne.n	800dda2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	095b      	lsrs	r3, r3, #5
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	8912      	ldrh	r2, [r2, #8]
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d301      	bcc.n	800dd98 <dir_sdi+0x5c>
 800dd94:	2302      	movs	r3, #2
 800dd96:	e048      	b.n	800de2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	61da      	str	r2, [r3, #28]
 800dda0:	e029      	b.n	800ddf6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	895b      	ldrh	r3, [r3, #10]
 800dda6:	025b      	lsls	r3, r3, #9
 800dda8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddaa:	e019      	b.n	800dde0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6979      	ldr	r1, [r7, #20]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff fd06 	bl	800d7c2 <get_fat>
 800ddb6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddbe:	d101      	bne.n	800ddc4 <dir_sdi+0x88>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e032      	b.n	800de2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d904      	bls.n	800ddd4 <dir_sdi+0x98>
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d301      	bcc.n	800ddd8 <dir_sdi+0x9c>
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	e028      	b.n	800de2a <dir_sdi+0xee>
			ofs -= csz;
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d2e1      	bcs.n	800ddac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dde8:	6979      	ldr	r1, [r7, #20]
 800ddea:	6938      	ldr	r0, [r7, #16]
 800ddec:	f7ff fcca 	bl	800d784 <clust2sect>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	69db      	ldr	r3, [r3, #28]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d101      	bne.n	800de08 <dir_sdi+0xcc>
 800de04:	2302      	movs	r3, #2
 800de06:	e010      	b.n	800de2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	69da      	ldr	r2, [r3, #28]
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	0a5b      	lsrs	r3, r3, #9
 800de10:	441a      	add	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de22:	441a      	add	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3718      	adds	r7, #24
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b086      	sub	sp, #24
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	695b      	ldr	r3, [r3, #20]
 800de46:	3320      	adds	r3, #32
 800de48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	69db      	ldr	r3, [r3, #28]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d003      	beq.n	800de5a <dir_next+0x28>
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de58:	d301      	bcc.n	800de5e <dir_next+0x2c>
 800de5a:	2304      	movs	r3, #4
 800de5c:	e0aa      	b.n	800dfb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de64:	2b00      	cmp	r3, #0
 800de66:	f040 8098 	bne.w	800df9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10b      	bne.n	800de94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	095b      	lsrs	r3, r3, #5
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	8912      	ldrh	r2, [r2, #8]
 800de84:	4293      	cmp	r3, r2
 800de86:	f0c0 8088 	bcc.w	800df9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	61da      	str	r2, [r3, #28]
 800de90:	2304      	movs	r3, #4
 800de92:	e08f      	b.n	800dfb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	0a5b      	lsrs	r3, r3, #9
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	8952      	ldrh	r2, [r2, #10]
 800de9c:	3a01      	subs	r2, #1
 800de9e:	4013      	ands	r3, r2
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d17a      	bne.n	800df9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	699b      	ldr	r3, [r3, #24]
 800deaa:	4619      	mov	r1, r3
 800deac:	4610      	mov	r0, r2
 800deae:	f7ff fc88 	bl	800d7c2 <get_fat>
 800deb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d801      	bhi.n	800debe <dir_next+0x8c>
 800deba:	2302      	movs	r3, #2
 800debc:	e07a      	b.n	800dfb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec4:	d101      	bne.n	800deca <dir_next+0x98>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e074      	b.n	800dfb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	699b      	ldr	r3, [r3, #24]
 800dece:	697a      	ldr	r2, [r7, #20]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d358      	bcc.n	800df86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d104      	bne.n	800dee4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	61da      	str	r2, [r3, #28]
 800dee0:	2304      	movs	r3, #4
 800dee2:	e067      	b.n	800dfb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	699b      	ldr	r3, [r3, #24]
 800deea:	4619      	mov	r1, r3
 800deec:	4610      	mov	r0, r2
 800deee:	f7ff fe59 	bl	800dba4 <create_chain>
 800def2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d101      	bne.n	800defe <dir_next+0xcc>
 800defa:	2307      	movs	r3, #7
 800defc:	e05a      	b.n	800dfb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d101      	bne.n	800df08 <dir_next+0xd6>
 800df04:	2302      	movs	r3, #2
 800df06:	e055      	b.n	800dfb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d101      	bne.n	800df14 <dir_next+0xe2>
 800df10:	2301      	movs	r3, #1
 800df12:	e04f      	b.n	800dfb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f7ff fb55 	bl	800d5c4 <sync_window>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d001      	beq.n	800df24 <dir_next+0xf2>
 800df20:	2301      	movs	r3, #1
 800df22:	e047      	b.n	800dfb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3334      	adds	r3, #52	; 0x34
 800df28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df2c:	2100      	movs	r1, #0
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff f94f 	bl	800d1d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df34:	2300      	movs	r3, #0
 800df36:	613b      	str	r3, [r7, #16]
 800df38:	6979      	ldr	r1, [r7, #20]
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fc22 	bl	800d784 <clust2sect>
 800df40:	4602      	mov	r2, r0
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	631a      	str	r2, [r3, #48]	; 0x30
 800df46:	e012      	b.n	800df6e <dir_next+0x13c>
						fs->wflag = 1;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2201      	movs	r2, #1
 800df4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff fb38 	bl	800d5c4 <sync_window>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <dir_next+0x12c>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e02a      	b.n	800dfb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	3301      	adds	r3, #1
 800df62:	613b      	str	r3, [r7, #16]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	631a      	str	r2, [r3, #48]	; 0x30
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	895b      	ldrh	r3, [r3, #10]
 800df72:	461a      	mov	r2, r3
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	4293      	cmp	r3, r2
 800df78:	d3e6      	bcc.n	800df48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	1ad2      	subs	r2, r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df8c:	6979      	ldr	r1, [r7, #20]
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7ff fbf8 	bl	800d784 <clust2sect>
 800df94:	4602      	mov	r2, r0
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfac:	441a      	add	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dfcc:	2100      	movs	r1, #0
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff feb4 	bl	800dd3c <dir_sdi>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d12b      	bne.n	800e036 <dir_alloc+0x7a>
		n = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	69db      	ldr	r3, [r3, #28]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7ff fb2f 	bl	800d64c <move_window>
 800dfee:	4603      	mov	r3, r0
 800dff0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d11d      	bne.n	800e034 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a1b      	ldr	r3, [r3, #32]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	2be5      	cmp	r3, #229	; 0xe5
 800e000:	d004      	beq.n	800e00c <dir_alloc+0x50>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d107      	bne.n	800e01c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	3301      	adds	r3, #1
 800e010:	613b      	str	r3, [r7, #16]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	429a      	cmp	r2, r3
 800e018:	d102      	bne.n	800e020 <dir_alloc+0x64>
 800e01a:	e00c      	b.n	800e036 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e01c:	2300      	movs	r3, #0
 800e01e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e020:	2101      	movs	r1, #1
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff ff05 	bl	800de32 <dir_next>
 800e028:	4603      	mov	r3, r0
 800e02a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e02c:	7dfb      	ldrb	r3, [r7, #23]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d0d7      	beq.n	800dfe2 <dir_alloc+0x26>
 800e032:	e000      	b.n	800e036 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e034:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e036:	7dfb      	ldrb	r3, [r7, #23]
 800e038:	2b04      	cmp	r3, #4
 800e03a:	d101      	bne.n	800e040 <dir_alloc+0x84>
 800e03c:	2307      	movs	r3, #7
 800e03e:	75fb      	strb	r3, [r7, #23]
	return res;
 800e040:	7dfb      	ldrb	r3, [r7, #23]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3718      	adds	r7, #24
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b084      	sub	sp, #16
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	331a      	adds	r3, #26
 800e058:	4618      	mov	r0, r3
 800e05a:	f7ff f817 	bl	800d08c <ld_word>
 800e05e:	4603      	mov	r3, r0
 800e060:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	2b03      	cmp	r3, #3
 800e068:	d109      	bne.n	800e07e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	3314      	adds	r3, #20
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff f80c 	bl	800d08c <ld_word>
 800e074:	4603      	mov	r3, r0
 800e076:	041b      	lsls	r3, r3, #16
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e07e:	68fb      	ldr	r3, [r7, #12]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	331a      	adds	r3, #26
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	b292      	uxth	r2, r2
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7ff f82f 	bl	800d102 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	2b03      	cmp	r3, #3
 800e0aa:	d109      	bne.n	800e0c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	f103 0214 	add.w	r2, r3, #20
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	0c1b      	lsrs	r3, r3, #16
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	f7ff f821 	bl	800d102 <st_word>
	}
}
 800e0c0:	bf00      	nop
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e0d2:	2304      	movs	r3, #4
 800e0d4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e0dc:	e03c      	b.n	800e158 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6938      	ldr	r0, [r7, #16]
 800e0e6:	f7ff fab1 	bl	800d64c <move_window>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0ee:	7dfb      	ldrb	r3, [r7, #23]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d136      	bne.n	800e162 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a1b      	ldr	r3, [r3, #32]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e0fc:	7bfb      	ldrb	r3, [r7, #15]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e102:	2304      	movs	r3, #4
 800e104:	75fb      	strb	r3, [r7, #23]
 800e106:	e031      	b.n	800e16c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	330b      	adds	r3, #11
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e114:	73bb      	strb	r3, [r7, #14]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	7bba      	ldrb	r2, [r7, #14]
 800e11a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
 800e11e:	2be5      	cmp	r3, #229	; 0xe5
 800e120:	d011      	beq.n	800e146 <dir_read+0x7e>
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	2b2e      	cmp	r3, #46	; 0x2e
 800e126:	d00e      	beq.n	800e146 <dir_read+0x7e>
 800e128:	7bbb      	ldrb	r3, [r7, #14]
 800e12a:	2b0f      	cmp	r3, #15
 800e12c:	d00b      	beq.n	800e146 <dir_read+0x7e>
 800e12e:	7bbb      	ldrb	r3, [r7, #14]
 800e130:	f023 0320 	bic.w	r3, r3, #32
 800e134:	2b08      	cmp	r3, #8
 800e136:	bf0c      	ite	eq
 800e138:	2301      	moveq	r3, #1
 800e13a:	2300      	movne	r3, #0
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	461a      	mov	r2, r3
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	4293      	cmp	r3, r2
 800e144:	d00f      	beq.n	800e166 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e146:	2100      	movs	r1, #0
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff fe72 	bl	800de32 <dir_next>
 800e14e:	4603      	mov	r3, r0
 800e150:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e152:	7dfb      	ldrb	r3, [r7, #23]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d108      	bne.n	800e16a <dir_read+0xa2>
	while (dp->sect) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	69db      	ldr	r3, [r3, #28]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1be      	bne.n	800e0de <dir_read+0x16>
 800e160:	e004      	b.n	800e16c <dir_read+0xa4>
		if (res != FR_OK) break;
 800e162:	bf00      	nop
 800e164:	e002      	b.n	800e16c <dir_read+0xa4>
				break;
 800e166:	bf00      	nop
 800e168:	e000      	b.n	800e16c <dir_read+0xa4>
		if (res != FR_OK) break;
 800e16a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e16c:	7dfb      	ldrb	r3, [r7, #23]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <dir_read+0xb0>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	61da      	str	r2, [r3, #28]
	return res;
 800e178:	7dfb      	ldrb	r3, [r7, #23]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b086      	sub	sp, #24
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e190:	2100      	movs	r1, #0
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7ff fdd2 	bl	800dd3c <dir_sdi>
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e19c:	7dfb      	ldrb	r3, [r7, #23]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <dir_find+0x24>
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	e03e      	b.n	800e224 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	69db      	ldr	r3, [r3, #28]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6938      	ldr	r0, [r7, #16]
 800e1ae:	f7ff fa4d 	bl	800d64c <move_window>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d12f      	bne.n	800e21c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a1b      	ldr	r3, [r3, #32]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d102      	bne.n	800e1d0 <dir_find+0x4e>
 800e1ca:	2304      	movs	r3, #4
 800e1cc:	75fb      	strb	r3, [r7, #23]
 800e1ce:	e028      	b.n	800e222 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	330b      	adds	r3, #11
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a1b      	ldr	r3, [r3, #32]
 800e1e6:	330b      	adds	r3, #11
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	f003 0308 	and.w	r3, r3, #8
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10a      	bne.n	800e208 <dir_find+0x86>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a18      	ldr	r0, [r3, #32]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3324      	adds	r3, #36	; 0x24
 800e1fa:	220b      	movs	r2, #11
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	f7ff f802 	bl	800d206 <mem_cmp>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00b      	beq.n	800e220 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e208:	2100      	movs	r1, #0
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff fe11 	bl	800de32 <dir_next>
 800e210:	4603      	mov	r3, r0
 800e212:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e214:	7dfb      	ldrb	r3, [r7, #23]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d0c5      	beq.n	800e1a6 <dir_find+0x24>
 800e21a:	e002      	b.n	800e222 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e21c:	bf00      	nop
 800e21e:	e000      	b.n	800e222 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e220:	bf00      	nop

	return res;
 800e222:	7dfb      	ldrb	r3, [r7, #23]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e23a:	2101      	movs	r1, #1
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f7ff febd 	bl	800dfbc <dir_alloc>
 800e242:	4603      	mov	r3, r0
 800e244:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e246:	7bfb      	ldrb	r3, [r7, #15]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d11c      	bne.n	800e286 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	4619      	mov	r1, r3
 800e252:	68b8      	ldr	r0, [r7, #8]
 800e254:	f7ff f9fa 	bl	800d64c <move_window>
 800e258:	4603      	mov	r3, r0
 800e25a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d111      	bne.n	800e286 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	2220      	movs	r2, #32
 800e268:	2100      	movs	r1, #0
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe ffb1 	bl	800d1d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a18      	ldr	r0, [r3, #32]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	3324      	adds	r3, #36	; 0x24
 800e278:	220b      	movs	r2, #11
 800e27a:	4619      	mov	r1, r3
 800e27c:	f7fe ff88 	bl	800d190 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2201      	movs	r2, #1
 800e284:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e286:	7bfb      	ldrb	r3, [r7, #15]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	2200      	movs	r2, #0
 800e29e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	69db      	ldr	r3, [r3, #28]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d04e      	beq.n	800e346 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	613b      	str	r3, [r7, #16]
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e2b0:	e021      	b.n	800e2f6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a1a      	ldr	r2, [r3, #32]
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	1c59      	adds	r1, r3, #1
 800e2ba:	6179      	str	r1, [r7, #20]
 800e2bc:	4413      	add	r3, r2
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
 800e2c4:	2b20      	cmp	r3, #32
 800e2c6:	d100      	bne.n	800e2ca <get_fileinfo+0x3a>
 800e2c8:	e015      	b.n	800e2f6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e2ca:	7bfb      	ldrb	r3, [r7, #15]
 800e2cc:	2b05      	cmp	r3, #5
 800e2ce:	d101      	bne.n	800e2d4 <get_fileinfo+0x44>
 800e2d0:	23e5      	movs	r3, #229	; 0xe5
 800e2d2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2b09      	cmp	r3, #9
 800e2d8:	d106      	bne.n	800e2e8 <get_fileinfo+0x58>
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	613a      	str	r2, [r7, #16]
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	222e      	movs	r2, #46	; 0x2e
 800e2e6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	1c5a      	adds	r2, r3, #1
 800e2ec:	613a      	str	r2, [r7, #16]
 800e2ee:	683a      	ldr	r2, [r7, #0]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	7bfa      	ldrb	r2, [r7, #15]
 800e2f4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	2b0a      	cmp	r3, #10
 800e2fa:	d9da      	bls.n	800e2b2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e2fc:	683a      	ldr	r2, [r7, #0]
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	4413      	add	r3, r2
 800e302:	3309      	adds	r3, #9
 800e304:	2200      	movs	r2, #0
 800e306:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a1b      	ldr	r3, [r3, #32]
 800e30c:	7ada      	ldrb	r2, [r3, #11]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a1b      	ldr	r3, [r3, #32]
 800e316:	331c      	adds	r3, #28
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe fecf 	bl	800d0bc <ld_dword>
 800e31e:	4602      	mov	r2, r0
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a1b      	ldr	r3, [r3, #32]
 800e328:	3316      	adds	r3, #22
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe fec6 	bl	800d0bc <ld_dword>
 800e330:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	b29a      	uxth	r2, r3
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	80da      	strh	r2, [r3, #6]
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	0c1b      	lsrs	r3, r3, #16
 800e33e:	b29a      	uxth	r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	809a      	strh	r2, [r3, #4]
 800e344:	e000      	b.n	800e348 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e346:	bf00      	nop
}
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
	...

0800e350 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	1c59      	adds	r1, r3, #1
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	6011      	str	r1, [r2, #0]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e366:	89fb      	ldrh	r3, [r7, #14]
 800e368:	2b60      	cmp	r3, #96	; 0x60
 800e36a:	d905      	bls.n	800e378 <get_achar+0x28>
 800e36c:	89fb      	ldrh	r3, [r7, #14]
 800e36e:	2b7a      	cmp	r3, #122	; 0x7a
 800e370:	d802      	bhi.n	800e378 <get_achar+0x28>
 800e372:	89fb      	ldrh	r3, [r7, #14]
 800e374:	3b20      	subs	r3, #32
 800e376:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e378:	89fb      	ldrh	r3, [r7, #14]
 800e37a:	2b7f      	cmp	r3, #127	; 0x7f
 800e37c:	d904      	bls.n	800e388 <get_achar+0x38>
 800e37e:	89fb      	ldrh	r3, [r7, #14]
 800e380:	3b80      	subs	r3, #128	; 0x80
 800e382:	4a05      	ldr	r2, [pc, #20]	; (800e398 <get_achar+0x48>)
 800e384:	5cd3      	ldrb	r3, [r2, r3]
 800e386:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800e388:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3714      	adds	r7, #20
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	08016978 	.word	0x08016978

0800e39c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08a      	sub	sp, #40	; 0x28
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
 800e3a8:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e3aa:	e009      	b.n	800e3c0 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e3ac:	f107 0308 	add.w	r3, r7, #8
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff ffcd 	bl	800e350 <get_achar>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d101      	bne.n	800e3c0 <pattern_matching+0x24>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	e064      	b.n	800e48a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	1e5a      	subs	r2, r3, #1
 800e3c4:	607a      	str	r2, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1f0      	bne.n	800e3ac <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d104      	bne.n	800e3dc <pattern_matching+0x40>
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <pattern_matching+0x40>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e056      	b.n	800e48a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	617b      	str	r3, [r7, #20]
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	2b3f      	cmp	r3, #63	; 0x3f
 800e3ea:	d003      	beq.n	800e3f4 <pattern_matching+0x58>
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f2:	d126      	bne.n	800e442 <pattern_matching+0xa6>
				nm = nx = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	61fb      	str	r3, [r7, #28]
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	1c5a      	adds	r2, r3, #1
 800e400:	617a      	str	r2, [r7, #20]
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	2b3f      	cmp	r3, #63	; 0x3f
 800e406:	d103      	bne.n	800e410 <pattern_matching+0x74>
 800e408:	6a3b      	ldr	r3, [r7, #32]
 800e40a:	3301      	adds	r3, #1
 800e40c:	623b      	str	r3, [r7, #32]
 800e40e:	e001      	b.n	800e414 <pattern_matching+0x78>
 800e410:	2301      	movs	r3, #1
 800e412:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b3f      	cmp	r3, #63	; 0x3f
 800e41a:	d0ef      	beq.n	800e3fc <pattern_matching+0x60>
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	2b2a      	cmp	r3, #42	; 0x2a
 800e422:	d0eb      	beq.n	800e3fc <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e424:	6978      	ldr	r0, [r7, #20]
 800e426:	6939      	ldr	r1, [r7, #16]
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	6a3a      	ldr	r2, [r7, #32]
 800e42c:	f7ff ffb6 	bl	800e39c <pattern_matching>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <pattern_matching+0x9e>
 800e436:	2301      	movs	r3, #1
 800e438:	e027      	b.n	800e48a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e440:	e017      	b.n	800e472 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800e442:	f107 0314 	add.w	r3, r7, #20
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff ff82 	bl	800e350 <get_achar>
 800e44c:	4603      	mov	r3, r0
 800e44e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800e450:	f107 0310 	add.w	r3, r7, #16
 800e454:	4618      	mov	r0, r3
 800e456:	f7ff ff7b 	bl	800e350 <get_achar>
 800e45a:	4603      	mov	r3, r0
 800e45c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800e45e:	8b7a      	ldrh	r2, [r7, #26]
 800e460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e462:	429a      	cmp	r2, r3
 800e464:	d104      	bne.n	800e470 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e466:	8b7b      	ldrh	r3, [r7, #26]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1bb      	bne.n	800e3e4 <pattern_matching+0x48>
 800e46c:	2301      	movs	r3, #1
 800e46e:	e00c      	b.n	800e48a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800e470:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800e472:	f107 0308 	add.w	r3, r7, #8
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff ff6a 	bl	800e350 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d002      	beq.n	800e488 <pattern_matching+0xec>
 800e482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1a9      	bne.n	800e3dc <pattern_matching+0x40>

	return 0;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3728      	adds	r7, #40	; 0x28
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
	...

0800e494 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b088      	sub	sp, #32
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3324      	adds	r3, #36	; 0x24
 800e4a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e4aa:	220b      	movs	r2, #11
 800e4ac:	2120      	movs	r1, #32
 800e4ae:	68b8      	ldr	r0, [r7, #8]
 800e4b0:	f7fe fe8f 	bl	800d1d2 <mem_set>
	si = i = 0; ni = 8;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	613b      	str	r3, [r7, #16]
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	617b      	str	r3, [r7, #20]
 800e4bc:	2308      	movs	r3, #8
 800e4be:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	1c5a      	adds	r2, r3, #1
 800e4c4:	617a      	str	r2, [r7, #20]
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e4ce:	7ffb      	ldrb	r3, [r7, #31]
 800e4d0:	2b20      	cmp	r3, #32
 800e4d2:	d94e      	bls.n	800e572 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e4d4:	7ffb      	ldrb	r3, [r7, #31]
 800e4d6:	2b2f      	cmp	r3, #47	; 0x2f
 800e4d8:	d006      	beq.n	800e4e8 <create_name+0x54>
 800e4da:	7ffb      	ldrb	r3, [r7, #31]
 800e4dc:	2b5c      	cmp	r3, #92	; 0x5c
 800e4de:	d110      	bne.n	800e502 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e4e0:	e002      	b.n	800e4e8 <create_name+0x54>
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	617b      	str	r3, [r7, #20]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	2b2f      	cmp	r3, #47	; 0x2f
 800e4f2:	d0f6      	beq.n	800e4e2 <create_name+0x4e>
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b5c      	cmp	r3, #92	; 0x5c
 800e4fe:	d0f0      	beq.n	800e4e2 <create_name+0x4e>
			break;
 800e500:	e038      	b.n	800e574 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e502:	7ffb      	ldrb	r3, [r7, #31]
 800e504:	2b2e      	cmp	r3, #46	; 0x2e
 800e506:	d003      	beq.n	800e510 <create_name+0x7c>
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d30c      	bcc.n	800e52a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	2b0b      	cmp	r3, #11
 800e514:	d002      	beq.n	800e51c <create_name+0x88>
 800e516:	7ffb      	ldrb	r3, [r7, #31]
 800e518:	2b2e      	cmp	r3, #46	; 0x2e
 800e51a:	d001      	beq.n	800e520 <create_name+0x8c>
 800e51c:	2306      	movs	r3, #6
 800e51e:	e044      	b.n	800e5aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e520:	2308      	movs	r3, #8
 800e522:	613b      	str	r3, [r7, #16]
 800e524:	230b      	movs	r3, #11
 800e526:	61bb      	str	r3, [r7, #24]
			continue;
 800e528:	e022      	b.n	800e570 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e52a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	da04      	bge.n	800e53c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e532:	7ffb      	ldrb	r3, [r7, #31]
 800e534:	3b80      	subs	r3, #128	; 0x80
 800e536:	4a1f      	ldr	r2, [pc, #124]	; (800e5b4 <create_name+0x120>)
 800e538:	5cd3      	ldrb	r3, [r2, r3]
 800e53a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e53c:	7ffb      	ldrb	r3, [r7, #31]
 800e53e:	4619      	mov	r1, r3
 800e540:	481d      	ldr	r0, [pc, #116]	; (800e5b8 <create_name+0x124>)
 800e542:	f7fe fe87 	bl	800d254 <chk_chr>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <create_name+0xbc>
 800e54c:	2306      	movs	r3, #6
 800e54e:	e02c      	b.n	800e5aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e550:	7ffb      	ldrb	r3, [r7, #31]
 800e552:	2b60      	cmp	r3, #96	; 0x60
 800e554:	d905      	bls.n	800e562 <create_name+0xce>
 800e556:	7ffb      	ldrb	r3, [r7, #31]
 800e558:	2b7a      	cmp	r3, #122	; 0x7a
 800e55a:	d802      	bhi.n	800e562 <create_name+0xce>
 800e55c:	7ffb      	ldrb	r3, [r7, #31]
 800e55e:	3b20      	subs	r3, #32
 800e560:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	613a      	str	r2, [r7, #16]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	4413      	add	r3, r2
 800e56c:	7ffa      	ldrb	r2, [r7, #31]
 800e56e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e570:	e7a6      	b.n	800e4c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e572:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	441a      	add	r2, r3
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <create_name+0xf4>
 800e584:	2306      	movs	r3, #6
 800e586:	e010      	b.n	800e5aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2be5      	cmp	r3, #229	; 0xe5
 800e58e:	d102      	bne.n	800e596 <create_name+0x102>
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	2205      	movs	r2, #5
 800e594:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e596:	7ffb      	ldrb	r3, [r7, #31]
 800e598:	2b20      	cmp	r3, #32
 800e59a:	d801      	bhi.n	800e5a0 <create_name+0x10c>
 800e59c:	2204      	movs	r2, #4
 800e59e:	e000      	b.n	800e5a2 <create_name+0x10e>
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	330b      	adds	r3, #11
 800e5a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e5a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3720      	adds	r7, #32
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	08016978 	.word	0x08016978
 800e5b8:	080167ec 	.word	0x080167ec

0800e5bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b086      	sub	sp, #24
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e5d0:	e002      	b.n	800e5d8 <follow_path+0x1c>
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	2b2f      	cmp	r3, #47	; 0x2f
 800e5de:	d0f8      	beq.n	800e5d2 <follow_path+0x16>
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	2b5c      	cmp	r3, #92	; 0x5c
 800e5e6:	d0f4      	beq.n	800e5d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b1f      	cmp	r3, #31
 800e5f4:	d80a      	bhi.n	800e60c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2280      	movs	r2, #128	; 0x80
 800e5fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e5fe:	2100      	movs	r1, #0
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff fb9b 	bl	800dd3c <dir_sdi>
 800e606:	4603      	mov	r3, r0
 800e608:	75fb      	strb	r3, [r7, #23]
 800e60a:	e043      	b.n	800e694 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e60c:	463b      	mov	r3, r7
 800e60e:	4619      	mov	r1, r3
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff ff3f 	bl	800e494 <create_name>
 800e616:	4603      	mov	r3, r0
 800e618:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e61a:	7dfb      	ldrb	r3, [r7, #23]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d134      	bne.n	800e68a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7ff fdae 	bl	800e182 <dir_find>
 800e626:	4603      	mov	r3, r0
 800e628:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e630:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e632:	7dfb      	ldrb	r3, [r7, #23]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00a      	beq.n	800e64e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e638:	7dfb      	ldrb	r3, [r7, #23]
 800e63a:	2b04      	cmp	r3, #4
 800e63c:	d127      	bne.n	800e68e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e63e:	7afb      	ldrb	r3, [r7, #11]
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b00      	cmp	r3, #0
 800e646:	d122      	bne.n	800e68e <follow_path+0xd2>
 800e648:	2305      	movs	r3, #5
 800e64a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e64c:	e01f      	b.n	800e68e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e64e:	7afb      	ldrb	r3, [r7, #11]
 800e650:	f003 0304 	and.w	r3, r3, #4
 800e654:	2b00      	cmp	r3, #0
 800e656:	d11c      	bne.n	800e692 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	799b      	ldrb	r3, [r3, #6]
 800e65c:	f003 0310 	and.w	r3, r3, #16
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e664:	2305      	movs	r3, #5
 800e666:	75fb      	strb	r3, [r7, #23]
 800e668:	e014      	b.n	800e694 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e678:	4413      	add	r3, r2
 800e67a:	4619      	mov	r1, r3
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f7ff fce4 	bl	800e04a <ld_clust>
 800e682:	4602      	mov	r2, r0
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e688:	e7c0      	b.n	800e60c <follow_path+0x50>
			if (res != FR_OK) break;
 800e68a:	bf00      	nop
 800e68c:	e002      	b.n	800e694 <follow_path+0xd8>
				break;
 800e68e:	bf00      	nop
 800e690:	e000      	b.n	800e694 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e692:	bf00      	nop
			}
		}
	}

	return res;
 800e694:	7dfb      	ldrb	r3, [r7, #23]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b087      	sub	sp, #28
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d031      	beq.n	800e718 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	617b      	str	r3, [r7, #20]
 800e6ba:	e002      	b.n	800e6c2 <get_ldnumber+0x24>
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	2b20      	cmp	r3, #32
 800e6c8:	d903      	bls.n	800e6d2 <get_ldnumber+0x34>
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	2b3a      	cmp	r3, #58	; 0x3a
 800e6d0:	d1f4      	bne.n	800e6bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	2b3a      	cmp	r3, #58	; 0x3a
 800e6d8:	d11c      	bne.n	800e714 <get_ldnumber+0x76>
			tp = *path;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	1c5a      	adds	r2, r3, #1
 800e6e4:	60fa      	str	r2, [r7, #12]
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	3b30      	subs	r3, #48	; 0x30
 800e6ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	2b09      	cmp	r3, #9
 800e6f0:	d80e      	bhi.n	800e710 <get_ldnumber+0x72>
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d10a      	bne.n	800e710 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d107      	bne.n	800e710 <get_ldnumber+0x72>
					vol = (int)i;
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	3301      	adds	r3, #1
 800e708:	617b      	str	r3, [r7, #20]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	e002      	b.n	800e71a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e714:	2300      	movs	r3, #0
 800e716:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e718:	693b      	ldr	r3, [r7, #16]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
	...

0800e728 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	70da      	strb	r2, [r3, #3]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f04f 32ff 	mov.w	r2, #4294967295
 800e73e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7fe ff82 	bl	800d64c <move_window>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <check_fs+0x2a>
 800e74e:	2304      	movs	r3, #4
 800e750:	e038      	b.n	800e7c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	3334      	adds	r3, #52	; 0x34
 800e756:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fe fc96 	bl	800d08c <ld_word>
 800e760:	4603      	mov	r3, r0
 800e762:	461a      	mov	r2, r3
 800e764:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e768:	429a      	cmp	r2, r3
 800e76a:	d001      	beq.n	800e770 <check_fs+0x48>
 800e76c:	2303      	movs	r3, #3
 800e76e:	e029      	b.n	800e7c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e776:	2be9      	cmp	r3, #233	; 0xe9
 800e778:	d009      	beq.n	800e78e <check_fs+0x66>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e780:	2beb      	cmp	r3, #235	; 0xeb
 800e782:	d11e      	bne.n	800e7c2 <check_fs+0x9a>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e78a:	2b90      	cmp	r3, #144	; 0x90
 800e78c:	d119      	bne.n	800e7c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	3334      	adds	r3, #52	; 0x34
 800e792:	3336      	adds	r3, #54	; 0x36
 800e794:	4618      	mov	r0, r3
 800e796:	f7fe fc91 	bl	800d0bc <ld_dword>
 800e79a:	4603      	mov	r3, r0
 800e79c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e7a0:	4a0a      	ldr	r2, [pc, #40]	; (800e7cc <check_fs+0xa4>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d101      	bne.n	800e7aa <check_fs+0x82>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e00c      	b.n	800e7c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	3334      	adds	r3, #52	; 0x34
 800e7ae:	3352      	adds	r3, #82	; 0x52
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe fc83 	bl	800d0bc <ld_dword>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <check_fs+0xa8>)
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d101      	bne.n	800e7c2 <check_fs+0x9a>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e000      	b.n	800e7c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e7c2:	2302      	movs	r3, #2
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	00544146 	.word	0x00544146
 800e7d0:	33544146 	.word	0x33544146

0800e7d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b096      	sub	sp, #88	; 0x58
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f7ff ff58 	bl	800e69e <get_ldnumber>
 800e7ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	da01      	bge.n	800e7fa <find_volume+0x26>
 800e7f6:	230b      	movs	r3, #11
 800e7f8:	e236      	b.n	800ec68 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e7fa:	4aac      	ldr	r2, [pc, #688]	; (800eaac <find_volume+0x2d8>)
 800e7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e802:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <find_volume+0x3a>
 800e80a:	230c      	movs	r3, #12
 800e80c:	e22c      	b.n	800ec68 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e80e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e810:	f7fe fd3b 	bl	800d28a <lock_fs>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <find_volume+0x4a>
 800e81a:	230f      	movs	r3, #15
 800e81c:	e224      	b.n	800ec68 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e822:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e824:	79fb      	ldrb	r3, [r7, #7]
 800e826:	f023 0301 	bic.w	r3, r3, #1
 800e82a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d01a      	beq.n	800e86a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	785b      	ldrb	r3, [r3, #1]
 800e838:	4618      	mov	r0, r3
 800e83a:	f7fe fb89 	bl	800cf50 <disk_status>
 800e83e:	4603      	mov	r3, r0
 800e840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e848:	f003 0301 	and.w	r3, r3, #1
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10c      	bne.n	800e86a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e850:	79fb      	ldrb	r3, [r7, #7]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d007      	beq.n	800e866 <find_volume+0x92>
 800e856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e85a:	f003 0304 	and.w	r3, r3, #4
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e862:	230a      	movs	r3, #10
 800e864:	e200      	b.n	800ec68 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e866:	2300      	movs	r3, #0
 800e868:	e1fe      	b.n	800ec68 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86c:	2200      	movs	r2, #0
 800e86e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e872:	b2da      	uxtb	r2, r3
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	785b      	ldrb	r3, [r3, #1]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe fb81 	bl	800cf84 <disk_initialize>
 800e882:	4603      	mov	r3, r0
 800e884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e88c:	f003 0301 	and.w	r3, r3, #1
 800e890:	2b00      	cmp	r3, #0
 800e892:	d001      	beq.n	800e898 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e894:	2303      	movs	r3, #3
 800e896:	e1e7      	b.n	800ec68 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d007      	beq.n	800e8ae <find_volume+0xda>
 800e89e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8a2:	f003 0304 	and.w	r3, r3, #4
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e8aa:	230a      	movs	r3, #10
 800e8ac:	e1dc      	b.n	800ec68 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e8b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e8b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8b6:	f7ff ff37 	bl	800e728 <check_fs>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e8c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d14b      	bne.n	800e960 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	643b      	str	r3, [r7, #64]	; 0x40
 800e8cc:	e01f      	b.n	800e90e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d6:	011b      	lsls	r3, r3, #4
 800e8d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e8dc:	4413      	add	r3, r2
 800e8de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d006      	beq.n	800e8f8 <find_volume+0x124>
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fe fbe4 	bl	800d0bc <ld_dword>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	e000      	b.n	800e8fa <find_volume+0x126>
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e902:	440b      	add	r3, r1
 800e904:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e90a:	3301      	adds	r3, #1
 800e90c:	643b      	str	r3, [r7, #64]	; 0x40
 800e90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e910:	2b03      	cmp	r3, #3
 800e912:	d9dc      	bls.n	800e8ce <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e914:	2300      	movs	r3, #0
 800e916:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d002      	beq.n	800e924 <find_volume+0x150>
 800e91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e920:	3b01      	subs	r3, #1
 800e922:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e92c:	4413      	add	r3, r2
 800e92e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e932:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e936:	2b00      	cmp	r3, #0
 800e938:	d005      	beq.n	800e946 <find_volume+0x172>
 800e93a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e93c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e93e:	f7ff fef3 	bl	800e728 <check_fs>
 800e942:	4603      	mov	r3, r0
 800e944:	e000      	b.n	800e948 <find_volume+0x174>
 800e946:	2303      	movs	r3, #3
 800e948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e94c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e950:	2b01      	cmp	r3, #1
 800e952:	d905      	bls.n	800e960 <find_volume+0x18c>
 800e954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e956:	3301      	adds	r3, #1
 800e958:	643b      	str	r3, [r7, #64]	; 0x40
 800e95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e95c:	2b03      	cmp	r3, #3
 800e95e:	d9e1      	bls.n	800e924 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e964:	2b04      	cmp	r3, #4
 800e966:	d101      	bne.n	800e96c <find_volume+0x198>
 800e968:	2301      	movs	r3, #1
 800e96a:	e17d      	b.n	800ec68 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e96c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e970:	2b01      	cmp	r3, #1
 800e972:	d901      	bls.n	800e978 <find_volume+0x1a4>
 800e974:	230d      	movs	r3, #13
 800e976:	e177      	b.n	800ec68 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97a:	3334      	adds	r3, #52	; 0x34
 800e97c:	330b      	adds	r3, #11
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fe fb84 	bl	800d08c <ld_word>
 800e984:	4603      	mov	r3, r0
 800e986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e98a:	d001      	beq.n	800e990 <find_volume+0x1bc>
 800e98c:	230d      	movs	r3, #13
 800e98e:	e16b      	b.n	800ec68 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e992:	3334      	adds	r3, #52	; 0x34
 800e994:	3316      	adds	r3, #22
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fb78 	bl	800d08c <ld_word>
 800e99c:	4603      	mov	r3, r0
 800e99e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <find_volume+0x1e0>
 800e9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a8:	3334      	adds	r3, #52	; 0x34
 800e9aa:	3324      	adds	r3, #36	; 0x24
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fe fb85 	bl	800d0bc <ld_dword>
 800e9b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9b8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9bc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c6:	789b      	ldrb	r3, [r3, #2]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d005      	beq.n	800e9d8 <find_volume+0x204>
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	789b      	ldrb	r3, [r3, #2]
 800e9d0:	2b02      	cmp	r3, #2
 800e9d2:	d001      	beq.n	800e9d8 <find_volume+0x204>
 800e9d4:	230d      	movs	r3, #13
 800e9d6:	e147      	b.n	800ec68 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	789b      	ldrb	r3, [r3, #2]
 800e9dc:	461a      	mov	r2, r3
 800e9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9e0:	fb02 f303 	mul.w	r3, r2, r3
 800e9e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f4:	895b      	ldrh	r3, [r3, #10]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d008      	beq.n	800ea0c <find_volume+0x238>
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	895b      	ldrh	r3, [r3, #10]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea02:	895b      	ldrh	r3, [r3, #10]
 800ea04:	3b01      	subs	r3, #1
 800ea06:	4013      	ands	r3, r2
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <find_volume+0x23c>
 800ea0c:	230d      	movs	r3, #13
 800ea0e:	e12b      	b.n	800ec68 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	3334      	adds	r3, #52	; 0x34
 800ea14:	3311      	adds	r3, #17
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fe fb38 	bl	800d08c <ld_word>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	461a      	mov	r2, r3
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ea24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea26:	891b      	ldrh	r3, [r3, #8]
 800ea28:	f003 030f 	and.w	r3, r3, #15
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <find_volume+0x262>
 800ea32:	230d      	movs	r3, #13
 800ea34:	e118      	b.n	800ec68 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	3334      	adds	r3, #52	; 0x34
 800ea3a:	3313      	adds	r3, #19
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fe fb25 	bl	800d08c <ld_word>
 800ea42:	4603      	mov	r3, r0
 800ea44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d106      	bne.n	800ea5a <find_volume+0x286>
 800ea4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4e:	3334      	adds	r3, #52	; 0x34
 800ea50:	3320      	adds	r3, #32
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fe fb32 	bl	800d0bc <ld_dword>
 800ea58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ea5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5c:	3334      	adds	r3, #52	; 0x34
 800ea5e:	330e      	adds	r3, #14
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fe fb13 	bl	800d08c <ld_word>
 800ea66:	4603      	mov	r3, r0
 800ea68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ea6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <find_volume+0x2a0>
 800ea70:	230d      	movs	r3, #13
 800ea72:	e0f9      	b.n	800ec68 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ea74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea78:	4413      	add	r3, r2
 800ea7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea7c:	8912      	ldrh	r2, [r2, #8]
 800ea7e:	0912      	lsrs	r2, r2, #4
 800ea80:	b292      	uxth	r2, r2
 800ea82:	4413      	add	r3, r2
 800ea84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ea86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d201      	bcs.n	800ea92 <find_volume+0x2be>
 800ea8e:	230d      	movs	r3, #13
 800ea90:	e0ea      	b.n	800ec68 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ea92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea9a:	8952      	ldrh	r2, [r2, #10]
 800ea9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaa0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d103      	bne.n	800eab0 <find_volume+0x2dc>
 800eaa8:	230d      	movs	r3, #13
 800eaaa:	e0dd      	b.n	800ec68 <find_volume+0x494>
 800eaac:	200002c4 	.word	0x200002c4
		fmt = FS_FAT32;
 800eab0:	2303      	movs	r3, #3
 800eab2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d802      	bhi.n	800eac6 <find_volume+0x2f2>
 800eac0:	2302      	movs	r3, #2
 800eac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eacc:	4293      	cmp	r3, r2
 800eace:	d802      	bhi.n	800ead6 <find_volume+0x302>
 800ead0:	2301      	movs	r3, #1
 800ead2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ead6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead8:	1c9a      	adds	r2, r3, #2
 800eada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eadc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eae2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eae8:	441a      	add	r2, r3
 800eaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaec:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eaee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	441a      	add	r2, r3
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eaf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eafc:	2b03      	cmp	r3, #3
 800eafe:	d11e      	bne.n	800eb3e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb02:	3334      	adds	r3, #52	; 0x34
 800eb04:	332a      	adds	r3, #42	; 0x2a
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fe fac0 	bl	800d08c <ld_word>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <find_volume+0x342>
 800eb12:	230d      	movs	r3, #13
 800eb14:	e0a8      	b.n	800ec68 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb18:	891b      	ldrh	r3, [r3, #8]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <find_volume+0x34e>
 800eb1e:	230d      	movs	r3, #13
 800eb20:	e0a2      	b.n	800ec68 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb24:	3334      	adds	r3, #52	; 0x34
 800eb26:	332c      	adds	r3, #44	; 0x2c
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fe fac7 	bl	800d0bc <ld_dword>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb3c:	e01f      	b.n	800eb7e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb40:	891b      	ldrh	r3, [r3, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d101      	bne.n	800eb4a <find_volume+0x376>
 800eb46:	230d      	movs	r3, #13
 800eb48:	e08e      	b.n	800ec68 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb50:	441a      	add	r2, r3
 800eb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb54:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eb56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb5a:	2b02      	cmp	r3, #2
 800eb5c:	d103      	bne.n	800eb66 <find_volume+0x392>
 800eb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb60:	699b      	ldr	r3, [r3, #24]
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	e00a      	b.n	800eb7c <find_volume+0x3a8>
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	699a      	ldr	r2, [r3, #24]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	4413      	add	r3, r2
 800eb70:	085a      	lsrs	r2, r3, #1
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eb7c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	69da      	ldr	r2, [r3, #28]
 800eb82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eb88:	0a5b      	lsrs	r3, r3, #9
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d201      	bcs.n	800eb92 <find_volume+0x3be>
 800eb8e:	230d      	movs	r3, #13
 800eb90:	e06a      	b.n	800ec68 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb94:	f04f 32ff 	mov.w	r2, #4294967295
 800eb98:	615a      	str	r2, [r3, #20]
 800eb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9c:	695a      	ldr	r2, [r3, #20]
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba4:	2280      	movs	r2, #128	; 0x80
 800eba6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebac:	2b03      	cmp	r3, #3
 800ebae:	d149      	bne.n	800ec44 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb2:	3334      	adds	r3, #52	; 0x34
 800ebb4:	3330      	adds	r3, #48	; 0x30
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fe fa68 	bl	800d08c <ld_word>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d140      	bne.n	800ec44 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ebc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebca:	f7fe fd3f 	bl	800d64c <move_window>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d137      	bne.n	800ec44 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	3334      	adds	r3, #52	; 0x34
 800ebde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fe fa52 	bl	800d08c <ld_word>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	461a      	mov	r2, r3
 800ebec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d127      	bne.n	800ec44 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	3334      	adds	r3, #52	; 0x34
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fe fa5f 	bl	800d0bc <ld_dword>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	4b1b      	ldr	r3, [pc, #108]	; (800ec70 <find_volume+0x49c>)
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d11e      	bne.n	800ec44 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec08:	3334      	adds	r3, #52	; 0x34
 800ec0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe fa54 	bl	800d0bc <ld_dword>
 800ec14:	4602      	mov	r2, r0
 800ec16:	4b17      	ldr	r3, [pc, #92]	; (800ec74 <find_volume+0x4a0>)
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d113      	bne.n	800ec44 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	3334      	adds	r3, #52	; 0x34
 800ec20:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fe fa49 	bl	800d0bc <ld_dword>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec32:	3334      	adds	r3, #52	; 0x34
 800ec34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fe fa3f 	bl	800d0bc <ld_dword>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec42:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec4a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec4c:	4b0a      	ldr	r3, [pc, #40]	; (800ec78 <find_volume+0x4a4>)
 800ec4e:	881b      	ldrh	r3, [r3, #0]
 800ec50:	3301      	adds	r3, #1
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	4b08      	ldr	r3, [pc, #32]	; (800ec78 <find_volume+0x4a4>)
 800ec56:	801a      	strh	r2, [r3, #0]
 800ec58:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <find_volume+0x4a4>)
 800ec5a:	881a      	ldrh	r2, [r3, #0]
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ec60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec62:	f7fe fc8b 	bl	800d57c <clear_lock>
#endif
	return FR_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3758      	adds	r7, #88	; 0x58
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	41615252 	.word	0x41615252
 800ec74:	61417272 	.word	0x61417272
 800ec78:	200002c8 	.word	0x200002c8

0800ec7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ec86:	2309      	movs	r3, #9
 800ec88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d02e      	beq.n	800ecee <validate+0x72>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d02a      	beq.n	800ecee <validate+0x72>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d025      	beq.n	800ecee <validate+0x72>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	889a      	ldrh	r2, [r3, #4]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	88db      	ldrh	r3, [r3, #6]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d11e      	bne.n	800ecee <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fe fae8 	bl	800d28a <lock_fs>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d014      	beq.n	800ecea <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	785b      	ldrb	r3, [r3, #1]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe f942 	bl	800cf50 <disk_status>
 800eccc:	4603      	mov	r3, r0
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d102      	bne.n	800ecdc <validate+0x60>
				res = FR_OK;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	73fb      	strb	r3, [r7, #15]
 800ecda:	e008      	b.n	800ecee <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2100      	movs	r1, #0
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fe fae7 	bl	800d2b6 <unlock_fs>
 800ece8:	e001      	b.n	800ecee <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ecea:	230f      	movs	r3, #15
 800ecec:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <validate+0x7e>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	e000      	b.n	800ecfc <validate+0x80>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	6013      	str	r3, [r2, #0]
	return res;
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3710      	adds	r7, #16
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
	...

0800ed0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b088      	sub	sp, #32
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	4613      	mov	r3, r2
 800ed18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed1e:	f107 0310 	add.w	r3, r7, #16
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7ff fcbb 	bl	800e69e <get_ldnumber>
 800ed28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	da01      	bge.n	800ed34 <f_mount+0x28>
 800ed30:	230b      	movs	r3, #11
 800ed32:	e048      	b.n	800edc6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed34:	4a26      	ldr	r2, [pc, #152]	; (800edd0 <f_mount+0xc4>)
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00f      	beq.n	800ed64 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ed44:	69b8      	ldr	r0, [r7, #24]
 800ed46:	f7fe fc19 	bl	800d57c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ed4a:	69bb      	ldr	r3, [r7, #24]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f001 f828 	bl	800fda4 <ff_del_syncobj>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <f_mount+0x52>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	e033      	b.n	800edc6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	2200      	movs	r2, #0
 800ed62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00f      	beq.n	800ed8a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	330c      	adds	r3, #12
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4610      	mov	r0, r2
 800ed7c:	f000 fff7 	bl	800fd6e <ff_cre_syncobj>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <f_mount+0x7e>
 800ed86:	2302      	movs	r3, #2
 800ed88:	e01d      	b.n	800edc6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	4910      	ldr	r1, [pc, #64]	; (800edd0 <f_mount+0xc4>)
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <f_mount+0x94>
 800ed9a:	79fb      	ldrb	r3, [r7, #7]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d001      	beq.n	800eda4 <f_mount+0x98>
 800eda0:	2300      	movs	r3, #0
 800eda2:	e010      	b.n	800edc6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eda4:	f107 010c 	add.w	r1, r7, #12
 800eda8:	f107 0308 	add.w	r3, r7, #8
 800edac:	2200      	movs	r2, #0
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff fd10 	bl	800e7d4 <find_volume>
 800edb4:	4603      	mov	r3, r0
 800edb6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	7dfa      	ldrb	r2, [r7, #23]
 800edbc:	4611      	mov	r1, r2
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe fa79 	bl	800d2b6 <unlock_fs>
 800edc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3720      	adds	r7, #32
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	200002c4 	.word	0x200002c4

0800edd4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b09a      	sub	sp, #104	; 0x68
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	4613      	mov	r3, r2
 800ede0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d101      	bne.n	800edec <f_open+0x18>
 800ede8:	2309      	movs	r3, #9
 800edea:	e1b4      	b.n	800f156 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800edec:	79fb      	ldrb	r3, [r7, #7]
 800edee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edf2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800edf4:	79fa      	ldrb	r2, [r7, #7]
 800edf6:	f107 0114 	add.w	r1, r7, #20
 800edfa:	f107 0308 	add.w	r3, r7, #8
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7ff fce8 	bl	800e7d4 <find_volume>
 800ee04:	4603      	mov	r3, r0
 800ee06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ee0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f040 8191 	bne.w	800f136 <f_open+0x362>
		dj.obj.fs = fs;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee18:	68ba      	ldr	r2, [r7, #8]
 800ee1a:	f107 0318 	add.w	r3, r7, #24
 800ee1e:	4611      	mov	r1, r2
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7ff fbcb 	bl	800e5bc <follow_path>
 800ee26:	4603      	mov	r3, r0
 800ee28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d11a      	bne.n	800ee6a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee38:	b25b      	sxtb	r3, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	da03      	bge.n	800ee46 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee3e:	2306      	movs	r3, #6
 800ee40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee44:	e011      	b.n	800ee6a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee46:	79fb      	ldrb	r3, [r7, #7]
 800ee48:	f023 0301 	bic.w	r3, r3, #1
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	bf14      	ite	ne
 800ee50:	2301      	movne	r3, #1
 800ee52:	2300      	moveq	r3, #0
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	461a      	mov	r2, r3
 800ee58:	f107 0318 	add.w	r3, r7, #24
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fe fa44 	bl	800d2ec <chk_lock>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	f003 031c 	and.w	r3, r3, #28
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d07f      	beq.n	800ef74 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ee74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d017      	beq.n	800eeac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee80:	2b04      	cmp	r3, #4
 800ee82:	d10e      	bne.n	800eea2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee84:	f7fe fa8e 	bl	800d3a4 <enq_lock>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d006      	beq.n	800ee9c <f_open+0xc8>
 800ee8e:	f107 0318 	add.w	r3, r7, #24
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff f9ca 	bl	800e22c <dir_register>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	e000      	b.n	800ee9e <f_open+0xca>
 800ee9c:	2312      	movs	r3, #18
 800ee9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	f043 0308 	orr.w	r3, r3, #8
 800eea8:	71fb      	strb	r3, [r7, #7]
 800eeaa:	e010      	b.n	800eece <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eeac:	7fbb      	ldrb	r3, [r7, #30]
 800eeae:	f003 0311 	and.w	r3, r3, #17
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d003      	beq.n	800eebe <f_open+0xea>
					res = FR_DENIED;
 800eeb6:	2307      	movs	r3, #7
 800eeb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eebc:	e007      	b.n	800eece <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	f003 0304 	and.w	r3, r3, #4
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <f_open+0xfa>
 800eec8:	2308      	movs	r3, #8
 800eeca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d168      	bne.n	800efa8 <f_open+0x1d4>
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	f003 0308 	and.w	r3, r3, #8
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d063      	beq.n	800efa8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eee0:	f7fc f9b4 	bl	800b24c <get_fattime>
 800eee4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	330e      	adds	r3, #14
 800eeea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fe f923 	bl	800d138 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef4:	3316      	adds	r3, #22
 800eef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7fe f91d 	bl	800d138 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef00:	330b      	adds	r3, #11
 800ef02:	2220      	movs	r2, #32
 800ef04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff f89c 	bl	800e04a <ld_clust>
 800ef12:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef18:	2200      	movs	r2, #0
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff f8b4 	bl	800e088 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	331c      	adds	r3, #28
 800ef24:	2100      	movs	r1, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fe f906 	bl	800d138 <st_dword>
					fs->wflag = 1;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d037      	beq.n	800efa8 <f_open+0x1d4>
						dw = fs->winsect;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ef3e:	f107 0318 	add.w	r3, r7, #24
 800ef42:	2200      	movs	r2, #0
 800ef44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fe fdc7 	bl	800dada <remove_chain>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ef52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d126      	bne.n	800efa8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe fb74 	bl	800d64c <move_window>
 800ef64:	4603      	mov	r3, r0
 800ef66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef6e:	3a01      	subs	r2, #1
 800ef70:	611a      	str	r2, [r3, #16]
 800ef72:	e019      	b.n	800efa8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d115      	bne.n	800efa8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef7c:	7fbb      	ldrb	r3, [r7, #30]
 800ef7e:	f003 0310 	and.w	r3, r3, #16
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ef86:	2304      	movs	r3, #4
 800ef88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ef8c:	e00c      	b.n	800efa8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef8e:	79fb      	ldrb	r3, [r7, #7]
 800ef90:	f003 0302 	and.w	r3, r3, #2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d007      	beq.n	800efa8 <f_open+0x1d4>
 800ef98:	7fbb      	ldrb	r3, [r7, #30]
 800ef9a:	f003 0301 	and.w	r3, r3, #1
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <f_open+0x1d4>
						res = FR_DENIED;
 800efa2:	2307      	movs	r3, #7
 800efa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800efa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efac:	2b00      	cmp	r3, #0
 800efae:	d128      	bne.n	800f002 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	f003 0308 	and.w	r3, r3, #8
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d003      	beq.n	800efc2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800efba:	79fb      	ldrb	r3, [r7, #7]
 800efbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efc0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800efca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efd0:	79fb      	ldrb	r3, [r7, #7]
 800efd2:	f023 0301 	bic.w	r3, r3, #1
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	bf14      	ite	ne
 800efda:	2301      	movne	r3, #1
 800efdc:	2300      	moveq	r3, #0
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	461a      	mov	r2, r3
 800efe2:	f107 0318 	add.w	r3, r7, #24
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fe f9fd 	bl	800d3e8 <inc_lock>
 800efee:	4602      	mov	r2, r0
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <f_open+0x22e>
 800effc:	2302      	movs	r3, #2
 800effe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f002:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f006:	2b00      	cmp	r3, #0
 800f008:	f040 8095 	bne.w	800f136 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f010:	4611      	mov	r1, r2
 800f012:	4618      	mov	r0, r3
 800f014:	f7ff f819 	bl	800e04a <ld_clust>
 800f018:	4602      	mov	r2, r0
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f020:	331c      	adds	r3, #28
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe f84a 	bl	800d0bc <ld_dword>
 800f028:	4602      	mov	r2, r0
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	88da      	ldrh	r2, [r3, #6]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	79fa      	ldrb	r2, [r7, #7]
 800f046:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2200      	movs	r2, #0
 800f04c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2200      	movs	r2, #0
 800f058:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3330      	adds	r3, #48	; 0x30
 800f05e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f062:	2100      	movs	r1, #0
 800f064:	4618      	mov	r0, r3
 800f066:	f7fe f8b4 	bl	800d1d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f06a:	79fb      	ldrb	r3, [r7, #7]
 800f06c:	f003 0320 	and.w	r3, r3, #32
 800f070:	2b00      	cmp	r3, #0
 800f072:	d060      	beq.n	800f136 <f_open+0x362>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d05c      	beq.n	800f136 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	68da      	ldr	r2, [r3, #12]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	895b      	ldrh	r3, [r3, #10]
 800f088:	025b      	lsls	r3, r3, #9
 800f08a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f098:	e016      	b.n	800f0c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe fb8f 	bl	800d7c2 <get_fat>
 800f0a4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d802      	bhi.n	800f0b2 <f_open+0x2de>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f0b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b8:	d102      	bne.n	800f0c0 <f_open+0x2ec>
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0c4:	1ad3      	subs	r3, r2, r3
 800f0c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d103      	bne.n	800f0d8 <f_open+0x304>
 800f0d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d8e0      	bhi.n	800f09a <f_open+0x2c6>
				}
				fp->clust = clst;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f0de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d127      	bne.n	800f136 <f_open+0x362>
 800f0e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d022      	beq.n	800f136 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fe fb45 	bl	800d784 <clust2sect>
 800f0fa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d103      	bne.n	800f10a <f_open+0x336>
						res = FR_INT_ERR;
 800f102:	2302      	movs	r3, #2
 800f104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f108:	e015      	b.n	800f136 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f10a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f10c:	0a5a      	lsrs	r2, r3, #9
 800f10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f110:	441a      	add	r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	7858      	ldrb	r0, [r3, #1]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	6a1a      	ldr	r2, [r3, #32]
 800f124:	2301      	movs	r3, #1
 800f126:	f7fd ff53 	bl	800cfd0 <disk_read>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d002      	beq.n	800f136 <f_open+0x362>
 800f130:	2301      	movs	r3, #1
 800f132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d002      	beq.n	800f144 <f_open+0x370>
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2200      	movs	r2, #0
 800f142:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fe f8b2 	bl	800d2b6 <unlock_fs>
 800f152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f156:	4618      	mov	r0, r3
 800f158:	3768      	adds	r7, #104	; 0x68
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b08c      	sub	sp, #48	; 0x30
 800f162:	af00      	add	r7, sp, #0
 800f164:	60f8      	str	r0, [r7, #12]
 800f166:	60b9      	str	r1, [r7, #8]
 800f168:	607a      	str	r2, [r7, #4]
 800f16a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f107 0210 	add.w	r2, r7, #16
 800f17c:	4611      	mov	r1, r2
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff fd7c 	bl	800ec7c <validate>
 800f184:	4603      	mov	r3, r0
 800f186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f18a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d107      	bne.n	800f1a2 <f_write+0x44>
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	7d5b      	ldrb	r3, [r3, #21]
 800f196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f19a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d009      	beq.n	800f1b6 <f_write+0x58>
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fe f883 	bl	800d2b6 <unlock_fs>
 800f1b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1b4:	e173      	b.n	800f49e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ba:	f003 0302 	and.w	r3, r3, #2
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d106      	bne.n	800f1d0 <f_write+0x72>
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2107      	movs	r1, #7
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fe f875 	bl	800d2b6 <unlock_fs>
 800f1cc:	2307      	movs	r3, #7
 800f1ce:	e166      	b.n	800f49e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	699a      	ldr	r2, [r3, #24]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	441a      	add	r2, r3
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	f080 814b 	bcs.w	800f478 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	43db      	mvns	r3, r3
 800f1e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f1ea:	e145      	b.n	800f478 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	699b      	ldr	r3, [r3, #24]
 800f1f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f040 8101 	bne.w	800f3fc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	699b      	ldr	r3, [r3, #24]
 800f1fe:	0a5b      	lsrs	r3, r3, #9
 800f200:	693a      	ldr	r2, [r7, #16]
 800f202:	8952      	ldrh	r2, [r2, #10]
 800f204:	3a01      	subs	r2, #1
 800f206:	4013      	ands	r3, r2
 800f208:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d14d      	bne.n	800f2ac <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10c      	bne.n	800f232 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f220:	2b00      	cmp	r3, #0
 800f222:	d11a      	bne.n	800f25a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2100      	movs	r1, #0
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fe fcbb 	bl	800dba4 <create_chain>
 800f22e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f230:	e013      	b.n	800f25a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f236:	2b00      	cmp	r3, #0
 800f238:	d007      	beq.n	800f24a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	699b      	ldr	r3, [r3, #24]
 800f23e:	4619      	mov	r1, r3
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7fe fd47 	bl	800dcd4 <clmt_clust>
 800f246:	62b8      	str	r0, [r7, #40]	; 0x28
 800f248:	e007      	b.n	800f25a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	69db      	ldr	r3, [r3, #28]
 800f250:	4619      	mov	r1, r3
 800f252:	4610      	mov	r0, r2
 800f254:	f7fe fca6 	bl	800dba4 <create_chain>
 800f258:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 8110 	beq.w	800f482 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	2b01      	cmp	r3, #1
 800f266:	d109      	bne.n	800f27c <f_write+0x11e>
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2202      	movs	r2, #2
 800f26c:	755a      	strb	r2, [r3, #21]
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	2102      	movs	r1, #2
 800f272:	4618      	mov	r0, r3
 800f274:	f7fe f81f 	bl	800d2b6 <unlock_fs>
 800f278:	2302      	movs	r3, #2
 800f27a:	e110      	b.n	800f49e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f282:	d109      	bne.n	800f298 <f_write+0x13a>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2201      	movs	r2, #1
 800f288:	755a      	strb	r2, [r3, #21]
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	2101      	movs	r1, #1
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fe f811 	bl	800d2b6 <unlock_fs>
 800f294:	2301      	movs	r3, #1
 800f296:	e102      	b.n	800f49e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f29c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d102      	bne.n	800f2ac <f_write+0x14e>
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	7d1b      	ldrb	r3, [r3, #20]
 800f2b0:	b25b      	sxtb	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	da1d      	bge.n	800f2f2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	7858      	ldrb	r0, [r3, #1]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6a1a      	ldr	r2, [r3, #32]
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	f7fd fea3 	bl	800d010 <disk_write>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d009      	beq.n	800f2e4 <f_write+0x186>
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	755a      	strb	r2, [r3, #21]
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2101      	movs	r1, #1
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fd ffeb 	bl	800d2b6 <unlock_fs>
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e0dc      	b.n	800f49e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	7d1b      	ldrb	r3, [r3, #20]
 800f2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	69db      	ldr	r3, [r3, #28]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f7fe fa42 	bl	800d784 <clust2sect>
 800f300:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d109      	bne.n	800f31c <f_write+0x1be>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2202      	movs	r2, #2
 800f30c:	755a      	strb	r2, [r3, #21]
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	2102      	movs	r1, #2
 800f312:	4618      	mov	r0, r3
 800f314:	f7fd ffcf 	bl	800d2b6 <unlock_fs>
 800f318:	2302      	movs	r3, #2
 800f31a:	e0c0      	b.n	800f49e <f_write+0x340>
			sect += csect;
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	4413      	add	r3, r2
 800f322:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	0a5b      	lsrs	r3, r3, #9
 800f328:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d041      	beq.n	800f3b4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f330:	69ba      	ldr	r2, [r7, #24]
 800f332:	6a3b      	ldr	r3, [r7, #32]
 800f334:	4413      	add	r3, r2
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	8952      	ldrh	r2, [r2, #10]
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d905      	bls.n	800f34a <f_write+0x1ec>
					cc = fs->csize - csect;
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	895b      	ldrh	r3, [r3, #10]
 800f342:	461a      	mov	r2, r3
 800f344:	69bb      	ldr	r3, [r7, #24]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	7858      	ldrb	r0, [r3, #1]
 800f34e:	6a3b      	ldr	r3, [r7, #32]
 800f350:	697a      	ldr	r2, [r7, #20]
 800f352:	69f9      	ldr	r1, [r7, #28]
 800f354:	f7fd fe5c 	bl	800d010 <disk_write>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d009      	beq.n	800f372 <f_write+0x214>
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2201      	movs	r2, #1
 800f362:	755a      	strb	r2, [r3, #21]
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2101      	movs	r1, #1
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fd ffa4 	bl	800d2b6 <unlock_fs>
 800f36e:	2301      	movs	r3, #1
 800f370:	e095      	b.n	800f49e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6a1a      	ldr	r2, [r3, #32]
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	6a3a      	ldr	r2, [r7, #32]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d915      	bls.n	800f3ac <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	6a1a      	ldr	r2, [r3, #32]
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	025b      	lsls	r3, r3, #9
 800f390:	69fa      	ldr	r2, [r7, #28]
 800f392:	4413      	add	r3, r2
 800f394:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f398:	4619      	mov	r1, r3
 800f39a:	f7fd fef9 	bl	800d190 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	7d1b      	ldrb	r3, [r3, #20]
 800f3a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3a6:	b2da      	uxtb	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
 800f3ae:	025b      	lsls	r3, r3, #9
 800f3b0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f3b2:	e044      	b.n	800f43e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	697a      	ldr	r2, [r7, #20]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d01b      	beq.n	800f3f6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	699a      	ldr	r2, [r3, #24]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d215      	bcs.n	800f3f6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	7858      	ldrb	r0, [r3, #1]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	f7fd fdfa 	bl	800cfd0 <disk_read>
 800f3dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d009      	beq.n	800f3f6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	755a      	strb	r2, [r3, #21]
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fd ff62 	bl	800d2b6 <unlock_fs>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e053      	b.n	800f49e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	697a      	ldr	r2, [r7, #20]
 800f3fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f404:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f408:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d901      	bls.n	800f416 <f_write+0x2b8>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	699b      	ldr	r3, [r3, #24]
 800f420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f424:	4413      	add	r3, r2
 800f426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f428:	69f9      	ldr	r1, [r7, #28]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fd feb0 	bl	800d190 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	7d1b      	ldrb	r3, [r3, #20]
 800f434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f438:	b2da      	uxtb	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f43e:	69fa      	ldr	r2, [r7, #28]
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	4413      	add	r3, r2
 800f444:	61fb      	str	r3, [r7, #28]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	699a      	ldr	r2, [r3, #24]
 800f44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44c:	441a      	add	r2, r3
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	619a      	str	r2, [r3, #24]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	68da      	ldr	r2, [r3, #12]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	699b      	ldr	r3, [r3, #24]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	bf38      	it	cc
 800f45e:	461a      	movcc	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	60da      	str	r2, [r3, #12]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	441a      	add	r2, r3
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f474:	1ad3      	subs	r3, r2, r3
 800f476:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f47f aeb6 	bne.w	800f1ec <f_write+0x8e>
 800f480:	e000      	b.n	800f484 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f482:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	7d1b      	ldrb	r3, [r3, #20]
 800f488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f48c:	b2da      	uxtb	r2, r3
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	2100      	movs	r1, #0
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd ff0d 	bl	800d2b6 <unlock_fs>
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3730      	adds	r7, #48	; 0x30
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b086      	sub	sp, #24
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f107 0208 	add.w	r2, r7, #8
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff fbe0 	bl	800ec7c <validate>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4c0:	7dfb      	ldrb	r3, [r7, #23]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d16d      	bne.n	800f5a2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	7d1b      	ldrb	r3, [r3, #20]
 800f4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d067      	beq.n	800f5a2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	7d1b      	ldrb	r3, [r3, #20]
 800f4d6:	b25b      	sxtb	r3, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	da1a      	bge.n	800f512 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	7858      	ldrb	r0, [r3, #1]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a1a      	ldr	r2, [r3, #32]
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	f7fd fd90 	bl	800d010 <disk_write>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d006      	beq.n	800f504 <f_sync+0x5e>
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	2101      	movs	r1, #1
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fd fedb 	bl	800d2b6 <unlock_fs>
 800f500:	2301      	movs	r3, #1
 800f502:	e055      	b.n	800f5b0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	7d1b      	ldrb	r3, [r3, #20]
 800f508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f50c:	b2da      	uxtb	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f512:	f7fb fe9b 	bl	800b24c <get_fattime>
 800f516:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f518:	68ba      	ldr	r2, [r7, #8]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51e:	4619      	mov	r1, r3
 800f520:	4610      	mov	r0, r2
 800f522:	f7fe f893 	bl	800d64c <move_window>
 800f526:	4603      	mov	r3, r0
 800f528:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f52a:	7dfb      	ldrb	r3, [r7, #23]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d138      	bne.n	800f5a2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f534:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	330b      	adds	r3, #11
 800f53a:	781a      	ldrb	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	330b      	adds	r3, #11
 800f540:	f042 0220 	orr.w	r2, r2, #32
 800f544:	b2d2      	uxtb	r2, r2
 800f546:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6818      	ldr	r0, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	461a      	mov	r2, r3
 800f552:	68f9      	ldr	r1, [r7, #12]
 800f554:	f7fe fd98 	bl	800e088 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f103 021c 	add.w	r2, r3, #28
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	4619      	mov	r1, r3
 800f564:	4610      	mov	r0, r2
 800f566:	f7fd fde7 	bl	800d138 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	3316      	adds	r3, #22
 800f56e:	6939      	ldr	r1, [r7, #16]
 800f570:	4618      	mov	r0, r3
 800f572:	f7fd fde1 	bl	800d138 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3312      	adds	r3, #18
 800f57a:	2100      	movs	r1, #0
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fd fdc0 	bl	800d102 <st_word>
					fs->wflag = 1;
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	2201      	movs	r2, #1
 800f586:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe f88c 	bl	800d6a8 <sync_fs>
 800f590:	4603      	mov	r3, r0
 800f592:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	7d1b      	ldrb	r3, [r3, #20]
 800f598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f59c:	b2da      	uxtb	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	7dfa      	ldrb	r2, [r7, #23]
 800f5a6:	4611      	mov	r1, r2
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fd fe84 	bl	800d2b6 <unlock_fs>
 800f5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3718      	adds	r7, #24
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b090      	sub	sp, #64	; 0x40
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f107 0208 	add.w	r2, r7, #8
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7ff fb56 	bl	800ec7c <validate>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f5d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d103      	bne.n	800f5e6 <f_lseek+0x2e>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	7d5b      	ldrb	r3, [r3, #21]
 800f5e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f5e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d009      	beq.n	800f602 <f_lseek+0x4a>
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fd fe5d 	bl	800d2b6 <unlock_fs>
 800f5fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f600:	e229      	b.n	800fa56 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f606:	2b00      	cmp	r3, #0
 800f608:	f000 80ea 	beq.w	800f7e0 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f612:	d164      	bne.n	800f6de <f_lseek+0x126>
			tbl = fp->cltbl;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f618:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	1d1a      	adds	r2, r3, #4
 800f61e:	627a      	str	r2, [r7, #36]	; 0x24
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	617b      	str	r3, [r7, #20]
 800f624:	2302      	movs	r3, #2
 800f626:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	2b00      	cmp	r3, #0
 800f632:	d044      	beq.n	800f6be <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f636:	613b      	str	r3, [r7, #16]
 800f638:	2300      	movs	r3, #0
 800f63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63e:	3302      	adds	r3, #2
 800f640:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f648:	3301      	adds	r3, #1
 800f64a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f650:	4618      	mov	r0, r3
 800f652:	f7fe f8b6 	bl	800d7c2 <get_fat>
 800f656:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d809      	bhi.n	800f672 <f_lseek+0xba>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2202      	movs	r2, #2
 800f662:	755a      	strb	r2, [r3, #21]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	2102      	movs	r1, #2
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fd fe24 	bl	800d2b6 <unlock_fs>
 800f66e:	2302      	movs	r3, #2
 800f670:	e1f1      	b.n	800fa56 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f678:	d109      	bne.n	800f68e <f_lseek+0xd6>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2201      	movs	r2, #1
 800f67e:	755a      	strb	r2, [r3, #21]
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	2101      	movs	r1, #1
 800f684:	4618      	mov	r0, r3
 800f686:	f7fd fe16 	bl	800d2b6 <unlock_fs>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e1e3      	b.n	800fa56 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	3301      	adds	r3, #1
 800f692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f694:	429a      	cmp	r2, r3
 800f696:	d0d4      	beq.n	800f642 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d809      	bhi.n	800f6b4 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a2:	1d1a      	adds	r2, r3, #4
 800f6a4:	627a      	str	r2, [r7, #36]	; 0x24
 800f6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a8:	601a      	str	r2, [r3, #0]
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	1d1a      	adds	r2, r3, #4
 800f6ae:	627a      	str	r2, [r7, #36]	; 0x24
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	699b      	ldr	r3, [r3, #24]
 800f6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d3ba      	bcc.n	800f634 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6c4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d803      	bhi.n	800f6d6 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	601a      	str	r2, [r3, #0]
 800f6d4:	e1b6      	b.n	800fa44 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f6d6:	2311      	movs	r3, #17
 800f6d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f6dc:	e1b2      	b.n	800fa44 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	68db      	ldr	r3, [r3, #12]
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d902      	bls.n	800f6ee <f_lseek+0x136>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	f000 81a4 	beq.w	800fa44 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	3b01      	subs	r3, #1
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7fe fae6 	bl	800dcd4 <clmt_clust>
 800f708:	4602      	mov	r2, r0
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	69db      	ldr	r3, [r3, #28]
 800f714:	4619      	mov	r1, r3
 800f716:	4610      	mov	r0, r2
 800f718:	f7fe f834 	bl	800d784 <clust2sect>
 800f71c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d109      	bne.n	800f738 <f_lseek+0x180>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2202      	movs	r2, #2
 800f728:	755a      	strb	r2, [r3, #21]
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	2102      	movs	r1, #2
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fd fdc1 	bl	800d2b6 <unlock_fs>
 800f734:	2302      	movs	r3, #2
 800f736:	e18e      	b.n	800fa56 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	3b01      	subs	r3, #1
 800f73c:	0a5b      	lsrs	r3, r3, #9
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	8952      	ldrh	r2, [r2, #10]
 800f742:	3a01      	subs	r2, #1
 800f744:	4013      	ands	r3, r2
 800f746:	69ba      	ldr	r2, [r7, #24]
 800f748:	4413      	add	r3, r2
 800f74a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	699b      	ldr	r3, [r3, #24]
 800f750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f754:	2b00      	cmp	r3, #0
 800f756:	f000 8175 	beq.w	800fa44 <f_lseek+0x48c>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	69ba      	ldr	r2, [r7, #24]
 800f760:	429a      	cmp	r2, r3
 800f762:	f000 816f 	beq.w	800fa44 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	7d1b      	ldrb	r3, [r3, #20]
 800f76a:	b25b      	sxtb	r3, r3
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	da1d      	bge.n	800f7ac <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	7858      	ldrb	r0, [r3, #1]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a1a      	ldr	r2, [r3, #32]
 800f77e:	2301      	movs	r3, #1
 800f780:	f7fd fc46 	bl	800d010 <disk_write>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d009      	beq.n	800f79e <f_lseek+0x1e6>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2201      	movs	r2, #1
 800f78e:	755a      	strb	r2, [r3, #21]
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	2101      	movs	r1, #1
 800f794:	4618      	mov	r0, r3
 800f796:	f7fd fd8e 	bl	800d2b6 <unlock_fs>
 800f79a:	2301      	movs	r3, #1
 800f79c:	e15b      	b.n	800fa56 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	7d1b      	ldrb	r3, [r3, #20]
 800f7a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	7858      	ldrb	r0, [r3, #1]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	69ba      	ldr	r2, [r7, #24]
 800f7ba:	f7fd fc09 	bl	800cfd0 <disk_read>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d009      	beq.n	800f7d8 <f_lseek+0x220>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	755a      	strb	r2, [r3, #21]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fd fd71 	bl	800d2b6 <unlock_fs>
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e13e      	b.n	800fa56 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	621a      	str	r2, [r3, #32]
 800f7de:	e131      	b.n	800fa44 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	683a      	ldr	r2, [r7, #0]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d908      	bls.n	800f7fc <f_lseek+0x244>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	7d1b      	ldrb	r3, [r3, #20]
 800f7ee:	f003 0302 	and.w	r3, r3, #2
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d102      	bne.n	800f7fc <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	699b      	ldr	r3, [r3, #24]
 800f800:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	637b      	str	r3, [r7, #52]	; 0x34
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f80a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	f000 80c0 	beq.w	800f994 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	895b      	ldrh	r3, [r3, #10]
 800f818:	025b      	lsls	r3, r3, #9
 800f81a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d01b      	beq.n	800f85a <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	1e5a      	subs	r2, r3, #1
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	fbb2 f2f3 	udiv	r2, r2, r3
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	1e59      	subs	r1, r3, #1
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f836:	429a      	cmp	r2, r3
 800f838:	d30f      	bcc.n	800f85a <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	1e5a      	subs	r2, r3, #1
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	425b      	negs	r3, r3
 800f842:	401a      	ands	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	699b      	ldr	r3, [r3, #24]
 800f84c:	683a      	ldr	r2, [r7, #0]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	69db      	ldr	r3, [r3, #28]
 800f856:	63bb      	str	r3, [r7, #56]	; 0x38
 800f858:	e02c      	b.n	800f8b4 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f862:	2b00      	cmp	r3, #0
 800f864:	d123      	bne.n	800f8ae <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2100      	movs	r1, #0
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fe f99a 	bl	800dba4 <create_chain>
 800f870:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	2b01      	cmp	r3, #1
 800f876:	d109      	bne.n	800f88c <f_lseek+0x2d4>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2202      	movs	r2, #2
 800f87c:	755a      	strb	r2, [r3, #21]
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	2102      	movs	r1, #2
 800f882:	4618      	mov	r0, r3
 800f884:	f7fd fd17 	bl	800d2b6 <unlock_fs>
 800f888:	2302      	movs	r3, #2
 800f88a:	e0e4      	b.n	800fa56 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f892:	d109      	bne.n	800f8a8 <f_lseek+0x2f0>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	755a      	strb	r2, [r3, #21]
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2101      	movs	r1, #1
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fd fd09 	bl	800d2b6 <unlock_fs>
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	e0d6      	b.n	800fa56 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8ac:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8b2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d06c      	beq.n	800f994 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800f8ba:	e044      	b.n	800f946 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800f8bc:	683a      	ldr	r2, [r7, #0]
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	603b      	str	r3, [r7, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	699a      	ldr	r2, [r3, #24]
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	441a      	add	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	7d1b      	ldrb	r3, [r3, #20]
 800f8d4:	f003 0302 	and.w	r3, r3, #2
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00b      	beq.n	800f8f4 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fe f95f 	bl	800dba4 <create_chain>
 800f8e6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d108      	bne.n	800f900 <f_lseek+0x348>
							ofs = 0; break;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	603b      	str	r3, [r7, #0]
 800f8f2:	e02c      	b.n	800f94e <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fd ff62 	bl	800d7c2 <get_fat>
 800f8fe:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f906:	d109      	bne.n	800f91c <f_lseek+0x364>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2201      	movs	r2, #1
 800f90c:	755a      	strb	r2, [r3, #21]
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2101      	movs	r1, #1
 800f912:	4618      	mov	r0, r3
 800f914:	f7fd fccf 	bl	800d2b6 <unlock_fs>
 800f918:	2301      	movs	r3, #1
 800f91a:	e09c      	b.n	800fa56 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d904      	bls.n	800f92c <f_lseek+0x374>
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	699b      	ldr	r3, [r3, #24]
 800f926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f928:	429a      	cmp	r2, r3
 800f92a:	d309      	bcc.n	800f940 <f_lseek+0x388>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2202      	movs	r2, #2
 800f930:	755a      	strb	r2, [r3, #21]
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	2102      	movs	r1, #2
 800f936:	4618      	mov	r0, r3
 800f938:	f7fd fcbd 	bl	800d2b6 <unlock_fs>
 800f93c:	2302      	movs	r3, #2
 800f93e:	e08a      	b.n	800fa56 <f_lseek+0x49e>
					fp->clust = clst;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f944:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f946:	683a      	ldr	r2, [r7, #0]
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d8b6      	bhi.n	800f8bc <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	699a      	ldr	r2, [r3, #24]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	441a      	add	r2, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f960:	2b00      	cmp	r3, #0
 800f962:	d017      	beq.n	800f994 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fd ff0b 	bl	800d784 <clust2sect>
 800f96e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f972:	2b00      	cmp	r3, #0
 800f974:	d109      	bne.n	800f98a <f_lseek+0x3d2>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2202      	movs	r2, #2
 800f97a:	755a      	strb	r2, [r3, #21]
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2102      	movs	r1, #2
 800f980:	4618      	mov	r0, r3
 800f982:	f7fd fc98 	bl	800d2b6 <unlock_fs>
 800f986:	2302      	movs	r3, #2
 800f988:	e065      	b.n	800fa56 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	0a5b      	lsrs	r3, r3, #9
 800f98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f990:	4413      	add	r3, r2
 800f992:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	699a      	ldr	r2, [r3, #24]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d90a      	bls.n	800f9b6 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	699a      	ldr	r2, [r3, #24]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	7d1b      	ldrb	r3, [r3, #20]
 800f9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9b0:	b2da      	uxtb	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	699b      	ldr	r3, [r3, #24]
 800f9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d040      	beq.n	800fa44 <f_lseek+0x48c>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a1b      	ldr	r3, [r3, #32]
 800f9c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d03b      	beq.n	800fa44 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	7d1b      	ldrb	r3, [r3, #20]
 800f9d0:	b25b      	sxtb	r3, r3
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	da1d      	bge.n	800fa12 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	7858      	ldrb	r0, [r3, #1]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a1a      	ldr	r2, [r3, #32]
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	f7fd fb13 	bl	800d010 <disk_write>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d009      	beq.n	800fa04 <f_lseek+0x44c>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	755a      	strb	r2, [r3, #21]
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	2101      	movs	r1, #1
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fd fc5b 	bl	800d2b6 <unlock_fs>
 800fa00:	2301      	movs	r3, #1
 800fa02:	e028      	b.n	800fa56 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	7d1b      	ldrb	r3, [r3, #20]
 800fa08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa0c:	b2da      	uxtb	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	7858      	ldrb	r0, [r3, #1]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa20:	f7fd fad6 	bl	800cfd0 <disk_read>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d009      	beq.n	800fa3e <f_lseek+0x486>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	755a      	strb	r2, [r3, #21]
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2101      	movs	r1, #1
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fd fc3e 	bl	800d2b6 <unlock_fs>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e00b      	b.n	800fa56 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa42:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fd fc32 	bl	800d2b6 <unlock_fs>
 800fa52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3740      	adds	r7, #64	; 0x40
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b086      	sub	sp, #24
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d101      	bne.n	800fa72 <f_opendir+0x14>
 800fa6e:	2309      	movs	r3, #9
 800fa70:	e06a      	b.n	800fb48 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800fa76:	f107 010c 	add.w	r1, r7, #12
 800fa7a:	463b      	mov	r3, r7
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fe fea8 	bl	800e7d4 <find_volume>
 800fa84:	4603      	mov	r3, r0
 800fa86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fa88:	7dfb      	ldrb	r3, [r7, #23]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d14f      	bne.n	800fb2e <f_opendir+0xd0>
		obj->fs = fs;
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	4619      	mov	r1, r3
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7fe fd8f 	bl	800e5bc <follow_path>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d13d      	bne.n	800fb24 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800faae:	b25b      	sxtb	r3, r3
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	db12      	blt.n	800fada <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	799b      	ldrb	r3, [r3, #6]
 800fab8:	f003 0310 	and.w	r3, r3, #16
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00a      	beq.n	800fad6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6a1b      	ldr	r3, [r3, #32]
 800fac6:	4619      	mov	r1, r3
 800fac8:	4610      	mov	r0, r2
 800faca:	f7fe fabe 	bl	800e04a <ld_clust>
 800face:	4602      	mov	r2, r0
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	609a      	str	r2, [r3, #8]
 800fad4:	e001      	b.n	800fada <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fad6:	2305      	movs	r3, #5
 800fad8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fada:	7dfb      	ldrb	r3, [r7, #23]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d121      	bne.n	800fb24 <f_opendir+0xc6>
				obj->id = fs->id;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	88da      	ldrh	r2, [r3, #6]
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fae8:	2100      	movs	r1, #0
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7fe f926 	bl	800dd3c <dir_sdi>
 800faf0:	4603      	mov	r3, r0
 800faf2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800faf4:	7dfb      	ldrb	r3, [r7, #23]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d114      	bne.n	800fb24 <f_opendir+0xc6>
					if (obj->sclust) {
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00d      	beq.n	800fb1e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fb02:	2100      	movs	r1, #0
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7fd fc6f 	bl	800d3e8 <inc_lock>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	691b      	ldr	r3, [r3, #16]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d105      	bne.n	800fb24 <f_opendir+0xc6>
 800fb18:	2312      	movs	r3, #18
 800fb1a:	75fb      	strb	r3, [r7, #23]
 800fb1c:	e002      	b.n	800fb24 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	2200      	movs	r2, #0
 800fb22:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
 800fb26:	2b04      	cmp	r3, #4
 800fb28:	d101      	bne.n	800fb2e <f_opendir+0xd0>
 800fb2a:	2305      	movs	r3, #5
 800fb2c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d002      	beq.n	800fb3a <f_opendir+0xdc>
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	2200      	movs	r2, #0
 800fb38:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	7dfa      	ldrb	r2, [r7, #23]
 800fb3e:	4611      	mov	r1, r2
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fd fbb8 	bl	800d2b6 <unlock_fs>
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3718      	adds	r7, #24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f107 0208 	add.w	r2, r7, #8
 800fb5e:	4611      	mov	r1, r2
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7ff f88b 	bl	800ec7c <validate>
 800fb66:	4603      	mov	r3, r0
 800fb68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d115      	bne.n	800fb9c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	691b      	ldr	r3, [r3, #16]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d006      	beq.n	800fb86 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fd fcc1 	bl	800d504 <dec_lock>
 800fb82:	4603      	mov	r3, r0
 800fb84:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d102      	bne.n	800fb92 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	2100      	movs	r1, #0
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fd fb8d 	bl	800d2b6 <unlock_fs>
#endif
	}
	return res;
 800fb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f107 0208 	add.w	r2, r7, #8
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7ff f85f 	bl	800ec7c <validate>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fbc2:	7bfb      	ldrb	r3, [r7, #15]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d126      	bne.n	800fc16 <f_readdir+0x70>
		if (!fno) {
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d106      	bne.n	800fbdc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fbce:	2100      	movs	r1, #0
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7fe f8b3 	bl	800dd3c <dir_sdi>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73fb      	strb	r3, [r7, #15]
 800fbda:	e01c      	b.n	800fc16 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fbdc:	2100      	movs	r1, #0
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7fe fa72 	bl	800e0c8 <dir_read>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fbe8:	7bfb      	ldrb	r3, [r7, #15]
 800fbea:	2b04      	cmp	r3, #4
 800fbec:	d101      	bne.n	800fbf2 <f_readdir+0x4c>
 800fbee:	2300      	movs	r3, #0
 800fbf0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fbf2:	7bfb      	ldrb	r3, [r7, #15]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d10e      	bne.n	800fc16 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fbf8:	6839      	ldr	r1, [r7, #0]
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f7fe fb48 	bl	800e290 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fc00:	2100      	movs	r1, #0
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f7fe f915 	bl	800de32 <dir_next>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fc0c:	7bfb      	ldrb	r3, [r7, #15]
 800fc0e:	2b04      	cmp	r3, #4
 800fc10:	d101      	bne.n	800fc16 <f_readdir+0x70>
 800fc12:	2300      	movs	r3, #0
 800fc14:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	7bfa      	ldrb	r2, [r7, #15]
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fd fb4a 	bl	800d2b6 <unlock_fs>
 800fc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7ff ffb4 	bl	800fba6 <f_readdir>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fc42:	7bfb      	ldrb	r3, [r7, #15]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d114      	bne.n	800fc72 <f_findnext+0x46>
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d011      	beq.n	800fc72 <f_findnext+0x46>
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	7a5b      	ldrb	r3, [r3, #9]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00d      	beq.n	800fc72 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	f103 0109 	add.w	r1, r3, #9
 800fc60:	2300      	movs	r3, #0
 800fc62:	2200      	movs	r2, #0
 800fc64:	f7fe fb9a 	bl	800e39c <pattern_matching>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d100      	bne.n	800fc70 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fc6e:	e7e2      	b.n	800fc36 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fc70:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
 800fc88:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	683a      	ldr	r2, [r7, #0]
 800fc8e:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800fc90:	6879      	ldr	r1, [r7, #4]
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f7ff fee3 	bl	800fa5e <f_opendir>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fc9c:	7dfb      	ldrb	r3, [r7, #23]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d105      	bne.n	800fcae <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800fca2:	68b9      	ldr	r1, [r7, #8]
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff ffc1 	bl	800fc2c <f_findnext>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800fcae:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3718      	adds	r7, #24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b087      	sub	sp, #28
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fcce:	4b1f      	ldr	r3, [pc, #124]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fcd0:	7a5b      	ldrb	r3, [r3, #9]
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d131      	bne.n	800fd3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fcd8:	4b1c      	ldr	r3, [pc, #112]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fcda:	7a5b      	ldrb	r3, [r3, #9]
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	461a      	mov	r2, r3
 800fce0:	4b1a      	ldr	r3, [pc, #104]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fce2:	2100      	movs	r1, #0
 800fce4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fce6:	4b19      	ldr	r3, [pc, #100]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fce8:	7a5b      	ldrb	r3, [r3, #9]
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	4a17      	ldr	r2, [pc, #92]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	4413      	add	r3, r2
 800fcf2:	68fa      	ldr	r2, [r7, #12]
 800fcf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fcf6:	4b15      	ldr	r3, [pc, #84]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fcf8:	7a5b      	ldrb	r3, [r3, #9]
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	4b13      	ldr	r3, [pc, #76]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fd00:	4413      	add	r3, r2
 800fd02:	79fa      	ldrb	r2, [r7, #7]
 800fd04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fd06:	4b11      	ldr	r3, [pc, #68]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fd08:	7a5b      	ldrb	r3, [r3, #9]
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	1c5a      	adds	r2, r3, #1
 800fd0e:	b2d1      	uxtb	r1, r2
 800fd10:	4a0e      	ldr	r2, [pc, #56]	; (800fd4c <FATFS_LinkDriverEx+0x94>)
 800fd12:	7251      	strb	r1, [r2, #9]
 800fd14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fd16:	7dbb      	ldrb	r3, [r7, #22]
 800fd18:	3330      	adds	r3, #48	; 0x30
 800fd1a:	b2da      	uxtb	r2, r3
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	3301      	adds	r3, #1
 800fd24:	223a      	movs	r2, #58	; 0x3a
 800fd26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	3302      	adds	r3, #2
 800fd2c:	222f      	movs	r2, #47	; 0x2f
 800fd2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	3303      	adds	r3, #3
 800fd34:	2200      	movs	r2, #0
 800fd36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fd3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	371c      	adds	r7, #28
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	200002ec 	.word	0x200002ec

0800fd50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7ff ffaa 	bl	800fcb8 <FATFS_LinkDriverEx>
 800fd64:	4603      	mov	r3, r0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b084      	sub	sp, #16
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	4603      	mov	r3, r0
 800fd76:	6039      	str	r1, [r7, #0]
 800fd78:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	2001      	movs	r0, #1
 800fd80:	f000 fb5e 	bl	8010440 <osSemaphoreNew>
 800fd84:	4602      	mov	r2, r0
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	bf14      	ite	ne
 800fd92:	2301      	movne	r3, #1
 800fd94:	2300      	moveq	r3, #0
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	60fb      	str	r3, [r7, #12]

    return ret;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fca3 	bl	80106f8 <osSemaphoreDelete>
#endif
    return 1;
 800fdb2:	2301      	movs	r3, #1
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3708      	adds	r7, #8
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800fdc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 fbd5 	bl	801057c <osSemaphoreAcquire>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d101      	bne.n	800fddc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800fdd8:	2301      	movs	r3, #1
 800fdda:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800fddc:	68fb      	ldr	r3, [r7, #12]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b082      	sub	sp, #8
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 fc2a 	bl	8010648 <osSemaphoreRelease>
#endif
}
 800fdf4:	bf00      	nop
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fdfc:	b480      	push	{r7}
 800fdfe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fe00:	bf00      	nop
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
	...

0800fe0c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fe0c:	b480      	push	{r7}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe12:	f3ef 8305 	mrs	r3, IPSR
 800fe16:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d10f      	bne.n	800fe3e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe1e:	f3ef 8310 	mrs	r3, PRIMASK
 800fe22:	607b      	str	r3, [r7, #4]
  return(result);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d105      	bne.n	800fe36 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe2a:	f3ef 8311 	mrs	r3, BASEPRI
 800fe2e:	603b      	str	r3, [r7, #0]
  return(result);
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d007      	beq.n	800fe46 <osKernelInitialize+0x3a>
 800fe36:	4b0e      	ldr	r3, [pc, #56]	; (800fe70 <osKernelInitialize+0x64>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d103      	bne.n	800fe46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fe3e:	f06f 0305 	mvn.w	r3, #5
 800fe42:	60fb      	str	r3, [r7, #12]
 800fe44:	e00c      	b.n	800fe60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fe46:	4b0a      	ldr	r3, [pc, #40]	; (800fe70 <osKernelInitialize+0x64>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d105      	bne.n	800fe5a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fe4e:	4b08      	ldr	r3, [pc, #32]	; (800fe70 <osKernelInitialize+0x64>)
 800fe50:	2201      	movs	r2, #1
 800fe52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fe54:	2300      	movs	r3, #0
 800fe56:	60fb      	str	r3, [r7, #12]
 800fe58:	e002      	b.n	800fe60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fe5a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fe60:	68fb      	ldr	r3, [r7, #12]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3714      	adds	r7, #20
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	200002f8 	.word	0x200002f8

0800fe74 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800fe7a:	f002 fe7b 	bl	8012b74 <xTaskGetSchedulerState>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d004      	beq.n	800fe8e <osKernelGetState+0x1a>
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d105      	bne.n	800fe94 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800fe88:	2302      	movs	r3, #2
 800fe8a:	607b      	str	r3, [r7, #4]
      break;
 800fe8c:	e00c      	b.n	800fea8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	607b      	str	r3, [r7, #4]
      break;
 800fe92:	e009      	b.n	800fea8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800fe94:	4b07      	ldr	r3, [pc, #28]	; (800feb4 <osKernelGetState+0x40>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d102      	bne.n	800fea2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800fea0:	e001      	b.n	800fea6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800fea2:	2300      	movs	r3, #0
 800fea4:	607b      	str	r3, [r7, #4]
      break;
 800fea6:	bf00      	nop
  }

  return (state);
 800fea8:	687b      	ldr	r3, [r7, #4]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	200002f8 	.word	0x200002f8

0800feb8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800feb8:	b580      	push	{r7, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800febe:	f3ef 8305 	mrs	r3, IPSR
 800fec2:	60bb      	str	r3, [r7, #8]
  return(result);
 800fec4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d10f      	bne.n	800feea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800feca:	f3ef 8310 	mrs	r3, PRIMASK
 800fece:	607b      	str	r3, [r7, #4]
  return(result);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d105      	bne.n	800fee2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fed6:	f3ef 8311 	mrs	r3, BASEPRI
 800feda:	603b      	str	r3, [r7, #0]
  return(result);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d007      	beq.n	800fef2 <osKernelStart+0x3a>
 800fee2:	4b0f      	ldr	r3, [pc, #60]	; (800ff20 <osKernelStart+0x68>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2b02      	cmp	r3, #2
 800fee8:	d103      	bne.n	800fef2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800feea:	f06f 0305 	mvn.w	r3, #5
 800feee:	60fb      	str	r3, [r7, #12]
 800fef0:	e010      	b.n	800ff14 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fef2:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <osKernelStart+0x68>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d109      	bne.n	800ff0e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fefa:	f7ff ff7f 	bl	800fdfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fefe:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <osKernelStart+0x68>)
 800ff00:	2202      	movs	r2, #2
 800ff02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff04:	f002 f9c8 	bl	8012298 <vTaskStartScheduler>
      stat = osOK;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	60fb      	str	r3, [r7, #12]
 800ff0c:	e002      	b.n	800ff14 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ff0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ff14:	68fb      	ldr	r3, [r7, #12]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	200002f8 	.word	0x200002f8

0800ff24 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff2a:	f3ef 8305 	mrs	r3, IPSR
 800ff2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ff30:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d10f      	bne.n	800ff56 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff36:	f3ef 8310 	mrs	r3, PRIMASK
 800ff3a:	607b      	str	r3, [r7, #4]
  return(result);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d105      	bne.n	800ff4e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff42:	f3ef 8311 	mrs	r3, BASEPRI
 800ff46:	603b      	str	r3, [r7, #0]
  return(result);
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d007      	beq.n	800ff5e <osKernelGetTickCount+0x3a>
 800ff4e:	4b08      	ldr	r3, [pc, #32]	; (800ff70 <osKernelGetTickCount+0x4c>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d103      	bne.n	800ff5e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800ff56:	f002 fac3 	bl	80124e0 <xTaskGetTickCountFromISR>
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	e002      	b.n	800ff64 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800ff5e:	f002 faaf 	bl	80124c0 <xTaskGetTickCount>
 800ff62:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800ff64:	68fb      	ldr	r3, [r7, #12]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	200002f8 	.word	0x200002f8

0800ff74 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800ff74:	b480      	push	{r7}
 800ff76:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800ff78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr
	...

0800ff88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b090      	sub	sp, #64	; 0x40
 800ff8c:	af04      	add	r7, sp, #16
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ff94:	2300      	movs	r3, #0
 800ff96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff98:	f3ef 8305 	mrs	r3, IPSR
 800ff9c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ff9e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f040 808f 	bne.w	80100c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffa6:	f3ef 8310 	mrs	r3, PRIMASK
 800ffaa:	61bb      	str	r3, [r7, #24]
  return(result);
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d105      	bne.n	800ffbe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffb2:	f3ef 8311 	mrs	r3, BASEPRI
 800ffb6:	617b      	str	r3, [r7, #20]
  return(result);
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d003      	beq.n	800ffc6 <osThreadNew+0x3e>
 800ffbe:	4b44      	ldr	r3, [pc, #272]	; (80100d0 <osThreadNew+0x148>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	2b02      	cmp	r3, #2
 800ffc4:	d07e      	beq.n	80100c4 <osThreadNew+0x13c>
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d07b      	beq.n	80100c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ffcc:	2380      	movs	r3, #128	; 0x80
 800ffce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ffd0:	2318      	movs	r3, #24
 800ffd2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ffd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffdc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d045      	beq.n	8010070 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d002      	beq.n	800fff2 <osThreadNew+0x6a>
        name = attr->name;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	699b      	ldr	r3, [r3, #24]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	699b      	ldr	r3, [r3, #24]
 800fffe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010002:	2b00      	cmp	r3, #0
 8010004:	d008      	beq.n	8010018 <osThreadNew+0x90>
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010008:	2b38      	cmp	r3, #56	; 0x38
 801000a:	d805      	bhi.n	8010018 <osThreadNew+0x90>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	f003 0301 	and.w	r3, r3, #1
 8010014:	2b00      	cmp	r3, #0
 8010016:	d001      	beq.n	801001c <osThreadNew+0x94>
        return (NULL);
 8010018:	2300      	movs	r3, #0
 801001a:	e054      	b.n	80100c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	695b      	ldr	r3, [r3, #20]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d003      	beq.n	801002c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	695b      	ldr	r3, [r3, #20]
 8010028:	089b      	lsrs	r3, r3, #2
 801002a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00e      	beq.n	8010052 <osThreadNew+0xca>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	2b5b      	cmp	r3, #91	; 0x5b
 801003a:	d90a      	bls.n	8010052 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010040:	2b00      	cmp	r3, #0
 8010042:	d006      	beq.n	8010052 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	695b      	ldr	r3, [r3, #20]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d002      	beq.n	8010052 <osThreadNew+0xca>
        mem = 1;
 801004c:	2301      	movs	r3, #1
 801004e:	623b      	str	r3, [r7, #32]
 8010050:	e010      	b.n	8010074 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10c      	bne.n	8010074 <osThreadNew+0xec>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d108      	bne.n	8010074 <osThreadNew+0xec>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	691b      	ldr	r3, [r3, #16]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d104      	bne.n	8010074 <osThreadNew+0xec>
          mem = 0;
 801006a:	2300      	movs	r3, #0
 801006c:	623b      	str	r3, [r7, #32]
 801006e:	e001      	b.n	8010074 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010074:	6a3b      	ldr	r3, [r7, #32]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d110      	bne.n	801009c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010082:	9202      	str	r2, [sp, #8]
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801008e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f001 fea5 	bl	8011de0 <xTaskCreateStatic>
 8010096:	4603      	mov	r3, r0
 8010098:	613b      	str	r3, [r7, #16]
 801009a:	e013      	b.n	80100c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 801009c:	6a3b      	ldr	r3, [r7, #32]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d110      	bne.n	80100c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80100a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	f107 0310 	add.w	r3, r7, #16
 80100aa:	9301      	str	r3, [sp, #4]
 80100ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f001 fef3 	bl	8011ea0 <xTaskCreate>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d001      	beq.n	80100c4 <osThreadNew+0x13c>
          hTask = NULL;
 80100c0:	2300      	movs	r3, #0
 80100c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80100c4:	693b      	ldr	r3, [r7, #16]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3730      	adds	r7, #48	; 0x30
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	200002f8 	.word	0x200002f8

080100d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b086      	sub	sp, #24
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100dc:	f3ef 8305 	mrs	r3, IPSR
 80100e0:	613b      	str	r3, [r7, #16]
  return(result);
 80100e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10f      	bne.n	8010108 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100e8:	f3ef 8310 	mrs	r3, PRIMASK
 80100ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d105      	bne.n	8010100 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80100f4:	f3ef 8311 	mrs	r3, BASEPRI
 80100f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d007      	beq.n	8010110 <osDelay+0x3c>
 8010100:	4b0a      	ldr	r3, [pc, #40]	; (801012c <osDelay+0x58>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b02      	cmp	r3, #2
 8010106:	d103      	bne.n	8010110 <osDelay+0x3c>
    stat = osErrorISR;
 8010108:	f06f 0305 	mvn.w	r3, #5
 801010c:	617b      	str	r3, [r7, #20]
 801010e:	e007      	b.n	8010120 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010110:	2300      	movs	r3, #0
 8010112:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <osDelay+0x4c>
      vTaskDelay(ticks);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f002 f886 	bl	801222c <vTaskDelay>
    }
  }

  return (stat);
 8010120:	697b      	ldr	r3, [r7, #20]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3718      	adds	r7, #24
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	200002f8 	.word	0x200002f8

08010130 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8010130:	b580      	push	{r7, lr}
 8010132:	b088      	sub	sp, #32
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010138:	f3ef 8305 	mrs	r3, IPSR
 801013c:	617b      	str	r3, [r7, #20]
  return(result);
 801013e:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8010140:	2b00      	cmp	r3, #0
 8010142:	d10f      	bne.n	8010164 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010144:	f3ef 8310 	mrs	r3, PRIMASK
 8010148:	613b      	str	r3, [r7, #16]
  return(result);
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d105      	bne.n	801015c <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010150:	f3ef 8311 	mrs	r3, BASEPRI
 8010154:	60fb      	str	r3, [r7, #12]
  return(result);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d007      	beq.n	801016c <osDelayUntil+0x3c>
 801015c:	4b13      	ldr	r3, [pc, #76]	; (80101ac <osDelayUntil+0x7c>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b02      	cmp	r3, #2
 8010162:	d103      	bne.n	801016c <osDelayUntil+0x3c>
    stat = osErrorISR;
 8010164:	f06f 0305 	mvn.w	r3, #5
 8010168:	61fb      	str	r3, [r7, #28]
 801016a:	e019      	b.n	80101a0 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 801016c:	2300      	movs	r3, #0
 801016e:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8010170:	f002 f9a6 	bl	80124c0 <xTaskGetTickCount>
 8010174:	4603      	mov	r3, r0
 8010176:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8010180:	69bb      	ldr	r3, [r7, #24]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d009      	beq.n	801019a <osDelayUntil+0x6a>
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	db06      	blt.n	801019a <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 801018c:	f107 0308 	add.w	r3, r7, #8
 8010190:	69b9      	ldr	r1, [r7, #24]
 8010192:	4618      	mov	r0, r3
 8010194:	f001 ffca 	bl	801212c <vTaskDelayUntil>
 8010198:	e002      	b.n	80101a0 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 801019a:	f06f 0303 	mvn.w	r3, #3
 801019e:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80101a0:	69fb      	ldr	r3, [r7, #28]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3720      	adds	r7, #32
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	200002f8 	.word	0x200002f8

080101b0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08a      	sub	sp, #40	; 0x28
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80101b8:	2300      	movs	r3, #0
 80101ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101bc:	f3ef 8305 	mrs	r3, IPSR
 80101c0:	613b      	str	r3, [r7, #16]
  return(result);
 80101c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f040 8085 	bne.w	80102d4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101ca:	f3ef 8310 	mrs	r3, PRIMASK
 80101ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d105      	bne.n	80101e2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101d6:	f3ef 8311 	mrs	r3, BASEPRI
 80101da:	60bb      	str	r3, [r7, #8]
  return(result);
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d003      	beq.n	80101ea <osMutexNew+0x3a>
 80101e2:	4b3f      	ldr	r3, [pc, #252]	; (80102e0 <osMutexNew+0x130>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d074      	beq.n	80102d4 <osMutexNew+0x124>
    if (attr != NULL) {
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d003      	beq.n	80101f8 <osMutexNew+0x48>
      type = attr->attr_bits;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	623b      	str	r3, [r7, #32]
 80101f6:	e001      	b.n	80101fc <osMutexNew+0x4c>
    } else {
      type = 0U;
 80101f8:	2300      	movs	r3, #0
 80101fa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80101fc:	6a3b      	ldr	r3, [r7, #32]
 80101fe:	f003 0301 	and.w	r3, r3, #1
 8010202:	2b00      	cmp	r3, #0
 8010204:	d002      	beq.n	801020c <osMutexNew+0x5c>
      rmtx = 1U;
 8010206:	2301      	movs	r3, #1
 8010208:	61fb      	str	r3, [r7, #28]
 801020a:	e001      	b.n	8010210 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 801020c:	2300      	movs	r3, #0
 801020e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	f003 0308 	and.w	r3, r3, #8
 8010216:	2b00      	cmp	r3, #0
 8010218:	d15c      	bne.n	80102d4 <osMutexNew+0x124>
      mem = -1;
 801021a:	f04f 33ff 	mov.w	r3, #4294967295
 801021e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d015      	beq.n	8010252 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d006      	beq.n	801023c <osMutexNew+0x8c>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	2b4f      	cmp	r3, #79	; 0x4f
 8010234:	d902      	bls.n	801023c <osMutexNew+0x8c>
          mem = 1;
 8010236:	2301      	movs	r3, #1
 8010238:	61bb      	str	r3, [r7, #24]
 801023a:	e00c      	b.n	8010256 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d108      	bne.n	8010256 <osMutexNew+0xa6>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d104      	bne.n	8010256 <osMutexNew+0xa6>
            mem = 0;
 801024c:	2300      	movs	r3, #0
 801024e:	61bb      	str	r3, [r7, #24]
 8010250:	e001      	b.n	8010256 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010252:	2300      	movs	r3, #0
 8010254:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	2b01      	cmp	r3, #1
 801025a:	d112      	bne.n	8010282 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d007      	beq.n	8010272 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	4619      	mov	r1, r3
 8010268:	2004      	movs	r0, #4
 801026a:	f000 fe4c 	bl	8010f06 <xQueueCreateMutexStatic>
 801026e:	6278      	str	r0, [r7, #36]	; 0x24
 8010270:	e016      	b.n	80102a0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	4619      	mov	r1, r3
 8010278:	2001      	movs	r0, #1
 801027a:	f000 fe44 	bl	8010f06 <xQueueCreateMutexStatic>
 801027e:	6278      	str	r0, [r7, #36]	; 0x24
 8010280:	e00e      	b.n	80102a0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d10b      	bne.n	80102a0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d004      	beq.n	8010298 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801028e:	2004      	movs	r0, #4
 8010290:	f000 fe21 	bl	8010ed6 <xQueueCreateMutex>
 8010294:	6278      	str	r0, [r7, #36]	; 0x24
 8010296:	e003      	b.n	80102a0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010298:	2001      	movs	r0, #1
 801029a:	f000 fe1c 	bl	8010ed6 <xQueueCreateMutex>
 801029e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80102a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00c      	beq.n	80102c0 <osMutexNew+0x110>
        if (attr != NULL) {
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d003      	beq.n	80102b4 <osMutexNew+0x104>
          name = attr->name;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	617b      	str	r3, [r7, #20]
 80102b2:	e001      	b.n	80102b8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80102b4:	2300      	movs	r3, #0
 80102b6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80102b8:	6979      	ldr	r1, [r7, #20]
 80102ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102bc:	f001 fd0a 	bl	8011cd4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80102c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d006      	beq.n	80102d4 <osMutexNew+0x124>
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d003      	beq.n	80102d4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80102cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ce:	f043 0301 	orr.w	r3, r3, #1
 80102d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80102d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3728      	adds	r7, #40	; 0x28
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	200002f8 	.word	0x200002f8

080102e4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b088      	sub	sp, #32
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f023 0301 	bic.w	r3, r3, #1
 80102f4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f003 0301 	and.w	r3, r3, #1
 80102fc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80102fe:	2300      	movs	r3, #0
 8010300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010302:	f3ef 8305 	mrs	r3, IPSR
 8010306:	613b      	str	r3, [r7, #16]
  return(result);
 8010308:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10f      	bne.n	801032e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801030e:	f3ef 8310 	mrs	r3, PRIMASK
 8010312:	60fb      	str	r3, [r7, #12]
  return(result);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d105      	bne.n	8010326 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801031a:	f3ef 8311 	mrs	r3, BASEPRI
 801031e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d007      	beq.n	8010336 <osMutexAcquire+0x52>
 8010326:	4b1d      	ldr	r3, [pc, #116]	; (801039c <osMutexAcquire+0xb8>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b02      	cmp	r3, #2
 801032c:	d103      	bne.n	8010336 <osMutexAcquire+0x52>
    stat = osErrorISR;
 801032e:	f06f 0305 	mvn.w	r3, #5
 8010332:	61fb      	str	r3, [r7, #28]
 8010334:	e02c      	b.n	8010390 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d103      	bne.n	8010344 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 801033c:	f06f 0303 	mvn.w	r3, #3
 8010340:	61fb      	str	r3, [r7, #28]
 8010342:	e025      	b.n	8010390 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d011      	beq.n	801036e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801034a:	6839      	ldr	r1, [r7, #0]
 801034c:	69b8      	ldr	r0, [r7, #24]
 801034e:	f000 fe2a 	bl	8010fa6 <xQueueTakeMutexRecursive>
 8010352:	4603      	mov	r3, r0
 8010354:	2b01      	cmp	r3, #1
 8010356:	d01b      	beq.n	8010390 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d003      	beq.n	8010366 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801035e:	f06f 0301 	mvn.w	r3, #1
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	e014      	b.n	8010390 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010366:	f06f 0302 	mvn.w	r3, #2
 801036a:	61fb      	str	r3, [r7, #28]
 801036c:	e010      	b.n	8010390 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801036e:	6839      	ldr	r1, [r7, #0]
 8010370:	69b8      	ldr	r0, [r7, #24]
 8010372:	f001 f9cf 	bl	8011714 <xQueueSemaphoreTake>
 8010376:	4603      	mov	r3, r0
 8010378:	2b01      	cmp	r3, #1
 801037a:	d009      	beq.n	8010390 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d003      	beq.n	801038a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010382:	f06f 0301 	mvn.w	r3, #1
 8010386:	61fb      	str	r3, [r7, #28]
 8010388:	e002      	b.n	8010390 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801038a:	f06f 0302 	mvn.w	r3, #2
 801038e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010390:	69fb      	ldr	r3, [r7, #28]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3720      	adds	r7, #32
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	200002f8 	.word	0x200002f8

080103a0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b088      	sub	sp, #32
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f023 0301 	bic.w	r3, r3, #1
 80103ae:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f003 0301 	and.w	r3, r3, #1
 80103b6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80103b8:	2300      	movs	r3, #0
 80103ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103bc:	f3ef 8305 	mrs	r3, IPSR
 80103c0:	613b      	str	r3, [r7, #16]
  return(result);
 80103c2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10f      	bne.n	80103e8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103c8:	f3ef 8310 	mrs	r3, PRIMASK
 80103cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d105      	bne.n	80103e0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103d4:	f3ef 8311 	mrs	r3, BASEPRI
 80103d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d007      	beq.n	80103f0 <osMutexRelease+0x50>
 80103e0:	4b16      	ldr	r3, [pc, #88]	; (801043c <osMutexRelease+0x9c>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d103      	bne.n	80103f0 <osMutexRelease+0x50>
    stat = osErrorISR;
 80103e8:	f06f 0305 	mvn.w	r3, #5
 80103ec:	61fb      	str	r3, [r7, #28]
 80103ee:	e01f      	b.n	8010430 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d103      	bne.n	80103fe <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80103f6:	f06f 0303 	mvn.w	r3, #3
 80103fa:	61fb      	str	r3, [r7, #28]
 80103fc:	e018      	b.n	8010430 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d009      	beq.n	8010418 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010404:	69b8      	ldr	r0, [r7, #24]
 8010406:	f000 fd99 	bl	8010f3c <xQueueGiveMutexRecursive>
 801040a:	4603      	mov	r3, r0
 801040c:	2b01      	cmp	r3, #1
 801040e:	d00f      	beq.n	8010430 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010410:	f06f 0302 	mvn.w	r3, #2
 8010414:	61fb      	str	r3, [r7, #28]
 8010416:	e00b      	b.n	8010430 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010418:	2300      	movs	r3, #0
 801041a:	2200      	movs	r2, #0
 801041c:	2100      	movs	r1, #0
 801041e:	69b8      	ldr	r0, [r7, #24]
 8010420:	f000 fe66 	bl	80110f0 <xQueueGenericSend>
 8010424:	4603      	mov	r3, r0
 8010426:	2b01      	cmp	r3, #1
 8010428:	d002      	beq.n	8010430 <osMutexRelease+0x90>
        stat = osErrorResource;
 801042a:	f06f 0302 	mvn.w	r3, #2
 801042e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010430:	69fb      	ldr	r3, [r7, #28]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3720      	adds	r7, #32
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	200002f8 	.word	0x200002f8

08010440 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010440:	b580      	push	{r7, lr}
 8010442:	b08c      	sub	sp, #48	; 0x30
 8010444:	af02      	add	r7, sp, #8
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801044c:	2300      	movs	r3, #0
 801044e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010450:	f3ef 8305 	mrs	r3, IPSR
 8010454:	61bb      	str	r3, [r7, #24]
  return(result);
 8010456:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010458:	2b00      	cmp	r3, #0
 801045a:	f040 8087 	bne.w	801056c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801045e:	f3ef 8310 	mrs	r3, PRIMASK
 8010462:	617b      	str	r3, [r7, #20]
  return(result);
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d105      	bne.n	8010476 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801046a:	f3ef 8311 	mrs	r3, BASEPRI
 801046e:	613b      	str	r3, [r7, #16]
  return(result);
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d003      	beq.n	801047e <osSemaphoreNew+0x3e>
 8010476:	4b40      	ldr	r3, [pc, #256]	; (8010578 <osSemaphoreNew+0x138>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2b02      	cmp	r3, #2
 801047c:	d076      	beq.n	801056c <osSemaphoreNew+0x12c>
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d073      	beq.n	801056c <osSemaphoreNew+0x12c>
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	429a      	cmp	r2, r3
 801048a:	d86f      	bhi.n	801056c <osSemaphoreNew+0x12c>
    mem = -1;
 801048c:	f04f 33ff 	mov.w	r3, #4294967295
 8010490:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d015      	beq.n	80104c4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d006      	beq.n	80104ae <osSemaphoreNew+0x6e>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	2b4f      	cmp	r3, #79	; 0x4f
 80104a6:	d902      	bls.n	80104ae <osSemaphoreNew+0x6e>
        mem = 1;
 80104a8:	2301      	movs	r3, #1
 80104aa:	623b      	str	r3, [r7, #32]
 80104ac:	e00c      	b.n	80104c8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	689b      	ldr	r3, [r3, #8]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d108      	bne.n	80104c8 <osSemaphoreNew+0x88>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d104      	bne.n	80104c8 <osSemaphoreNew+0x88>
          mem = 0;
 80104be:	2300      	movs	r3, #0
 80104c0:	623b      	str	r3, [r7, #32]
 80104c2:	e001      	b.n	80104c8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80104c4:	2300      	movs	r3, #0
 80104c6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80104c8:	6a3b      	ldr	r3, [r7, #32]
 80104ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ce:	d04d      	beq.n	801056c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d129      	bne.n	801052a <osSemaphoreNew+0xea>
        if (mem == 1) {
 80104d6:	6a3b      	ldr	r3, [r7, #32]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d10b      	bne.n	80104f4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	689a      	ldr	r2, [r3, #8]
 80104e0:	2303      	movs	r3, #3
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	4613      	mov	r3, r2
 80104e6:	2200      	movs	r2, #0
 80104e8:	2100      	movs	r1, #0
 80104ea:	2001      	movs	r0, #1
 80104ec:	f000 fbf8 	bl	8010ce0 <xQueueGenericCreateStatic>
 80104f0:	6278      	str	r0, [r7, #36]	; 0x24
 80104f2:	e005      	b.n	8010500 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80104f4:	2203      	movs	r2, #3
 80104f6:	2100      	movs	r1, #0
 80104f8:	2001      	movs	r0, #1
 80104fa:	f000 fc6e 	bl	8010dda <xQueueGenericCreate>
 80104fe:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	2b00      	cmp	r3, #0
 8010504:	d022      	beq.n	801054c <osSemaphoreNew+0x10c>
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d01f      	beq.n	801054c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801050c:	2300      	movs	r3, #0
 801050e:	2200      	movs	r2, #0
 8010510:	2100      	movs	r1, #0
 8010512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010514:	f000 fdec 	bl	80110f0 <xQueueGenericSend>
 8010518:	4603      	mov	r3, r0
 801051a:	2b01      	cmp	r3, #1
 801051c:	d016      	beq.n	801054c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 801051e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010520:	f001 fa8b 	bl	8011a3a <vQueueDelete>
            hSemaphore = NULL;
 8010524:	2300      	movs	r3, #0
 8010526:	627b      	str	r3, [r7, #36]	; 0x24
 8010528:	e010      	b.n	801054c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801052a:	6a3b      	ldr	r3, [r7, #32]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d108      	bne.n	8010542 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	461a      	mov	r2, r3
 8010536:	68b9      	ldr	r1, [r7, #8]
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	f000 fd6b 	bl	8011014 <xQueueCreateCountingSemaphoreStatic>
 801053e:	6278      	str	r0, [r7, #36]	; 0x24
 8010540:	e004      	b.n	801054c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010542:	68b9      	ldr	r1, [r7, #8]
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f000 fd9e 	bl	8011086 <xQueueCreateCountingSemaphore>
 801054a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801054c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054e:	2b00      	cmp	r3, #0
 8010550:	d00c      	beq.n	801056c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d003      	beq.n	8010560 <osSemaphoreNew+0x120>
          name = attr->name;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	61fb      	str	r3, [r7, #28]
 801055e:	e001      	b.n	8010564 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010560:	2300      	movs	r3, #0
 8010562:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010564:	69f9      	ldr	r1, [r7, #28]
 8010566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010568:	f001 fbb4 	bl	8011cd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801056e:	4618      	mov	r0, r3
 8010570:	3728      	adds	r7, #40	; 0x28
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	200002f8 	.word	0x200002f8

0801057c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801057c:	b580      	push	{r7, lr}
 801057e:	b088      	sub	sp, #32
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801058a:	2300      	movs	r3, #0
 801058c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d103      	bne.n	801059c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010594:	f06f 0303 	mvn.w	r3, #3
 8010598:	61fb      	str	r3, [r7, #28]
 801059a:	e04b      	b.n	8010634 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801059c:	f3ef 8305 	mrs	r3, IPSR
 80105a0:	617b      	str	r3, [r7, #20]
  return(result);
 80105a2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d10f      	bne.n	80105c8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105a8:	f3ef 8310 	mrs	r3, PRIMASK
 80105ac:	613b      	str	r3, [r7, #16]
  return(result);
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d105      	bne.n	80105c0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105b4:	f3ef 8311 	mrs	r3, BASEPRI
 80105b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d026      	beq.n	801060e <osSemaphoreAcquire+0x92>
 80105c0:	4b1f      	ldr	r3, [pc, #124]	; (8010640 <osSemaphoreAcquire+0xc4>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b02      	cmp	r3, #2
 80105c6:	d122      	bne.n	801060e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d003      	beq.n	80105d6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80105ce:	f06f 0303 	mvn.w	r3, #3
 80105d2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80105d4:	e02d      	b.n	8010632 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80105d6:	2300      	movs	r3, #0
 80105d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80105da:	f107 0308 	add.w	r3, r7, #8
 80105de:	461a      	mov	r2, r3
 80105e0:	2100      	movs	r1, #0
 80105e2:	69b8      	ldr	r0, [r7, #24]
 80105e4:	f001 f9a6 	bl	8011934 <xQueueReceiveFromISR>
 80105e8:	4603      	mov	r3, r0
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d003      	beq.n	80105f6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80105ee:	f06f 0302 	mvn.w	r3, #2
 80105f2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80105f4:	e01d      	b.n	8010632 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d01a      	beq.n	8010632 <osSemaphoreAcquire+0xb6>
 80105fc:	4b11      	ldr	r3, [pc, #68]	; (8010644 <osSemaphoreAcquire+0xc8>)
 80105fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801060c:	e011      	b.n	8010632 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801060e:	6839      	ldr	r1, [r7, #0]
 8010610:	69b8      	ldr	r0, [r7, #24]
 8010612:	f001 f87f 	bl	8011714 <xQueueSemaphoreTake>
 8010616:	4603      	mov	r3, r0
 8010618:	2b01      	cmp	r3, #1
 801061a:	d00b      	beq.n	8010634 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d003      	beq.n	801062a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010622:	f06f 0301 	mvn.w	r3, #1
 8010626:	61fb      	str	r3, [r7, #28]
 8010628:	e004      	b.n	8010634 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801062a:	f06f 0302 	mvn.w	r3, #2
 801062e:	61fb      	str	r3, [r7, #28]
 8010630:	e000      	b.n	8010634 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010632:	bf00      	nop
      }
    }
  }

  return (stat);
 8010634:	69fb      	ldr	r3, [r7, #28]
}
 8010636:	4618      	mov	r0, r3
 8010638:	3720      	adds	r7, #32
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	200002f8 	.word	0x200002f8
 8010644:	e000ed04 	.word	0xe000ed04

08010648 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010648:	b580      	push	{r7, lr}
 801064a:	b088      	sub	sp, #32
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010654:	2300      	movs	r3, #0
 8010656:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010658:	69bb      	ldr	r3, [r7, #24]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d103      	bne.n	8010666 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801065e:	f06f 0303 	mvn.w	r3, #3
 8010662:	61fb      	str	r3, [r7, #28]
 8010664:	e03e      	b.n	80106e4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010666:	f3ef 8305 	mrs	r3, IPSR
 801066a:	617b      	str	r3, [r7, #20]
  return(result);
 801066c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801066e:	2b00      	cmp	r3, #0
 8010670:	d10f      	bne.n	8010692 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010672:	f3ef 8310 	mrs	r3, PRIMASK
 8010676:	613b      	str	r3, [r7, #16]
  return(result);
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d105      	bne.n	801068a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801067e:	f3ef 8311 	mrs	r3, BASEPRI
 8010682:	60fb      	str	r3, [r7, #12]
  return(result);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d01e      	beq.n	80106c8 <osSemaphoreRelease+0x80>
 801068a:	4b19      	ldr	r3, [pc, #100]	; (80106f0 <osSemaphoreRelease+0xa8>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b02      	cmp	r3, #2
 8010690:	d11a      	bne.n	80106c8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010692:	2300      	movs	r3, #0
 8010694:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010696:	f107 0308 	add.w	r3, r7, #8
 801069a:	4619      	mov	r1, r3
 801069c:	69b8      	ldr	r0, [r7, #24]
 801069e:	f000 fec5 	bl	801142c <xQueueGiveFromISR>
 80106a2:	4603      	mov	r3, r0
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d003      	beq.n	80106b0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80106a8:	f06f 0302 	mvn.w	r3, #2
 80106ac:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106ae:	e018      	b.n	80106e2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d015      	beq.n	80106e2 <osSemaphoreRelease+0x9a>
 80106b6:	4b0f      	ldr	r3, [pc, #60]	; (80106f4 <osSemaphoreRelease+0xac>)
 80106b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106c6:	e00c      	b.n	80106e2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80106c8:	2300      	movs	r3, #0
 80106ca:	2200      	movs	r2, #0
 80106cc:	2100      	movs	r1, #0
 80106ce:	69b8      	ldr	r0, [r7, #24]
 80106d0:	f000 fd0e 	bl	80110f0 <xQueueGenericSend>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d004      	beq.n	80106e4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80106da:	f06f 0302 	mvn.w	r3, #2
 80106de:	61fb      	str	r3, [r7, #28]
 80106e0:	e000      	b.n	80106e4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106e2:	bf00      	nop
    }
  }

  return (stat);
 80106e4:	69fb      	ldr	r3, [r7, #28]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3720      	adds	r7, #32
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	200002f8 	.word	0x200002f8
 80106f4:	e000ed04 	.word	0xe000ed04

080106f8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b088      	sub	sp, #32
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010704:	f3ef 8305 	mrs	r3, IPSR
 8010708:	617b      	str	r3, [r7, #20]
  return(result);
 801070a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801070c:	2b00      	cmp	r3, #0
 801070e:	d10f      	bne.n	8010730 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010710:	f3ef 8310 	mrs	r3, PRIMASK
 8010714:	613b      	str	r3, [r7, #16]
  return(result);
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d105      	bne.n	8010728 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801071c:	f3ef 8311 	mrs	r3, BASEPRI
 8010720:	60fb      	str	r3, [r7, #12]
  return(result);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d007      	beq.n	8010738 <osSemaphoreDelete+0x40>
 8010728:	4b0d      	ldr	r3, [pc, #52]	; (8010760 <osSemaphoreDelete+0x68>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2b02      	cmp	r3, #2
 801072e:	d103      	bne.n	8010738 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8010730:	f06f 0305 	mvn.w	r3, #5
 8010734:	61fb      	str	r3, [r7, #28]
 8010736:	e00e      	b.n	8010756 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d103      	bne.n	8010746 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 801073e:	f06f 0303 	mvn.w	r3, #3
 8010742:	61fb      	str	r3, [r7, #28]
 8010744:	e007      	b.n	8010756 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8010746:	69b8      	ldr	r0, [r7, #24]
 8010748:	f001 faec 	bl	8011d24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801074c:	2300      	movs	r3, #0
 801074e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8010750:	69b8      	ldr	r0, [r7, #24]
 8010752:	f001 f972 	bl	8011a3a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8010756:	69fb      	ldr	r3, [r7, #28]
}
 8010758:	4618      	mov	r0, r3
 801075a:	3720      	adds	r7, #32
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	200002f8 	.word	0x200002f8

08010764 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010764:	b580      	push	{r7, lr}
 8010766:	b08c      	sub	sp, #48	; 0x30
 8010768:	af02      	add	r7, sp, #8
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010770:	2300      	movs	r3, #0
 8010772:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010774:	f3ef 8305 	mrs	r3, IPSR
 8010778:	61bb      	str	r3, [r7, #24]
  return(result);
 801077a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801077c:	2b00      	cmp	r3, #0
 801077e:	d170      	bne.n	8010862 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010780:	f3ef 8310 	mrs	r3, PRIMASK
 8010784:	617b      	str	r3, [r7, #20]
  return(result);
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d105      	bne.n	8010798 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801078c:	f3ef 8311 	mrs	r3, BASEPRI
 8010790:	613b      	str	r3, [r7, #16]
  return(result);
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d003      	beq.n	80107a0 <osMessageQueueNew+0x3c>
 8010798:	4b34      	ldr	r3, [pc, #208]	; (801086c <osMessageQueueNew+0x108>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b02      	cmp	r3, #2
 801079e:	d060      	beq.n	8010862 <osMessageQueueNew+0xfe>
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d05d      	beq.n	8010862 <osMessageQueueNew+0xfe>
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d05a      	beq.n	8010862 <osMessageQueueNew+0xfe>
    mem = -1;
 80107ac:	f04f 33ff 	mov.w	r3, #4294967295
 80107b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d029      	beq.n	801080c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d012      	beq.n	80107e6 <osMessageQueueNew+0x82>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	2b4f      	cmp	r3, #79	; 0x4f
 80107c6:	d90e      	bls.n	80107e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00a      	beq.n	80107e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	695a      	ldr	r2, [r3, #20]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	68b9      	ldr	r1, [r7, #8]
 80107d8:	fb01 f303 	mul.w	r3, r1, r3
 80107dc:	429a      	cmp	r2, r3
 80107de:	d302      	bcc.n	80107e6 <osMessageQueueNew+0x82>
        mem = 1;
 80107e0:	2301      	movs	r3, #1
 80107e2:	623b      	str	r3, [r7, #32]
 80107e4:	e014      	b.n	8010810 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	689b      	ldr	r3, [r3, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d110      	bne.n	8010810 <osMessageQueueNew+0xac>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10c      	bne.n	8010810 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d108      	bne.n	8010810 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	695b      	ldr	r3, [r3, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d104      	bne.n	8010810 <osMessageQueueNew+0xac>
          mem = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	623b      	str	r3, [r7, #32]
 801080a:	e001      	b.n	8010810 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801080c:	2300      	movs	r3, #0
 801080e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	2b01      	cmp	r3, #1
 8010814:	d10c      	bne.n	8010830 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	691a      	ldr	r2, [r3, #16]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6899      	ldr	r1, [r3, #8]
 801081e:	2300      	movs	r3, #0
 8010820:	9300      	str	r3, [sp, #0]
 8010822:	460b      	mov	r3, r1
 8010824:	68b9      	ldr	r1, [r7, #8]
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f000 fa5a 	bl	8010ce0 <xQueueGenericCreateStatic>
 801082c:	6278      	str	r0, [r7, #36]	; 0x24
 801082e:	e008      	b.n	8010842 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010830:	6a3b      	ldr	r3, [r7, #32]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d105      	bne.n	8010842 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010836:	2200      	movs	r2, #0
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f000 facd 	bl	8010dda <xQueueGenericCreate>
 8010840:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00c      	beq.n	8010862 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d003      	beq.n	8010856 <osMessageQueueNew+0xf2>
        name = attr->name;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	61fb      	str	r3, [r7, #28]
 8010854:	e001      	b.n	801085a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010856:	2300      	movs	r3, #0
 8010858:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801085a:	69f9      	ldr	r1, [r7, #28]
 801085c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801085e:	f001 fa39 	bl	8011cd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010864:	4618      	mov	r0, r3
 8010866:	3728      	adds	r7, #40	; 0x28
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	200002f8 	.word	0x200002f8

08010870 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010870:	b580      	push	{r7, lr}
 8010872:	b08a      	sub	sp, #40	; 0x28
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	603b      	str	r3, [r7, #0]
 801087c:	4613      	mov	r3, r2
 801087e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010884:	2300      	movs	r3, #0
 8010886:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010888:	f3ef 8305 	mrs	r3, IPSR
 801088c:	61fb      	str	r3, [r7, #28]
  return(result);
 801088e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010890:	2b00      	cmp	r3, #0
 8010892:	d10f      	bne.n	80108b4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010894:	f3ef 8310 	mrs	r3, PRIMASK
 8010898:	61bb      	str	r3, [r7, #24]
  return(result);
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d105      	bne.n	80108ac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108a0:	f3ef 8311 	mrs	r3, BASEPRI
 80108a4:	617b      	str	r3, [r7, #20]
  return(result);
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d02c      	beq.n	8010906 <osMessageQueuePut+0x96>
 80108ac:	4b28      	ldr	r3, [pc, #160]	; (8010950 <osMessageQueuePut+0xe0>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	d128      	bne.n	8010906 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108b4:	6a3b      	ldr	r3, [r7, #32]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d005      	beq.n	80108c6 <osMessageQueuePut+0x56>
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <osMessageQueuePut+0x56>
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d003      	beq.n	80108ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80108c6:	f06f 0303 	mvn.w	r3, #3
 80108ca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108cc:	e039      	b.n	8010942 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80108ce:	2300      	movs	r3, #0
 80108d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80108d2:	f107 0210 	add.w	r2, r7, #16
 80108d6:	2300      	movs	r3, #0
 80108d8:	68b9      	ldr	r1, [r7, #8]
 80108da:	6a38      	ldr	r0, [r7, #32]
 80108dc:	f000 fd0a 	bl	80112f4 <xQueueGenericSendFromISR>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d003      	beq.n	80108ee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80108e6:	f06f 0302 	mvn.w	r3, #2
 80108ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108ec:	e029      	b.n	8010942 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d026      	beq.n	8010942 <osMessageQueuePut+0xd2>
 80108f4:	4b17      	ldr	r3, [pc, #92]	; (8010954 <osMessageQueuePut+0xe4>)
 80108f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108fa:	601a      	str	r2, [r3, #0]
 80108fc:	f3bf 8f4f 	dsb	sy
 8010900:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010904:	e01d      	b.n	8010942 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010906:	6a3b      	ldr	r3, [r7, #32]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <osMessageQueuePut+0xa2>
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d103      	bne.n	801091a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010912:	f06f 0303 	mvn.w	r3, #3
 8010916:	627b      	str	r3, [r7, #36]	; 0x24
 8010918:	e014      	b.n	8010944 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801091a:	2300      	movs	r3, #0
 801091c:	683a      	ldr	r2, [r7, #0]
 801091e:	68b9      	ldr	r1, [r7, #8]
 8010920:	6a38      	ldr	r0, [r7, #32]
 8010922:	f000 fbe5 	bl	80110f0 <xQueueGenericSend>
 8010926:	4603      	mov	r3, r0
 8010928:	2b01      	cmp	r3, #1
 801092a:	d00b      	beq.n	8010944 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d003      	beq.n	801093a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010932:	f06f 0301 	mvn.w	r3, #1
 8010936:	627b      	str	r3, [r7, #36]	; 0x24
 8010938:	e004      	b.n	8010944 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801093a:	f06f 0302 	mvn.w	r3, #2
 801093e:	627b      	str	r3, [r7, #36]	; 0x24
 8010940:	e000      	b.n	8010944 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010942:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010946:	4618      	mov	r0, r3
 8010948:	3728      	adds	r7, #40	; 0x28
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	200002f8 	.word	0x200002f8
 8010954:	e000ed04 	.word	0xe000ed04

08010958 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010958:	b580      	push	{r7, lr}
 801095a:	b08a      	sub	sp, #40	; 0x28
 801095c:	af00      	add	r7, sp, #0
 801095e:	60f8      	str	r0, [r7, #12]
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	607a      	str	r2, [r7, #4]
 8010964:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801096a:	2300      	movs	r3, #0
 801096c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801096e:	f3ef 8305 	mrs	r3, IPSR
 8010972:	61fb      	str	r3, [r7, #28]
  return(result);
 8010974:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010976:	2b00      	cmp	r3, #0
 8010978:	d10f      	bne.n	801099a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801097a:	f3ef 8310 	mrs	r3, PRIMASK
 801097e:	61bb      	str	r3, [r7, #24]
  return(result);
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d105      	bne.n	8010992 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010986:	f3ef 8311 	mrs	r3, BASEPRI
 801098a:	617b      	str	r3, [r7, #20]
  return(result);
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d02c      	beq.n	80109ec <osMessageQueueGet+0x94>
 8010992:	4b28      	ldr	r3, [pc, #160]	; (8010a34 <osMessageQueueGet+0xdc>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b02      	cmp	r3, #2
 8010998:	d128      	bne.n	80109ec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d005      	beq.n	80109ac <osMessageQueueGet+0x54>
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d002      	beq.n	80109ac <osMessageQueueGet+0x54>
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d003      	beq.n	80109b4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80109ac:	f06f 0303 	mvn.w	r3, #3
 80109b0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109b2:	e038      	b.n	8010a26 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80109b4:	2300      	movs	r3, #0
 80109b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80109b8:	f107 0310 	add.w	r3, r7, #16
 80109bc:	461a      	mov	r2, r3
 80109be:	68b9      	ldr	r1, [r7, #8]
 80109c0:	6a38      	ldr	r0, [r7, #32]
 80109c2:	f000 ffb7 	bl	8011934 <xQueueReceiveFromISR>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d003      	beq.n	80109d4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80109cc:	f06f 0302 	mvn.w	r3, #2
 80109d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109d2:	e028      	b.n	8010a26 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d025      	beq.n	8010a26 <osMessageQueueGet+0xce>
 80109da:	4b17      	ldr	r3, [pc, #92]	; (8010a38 <osMessageQueueGet+0xe0>)
 80109dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	f3bf 8f4f 	dsb	sy
 80109e6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109ea:	e01c      	b.n	8010a26 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <osMessageQueueGet+0xa0>
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d103      	bne.n	8010a00 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80109f8:	f06f 0303 	mvn.w	r3, #3
 80109fc:	627b      	str	r3, [r7, #36]	; 0x24
 80109fe:	e013      	b.n	8010a28 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010a00:	683a      	ldr	r2, [r7, #0]
 8010a02:	68b9      	ldr	r1, [r7, #8]
 8010a04:	6a38      	ldr	r0, [r7, #32]
 8010a06:	f000 fda3 	bl	8011550 <xQueueReceive>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d00b      	beq.n	8010a28 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d003      	beq.n	8010a1e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010a16:	f06f 0301 	mvn.w	r3, #1
 8010a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8010a1c:	e004      	b.n	8010a28 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010a1e:	f06f 0302 	mvn.w	r3, #2
 8010a22:	627b      	str	r3, [r7, #36]	; 0x24
 8010a24:	e000      	b.n	8010a28 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010a26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3728      	adds	r7, #40	; 0x28
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	200002f8 	.word	0x200002f8
 8010a38:	e000ed04 	.word	0xe000ed04

08010a3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010a3c:	b480      	push	{r7}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	4a07      	ldr	r2, [pc, #28]	; (8010a68 <vApplicationGetIdleTaskMemory+0x2c>)
 8010a4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	4a06      	ldr	r2, [pc, #24]	; (8010a6c <vApplicationGetIdleTaskMemory+0x30>)
 8010a52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2280      	movs	r2, #128	; 0x80
 8010a58:	601a      	str	r2, [r3, #0]
}
 8010a5a:	bf00      	nop
 8010a5c:	3714      	adds	r7, #20
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	200002fc 	.word	0x200002fc
 8010a6c:	20000358 	.word	0x20000358

08010a70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	4a07      	ldr	r2, [pc, #28]	; (8010a9c <vApplicationGetTimerTaskMemory+0x2c>)
 8010a80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	4a06      	ldr	r2, [pc, #24]	; (8010aa0 <vApplicationGetTimerTaskMemory+0x30>)
 8010a86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a8e:	601a      	str	r2, [r3, #0]
}
 8010a90:	bf00      	nop
 8010a92:	3714      	adds	r7, #20
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr
 8010a9c:	20000558 	.word	0x20000558
 8010aa0:	200005b4 	.word	0x200005b4

08010aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f103 0208 	add.w	r2, r3, #8
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8010abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f103 0208 	add.w	r2, r3, #8
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f103 0208 	add.w	r2, r3, #8
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010ad8:	bf00      	nop
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010af2:	bf00      	nop
 8010af4:	370c      	adds	r7, #12
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr

08010afe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010afe:	b480      	push	{r7}
 8010b00:	b085      	sub	sp, #20
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	689a      	ldr	r2, [r3, #8]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	683a      	ldr	r2, [r7, #0]
 8010b22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	683a      	ldr	r2, [r7, #0]
 8010b28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	1c5a      	adds	r2, r3, #1
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	601a      	str	r2, [r3, #0]
}
 8010b3a:	bf00      	nop
 8010b3c:	3714      	adds	r7, #20
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr

08010b46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b46:	b480      	push	{r7}
 8010b48:	b085      	sub	sp, #20
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
 8010b4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b5c:	d103      	bne.n	8010b66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	691b      	ldr	r3, [r3, #16]
 8010b62:	60fb      	str	r3, [r7, #12]
 8010b64:	e00c      	b.n	8010b80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	3308      	adds	r3, #8
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	e002      	b.n	8010b74 <vListInsert+0x2e>
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	60fb      	str	r3, [r7, #12]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	68ba      	ldr	r2, [r7, #8]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d2f6      	bcs.n	8010b6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	685a      	ldr	r2, [r3, #4]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	683a      	ldr	r2, [r7, #0]
 8010b8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	68fa      	ldr	r2, [r7, #12]
 8010b94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	683a      	ldr	r2, [r7, #0]
 8010b9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	1c5a      	adds	r2, r3, #1
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	601a      	str	r2, [r3, #0]
}
 8010bac:	bf00      	nop
 8010bae:	3714      	adds	r7, #20
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	6892      	ldr	r2, [r2, #8]
 8010bce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	689b      	ldr	r3, [r3, #8]
 8010bd4:	687a      	ldr	r2, [r7, #4]
 8010bd6:	6852      	ldr	r2, [r2, #4]
 8010bd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d103      	bne.n	8010bec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	689a      	ldr	r2, [r3, #8]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	1e5a      	subs	r2, r3, #1
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3714      	adds	r7, #20
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d10b      	bne.n	8010c38 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c24:	b672      	cpsid	i
 8010c26:	f383 8811 	msr	BASEPRI, r3
 8010c2a:	f3bf 8f6f 	isb	sy
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	b662      	cpsie	i
 8010c34:	60bb      	str	r3, [r7, #8]
 8010c36:	e7fe      	b.n	8010c36 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010c38:	f002 fdde 	bl	80137f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c44:	68f9      	ldr	r1, [r7, #12]
 8010c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c48:	fb01 f303 	mul.w	r3, r1, r3
 8010c4c:	441a      	add	r2, r3
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2200      	movs	r2, #0
 8010c56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c68:	3b01      	subs	r3, #1
 8010c6a:	68f9      	ldr	r1, [r7, #12]
 8010c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c6e:	fb01 f303 	mul.w	r3, r1, r3
 8010c72:	441a      	add	r2, r3
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	22ff      	movs	r2, #255	; 0xff
 8010c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	22ff      	movs	r2, #255	; 0xff
 8010c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d114      	bne.n	8010cb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d01a      	beq.n	8010ccc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	3310      	adds	r3, #16
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f001 fd9c 	bl	80127d8 <xTaskRemoveFromEventList>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d012      	beq.n	8010ccc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010ca6:	4b0d      	ldr	r3, [pc, #52]	; (8010cdc <xQueueGenericReset+0xd0>)
 8010ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	f3bf 8f4f 	dsb	sy
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	e009      	b.n	8010ccc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	3310      	adds	r3, #16
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7ff fef1 	bl	8010aa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	3324      	adds	r3, #36	; 0x24
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7ff feec 	bl	8010aa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ccc:	f002 fdc6 	bl	801385c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010cd0:	2301      	movs	r3, #1
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3710      	adds	r7, #16
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	e000ed04 	.word	0xe000ed04

08010ce0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b08e      	sub	sp, #56	; 0x38
 8010ce4:	af02      	add	r7, sp, #8
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]
 8010cec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d10b      	bne.n	8010d0c <xQueueGenericCreateStatic+0x2c>
 8010cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf8:	b672      	cpsid	i
 8010cfa:	f383 8811 	msr	BASEPRI, r3
 8010cfe:	f3bf 8f6f 	isb	sy
 8010d02:	f3bf 8f4f 	dsb	sy
 8010d06:	b662      	cpsie	i
 8010d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d0a:	e7fe      	b.n	8010d0a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d10b      	bne.n	8010d2a <xQueueGenericCreateStatic+0x4a>
 8010d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d16:	b672      	cpsid	i
 8010d18:	f383 8811 	msr	BASEPRI, r3
 8010d1c:	f3bf 8f6f 	isb	sy
 8010d20:	f3bf 8f4f 	dsb	sy
 8010d24:	b662      	cpsie	i
 8010d26:	627b      	str	r3, [r7, #36]	; 0x24
 8010d28:	e7fe      	b.n	8010d28 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <xQueueGenericCreateStatic+0x56>
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d001      	beq.n	8010d3a <xQueueGenericCreateStatic+0x5a>
 8010d36:	2301      	movs	r3, #1
 8010d38:	e000      	b.n	8010d3c <xQueueGenericCreateStatic+0x5c>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d10b      	bne.n	8010d58 <xQueueGenericCreateStatic+0x78>
 8010d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d44:	b672      	cpsid	i
 8010d46:	f383 8811 	msr	BASEPRI, r3
 8010d4a:	f3bf 8f6f 	isb	sy
 8010d4e:	f3bf 8f4f 	dsb	sy
 8010d52:	b662      	cpsie	i
 8010d54:	623b      	str	r3, [r7, #32]
 8010d56:	e7fe      	b.n	8010d56 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d102      	bne.n	8010d64 <xQueueGenericCreateStatic+0x84>
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d101      	bne.n	8010d68 <xQueueGenericCreateStatic+0x88>
 8010d64:	2301      	movs	r3, #1
 8010d66:	e000      	b.n	8010d6a <xQueueGenericCreateStatic+0x8a>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10b      	bne.n	8010d86 <xQueueGenericCreateStatic+0xa6>
 8010d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d72:	b672      	cpsid	i
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	b662      	cpsie	i
 8010d82:	61fb      	str	r3, [r7, #28]
 8010d84:	e7fe      	b.n	8010d84 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d86:	2350      	movs	r3, #80	; 0x50
 8010d88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	2b50      	cmp	r3, #80	; 0x50
 8010d8e:	d00b      	beq.n	8010da8 <xQueueGenericCreateStatic+0xc8>
 8010d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d94:	b672      	cpsid	i
 8010d96:	f383 8811 	msr	BASEPRI, r3
 8010d9a:	f3bf 8f6f 	isb	sy
 8010d9e:	f3bf 8f4f 	dsb	sy
 8010da2:	b662      	cpsie	i
 8010da4:	61bb      	str	r3, [r7, #24]
 8010da6:	e7fe      	b.n	8010da6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010da8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d00d      	beq.n	8010dd0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db6:	2201      	movs	r2, #1
 8010db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dbc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	68b9      	ldr	r1, [r7, #8]
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f000 f846 	bl	8010e5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3730      	adds	r7, #48	; 0x30
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b08a      	sub	sp, #40	; 0x28
 8010dde:	af02      	add	r7, sp, #8
 8010de0:	60f8      	str	r0, [r7, #12]
 8010de2:	60b9      	str	r1, [r7, #8]
 8010de4:	4613      	mov	r3, r2
 8010de6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d10b      	bne.n	8010e06 <xQueueGenericCreate+0x2c>
 8010dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df2:	b672      	cpsid	i
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	b662      	cpsie	i
 8010e02:	613b      	str	r3, [r7, #16]
 8010e04:	e7fe      	b.n	8010e04 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	61fb      	str	r3, [r7, #28]
 8010e10:	e004      	b.n	8010e1c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	68ba      	ldr	r2, [r7, #8]
 8010e16:	fb02 f303 	mul.w	r3, r2, r3
 8010e1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	3350      	adds	r3, #80	; 0x50
 8010e20:	4618      	mov	r0, r3
 8010e22:	f002 fe0b 	bl	8013a3c <pvPortMalloc>
 8010e26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d011      	beq.n	8010e52 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010e2e:	69bb      	ldr	r3, [r7, #24]
 8010e30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	3350      	adds	r3, #80	; 0x50
 8010e36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e40:	79fa      	ldrb	r2, [r7, #7]
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	4613      	mov	r3, r2
 8010e48:	697a      	ldr	r2, [r7, #20]
 8010e4a:	68b9      	ldr	r1, [r7, #8]
 8010e4c:	68f8      	ldr	r0, [r7, #12]
 8010e4e:	f000 f805 	bl	8010e5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e52:	69bb      	ldr	r3, [r7, #24]
	}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3720      	adds	r7, #32
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d103      	bne.n	8010e78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	69ba      	ldr	r2, [r7, #24]
 8010e74:	601a      	str	r2, [r3, #0]
 8010e76:	e002      	b.n	8010e7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	68ba      	ldr	r2, [r7, #8]
 8010e88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e8a:	2101      	movs	r1, #1
 8010e8c:	69b8      	ldr	r0, [r7, #24]
 8010e8e:	f7ff febd 	bl	8010c0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010e92:	69bb      	ldr	r3, [r7, #24]
 8010e94:	78fa      	ldrb	r2, [r7, #3]
 8010e96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010e9a:	bf00      	nop
 8010e9c:	3710      	adds	r7, #16
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b082      	sub	sp, #8
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d00e      	beq.n	8010ece <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 f911 	bl	80110f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010ece:	bf00      	nop
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b086      	sub	sp, #24
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	4603      	mov	r3, r0
 8010ede:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	617b      	str	r3, [r7, #20]
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010ee8:	79fb      	ldrb	r3, [r7, #7]
 8010eea:	461a      	mov	r2, r3
 8010eec:	6939      	ldr	r1, [r7, #16]
 8010eee:	6978      	ldr	r0, [r7, #20]
 8010ef0:	f7ff ff73 	bl	8010dda <xQueueGenericCreate>
 8010ef4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f7ff ffd3 	bl	8010ea2 <prvInitialiseMutex>

		return xNewQueue;
 8010efc:	68fb      	ldr	r3, [r7, #12]
	}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3718      	adds	r7, #24
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b088      	sub	sp, #32
 8010f0a:	af02      	add	r7, sp, #8
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	6039      	str	r1, [r7, #0]
 8010f10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010f12:	2301      	movs	r3, #1
 8010f14:	617b      	str	r3, [r7, #20]
 8010f16:	2300      	movs	r3, #0
 8010f18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010f1a:	79fb      	ldrb	r3, [r7, #7]
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	2200      	movs	r2, #0
 8010f22:	6939      	ldr	r1, [r7, #16]
 8010f24:	6978      	ldr	r0, [r7, #20]
 8010f26:	f7ff fedb 	bl	8010ce0 <xQueueGenericCreateStatic>
 8010f2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f7ff ffb8 	bl	8010ea2 <prvInitialiseMutex>

		return xNewQueue;
 8010f32:	68fb      	ldr	r3, [r7, #12]
	}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3718      	adds	r7, #24
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10b      	bne.n	8010f66 <xQueueGiveMutexRecursive+0x2a>
 8010f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f52:	b672      	cpsid	i
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	b662      	cpsie	i
 8010f62:	60fb      	str	r3, [r7, #12]
 8010f64:	e7fe      	b.n	8010f64 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	689c      	ldr	r4, [r3, #8]
 8010f6a:	f001 fdf3 	bl	8012b54 <xTaskGetCurrentTaskHandle>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	429c      	cmp	r4, r3
 8010f72:	d111      	bne.n	8010f98 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	1e5a      	subs	r2, r3, #1
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d105      	bne.n	8010f92 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010f86:	2300      	movs	r3, #0
 8010f88:	2200      	movs	r2, #0
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	6938      	ldr	r0, [r7, #16]
 8010f8e:	f000 f8af 	bl	80110f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010f92:	2301      	movs	r3, #1
 8010f94:	617b      	str	r3, [r7, #20]
 8010f96:	e001      	b.n	8010f9c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010f9c:	697b      	ldr	r3, [r7, #20]
	}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	371c      	adds	r7, #28
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd90      	pop	{r4, r7, pc}

08010fa6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010fa6:	b590      	push	{r4, r7, lr}
 8010fa8:	b087      	sub	sp, #28
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
 8010fae:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d10b      	bne.n	8010fd2 <xQueueTakeMutexRecursive+0x2c>
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	b672      	cpsid	i
 8010fc0:	f383 8811 	msr	BASEPRI, r3
 8010fc4:	f3bf 8f6f 	isb	sy
 8010fc8:	f3bf 8f4f 	dsb	sy
 8010fcc:	b662      	cpsie	i
 8010fce:	60fb      	str	r3, [r7, #12]
 8010fd0:	e7fe      	b.n	8010fd0 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	689c      	ldr	r4, [r3, #8]
 8010fd6:	f001 fdbd 	bl	8012b54 <xTaskGetCurrentTaskHandle>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	429c      	cmp	r4, r3
 8010fde:	d107      	bne.n	8010ff0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	1c5a      	adds	r2, r3, #1
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8010fea:	2301      	movs	r3, #1
 8010fec:	617b      	str	r3, [r7, #20]
 8010fee:	e00c      	b.n	801100a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	6938      	ldr	r0, [r7, #16]
 8010ff4:	f000 fb8e 	bl	8011714 <xQueueSemaphoreTake>
 8010ff8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d004      	beq.n	801100a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	1c5a      	adds	r2, r3, #1
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801100a:	697b      	ldr	r3, [r7, #20]
	}
 801100c:	4618      	mov	r0, r3
 801100e:	371c      	adds	r7, #28
 8011010:	46bd      	mov	sp, r7
 8011012:	bd90      	pop	{r4, r7, pc}

08011014 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011014:	b580      	push	{r7, lr}
 8011016:	b08a      	sub	sp, #40	; 0x28
 8011018:	af02      	add	r7, sp, #8
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d10b      	bne.n	801103e <xQueueCreateCountingSemaphoreStatic+0x2a>
 8011026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102a:	b672      	cpsid	i
 801102c:	f383 8811 	msr	BASEPRI, r3
 8011030:	f3bf 8f6f 	isb	sy
 8011034:	f3bf 8f4f 	dsb	sy
 8011038:	b662      	cpsie	i
 801103a:	61bb      	str	r3, [r7, #24]
 801103c:	e7fe      	b.n	801103c <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	429a      	cmp	r2, r3
 8011044:	d90b      	bls.n	801105e <xQueueCreateCountingSemaphoreStatic+0x4a>
 8011046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801104a:	b672      	cpsid	i
 801104c:	f383 8811 	msr	BASEPRI, r3
 8011050:	f3bf 8f6f 	isb	sy
 8011054:	f3bf 8f4f 	dsb	sy
 8011058:	b662      	cpsie	i
 801105a:	617b      	str	r3, [r7, #20]
 801105c:	e7fe      	b.n	801105c <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801105e:	2302      	movs	r3, #2
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	2100      	movs	r1, #0
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f7ff fe39 	bl	8010ce0 <xQueueGenericCreateStatic>
 801106e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d002      	beq.n	801107c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	68ba      	ldr	r2, [r7, #8]
 801107a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801107c:	69fb      	ldr	r3, [r7, #28]
	}
 801107e:	4618      	mov	r0, r3
 8011080:	3720      	adds	r7, #32
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}

08011086 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011086:	b580      	push	{r7, lr}
 8011088:	b086      	sub	sp, #24
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
 801108e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10b      	bne.n	80110ae <xQueueCreateCountingSemaphore+0x28>
 8011096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109a:	b672      	cpsid	i
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	b662      	cpsie	i
 80110aa:	613b      	str	r3, [r7, #16]
 80110ac:	e7fe      	b.n	80110ac <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d90b      	bls.n	80110ce <xQueueCreateCountingSemaphore+0x48>
 80110b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ba:	b672      	cpsid	i
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	b662      	cpsie	i
 80110ca:	60fb      	str	r3, [r7, #12]
 80110cc:	e7fe      	b.n	80110cc <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80110ce:	2202      	movs	r2, #2
 80110d0:	2100      	movs	r1, #0
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f7ff fe81 	bl	8010dda <xQueueGenericCreate>
 80110d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d002      	beq.n	80110e6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	683a      	ldr	r2, [r7, #0]
 80110e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80110e6:	697b      	ldr	r3, [r7, #20]
	}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b08e      	sub	sp, #56	; 0x38
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
 80110fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80110fe:	2300      	movs	r3, #0
 8011100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10b      	bne.n	8011124 <xQueueGenericSend+0x34>
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	b672      	cpsid	i
 8011112:	f383 8811 	msr	BASEPRI, r3
 8011116:	f3bf 8f6f 	isb	sy
 801111a:	f3bf 8f4f 	dsb	sy
 801111e:	b662      	cpsie	i
 8011120:	62bb      	str	r3, [r7, #40]	; 0x28
 8011122:	e7fe      	b.n	8011122 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d103      	bne.n	8011132 <xQueueGenericSend+0x42>
 801112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801112e:	2b00      	cmp	r3, #0
 8011130:	d101      	bne.n	8011136 <xQueueGenericSend+0x46>
 8011132:	2301      	movs	r3, #1
 8011134:	e000      	b.n	8011138 <xQueueGenericSend+0x48>
 8011136:	2300      	movs	r3, #0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d10b      	bne.n	8011154 <xQueueGenericSend+0x64>
 801113c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011140:	b672      	cpsid	i
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	b662      	cpsie	i
 8011150:	627b      	str	r3, [r7, #36]	; 0x24
 8011152:	e7fe      	b.n	8011152 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	2b02      	cmp	r3, #2
 8011158:	d103      	bne.n	8011162 <xQueueGenericSend+0x72>
 801115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801115e:	2b01      	cmp	r3, #1
 8011160:	d101      	bne.n	8011166 <xQueueGenericSend+0x76>
 8011162:	2301      	movs	r3, #1
 8011164:	e000      	b.n	8011168 <xQueueGenericSend+0x78>
 8011166:	2300      	movs	r3, #0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d10b      	bne.n	8011184 <xQueueGenericSend+0x94>
 801116c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011170:	b672      	cpsid	i
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	b662      	cpsie	i
 8011180:	623b      	str	r3, [r7, #32]
 8011182:	e7fe      	b.n	8011182 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011184:	f001 fcf6 	bl	8012b74 <xTaskGetSchedulerState>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	d102      	bne.n	8011194 <xQueueGenericSend+0xa4>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <xQueueGenericSend+0xa8>
 8011194:	2301      	movs	r3, #1
 8011196:	e000      	b.n	801119a <xQueueGenericSend+0xaa>
 8011198:	2300      	movs	r3, #0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d10b      	bne.n	80111b6 <xQueueGenericSend+0xc6>
 801119e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a2:	b672      	cpsid	i
 80111a4:	f383 8811 	msr	BASEPRI, r3
 80111a8:	f3bf 8f6f 	isb	sy
 80111ac:	f3bf 8f4f 	dsb	sy
 80111b0:	b662      	cpsie	i
 80111b2:	61fb      	str	r3, [r7, #28]
 80111b4:	e7fe      	b.n	80111b4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111b6:	f002 fb1f 	bl	80137f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80111ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d302      	bcc.n	80111cc <xQueueGenericSend+0xdc>
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d129      	bne.n	8011220 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	68b9      	ldr	r1, [r7, #8]
 80111d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111d2:	f000 fc6e 	bl	8011ab2 <prvCopyDataToQueue>
 80111d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d010      	beq.n	8011202 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e2:	3324      	adds	r3, #36	; 0x24
 80111e4:	4618      	mov	r0, r3
 80111e6:	f001 faf7 	bl	80127d8 <xTaskRemoveFromEventList>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d013      	beq.n	8011218 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80111f0:	4b3f      	ldr	r3, [pc, #252]	; (80112f0 <xQueueGenericSend+0x200>)
 80111f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111f6:	601a      	str	r2, [r3, #0]
 80111f8:	f3bf 8f4f 	dsb	sy
 80111fc:	f3bf 8f6f 	isb	sy
 8011200:	e00a      	b.n	8011218 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d007      	beq.n	8011218 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011208:	4b39      	ldr	r3, [pc, #228]	; (80112f0 <xQueueGenericSend+0x200>)
 801120a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801120e:	601a      	str	r2, [r3, #0]
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011218:	f002 fb20 	bl	801385c <vPortExitCritical>
				return pdPASS;
 801121c:	2301      	movs	r3, #1
 801121e:	e063      	b.n	80112e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d103      	bne.n	801122e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011226:	f002 fb19 	bl	801385c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801122a:	2300      	movs	r3, #0
 801122c:	e05c      	b.n	80112e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011230:	2b00      	cmp	r3, #0
 8011232:	d106      	bne.n	8011242 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011234:	f107 0314 	add.w	r3, r7, #20
 8011238:	4618      	mov	r0, r3
 801123a:	f001 fb31 	bl	80128a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801123e:	2301      	movs	r3, #1
 8011240:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011242:	f002 fb0b 	bl	801385c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011246:	f001 f88f 	bl	8012368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801124a:	f002 fad5 	bl	80137f8 <vPortEnterCritical>
 801124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011254:	b25b      	sxtb	r3, r3
 8011256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125a:	d103      	bne.n	8011264 <xQueueGenericSend+0x174>
 801125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125e:	2200      	movs	r2, #0
 8011260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801126a:	b25b      	sxtb	r3, r3
 801126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011270:	d103      	bne.n	801127a <xQueueGenericSend+0x18a>
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	2200      	movs	r2, #0
 8011276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801127a:	f002 faef 	bl	801385c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801127e:	1d3a      	adds	r2, r7, #4
 8011280:	f107 0314 	add.w	r3, r7, #20
 8011284:	4611      	mov	r1, r2
 8011286:	4618      	mov	r0, r3
 8011288:	f001 fb20 	bl	80128cc <xTaskCheckForTimeOut>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	d124      	bne.n	80112dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011294:	f000 fd05 	bl	8011ca2 <prvIsQueueFull>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d018      	beq.n	80112d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a0:	3310      	adds	r3, #16
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	4611      	mov	r1, r2
 80112a6:	4618      	mov	r0, r3
 80112a8:	f001 fa44 	bl	8012734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80112ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ae:	f000 fc90 	bl	8011bd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80112b2:	f001 f867 	bl	8012384 <xTaskResumeAll>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f47f af7c 	bne.w	80111b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80112be:	4b0c      	ldr	r3, [pc, #48]	; (80112f0 <xQueueGenericSend+0x200>)
 80112c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112c4:	601a      	str	r2, [r3, #0]
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	f3bf 8f6f 	isb	sy
 80112ce:	e772      	b.n	80111b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80112d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112d2:	f000 fc7e 	bl	8011bd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112d6:	f001 f855 	bl	8012384 <xTaskResumeAll>
 80112da:	e76c      	b.n	80111b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80112dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112de:	f000 fc78 	bl	8011bd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112e2:	f001 f84f 	bl	8012384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80112e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3738      	adds	r7, #56	; 0x38
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	e000ed04 	.word	0xe000ed04

080112f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08e      	sub	sp, #56	; 0x38
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
 8011300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011308:	2b00      	cmp	r3, #0
 801130a:	d10b      	bne.n	8011324 <xQueueGenericSendFromISR+0x30>
 801130c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011310:	b672      	cpsid	i
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	b662      	cpsie	i
 8011320:	627b      	str	r3, [r7, #36]	; 0x24
 8011322:	e7fe      	b.n	8011322 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d103      	bne.n	8011332 <xQueueGenericSendFromISR+0x3e>
 801132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801132e:	2b00      	cmp	r3, #0
 8011330:	d101      	bne.n	8011336 <xQueueGenericSendFromISR+0x42>
 8011332:	2301      	movs	r3, #1
 8011334:	e000      	b.n	8011338 <xQueueGenericSendFromISR+0x44>
 8011336:	2300      	movs	r3, #0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d10b      	bne.n	8011354 <xQueueGenericSendFromISR+0x60>
 801133c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011340:	b672      	cpsid	i
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	b662      	cpsie	i
 8011350:	623b      	str	r3, [r7, #32]
 8011352:	e7fe      	b.n	8011352 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	2b02      	cmp	r3, #2
 8011358:	d103      	bne.n	8011362 <xQueueGenericSendFromISR+0x6e>
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801135e:	2b01      	cmp	r3, #1
 8011360:	d101      	bne.n	8011366 <xQueueGenericSendFromISR+0x72>
 8011362:	2301      	movs	r3, #1
 8011364:	e000      	b.n	8011368 <xQueueGenericSendFromISR+0x74>
 8011366:	2300      	movs	r3, #0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d10b      	bne.n	8011384 <xQueueGenericSendFromISR+0x90>
 801136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011370:	b672      	cpsid	i
 8011372:	f383 8811 	msr	BASEPRI, r3
 8011376:	f3bf 8f6f 	isb	sy
 801137a:	f3bf 8f4f 	dsb	sy
 801137e:	b662      	cpsie	i
 8011380:	61fb      	str	r3, [r7, #28]
 8011382:	e7fe      	b.n	8011382 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011384:	f002 fb18 	bl	80139b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011388:	f3ef 8211 	mrs	r2, BASEPRI
 801138c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011390:	b672      	cpsid	i
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	b662      	cpsie	i
 80113a0:	61ba      	str	r2, [r7, #24]
 80113a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80113a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80113a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d302      	bcc.n	80113ba <xQueueGenericSendFromISR+0xc6>
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	2b02      	cmp	r3, #2
 80113b8:	d12c      	bne.n	8011414 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80113ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80113c4:	683a      	ldr	r2, [r7, #0]
 80113c6:	68b9      	ldr	r1, [r7, #8]
 80113c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113ca:	f000 fb72 	bl	8011ab2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80113ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80113d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113d6:	d112      	bne.n	80113fe <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d016      	beq.n	801140e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e2:	3324      	adds	r3, #36	; 0x24
 80113e4:	4618      	mov	r0, r3
 80113e6:	f001 f9f7 	bl	80127d8 <xTaskRemoveFromEventList>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00e      	beq.n	801140e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d00b      	beq.n	801140e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2201      	movs	r2, #1
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	e007      	b.n	801140e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80113fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011402:	3301      	adds	r3, #1
 8011404:	b2db      	uxtb	r3, r3
 8011406:	b25a      	sxtb	r2, r3
 8011408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801140e:	2301      	movs	r3, #1
 8011410:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011412:	e001      	b.n	8011418 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011414:	2300      	movs	r3, #0
 8011416:	637b      	str	r3, [r7, #52]	; 0x34
 8011418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011424:	4618      	mov	r0, r3
 8011426:	3738      	adds	r7, #56	; 0x38
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b08e      	sub	sp, #56	; 0x38
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143c:	2b00      	cmp	r3, #0
 801143e:	d10b      	bne.n	8011458 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011444:	b672      	cpsid	i
 8011446:	f383 8811 	msr	BASEPRI, r3
 801144a:	f3bf 8f6f 	isb	sy
 801144e:	f3bf 8f4f 	dsb	sy
 8011452:	b662      	cpsie	i
 8011454:	623b      	str	r3, [r7, #32]
 8011456:	e7fe      	b.n	8011456 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00b      	beq.n	8011478 <xQueueGiveFromISR+0x4c>
 8011460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011464:	b672      	cpsid	i
 8011466:	f383 8811 	msr	BASEPRI, r3
 801146a:	f3bf 8f6f 	isb	sy
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	b662      	cpsie	i
 8011474:	61fb      	str	r3, [r7, #28]
 8011476:	e7fe      	b.n	8011476 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d103      	bne.n	8011488 <xQueueGiveFromISR+0x5c>
 8011480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011482:	689b      	ldr	r3, [r3, #8]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d101      	bne.n	801148c <xQueueGiveFromISR+0x60>
 8011488:	2301      	movs	r3, #1
 801148a:	e000      	b.n	801148e <xQueueGiveFromISR+0x62>
 801148c:	2300      	movs	r3, #0
 801148e:	2b00      	cmp	r3, #0
 8011490:	d10b      	bne.n	80114aa <xQueueGiveFromISR+0x7e>
 8011492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011496:	b672      	cpsid	i
 8011498:	f383 8811 	msr	BASEPRI, r3
 801149c:	f3bf 8f6f 	isb	sy
 80114a0:	f3bf 8f4f 	dsb	sy
 80114a4:	b662      	cpsie	i
 80114a6:	61bb      	str	r3, [r7, #24]
 80114a8:	e7fe      	b.n	80114a8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114aa:	f002 fa85 	bl	80139b8 <vPortValidateInterruptPriority>
	__asm volatile
 80114ae:	f3ef 8211 	mrs	r2, BASEPRI
 80114b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b6:	b672      	cpsid	i
 80114b8:	f383 8811 	msr	BASEPRI, r3
 80114bc:	f3bf 8f6f 	isb	sy
 80114c0:	f3bf 8f4f 	dsb	sy
 80114c4:	b662      	cpsie	i
 80114c6:	617a      	str	r2, [r7, #20]
 80114c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80114ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80114cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80114d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114da:	429a      	cmp	r2, r3
 80114dc:	d22b      	bcs.n	8011536 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80114de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80114e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80114f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80114f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f8:	d112      	bne.n	8011520 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d016      	beq.n	8011530 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011504:	3324      	adds	r3, #36	; 0x24
 8011506:	4618      	mov	r0, r3
 8011508:	f001 f966 	bl	80127d8 <xTaskRemoveFromEventList>
 801150c:	4603      	mov	r3, r0
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00e      	beq.n	8011530 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00b      	beq.n	8011530 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	2201      	movs	r2, #1
 801151c:	601a      	str	r2, [r3, #0]
 801151e:	e007      	b.n	8011530 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011524:	3301      	adds	r3, #1
 8011526:	b2db      	uxtb	r3, r3
 8011528:	b25a      	sxtb	r2, r3
 801152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011530:	2301      	movs	r3, #1
 8011532:	637b      	str	r3, [r7, #52]	; 0x34
 8011534:	e001      	b.n	801153a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011536:	2300      	movs	r3, #0
 8011538:	637b      	str	r3, [r7, #52]	; 0x34
 801153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011546:	4618      	mov	r0, r3
 8011548:	3738      	adds	r7, #56	; 0x38
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
	...

08011550 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b08c      	sub	sp, #48	; 0x30
 8011554:	af00      	add	r7, sp, #0
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	60b9      	str	r1, [r7, #8]
 801155a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801155c:	2300      	movs	r3, #0
 801155e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	2b00      	cmp	r3, #0
 8011568:	d10b      	bne.n	8011582 <xQueueReceive+0x32>
	__asm volatile
 801156a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156e:	b672      	cpsid	i
 8011570:	f383 8811 	msr	BASEPRI, r3
 8011574:	f3bf 8f6f 	isb	sy
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	b662      	cpsie	i
 801157e:	623b      	str	r3, [r7, #32]
 8011580:	e7fe      	b.n	8011580 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d103      	bne.n	8011590 <xQueueReceive+0x40>
 8011588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801158c:	2b00      	cmp	r3, #0
 801158e:	d101      	bne.n	8011594 <xQueueReceive+0x44>
 8011590:	2301      	movs	r3, #1
 8011592:	e000      	b.n	8011596 <xQueueReceive+0x46>
 8011594:	2300      	movs	r3, #0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10b      	bne.n	80115b2 <xQueueReceive+0x62>
 801159a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159e:	b672      	cpsid	i
 80115a0:	f383 8811 	msr	BASEPRI, r3
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	f3bf 8f4f 	dsb	sy
 80115ac:	b662      	cpsie	i
 80115ae:	61fb      	str	r3, [r7, #28]
 80115b0:	e7fe      	b.n	80115b0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115b2:	f001 fadf 	bl	8012b74 <xTaskGetSchedulerState>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d102      	bne.n	80115c2 <xQueueReceive+0x72>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d101      	bne.n	80115c6 <xQueueReceive+0x76>
 80115c2:	2301      	movs	r3, #1
 80115c4:	e000      	b.n	80115c8 <xQueueReceive+0x78>
 80115c6:	2300      	movs	r3, #0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d10b      	bne.n	80115e4 <xQueueReceive+0x94>
 80115cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d0:	b672      	cpsid	i
 80115d2:	f383 8811 	msr	BASEPRI, r3
 80115d6:	f3bf 8f6f 	isb	sy
 80115da:	f3bf 8f4f 	dsb	sy
 80115de:	b662      	cpsie	i
 80115e0:	61bb      	str	r3, [r7, #24]
 80115e2:	e7fe      	b.n	80115e2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115e4:	f002 f908 	bl	80137f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80115ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d01f      	beq.n	8011634 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80115f4:	68b9      	ldr	r1, [r7, #8]
 80115f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115f8:	f000 fac5 	bl	8011b86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80115fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fe:	1e5a      	subs	r2, r3, #1
 8011600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011602:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	691b      	ldr	r3, [r3, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00f      	beq.n	801162c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160e:	3310      	adds	r3, #16
 8011610:	4618      	mov	r0, r3
 8011612:	f001 f8e1 	bl	80127d8 <xTaskRemoveFromEventList>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d007      	beq.n	801162c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801161c:	4b3c      	ldr	r3, [pc, #240]	; (8011710 <xQueueReceive+0x1c0>)
 801161e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801162c:	f002 f916 	bl	801385c <vPortExitCritical>
				return pdPASS;
 8011630:	2301      	movs	r3, #1
 8011632:	e069      	b.n	8011708 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d103      	bne.n	8011642 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801163a:	f002 f90f 	bl	801385c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801163e:	2300      	movs	r3, #0
 8011640:	e062      	b.n	8011708 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011644:	2b00      	cmp	r3, #0
 8011646:	d106      	bne.n	8011656 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011648:	f107 0310 	add.w	r3, r7, #16
 801164c:	4618      	mov	r0, r3
 801164e:	f001 f927 	bl	80128a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011652:	2301      	movs	r3, #1
 8011654:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011656:	f002 f901 	bl	801385c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801165a:	f000 fe85 	bl	8012368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801165e:	f002 f8cb 	bl	80137f8 <vPortEnterCritical>
 8011662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011668:	b25b      	sxtb	r3, r3
 801166a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166e:	d103      	bne.n	8011678 <xQueueReceive+0x128>
 8011670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011672:	2200      	movs	r2, #0
 8011674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801167e:	b25b      	sxtb	r3, r3
 8011680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011684:	d103      	bne.n	801168e <xQueueReceive+0x13e>
 8011686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011688:	2200      	movs	r2, #0
 801168a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801168e:	f002 f8e5 	bl	801385c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011692:	1d3a      	adds	r2, r7, #4
 8011694:	f107 0310 	add.w	r3, r7, #16
 8011698:	4611      	mov	r1, r2
 801169a:	4618      	mov	r0, r3
 801169c:	f001 f916 	bl	80128cc <xTaskCheckForTimeOut>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d123      	bne.n	80116ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116a8:	f000 fae5 	bl	8011c76 <prvIsQueueEmpty>
 80116ac:	4603      	mov	r3, r0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d017      	beq.n	80116e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80116b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b4:	3324      	adds	r3, #36	; 0x24
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	4611      	mov	r1, r2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f001 f83a 	bl	8012734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80116c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116c2:	f000 fa86 	bl	8011bd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80116c6:	f000 fe5d 	bl	8012384 <xTaskResumeAll>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d189      	bne.n	80115e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80116d0:	4b0f      	ldr	r3, [pc, #60]	; (8011710 <xQueueReceive+0x1c0>)
 80116d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	f3bf 8f4f 	dsb	sy
 80116dc:	f3bf 8f6f 	isb	sy
 80116e0:	e780      	b.n	80115e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80116e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116e4:	f000 fa75 	bl	8011bd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116e8:	f000 fe4c 	bl	8012384 <xTaskResumeAll>
 80116ec:	e77a      	b.n	80115e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80116ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116f0:	f000 fa6f 	bl	8011bd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116f4:	f000 fe46 	bl	8012384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116fa:	f000 fabc 	bl	8011c76 <prvIsQueueEmpty>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	f43f af6f 	beq.w	80115e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011706:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011708:	4618      	mov	r0, r3
 801170a:	3730      	adds	r7, #48	; 0x30
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	e000ed04 	.word	0xe000ed04

08011714 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b08e      	sub	sp, #56	; 0x38
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801171e:	2300      	movs	r3, #0
 8011720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011726:	2300      	movs	r3, #0
 8011728:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d10b      	bne.n	8011748 <xQueueSemaphoreTake+0x34>
 8011730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011734:	b672      	cpsid	i
 8011736:	f383 8811 	msr	BASEPRI, r3
 801173a:	f3bf 8f6f 	isb	sy
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	b662      	cpsie	i
 8011744:	623b      	str	r3, [r7, #32]
 8011746:	e7fe      	b.n	8011746 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00b      	beq.n	8011768 <xQueueSemaphoreTake+0x54>
 8011750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011754:	b672      	cpsid	i
 8011756:	f383 8811 	msr	BASEPRI, r3
 801175a:	f3bf 8f6f 	isb	sy
 801175e:	f3bf 8f4f 	dsb	sy
 8011762:	b662      	cpsie	i
 8011764:	61fb      	str	r3, [r7, #28]
 8011766:	e7fe      	b.n	8011766 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011768:	f001 fa04 	bl	8012b74 <xTaskGetSchedulerState>
 801176c:	4603      	mov	r3, r0
 801176e:	2b00      	cmp	r3, #0
 8011770:	d102      	bne.n	8011778 <xQueueSemaphoreTake+0x64>
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d101      	bne.n	801177c <xQueueSemaphoreTake+0x68>
 8011778:	2301      	movs	r3, #1
 801177a:	e000      	b.n	801177e <xQueueSemaphoreTake+0x6a>
 801177c:	2300      	movs	r3, #0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d10b      	bne.n	801179a <xQueueSemaphoreTake+0x86>
 8011782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011786:	b672      	cpsid	i
 8011788:	f383 8811 	msr	BASEPRI, r3
 801178c:	f3bf 8f6f 	isb	sy
 8011790:	f3bf 8f4f 	dsb	sy
 8011794:	b662      	cpsie	i
 8011796:	61bb      	str	r3, [r7, #24]
 8011798:	e7fe      	b.n	8011798 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801179a:	f002 f82d 	bl	80137f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117a2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80117a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d024      	beq.n	80117f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80117aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ac:	1e5a      	subs	r2, r3, #1
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d104      	bne.n	80117c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80117ba:	f001 fb55 	bl	8012e68 <pvTaskIncrementMutexHeldCount>
 80117be:	4602      	mov	r2, r0
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c6:	691b      	ldr	r3, [r3, #16]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00f      	beq.n	80117ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ce:	3310      	adds	r3, #16
 80117d0:	4618      	mov	r0, r3
 80117d2:	f001 f801 	bl	80127d8 <xTaskRemoveFromEventList>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d007      	beq.n	80117ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80117dc:	4b54      	ldr	r3, [pc, #336]	; (8011930 <xQueueSemaphoreTake+0x21c>)
 80117de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117e2:	601a      	str	r2, [r3, #0]
 80117e4:	f3bf 8f4f 	dsb	sy
 80117e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80117ec:	f002 f836 	bl	801385c <vPortExitCritical>
				return pdPASS;
 80117f0:	2301      	movs	r3, #1
 80117f2:	e098      	b.n	8011926 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d112      	bne.n	8011820 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d00b      	beq.n	8011818 <xQueueSemaphoreTake+0x104>
 8011800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011804:	b672      	cpsid	i
 8011806:	f383 8811 	msr	BASEPRI, r3
 801180a:	f3bf 8f6f 	isb	sy
 801180e:	f3bf 8f4f 	dsb	sy
 8011812:	b662      	cpsie	i
 8011814:	617b      	str	r3, [r7, #20]
 8011816:	e7fe      	b.n	8011816 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011818:	f002 f820 	bl	801385c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801181c:	2300      	movs	r3, #0
 801181e:	e082      	b.n	8011926 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011826:	f107 030c 	add.w	r3, r7, #12
 801182a:	4618      	mov	r0, r3
 801182c:	f001 f838 	bl	80128a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011830:	2301      	movs	r3, #1
 8011832:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011834:	f002 f812 	bl	801385c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011838:	f000 fd96 	bl	8012368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801183c:	f001 ffdc 	bl	80137f8 <vPortEnterCritical>
 8011840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011846:	b25b      	sxtb	r3, r3
 8011848:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184c:	d103      	bne.n	8011856 <xQueueSemaphoreTake+0x142>
 801184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011850:	2200      	movs	r2, #0
 8011852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801185c:	b25b      	sxtb	r3, r3
 801185e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011862:	d103      	bne.n	801186c <xQueueSemaphoreTake+0x158>
 8011864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011866:	2200      	movs	r2, #0
 8011868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801186c:	f001 fff6 	bl	801385c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011870:	463a      	mov	r2, r7
 8011872:	f107 030c 	add.w	r3, r7, #12
 8011876:	4611      	mov	r1, r2
 8011878:	4618      	mov	r0, r3
 801187a:	f001 f827 	bl	80128cc <xTaskCheckForTimeOut>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d132      	bne.n	80118ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011886:	f000 f9f6 	bl	8011c76 <prvIsQueueEmpty>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d026      	beq.n	80118de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d109      	bne.n	80118ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011898:	f001 ffae 	bl	80137f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f001 f985 	bl	8012bb0 <xTaskPriorityInherit>
 80118a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80118a8:	f001 ffd8 	bl	801385c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80118ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ae:	3324      	adds	r3, #36	; 0x24
 80118b0:	683a      	ldr	r2, [r7, #0]
 80118b2:	4611      	mov	r1, r2
 80118b4:	4618      	mov	r0, r3
 80118b6:	f000 ff3d 	bl	8012734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80118ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118bc:	f000 f989 	bl	8011bd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80118c0:	f000 fd60 	bl	8012384 <xTaskResumeAll>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	f47f af67 	bne.w	801179a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80118cc:	4b18      	ldr	r3, [pc, #96]	; (8011930 <xQueueSemaphoreTake+0x21c>)
 80118ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118d2:	601a      	str	r2, [r3, #0]
 80118d4:	f3bf 8f4f 	dsb	sy
 80118d8:	f3bf 8f6f 	isb	sy
 80118dc:	e75d      	b.n	801179a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80118de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118e0:	f000 f977 	bl	8011bd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80118e4:	f000 fd4e 	bl	8012384 <xTaskResumeAll>
 80118e8:	e757      	b.n	801179a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80118ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118ec:	f000 f971 	bl	8011bd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80118f0:	f000 fd48 	bl	8012384 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80118f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118f6:	f000 f9be 	bl	8011c76 <prvIsQueueEmpty>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f43f af4c 	beq.w	801179a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00d      	beq.n	8011924 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011908:	f001 ff76 	bl	80137f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801190c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801190e:	f000 f8b8 	bl	8011a82 <prvGetDisinheritPriorityAfterTimeout>
 8011912:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011916:	689b      	ldr	r3, [r3, #8]
 8011918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801191a:	4618      	mov	r0, r3
 801191c:	f001 fa20 	bl	8012d60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011920:	f001 ff9c 	bl	801385c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011924:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011926:	4618      	mov	r0, r3
 8011928:	3738      	adds	r7, #56	; 0x38
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	e000ed04 	.word	0xe000ed04

08011934 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b08e      	sub	sp, #56	; 0x38
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011946:	2b00      	cmp	r3, #0
 8011948:	d10b      	bne.n	8011962 <xQueueReceiveFromISR+0x2e>
 801194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801194e:	b672      	cpsid	i
 8011950:	f383 8811 	msr	BASEPRI, r3
 8011954:	f3bf 8f6f 	isb	sy
 8011958:	f3bf 8f4f 	dsb	sy
 801195c:	b662      	cpsie	i
 801195e:	623b      	str	r3, [r7, #32]
 8011960:	e7fe      	b.n	8011960 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d103      	bne.n	8011970 <xQueueReceiveFromISR+0x3c>
 8011968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801196c:	2b00      	cmp	r3, #0
 801196e:	d101      	bne.n	8011974 <xQueueReceiveFromISR+0x40>
 8011970:	2301      	movs	r3, #1
 8011972:	e000      	b.n	8011976 <xQueueReceiveFromISR+0x42>
 8011974:	2300      	movs	r3, #0
 8011976:	2b00      	cmp	r3, #0
 8011978:	d10b      	bne.n	8011992 <xQueueReceiveFromISR+0x5e>
 801197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197e:	b672      	cpsid	i
 8011980:	f383 8811 	msr	BASEPRI, r3
 8011984:	f3bf 8f6f 	isb	sy
 8011988:	f3bf 8f4f 	dsb	sy
 801198c:	b662      	cpsie	i
 801198e:	61fb      	str	r3, [r7, #28]
 8011990:	e7fe      	b.n	8011990 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011992:	f002 f811 	bl	80139b8 <vPortValidateInterruptPriority>
	__asm volatile
 8011996:	f3ef 8211 	mrs	r2, BASEPRI
 801199a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801199e:	b672      	cpsid	i
 80119a0:	f383 8811 	msr	BASEPRI, r3
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	f3bf 8f4f 	dsb	sy
 80119ac:	b662      	cpsie	i
 80119ae:	61ba      	str	r2, [r7, #24]
 80119b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80119b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80119b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d02f      	beq.n	8011a22 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80119c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80119cc:	68b9      	ldr	r1, [r7, #8]
 80119ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119d0:	f000 f8d9 	bl	8011b86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80119d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d6:	1e5a      	subs	r2, r3, #1
 80119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80119dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80119e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e4:	d112      	bne.n	8011a0c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e8:	691b      	ldr	r3, [r3, #16]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d016      	beq.n	8011a1c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f0:	3310      	adds	r3, #16
 80119f2:	4618      	mov	r0, r3
 80119f4:	f000 fef0 	bl	80127d8 <xTaskRemoveFromEventList>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00e      	beq.n	8011a1c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00b      	beq.n	8011a1c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2201      	movs	r2, #1
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	e007      	b.n	8011a1c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a10:	3301      	adds	r3, #1
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	b25a      	sxtb	r2, r3
 8011a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8011a20:	e001      	b.n	8011a26 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8011a22:	2300      	movs	r3, #0
 8011a24:	637b      	str	r3, [r7, #52]	; 0x34
 8011a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3738      	adds	r7, #56	; 0x38
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b084      	sub	sp, #16
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d10b      	bne.n	8011a64 <vQueueDelete+0x2a>
	__asm volatile
 8011a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a50:	b672      	cpsid	i
 8011a52:	f383 8811 	msr	BASEPRI, r3
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	f3bf 8f4f 	dsb	sy
 8011a5e:	b662      	cpsie	i
 8011a60:	60bb      	str	r3, [r7, #8]
 8011a62:	e7fe      	b.n	8011a62 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f000 f95d 	bl	8011d24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d102      	bne.n	8011a7a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	f002 f8a9 	bl	8013bcc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011a7a:	bf00      	nop
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011a82:	b480      	push	{r7}
 8011a84:	b085      	sub	sp, #20
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d006      	beq.n	8011aa0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011a9c:	60fb      	str	r3, [r7, #12]
 8011a9e:	e001      	b.n	8011aa4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
	}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3714      	adds	r7, #20
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr

08011ab2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b086      	sub	sp, #24
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	60f8      	str	r0, [r7, #12]
 8011aba:	60b9      	str	r1, [r7, #8]
 8011abc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ac6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d10d      	bne.n	8011aec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d14d      	bne.n	8011b74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f001 f8cf 	bl	8012c80 <xTaskPriorityDisinherit>
 8011ae2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	609a      	str	r2, [r3, #8]
 8011aea:	e043      	b.n	8011b74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d119      	bne.n	8011b26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	6858      	ldr	r0, [r3, #4]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011afa:	461a      	mov	r2, r3
 8011afc:	68b9      	ldr	r1, [r7, #8]
 8011afe:	f002 ff1f 	bl	8014940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	685a      	ldr	r2, [r3, #4]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b0a:	441a      	add	r2, r3
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	685a      	ldr	r2, [r3, #4]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d32b      	bcc.n	8011b74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	681a      	ldr	r2, [r3, #0]
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	605a      	str	r2, [r3, #4]
 8011b24:	e026      	b.n	8011b74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	68d8      	ldr	r0, [r3, #12]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b2e:	461a      	mov	r2, r3
 8011b30:	68b9      	ldr	r1, [r7, #8]
 8011b32:	f002 ff05 	bl	8014940 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	68da      	ldr	r2, [r3, #12]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b3e:	425b      	negs	r3, r3
 8011b40:	441a      	add	r2, r3
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	68da      	ldr	r2, [r3, #12]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d207      	bcs.n	8011b62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	689a      	ldr	r2, [r3, #8]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b5a:	425b      	negs	r3, r3
 8011b5c:	441a      	add	r2, r3
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b02      	cmp	r3, #2
 8011b66:	d105      	bne.n	8011b74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d002      	beq.n	8011b74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	3b01      	subs	r3, #1
 8011b72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	1c5a      	adds	r2, r3, #1
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011b7c:	697b      	ldr	r3, [r7, #20]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3718      	adds	r7, #24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b082      	sub	sp, #8
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
 8011b8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d018      	beq.n	8011bca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	68da      	ldr	r2, [r3, #12]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ba0:	441a      	add	r2, r3
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68da      	ldr	r2, [r3, #12]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	689b      	ldr	r3, [r3, #8]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d303      	bcc.n	8011bba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	68d9      	ldr	r1, [r3, #12]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	6838      	ldr	r0, [r7, #0]
 8011bc6:	f002 febb 	bl	8014940 <memcpy>
	}
}
 8011bca:	bf00      	nop
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011bd2:	b580      	push	{r7, lr}
 8011bd4:	b084      	sub	sp, #16
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011bda:	f001 fe0d 	bl	80137f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011be4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011be6:	e011      	b.n	8011c0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d012      	beq.n	8011c16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	3324      	adds	r3, #36	; 0x24
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f000 fdef 	bl	80127d8 <xTaskRemoveFromEventList>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d001      	beq.n	8011c04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011c00:	f000 fec8 	bl	8012994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011c04:	7bfb      	ldrb	r3, [r7, #15]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	dce9      	bgt.n	8011be8 <prvUnlockQueue+0x16>
 8011c14:	e000      	b.n	8011c18 <prvUnlockQueue+0x46>
					break;
 8011c16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	22ff      	movs	r2, #255	; 0xff
 8011c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011c20:	f001 fe1c 	bl	801385c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011c24:	f001 fde8 	bl	80137f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c30:	e011      	b.n	8011c56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	691b      	ldr	r3, [r3, #16]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d012      	beq.n	8011c60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	3310      	adds	r3, #16
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f000 fdca 	bl	80127d8 <xTaskRemoveFromEventList>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d001      	beq.n	8011c4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011c4a:	f000 fea3 	bl	8012994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011c4e:	7bbb      	ldrb	r3, [r7, #14]
 8011c50:	3b01      	subs	r3, #1
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	dce9      	bgt.n	8011c32 <prvUnlockQueue+0x60>
 8011c5e:	e000      	b.n	8011c62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011c60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	22ff      	movs	r2, #255	; 0xff
 8011c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011c6a:	f001 fdf7 	bl	801385c <vPortExitCritical>
}
 8011c6e:	bf00      	nop
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}

08011c76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b084      	sub	sp, #16
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011c7e:	f001 fdbb 	bl	80137f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d102      	bne.n	8011c90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	60fb      	str	r3, [r7, #12]
 8011c8e:	e001      	b.n	8011c94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011c90:	2300      	movs	r3, #0
 8011c92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011c94:	f001 fde2 	bl	801385c <vPortExitCritical>

	return xReturn;
 8011c98:	68fb      	ldr	r3, [r7, #12]
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b084      	sub	sp, #16
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011caa:	f001 fda5 	bl	80137f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d102      	bne.n	8011cc0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	60fb      	str	r3, [r7, #12]
 8011cbe:	e001      	b.n	8011cc4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011cc4:	f001 fdca 	bl	801385c <vPortExitCritical>

	return xReturn;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
	...

08011cd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011cde:	2300      	movs	r3, #0
 8011ce0:	60fb      	str	r3, [r7, #12]
 8011ce2:	e014      	b.n	8011d0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011ce4:	4a0e      	ldr	r2, [pc, #56]	; (8011d20 <vQueueAddToRegistry+0x4c>)
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d10b      	bne.n	8011d08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011cf0:	490b      	ldr	r1, [pc, #44]	; (8011d20 <vQueueAddToRegistry+0x4c>)
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	683a      	ldr	r2, [r7, #0]
 8011cf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011cfa:	4a09      	ldr	r2, [pc, #36]	; (8011d20 <vQueueAddToRegistry+0x4c>)
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	00db      	lsls	r3, r3, #3
 8011d00:	4413      	add	r3, r2
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011d06:	e005      	b.n	8011d14 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	60fb      	str	r3, [r7, #12]
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2b07      	cmp	r3, #7
 8011d12:	d9e7      	bls.n	8011ce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011d14:	bf00      	nop
 8011d16:	3714      	adds	r7, #20
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr
 8011d20:	200115f0 	.word	0x200115f0

08011d24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	60fb      	str	r3, [r7, #12]
 8011d30:	e016      	b.n	8011d60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011d32:	4a10      	ldr	r2, [pc, #64]	; (8011d74 <vQueueUnregisterQueue+0x50>)
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	4413      	add	r3, r2
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d10b      	bne.n	8011d5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011d42:	4a0c      	ldr	r2, [pc, #48]	; (8011d74 <vQueueUnregisterQueue+0x50>)
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2100      	movs	r1, #0
 8011d48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011d4c:	4a09      	ldr	r2, [pc, #36]	; (8011d74 <vQueueUnregisterQueue+0x50>)
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	00db      	lsls	r3, r3, #3
 8011d52:	4413      	add	r3, r2
 8011d54:	2200      	movs	r2, #0
 8011d56:	605a      	str	r2, [r3, #4]
				break;
 8011d58:	e005      	b.n	8011d66 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	60fb      	str	r3, [r7, #12]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b07      	cmp	r3, #7
 8011d64:	d9e5      	bls.n	8011d32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011d66:	bf00      	nop
 8011d68:	3714      	adds	r7, #20
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop
 8011d74:	200115f0 	.word	0x200115f0

08011d78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b086      	sub	sp, #24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011d88:	f001 fd36 	bl	80137f8 <vPortEnterCritical>
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d92:	b25b      	sxtb	r3, r3
 8011d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d98:	d103      	bne.n	8011da2 <vQueueWaitForMessageRestricted+0x2a>
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011da8:	b25b      	sxtb	r3, r3
 8011daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dae:	d103      	bne.n	8011db8 <vQueueWaitForMessageRestricted+0x40>
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011db8:	f001 fd50 	bl	801385c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d106      	bne.n	8011dd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	3324      	adds	r3, #36	; 0x24
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	68b9      	ldr	r1, [r7, #8]
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f000 fcd7 	bl	8012780 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011dd2:	6978      	ldr	r0, [r7, #20]
 8011dd4:	f7ff fefd 	bl	8011bd2 <prvUnlockQueue>
	}
 8011dd8:	bf00      	nop
 8011dda:	3718      	adds	r7, #24
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b08e      	sub	sp, #56	; 0x38
 8011de4:	af04      	add	r7, sp, #16
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	607a      	str	r2, [r7, #4]
 8011dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d10b      	bne.n	8011e0c <xTaskCreateStatic+0x2c>
 8011df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df8:	b672      	cpsid	i
 8011dfa:	f383 8811 	msr	BASEPRI, r3
 8011dfe:	f3bf 8f6f 	isb	sy
 8011e02:	f3bf 8f4f 	dsb	sy
 8011e06:	b662      	cpsie	i
 8011e08:	623b      	str	r3, [r7, #32]
 8011e0a:	e7fe      	b.n	8011e0a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d10b      	bne.n	8011e2a <xTaskCreateStatic+0x4a>
 8011e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e16:	b672      	cpsid	i
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	b662      	cpsie	i
 8011e26:	61fb      	str	r3, [r7, #28]
 8011e28:	e7fe      	b.n	8011e28 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011e2a:	235c      	movs	r3, #92	; 0x5c
 8011e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	2b5c      	cmp	r3, #92	; 0x5c
 8011e32:	d00b      	beq.n	8011e4c <xTaskCreateStatic+0x6c>
 8011e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e38:	b672      	cpsid	i
 8011e3a:	f383 8811 	msr	BASEPRI, r3
 8011e3e:	f3bf 8f6f 	isb	sy
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	b662      	cpsie	i
 8011e48:	61bb      	str	r3, [r7, #24]
 8011e4a:	e7fe      	b.n	8011e4a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011e4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d01e      	beq.n	8011e92 <xTaskCreateStatic+0xb2>
 8011e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d01b      	beq.n	8011e92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	2202      	movs	r2, #2
 8011e68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	9303      	str	r3, [sp, #12]
 8011e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e72:	9302      	str	r3, [sp, #8]
 8011e74:	f107 0314 	add.w	r3, r7, #20
 8011e78:	9301      	str	r3, [sp, #4]
 8011e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7c:	9300      	str	r3, [sp, #0]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	687a      	ldr	r2, [r7, #4]
 8011e82:	68b9      	ldr	r1, [r7, #8]
 8011e84:	68f8      	ldr	r0, [r7, #12]
 8011e86:	f000 f850 	bl	8011f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e8c:	f000 f8de 	bl	801204c <prvAddNewTaskToReadyList>
 8011e90:	e001      	b.n	8011e96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011e92:	2300      	movs	r3, #0
 8011e94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011e96:	697b      	ldr	r3, [r7, #20]
	}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3728      	adds	r7, #40	; 0x28
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b08c      	sub	sp, #48	; 0x30
 8011ea4:	af04      	add	r7, sp, #16
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	603b      	str	r3, [r7, #0]
 8011eac:	4613      	mov	r3, r2
 8011eae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011eb0:	88fb      	ldrh	r3, [r7, #6]
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f001 fdc1 	bl	8013a3c <pvPortMalloc>
 8011eba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d00e      	beq.n	8011ee0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011ec2:	205c      	movs	r0, #92	; 0x5c
 8011ec4:	f001 fdba 	bl	8013a3c <pvPortMalloc>
 8011ec8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d003      	beq.n	8011ed8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	697a      	ldr	r2, [r7, #20]
 8011ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8011ed6:	e005      	b.n	8011ee4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011ed8:	6978      	ldr	r0, [r7, #20]
 8011eda:	f001 fe77 	bl	8013bcc <vPortFree>
 8011ede:	e001      	b.n	8011ee4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d017      	beq.n	8011f1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	2200      	movs	r2, #0
 8011eee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011ef2:	88fa      	ldrh	r2, [r7, #6]
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	9303      	str	r3, [sp, #12]
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	9302      	str	r3, [sp, #8]
 8011efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efe:	9301      	str	r3, [sp, #4]
 8011f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	68b9      	ldr	r1, [r7, #8]
 8011f08:	68f8      	ldr	r0, [r7, #12]
 8011f0a:	f000 f80e 	bl	8011f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f0e:	69f8      	ldr	r0, [r7, #28]
 8011f10:	f000 f89c 	bl	801204c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f14:	2301      	movs	r3, #1
 8011f16:	61bb      	str	r3, [r7, #24]
 8011f18:	e002      	b.n	8011f20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011f20:	69bb      	ldr	r3, [r7, #24]
	}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3720      	adds	r7, #32
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}

08011f2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011f2a:	b580      	push	{r7, lr}
 8011f2c:	b088      	sub	sp, #32
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	60f8      	str	r0, [r7, #12]
 8011f32:	60b9      	str	r1, [r7, #8]
 8011f34:	607a      	str	r2, [r7, #4]
 8011f36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	461a      	mov	r2, r3
 8011f42:	21a5      	movs	r1, #165	; 0xa5
 8011f44:	f002 fd07 	bl	8014956 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f4c:	6879      	ldr	r1, [r7, #4]
 8011f4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011f52:	440b      	add	r3, r1
 8011f54:	009b      	lsls	r3, r3, #2
 8011f56:	4413      	add	r3, r2
 8011f58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011f5a:	69bb      	ldr	r3, [r7, #24]
 8011f5c:	f023 0307 	bic.w	r3, r3, #7
 8011f60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011f62:	69bb      	ldr	r3, [r7, #24]
 8011f64:	f003 0307 	and.w	r3, r3, #7
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00b      	beq.n	8011f84 <prvInitialiseNewTask+0x5a>
 8011f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f70:	b672      	cpsid	i
 8011f72:	f383 8811 	msr	BASEPRI, r3
 8011f76:	f3bf 8f6f 	isb	sy
 8011f7a:	f3bf 8f4f 	dsb	sy
 8011f7e:	b662      	cpsie	i
 8011f80:	617b      	str	r3, [r7, #20]
 8011f82:	e7fe      	b.n	8011f82 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d01f      	beq.n	8011fca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	61fb      	str	r3, [r7, #28]
 8011f8e:	e012      	b.n	8011fb6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	4413      	add	r3, r2
 8011f96:	7819      	ldrb	r1, [r3, #0]
 8011f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	3334      	adds	r3, #52	; 0x34
 8011fa0:	460a      	mov	r2, r1
 8011fa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011fa4:	68ba      	ldr	r2, [r7, #8]
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	4413      	add	r3, r2
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d006      	beq.n	8011fbe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	61fb      	str	r3, [r7, #28]
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	2b0f      	cmp	r3, #15
 8011fba:	d9e9      	bls.n	8011f90 <prvInitialiseNewTask+0x66>
 8011fbc:	e000      	b.n	8011fc0 <prvInitialiseNewTask+0x96>
			{
				break;
 8011fbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011fc8:	e003      	b.n	8011fd2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fcc:	2200      	movs	r2, #0
 8011fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd4:	2b37      	cmp	r3, #55	; 0x37
 8011fd6:	d901      	bls.n	8011fdc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011fd8:	2337      	movs	r3, #55	; 0x37
 8011fda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fe6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fea:	2200      	movs	r2, #0
 8011fec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff0:	3304      	adds	r3, #4
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fe fd76 	bl	8010ae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffa:	3318      	adds	r3, #24
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fe fd71 	bl	8010ae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801200a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801201a:	2200      	movs	r2, #0
 801201c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012020:	2200      	movs	r2, #0
 8012022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012026:	683a      	ldr	r2, [r7, #0]
 8012028:	68f9      	ldr	r1, [r7, #12]
 801202a:	69b8      	ldr	r0, [r7, #24]
 801202c:	f001 fad8 	bl	80135e0 <pxPortInitialiseStack>
 8012030:	4602      	mov	r2, r0
 8012032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012034:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012042:	bf00      	nop
 8012044:	3720      	adds	r7, #32
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
	...

0801204c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012054:	f001 fbd0 	bl	80137f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012058:	4b2d      	ldr	r3, [pc, #180]	; (8012110 <prvAddNewTaskToReadyList+0xc4>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	3301      	adds	r3, #1
 801205e:	4a2c      	ldr	r2, [pc, #176]	; (8012110 <prvAddNewTaskToReadyList+0xc4>)
 8012060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012062:	4b2c      	ldr	r3, [pc, #176]	; (8012114 <prvAddNewTaskToReadyList+0xc8>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d109      	bne.n	801207e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801206a:	4a2a      	ldr	r2, [pc, #168]	; (8012114 <prvAddNewTaskToReadyList+0xc8>)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012070:	4b27      	ldr	r3, [pc, #156]	; (8012110 <prvAddNewTaskToReadyList+0xc4>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b01      	cmp	r3, #1
 8012076:	d110      	bne.n	801209a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012078:	f000 fcb0 	bl	80129dc <prvInitialiseTaskLists>
 801207c:	e00d      	b.n	801209a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801207e:	4b26      	ldr	r3, [pc, #152]	; (8012118 <prvAddNewTaskToReadyList+0xcc>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d109      	bne.n	801209a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012086:	4b23      	ldr	r3, [pc, #140]	; (8012114 <prvAddNewTaskToReadyList+0xc8>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012090:	429a      	cmp	r2, r3
 8012092:	d802      	bhi.n	801209a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012094:	4a1f      	ldr	r2, [pc, #124]	; (8012114 <prvAddNewTaskToReadyList+0xc8>)
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801209a:	4b20      	ldr	r3, [pc, #128]	; (801211c <prvAddNewTaskToReadyList+0xd0>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	3301      	adds	r3, #1
 80120a0:	4a1e      	ldr	r2, [pc, #120]	; (801211c <prvAddNewTaskToReadyList+0xd0>)
 80120a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80120a4:	4b1d      	ldr	r3, [pc, #116]	; (801211c <prvAddNewTaskToReadyList+0xd0>)
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120b0:	4b1b      	ldr	r3, [pc, #108]	; (8012120 <prvAddNewTaskToReadyList+0xd4>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d903      	bls.n	80120c0 <prvAddNewTaskToReadyList+0x74>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120bc:	4a18      	ldr	r2, [pc, #96]	; (8012120 <prvAddNewTaskToReadyList+0xd4>)
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120c4:	4613      	mov	r3, r2
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	4413      	add	r3, r2
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	4a15      	ldr	r2, [pc, #84]	; (8012124 <prvAddNewTaskToReadyList+0xd8>)
 80120ce:	441a      	add	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	3304      	adds	r3, #4
 80120d4:	4619      	mov	r1, r3
 80120d6:	4610      	mov	r0, r2
 80120d8:	f7fe fd11 	bl	8010afe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80120dc:	f001 fbbe 	bl	801385c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80120e0:	4b0d      	ldr	r3, [pc, #52]	; (8012118 <prvAddNewTaskToReadyList+0xcc>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d00e      	beq.n	8012106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80120e8:	4b0a      	ldr	r3, [pc, #40]	; (8012114 <prvAddNewTaskToReadyList+0xc8>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d207      	bcs.n	8012106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80120f6:	4b0c      	ldr	r3, [pc, #48]	; (8012128 <prvAddNewTaskToReadyList+0xdc>)
 80120f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120fc:	601a      	str	r2, [r3, #0]
 80120fe:	f3bf 8f4f 	dsb	sy
 8012102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012106:	bf00      	nop
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	20000e88 	.word	0x20000e88
 8012114:	200009b4 	.word	0x200009b4
 8012118:	20000e94 	.word	0x20000e94
 801211c:	20000ea4 	.word	0x20000ea4
 8012120:	20000e90 	.word	0x20000e90
 8012124:	200009b8 	.word	0x200009b8
 8012128:	e000ed04 	.word	0xe000ed04

0801212c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801212c:	b580      	push	{r7, lr}
 801212e:	b08a      	sub	sp, #40	; 0x28
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012136:	2300      	movs	r3, #0
 8012138:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10b      	bne.n	8012158 <vTaskDelayUntil+0x2c>
 8012140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012144:	b672      	cpsid	i
 8012146:	f383 8811 	msr	BASEPRI, r3
 801214a:	f3bf 8f6f 	isb	sy
 801214e:	f3bf 8f4f 	dsb	sy
 8012152:	b662      	cpsie	i
 8012154:	617b      	str	r3, [r7, #20]
 8012156:	e7fe      	b.n	8012156 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d10b      	bne.n	8012176 <vTaskDelayUntil+0x4a>
 801215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012162:	b672      	cpsid	i
 8012164:	f383 8811 	msr	BASEPRI, r3
 8012168:	f3bf 8f6f 	isb	sy
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	b662      	cpsie	i
 8012172:	613b      	str	r3, [r7, #16]
 8012174:	e7fe      	b.n	8012174 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8012176:	4b2a      	ldr	r3, [pc, #168]	; (8012220 <vTaskDelayUntil+0xf4>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d00b      	beq.n	8012196 <vTaskDelayUntil+0x6a>
 801217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012182:	b672      	cpsid	i
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	b662      	cpsie	i
 8012192:	60fb      	str	r3, [r7, #12]
 8012194:	e7fe      	b.n	8012194 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8012196:	f000 f8e7 	bl	8012368 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801219a:	4b22      	ldr	r3, [pc, #136]	; (8012224 <vTaskDelayUntil+0xf8>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	4413      	add	r3, r2
 80121a8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	6a3a      	ldr	r2, [r7, #32]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d20b      	bcs.n	80121cc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	69fa      	ldr	r2, [r7, #28]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d211      	bcs.n	80121e2 <vTaskDelayUntil+0xb6>
 80121be:	69fa      	ldr	r2, [r7, #28]
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d90d      	bls.n	80121e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80121c6:	2301      	movs	r3, #1
 80121c8:	627b      	str	r3, [r7, #36]	; 0x24
 80121ca:	e00a      	b.n	80121e2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	69fa      	ldr	r2, [r7, #28]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d303      	bcc.n	80121de <vTaskDelayUntil+0xb2>
 80121d6:	69fa      	ldr	r2, [r7, #28]
 80121d8:	6a3b      	ldr	r3, [r7, #32]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d901      	bls.n	80121e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80121de:	2301      	movs	r3, #1
 80121e0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	69fa      	ldr	r2, [r7, #28]
 80121e6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80121e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d006      	beq.n	80121fc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80121ee:	69fa      	ldr	r2, [r7, #28]
 80121f0:	6a3b      	ldr	r3, [r7, #32]
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	2100      	movs	r1, #0
 80121f6:	4618      	mov	r0, r3
 80121f8:	f000 fe4a 	bl	8012e90 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80121fc:	f000 f8c2 	bl	8012384 <xTaskResumeAll>
 8012200:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d107      	bne.n	8012218 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8012208:	4b07      	ldr	r3, [pc, #28]	; (8012228 <vTaskDelayUntil+0xfc>)
 801220a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801220e:	601a      	str	r2, [r3, #0]
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012218:	bf00      	nop
 801221a:	3728      	adds	r7, #40	; 0x28
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	20000eb0 	.word	0x20000eb0
 8012224:	20000e8c 	.word	0x20000e8c
 8012228:	e000ed04 	.word	0xe000ed04

0801222c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012234:	2300      	movs	r3, #0
 8012236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d018      	beq.n	8012270 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801223e:	4b14      	ldr	r3, [pc, #80]	; (8012290 <vTaskDelay+0x64>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d00b      	beq.n	801225e <vTaskDelay+0x32>
 8012246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224a:	b672      	cpsid	i
 801224c:	f383 8811 	msr	BASEPRI, r3
 8012250:	f3bf 8f6f 	isb	sy
 8012254:	f3bf 8f4f 	dsb	sy
 8012258:	b662      	cpsie	i
 801225a:	60bb      	str	r3, [r7, #8]
 801225c:	e7fe      	b.n	801225c <vTaskDelay+0x30>
			vTaskSuspendAll();
 801225e:	f000 f883 	bl	8012368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012262:	2100      	movs	r1, #0
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 fe13 	bl	8012e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801226a:	f000 f88b 	bl	8012384 <xTaskResumeAll>
 801226e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d107      	bne.n	8012286 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012276:	4b07      	ldr	r3, [pc, #28]	; (8012294 <vTaskDelay+0x68>)
 8012278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	f3bf 8f4f 	dsb	sy
 8012282:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012286:	bf00      	nop
 8012288:	3710      	adds	r7, #16
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	20000eb0 	.word	0x20000eb0
 8012294:	e000ed04 	.word	0xe000ed04

08012298 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b08a      	sub	sp, #40	; 0x28
 801229c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801229e:	2300      	movs	r3, #0
 80122a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80122a2:	2300      	movs	r3, #0
 80122a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80122a6:	463a      	mov	r2, r7
 80122a8:	1d39      	adds	r1, r7, #4
 80122aa:	f107 0308 	add.w	r3, r7, #8
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fe fbc4 	bl	8010a3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80122b4:	6839      	ldr	r1, [r7, #0]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	68ba      	ldr	r2, [r7, #8]
 80122ba:	9202      	str	r2, [sp, #8]
 80122bc:	9301      	str	r3, [sp, #4]
 80122be:	2300      	movs	r3, #0
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	2300      	movs	r3, #0
 80122c4:	460a      	mov	r2, r1
 80122c6:	4922      	ldr	r1, [pc, #136]	; (8012350 <vTaskStartScheduler+0xb8>)
 80122c8:	4822      	ldr	r0, [pc, #136]	; (8012354 <vTaskStartScheduler+0xbc>)
 80122ca:	f7ff fd89 	bl	8011de0 <xTaskCreateStatic>
 80122ce:	4602      	mov	r2, r0
 80122d0:	4b21      	ldr	r3, [pc, #132]	; (8012358 <vTaskStartScheduler+0xc0>)
 80122d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80122d4:	4b20      	ldr	r3, [pc, #128]	; (8012358 <vTaskStartScheduler+0xc0>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d002      	beq.n	80122e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80122dc:	2301      	movs	r3, #1
 80122de:	617b      	str	r3, [r7, #20]
 80122e0:	e001      	b.n	80122e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80122e2:	2300      	movs	r3, #0
 80122e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d102      	bne.n	80122f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80122ec:	f000 fe24 	bl	8012f38 <xTimerCreateTimerTask>
 80122f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d117      	bne.n	8012328 <vTaskStartScheduler+0x90>
 80122f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122fc:	b672      	cpsid	i
 80122fe:	f383 8811 	msr	BASEPRI, r3
 8012302:	f3bf 8f6f 	isb	sy
 8012306:	f3bf 8f4f 	dsb	sy
 801230a:	b662      	cpsie	i
 801230c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801230e:	4b13      	ldr	r3, [pc, #76]	; (801235c <vTaskStartScheduler+0xc4>)
 8012310:	f04f 32ff 	mov.w	r2, #4294967295
 8012314:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012316:	4b12      	ldr	r3, [pc, #72]	; (8012360 <vTaskStartScheduler+0xc8>)
 8012318:	2201      	movs	r2, #1
 801231a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801231c:	4b11      	ldr	r3, [pc, #68]	; (8012364 <vTaskStartScheduler+0xcc>)
 801231e:	2200      	movs	r2, #0
 8012320:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012322:	f001 f9ed 	bl	8013700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012326:	e00f      	b.n	8012348 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232e:	d10b      	bne.n	8012348 <vTaskStartScheduler+0xb0>
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	b672      	cpsid	i
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	b662      	cpsie	i
 8012344:	60fb      	str	r3, [r7, #12]
 8012346:	e7fe      	b.n	8012346 <vTaskStartScheduler+0xae>
}
 8012348:	bf00      	nop
 801234a:	3718      	adds	r7, #24
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}
 8012350:	08016830 	.word	0x08016830
 8012354:	080129ad 	.word	0x080129ad
 8012358:	20000eac 	.word	0x20000eac
 801235c:	20000ea8 	.word	0x20000ea8
 8012360:	20000e94 	.word	0x20000e94
 8012364:	20000e8c 	.word	0x20000e8c

08012368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012368:	b480      	push	{r7}
 801236a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801236c:	4b04      	ldr	r3, [pc, #16]	; (8012380 <vTaskSuspendAll+0x18>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	3301      	adds	r3, #1
 8012372:	4a03      	ldr	r2, [pc, #12]	; (8012380 <vTaskSuspendAll+0x18>)
 8012374:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012376:	bf00      	nop
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr
 8012380:	20000eb0 	.word	0x20000eb0

08012384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801238a:	2300      	movs	r3, #0
 801238c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801238e:	2300      	movs	r3, #0
 8012390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012392:	4b42      	ldr	r3, [pc, #264]	; (801249c <xTaskResumeAll+0x118>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d10b      	bne.n	80123b2 <xTaskResumeAll+0x2e>
 801239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801239e:	b672      	cpsid	i
 80123a0:	f383 8811 	msr	BASEPRI, r3
 80123a4:	f3bf 8f6f 	isb	sy
 80123a8:	f3bf 8f4f 	dsb	sy
 80123ac:	b662      	cpsie	i
 80123ae:	603b      	str	r3, [r7, #0]
 80123b0:	e7fe      	b.n	80123b0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80123b2:	f001 fa21 	bl	80137f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80123b6:	4b39      	ldr	r3, [pc, #228]	; (801249c <xTaskResumeAll+0x118>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	3b01      	subs	r3, #1
 80123bc:	4a37      	ldr	r2, [pc, #220]	; (801249c <xTaskResumeAll+0x118>)
 80123be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123c0:	4b36      	ldr	r3, [pc, #216]	; (801249c <xTaskResumeAll+0x118>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d162      	bne.n	801248e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80123c8:	4b35      	ldr	r3, [pc, #212]	; (80124a0 <xTaskResumeAll+0x11c>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d05e      	beq.n	801248e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80123d0:	e02f      	b.n	8012432 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123d2:	4b34      	ldr	r3, [pc, #208]	; (80124a4 <xTaskResumeAll+0x120>)
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	3318      	adds	r3, #24
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fe fbea 	bl	8010bb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	3304      	adds	r3, #4
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fe fbe5 	bl	8010bb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123f2:	4b2d      	ldr	r3, [pc, #180]	; (80124a8 <xTaskResumeAll+0x124>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d903      	bls.n	8012402 <xTaskResumeAll+0x7e>
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123fe:	4a2a      	ldr	r2, [pc, #168]	; (80124a8 <xTaskResumeAll+0x124>)
 8012400:	6013      	str	r3, [r2, #0]
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012406:	4613      	mov	r3, r2
 8012408:	009b      	lsls	r3, r3, #2
 801240a:	4413      	add	r3, r2
 801240c:	009b      	lsls	r3, r3, #2
 801240e:	4a27      	ldr	r2, [pc, #156]	; (80124ac <xTaskResumeAll+0x128>)
 8012410:	441a      	add	r2, r3
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	3304      	adds	r3, #4
 8012416:	4619      	mov	r1, r3
 8012418:	4610      	mov	r0, r2
 801241a:	f7fe fb70 	bl	8010afe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012422:	4b23      	ldr	r3, [pc, #140]	; (80124b0 <xTaskResumeAll+0x12c>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012428:	429a      	cmp	r2, r3
 801242a:	d302      	bcc.n	8012432 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801242c:	4b21      	ldr	r3, [pc, #132]	; (80124b4 <xTaskResumeAll+0x130>)
 801242e:	2201      	movs	r2, #1
 8012430:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012432:	4b1c      	ldr	r3, [pc, #112]	; (80124a4 <xTaskResumeAll+0x120>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1cb      	bne.n	80123d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d001      	beq.n	8012444 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012440:	f000 fb68 	bl	8012b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012444:	4b1c      	ldr	r3, [pc, #112]	; (80124b8 <xTaskResumeAll+0x134>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d010      	beq.n	8012472 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012450:	f000 f858 	bl	8012504 <xTaskIncrementTick>
 8012454:	4603      	mov	r3, r0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d002      	beq.n	8012460 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801245a:	4b16      	ldr	r3, [pc, #88]	; (80124b4 <xTaskResumeAll+0x130>)
 801245c:	2201      	movs	r2, #1
 801245e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	3b01      	subs	r3, #1
 8012464:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d1f1      	bne.n	8012450 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801246c:	4b12      	ldr	r3, [pc, #72]	; (80124b8 <xTaskResumeAll+0x134>)
 801246e:	2200      	movs	r2, #0
 8012470:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012472:	4b10      	ldr	r3, [pc, #64]	; (80124b4 <xTaskResumeAll+0x130>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d009      	beq.n	801248e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801247a:	2301      	movs	r3, #1
 801247c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801247e:	4b0f      	ldr	r3, [pc, #60]	; (80124bc <xTaskResumeAll+0x138>)
 8012480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012484:	601a      	str	r2, [r3, #0]
 8012486:	f3bf 8f4f 	dsb	sy
 801248a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801248e:	f001 f9e5 	bl	801385c <vPortExitCritical>

	return xAlreadyYielded;
 8012492:	68bb      	ldr	r3, [r7, #8]
}
 8012494:	4618      	mov	r0, r3
 8012496:	3710      	adds	r7, #16
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	20000eb0 	.word	0x20000eb0
 80124a0:	20000e88 	.word	0x20000e88
 80124a4:	20000e48 	.word	0x20000e48
 80124a8:	20000e90 	.word	0x20000e90
 80124ac:	200009b8 	.word	0x200009b8
 80124b0:	200009b4 	.word	0x200009b4
 80124b4:	20000e9c 	.word	0x20000e9c
 80124b8:	20000e98 	.word	0x20000e98
 80124bc:	e000ed04 	.word	0xe000ed04

080124c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80124c0:	b480      	push	{r7}
 80124c2:	b083      	sub	sp, #12
 80124c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80124c6:	4b05      	ldr	r3, [pc, #20]	; (80124dc <xTaskGetTickCount+0x1c>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80124cc:	687b      	ldr	r3, [r7, #4]
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	370c      	adds	r7, #12
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop
 80124dc:	20000e8c 	.word	0x20000e8c

080124e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80124e6:	f001 fa67 	bl	80139b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80124ea:	2300      	movs	r3, #0
 80124ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80124ee:	4b04      	ldr	r3, [pc, #16]	; (8012500 <xTaskGetTickCountFromISR+0x20>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80124f4:	683b      	ldr	r3, [r7, #0]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	20000e8c 	.word	0x20000e8c

08012504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b086      	sub	sp, #24
 8012508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801250a:	2300      	movs	r3, #0
 801250c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801250e:	4b4f      	ldr	r3, [pc, #316]	; (801264c <xTaskIncrementTick+0x148>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	f040 808a 	bne.w	801262c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012518:	4b4d      	ldr	r3, [pc, #308]	; (8012650 <xTaskIncrementTick+0x14c>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	3301      	adds	r3, #1
 801251e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012520:	4a4b      	ldr	r2, [pc, #300]	; (8012650 <xTaskIncrementTick+0x14c>)
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d121      	bne.n	8012570 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801252c:	4b49      	ldr	r3, [pc, #292]	; (8012654 <xTaskIncrementTick+0x150>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00b      	beq.n	801254e <xTaskIncrementTick+0x4a>
 8012536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253a:	b672      	cpsid	i
 801253c:	f383 8811 	msr	BASEPRI, r3
 8012540:	f3bf 8f6f 	isb	sy
 8012544:	f3bf 8f4f 	dsb	sy
 8012548:	b662      	cpsie	i
 801254a:	603b      	str	r3, [r7, #0]
 801254c:	e7fe      	b.n	801254c <xTaskIncrementTick+0x48>
 801254e:	4b41      	ldr	r3, [pc, #260]	; (8012654 <xTaskIncrementTick+0x150>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	60fb      	str	r3, [r7, #12]
 8012554:	4b40      	ldr	r3, [pc, #256]	; (8012658 <xTaskIncrementTick+0x154>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	4a3e      	ldr	r2, [pc, #248]	; (8012654 <xTaskIncrementTick+0x150>)
 801255a:	6013      	str	r3, [r2, #0]
 801255c:	4a3e      	ldr	r2, [pc, #248]	; (8012658 <xTaskIncrementTick+0x154>)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	6013      	str	r3, [r2, #0]
 8012562:	4b3e      	ldr	r3, [pc, #248]	; (801265c <xTaskIncrementTick+0x158>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	3301      	adds	r3, #1
 8012568:	4a3c      	ldr	r2, [pc, #240]	; (801265c <xTaskIncrementTick+0x158>)
 801256a:	6013      	str	r3, [r2, #0]
 801256c:	f000 fad2 	bl	8012b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012570:	4b3b      	ldr	r3, [pc, #236]	; (8012660 <xTaskIncrementTick+0x15c>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	693a      	ldr	r2, [r7, #16]
 8012576:	429a      	cmp	r2, r3
 8012578:	d349      	bcc.n	801260e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801257a:	4b36      	ldr	r3, [pc, #216]	; (8012654 <xTaskIncrementTick+0x150>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d104      	bne.n	801258e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012584:	4b36      	ldr	r3, [pc, #216]	; (8012660 <xTaskIncrementTick+0x15c>)
 8012586:	f04f 32ff 	mov.w	r2, #4294967295
 801258a:	601a      	str	r2, [r3, #0]
					break;
 801258c:	e03f      	b.n	801260e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801258e:	4b31      	ldr	r3, [pc, #196]	; (8012654 <xTaskIncrementTick+0x150>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	68db      	ldr	r3, [r3, #12]
 8012596:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801259e:	693a      	ldr	r2, [r7, #16]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d203      	bcs.n	80125ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80125a6:	4a2e      	ldr	r2, [pc, #184]	; (8012660 <xTaskIncrementTick+0x15c>)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80125ac:	e02f      	b.n	801260e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	3304      	adds	r3, #4
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fe fb00 	bl	8010bb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d004      	beq.n	80125ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	3318      	adds	r3, #24
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fe faf7 	bl	8010bb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ce:	4b25      	ldr	r3, [pc, #148]	; (8012664 <xTaskIncrementTick+0x160>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d903      	bls.n	80125de <xTaskIncrementTick+0xda>
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125da:	4a22      	ldr	r2, [pc, #136]	; (8012664 <xTaskIncrementTick+0x160>)
 80125dc:	6013      	str	r3, [r2, #0]
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125e2:	4613      	mov	r3, r2
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	4413      	add	r3, r2
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	4a1f      	ldr	r2, [pc, #124]	; (8012668 <xTaskIncrementTick+0x164>)
 80125ec:	441a      	add	r2, r3
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	3304      	adds	r3, #4
 80125f2:	4619      	mov	r1, r3
 80125f4:	4610      	mov	r0, r2
 80125f6:	f7fe fa82 	bl	8010afe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125fe:	4b1b      	ldr	r3, [pc, #108]	; (801266c <xTaskIncrementTick+0x168>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012604:	429a      	cmp	r2, r3
 8012606:	d3b8      	bcc.n	801257a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012608:	2301      	movs	r3, #1
 801260a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801260c:	e7b5      	b.n	801257a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801260e:	4b17      	ldr	r3, [pc, #92]	; (801266c <xTaskIncrementTick+0x168>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012614:	4914      	ldr	r1, [pc, #80]	; (8012668 <xTaskIncrementTick+0x164>)
 8012616:	4613      	mov	r3, r2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	4413      	add	r3, r2
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	440b      	add	r3, r1
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2b01      	cmp	r3, #1
 8012624:	d907      	bls.n	8012636 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8012626:	2301      	movs	r3, #1
 8012628:	617b      	str	r3, [r7, #20]
 801262a:	e004      	b.n	8012636 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801262c:	4b10      	ldr	r3, [pc, #64]	; (8012670 <xTaskIncrementTick+0x16c>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	3301      	adds	r3, #1
 8012632:	4a0f      	ldr	r2, [pc, #60]	; (8012670 <xTaskIncrementTick+0x16c>)
 8012634:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012636:	4b0f      	ldr	r3, [pc, #60]	; (8012674 <xTaskIncrementTick+0x170>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d001      	beq.n	8012642 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801263e:	2301      	movs	r3, #1
 8012640:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012642:	697b      	ldr	r3, [r7, #20]
}
 8012644:	4618      	mov	r0, r3
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	20000eb0 	.word	0x20000eb0
 8012650:	20000e8c 	.word	0x20000e8c
 8012654:	20000e40 	.word	0x20000e40
 8012658:	20000e44 	.word	0x20000e44
 801265c:	20000ea0 	.word	0x20000ea0
 8012660:	20000ea8 	.word	0x20000ea8
 8012664:	20000e90 	.word	0x20000e90
 8012668:	200009b8 	.word	0x200009b8
 801266c:	200009b4 	.word	0x200009b4
 8012670:	20000e98 	.word	0x20000e98
 8012674:	20000e9c 	.word	0x20000e9c

08012678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012678:	b480      	push	{r7}
 801267a:	b085      	sub	sp, #20
 801267c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801267e:	4b28      	ldr	r3, [pc, #160]	; (8012720 <vTaskSwitchContext+0xa8>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d003      	beq.n	801268e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012686:	4b27      	ldr	r3, [pc, #156]	; (8012724 <vTaskSwitchContext+0xac>)
 8012688:	2201      	movs	r2, #1
 801268a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801268c:	e042      	b.n	8012714 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 801268e:	4b25      	ldr	r3, [pc, #148]	; (8012724 <vTaskSwitchContext+0xac>)
 8012690:	2200      	movs	r2, #0
 8012692:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012694:	4b24      	ldr	r3, [pc, #144]	; (8012728 <vTaskSwitchContext+0xb0>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	60fb      	str	r3, [r7, #12]
 801269a:	e011      	b.n	80126c0 <vTaskSwitchContext+0x48>
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d10b      	bne.n	80126ba <vTaskSwitchContext+0x42>
 80126a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a6:	b672      	cpsid	i
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	b662      	cpsie	i
 80126b6:	607b      	str	r3, [r7, #4]
 80126b8:	e7fe      	b.n	80126b8 <vTaskSwitchContext+0x40>
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	3b01      	subs	r3, #1
 80126be:	60fb      	str	r3, [r7, #12]
 80126c0:	491a      	ldr	r1, [pc, #104]	; (801272c <vTaskSwitchContext+0xb4>)
 80126c2:	68fa      	ldr	r2, [r7, #12]
 80126c4:	4613      	mov	r3, r2
 80126c6:	009b      	lsls	r3, r3, #2
 80126c8:	4413      	add	r3, r2
 80126ca:	009b      	lsls	r3, r3, #2
 80126cc:	440b      	add	r3, r1
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d0e3      	beq.n	801269c <vTaskSwitchContext+0x24>
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	4613      	mov	r3, r2
 80126d8:	009b      	lsls	r3, r3, #2
 80126da:	4413      	add	r3, r2
 80126dc:	009b      	lsls	r3, r3, #2
 80126de:	4a13      	ldr	r2, [pc, #76]	; (801272c <vTaskSwitchContext+0xb4>)
 80126e0:	4413      	add	r3, r2
 80126e2:	60bb      	str	r3, [r7, #8]
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	685a      	ldr	r2, [r3, #4]
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	605a      	str	r2, [r3, #4]
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	3308      	adds	r3, #8
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d104      	bne.n	8012704 <vTaskSwitchContext+0x8c>
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	685a      	ldr	r2, [r3, #4]
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	605a      	str	r2, [r3, #4]
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	68db      	ldr	r3, [r3, #12]
 801270a:	4a09      	ldr	r2, [pc, #36]	; (8012730 <vTaskSwitchContext+0xb8>)
 801270c:	6013      	str	r3, [r2, #0]
 801270e:	4a06      	ldr	r2, [pc, #24]	; (8012728 <vTaskSwitchContext+0xb0>)
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	6013      	str	r3, [r2, #0]
}
 8012714:	bf00      	nop
 8012716:	3714      	adds	r7, #20
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr
 8012720:	20000eb0 	.word	0x20000eb0
 8012724:	20000e9c 	.word	0x20000e9c
 8012728:	20000e90 	.word	0x20000e90
 801272c:	200009b8 	.word	0x200009b8
 8012730:	200009b4 	.word	0x200009b4

08012734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10b      	bne.n	801275c <vTaskPlaceOnEventList+0x28>
 8012744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012748:	b672      	cpsid	i
 801274a:	f383 8811 	msr	BASEPRI, r3
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f3bf 8f4f 	dsb	sy
 8012756:	b662      	cpsie	i
 8012758:	60fb      	str	r3, [r7, #12]
 801275a:	e7fe      	b.n	801275a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801275c:	4b07      	ldr	r3, [pc, #28]	; (801277c <vTaskPlaceOnEventList+0x48>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	3318      	adds	r3, #24
 8012762:	4619      	mov	r1, r3
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7fe f9ee 	bl	8010b46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801276a:	2101      	movs	r1, #1
 801276c:	6838      	ldr	r0, [r7, #0]
 801276e:	f000 fb8f 	bl	8012e90 <prvAddCurrentTaskToDelayedList>
}
 8012772:	bf00      	nop
 8012774:	3710      	adds	r7, #16
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	200009b4 	.word	0x200009b4

08012780 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d10b      	bne.n	80127aa <vTaskPlaceOnEventListRestricted+0x2a>
 8012792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012796:	b672      	cpsid	i
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	b662      	cpsie	i
 80127a6:	617b      	str	r3, [r7, #20]
 80127a8:	e7fe      	b.n	80127a8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80127aa:	4b0a      	ldr	r3, [pc, #40]	; (80127d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	3318      	adds	r3, #24
 80127b0:	4619      	mov	r1, r3
 80127b2:	68f8      	ldr	r0, [r7, #12]
 80127b4:	f7fe f9a3 	bl	8010afe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d002      	beq.n	80127c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80127be:	f04f 33ff 	mov.w	r3, #4294967295
 80127c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80127c4:	6879      	ldr	r1, [r7, #4]
 80127c6:	68b8      	ldr	r0, [r7, #8]
 80127c8:	f000 fb62 	bl	8012e90 <prvAddCurrentTaskToDelayedList>
	}
 80127cc:	bf00      	nop
 80127ce:	3718      	adds	r7, #24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	200009b4 	.word	0x200009b4

080127d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b086      	sub	sp, #24
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	68db      	ldr	r3, [r3, #12]
 80127e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d10b      	bne.n	8012806 <xTaskRemoveFromEventList+0x2e>
 80127ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f2:	b672      	cpsid	i
 80127f4:	f383 8811 	msr	BASEPRI, r3
 80127f8:	f3bf 8f6f 	isb	sy
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	b662      	cpsie	i
 8012802:	60fb      	str	r3, [r7, #12]
 8012804:	e7fe      	b.n	8012804 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	3318      	adds	r3, #24
 801280a:	4618      	mov	r0, r3
 801280c:	f7fe f9d4 	bl	8010bb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012810:	4b1d      	ldr	r3, [pc, #116]	; (8012888 <xTaskRemoveFromEventList+0xb0>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d11d      	bne.n	8012854 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	3304      	adds	r3, #4
 801281c:	4618      	mov	r0, r3
 801281e:	f7fe f9cb 	bl	8010bb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012826:	4b19      	ldr	r3, [pc, #100]	; (801288c <xTaskRemoveFromEventList+0xb4>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	429a      	cmp	r2, r3
 801282c:	d903      	bls.n	8012836 <xTaskRemoveFromEventList+0x5e>
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012832:	4a16      	ldr	r2, [pc, #88]	; (801288c <xTaskRemoveFromEventList+0xb4>)
 8012834:	6013      	str	r3, [r2, #0]
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801283a:	4613      	mov	r3, r2
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	4413      	add	r3, r2
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	4a13      	ldr	r2, [pc, #76]	; (8012890 <xTaskRemoveFromEventList+0xb8>)
 8012844:	441a      	add	r2, r3
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	3304      	adds	r3, #4
 801284a:	4619      	mov	r1, r3
 801284c:	4610      	mov	r0, r2
 801284e:	f7fe f956 	bl	8010afe <vListInsertEnd>
 8012852:	e005      	b.n	8012860 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	3318      	adds	r3, #24
 8012858:	4619      	mov	r1, r3
 801285a:	480e      	ldr	r0, [pc, #56]	; (8012894 <xTaskRemoveFromEventList+0xbc>)
 801285c:	f7fe f94f 	bl	8010afe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012864:	4b0c      	ldr	r3, [pc, #48]	; (8012898 <xTaskRemoveFromEventList+0xc0>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801286a:	429a      	cmp	r2, r3
 801286c:	d905      	bls.n	801287a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801286e:	2301      	movs	r3, #1
 8012870:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012872:	4b0a      	ldr	r3, [pc, #40]	; (801289c <xTaskRemoveFromEventList+0xc4>)
 8012874:	2201      	movs	r2, #1
 8012876:	601a      	str	r2, [r3, #0]
 8012878:	e001      	b.n	801287e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801287a:	2300      	movs	r3, #0
 801287c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801287e:	697b      	ldr	r3, [r7, #20]
}
 8012880:	4618      	mov	r0, r3
 8012882:	3718      	adds	r7, #24
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	20000eb0 	.word	0x20000eb0
 801288c:	20000e90 	.word	0x20000e90
 8012890:	200009b8 	.word	0x200009b8
 8012894:	20000e48 	.word	0x20000e48
 8012898:	200009b4 	.word	0x200009b4
 801289c:	20000e9c 	.word	0x20000e9c

080128a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80128a8:	4b06      	ldr	r3, [pc, #24]	; (80128c4 <vTaskInternalSetTimeOutState+0x24>)
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80128b0:	4b05      	ldr	r3, [pc, #20]	; (80128c8 <vTaskInternalSetTimeOutState+0x28>)
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	605a      	str	r2, [r3, #4]
}
 80128b8:	bf00      	nop
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr
 80128c4:	20000ea0 	.word	0x20000ea0
 80128c8:	20000e8c 	.word	0x20000e8c

080128cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b088      	sub	sp, #32
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d10b      	bne.n	80128f4 <xTaskCheckForTimeOut+0x28>
 80128dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e0:	b672      	cpsid	i
 80128e2:	f383 8811 	msr	BASEPRI, r3
 80128e6:	f3bf 8f6f 	isb	sy
 80128ea:	f3bf 8f4f 	dsb	sy
 80128ee:	b662      	cpsie	i
 80128f0:	613b      	str	r3, [r7, #16]
 80128f2:	e7fe      	b.n	80128f2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10b      	bne.n	8012912 <xTaskCheckForTimeOut+0x46>
 80128fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fe:	b672      	cpsid	i
 8012900:	f383 8811 	msr	BASEPRI, r3
 8012904:	f3bf 8f6f 	isb	sy
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	b662      	cpsie	i
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	e7fe      	b.n	8012910 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8012912:	f000 ff71 	bl	80137f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012916:	4b1d      	ldr	r3, [pc, #116]	; (801298c <xTaskCheckForTimeOut+0xc0>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	69ba      	ldr	r2, [r7, #24]
 8012922:	1ad3      	subs	r3, r2, r3
 8012924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801292e:	d102      	bne.n	8012936 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012930:	2300      	movs	r3, #0
 8012932:	61fb      	str	r3, [r7, #28]
 8012934:	e023      	b.n	801297e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	4b15      	ldr	r3, [pc, #84]	; (8012990 <xTaskCheckForTimeOut+0xc4>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	429a      	cmp	r2, r3
 8012940:	d007      	beq.n	8012952 <xTaskCheckForTimeOut+0x86>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	69ba      	ldr	r2, [r7, #24]
 8012948:	429a      	cmp	r2, r3
 801294a:	d302      	bcc.n	8012952 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801294c:	2301      	movs	r3, #1
 801294e:	61fb      	str	r3, [r7, #28]
 8012950:	e015      	b.n	801297e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	697a      	ldr	r2, [r7, #20]
 8012958:	429a      	cmp	r2, r3
 801295a:	d20b      	bcs.n	8012974 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	1ad2      	subs	r2, r2, r3
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f7ff ff99 	bl	80128a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801296e:	2300      	movs	r3, #0
 8012970:	61fb      	str	r3, [r7, #28]
 8012972:	e004      	b.n	801297e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	2200      	movs	r2, #0
 8012978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801297a:	2301      	movs	r3, #1
 801297c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801297e:	f000 ff6d 	bl	801385c <vPortExitCritical>

	return xReturn;
 8012982:	69fb      	ldr	r3, [r7, #28]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3720      	adds	r7, #32
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	20000e8c 	.word	0x20000e8c
 8012990:	20000ea0 	.word	0x20000ea0

08012994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012994:	b480      	push	{r7}
 8012996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012998:	4b03      	ldr	r3, [pc, #12]	; (80129a8 <vTaskMissedYield+0x14>)
 801299a:	2201      	movs	r2, #1
 801299c:	601a      	str	r2, [r3, #0]
}
 801299e:	bf00      	nop
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr
 80129a8:	20000e9c 	.word	0x20000e9c

080129ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80129b4:	f000 f852 	bl	8012a5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80129b8:	4b06      	ldr	r3, [pc, #24]	; (80129d4 <prvIdleTask+0x28>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d9f9      	bls.n	80129b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80129c0:	4b05      	ldr	r3, [pc, #20]	; (80129d8 <prvIdleTask+0x2c>)
 80129c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c6:	601a      	str	r2, [r3, #0]
 80129c8:	f3bf 8f4f 	dsb	sy
 80129cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80129d0:	e7f0      	b.n	80129b4 <prvIdleTask+0x8>
 80129d2:	bf00      	nop
 80129d4:	200009b8 	.word	0x200009b8
 80129d8:	e000ed04 	.word	0xe000ed04

080129dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80129e2:	2300      	movs	r3, #0
 80129e4:	607b      	str	r3, [r7, #4]
 80129e6:	e00c      	b.n	8012a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	4613      	mov	r3, r2
 80129ec:	009b      	lsls	r3, r3, #2
 80129ee:	4413      	add	r3, r2
 80129f0:	009b      	lsls	r3, r3, #2
 80129f2:	4a12      	ldr	r2, [pc, #72]	; (8012a3c <prvInitialiseTaskLists+0x60>)
 80129f4:	4413      	add	r3, r2
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fe f854 	bl	8010aa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	3301      	adds	r3, #1
 8012a00:	607b      	str	r3, [r7, #4]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2b37      	cmp	r3, #55	; 0x37
 8012a06:	d9ef      	bls.n	80129e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012a08:	480d      	ldr	r0, [pc, #52]	; (8012a40 <prvInitialiseTaskLists+0x64>)
 8012a0a:	f7fe f84b 	bl	8010aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012a0e:	480d      	ldr	r0, [pc, #52]	; (8012a44 <prvInitialiseTaskLists+0x68>)
 8012a10:	f7fe f848 	bl	8010aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012a14:	480c      	ldr	r0, [pc, #48]	; (8012a48 <prvInitialiseTaskLists+0x6c>)
 8012a16:	f7fe f845 	bl	8010aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012a1a:	480c      	ldr	r0, [pc, #48]	; (8012a4c <prvInitialiseTaskLists+0x70>)
 8012a1c:	f7fe f842 	bl	8010aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012a20:	480b      	ldr	r0, [pc, #44]	; (8012a50 <prvInitialiseTaskLists+0x74>)
 8012a22:	f7fe f83f 	bl	8010aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012a26:	4b0b      	ldr	r3, [pc, #44]	; (8012a54 <prvInitialiseTaskLists+0x78>)
 8012a28:	4a05      	ldr	r2, [pc, #20]	; (8012a40 <prvInitialiseTaskLists+0x64>)
 8012a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012a2c:	4b0a      	ldr	r3, [pc, #40]	; (8012a58 <prvInitialiseTaskLists+0x7c>)
 8012a2e:	4a05      	ldr	r2, [pc, #20]	; (8012a44 <prvInitialiseTaskLists+0x68>)
 8012a30:	601a      	str	r2, [r3, #0]
}
 8012a32:	bf00      	nop
 8012a34:	3708      	adds	r7, #8
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	200009b8 	.word	0x200009b8
 8012a40:	20000e18 	.word	0x20000e18
 8012a44:	20000e2c 	.word	0x20000e2c
 8012a48:	20000e48 	.word	0x20000e48
 8012a4c:	20000e5c 	.word	0x20000e5c
 8012a50:	20000e74 	.word	0x20000e74
 8012a54:	20000e40 	.word	0x20000e40
 8012a58:	20000e44 	.word	0x20000e44

08012a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a62:	e019      	b.n	8012a98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012a64:	f000 fec8 	bl	80137f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a68:	4b0f      	ldr	r3, [pc, #60]	; (8012aa8 <prvCheckTasksWaitingTermination+0x4c>)
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	3304      	adds	r3, #4
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7fe f89f 	bl	8010bb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012a7a:	4b0c      	ldr	r3, [pc, #48]	; (8012aac <prvCheckTasksWaitingTermination+0x50>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	3b01      	subs	r3, #1
 8012a80:	4a0a      	ldr	r2, [pc, #40]	; (8012aac <prvCheckTasksWaitingTermination+0x50>)
 8012a82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012a84:	4b0a      	ldr	r3, [pc, #40]	; (8012ab0 <prvCheckTasksWaitingTermination+0x54>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	3b01      	subs	r3, #1
 8012a8a:	4a09      	ldr	r2, [pc, #36]	; (8012ab0 <prvCheckTasksWaitingTermination+0x54>)
 8012a8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012a8e:	f000 fee5 	bl	801385c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f000 f80e 	bl	8012ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a98:	4b05      	ldr	r3, [pc, #20]	; (8012ab0 <prvCheckTasksWaitingTermination+0x54>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d1e1      	bne.n	8012a64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012aa0:	bf00      	nop
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	20000e5c 	.word	0x20000e5c
 8012aac:	20000e88 	.word	0x20000e88
 8012ab0:	20000e70 	.word	0x20000e70

08012ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d108      	bne.n	8012ad8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aca:	4618      	mov	r0, r3
 8012acc:	f001 f87e 	bl	8013bcc <vPortFree>
				vPortFree( pxTCB );
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f001 f87b 	bl	8013bcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012ad6:	e019      	b.n	8012b0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012ade:	2b01      	cmp	r3, #1
 8012ae0:	d103      	bne.n	8012aea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f001 f872 	bl	8013bcc <vPortFree>
	}
 8012ae8:	e010      	b.n	8012b0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	d00b      	beq.n	8012b0c <prvDeleteTCB+0x58>
 8012af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af8:	b672      	cpsid	i
 8012afa:	f383 8811 	msr	BASEPRI, r3
 8012afe:	f3bf 8f6f 	isb	sy
 8012b02:	f3bf 8f4f 	dsb	sy
 8012b06:	b662      	cpsie	i
 8012b08:	60fb      	str	r3, [r7, #12]
 8012b0a:	e7fe      	b.n	8012b0a <prvDeleteTCB+0x56>
	}
 8012b0c:	bf00      	nop
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012b14:	b480      	push	{r7}
 8012b16:	b083      	sub	sp, #12
 8012b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b1a:	4b0c      	ldr	r3, [pc, #48]	; (8012b4c <prvResetNextTaskUnblockTime+0x38>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d104      	bne.n	8012b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012b24:	4b0a      	ldr	r3, [pc, #40]	; (8012b50 <prvResetNextTaskUnblockTime+0x3c>)
 8012b26:	f04f 32ff 	mov.w	r2, #4294967295
 8012b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012b2c:	e008      	b.n	8012b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b2e:	4b07      	ldr	r3, [pc, #28]	; (8012b4c <prvResetNextTaskUnblockTime+0x38>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	4a04      	ldr	r2, [pc, #16]	; (8012b50 <prvResetNextTaskUnblockTime+0x3c>)
 8012b3e:	6013      	str	r3, [r2, #0]
}
 8012b40:	bf00      	nop
 8012b42:	370c      	adds	r7, #12
 8012b44:	46bd      	mov	sp, r7
 8012b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4a:	4770      	bx	lr
 8012b4c:	20000e40 	.word	0x20000e40
 8012b50:	20000ea8 	.word	0x20000ea8

08012b54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012b54:	b480      	push	{r7}
 8012b56:	b083      	sub	sp, #12
 8012b58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012b5a:	4b05      	ldr	r3, [pc, #20]	; (8012b70 <xTaskGetCurrentTaskHandle+0x1c>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012b60:	687b      	ldr	r3, [r7, #4]
	}
 8012b62:	4618      	mov	r0, r3
 8012b64:	370c      	adds	r7, #12
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr
 8012b6e:	bf00      	nop
 8012b70:	200009b4 	.word	0x200009b4

08012b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012b74:	b480      	push	{r7}
 8012b76:	b083      	sub	sp, #12
 8012b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012b7a:	4b0b      	ldr	r3, [pc, #44]	; (8012ba8 <xTaskGetSchedulerState+0x34>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d102      	bne.n	8012b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012b82:	2301      	movs	r3, #1
 8012b84:	607b      	str	r3, [r7, #4]
 8012b86:	e008      	b.n	8012b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b88:	4b08      	ldr	r3, [pc, #32]	; (8012bac <xTaskGetSchedulerState+0x38>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d102      	bne.n	8012b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012b90:	2302      	movs	r3, #2
 8012b92:	607b      	str	r3, [r7, #4]
 8012b94:	e001      	b.n	8012b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012b96:	2300      	movs	r3, #0
 8012b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012b9a:	687b      	ldr	r3, [r7, #4]
	}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	370c      	adds	r7, #12
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr
 8012ba8:	20000e94 	.word	0x20000e94
 8012bac:	20000eb0 	.word	0x20000eb0

08012bb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d051      	beq.n	8012c6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bca:	4b2a      	ldr	r3, [pc, #168]	; (8012c74 <xTaskPriorityInherit+0xc4>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d241      	bcs.n	8012c58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	699b      	ldr	r3, [r3, #24]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	db06      	blt.n	8012bea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bdc:	4b25      	ldr	r3, [pc, #148]	; (8012c74 <xTaskPriorityInherit+0xc4>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	6959      	ldr	r1, [r3, #20]
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	4413      	add	r3, r2
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	4a1f      	ldr	r2, [pc, #124]	; (8012c78 <xTaskPriorityInherit+0xc8>)
 8012bfc:	4413      	add	r3, r2
 8012bfe:	4299      	cmp	r1, r3
 8012c00:	d122      	bne.n	8012c48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	3304      	adds	r3, #4
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7fd ffd6 	bl	8010bb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012c0c:	4b19      	ldr	r3, [pc, #100]	; (8012c74 <xTaskPriorityInherit+0xc4>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c1a:	4b18      	ldr	r3, [pc, #96]	; (8012c7c <xTaskPriorityInherit+0xcc>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d903      	bls.n	8012c2a <xTaskPriorityInherit+0x7a>
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c26:	4a15      	ldr	r2, [pc, #84]	; (8012c7c <xTaskPriorityInherit+0xcc>)
 8012c28:	6013      	str	r3, [r2, #0]
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c2e:	4613      	mov	r3, r2
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	4413      	add	r3, r2
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	4a10      	ldr	r2, [pc, #64]	; (8012c78 <xTaskPriorityInherit+0xc8>)
 8012c38:	441a      	add	r2, r3
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	3304      	adds	r3, #4
 8012c3e:	4619      	mov	r1, r3
 8012c40:	4610      	mov	r0, r2
 8012c42:	f7fd ff5c 	bl	8010afe <vListInsertEnd>
 8012c46:	e004      	b.n	8012c52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012c48:	4b0a      	ldr	r3, [pc, #40]	; (8012c74 <xTaskPriorityInherit+0xc4>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012c52:	2301      	movs	r3, #1
 8012c54:	60fb      	str	r3, [r7, #12]
 8012c56:	e008      	b.n	8012c6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c5c:	4b05      	ldr	r3, [pc, #20]	; (8012c74 <xTaskPriorityInherit+0xc4>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d201      	bcs.n	8012c6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012c66:	2301      	movs	r3, #1
 8012c68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
	}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3710      	adds	r7, #16
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	200009b4 	.word	0x200009b4
 8012c78:	200009b8 	.word	0x200009b8
 8012c7c:	20000e90 	.word	0x20000e90

08012c80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d058      	beq.n	8012d48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012c96:	4b2f      	ldr	r3, [pc, #188]	; (8012d54 <xTaskPriorityDisinherit+0xd4>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	693a      	ldr	r2, [r7, #16]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d00b      	beq.n	8012cb8 <xTaskPriorityDisinherit+0x38>
 8012ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca4:	b672      	cpsid	i
 8012ca6:	f383 8811 	msr	BASEPRI, r3
 8012caa:	f3bf 8f6f 	isb	sy
 8012cae:	f3bf 8f4f 	dsb	sy
 8012cb2:	b662      	cpsie	i
 8012cb4:	60fb      	str	r3, [r7, #12]
 8012cb6:	e7fe      	b.n	8012cb6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d10b      	bne.n	8012cd8 <xTaskPriorityDisinherit+0x58>
 8012cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc4:	b672      	cpsid	i
 8012cc6:	f383 8811 	msr	BASEPRI, r3
 8012cca:	f3bf 8f6f 	isb	sy
 8012cce:	f3bf 8f4f 	dsb	sy
 8012cd2:	b662      	cpsie	i
 8012cd4:	60bb      	str	r3, [r7, #8]
 8012cd6:	e7fe      	b.n	8012cd6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cdc:	1e5a      	subs	r2, r3, #1
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d02c      	beq.n	8012d48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d128      	bne.n	8012d48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fd ff5c 	bl	8010bb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d18:	4b0f      	ldr	r3, [pc, #60]	; (8012d58 <xTaskPriorityDisinherit+0xd8>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d903      	bls.n	8012d28 <xTaskPriorityDisinherit+0xa8>
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d24:	4a0c      	ldr	r2, [pc, #48]	; (8012d58 <xTaskPriorityDisinherit+0xd8>)
 8012d26:	6013      	str	r3, [r2, #0]
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	009b      	lsls	r3, r3, #2
 8012d30:	4413      	add	r3, r2
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	4a09      	ldr	r2, [pc, #36]	; (8012d5c <xTaskPriorityDisinherit+0xdc>)
 8012d36:	441a      	add	r2, r3
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	3304      	adds	r3, #4
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	4610      	mov	r0, r2
 8012d40:	f7fd fedd 	bl	8010afe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012d44:	2301      	movs	r3, #1
 8012d46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d48:	697b      	ldr	r3, [r7, #20]
	}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3718      	adds	r7, #24
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	200009b4 	.word	0x200009b4
 8012d58:	20000e90 	.word	0x20000e90
 8012d5c:	200009b8 	.word	0x200009b8

08012d60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b088      	sub	sp, #32
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d06c      	beq.n	8012e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d10b      	bne.n	8012d98 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8012d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d84:	b672      	cpsid	i
 8012d86:	f383 8811 	msr	BASEPRI, r3
 8012d8a:	f3bf 8f6f 	isb	sy
 8012d8e:	f3bf 8f4f 	dsb	sy
 8012d92:	b662      	cpsie	i
 8012d94:	60fb      	str	r3, [r7, #12]
 8012d96:	e7fe      	b.n	8012d96 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d902      	bls.n	8012da8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	61fb      	str	r3, [r7, #28]
 8012da6:	e002      	b.n	8012dae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012db2:	69fa      	ldr	r2, [r7, #28]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d04c      	beq.n	8012e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012db8:	69bb      	ldr	r3, [r7, #24]
 8012dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dbc:	697a      	ldr	r2, [r7, #20]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d147      	bne.n	8012e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012dc2:	4b26      	ldr	r3, [pc, #152]	; (8012e5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	69ba      	ldr	r2, [r7, #24]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d10b      	bne.n	8012de4 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8012dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd0:	b672      	cpsid	i
 8012dd2:	f383 8811 	msr	BASEPRI, r3
 8012dd6:	f3bf 8f6f 	isb	sy
 8012dda:	f3bf 8f4f 	dsb	sy
 8012dde:	b662      	cpsie	i
 8012de0:	60bb      	str	r3, [r7, #8]
 8012de2:	e7fe      	b.n	8012de2 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012de8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012dea:	69bb      	ldr	r3, [r7, #24]
 8012dec:	69fa      	ldr	r2, [r7, #28]
 8012dee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	699b      	ldr	r3, [r3, #24]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	db04      	blt.n	8012e02 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	6959      	ldr	r1, [r3, #20]
 8012e06:	693a      	ldr	r2, [r7, #16]
 8012e08:	4613      	mov	r3, r2
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	4413      	add	r3, r2
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	4a13      	ldr	r2, [pc, #76]	; (8012e60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012e12:	4413      	add	r3, r2
 8012e14:	4299      	cmp	r1, r3
 8012e16:	d11c      	bne.n	8012e52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7fd fecb 	bl	8010bb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e26:	4b0f      	ldr	r3, [pc, #60]	; (8012e64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d903      	bls.n	8012e36 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8012e2e:	69bb      	ldr	r3, [r7, #24]
 8012e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e32:	4a0c      	ldr	r2, [pc, #48]	; (8012e64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012e34:	6013      	str	r3, [r2, #0]
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e3a:	4613      	mov	r3, r2
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	4413      	add	r3, r2
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4a07      	ldr	r2, [pc, #28]	; (8012e60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012e44:	441a      	add	r2, r3
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	3304      	adds	r3, #4
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	4610      	mov	r0, r2
 8012e4e:	f7fd fe56 	bl	8010afe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e52:	bf00      	nop
 8012e54:	3720      	adds	r7, #32
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	200009b4 	.word	0x200009b4
 8012e60:	200009b8 	.word	0x200009b8
 8012e64:	20000e90 	.word	0x20000e90

08012e68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012e68:	b480      	push	{r7}
 8012e6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012e6c:	4b07      	ldr	r3, [pc, #28]	; (8012e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d004      	beq.n	8012e7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012e74:	4b05      	ldr	r3, [pc, #20]	; (8012e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e7a:	3201      	adds	r2, #1
 8012e7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012e7e:	4b03      	ldr	r3, [pc, #12]	; (8012e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8012e80:	681b      	ldr	r3, [r3, #0]
	}
 8012e82:	4618      	mov	r0, r3
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr
 8012e8c:	200009b4 	.word	0x200009b4

08012e90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b084      	sub	sp, #16
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012e9a:	4b21      	ldr	r3, [pc, #132]	; (8012f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ea0:	4b20      	ldr	r3, [pc, #128]	; (8012f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	3304      	adds	r3, #4
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fd fe86 	bl	8010bb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eb2:	d10a      	bne.n	8012eca <prvAddCurrentTaskToDelayedList+0x3a>
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d007      	beq.n	8012eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012eba:	4b1a      	ldr	r3, [pc, #104]	; (8012f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	3304      	adds	r3, #4
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	4819      	ldr	r0, [pc, #100]	; (8012f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8012ec4:	f7fd fe1b 	bl	8010afe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012ec8:	e026      	b.n	8012f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012eca:	68fa      	ldr	r2, [r7, #12]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	4413      	add	r3, r2
 8012ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012ed2:	4b14      	ldr	r3, [pc, #80]	; (8012f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	68ba      	ldr	r2, [r7, #8]
 8012ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012eda:	68ba      	ldr	r2, [r7, #8]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d209      	bcs.n	8012ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ee2:	4b12      	ldr	r3, [pc, #72]	; (8012f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	4b0f      	ldr	r3, [pc, #60]	; (8012f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	3304      	adds	r3, #4
 8012eec:	4619      	mov	r1, r3
 8012eee:	4610      	mov	r0, r2
 8012ef0:	f7fd fe29 	bl	8010b46 <vListInsert>
}
 8012ef4:	e010      	b.n	8012f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ef6:	4b0e      	ldr	r3, [pc, #56]	; (8012f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	4b0a      	ldr	r3, [pc, #40]	; (8012f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	3304      	adds	r3, #4
 8012f00:	4619      	mov	r1, r3
 8012f02:	4610      	mov	r0, r2
 8012f04:	f7fd fe1f 	bl	8010b46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012f08:	4b0a      	ldr	r3, [pc, #40]	; (8012f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	68ba      	ldr	r2, [r7, #8]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d202      	bcs.n	8012f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012f12:	4a08      	ldr	r2, [pc, #32]	; (8012f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	6013      	str	r3, [r2, #0]
}
 8012f18:	bf00      	nop
 8012f1a:	3710      	adds	r7, #16
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	20000e8c 	.word	0x20000e8c
 8012f24:	200009b4 	.word	0x200009b4
 8012f28:	20000e74 	.word	0x20000e74
 8012f2c:	20000e44 	.word	0x20000e44
 8012f30:	20000e40 	.word	0x20000e40
 8012f34:	20000ea8 	.word	0x20000ea8

08012f38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b08a      	sub	sp, #40	; 0x28
 8012f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012f42:	f000 fb0d 	bl	8013560 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012f46:	4b1d      	ldr	r3, [pc, #116]	; (8012fbc <xTimerCreateTimerTask+0x84>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d021      	beq.n	8012f92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012f56:	1d3a      	adds	r2, r7, #4
 8012f58:	f107 0108 	add.w	r1, r7, #8
 8012f5c:	f107 030c 	add.w	r3, r7, #12
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7fd fd85 	bl	8010a70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012f66:	6879      	ldr	r1, [r7, #4]
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	9202      	str	r2, [sp, #8]
 8012f6e:	9301      	str	r3, [sp, #4]
 8012f70:	2302      	movs	r3, #2
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	2300      	movs	r3, #0
 8012f76:	460a      	mov	r2, r1
 8012f78:	4911      	ldr	r1, [pc, #68]	; (8012fc0 <xTimerCreateTimerTask+0x88>)
 8012f7a:	4812      	ldr	r0, [pc, #72]	; (8012fc4 <xTimerCreateTimerTask+0x8c>)
 8012f7c:	f7fe ff30 	bl	8011de0 <xTaskCreateStatic>
 8012f80:	4602      	mov	r2, r0
 8012f82:	4b11      	ldr	r3, [pc, #68]	; (8012fc8 <xTimerCreateTimerTask+0x90>)
 8012f84:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012f86:	4b10      	ldr	r3, [pc, #64]	; (8012fc8 <xTimerCreateTimerTask+0x90>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d001      	beq.n	8012f92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012f8e:	2301      	movs	r3, #1
 8012f90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10b      	bne.n	8012fb0 <xTimerCreateTimerTask+0x78>
 8012f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9c:	b672      	cpsid	i
 8012f9e:	f383 8811 	msr	BASEPRI, r3
 8012fa2:	f3bf 8f6f 	isb	sy
 8012fa6:	f3bf 8f4f 	dsb	sy
 8012faa:	b662      	cpsie	i
 8012fac:	613b      	str	r3, [r7, #16]
 8012fae:	e7fe      	b.n	8012fae <xTimerCreateTimerTask+0x76>
	return xReturn;
 8012fb0:	697b      	ldr	r3, [r7, #20]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3718      	adds	r7, #24
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	20000ee4 	.word	0x20000ee4
 8012fc0:	08016838 	.word	0x08016838
 8012fc4:	08013105 	.word	0x08013105
 8012fc8:	20000ee8 	.word	0x20000ee8

08012fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b08a      	sub	sp, #40	; 0x28
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d10b      	bne.n	8012ffc <xTimerGenericCommand+0x30>
 8012fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe8:	b672      	cpsid	i
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	b662      	cpsie	i
 8012ff8:	623b      	str	r3, [r7, #32]
 8012ffa:	e7fe      	b.n	8012ffa <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012ffc:	4b19      	ldr	r3, [pc, #100]	; (8013064 <xTimerGenericCommand+0x98>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d02a      	beq.n	801305a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	2b05      	cmp	r3, #5
 8013014:	dc18      	bgt.n	8013048 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013016:	f7ff fdad 	bl	8012b74 <xTaskGetSchedulerState>
 801301a:	4603      	mov	r3, r0
 801301c:	2b02      	cmp	r3, #2
 801301e:	d109      	bne.n	8013034 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013020:	4b10      	ldr	r3, [pc, #64]	; (8013064 <xTimerGenericCommand+0x98>)
 8013022:	6818      	ldr	r0, [r3, #0]
 8013024:	f107 0110 	add.w	r1, r7, #16
 8013028:	2300      	movs	r3, #0
 801302a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801302c:	f7fe f860 	bl	80110f0 <xQueueGenericSend>
 8013030:	6278      	str	r0, [r7, #36]	; 0x24
 8013032:	e012      	b.n	801305a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013034:	4b0b      	ldr	r3, [pc, #44]	; (8013064 <xTimerGenericCommand+0x98>)
 8013036:	6818      	ldr	r0, [r3, #0]
 8013038:	f107 0110 	add.w	r1, r7, #16
 801303c:	2300      	movs	r3, #0
 801303e:	2200      	movs	r2, #0
 8013040:	f7fe f856 	bl	80110f0 <xQueueGenericSend>
 8013044:	6278      	str	r0, [r7, #36]	; 0x24
 8013046:	e008      	b.n	801305a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013048:	4b06      	ldr	r3, [pc, #24]	; (8013064 <xTimerGenericCommand+0x98>)
 801304a:	6818      	ldr	r0, [r3, #0]
 801304c:	f107 0110 	add.w	r1, r7, #16
 8013050:	2300      	movs	r3, #0
 8013052:	683a      	ldr	r2, [r7, #0]
 8013054:	f7fe f94e 	bl	80112f4 <xQueueGenericSendFromISR>
 8013058:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801305c:	4618      	mov	r0, r3
 801305e:	3728      	adds	r7, #40	; 0x28
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	20000ee4 	.word	0x20000ee4

08013068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b088      	sub	sp, #32
 801306c:	af02      	add	r7, sp, #8
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013072:	4b23      	ldr	r3, [pc, #140]	; (8013100 <prvProcessExpiredTimer+0x98>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	3304      	adds	r3, #4
 8013080:	4618      	mov	r0, r3
 8013082:	f7fd fd99 	bl	8010bb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801308c:	f003 0304 	and.w	r3, r3, #4
 8013090:	2b00      	cmp	r3, #0
 8013092:	d023      	beq.n	80130dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	699a      	ldr	r2, [r3, #24]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	18d1      	adds	r1, r2, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	683a      	ldr	r2, [r7, #0]
 80130a0:	6978      	ldr	r0, [r7, #20]
 80130a2:	f000 f8d3 	bl	801324c <prvInsertTimerInActiveList>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d020      	beq.n	80130ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80130ac:	2300      	movs	r3, #0
 80130ae:	9300      	str	r3, [sp, #0]
 80130b0:	2300      	movs	r3, #0
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	2100      	movs	r1, #0
 80130b6:	6978      	ldr	r0, [r7, #20]
 80130b8:	f7ff ff88 	bl	8012fcc <xTimerGenericCommand>
 80130bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d114      	bne.n	80130ee <prvProcessExpiredTimer+0x86>
 80130c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c8:	b672      	cpsid	i
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	b662      	cpsie	i
 80130d8:	60fb      	str	r3, [r7, #12]
 80130da:	e7fe      	b.n	80130da <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130e2:	f023 0301 	bic.w	r3, r3, #1
 80130e6:	b2da      	uxtb	r2, r3
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	6a1b      	ldr	r3, [r3, #32]
 80130f2:	6978      	ldr	r0, [r7, #20]
 80130f4:	4798      	blx	r3
}
 80130f6:	bf00      	nop
 80130f8:	3718      	adds	r7, #24
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20000edc 	.word	0x20000edc

08013104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801310c:	f107 0308 	add.w	r3, r7, #8
 8013110:	4618      	mov	r0, r3
 8013112:	f000 f857 	bl	80131c4 <prvGetNextExpireTime>
 8013116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	4619      	mov	r1, r3
 801311c:	68f8      	ldr	r0, [r7, #12]
 801311e:	f000 f803 	bl	8013128 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013122:	f000 f8d5 	bl	80132d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013126:	e7f1      	b.n	801310c <prvTimerTask+0x8>

08013128 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013132:	f7ff f919 	bl	8012368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013136:	f107 0308 	add.w	r3, r7, #8
 801313a:	4618      	mov	r0, r3
 801313c:	f000 f866 	bl	801320c <prvSampleTimeNow>
 8013140:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d130      	bne.n	80131aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d10a      	bne.n	8013164 <prvProcessTimerOrBlockTask+0x3c>
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	429a      	cmp	r2, r3
 8013154:	d806      	bhi.n	8013164 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013156:	f7ff f915 	bl	8012384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801315a:	68f9      	ldr	r1, [r7, #12]
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7ff ff83 	bl	8013068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013162:	e024      	b.n	80131ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d008      	beq.n	801317c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801316a:	4b13      	ldr	r3, [pc, #76]	; (80131b8 <prvProcessTimerOrBlockTask+0x90>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <prvProcessTimerOrBlockTask+0x50>
 8013174:	2301      	movs	r3, #1
 8013176:	e000      	b.n	801317a <prvProcessTimerOrBlockTask+0x52>
 8013178:	2300      	movs	r3, #0
 801317a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801317c:	4b0f      	ldr	r3, [pc, #60]	; (80131bc <prvProcessTimerOrBlockTask+0x94>)
 801317e:	6818      	ldr	r0, [r3, #0]
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	1ad3      	subs	r3, r2, r3
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	4619      	mov	r1, r3
 801318a:	f7fe fdf5 	bl	8011d78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801318e:	f7ff f8f9 	bl	8012384 <xTaskResumeAll>
 8013192:	4603      	mov	r3, r0
 8013194:	2b00      	cmp	r3, #0
 8013196:	d10a      	bne.n	80131ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013198:	4b09      	ldr	r3, [pc, #36]	; (80131c0 <prvProcessTimerOrBlockTask+0x98>)
 801319a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801319e:	601a      	str	r2, [r3, #0]
 80131a0:	f3bf 8f4f 	dsb	sy
 80131a4:	f3bf 8f6f 	isb	sy
}
 80131a8:	e001      	b.n	80131ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80131aa:	f7ff f8eb 	bl	8012384 <xTaskResumeAll>
}
 80131ae:	bf00      	nop
 80131b0:	3710      	adds	r7, #16
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	20000ee0 	.word	0x20000ee0
 80131bc:	20000ee4 	.word	0x20000ee4
 80131c0:	e000ed04 	.word	0xe000ed04

080131c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80131c4:	b480      	push	{r7}
 80131c6:	b085      	sub	sp, #20
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80131cc:	4b0e      	ldr	r3, [pc, #56]	; (8013208 <prvGetNextExpireTime+0x44>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d101      	bne.n	80131da <prvGetNextExpireTime+0x16>
 80131d6:	2201      	movs	r2, #1
 80131d8:	e000      	b.n	80131dc <prvGetNextExpireTime+0x18>
 80131da:	2200      	movs	r2, #0
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d105      	bne.n	80131f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80131e8:	4b07      	ldr	r3, [pc, #28]	; (8013208 <prvGetNextExpireTime+0x44>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	68db      	ldr	r3, [r3, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	60fb      	str	r3, [r7, #12]
 80131f2:	e001      	b.n	80131f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80131f4:	2300      	movs	r3, #0
 80131f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80131f8:	68fb      	ldr	r3, [r7, #12]
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3714      	adds	r7, #20
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	20000edc 	.word	0x20000edc

0801320c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013214:	f7ff f954 	bl	80124c0 <xTaskGetTickCount>
 8013218:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801321a:	4b0b      	ldr	r3, [pc, #44]	; (8013248 <prvSampleTimeNow+0x3c>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	68fa      	ldr	r2, [r7, #12]
 8013220:	429a      	cmp	r2, r3
 8013222:	d205      	bcs.n	8013230 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013224:	f000 f936 	bl	8013494 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2201      	movs	r2, #1
 801322c:	601a      	str	r2, [r3, #0]
 801322e:	e002      	b.n	8013236 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013236:	4a04      	ldr	r2, [pc, #16]	; (8013248 <prvSampleTimeNow+0x3c>)
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801323c:	68fb      	ldr	r3, [r7, #12]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3710      	adds	r7, #16
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	20000eec 	.word	0x20000eec

0801324c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
 8013258:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801325a:	2300      	movs	r3, #0
 801325c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	68ba      	ldr	r2, [r7, #8]
 8013262:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	68fa      	ldr	r2, [r7, #12]
 8013268:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	429a      	cmp	r2, r3
 8013270:	d812      	bhi.n	8013298 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	1ad2      	subs	r2, r2, r3
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	699b      	ldr	r3, [r3, #24]
 801327c:	429a      	cmp	r2, r3
 801327e:	d302      	bcc.n	8013286 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013280:	2301      	movs	r3, #1
 8013282:	617b      	str	r3, [r7, #20]
 8013284:	e01b      	b.n	80132be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013286:	4b10      	ldr	r3, [pc, #64]	; (80132c8 <prvInsertTimerInActiveList+0x7c>)
 8013288:	681a      	ldr	r2, [r3, #0]
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	3304      	adds	r3, #4
 801328e:	4619      	mov	r1, r3
 8013290:	4610      	mov	r0, r2
 8013292:	f7fd fc58 	bl	8010b46 <vListInsert>
 8013296:	e012      	b.n	80132be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	429a      	cmp	r2, r3
 801329e:	d206      	bcs.n	80132ae <prvInsertTimerInActiveList+0x62>
 80132a0:	68ba      	ldr	r2, [r7, #8]
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d302      	bcc.n	80132ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80132a8:	2301      	movs	r3, #1
 80132aa:	617b      	str	r3, [r7, #20]
 80132ac:	e007      	b.n	80132be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80132ae:	4b07      	ldr	r3, [pc, #28]	; (80132cc <prvInsertTimerInActiveList+0x80>)
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	3304      	adds	r3, #4
 80132b6:	4619      	mov	r1, r3
 80132b8:	4610      	mov	r0, r2
 80132ba:	f7fd fc44 	bl	8010b46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80132be:	697b      	ldr	r3, [r7, #20]
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3718      	adds	r7, #24
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	20000ee0 	.word	0x20000ee0
 80132cc:	20000edc 	.word	0x20000edc

080132d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b08e      	sub	sp, #56	; 0x38
 80132d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80132d6:	e0cc      	b.n	8013472 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	da19      	bge.n	8013312 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80132de:	1d3b      	adds	r3, r7, #4
 80132e0:	3304      	adds	r3, #4
 80132e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80132e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d10b      	bne.n	8013302 <prvProcessReceivedCommands+0x32>
 80132ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ee:	b672      	cpsid	i
 80132f0:	f383 8811 	msr	BASEPRI, r3
 80132f4:	f3bf 8f6f 	isb	sy
 80132f8:	f3bf 8f4f 	dsb	sy
 80132fc:	b662      	cpsie	i
 80132fe:	61fb      	str	r3, [r7, #28]
 8013300:	e7fe      	b.n	8013300 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013308:	6850      	ldr	r0, [r2, #4]
 801330a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801330c:	6892      	ldr	r2, [r2, #8]
 801330e:	4611      	mov	r1, r2
 8013310:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2b00      	cmp	r3, #0
 8013316:	f2c0 80ab 	blt.w	8013470 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013320:	695b      	ldr	r3, [r3, #20]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d004      	beq.n	8013330 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013328:	3304      	adds	r3, #4
 801332a:	4618      	mov	r0, r3
 801332c:	f7fd fc44 	bl	8010bb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013330:	463b      	mov	r3, r7
 8013332:	4618      	mov	r0, r3
 8013334:	f7ff ff6a 	bl	801320c <prvSampleTimeNow>
 8013338:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b09      	cmp	r3, #9
 801333e:	f200 8098 	bhi.w	8013472 <prvProcessReceivedCommands+0x1a2>
 8013342:	a201      	add	r2, pc, #4	; (adr r2, 8013348 <prvProcessReceivedCommands+0x78>)
 8013344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013348:	08013371 	.word	0x08013371
 801334c:	08013371 	.word	0x08013371
 8013350:	08013371 	.word	0x08013371
 8013354:	080133e7 	.word	0x080133e7
 8013358:	080133fb 	.word	0x080133fb
 801335c:	08013447 	.word	0x08013447
 8013360:	08013371 	.word	0x08013371
 8013364:	08013371 	.word	0x08013371
 8013368:	080133e7 	.word	0x080133e7
 801336c:	080133fb 	.word	0x080133fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013376:	f043 0301 	orr.w	r3, r3, #1
 801337a:	b2da      	uxtb	r2, r3
 801337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013382:	68ba      	ldr	r2, [r7, #8]
 8013384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013386:	699b      	ldr	r3, [r3, #24]
 8013388:	18d1      	adds	r1, r2, r3
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801338e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013390:	f7ff ff5c 	bl	801324c <prvInsertTimerInActiveList>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d06b      	beq.n	8013472 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339c:	6a1b      	ldr	r3, [r3, #32]
 801339e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80133a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133a8:	f003 0304 	and.w	r3, r3, #4
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d060      	beq.n	8013472 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80133b0:	68ba      	ldr	r2, [r7, #8]
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	699b      	ldr	r3, [r3, #24]
 80133b6:	441a      	add	r2, r3
 80133b8:	2300      	movs	r3, #0
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	2300      	movs	r3, #0
 80133be:	2100      	movs	r1, #0
 80133c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133c2:	f7ff fe03 	bl	8012fcc <xTimerGenericCommand>
 80133c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80133c8:	6a3b      	ldr	r3, [r7, #32]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d151      	bne.n	8013472 <prvProcessReceivedCommands+0x1a2>
 80133ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d2:	b672      	cpsid	i
 80133d4:	f383 8811 	msr	BASEPRI, r3
 80133d8:	f3bf 8f6f 	isb	sy
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	b662      	cpsie	i
 80133e2:	61bb      	str	r3, [r7, #24]
 80133e4:	e7fe      	b.n	80133e4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80133e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133ec:	f023 0301 	bic.w	r3, r3, #1
 80133f0:	b2da      	uxtb	r2, r3
 80133f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80133f8:	e03b      	b.n	8013472 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80133fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013400:	f043 0301 	orr.w	r3, r3, #1
 8013404:	b2da      	uxtb	r2, r3
 8013406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801340c:	68ba      	ldr	r2, [r7, #8]
 801340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013410:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	699b      	ldr	r3, [r3, #24]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d10b      	bne.n	8013432 <prvProcessReceivedCommands+0x162>
 801341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801341e:	b672      	cpsid	i
 8013420:	f383 8811 	msr	BASEPRI, r3
 8013424:	f3bf 8f6f 	isb	sy
 8013428:	f3bf 8f4f 	dsb	sy
 801342c:	b662      	cpsie	i
 801342e:	617b      	str	r3, [r7, #20]
 8013430:	e7fe      	b.n	8013430 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013434:	699a      	ldr	r2, [r3, #24]
 8013436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013438:	18d1      	adds	r1, r2, r3
 801343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801343e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013440:	f7ff ff04 	bl	801324c <prvInsertTimerInActiveList>
					break;
 8013444:	e015      	b.n	8013472 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801344c:	f003 0302 	and.w	r3, r3, #2
 8013450:	2b00      	cmp	r3, #0
 8013452:	d103      	bne.n	801345c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013456:	f000 fbb9 	bl	8013bcc <vPortFree>
 801345a:	e00a      	b.n	8013472 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013462:	f023 0301 	bic.w	r3, r3, #1
 8013466:	b2da      	uxtb	r2, r3
 8013468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801346e:	e000      	b.n	8013472 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013470:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013472:	4b07      	ldr	r3, [pc, #28]	; (8013490 <prvProcessReceivedCommands+0x1c0>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	1d39      	adds	r1, r7, #4
 8013478:	2200      	movs	r2, #0
 801347a:	4618      	mov	r0, r3
 801347c:	f7fe f868 	bl	8011550 <xQueueReceive>
 8013480:	4603      	mov	r3, r0
 8013482:	2b00      	cmp	r3, #0
 8013484:	f47f af28 	bne.w	80132d8 <prvProcessReceivedCommands+0x8>
	}
}
 8013488:	bf00      	nop
 801348a:	3730      	adds	r7, #48	; 0x30
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}
 8013490:	20000ee4 	.word	0x20000ee4

08013494 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b088      	sub	sp, #32
 8013498:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801349a:	e049      	b.n	8013530 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801349c:	4b2e      	ldr	r3, [pc, #184]	; (8013558 <prvSwitchTimerLists+0xc4>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	68db      	ldr	r3, [r3, #12]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134a6:	4b2c      	ldr	r3, [pc, #176]	; (8013558 <prvSwitchTimerLists+0xc4>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	68db      	ldr	r3, [r3, #12]
 80134ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	3304      	adds	r3, #4
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fd fb7f 	bl	8010bb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	6a1b      	ldr	r3, [r3, #32]
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134c8:	f003 0304 	and.w	r3, r3, #4
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d02f      	beq.n	8013530 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	699b      	ldr	r3, [r3, #24]
 80134d4:	693a      	ldr	r2, [r7, #16]
 80134d6:	4413      	add	r3, r2
 80134d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80134da:	68ba      	ldr	r2, [r7, #8]
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d90e      	bls.n	8013500 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80134ee:	4b1a      	ldr	r3, [pc, #104]	; (8013558 <prvSwitchTimerLists+0xc4>)
 80134f0:	681a      	ldr	r2, [r3, #0]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	3304      	adds	r3, #4
 80134f6:	4619      	mov	r1, r3
 80134f8:	4610      	mov	r0, r2
 80134fa:	f7fd fb24 	bl	8010b46 <vListInsert>
 80134fe:	e017      	b.n	8013530 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013500:	2300      	movs	r3, #0
 8013502:	9300      	str	r3, [sp, #0]
 8013504:	2300      	movs	r3, #0
 8013506:	693a      	ldr	r2, [r7, #16]
 8013508:	2100      	movs	r1, #0
 801350a:	68f8      	ldr	r0, [r7, #12]
 801350c:	f7ff fd5e 	bl	8012fcc <xTimerGenericCommand>
 8013510:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d10b      	bne.n	8013530 <prvSwitchTimerLists+0x9c>
 8013518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351c:	b672      	cpsid	i
 801351e:	f383 8811 	msr	BASEPRI, r3
 8013522:	f3bf 8f6f 	isb	sy
 8013526:	f3bf 8f4f 	dsb	sy
 801352a:	b662      	cpsie	i
 801352c:	603b      	str	r3, [r7, #0]
 801352e:	e7fe      	b.n	801352e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013530:	4b09      	ldr	r3, [pc, #36]	; (8013558 <prvSwitchTimerLists+0xc4>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d1b0      	bne.n	801349c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801353a:	4b07      	ldr	r3, [pc, #28]	; (8013558 <prvSwitchTimerLists+0xc4>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013540:	4b06      	ldr	r3, [pc, #24]	; (801355c <prvSwitchTimerLists+0xc8>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4a04      	ldr	r2, [pc, #16]	; (8013558 <prvSwitchTimerLists+0xc4>)
 8013546:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013548:	4a04      	ldr	r2, [pc, #16]	; (801355c <prvSwitchTimerLists+0xc8>)
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	6013      	str	r3, [r2, #0]
}
 801354e:	bf00      	nop
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	20000edc 	.word	0x20000edc
 801355c:	20000ee0 	.word	0x20000ee0

08013560 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013566:	f000 f947 	bl	80137f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801356a:	4b15      	ldr	r3, [pc, #84]	; (80135c0 <prvCheckForValidListAndQueue+0x60>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d120      	bne.n	80135b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013572:	4814      	ldr	r0, [pc, #80]	; (80135c4 <prvCheckForValidListAndQueue+0x64>)
 8013574:	f7fd fa96 	bl	8010aa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013578:	4813      	ldr	r0, [pc, #76]	; (80135c8 <prvCheckForValidListAndQueue+0x68>)
 801357a:	f7fd fa93 	bl	8010aa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801357e:	4b13      	ldr	r3, [pc, #76]	; (80135cc <prvCheckForValidListAndQueue+0x6c>)
 8013580:	4a10      	ldr	r2, [pc, #64]	; (80135c4 <prvCheckForValidListAndQueue+0x64>)
 8013582:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013584:	4b12      	ldr	r3, [pc, #72]	; (80135d0 <prvCheckForValidListAndQueue+0x70>)
 8013586:	4a10      	ldr	r2, [pc, #64]	; (80135c8 <prvCheckForValidListAndQueue+0x68>)
 8013588:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801358a:	2300      	movs	r3, #0
 801358c:	9300      	str	r3, [sp, #0]
 801358e:	4b11      	ldr	r3, [pc, #68]	; (80135d4 <prvCheckForValidListAndQueue+0x74>)
 8013590:	4a11      	ldr	r2, [pc, #68]	; (80135d8 <prvCheckForValidListAndQueue+0x78>)
 8013592:	2110      	movs	r1, #16
 8013594:	200a      	movs	r0, #10
 8013596:	f7fd fba3 	bl	8010ce0 <xQueueGenericCreateStatic>
 801359a:	4602      	mov	r2, r0
 801359c:	4b08      	ldr	r3, [pc, #32]	; (80135c0 <prvCheckForValidListAndQueue+0x60>)
 801359e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80135a0:	4b07      	ldr	r3, [pc, #28]	; (80135c0 <prvCheckForValidListAndQueue+0x60>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d005      	beq.n	80135b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80135a8:	4b05      	ldr	r3, [pc, #20]	; (80135c0 <prvCheckForValidListAndQueue+0x60>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	490b      	ldr	r1, [pc, #44]	; (80135dc <prvCheckForValidListAndQueue+0x7c>)
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fe fb90 	bl	8011cd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80135b4:	f000 f952 	bl	801385c <vPortExitCritical>
}
 80135b8:	bf00      	nop
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	20000ee4 	.word	0x20000ee4
 80135c4:	20000eb4 	.word	0x20000eb4
 80135c8:	20000ec8 	.word	0x20000ec8
 80135cc:	20000edc 	.word	0x20000edc
 80135d0:	20000ee0 	.word	0x20000ee0
 80135d4:	20000f90 	.word	0x20000f90
 80135d8:	20000ef0 	.word	0x20000ef0
 80135dc:	08016840 	.word	0x08016840

080135e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	3b04      	subs	r3, #4
 80135f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80135f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	3b04      	subs	r3, #4
 80135fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	f023 0201 	bic.w	r2, r3, #1
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	3b04      	subs	r3, #4
 801360e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013610:	4a0c      	ldr	r2, [pc, #48]	; (8013644 <pxPortInitialiseStack+0x64>)
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	3b14      	subs	r3, #20
 801361a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	3b04      	subs	r3, #4
 8013626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f06f 0202 	mvn.w	r2, #2
 801362e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	3b20      	subs	r3, #32
 8013634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013636:	68fb      	ldr	r3, [r7, #12]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3714      	adds	r7, #20
 801363c:	46bd      	mov	sp, r7
 801363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013642:	4770      	bx	lr
 8013644:	08013649 	.word	0x08013649

08013648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013648:	b480      	push	{r7}
 801364a:	b085      	sub	sp, #20
 801364c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013652:	4b13      	ldr	r3, [pc, #76]	; (80136a0 <prvTaskExitError+0x58>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801365a:	d00b      	beq.n	8013674 <prvTaskExitError+0x2c>
 801365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013660:	b672      	cpsid	i
 8013662:	f383 8811 	msr	BASEPRI, r3
 8013666:	f3bf 8f6f 	isb	sy
 801366a:	f3bf 8f4f 	dsb	sy
 801366e:	b662      	cpsie	i
 8013670:	60fb      	str	r3, [r7, #12]
 8013672:	e7fe      	b.n	8013672 <prvTaskExitError+0x2a>
 8013674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013678:	b672      	cpsid	i
 801367a:	f383 8811 	msr	BASEPRI, r3
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f3bf 8f4f 	dsb	sy
 8013686:	b662      	cpsie	i
 8013688:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801368a:	bf00      	nop
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d0fc      	beq.n	801368c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013692:	bf00      	nop
 8013694:	3714      	adds	r7, #20
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	2000011c 	.word	0x2000011c
	...

080136b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80136b0:	4b07      	ldr	r3, [pc, #28]	; (80136d0 <pxCurrentTCBConst2>)
 80136b2:	6819      	ldr	r1, [r3, #0]
 80136b4:	6808      	ldr	r0, [r1, #0]
 80136b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ba:	f380 8809 	msr	PSP, r0
 80136be:	f3bf 8f6f 	isb	sy
 80136c2:	f04f 0000 	mov.w	r0, #0
 80136c6:	f380 8811 	msr	BASEPRI, r0
 80136ca:	4770      	bx	lr
 80136cc:	f3af 8000 	nop.w

080136d0 <pxCurrentTCBConst2>:
 80136d0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80136d4:	bf00      	nop
 80136d6:	bf00      	nop

080136d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80136d8:	4808      	ldr	r0, [pc, #32]	; (80136fc <prvPortStartFirstTask+0x24>)
 80136da:	6800      	ldr	r0, [r0, #0]
 80136dc:	6800      	ldr	r0, [r0, #0]
 80136de:	f380 8808 	msr	MSP, r0
 80136e2:	f04f 0000 	mov.w	r0, #0
 80136e6:	f380 8814 	msr	CONTROL, r0
 80136ea:	b662      	cpsie	i
 80136ec:	b661      	cpsie	f
 80136ee:	f3bf 8f4f 	dsb	sy
 80136f2:	f3bf 8f6f 	isb	sy
 80136f6:	df00      	svc	0
 80136f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80136fa:	bf00      	nop
 80136fc:	e000ed08 	.word	0xe000ed08

08013700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013706:	4b36      	ldr	r3, [pc, #216]	; (80137e0 <xPortStartScheduler+0xe0>)
 8013708:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	b2db      	uxtb	r3, r3
 8013710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	22ff      	movs	r2, #255	; 0xff
 8013716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	b2db      	uxtb	r3, r3
 801371e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013720:	78fb      	ldrb	r3, [r7, #3]
 8013722:	b2db      	uxtb	r3, r3
 8013724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013728:	b2da      	uxtb	r2, r3
 801372a:	4b2e      	ldr	r3, [pc, #184]	; (80137e4 <xPortStartScheduler+0xe4>)
 801372c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801372e:	4b2e      	ldr	r3, [pc, #184]	; (80137e8 <xPortStartScheduler+0xe8>)
 8013730:	2207      	movs	r2, #7
 8013732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013734:	e009      	b.n	801374a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013736:	4b2c      	ldr	r3, [pc, #176]	; (80137e8 <xPortStartScheduler+0xe8>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	3b01      	subs	r3, #1
 801373c:	4a2a      	ldr	r2, [pc, #168]	; (80137e8 <xPortStartScheduler+0xe8>)
 801373e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013740:	78fb      	ldrb	r3, [r7, #3]
 8013742:	b2db      	uxtb	r3, r3
 8013744:	005b      	lsls	r3, r3, #1
 8013746:	b2db      	uxtb	r3, r3
 8013748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801374a:	78fb      	ldrb	r3, [r7, #3]
 801374c:	b2db      	uxtb	r3, r3
 801374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013752:	2b80      	cmp	r3, #128	; 0x80
 8013754:	d0ef      	beq.n	8013736 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013756:	4b24      	ldr	r3, [pc, #144]	; (80137e8 <xPortStartScheduler+0xe8>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f1c3 0307 	rsb	r3, r3, #7
 801375e:	2b04      	cmp	r3, #4
 8013760:	d00b      	beq.n	801377a <xPortStartScheduler+0x7a>
 8013762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013766:	b672      	cpsid	i
 8013768:	f383 8811 	msr	BASEPRI, r3
 801376c:	f3bf 8f6f 	isb	sy
 8013770:	f3bf 8f4f 	dsb	sy
 8013774:	b662      	cpsie	i
 8013776:	60bb      	str	r3, [r7, #8]
 8013778:	e7fe      	b.n	8013778 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801377a:	4b1b      	ldr	r3, [pc, #108]	; (80137e8 <xPortStartScheduler+0xe8>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	021b      	lsls	r3, r3, #8
 8013780:	4a19      	ldr	r2, [pc, #100]	; (80137e8 <xPortStartScheduler+0xe8>)
 8013782:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013784:	4b18      	ldr	r3, [pc, #96]	; (80137e8 <xPortStartScheduler+0xe8>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801378c:	4a16      	ldr	r2, [pc, #88]	; (80137e8 <xPortStartScheduler+0xe8>)
 801378e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	b2da      	uxtb	r2, r3
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013798:	4b14      	ldr	r3, [pc, #80]	; (80137ec <xPortStartScheduler+0xec>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	4a13      	ldr	r2, [pc, #76]	; (80137ec <xPortStartScheduler+0xec>)
 801379e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80137a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80137a4:	4b11      	ldr	r3, [pc, #68]	; (80137ec <xPortStartScheduler+0xec>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4a10      	ldr	r2, [pc, #64]	; (80137ec <xPortStartScheduler+0xec>)
 80137aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80137ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80137b0:	f000 f8d4 	bl	801395c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80137b4:	4b0e      	ldr	r3, [pc, #56]	; (80137f0 <xPortStartScheduler+0xf0>)
 80137b6:	2200      	movs	r2, #0
 80137b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80137ba:	f000 f8f3 	bl	80139a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80137be:	4b0d      	ldr	r3, [pc, #52]	; (80137f4 <xPortStartScheduler+0xf4>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	4a0c      	ldr	r2, [pc, #48]	; (80137f4 <xPortStartScheduler+0xf4>)
 80137c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80137c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80137ca:	f7ff ff85 	bl	80136d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80137ce:	f7fe ff53 	bl	8012678 <vTaskSwitchContext>
	prvTaskExitError();
 80137d2:	f7ff ff39 	bl	8013648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80137d6:	2300      	movs	r3, #0
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	e000e400 	.word	0xe000e400
 80137e4:	20000fe0 	.word	0x20000fe0
 80137e8:	20000fe4 	.word	0x20000fe4
 80137ec:	e000ed20 	.word	0xe000ed20
 80137f0:	2000011c 	.word	0x2000011c
 80137f4:	e000ef34 	.word	0xe000ef34

080137f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013802:	b672      	cpsid	i
 8013804:	f383 8811 	msr	BASEPRI, r3
 8013808:	f3bf 8f6f 	isb	sy
 801380c:	f3bf 8f4f 	dsb	sy
 8013810:	b662      	cpsie	i
 8013812:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013814:	4b0f      	ldr	r3, [pc, #60]	; (8013854 <vPortEnterCritical+0x5c>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	3301      	adds	r3, #1
 801381a:	4a0e      	ldr	r2, [pc, #56]	; (8013854 <vPortEnterCritical+0x5c>)
 801381c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801381e:	4b0d      	ldr	r3, [pc, #52]	; (8013854 <vPortEnterCritical+0x5c>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b01      	cmp	r3, #1
 8013824:	d110      	bne.n	8013848 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013826:	4b0c      	ldr	r3, [pc, #48]	; (8013858 <vPortEnterCritical+0x60>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b00      	cmp	r3, #0
 801382e:	d00b      	beq.n	8013848 <vPortEnterCritical+0x50>
 8013830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013834:	b672      	cpsid	i
 8013836:	f383 8811 	msr	BASEPRI, r3
 801383a:	f3bf 8f6f 	isb	sy
 801383e:	f3bf 8f4f 	dsb	sy
 8013842:	b662      	cpsie	i
 8013844:	603b      	str	r3, [r7, #0]
 8013846:	e7fe      	b.n	8013846 <vPortEnterCritical+0x4e>
	}
}
 8013848:	bf00      	nop
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr
 8013854:	2000011c 	.word	0x2000011c
 8013858:	e000ed04 	.word	0xe000ed04

0801385c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801385c:	b480      	push	{r7}
 801385e:	b083      	sub	sp, #12
 8013860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013862:	4b12      	ldr	r3, [pc, #72]	; (80138ac <vPortExitCritical+0x50>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d10b      	bne.n	8013882 <vPortExitCritical+0x26>
 801386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801386e:	b672      	cpsid	i
 8013870:	f383 8811 	msr	BASEPRI, r3
 8013874:	f3bf 8f6f 	isb	sy
 8013878:	f3bf 8f4f 	dsb	sy
 801387c:	b662      	cpsie	i
 801387e:	607b      	str	r3, [r7, #4]
 8013880:	e7fe      	b.n	8013880 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8013882:	4b0a      	ldr	r3, [pc, #40]	; (80138ac <vPortExitCritical+0x50>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	3b01      	subs	r3, #1
 8013888:	4a08      	ldr	r2, [pc, #32]	; (80138ac <vPortExitCritical+0x50>)
 801388a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801388c:	4b07      	ldr	r3, [pc, #28]	; (80138ac <vPortExitCritical+0x50>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d104      	bne.n	801389e <vPortExitCritical+0x42>
 8013894:	2300      	movs	r3, #0
 8013896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801389e:	bf00      	nop
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	2000011c 	.word	0x2000011c

080138b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80138b0:	f3ef 8009 	mrs	r0, PSP
 80138b4:	f3bf 8f6f 	isb	sy
 80138b8:	4b15      	ldr	r3, [pc, #84]	; (8013910 <pxCurrentTCBConst>)
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	f01e 0f10 	tst.w	lr, #16
 80138c0:	bf08      	it	eq
 80138c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80138c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ca:	6010      	str	r0, [r2, #0]
 80138cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80138d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80138d4:	b672      	cpsid	i
 80138d6:	f380 8811 	msr	BASEPRI, r0
 80138da:	f3bf 8f4f 	dsb	sy
 80138de:	f3bf 8f6f 	isb	sy
 80138e2:	b662      	cpsie	i
 80138e4:	f7fe fec8 	bl	8012678 <vTaskSwitchContext>
 80138e8:	f04f 0000 	mov.w	r0, #0
 80138ec:	f380 8811 	msr	BASEPRI, r0
 80138f0:	bc09      	pop	{r0, r3}
 80138f2:	6819      	ldr	r1, [r3, #0]
 80138f4:	6808      	ldr	r0, [r1, #0]
 80138f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138fa:	f01e 0f10 	tst.w	lr, #16
 80138fe:	bf08      	it	eq
 8013900:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013904:	f380 8809 	msr	PSP, r0
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop

08013910 <pxCurrentTCBConst>:
 8013910:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013914:	bf00      	nop
 8013916:	bf00      	nop

08013918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
	__asm volatile
 801391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013922:	b672      	cpsid	i
 8013924:	f383 8811 	msr	BASEPRI, r3
 8013928:	f3bf 8f6f 	isb	sy
 801392c:	f3bf 8f4f 	dsb	sy
 8013930:	b662      	cpsie	i
 8013932:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013934:	f7fe fde6 	bl	8012504 <xTaskIncrementTick>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d003      	beq.n	8013946 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801393e:	4b06      	ldr	r3, [pc, #24]	; (8013958 <SysTick_Handler+0x40>)
 8013940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013944:	601a      	str	r2, [r3, #0]
 8013946:	2300      	movs	r3, #0
 8013948:	603b      	str	r3, [r7, #0]
	__asm volatile
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013950:	bf00      	nop
 8013952:	3708      	adds	r7, #8
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	e000ed04 	.word	0xe000ed04

0801395c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801395c:	b480      	push	{r7}
 801395e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013960:	4b0b      	ldr	r3, [pc, #44]	; (8013990 <vPortSetupTimerInterrupt+0x34>)
 8013962:	2200      	movs	r2, #0
 8013964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013966:	4b0b      	ldr	r3, [pc, #44]	; (8013994 <vPortSetupTimerInterrupt+0x38>)
 8013968:	2200      	movs	r2, #0
 801396a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801396c:	4b0a      	ldr	r3, [pc, #40]	; (8013998 <vPortSetupTimerInterrupt+0x3c>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	4a0a      	ldr	r2, [pc, #40]	; (801399c <vPortSetupTimerInterrupt+0x40>)
 8013972:	fba2 2303 	umull	r2, r3, r2, r3
 8013976:	099b      	lsrs	r3, r3, #6
 8013978:	4a09      	ldr	r2, [pc, #36]	; (80139a0 <vPortSetupTimerInterrupt+0x44>)
 801397a:	3b01      	subs	r3, #1
 801397c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801397e:	4b04      	ldr	r3, [pc, #16]	; (8013990 <vPortSetupTimerInterrupt+0x34>)
 8013980:	2207      	movs	r2, #7
 8013982:	601a      	str	r2, [r3, #0]
}
 8013984:	bf00      	nop
 8013986:	46bd      	mov	sp, r7
 8013988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398c:	4770      	bx	lr
 801398e:	bf00      	nop
 8013990:	e000e010 	.word	0xe000e010
 8013994:	e000e018 	.word	0xe000e018
 8013998:	20000000 	.word	0x20000000
 801399c:	10624dd3 	.word	0x10624dd3
 80139a0:	e000e014 	.word	0xe000e014

080139a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80139a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80139b4 <vPortEnableVFP+0x10>
 80139a8:	6801      	ldr	r1, [r0, #0]
 80139aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80139ae:	6001      	str	r1, [r0, #0]
 80139b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80139b2:	bf00      	nop
 80139b4:	e000ed88 	.word	0xe000ed88

080139b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80139b8:	b480      	push	{r7}
 80139ba:	b085      	sub	sp, #20
 80139bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80139be:	f3ef 8305 	mrs	r3, IPSR
 80139c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2b0f      	cmp	r3, #15
 80139c8:	d915      	bls.n	80139f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80139ca:	4a18      	ldr	r2, [pc, #96]	; (8013a2c <vPortValidateInterruptPriority+0x74>)
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	4413      	add	r3, r2
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80139d4:	4b16      	ldr	r3, [pc, #88]	; (8013a30 <vPortValidateInterruptPriority+0x78>)
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	7afa      	ldrb	r2, [r7, #11]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d20b      	bcs.n	80139f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80139de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e2:	b672      	cpsid	i
 80139e4:	f383 8811 	msr	BASEPRI, r3
 80139e8:	f3bf 8f6f 	isb	sy
 80139ec:	f3bf 8f4f 	dsb	sy
 80139f0:	b662      	cpsie	i
 80139f2:	607b      	str	r3, [r7, #4]
 80139f4:	e7fe      	b.n	80139f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80139f6:	4b0f      	ldr	r3, [pc, #60]	; (8013a34 <vPortValidateInterruptPriority+0x7c>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80139fe:	4b0e      	ldr	r3, [pc, #56]	; (8013a38 <vPortValidateInterruptPriority+0x80>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d90b      	bls.n	8013a1e <vPortValidateInterruptPriority+0x66>
 8013a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0a:	b672      	cpsid	i
 8013a0c:	f383 8811 	msr	BASEPRI, r3
 8013a10:	f3bf 8f6f 	isb	sy
 8013a14:	f3bf 8f4f 	dsb	sy
 8013a18:	b662      	cpsie	i
 8013a1a:	603b      	str	r3, [r7, #0]
 8013a1c:	e7fe      	b.n	8013a1c <vPortValidateInterruptPriority+0x64>
	}
 8013a1e:	bf00      	nop
 8013a20:	3714      	adds	r7, #20
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr
 8013a2a:	bf00      	nop
 8013a2c:	e000e3f0 	.word	0xe000e3f0
 8013a30:	20000fe0 	.word	0x20000fe0
 8013a34:	e000ed0c 	.word	0xe000ed0c
 8013a38:	20000fe4 	.word	0x20000fe4

08013a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b08a      	sub	sp, #40	; 0x28
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013a44:	2300      	movs	r3, #0
 8013a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013a48:	f7fe fc8e 	bl	8012368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013a4c:	4b5a      	ldr	r3, [pc, #360]	; (8013bb8 <pvPortMalloc+0x17c>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d101      	bne.n	8013a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013a54:	f000 f916 	bl	8013c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013a58:	4b58      	ldr	r3, [pc, #352]	; (8013bbc <pvPortMalloc+0x180>)
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	4013      	ands	r3, r2
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	f040 8090 	bne.w	8013b86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d01e      	beq.n	8013aaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013a6c:	2208      	movs	r2, #8
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	4413      	add	r3, r2
 8013a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f003 0307 	and.w	r3, r3, #7
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d015      	beq.n	8013aaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f023 0307 	bic.w	r3, r3, #7
 8013a84:	3308      	adds	r3, #8
 8013a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f003 0307 	and.w	r3, r3, #7
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00b      	beq.n	8013aaa <pvPortMalloc+0x6e>
 8013a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a96:	b672      	cpsid	i
 8013a98:	f383 8811 	msr	BASEPRI, r3
 8013a9c:	f3bf 8f6f 	isb	sy
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	b662      	cpsie	i
 8013aa6:	617b      	str	r3, [r7, #20]
 8013aa8:	e7fe      	b.n	8013aa8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d06a      	beq.n	8013b86 <pvPortMalloc+0x14a>
 8013ab0:	4b43      	ldr	r3, [pc, #268]	; (8013bc0 <pvPortMalloc+0x184>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d865      	bhi.n	8013b86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013aba:	4b42      	ldr	r3, [pc, #264]	; (8013bc4 <pvPortMalloc+0x188>)
 8013abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013abe:	4b41      	ldr	r3, [pc, #260]	; (8013bc4 <pvPortMalloc+0x188>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ac4:	e004      	b.n	8013ad0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d903      	bls.n	8013ae2 <pvPortMalloc+0xa6>
 8013ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d1f1      	bne.n	8013ac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013ae2:	4b35      	ldr	r3, [pc, #212]	; (8013bb8 <pvPortMalloc+0x17c>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d04c      	beq.n	8013b86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013aec:	6a3b      	ldr	r3, [r7, #32]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2208      	movs	r2, #8
 8013af2:	4413      	add	r3, r2
 8013af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	6a3b      	ldr	r3, [r7, #32]
 8013afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b00:	685a      	ldr	r2, [r3, #4]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	1ad2      	subs	r2, r2, r3
 8013b06:	2308      	movs	r3, #8
 8013b08:	005b      	lsls	r3, r3, #1
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d920      	bls.n	8013b50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	4413      	add	r3, r2
 8013b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	f003 0307 	and.w	r3, r3, #7
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d00b      	beq.n	8013b38 <pvPortMalloc+0xfc>
 8013b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b24:	b672      	cpsid	i
 8013b26:	f383 8811 	msr	BASEPRI, r3
 8013b2a:	f3bf 8f6f 	isb	sy
 8013b2e:	f3bf 8f4f 	dsb	sy
 8013b32:	b662      	cpsie	i
 8013b34:	613b      	str	r3, [r7, #16]
 8013b36:	e7fe      	b.n	8013b36 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3a:	685a      	ldr	r2, [r3, #4]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	1ad2      	subs	r2, r2, r3
 8013b40:	69bb      	ldr	r3, [r7, #24]
 8013b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013b4a:	69b8      	ldr	r0, [r7, #24]
 8013b4c:	f000 f8fc 	bl	8013d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013b50:	4b1b      	ldr	r3, [pc, #108]	; (8013bc0 <pvPortMalloc+0x184>)
 8013b52:	681a      	ldr	r2, [r3, #0]
 8013b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	1ad3      	subs	r3, r2, r3
 8013b5a:	4a19      	ldr	r2, [pc, #100]	; (8013bc0 <pvPortMalloc+0x184>)
 8013b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013b5e:	4b18      	ldr	r3, [pc, #96]	; (8013bc0 <pvPortMalloc+0x184>)
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	4b19      	ldr	r3, [pc, #100]	; (8013bc8 <pvPortMalloc+0x18c>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d203      	bcs.n	8013b72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013b6a:	4b15      	ldr	r3, [pc, #84]	; (8013bc0 <pvPortMalloc+0x184>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	4a16      	ldr	r2, [pc, #88]	; (8013bc8 <pvPortMalloc+0x18c>)
 8013b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b74:	685a      	ldr	r2, [r3, #4]
 8013b76:	4b11      	ldr	r3, [pc, #68]	; (8013bbc <pvPortMalloc+0x180>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	431a      	orrs	r2, r3
 8013b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b82:	2200      	movs	r2, #0
 8013b84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013b86:	f7fe fbfd 	bl	8012384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	f003 0307 	and.w	r3, r3, #7
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00b      	beq.n	8013bac <pvPortMalloc+0x170>
 8013b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b98:	b672      	cpsid	i
 8013b9a:	f383 8811 	msr	BASEPRI, r3
 8013b9e:	f3bf 8f6f 	isb	sy
 8013ba2:	f3bf 8f4f 	dsb	sy
 8013ba6:	b662      	cpsie	i
 8013ba8:	60fb      	str	r3, [r7, #12]
 8013baa:	e7fe      	b.n	8013baa <pvPortMalloc+0x16e>
	return pvReturn;
 8013bac:	69fb      	ldr	r3, [r7, #28]
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3728      	adds	r7, #40	; 0x28
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	200087f0 	.word	0x200087f0
 8013bbc:	200087fc 	.word	0x200087fc
 8013bc0:	200087f4 	.word	0x200087f4
 8013bc4:	200087e8 	.word	0x200087e8
 8013bc8:	200087f8 	.word	0x200087f8

08013bcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b086      	sub	sp, #24
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d04a      	beq.n	8013c74 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013bde:	2308      	movs	r3, #8
 8013be0:	425b      	negs	r3, r3
 8013be2:	697a      	ldr	r2, [r7, #20]
 8013be4:	4413      	add	r3, r2
 8013be6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	685a      	ldr	r2, [r3, #4]
 8013bf0:	4b22      	ldr	r3, [pc, #136]	; (8013c7c <vPortFree+0xb0>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	4013      	ands	r3, r2
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10b      	bne.n	8013c12 <vPortFree+0x46>
 8013bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfe:	b672      	cpsid	i
 8013c00:	f383 8811 	msr	BASEPRI, r3
 8013c04:	f3bf 8f6f 	isb	sy
 8013c08:	f3bf 8f4f 	dsb	sy
 8013c0c:	b662      	cpsie	i
 8013c0e:	60fb      	str	r3, [r7, #12]
 8013c10:	e7fe      	b.n	8013c10 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d00b      	beq.n	8013c32 <vPortFree+0x66>
 8013c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1e:	b672      	cpsid	i
 8013c20:	f383 8811 	msr	BASEPRI, r3
 8013c24:	f3bf 8f6f 	isb	sy
 8013c28:	f3bf 8f4f 	dsb	sy
 8013c2c:	b662      	cpsie	i
 8013c2e:	60bb      	str	r3, [r7, #8]
 8013c30:	e7fe      	b.n	8013c30 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	685a      	ldr	r2, [r3, #4]
 8013c36:	4b11      	ldr	r3, [pc, #68]	; (8013c7c <vPortFree+0xb0>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	4013      	ands	r3, r2
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d019      	beq.n	8013c74 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d115      	bne.n	8013c74 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	685a      	ldr	r2, [r3, #4]
 8013c4c:	4b0b      	ldr	r3, [pc, #44]	; (8013c7c <vPortFree+0xb0>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	43db      	mvns	r3, r3
 8013c52:	401a      	ands	r2, r3
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013c58:	f7fe fb86 	bl	8012368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	685a      	ldr	r2, [r3, #4]
 8013c60:	4b07      	ldr	r3, [pc, #28]	; (8013c80 <vPortFree+0xb4>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4413      	add	r3, r2
 8013c66:	4a06      	ldr	r2, [pc, #24]	; (8013c80 <vPortFree+0xb4>)
 8013c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013c6a:	6938      	ldr	r0, [r7, #16]
 8013c6c:	f000 f86c 	bl	8013d48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013c70:	f7fe fb88 	bl	8012384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013c74:	bf00      	nop
 8013c76:	3718      	adds	r7, #24
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	200087fc 	.word	0x200087fc
 8013c80:	200087f4 	.word	0x200087f4

08013c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013c84:	b480      	push	{r7}
 8013c86:	b085      	sub	sp, #20
 8013c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013c8a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8013c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013c90:	4b27      	ldr	r3, [pc, #156]	; (8013d30 <prvHeapInit+0xac>)
 8013c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f003 0307 	and.w	r3, r3, #7
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d00c      	beq.n	8013cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	3307      	adds	r3, #7
 8013ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f023 0307 	bic.w	r3, r3, #7
 8013caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013cac:	68ba      	ldr	r2, [r7, #8]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	1ad3      	subs	r3, r2, r3
 8013cb2:	4a1f      	ldr	r2, [pc, #124]	; (8013d30 <prvHeapInit+0xac>)
 8013cb4:	4413      	add	r3, r2
 8013cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013cbc:	4a1d      	ldr	r2, [pc, #116]	; (8013d34 <prvHeapInit+0xb0>)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013cc2:	4b1c      	ldr	r3, [pc, #112]	; (8013d34 <prvHeapInit+0xb0>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	68ba      	ldr	r2, [r7, #8]
 8013ccc:	4413      	add	r3, r2
 8013cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013cd0:	2208      	movs	r2, #8
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	1a9b      	subs	r3, r3, r2
 8013cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	f023 0307 	bic.w	r3, r3, #7
 8013cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	4a15      	ldr	r2, [pc, #84]	; (8013d38 <prvHeapInit+0xb4>)
 8013ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013ce6:	4b14      	ldr	r3, [pc, #80]	; (8013d38 <prvHeapInit+0xb4>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	2200      	movs	r2, #0
 8013cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013cee:	4b12      	ldr	r3, [pc, #72]	; (8013d38 <prvHeapInit+0xb4>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	68fa      	ldr	r2, [r7, #12]
 8013cfe:	1ad2      	subs	r2, r2, r3
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013d04:	4b0c      	ldr	r3, [pc, #48]	; (8013d38 <prvHeapInit+0xb4>)
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	4a0a      	ldr	r2, [pc, #40]	; (8013d3c <prvHeapInit+0xb8>)
 8013d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	4a09      	ldr	r2, [pc, #36]	; (8013d40 <prvHeapInit+0xbc>)
 8013d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013d1c:	4b09      	ldr	r3, [pc, #36]	; (8013d44 <prvHeapInit+0xc0>)
 8013d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013d22:	601a      	str	r2, [r3, #0]
}
 8013d24:	bf00      	nop
 8013d26:	3714      	adds	r7, #20
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr
 8013d30:	20000fe8 	.word	0x20000fe8
 8013d34:	200087e8 	.word	0x200087e8
 8013d38:	200087f0 	.word	0x200087f0
 8013d3c:	200087f8 	.word	0x200087f8
 8013d40:	200087f4 	.word	0x200087f4
 8013d44:	200087fc 	.word	0x200087fc

08013d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b085      	sub	sp, #20
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013d50:	4b28      	ldr	r3, [pc, #160]	; (8013df4 <prvInsertBlockIntoFreeList+0xac>)
 8013d52:	60fb      	str	r3, [r7, #12]
 8013d54:	e002      	b.n	8013d5c <prvInsertBlockIntoFreeList+0x14>
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	60fb      	str	r3, [r7, #12]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d8f7      	bhi.n	8013d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	68ba      	ldr	r2, [r7, #8]
 8013d70:	4413      	add	r3, r2
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d108      	bne.n	8013d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	685a      	ldr	r2, [r3, #4]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	441a      	add	r2, r3
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	68ba      	ldr	r2, [r7, #8]
 8013d94:	441a      	add	r2, r3
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d118      	bne.n	8013dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	681a      	ldr	r2, [r3, #0]
 8013da2:	4b15      	ldr	r3, [pc, #84]	; (8013df8 <prvInsertBlockIntoFreeList+0xb0>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d00d      	beq.n	8013dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	685a      	ldr	r2, [r3, #4]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	441a      	add	r2, r3
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	601a      	str	r2, [r3, #0]
 8013dc4:	e008      	b.n	8013dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013dc6:	4b0c      	ldr	r3, [pc, #48]	; (8013df8 <prvInsertBlockIntoFreeList+0xb0>)
 8013dc8:	681a      	ldr	r2, [r3, #0]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	601a      	str	r2, [r3, #0]
 8013dce:	e003      	b.n	8013dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681a      	ldr	r2, [r3, #0]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013dd8:	68fa      	ldr	r2, [r7, #12]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d002      	beq.n	8013de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013de6:	bf00      	nop
 8013de8:	3714      	adds	r7, #20
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop
 8013df4:	200087e8 	.word	0x200087e8
 8013df8:	200087f0 	.word	0x200087f0

08013dfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013e00:	2200      	movs	r2, #0
 8013e02:	4912      	ldr	r1, [pc, #72]	; (8013e4c <MX_USB_DEVICE_Init+0x50>)
 8013e04:	4812      	ldr	r0, [pc, #72]	; (8013e50 <MX_USB_DEVICE_Init+0x54>)
 8013e06:	f7f7 ff73 	bl	800bcf0 <USBD_Init>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d001      	beq.n	8013e14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013e10:	f7ed fb68 	bl	80014e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013e14:	490f      	ldr	r1, [pc, #60]	; (8013e54 <MX_USB_DEVICE_Init+0x58>)
 8013e16:	480e      	ldr	r0, [pc, #56]	; (8013e50 <MX_USB_DEVICE_Init+0x54>)
 8013e18:	f7f7 ffa0 	bl	800bd5c <USBD_RegisterClass>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d001      	beq.n	8013e26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013e22:	f7ed fb5f 	bl	80014e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013e26:	490c      	ldr	r1, [pc, #48]	; (8013e58 <MX_USB_DEVICE_Init+0x5c>)
 8013e28:	4809      	ldr	r0, [pc, #36]	; (8013e50 <MX_USB_DEVICE_Init+0x54>)
 8013e2a:	f7f7 fec5 	bl	800bbb8 <USBD_CDC_RegisterInterface>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d001      	beq.n	8013e38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013e34:	f7ed fb56 	bl	80014e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013e38:	4805      	ldr	r0, [pc, #20]	; (8013e50 <MX_USB_DEVICE_Init+0x54>)
 8013e3a:	f7f7 ffb0 	bl	800bd9e <USBD_Start>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d001      	beq.n	8013e48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013e44:	f7ed fb4e 	bl	80014e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013e48:	bf00      	nop
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	20000134 	.word	0x20000134
 8013e50:	20011630 	.word	0x20011630
 8013e54:	20000018 	.word	0x20000018
 8013e58:	20000120 	.word	0x20000120

08013e5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013e60:	2200      	movs	r2, #0
 8013e62:	4905      	ldr	r1, [pc, #20]	; (8013e78 <CDC_Init_FS+0x1c>)
 8013e64:	4805      	ldr	r0, [pc, #20]	; (8013e7c <CDC_Init_FS+0x20>)
 8013e66:	f7f7 febc 	bl	800bbe2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013e6a:	4905      	ldr	r1, [pc, #20]	; (8013e80 <CDC_Init_FS+0x24>)
 8013e6c:	4803      	ldr	r0, [pc, #12]	; (8013e7c <CDC_Init_FS+0x20>)
 8013e6e:	f7f7 fed1 	bl	800bc14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013e72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	bd80      	pop	{r7, pc}
 8013e78:	20012100 	.word	0x20012100
 8013e7c:	20011630 	.word	0x20011630
 8013e80:	20011900 	.word	0x20011900

08013e84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013e84:	b480      	push	{r7}
 8013e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013e88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr

08013e94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b083      	sub	sp, #12
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	6039      	str	r1, [r7, #0]
 8013e9e:	71fb      	strb	r3, [r7, #7]
 8013ea0:	4613      	mov	r3, r2
 8013ea2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	2b23      	cmp	r3, #35	; 0x23
 8013ea8:	d84a      	bhi.n	8013f40 <CDC_Control_FS+0xac>
 8013eaa:	a201      	add	r2, pc, #4	; (adr r2, 8013eb0 <CDC_Control_FS+0x1c>)
 8013eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eb0:	08013f41 	.word	0x08013f41
 8013eb4:	08013f41 	.word	0x08013f41
 8013eb8:	08013f41 	.word	0x08013f41
 8013ebc:	08013f41 	.word	0x08013f41
 8013ec0:	08013f41 	.word	0x08013f41
 8013ec4:	08013f41 	.word	0x08013f41
 8013ec8:	08013f41 	.word	0x08013f41
 8013ecc:	08013f41 	.word	0x08013f41
 8013ed0:	08013f41 	.word	0x08013f41
 8013ed4:	08013f41 	.word	0x08013f41
 8013ed8:	08013f41 	.word	0x08013f41
 8013edc:	08013f41 	.word	0x08013f41
 8013ee0:	08013f41 	.word	0x08013f41
 8013ee4:	08013f41 	.word	0x08013f41
 8013ee8:	08013f41 	.word	0x08013f41
 8013eec:	08013f41 	.word	0x08013f41
 8013ef0:	08013f41 	.word	0x08013f41
 8013ef4:	08013f41 	.word	0x08013f41
 8013ef8:	08013f41 	.word	0x08013f41
 8013efc:	08013f41 	.word	0x08013f41
 8013f00:	08013f41 	.word	0x08013f41
 8013f04:	08013f41 	.word	0x08013f41
 8013f08:	08013f41 	.word	0x08013f41
 8013f0c:	08013f41 	.word	0x08013f41
 8013f10:	08013f41 	.word	0x08013f41
 8013f14:	08013f41 	.word	0x08013f41
 8013f18:	08013f41 	.word	0x08013f41
 8013f1c:	08013f41 	.word	0x08013f41
 8013f20:	08013f41 	.word	0x08013f41
 8013f24:	08013f41 	.word	0x08013f41
 8013f28:	08013f41 	.word	0x08013f41
 8013f2c:	08013f41 	.word	0x08013f41
 8013f30:	08013f41 	.word	0x08013f41
 8013f34:	08013f41 	.word	0x08013f41
 8013f38:	08013f41 	.word	0x08013f41
 8013f3c:	08013f41 	.word	0x08013f41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013f40:	bf00      	nop
  }

  return (USBD_OK);
 8013f42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	370c      	adds	r7, #12
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013f5a:	6879      	ldr	r1, [r7, #4]
 8013f5c:	4805      	ldr	r0, [pc, #20]	; (8013f74 <CDC_Receive_FS+0x24>)
 8013f5e:	f7f7 fe59 	bl	800bc14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013f62:	4804      	ldr	r0, [pc, #16]	; (8013f74 <CDC_Receive_FS+0x24>)
 8013f64:	f7f7 fe9a 	bl	800bc9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013f68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3708      	adds	r7, #8
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	20011630 	.word	0x20011630

08013f78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	460b      	mov	r3, r1
 8013f82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013f84:	2300      	movs	r3, #0
 8013f86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013f88:	4b0d      	ldr	r3, [pc, #52]	; (8013fc0 <CDC_Transmit_FS+0x48>)
 8013f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d001      	beq.n	8013f9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013f9a:	2301      	movs	r3, #1
 8013f9c:	e00b      	b.n	8013fb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013f9e:	887b      	ldrh	r3, [r7, #2]
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	6879      	ldr	r1, [r7, #4]
 8013fa4:	4806      	ldr	r0, [pc, #24]	; (8013fc0 <CDC_Transmit_FS+0x48>)
 8013fa6:	f7f7 fe1c 	bl	800bbe2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013faa:	4805      	ldr	r0, [pc, #20]	; (8013fc0 <CDC_Transmit_FS+0x48>)
 8013fac:	f7f7 fe46 	bl	800bc3c <USBD_CDC_TransmitPacket>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	20011630 	.word	0x20011630

08013fc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b087      	sub	sp, #28
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	371c      	adds	r7, #28
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe4:	4770      	bx	lr
	...

08013fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	4603      	mov	r3, r0
 8013ff0:	6039      	str	r1, [r7, #0]
 8013ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	2212      	movs	r2, #18
 8013ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013ffa:	4b03      	ldr	r3, [pc, #12]	; (8014008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr
 8014008:	20000154 	.word	0x20000154

0801400c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801400c:	b480      	push	{r7}
 801400e:	b083      	sub	sp, #12
 8014010:	af00      	add	r7, sp, #0
 8014012:	4603      	mov	r3, r0
 8014014:	6039      	str	r1, [r7, #0]
 8014016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	2204      	movs	r2, #4
 801401c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801401e:	4b03      	ldr	r3, [pc, #12]	; (801402c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014020:	4618      	mov	r0, r3
 8014022:	370c      	adds	r7, #12
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr
 801402c:	20000174 	.word	0x20000174

08014030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	4603      	mov	r3, r0
 8014038:	6039      	str	r1, [r7, #0]
 801403a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801403c:	79fb      	ldrb	r3, [r7, #7]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d105      	bne.n	801404e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	4907      	ldr	r1, [pc, #28]	; (8014064 <USBD_FS_ProductStrDescriptor+0x34>)
 8014046:	4808      	ldr	r0, [pc, #32]	; (8014068 <USBD_FS_ProductStrDescriptor+0x38>)
 8014048:	f7f8 fea1 	bl	800cd8e <USBD_GetString>
 801404c:	e004      	b.n	8014058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801404e:	683a      	ldr	r2, [r7, #0]
 8014050:	4904      	ldr	r1, [pc, #16]	; (8014064 <USBD_FS_ProductStrDescriptor+0x34>)
 8014052:	4805      	ldr	r0, [pc, #20]	; (8014068 <USBD_FS_ProductStrDescriptor+0x38>)
 8014054:	f7f8 fe9b 	bl	800cd8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8014058:	4b02      	ldr	r3, [pc, #8]	; (8014064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801405a:	4618      	mov	r0, r3
 801405c:	3708      	adds	r7, #8
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	20012900 	.word	0x20012900
 8014068:	08016848 	.word	0x08016848

0801406c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	4603      	mov	r3, r0
 8014074:	6039      	str	r1, [r7, #0]
 8014076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014078:	683a      	ldr	r2, [r7, #0]
 801407a:	4904      	ldr	r1, [pc, #16]	; (801408c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801407c:	4804      	ldr	r0, [pc, #16]	; (8014090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801407e:	f7f8 fe86 	bl	800cd8e <USBD_GetString>
  return USBD_StrDesc;
 8014082:	4b02      	ldr	r3, [pc, #8]	; (801408c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014084:	4618      	mov	r0, r3
 8014086:	3708      	adds	r7, #8
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	20012900 	.word	0x20012900
 8014090:	08016860 	.word	0x08016860

08014094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	4603      	mov	r3, r0
 801409c:	6039      	str	r1, [r7, #0]
 801409e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	221a      	movs	r2, #26
 80140a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80140a6:	f000 f855 	bl	8014154 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80140aa:	4b02      	ldr	r3, [pc, #8]	; (80140b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	20000178 	.word	0x20000178

080140b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
 80140be:	4603      	mov	r3, r0
 80140c0:	6039      	str	r1, [r7, #0]
 80140c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80140c4:	79fb      	ldrb	r3, [r7, #7]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d105      	bne.n	80140d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80140ca:	683a      	ldr	r2, [r7, #0]
 80140cc:	4907      	ldr	r1, [pc, #28]	; (80140ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80140ce:	4808      	ldr	r0, [pc, #32]	; (80140f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80140d0:	f7f8 fe5d 	bl	800cd8e <USBD_GetString>
 80140d4:	e004      	b.n	80140e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80140d6:	683a      	ldr	r2, [r7, #0]
 80140d8:	4904      	ldr	r1, [pc, #16]	; (80140ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80140da:	4805      	ldr	r0, [pc, #20]	; (80140f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80140dc:	f7f8 fe57 	bl	800cd8e <USBD_GetString>
  }
  return USBD_StrDesc;
 80140e0:	4b02      	ldr	r3, [pc, #8]	; (80140ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3708      	adds	r7, #8
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	20012900 	.word	0x20012900
 80140f0:	08016874 	.word	0x08016874

080140f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	4603      	mov	r3, r0
 80140fc:	6039      	str	r1, [r7, #0]
 80140fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014100:	79fb      	ldrb	r3, [r7, #7]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d105      	bne.n	8014112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014106:	683a      	ldr	r2, [r7, #0]
 8014108:	4907      	ldr	r1, [pc, #28]	; (8014128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801410a:	4808      	ldr	r0, [pc, #32]	; (801412c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801410c:	f7f8 fe3f 	bl	800cd8e <USBD_GetString>
 8014110:	e004      	b.n	801411c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014112:	683a      	ldr	r2, [r7, #0]
 8014114:	4904      	ldr	r1, [pc, #16]	; (8014128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014116:	4805      	ldr	r0, [pc, #20]	; (801412c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014118:	f7f8 fe39 	bl	800cd8e <USBD_GetString>
  }
  return USBD_StrDesc;
 801411c:	4b02      	ldr	r3, [pc, #8]	; (8014128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801411e:	4618      	mov	r0, r3
 8014120:	3708      	adds	r7, #8
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	20012900 	.word	0x20012900
 801412c:	08016880 	.word	0x08016880

08014130 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014130:	b480      	push	{r7}
 8014132:	b083      	sub	sp, #12
 8014134:	af00      	add	r7, sp, #0
 8014136:	4603      	mov	r3, r0
 8014138:	6039      	str	r1, [r7, #0]
 801413a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	220c      	movs	r2, #12
 8014140:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8014142:	4b03      	ldr	r3, [pc, #12]	; (8014150 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8014144:	4618      	mov	r0, r3
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr
 8014150:	20000168 	.word	0x20000168

08014154 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b084      	sub	sp, #16
 8014158:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801415a:	4b0f      	ldr	r3, [pc, #60]	; (8014198 <Get_SerialNum+0x44>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014160:	4b0e      	ldr	r3, [pc, #56]	; (801419c <Get_SerialNum+0x48>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014166:	4b0e      	ldr	r3, [pc, #56]	; (80141a0 <Get_SerialNum+0x4c>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801416c:	68fa      	ldr	r2, [r7, #12]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	4413      	add	r3, r2
 8014172:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d009      	beq.n	801418e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801417a:	2208      	movs	r2, #8
 801417c:	4909      	ldr	r1, [pc, #36]	; (80141a4 <Get_SerialNum+0x50>)
 801417e:	68f8      	ldr	r0, [r7, #12]
 8014180:	f000 f814 	bl	80141ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014184:	2204      	movs	r2, #4
 8014186:	4908      	ldr	r1, [pc, #32]	; (80141a8 <Get_SerialNum+0x54>)
 8014188:	68b8      	ldr	r0, [r7, #8]
 801418a:	f000 f80f 	bl	80141ac <IntToUnicode>
  }
}
 801418e:	bf00      	nop
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	1ff0f420 	.word	0x1ff0f420
 801419c:	1ff0f424 	.word	0x1ff0f424
 80141a0:	1ff0f428 	.word	0x1ff0f428
 80141a4:	2000017a 	.word	0x2000017a
 80141a8:	2000018a 	.word	0x2000018a

080141ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80141ac:	b480      	push	{r7}
 80141ae:	b087      	sub	sp, #28
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	60f8      	str	r0, [r7, #12]
 80141b4:	60b9      	str	r1, [r7, #8]
 80141b6:	4613      	mov	r3, r2
 80141b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80141ba:	2300      	movs	r3, #0
 80141bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80141be:	2300      	movs	r3, #0
 80141c0:	75fb      	strb	r3, [r7, #23]
 80141c2:	e027      	b.n	8014214 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	0f1b      	lsrs	r3, r3, #28
 80141c8:	2b09      	cmp	r3, #9
 80141ca:	d80b      	bhi.n	80141e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	0f1b      	lsrs	r3, r3, #28
 80141d0:	b2da      	uxtb	r2, r3
 80141d2:	7dfb      	ldrb	r3, [r7, #23]
 80141d4:	005b      	lsls	r3, r3, #1
 80141d6:	4619      	mov	r1, r3
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	440b      	add	r3, r1
 80141dc:	3230      	adds	r2, #48	; 0x30
 80141de:	b2d2      	uxtb	r2, r2
 80141e0:	701a      	strb	r2, [r3, #0]
 80141e2:	e00a      	b.n	80141fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	0f1b      	lsrs	r3, r3, #28
 80141e8:	b2da      	uxtb	r2, r3
 80141ea:	7dfb      	ldrb	r3, [r7, #23]
 80141ec:	005b      	lsls	r3, r3, #1
 80141ee:	4619      	mov	r1, r3
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	440b      	add	r3, r1
 80141f4:	3237      	adds	r2, #55	; 0x37
 80141f6:	b2d2      	uxtb	r2, r2
 80141f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	011b      	lsls	r3, r3, #4
 80141fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014200:	7dfb      	ldrb	r3, [r7, #23]
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	3301      	adds	r3, #1
 8014206:	68ba      	ldr	r2, [r7, #8]
 8014208:	4413      	add	r3, r2
 801420a:	2200      	movs	r2, #0
 801420c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801420e:	7dfb      	ldrb	r3, [r7, #23]
 8014210:	3301      	adds	r3, #1
 8014212:	75fb      	strb	r3, [r7, #23]
 8014214:	7dfa      	ldrb	r2, [r7, #23]
 8014216:	79fb      	ldrb	r3, [r7, #7]
 8014218:	429a      	cmp	r2, r3
 801421a:	d3d3      	bcc.n	80141c4 <IntToUnicode+0x18>
  }
}
 801421c:	bf00      	nop
 801421e:	371c      	adds	r7, #28
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr

08014228 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b08a      	sub	sp, #40	; 0x28
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014230:	f107 0314 	add.w	r3, r7, #20
 8014234:	2200      	movs	r2, #0
 8014236:	601a      	str	r2, [r3, #0]
 8014238:	605a      	str	r2, [r3, #4]
 801423a:	609a      	str	r2, [r3, #8]
 801423c:	60da      	str	r2, [r3, #12]
 801423e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014248:	d13c      	bne.n	80142c4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801424a:	4b20      	ldr	r3, [pc, #128]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 801424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801424e:	4a1f      	ldr	r2, [pc, #124]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 8014250:	f043 0301 	orr.w	r3, r3, #1
 8014254:	6313      	str	r3, [r2, #48]	; 0x30
 8014256:	4b1d      	ldr	r3, [pc, #116]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 8014258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801425a:	f003 0301 	and.w	r3, r3, #1
 801425e:	613b      	str	r3, [r7, #16]
 8014260:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014262:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014268:	2302      	movs	r3, #2
 801426a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801426c:	2300      	movs	r3, #0
 801426e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014270:	2303      	movs	r3, #3
 8014272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014274:	230a      	movs	r3, #10
 8014276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014278:	f107 0314 	add.w	r3, r7, #20
 801427c:	4619      	mov	r1, r3
 801427e:	4814      	ldr	r0, [pc, #80]	; (80142d0 <HAL_PCD_MspInit+0xa8>)
 8014280:	f7ef ff8e 	bl	80041a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014284:	4b11      	ldr	r3, [pc, #68]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 8014286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014288:	4a10      	ldr	r2, [pc, #64]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 801428a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801428e:	6353      	str	r3, [r2, #52]	; 0x34
 8014290:	4b0e      	ldr	r3, [pc, #56]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 8014292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014298:	60fb      	str	r3, [r7, #12]
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	4b0b      	ldr	r3, [pc, #44]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 801429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142a0:	4a0a      	ldr	r2, [pc, #40]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 80142a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80142a6:	6453      	str	r3, [r2, #68]	; 0x44
 80142a8:	4b08      	ldr	r3, [pc, #32]	; (80142cc <HAL_PCD_MspInit+0xa4>)
 80142aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142b0:	60bb      	str	r3, [r7, #8]
 80142b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80142b4:	2200      	movs	r2, #0
 80142b6:	2105      	movs	r1, #5
 80142b8:	2043      	movs	r0, #67	; 0x43
 80142ba:	f7ef fba3 	bl	8003a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80142be:	2043      	movs	r0, #67	; 0x43
 80142c0:	f7ef fbbc 	bl	8003a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80142c4:	bf00      	nop
 80142c6:	3728      	adds	r7, #40	; 0x28
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	40023800 	.word	0x40023800
 80142d0:	40020000 	.word	0x40020000

080142d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80142e8:	4619      	mov	r1, r3
 80142ea:	4610      	mov	r0, r2
 80142ec:	f7f7 fda2 	bl	800be34 <USBD_LL_SetupStage>
}
 80142f0:	bf00      	nop
 80142f2:	3708      	adds	r7, #8
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	460b      	mov	r3, r1
 8014302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801430a:	78fa      	ldrb	r2, [r7, #3]
 801430c:	6879      	ldr	r1, [r7, #4]
 801430e:	4613      	mov	r3, r2
 8014310:	00db      	lsls	r3, r3, #3
 8014312:	1a9b      	subs	r3, r3, r2
 8014314:	009b      	lsls	r3, r3, #2
 8014316:	440b      	add	r3, r1
 8014318:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	78fb      	ldrb	r3, [r7, #3]
 8014320:	4619      	mov	r1, r3
 8014322:	f7f7 fdda 	bl	800beda <USBD_LL_DataOutStage>
}
 8014326:	bf00      	nop
 8014328:	3708      	adds	r7, #8
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}

0801432e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801432e:	b580      	push	{r7, lr}
 8014330:	b082      	sub	sp, #8
 8014332:	af00      	add	r7, sp, #0
 8014334:	6078      	str	r0, [r7, #4]
 8014336:	460b      	mov	r3, r1
 8014338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8014340:	78fa      	ldrb	r2, [r7, #3]
 8014342:	6879      	ldr	r1, [r7, #4]
 8014344:	4613      	mov	r3, r2
 8014346:	00db      	lsls	r3, r3, #3
 8014348:	1a9b      	subs	r3, r3, r2
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	440b      	add	r3, r1
 801434e:	3348      	adds	r3, #72	; 0x48
 8014350:	681a      	ldr	r2, [r3, #0]
 8014352:	78fb      	ldrb	r3, [r7, #3]
 8014354:	4619      	mov	r1, r3
 8014356:	f7f7 fe23 	bl	800bfa0 <USBD_LL_DataInStage>
}
 801435a:	bf00      	nop
 801435c:	3708      	adds	r7, #8
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}

08014362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014362:	b580      	push	{r7, lr}
 8014364:	b082      	sub	sp, #8
 8014366:	af00      	add	r7, sp, #0
 8014368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014370:	4618      	mov	r0, r3
 8014372:	f7f7 ff27 	bl	800c1c4 <USBD_LL_SOF>
}
 8014376:	bf00      	nop
 8014378:	3708      	adds	r7, #8
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801437e:	b580      	push	{r7, lr}
 8014380:	b084      	sub	sp, #16
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014386:	2301      	movs	r3, #1
 8014388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	68db      	ldr	r3, [r3, #12]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d102      	bne.n	8014398 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014392:	2300      	movs	r3, #0
 8014394:	73fb      	strb	r3, [r7, #15]
 8014396:	e008      	b.n	80143aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	68db      	ldr	r3, [r3, #12]
 801439c:	2b02      	cmp	r3, #2
 801439e:	d102      	bne.n	80143a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80143a0:	2301      	movs	r3, #1
 80143a2:	73fb      	strb	r3, [r7, #15]
 80143a4:	e001      	b.n	80143aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80143a6:	f7ed f89d 	bl	80014e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80143b0:	7bfa      	ldrb	r2, [r7, #15]
 80143b2:	4611      	mov	r1, r2
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7f7 feca 	bl	800c14e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7f7 fe83 	bl	800c0cc <USBD_LL_Reset>
}
 80143c6:	bf00      	nop
 80143c8:	3710      	adds	r7, #16
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
	...

080143d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80143de:	4618      	mov	r0, r3
 80143e0:	f7f7 fec5 	bl	800c16e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	6812      	ldr	r2, [r2, #0]
 80143f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80143f6:	f043 0301 	orr.w	r3, r3, #1
 80143fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6a1b      	ldr	r3, [r3, #32]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d005      	beq.n	8014410 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014404:	4b04      	ldr	r3, [pc, #16]	; (8014418 <HAL_PCD_SuspendCallback+0x48>)
 8014406:	691b      	ldr	r3, [r3, #16]
 8014408:	4a03      	ldr	r2, [pc, #12]	; (8014418 <HAL_PCD_SuspendCallback+0x48>)
 801440a:	f043 0306 	orr.w	r3, r3, #6
 801440e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014410:	bf00      	nop
 8014412:	3708      	adds	r7, #8
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}
 8014418:	e000ed00 	.word	0xe000ed00

0801441c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801442a:	4618      	mov	r0, r3
 801442c:	f7f7 feb4 	bl	800c198 <USBD_LL_Resume>
}
 8014430:	bf00      	nop
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
 8014440:	460b      	mov	r3, r1
 8014442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801444a:	78fa      	ldrb	r2, [r7, #3]
 801444c:	4611      	mov	r1, r2
 801444e:	4618      	mov	r0, r3
 8014450:	f7f7 fedf 	bl	800c212 <USBD_LL_IsoOUTIncomplete>
}
 8014454:	bf00      	nop
 8014456:	3708      	adds	r7, #8
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	460b      	mov	r3, r1
 8014466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801446e:	78fa      	ldrb	r2, [r7, #3]
 8014470:	4611      	mov	r1, r2
 8014472:	4618      	mov	r0, r3
 8014474:	f7f7 fec0 	bl	800c1f8 <USBD_LL_IsoINIncomplete>
}
 8014478:	bf00      	nop
 801447a:	3708      	adds	r7, #8
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}

08014480 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801448e:	4618      	mov	r0, r3
 8014490:	f7f7 fecc 	bl	800c22c <USBD_LL_DevConnected>
}
 8014494:	bf00      	nop
 8014496:	3708      	adds	r7, #8
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b082      	sub	sp, #8
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7f7 fec9 	bl	800c242 <USBD_LL_DevDisconnected>
}
 80144b0:	bf00      	nop
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d13c      	bne.n	8014542 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80144c8:	4a20      	ldr	r2, [pc, #128]	; (801454c <USBD_LL_Init+0x94>)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	4a1e      	ldr	r2, [pc, #120]	; (801454c <USBD_LL_Init+0x94>)
 80144d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80144d8:	4b1c      	ldr	r3, [pc, #112]	; (801454c <USBD_LL_Init+0x94>)
 80144da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80144de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80144e0:	4b1a      	ldr	r3, [pc, #104]	; (801454c <USBD_LL_Init+0x94>)
 80144e2:	2206      	movs	r2, #6
 80144e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80144e6:	4b19      	ldr	r3, [pc, #100]	; (801454c <USBD_LL_Init+0x94>)
 80144e8:	2202      	movs	r2, #2
 80144ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80144ec:	4b17      	ldr	r3, [pc, #92]	; (801454c <USBD_LL_Init+0x94>)
 80144ee:	2200      	movs	r2, #0
 80144f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80144f2:	4b16      	ldr	r3, [pc, #88]	; (801454c <USBD_LL_Init+0x94>)
 80144f4:	2202      	movs	r2, #2
 80144f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80144f8:	4b14      	ldr	r3, [pc, #80]	; (801454c <USBD_LL_Init+0x94>)
 80144fa:	2200      	movs	r2, #0
 80144fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80144fe:	4b13      	ldr	r3, [pc, #76]	; (801454c <USBD_LL_Init+0x94>)
 8014500:	2200      	movs	r2, #0
 8014502:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014504:	4b11      	ldr	r3, [pc, #68]	; (801454c <USBD_LL_Init+0x94>)
 8014506:	2200      	movs	r2, #0
 8014508:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801450a:	4b10      	ldr	r3, [pc, #64]	; (801454c <USBD_LL_Init+0x94>)
 801450c:	2200      	movs	r2, #0
 801450e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014510:	4b0e      	ldr	r3, [pc, #56]	; (801454c <USBD_LL_Init+0x94>)
 8014512:	2200      	movs	r2, #0
 8014514:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014516:	480d      	ldr	r0, [pc, #52]	; (801454c <USBD_LL_Init+0x94>)
 8014518:	f7f0 f81f 	bl	800455a <HAL_PCD_Init>
 801451c:	4603      	mov	r3, r0
 801451e:	2b00      	cmp	r3, #0
 8014520:	d001      	beq.n	8014526 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014522:	f7ec ffdf 	bl	80014e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014526:	2180      	movs	r1, #128	; 0x80
 8014528:	4808      	ldr	r0, [pc, #32]	; (801454c <USBD_LL_Init+0x94>)
 801452a:	f7f1 f9a0 	bl	800586e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801452e:	2240      	movs	r2, #64	; 0x40
 8014530:	2100      	movs	r1, #0
 8014532:	4806      	ldr	r0, [pc, #24]	; (801454c <USBD_LL_Init+0x94>)
 8014534:	f7f1 f954 	bl	80057e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014538:	2280      	movs	r2, #128	; 0x80
 801453a:	2101      	movs	r1, #1
 801453c:	4803      	ldr	r0, [pc, #12]	; (801454c <USBD_LL_Init+0x94>)
 801453e:	f7f1 f94f 	bl	80057e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	20012b00 	.word	0x20012b00

08014550 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014558:	2300      	movs	r3, #0
 801455a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801455c:	2300      	movs	r3, #0
 801455e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014566:	4618      	mov	r0, r3
 8014568:	f7f0 f91b 	bl	80047a2 <HAL_PCD_Start>
 801456c:	4603      	mov	r3, r0
 801456e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014570:	7bfb      	ldrb	r3, [r7, #15]
 8014572:	4618      	mov	r0, r3
 8014574:	f000 f97e 	bl	8014874 <USBD_Get_USB_Status>
 8014578:	4603      	mov	r3, r0
 801457a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801457c:	7bbb      	ldrb	r3, [r7, #14]
}
 801457e:	4618      	mov	r0, r3
 8014580:	3710      	adds	r7, #16
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}

08014586 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014586:	b580      	push	{r7, lr}
 8014588:	b084      	sub	sp, #16
 801458a:	af00      	add	r7, sp, #0
 801458c:	6078      	str	r0, [r7, #4]
 801458e:	4608      	mov	r0, r1
 8014590:	4611      	mov	r1, r2
 8014592:	461a      	mov	r2, r3
 8014594:	4603      	mov	r3, r0
 8014596:	70fb      	strb	r3, [r7, #3]
 8014598:	460b      	mov	r3, r1
 801459a:	70bb      	strb	r3, [r7, #2]
 801459c:	4613      	mov	r3, r2
 801459e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145a0:	2300      	movs	r3, #0
 80145a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145a4:	2300      	movs	r3, #0
 80145a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80145ae:	78bb      	ldrb	r3, [r7, #2]
 80145b0:	883a      	ldrh	r2, [r7, #0]
 80145b2:	78f9      	ldrb	r1, [r7, #3]
 80145b4:	f7f0 fd1b 	bl	8004fee <HAL_PCD_EP_Open>
 80145b8:	4603      	mov	r3, r0
 80145ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80145bc:	7bfb      	ldrb	r3, [r7, #15]
 80145be:	4618      	mov	r0, r3
 80145c0:	f000 f958 	bl	8014874 <USBD_Get_USB_Status>
 80145c4:	4603      	mov	r3, r0
 80145c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80145c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3710      	adds	r7, #16
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}

080145d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b084      	sub	sp, #16
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	460b      	mov	r3, r1
 80145dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145de:	2300      	movs	r3, #0
 80145e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145e2:	2300      	movs	r3, #0
 80145e4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80145ec:	78fa      	ldrb	r2, [r7, #3]
 80145ee:	4611      	mov	r1, r2
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7f0 fd64 	bl	80050be <HAL_PCD_EP_Close>
 80145f6:	4603      	mov	r3, r0
 80145f8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80145fa:	7bfb      	ldrb	r3, [r7, #15]
 80145fc:	4618      	mov	r0, r3
 80145fe:	f000 f939 	bl	8014874 <USBD_Get_USB_Status>
 8014602:	4603      	mov	r3, r0
 8014604:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8014606:	7bbb      	ldrb	r3, [r7, #14]
}
 8014608:	4618      	mov	r0, r3
 801460a:	3710      	adds	r7, #16
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}

08014610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	460b      	mov	r3, r1
 801461a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801461c:	2300      	movs	r3, #0
 801461e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014620:	2300      	movs	r3, #0
 8014622:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801462a:	78fa      	ldrb	r2, [r7, #3]
 801462c:	4611      	mov	r1, r2
 801462e:	4618      	mov	r0, r3
 8014630:	f7f0 fe3c 	bl	80052ac <HAL_PCD_EP_SetStall>
 8014634:	4603      	mov	r3, r0
 8014636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014638:	7bfb      	ldrb	r3, [r7, #15]
 801463a:	4618      	mov	r0, r3
 801463c:	f000 f91a 	bl	8014874 <USBD_Get_USB_Status>
 8014640:	4603      	mov	r3, r0
 8014642:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014644:	7bbb      	ldrb	r3, [r7, #14]
}
 8014646:	4618      	mov	r0, r3
 8014648:	3710      	adds	r7, #16
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}

0801464e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801464e:	b580      	push	{r7, lr}
 8014650:	b084      	sub	sp, #16
 8014652:	af00      	add	r7, sp, #0
 8014654:	6078      	str	r0, [r7, #4]
 8014656:	460b      	mov	r3, r1
 8014658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801465a:	2300      	movs	r3, #0
 801465c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801465e:	2300      	movs	r3, #0
 8014660:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014668:	78fa      	ldrb	r2, [r7, #3]
 801466a:	4611      	mov	r1, r2
 801466c:	4618      	mov	r0, r3
 801466e:	f7f0 fe81 	bl	8005374 <HAL_PCD_EP_ClrStall>
 8014672:	4603      	mov	r3, r0
 8014674:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8014676:	7bfb      	ldrb	r3, [r7, #15]
 8014678:	4618      	mov	r0, r3
 801467a:	f000 f8fb 	bl	8014874 <USBD_Get_USB_Status>
 801467e:	4603      	mov	r3, r0
 8014680:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014682:	7bbb      	ldrb	r3, [r7, #14]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801468c:	b480      	push	{r7}
 801468e:	b085      	sub	sp, #20
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	460b      	mov	r3, r1
 8014696:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801469e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80146a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	da0b      	bge.n	80146c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80146a8:	78fb      	ldrb	r3, [r7, #3]
 80146aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146ae:	68f9      	ldr	r1, [r7, #12]
 80146b0:	4613      	mov	r3, r2
 80146b2:	00db      	lsls	r3, r3, #3
 80146b4:	1a9b      	subs	r3, r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	440b      	add	r3, r1
 80146ba:	333e      	adds	r3, #62	; 0x3e
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	e00b      	b.n	80146d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80146c0:	78fb      	ldrb	r3, [r7, #3]
 80146c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146c6:	68f9      	ldr	r1, [r7, #12]
 80146c8:	4613      	mov	r3, r2
 80146ca:	00db      	lsls	r3, r3, #3
 80146cc:	1a9b      	subs	r3, r3, r2
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	440b      	add	r3, r1
 80146d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80146d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3714      	adds	r7, #20
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr

080146e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b084      	sub	sp, #16
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
 80146ec:	460b      	mov	r3, r1
 80146ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146f0:	2300      	movs	r3, #0
 80146f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146f4:	2300      	movs	r3, #0
 80146f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80146fe:	78fa      	ldrb	r2, [r7, #3]
 8014700:	4611      	mov	r1, r2
 8014702:	4618      	mov	r0, r3
 8014704:	f7f0 fc4e 	bl	8004fa4 <HAL_PCD_SetAddress>
 8014708:	4603      	mov	r3, r0
 801470a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801470c:	7bfb      	ldrb	r3, [r7, #15]
 801470e:	4618      	mov	r0, r3
 8014710:	f000 f8b0 	bl	8014874 <USBD_Get_USB_Status>
 8014714:	4603      	mov	r3, r0
 8014716:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014718:	7bbb      	ldrb	r3, [r7, #14]
}
 801471a:	4618      	mov	r0, r3
 801471c:	3710      	adds	r7, #16
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b086      	sub	sp, #24
 8014726:	af00      	add	r7, sp, #0
 8014728:	60f8      	str	r0, [r7, #12]
 801472a:	607a      	str	r2, [r7, #4]
 801472c:	603b      	str	r3, [r7, #0]
 801472e:	460b      	mov	r3, r1
 8014730:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014732:	2300      	movs	r3, #0
 8014734:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014736:	2300      	movs	r3, #0
 8014738:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014740:	7af9      	ldrb	r1, [r7, #11]
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	f7f0 fd67 	bl	8005218 <HAL_PCD_EP_Transmit>
 801474a:	4603      	mov	r3, r0
 801474c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801474e:	7dfb      	ldrb	r3, [r7, #23]
 8014750:	4618      	mov	r0, r3
 8014752:	f000 f88f 	bl	8014874 <USBD_Get_USB_Status>
 8014756:	4603      	mov	r3, r0
 8014758:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801475a:	7dbb      	ldrb	r3, [r7, #22]
}
 801475c:	4618      	mov	r0, r3
 801475e:	3718      	adds	r7, #24
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b086      	sub	sp, #24
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	607a      	str	r2, [r7, #4]
 801476e:	603b      	str	r3, [r7, #0]
 8014770:	460b      	mov	r3, r1
 8014772:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014774:	2300      	movs	r3, #0
 8014776:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014778:	2300      	movs	r3, #0
 801477a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014782:	7af9      	ldrb	r1, [r7, #11]
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	f7f0 fce3 	bl	8005152 <HAL_PCD_EP_Receive>
 801478c:	4603      	mov	r3, r0
 801478e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014790:	7dfb      	ldrb	r3, [r7, #23]
 8014792:	4618      	mov	r0, r3
 8014794:	f000 f86e 	bl	8014874 <USBD_Get_USB_Status>
 8014798:	4603      	mov	r3, r0
 801479a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801479c:	7dbb      	ldrb	r3, [r7, #22]
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3718      	adds	r7, #24
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b082      	sub	sp, #8
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
 80147ae:	460b      	mov	r3, r1
 80147b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80147b8:	78fa      	ldrb	r2, [r7, #3]
 80147ba:	4611      	mov	r1, r2
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f0 fd13 	bl	80051e8 <HAL_PCD_EP_GetRxCount>
 80147c2:	4603      	mov	r3, r0
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3708      	adds	r7, #8
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	460b      	mov	r3, r1
 80147d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80147d8:	78fb      	ldrb	r3, [r7, #3]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d002      	beq.n	80147e4 <HAL_PCDEx_LPM_Callback+0x18>
 80147de:	2b01      	cmp	r3, #1
 80147e0:	d01f      	beq.n	8014822 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80147e2:	e03b      	b.n	801485c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6a1b      	ldr	r3, [r3, #32]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d007      	beq.n	80147fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80147ec:	f000 f83c 	bl	8014868 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80147f0:	4b1c      	ldr	r3, [pc, #112]	; (8014864 <HAL_PCDEx_LPM_Callback+0x98>)
 80147f2:	691b      	ldr	r3, [r3, #16]
 80147f4:	4a1b      	ldr	r2, [pc, #108]	; (8014864 <HAL_PCDEx_LPM_Callback+0x98>)
 80147f6:	f023 0306 	bic.w	r3, r3, #6
 80147fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	6812      	ldr	r2, [r2, #0]
 801480a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801480e:	f023 0301 	bic.w	r3, r3, #1
 8014812:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801481a:	4618      	mov	r0, r3
 801481c:	f7f7 fcbc 	bl	800c198 <USBD_LL_Resume>
    break;
 8014820:	e01c      	b.n	801485c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	6812      	ldr	r2, [r2, #0]
 8014830:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014834:	f043 0301 	orr.w	r3, r3, #1
 8014838:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014840:	4618      	mov	r0, r3
 8014842:	f7f7 fc94 	bl	800c16e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6a1b      	ldr	r3, [r3, #32]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d005      	beq.n	801485a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801484e:	4b05      	ldr	r3, [pc, #20]	; (8014864 <HAL_PCDEx_LPM_Callback+0x98>)
 8014850:	691b      	ldr	r3, [r3, #16]
 8014852:	4a04      	ldr	r2, [pc, #16]	; (8014864 <HAL_PCDEx_LPM_Callback+0x98>)
 8014854:	f043 0306 	orr.w	r3, r3, #6
 8014858:	6113      	str	r3, [r2, #16]
    break;   
 801485a:	bf00      	nop
}
 801485c:	bf00      	nop
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}
 8014864:	e000ed00 	.word	0xe000ed00

08014868 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801486c:	f7ec fc42 	bl	80010f4 <SystemClock_Config>
}
 8014870:	bf00      	nop
 8014872:	bd80      	pop	{r7, pc}

08014874 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014874:	b480      	push	{r7}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
 801487a:	4603      	mov	r3, r0
 801487c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801487e:	2300      	movs	r3, #0
 8014880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014882:	79fb      	ldrb	r3, [r7, #7]
 8014884:	2b03      	cmp	r3, #3
 8014886:	d817      	bhi.n	80148b8 <USBD_Get_USB_Status+0x44>
 8014888:	a201      	add	r2, pc, #4	; (adr r2, 8014890 <USBD_Get_USB_Status+0x1c>)
 801488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801488e:	bf00      	nop
 8014890:	080148a1 	.word	0x080148a1
 8014894:	080148a7 	.word	0x080148a7
 8014898:	080148ad 	.word	0x080148ad
 801489c:	080148b3 	.word	0x080148b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80148a0:	2300      	movs	r3, #0
 80148a2:	73fb      	strb	r3, [r7, #15]
    break;
 80148a4:	e00b      	b.n	80148be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80148a6:	2303      	movs	r3, #3
 80148a8:	73fb      	strb	r3, [r7, #15]
    break;
 80148aa:	e008      	b.n	80148be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80148ac:	2301      	movs	r3, #1
 80148ae:	73fb      	strb	r3, [r7, #15]
    break;
 80148b0:	e005      	b.n	80148be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80148b2:	2303      	movs	r3, #3
 80148b4:	73fb      	strb	r3, [r7, #15]
    break;
 80148b6:	e002      	b.n	80148be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80148b8:	2303      	movs	r3, #3
 80148ba:	73fb      	strb	r3, [r7, #15]
    break;
 80148bc:	bf00      	nop
  }
  return usb_status;
 80148be:	7bfb      	ldrb	r3, [r7, #15]
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3714      	adds	r7, #20
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr

080148cc <__errno>:
 80148cc:	4b01      	ldr	r3, [pc, #4]	; (80148d4 <__errno+0x8>)
 80148ce:	6818      	ldr	r0, [r3, #0]
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	20000194 	.word	0x20000194

080148d8 <__libc_init_array>:
 80148d8:	b570      	push	{r4, r5, r6, lr}
 80148da:	4e0d      	ldr	r6, [pc, #52]	; (8014910 <__libc_init_array+0x38>)
 80148dc:	4c0d      	ldr	r4, [pc, #52]	; (8014914 <__libc_init_array+0x3c>)
 80148de:	1ba4      	subs	r4, r4, r6
 80148e0:	10a4      	asrs	r4, r4, #2
 80148e2:	2500      	movs	r5, #0
 80148e4:	42a5      	cmp	r5, r4
 80148e6:	d109      	bne.n	80148fc <__libc_init_array+0x24>
 80148e8:	4e0b      	ldr	r6, [pc, #44]	; (8014918 <__libc_init_array+0x40>)
 80148ea:	4c0c      	ldr	r4, [pc, #48]	; (801491c <__libc_init_array+0x44>)
 80148ec:	f001 fd56 	bl	801639c <_init>
 80148f0:	1ba4      	subs	r4, r4, r6
 80148f2:	10a4      	asrs	r4, r4, #2
 80148f4:	2500      	movs	r5, #0
 80148f6:	42a5      	cmp	r5, r4
 80148f8:	d105      	bne.n	8014906 <__libc_init_array+0x2e>
 80148fa:	bd70      	pop	{r4, r5, r6, pc}
 80148fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014900:	4798      	blx	r3
 8014902:	3501      	adds	r5, #1
 8014904:	e7ee      	b.n	80148e4 <__libc_init_array+0xc>
 8014906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801490a:	4798      	blx	r3
 801490c:	3501      	adds	r5, #1
 801490e:	e7f2      	b.n	80148f6 <__libc_init_array+0x1e>
 8014910:	08016a78 	.word	0x08016a78
 8014914:	08016a78 	.word	0x08016a78
 8014918:	08016a78 	.word	0x08016a78
 801491c:	08016a7c 	.word	0x08016a7c

08014920 <malloc>:
 8014920:	4b02      	ldr	r3, [pc, #8]	; (801492c <malloc+0xc>)
 8014922:	4601      	mov	r1, r0
 8014924:	6818      	ldr	r0, [r3, #0]
 8014926:	f000 b86d 	b.w	8014a04 <_malloc_r>
 801492a:	bf00      	nop
 801492c:	20000194 	.word	0x20000194

08014930 <free>:
 8014930:	4b02      	ldr	r3, [pc, #8]	; (801493c <free+0xc>)
 8014932:	4601      	mov	r1, r0
 8014934:	6818      	ldr	r0, [r3, #0]
 8014936:	f000 b817 	b.w	8014968 <_free_r>
 801493a:	bf00      	nop
 801493c:	20000194 	.word	0x20000194

08014940 <memcpy>:
 8014940:	b510      	push	{r4, lr}
 8014942:	1e43      	subs	r3, r0, #1
 8014944:	440a      	add	r2, r1
 8014946:	4291      	cmp	r1, r2
 8014948:	d100      	bne.n	801494c <memcpy+0xc>
 801494a:	bd10      	pop	{r4, pc}
 801494c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014954:	e7f7      	b.n	8014946 <memcpy+0x6>

08014956 <memset>:
 8014956:	4402      	add	r2, r0
 8014958:	4603      	mov	r3, r0
 801495a:	4293      	cmp	r3, r2
 801495c:	d100      	bne.n	8014960 <memset+0xa>
 801495e:	4770      	bx	lr
 8014960:	f803 1b01 	strb.w	r1, [r3], #1
 8014964:	e7f9      	b.n	801495a <memset+0x4>
	...

08014968 <_free_r>:
 8014968:	b538      	push	{r3, r4, r5, lr}
 801496a:	4605      	mov	r5, r0
 801496c:	2900      	cmp	r1, #0
 801496e:	d045      	beq.n	80149fc <_free_r+0x94>
 8014970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014974:	1f0c      	subs	r4, r1, #4
 8014976:	2b00      	cmp	r3, #0
 8014978:	bfb8      	it	lt
 801497a:	18e4      	addlt	r4, r4, r3
 801497c:	f000 f91a 	bl	8014bb4 <__malloc_lock>
 8014980:	4a1f      	ldr	r2, [pc, #124]	; (8014a00 <_free_r+0x98>)
 8014982:	6813      	ldr	r3, [r2, #0]
 8014984:	4610      	mov	r0, r2
 8014986:	b933      	cbnz	r3, 8014996 <_free_r+0x2e>
 8014988:	6063      	str	r3, [r4, #4]
 801498a:	6014      	str	r4, [r2, #0]
 801498c:	4628      	mov	r0, r5
 801498e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014992:	f000 b910 	b.w	8014bb6 <__malloc_unlock>
 8014996:	42a3      	cmp	r3, r4
 8014998:	d90c      	bls.n	80149b4 <_free_r+0x4c>
 801499a:	6821      	ldr	r1, [r4, #0]
 801499c:	1862      	adds	r2, r4, r1
 801499e:	4293      	cmp	r3, r2
 80149a0:	bf04      	itt	eq
 80149a2:	681a      	ldreq	r2, [r3, #0]
 80149a4:	685b      	ldreq	r3, [r3, #4]
 80149a6:	6063      	str	r3, [r4, #4]
 80149a8:	bf04      	itt	eq
 80149aa:	1852      	addeq	r2, r2, r1
 80149ac:	6022      	streq	r2, [r4, #0]
 80149ae:	6004      	str	r4, [r0, #0]
 80149b0:	e7ec      	b.n	801498c <_free_r+0x24>
 80149b2:	4613      	mov	r3, r2
 80149b4:	685a      	ldr	r2, [r3, #4]
 80149b6:	b10a      	cbz	r2, 80149bc <_free_r+0x54>
 80149b8:	42a2      	cmp	r2, r4
 80149ba:	d9fa      	bls.n	80149b2 <_free_r+0x4a>
 80149bc:	6819      	ldr	r1, [r3, #0]
 80149be:	1858      	adds	r0, r3, r1
 80149c0:	42a0      	cmp	r0, r4
 80149c2:	d10b      	bne.n	80149dc <_free_r+0x74>
 80149c4:	6820      	ldr	r0, [r4, #0]
 80149c6:	4401      	add	r1, r0
 80149c8:	1858      	adds	r0, r3, r1
 80149ca:	4282      	cmp	r2, r0
 80149cc:	6019      	str	r1, [r3, #0]
 80149ce:	d1dd      	bne.n	801498c <_free_r+0x24>
 80149d0:	6810      	ldr	r0, [r2, #0]
 80149d2:	6852      	ldr	r2, [r2, #4]
 80149d4:	605a      	str	r2, [r3, #4]
 80149d6:	4401      	add	r1, r0
 80149d8:	6019      	str	r1, [r3, #0]
 80149da:	e7d7      	b.n	801498c <_free_r+0x24>
 80149dc:	d902      	bls.n	80149e4 <_free_r+0x7c>
 80149de:	230c      	movs	r3, #12
 80149e0:	602b      	str	r3, [r5, #0]
 80149e2:	e7d3      	b.n	801498c <_free_r+0x24>
 80149e4:	6820      	ldr	r0, [r4, #0]
 80149e6:	1821      	adds	r1, r4, r0
 80149e8:	428a      	cmp	r2, r1
 80149ea:	bf04      	itt	eq
 80149ec:	6811      	ldreq	r1, [r2, #0]
 80149ee:	6852      	ldreq	r2, [r2, #4]
 80149f0:	6062      	str	r2, [r4, #4]
 80149f2:	bf04      	itt	eq
 80149f4:	1809      	addeq	r1, r1, r0
 80149f6:	6021      	streq	r1, [r4, #0]
 80149f8:	605c      	str	r4, [r3, #4]
 80149fa:	e7c7      	b.n	801498c <_free_r+0x24>
 80149fc:	bd38      	pop	{r3, r4, r5, pc}
 80149fe:	bf00      	nop
 8014a00:	20008800 	.word	0x20008800

08014a04 <_malloc_r>:
 8014a04:	b570      	push	{r4, r5, r6, lr}
 8014a06:	1ccd      	adds	r5, r1, #3
 8014a08:	f025 0503 	bic.w	r5, r5, #3
 8014a0c:	3508      	adds	r5, #8
 8014a0e:	2d0c      	cmp	r5, #12
 8014a10:	bf38      	it	cc
 8014a12:	250c      	movcc	r5, #12
 8014a14:	2d00      	cmp	r5, #0
 8014a16:	4606      	mov	r6, r0
 8014a18:	db01      	blt.n	8014a1e <_malloc_r+0x1a>
 8014a1a:	42a9      	cmp	r1, r5
 8014a1c:	d903      	bls.n	8014a26 <_malloc_r+0x22>
 8014a1e:	230c      	movs	r3, #12
 8014a20:	6033      	str	r3, [r6, #0]
 8014a22:	2000      	movs	r0, #0
 8014a24:	bd70      	pop	{r4, r5, r6, pc}
 8014a26:	f000 f8c5 	bl	8014bb4 <__malloc_lock>
 8014a2a:	4a21      	ldr	r2, [pc, #132]	; (8014ab0 <_malloc_r+0xac>)
 8014a2c:	6814      	ldr	r4, [r2, #0]
 8014a2e:	4621      	mov	r1, r4
 8014a30:	b991      	cbnz	r1, 8014a58 <_malloc_r+0x54>
 8014a32:	4c20      	ldr	r4, [pc, #128]	; (8014ab4 <_malloc_r+0xb0>)
 8014a34:	6823      	ldr	r3, [r4, #0]
 8014a36:	b91b      	cbnz	r3, 8014a40 <_malloc_r+0x3c>
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f000 f83d 	bl	8014ab8 <_sbrk_r>
 8014a3e:	6020      	str	r0, [r4, #0]
 8014a40:	4629      	mov	r1, r5
 8014a42:	4630      	mov	r0, r6
 8014a44:	f000 f838 	bl	8014ab8 <_sbrk_r>
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	d124      	bne.n	8014a96 <_malloc_r+0x92>
 8014a4c:	230c      	movs	r3, #12
 8014a4e:	6033      	str	r3, [r6, #0]
 8014a50:	4630      	mov	r0, r6
 8014a52:	f000 f8b0 	bl	8014bb6 <__malloc_unlock>
 8014a56:	e7e4      	b.n	8014a22 <_malloc_r+0x1e>
 8014a58:	680b      	ldr	r3, [r1, #0]
 8014a5a:	1b5b      	subs	r3, r3, r5
 8014a5c:	d418      	bmi.n	8014a90 <_malloc_r+0x8c>
 8014a5e:	2b0b      	cmp	r3, #11
 8014a60:	d90f      	bls.n	8014a82 <_malloc_r+0x7e>
 8014a62:	600b      	str	r3, [r1, #0]
 8014a64:	50cd      	str	r5, [r1, r3]
 8014a66:	18cc      	adds	r4, r1, r3
 8014a68:	4630      	mov	r0, r6
 8014a6a:	f000 f8a4 	bl	8014bb6 <__malloc_unlock>
 8014a6e:	f104 000b 	add.w	r0, r4, #11
 8014a72:	1d23      	adds	r3, r4, #4
 8014a74:	f020 0007 	bic.w	r0, r0, #7
 8014a78:	1ac3      	subs	r3, r0, r3
 8014a7a:	d0d3      	beq.n	8014a24 <_malloc_r+0x20>
 8014a7c:	425a      	negs	r2, r3
 8014a7e:	50e2      	str	r2, [r4, r3]
 8014a80:	e7d0      	b.n	8014a24 <_malloc_r+0x20>
 8014a82:	428c      	cmp	r4, r1
 8014a84:	684b      	ldr	r3, [r1, #4]
 8014a86:	bf16      	itet	ne
 8014a88:	6063      	strne	r3, [r4, #4]
 8014a8a:	6013      	streq	r3, [r2, #0]
 8014a8c:	460c      	movne	r4, r1
 8014a8e:	e7eb      	b.n	8014a68 <_malloc_r+0x64>
 8014a90:	460c      	mov	r4, r1
 8014a92:	6849      	ldr	r1, [r1, #4]
 8014a94:	e7cc      	b.n	8014a30 <_malloc_r+0x2c>
 8014a96:	1cc4      	adds	r4, r0, #3
 8014a98:	f024 0403 	bic.w	r4, r4, #3
 8014a9c:	42a0      	cmp	r0, r4
 8014a9e:	d005      	beq.n	8014aac <_malloc_r+0xa8>
 8014aa0:	1a21      	subs	r1, r4, r0
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f000 f808 	bl	8014ab8 <_sbrk_r>
 8014aa8:	3001      	adds	r0, #1
 8014aaa:	d0cf      	beq.n	8014a4c <_malloc_r+0x48>
 8014aac:	6025      	str	r5, [r4, #0]
 8014aae:	e7db      	b.n	8014a68 <_malloc_r+0x64>
 8014ab0:	20008800 	.word	0x20008800
 8014ab4:	20008804 	.word	0x20008804

08014ab8 <_sbrk_r>:
 8014ab8:	b538      	push	{r3, r4, r5, lr}
 8014aba:	4c06      	ldr	r4, [pc, #24]	; (8014ad4 <_sbrk_r+0x1c>)
 8014abc:	2300      	movs	r3, #0
 8014abe:	4605      	mov	r5, r0
 8014ac0:	4608      	mov	r0, r1
 8014ac2:	6023      	str	r3, [r4, #0]
 8014ac4:	f7ec ffe6 	bl	8001a94 <_sbrk>
 8014ac8:	1c43      	adds	r3, r0, #1
 8014aca:	d102      	bne.n	8014ad2 <_sbrk_r+0x1a>
 8014acc:	6823      	ldr	r3, [r4, #0]
 8014ace:	b103      	cbz	r3, 8014ad2 <_sbrk_r+0x1a>
 8014ad0:	602b      	str	r3, [r5, #0]
 8014ad2:	bd38      	pop	{r3, r4, r5, pc}
 8014ad4:	20012f04 	.word	0x20012f04

08014ad8 <sniprintf>:
 8014ad8:	b40c      	push	{r2, r3}
 8014ada:	b530      	push	{r4, r5, lr}
 8014adc:	4b17      	ldr	r3, [pc, #92]	; (8014b3c <sniprintf+0x64>)
 8014ade:	1e0c      	subs	r4, r1, #0
 8014ae0:	b09d      	sub	sp, #116	; 0x74
 8014ae2:	681d      	ldr	r5, [r3, #0]
 8014ae4:	da08      	bge.n	8014af8 <sniprintf+0x20>
 8014ae6:	238b      	movs	r3, #139	; 0x8b
 8014ae8:	602b      	str	r3, [r5, #0]
 8014aea:	f04f 30ff 	mov.w	r0, #4294967295
 8014aee:	b01d      	add	sp, #116	; 0x74
 8014af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014af4:	b002      	add	sp, #8
 8014af6:	4770      	bx	lr
 8014af8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b00:	bf14      	ite	ne
 8014b02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b06:	4623      	moveq	r3, r4
 8014b08:	9304      	str	r3, [sp, #16]
 8014b0a:	9307      	str	r3, [sp, #28]
 8014b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b10:	9002      	str	r0, [sp, #8]
 8014b12:	9006      	str	r0, [sp, #24]
 8014b14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014b1a:	ab21      	add	r3, sp, #132	; 0x84
 8014b1c:	a902      	add	r1, sp, #8
 8014b1e:	4628      	mov	r0, r5
 8014b20:	9301      	str	r3, [sp, #4]
 8014b22:	f000 f8a3 	bl	8014c6c <_svfiprintf_r>
 8014b26:	1c43      	adds	r3, r0, #1
 8014b28:	bfbc      	itt	lt
 8014b2a:	238b      	movlt	r3, #139	; 0x8b
 8014b2c:	602b      	strlt	r3, [r5, #0]
 8014b2e:	2c00      	cmp	r4, #0
 8014b30:	d0dd      	beq.n	8014aee <sniprintf+0x16>
 8014b32:	9b02      	ldr	r3, [sp, #8]
 8014b34:	2200      	movs	r2, #0
 8014b36:	701a      	strb	r2, [r3, #0]
 8014b38:	e7d9      	b.n	8014aee <sniprintf+0x16>
 8014b3a:	bf00      	nop
 8014b3c:	20000194 	.word	0x20000194

08014b40 <_vsniprintf_r>:
 8014b40:	b530      	push	{r4, r5, lr}
 8014b42:	1e14      	subs	r4, r2, #0
 8014b44:	4605      	mov	r5, r0
 8014b46:	b09b      	sub	sp, #108	; 0x6c
 8014b48:	4618      	mov	r0, r3
 8014b4a:	da05      	bge.n	8014b58 <_vsniprintf_r+0x18>
 8014b4c:	238b      	movs	r3, #139	; 0x8b
 8014b4e:	602b      	str	r3, [r5, #0]
 8014b50:	f04f 30ff 	mov.w	r0, #4294967295
 8014b54:	b01b      	add	sp, #108	; 0x6c
 8014b56:	bd30      	pop	{r4, r5, pc}
 8014b58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014b5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014b60:	bf14      	ite	ne
 8014b62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b66:	4623      	moveq	r3, r4
 8014b68:	9302      	str	r3, [sp, #8]
 8014b6a:	9305      	str	r3, [sp, #20]
 8014b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b70:	9100      	str	r1, [sp, #0]
 8014b72:	9104      	str	r1, [sp, #16]
 8014b74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014b78:	4602      	mov	r2, r0
 8014b7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014b7c:	4669      	mov	r1, sp
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f000 f874 	bl	8014c6c <_svfiprintf_r>
 8014b84:	1c43      	adds	r3, r0, #1
 8014b86:	bfbc      	itt	lt
 8014b88:	238b      	movlt	r3, #139	; 0x8b
 8014b8a:	602b      	strlt	r3, [r5, #0]
 8014b8c:	2c00      	cmp	r4, #0
 8014b8e:	d0e1      	beq.n	8014b54 <_vsniprintf_r+0x14>
 8014b90:	9b00      	ldr	r3, [sp, #0]
 8014b92:	2200      	movs	r2, #0
 8014b94:	701a      	strb	r2, [r3, #0]
 8014b96:	e7dd      	b.n	8014b54 <_vsniprintf_r+0x14>

08014b98 <vsniprintf>:
 8014b98:	b507      	push	{r0, r1, r2, lr}
 8014b9a:	9300      	str	r3, [sp, #0]
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	460a      	mov	r2, r1
 8014ba0:	4601      	mov	r1, r0
 8014ba2:	4803      	ldr	r0, [pc, #12]	; (8014bb0 <vsniprintf+0x18>)
 8014ba4:	6800      	ldr	r0, [r0, #0]
 8014ba6:	f7ff ffcb 	bl	8014b40 <_vsniprintf_r>
 8014baa:	b003      	add	sp, #12
 8014bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bb0:	20000194 	.word	0x20000194

08014bb4 <__malloc_lock>:
 8014bb4:	4770      	bx	lr

08014bb6 <__malloc_unlock>:
 8014bb6:	4770      	bx	lr

08014bb8 <__ssputs_r>:
 8014bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bbc:	688e      	ldr	r6, [r1, #8]
 8014bbe:	429e      	cmp	r6, r3
 8014bc0:	4682      	mov	sl, r0
 8014bc2:	460c      	mov	r4, r1
 8014bc4:	4690      	mov	r8, r2
 8014bc6:	4699      	mov	r9, r3
 8014bc8:	d837      	bhi.n	8014c3a <__ssputs_r+0x82>
 8014bca:	898a      	ldrh	r2, [r1, #12]
 8014bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014bd0:	d031      	beq.n	8014c36 <__ssputs_r+0x7e>
 8014bd2:	6825      	ldr	r5, [r4, #0]
 8014bd4:	6909      	ldr	r1, [r1, #16]
 8014bd6:	1a6f      	subs	r7, r5, r1
 8014bd8:	6965      	ldr	r5, [r4, #20]
 8014bda:	2302      	movs	r3, #2
 8014bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014be0:	fb95 f5f3 	sdiv	r5, r5, r3
 8014be4:	f109 0301 	add.w	r3, r9, #1
 8014be8:	443b      	add	r3, r7
 8014bea:	429d      	cmp	r5, r3
 8014bec:	bf38      	it	cc
 8014bee:	461d      	movcc	r5, r3
 8014bf0:	0553      	lsls	r3, r2, #21
 8014bf2:	d530      	bpl.n	8014c56 <__ssputs_r+0x9e>
 8014bf4:	4629      	mov	r1, r5
 8014bf6:	f7ff ff05 	bl	8014a04 <_malloc_r>
 8014bfa:	4606      	mov	r6, r0
 8014bfc:	b950      	cbnz	r0, 8014c14 <__ssputs_r+0x5c>
 8014bfe:	230c      	movs	r3, #12
 8014c00:	f8ca 3000 	str.w	r3, [sl]
 8014c04:	89a3      	ldrh	r3, [r4, #12]
 8014c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c0a:	81a3      	strh	r3, [r4, #12]
 8014c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c14:	463a      	mov	r2, r7
 8014c16:	6921      	ldr	r1, [r4, #16]
 8014c18:	f7ff fe92 	bl	8014940 <memcpy>
 8014c1c:	89a3      	ldrh	r3, [r4, #12]
 8014c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c26:	81a3      	strh	r3, [r4, #12]
 8014c28:	6126      	str	r6, [r4, #16]
 8014c2a:	6165      	str	r5, [r4, #20]
 8014c2c:	443e      	add	r6, r7
 8014c2e:	1bed      	subs	r5, r5, r7
 8014c30:	6026      	str	r6, [r4, #0]
 8014c32:	60a5      	str	r5, [r4, #8]
 8014c34:	464e      	mov	r6, r9
 8014c36:	454e      	cmp	r6, r9
 8014c38:	d900      	bls.n	8014c3c <__ssputs_r+0x84>
 8014c3a:	464e      	mov	r6, r9
 8014c3c:	4632      	mov	r2, r6
 8014c3e:	4641      	mov	r1, r8
 8014c40:	6820      	ldr	r0, [r4, #0]
 8014c42:	f000 fa93 	bl	801516c <memmove>
 8014c46:	68a3      	ldr	r3, [r4, #8]
 8014c48:	1b9b      	subs	r3, r3, r6
 8014c4a:	60a3      	str	r3, [r4, #8]
 8014c4c:	6823      	ldr	r3, [r4, #0]
 8014c4e:	441e      	add	r6, r3
 8014c50:	6026      	str	r6, [r4, #0]
 8014c52:	2000      	movs	r0, #0
 8014c54:	e7dc      	b.n	8014c10 <__ssputs_r+0x58>
 8014c56:	462a      	mov	r2, r5
 8014c58:	f000 faa1 	bl	801519e <_realloc_r>
 8014c5c:	4606      	mov	r6, r0
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	d1e2      	bne.n	8014c28 <__ssputs_r+0x70>
 8014c62:	6921      	ldr	r1, [r4, #16]
 8014c64:	4650      	mov	r0, sl
 8014c66:	f7ff fe7f 	bl	8014968 <_free_r>
 8014c6a:	e7c8      	b.n	8014bfe <__ssputs_r+0x46>

08014c6c <_svfiprintf_r>:
 8014c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c70:	461d      	mov	r5, r3
 8014c72:	898b      	ldrh	r3, [r1, #12]
 8014c74:	061f      	lsls	r7, r3, #24
 8014c76:	b09d      	sub	sp, #116	; 0x74
 8014c78:	4680      	mov	r8, r0
 8014c7a:	460c      	mov	r4, r1
 8014c7c:	4616      	mov	r6, r2
 8014c7e:	d50f      	bpl.n	8014ca0 <_svfiprintf_r+0x34>
 8014c80:	690b      	ldr	r3, [r1, #16]
 8014c82:	b96b      	cbnz	r3, 8014ca0 <_svfiprintf_r+0x34>
 8014c84:	2140      	movs	r1, #64	; 0x40
 8014c86:	f7ff febd 	bl	8014a04 <_malloc_r>
 8014c8a:	6020      	str	r0, [r4, #0]
 8014c8c:	6120      	str	r0, [r4, #16]
 8014c8e:	b928      	cbnz	r0, 8014c9c <_svfiprintf_r+0x30>
 8014c90:	230c      	movs	r3, #12
 8014c92:	f8c8 3000 	str.w	r3, [r8]
 8014c96:	f04f 30ff 	mov.w	r0, #4294967295
 8014c9a:	e0c8      	b.n	8014e2e <_svfiprintf_r+0x1c2>
 8014c9c:	2340      	movs	r3, #64	; 0x40
 8014c9e:	6163      	str	r3, [r4, #20]
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8014ca4:	2320      	movs	r3, #32
 8014ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014caa:	2330      	movs	r3, #48	; 0x30
 8014cac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cb0:	9503      	str	r5, [sp, #12]
 8014cb2:	f04f 0b01 	mov.w	fp, #1
 8014cb6:	4637      	mov	r7, r6
 8014cb8:	463d      	mov	r5, r7
 8014cba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014cbe:	b10b      	cbz	r3, 8014cc4 <_svfiprintf_r+0x58>
 8014cc0:	2b25      	cmp	r3, #37	; 0x25
 8014cc2:	d13e      	bne.n	8014d42 <_svfiprintf_r+0xd6>
 8014cc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8014cc8:	d00b      	beq.n	8014ce2 <_svfiprintf_r+0x76>
 8014cca:	4653      	mov	r3, sl
 8014ccc:	4632      	mov	r2, r6
 8014cce:	4621      	mov	r1, r4
 8014cd0:	4640      	mov	r0, r8
 8014cd2:	f7ff ff71 	bl	8014bb8 <__ssputs_r>
 8014cd6:	3001      	adds	r0, #1
 8014cd8:	f000 80a4 	beq.w	8014e24 <_svfiprintf_r+0x1b8>
 8014cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cde:	4453      	add	r3, sl
 8014ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8014ce2:	783b      	ldrb	r3, [r7, #0]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f000 809d 	beq.w	8014e24 <_svfiprintf_r+0x1b8>
 8014cea:	2300      	movs	r3, #0
 8014cec:	f04f 32ff 	mov.w	r2, #4294967295
 8014cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014cf4:	9304      	str	r3, [sp, #16]
 8014cf6:	9307      	str	r3, [sp, #28]
 8014cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8014cfe:	462f      	mov	r7, r5
 8014d00:	2205      	movs	r2, #5
 8014d02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014d06:	4850      	ldr	r0, [pc, #320]	; (8014e48 <_svfiprintf_r+0x1dc>)
 8014d08:	f7eb fa8a 	bl	8000220 <memchr>
 8014d0c:	9b04      	ldr	r3, [sp, #16]
 8014d0e:	b9d0      	cbnz	r0, 8014d46 <_svfiprintf_r+0xda>
 8014d10:	06d9      	lsls	r1, r3, #27
 8014d12:	bf44      	itt	mi
 8014d14:	2220      	movmi	r2, #32
 8014d16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d1a:	071a      	lsls	r2, r3, #28
 8014d1c:	bf44      	itt	mi
 8014d1e:	222b      	movmi	r2, #43	; 0x2b
 8014d20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d24:	782a      	ldrb	r2, [r5, #0]
 8014d26:	2a2a      	cmp	r2, #42	; 0x2a
 8014d28:	d015      	beq.n	8014d56 <_svfiprintf_r+0xea>
 8014d2a:	9a07      	ldr	r2, [sp, #28]
 8014d2c:	462f      	mov	r7, r5
 8014d2e:	2000      	movs	r0, #0
 8014d30:	250a      	movs	r5, #10
 8014d32:	4639      	mov	r1, r7
 8014d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d38:	3b30      	subs	r3, #48	; 0x30
 8014d3a:	2b09      	cmp	r3, #9
 8014d3c:	d94d      	bls.n	8014dda <_svfiprintf_r+0x16e>
 8014d3e:	b1b8      	cbz	r0, 8014d70 <_svfiprintf_r+0x104>
 8014d40:	e00f      	b.n	8014d62 <_svfiprintf_r+0xf6>
 8014d42:	462f      	mov	r7, r5
 8014d44:	e7b8      	b.n	8014cb8 <_svfiprintf_r+0x4c>
 8014d46:	4a40      	ldr	r2, [pc, #256]	; (8014e48 <_svfiprintf_r+0x1dc>)
 8014d48:	1a80      	subs	r0, r0, r2
 8014d4a:	fa0b f000 	lsl.w	r0, fp, r0
 8014d4e:	4318      	orrs	r0, r3
 8014d50:	9004      	str	r0, [sp, #16]
 8014d52:	463d      	mov	r5, r7
 8014d54:	e7d3      	b.n	8014cfe <_svfiprintf_r+0x92>
 8014d56:	9a03      	ldr	r2, [sp, #12]
 8014d58:	1d11      	adds	r1, r2, #4
 8014d5a:	6812      	ldr	r2, [r2, #0]
 8014d5c:	9103      	str	r1, [sp, #12]
 8014d5e:	2a00      	cmp	r2, #0
 8014d60:	db01      	blt.n	8014d66 <_svfiprintf_r+0xfa>
 8014d62:	9207      	str	r2, [sp, #28]
 8014d64:	e004      	b.n	8014d70 <_svfiprintf_r+0x104>
 8014d66:	4252      	negs	r2, r2
 8014d68:	f043 0302 	orr.w	r3, r3, #2
 8014d6c:	9207      	str	r2, [sp, #28]
 8014d6e:	9304      	str	r3, [sp, #16]
 8014d70:	783b      	ldrb	r3, [r7, #0]
 8014d72:	2b2e      	cmp	r3, #46	; 0x2e
 8014d74:	d10c      	bne.n	8014d90 <_svfiprintf_r+0x124>
 8014d76:	787b      	ldrb	r3, [r7, #1]
 8014d78:	2b2a      	cmp	r3, #42	; 0x2a
 8014d7a:	d133      	bne.n	8014de4 <_svfiprintf_r+0x178>
 8014d7c:	9b03      	ldr	r3, [sp, #12]
 8014d7e:	1d1a      	adds	r2, r3, #4
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	9203      	str	r2, [sp, #12]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	bfb8      	it	lt
 8014d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d8c:	3702      	adds	r7, #2
 8014d8e:	9305      	str	r3, [sp, #20]
 8014d90:	4d2e      	ldr	r5, [pc, #184]	; (8014e4c <_svfiprintf_r+0x1e0>)
 8014d92:	7839      	ldrb	r1, [r7, #0]
 8014d94:	2203      	movs	r2, #3
 8014d96:	4628      	mov	r0, r5
 8014d98:	f7eb fa42 	bl	8000220 <memchr>
 8014d9c:	b138      	cbz	r0, 8014dae <_svfiprintf_r+0x142>
 8014d9e:	2340      	movs	r3, #64	; 0x40
 8014da0:	1b40      	subs	r0, r0, r5
 8014da2:	fa03 f000 	lsl.w	r0, r3, r0
 8014da6:	9b04      	ldr	r3, [sp, #16]
 8014da8:	4303      	orrs	r3, r0
 8014daa:	3701      	adds	r7, #1
 8014dac:	9304      	str	r3, [sp, #16]
 8014dae:	7839      	ldrb	r1, [r7, #0]
 8014db0:	4827      	ldr	r0, [pc, #156]	; (8014e50 <_svfiprintf_r+0x1e4>)
 8014db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014db6:	2206      	movs	r2, #6
 8014db8:	1c7e      	adds	r6, r7, #1
 8014dba:	f7eb fa31 	bl	8000220 <memchr>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d038      	beq.n	8014e34 <_svfiprintf_r+0x1c8>
 8014dc2:	4b24      	ldr	r3, [pc, #144]	; (8014e54 <_svfiprintf_r+0x1e8>)
 8014dc4:	bb13      	cbnz	r3, 8014e0c <_svfiprintf_r+0x1a0>
 8014dc6:	9b03      	ldr	r3, [sp, #12]
 8014dc8:	3307      	adds	r3, #7
 8014dca:	f023 0307 	bic.w	r3, r3, #7
 8014dce:	3308      	adds	r3, #8
 8014dd0:	9303      	str	r3, [sp, #12]
 8014dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dd4:	444b      	add	r3, r9
 8014dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8014dd8:	e76d      	b.n	8014cb6 <_svfiprintf_r+0x4a>
 8014dda:	fb05 3202 	mla	r2, r5, r2, r3
 8014dde:	2001      	movs	r0, #1
 8014de0:	460f      	mov	r7, r1
 8014de2:	e7a6      	b.n	8014d32 <_svfiprintf_r+0xc6>
 8014de4:	2300      	movs	r3, #0
 8014de6:	3701      	adds	r7, #1
 8014de8:	9305      	str	r3, [sp, #20]
 8014dea:	4619      	mov	r1, r3
 8014dec:	250a      	movs	r5, #10
 8014dee:	4638      	mov	r0, r7
 8014df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014df4:	3a30      	subs	r2, #48	; 0x30
 8014df6:	2a09      	cmp	r2, #9
 8014df8:	d903      	bls.n	8014e02 <_svfiprintf_r+0x196>
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d0c8      	beq.n	8014d90 <_svfiprintf_r+0x124>
 8014dfe:	9105      	str	r1, [sp, #20]
 8014e00:	e7c6      	b.n	8014d90 <_svfiprintf_r+0x124>
 8014e02:	fb05 2101 	mla	r1, r5, r1, r2
 8014e06:	2301      	movs	r3, #1
 8014e08:	4607      	mov	r7, r0
 8014e0a:	e7f0      	b.n	8014dee <_svfiprintf_r+0x182>
 8014e0c:	ab03      	add	r3, sp, #12
 8014e0e:	9300      	str	r3, [sp, #0]
 8014e10:	4622      	mov	r2, r4
 8014e12:	4b11      	ldr	r3, [pc, #68]	; (8014e58 <_svfiprintf_r+0x1ec>)
 8014e14:	a904      	add	r1, sp, #16
 8014e16:	4640      	mov	r0, r8
 8014e18:	f3af 8000 	nop.w
 8014e1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014e20:	4681      	mov	r9, r0
 8014e22:	d1d6      	bne.n	8014dd2 <_svfiprintf_r+0x166>
 8014e24:	89a3      	ldrh	r3, [r4, #12]
 8014e26:	065b      	lsls	r3, r3, #25
 8014e28:	f53f af35 	bmi.w	8014c96 <_svfiprintf_r+0x2a>
 8014e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e2e:	b01d      	add	sp, #116	; 0x74
 8014e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e34:	ab03      	add	r3, sp, #12
 8014e36:	9300      	str	r3, [sp, #0]
 8014e38:	4622      	mov	r2, r4
 8014e3a:	4b07      	ldr	r3, [pc, #28]	; (8014e58 <_svfiprintf_r+0x1ec>)
 8014e3c:	a904      	add	r1, sp, #16
 8014e3e:	4640      	mov	r0, r8
 8014e40:	f000 f882 	bl	8014f48 <_printf_i>
 8014e44:	e7ea      	b.n	8014e1c <_svfiprintf_r+0x1b0>
 8014e46:	bf00      	nop
 8014e48:	080169f8 	.word	0x080169f8
 8014e4c:	080169fe 	.word	0x080169fe
 8014e50:	08016a02 	.word	0x08016a02
 8014e54:	00000000 	.word	0x00000000
 8014e58:	08014bb9 	.word	0x08014bb9

08014e5c <_printf_common>:
 8014e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e60:	4691      	mov	r9, r2
 8014e62:	461f      	mov	r7, r3
 8014e64:	688a      	ldr	r2, [r1, #8]
 8014e66:	690b      	ldr	r3, [r1, #16]
 8014e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	bfb8      	it	lt
 8014e70:	4613      	movlt	r3, r2
 8014e72:	f8c9 3000 	str.w	r3, [r9]
 8014e76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e7a:	4606      	mov	r6, r0
 8014e7c:	460c      	mov	r4, r1
 8014e7e:	b112      	cbz	r2, 8014e86 <_printf_common+0x2a>
 8014e80:	3301      	adds	r3, #1
 8014e82:	f8c9 3000 	str.w	r3, [r9]
 8014e86:	6823      	ldr	r3, [r4, #0]
 8014e88:	0699      	lsls	r1, r3, #26
 8014e8a:	bf42      	ittt	mi
 8014e8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014e90:	3302      	addmi	r3, #2
 8014e92:	f8c9 3000 	strmi.w	r3, [r9]
 8014e96:	6825      	ldr	r5, [r4, #0]
 8014e98:	f015 0506 	ands.w	r5, r5, #6
 8014e9c:	d107      	bne.n	8014eae <_printf_common+0x52>
 8014e9e:	f104 0a19 	add.w	sl, r4, #25
 8014ea2:	68e3      	ldr	r3, [r4, #12]
 8014ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8014ea8:	1a9b      	subs	r3, r3, r2
 8014eaa:	42ab      	cmp	r3, r5
 8014eac:	dc28      	bgt.n	8014f00 <_printf_common+0xa4>
 8014eae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014eb2:	6822      	ldr	r2, [r4, #0]
 8014eb4:	3300      	adds	r3, #0
 8014eb6:	bf18      	it	ne
 8014eb8:	2301      	movne	r3, #1
 8014eba:	0692      	lsls	r2, r2, #26
 8014ebc:	d42d      	bmi.n	8014f1a <_printf_common+0xbe>
 8014ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ec2:	4639      	mov	r1, r7
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	47c0      	blx	r8
 8014ec8:	3001      	adds	r0, #1
 8014eca:	d020      	beq.n	8014f0e <_printf_common+0xb2>
 8014ecc:	6823      	ldr	r3, [r4, #0]
 8014ece:	68e5      	ldr	r5, [r4, #12]
 8014ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8014ed4:	f003 0306 	and.w	r3, r3, #6
 8014ed8:	2b04      	cmp	r3, #4
 8014eda:	bf08      	it	eq
 8014edc:	1aad      	subeq	r5, r5, r2
 8014ede:	68a3      	ldr	r3, [r4, #8]
 8014ee0:	6922      	ldr	r2, [r4, #16]
 8014ee2:	bf0c      	ite	eq
 8014ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ee8:	2500      	movne	r5, #0
 8014eea:	4293      	cmp	r3, r2
 8014eec:	bfc4      	itt	gt
 8014eee:	1a9b      	subgt	r3, r3, r2
 8014ef0:	18ed      	addgt	r5, r5, r3
 8014ef2:	f04f 0900 	mov.w	r9, #0
 8014ef6:	341a      	adds	r4, #26
 8014ef8:	454d      	cmp	r5, r9
 8014efa:	d11a      	bne.n	8014f32 <_printf_common+0xd6>
 8014efc:	2000      	movs	r0, #0
 8014efe:	e008      	b.n	8014f12 <_printf_common+0xb6>
 8014f00:	2301      	movs	r3, #1
 8014f02:	4652      	mov	r2, sl
 8014f04:	4639      	mov	r1, r7
 8014f06:	4630      	mov	r0, r6
 8014f08:	47c0      	blx	r8
 8014f0a:	3001      	adds	r0, #1
 8014f0c:	d103      	bne.n	8014f16 <_printf_common+0xba>
 8014f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8014f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f16:	3501      	adds	r5, #1
 8014f18:	e7c3      	b.n	8014ea2 <_printf_common+0x46>
 8014f1a:	18e1      	adds	r1, r4, r3
 8014f1c:	1c5a      	adds	r2, r3, #1
 8014f1e:	2030      	movs	r0, #48	; 0x30
 8014f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f24:	4422      	add	r2, r4
 8014f26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f2e:	3302      	adds	r3, #2
 8014f30:	e7c5      	b.n	8014ebe <_printf_common+0x62>
 8014f32:	2301      	movs	r3, #1
 8014f34:	4622      	mov	r2, r4
 8014f36:	4639      	mov	r1, r7
 8014f38:	4630      	mov	r0, r6
 8014f3a:	47c0      	blx	r8
 8014f3c:	3001      	adds	r0, #1
 8014f3e:	d0e6      	beq.n	8014f0e <_printf_common+0xb2>
 8014f40:	f109 0901 	add.w	r9, r9, #1
 8014f44:	e7d8      	b.n	8014ef8 <_printf_common+0x9c>
	...

08014f48 <_printf_i>:
 8014f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014f50:	460c      	mov	r4, r1
 8014f52:	7e09      	ldrb	r1, [r1, #24]
 8014f54:	b085      	sub	sp, #20
 8014f56:	296e      	cmp	r1, #110	; 0x6e
 8014f58:	4617      	mov	r7, r2
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	4698      	mov	r8, r3
 8014f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f60:	f000 80b3 	beq.w	80150ca <_printf_i+0x182>
 8014f64:	d822      	bhi.n	8014fac <_printf_i+0x64>
 8014f66:	2963      	cmp	r1, #99	; 0x63
 8014f68:	d036      	beq.n	8014fd8 <_printf_i+0x90>
 8014f6a:	d80a      	bhi.n	8014f82 <_printf_i+0x3a>
 8014f6c:	2900      	cmp	r1, #0
 8014f6e:	f000 80b9 	beq.w	80150e4 <_printf_i+0x19c>
 8014f72:	2958      	cmp	r1, #88	; 0x58
 8014f74:	f000 8083 	beq.w	801507e <_printf_i+0x136>
 8014f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014f80:	e032      	b.n	8014fe8 <_printf_i+0xa0>
 8014f82:	2964      	cmp	r1, #100	; 0x64
 8014f84:	d001      	beq.n	8014f8a <_printf_i+0x42>
 8014f86:	2969      	cmp	r1, #105	; 0x69
 8014f88:	d1f6      	bne.n	8014f78 <_printf_i+0x30>
 8014f8a:	6820      	ldr	r0, [r4, #0]
 8014f8c:	6813      	ldr	r3, [r2, #0]
 8014f8e:	0605      	lsls	r5, r0, #24
 8014f90:	f103 0104 	add.w	r1, r3, #4
 8014f94:	d52a      	bpl.n	8014fec <_printf_i+0xa4>
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	6011      	str	r1, [r2, #0]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	da03      	bge.n	8014fa6 <_printf_i+0x5e>
 8014f9e:	222d      	movs	r2, #45	; 0x2d
 8014fa0:	425b      	negs	r3, r3
 8014fa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014fa6:	486f      	ldr	r0, [pc, #444]	; (8015164 <_printf_i+0x21c>)
 8014fa8:	220a      	movs	r2, #10
 8014faa:	e039      	b.n	8015020 <_printf_i+0xd8>
 8014fac:	2973      	cmp	r1, #115	; 0x73
 8014fae:	f000 809d 	beq.w	80150ec <_printf_i+0x1a4>
 8014fb2:	d808      	bhi.n	8014fc6 <_printf_i+0x7e>
 8014fb4:	296f      	cmp	r1, #111	; 0x6f
 8014fb6:	d020      	beq.n	8014ffa <_printf_i+0xb2>
 8014fb8:	2970      	cmp	r1, #112	; 0x70
 8014fba:	d1dd      	bne.n	8014f78 <_printf_i+0x30>
 8014fbc:	6823      	ldr	r3, [r4, #0]
 8014fbe:	f043 0320 	orr.w	r3, r3, #32
 8014fc2:	6023      	str	r3, [r4, #0]
 8014fc4:	e003      	b.n	8014fce <_printf_i+0x86>
 8014fc6:	2975      	cmp	r1, #117	; 0x75
 8014fc8:	d017      	beq.n	8014ffa <_printf_i+0xb2>
 8014fca:	2978      	cmp	r1, #120	; 0x78
 8014fcc:	d1d4      	bne.n	8014f78 <_printf_i+0x30>
 8014fce:	2378      	movs	r3, #120	; 0x78
 8014fd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014fd4:	4864      	ldr	r0, [pc, #400]	; (8015168 <_printf_i+0x220>)
 8014fd6:	e055      	b.n	8015084 <_printf_i+0x13c>
 8014fd8:	6813      	ldr	r3, [r2, #0]
 8014fda:	1d19      	adds	r1, r3, #4
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	6011      	str	r1, [r2, #0]
 8014fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014fe8:	2301      	movs	r3, #1
 8014fea:	e08c      	b.n	8015106 <_printf_i+0x1be>
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	6011      	str	r1, [r2, #0]
 8014ff0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014ff4:	bf18      	it	ne
 8014ff6:	b21b      	sxthne	r3, r3
 8014ff8:	e7cf      	b.n	8014f9a <_printf_i+0x52>
 8014ffa:	6813      	ldr	r3, [r2, #0]
 8014ffc:	6825      	ldr	r5, [r4, #0]
 8014ffe:	1d18      	adds	r0, r3, #4
 8015000:	6010      	str	r0, [r2, #0]
 8015002:	0628      	lsls	r0, r5, #24
 8015004:	d501      	bpl.n	801500a <_printf_i+0xc2>
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	e002      	b.n	8015010 <_printf_i+0xc8>
 801500a:	0668      	lsls	r0, r5, #25
 801500c:	d5fb      	bpl.n	8015006 <_printf_i+0xbe>
 801500e:	881b      	ldrh	r3, [r3, #0]
 8015010:	4854      	ldr	r0, [pc, #336]	; (8015164 <_printf_i+0x21c>)
 8015012:	296f      	cmp	r1, #111	; 0x6f
 8015014:	bf14      	ite	ne
 8015016:	220a      	movne	r2, #10
 8015018:	2208      	moveq	r2, #8
 801501a:	2100      	movs	r1, #0
 801501c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015020:	6865      	ldr	r5, [r4, #4]
 8015022:	60a5      	str	r5, [r4, #8]
 8015024:	2d00      	cmp	r5, #0
 8015026:	f2c0 8095 	blt.w	8015154 <_printf_i+0x20c>
 801502a:	6821      	ldr	r1, [r4, #0]
 801502c:	f021 0104 	bic.w	r1, r1, #4
 8015030:	6021      	str	r1, [r4, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d13d      	bne.n	80150b2 <_printf_i+0x16a>
 8015036:	2d00      	cmp	r5, #0
 8015038:	f040 808e 	bne.w	8015158 <_printf_i+0x210>
 801503c:	4665      	mov	r5, ip
 801503e:	2a08      	cmp	r2, #8
 8015040:	d10b      	bne.n	801505a <_printf_i+0x112>
 8015042:	6823      	ldr	r3, [r4, #0]
 8015044:	07db      	lsls	r3, r3, #31
 8015046:	d508      	bpl.n	801505a <_printf_i+0x112>
 8015048:	6923      	ldr	r3, [r4, #16]
 801504a:	6862      	ldr	r2, [r4, #4]
 801504c:	429a      	cmp	r2, r3
 801504e:	bfde      	ittt	le
 8015050:	2330      	movle	r3, #48	; 0x30
 8015052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015056:	f105 35ff 	addle.w	r5, r5, #4294967295
 801505a:	ebac 0305 	sub.w	r3, ip, r5
 801505e:	6123      	str	r3, [r4, #16]
 8015060:	f8cd 8000 	str.w	r8, [sp]
 8015064:	463b      	mov	r3, r7
 8015066:	aa03      	add	r2, sp, #12
 8015068:	4621      	mov	r1, r4
 801506a:	4630      	mov	r0, r6
 801506c:	f7ff fef6 	bl	8014e5c <_printf_common>
 8015070:	3001      	adds	r0, #1
 8015072:	d14d      	bne.n	8015110 <_printf_i+0x1c8>
 8015074:	f04f 30ff 	mov.w	r0, #4294967295
 8015078:	b005      	add	sp, #20
 801507a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801507e:	4839      	ldr	r0, [pc, #228]	; (8015164 <_printf_i+0x21c>)
 8015080:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015084:	6813      	ldr	r3, [r2, #0]
 8015086:	6821      	ldr	r1, [r4, #0]
 8015088:	1d1d      	adds	r5, r3, #4
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	6015      	str	r5, [r2, #0]
 801508e:	060a      	lsls	r2, r1, #24
 8015090:	d50b      	bpl.n	80150aa <_printf_i+0x162>
 8015092:	07ca      	lsls	r2, r1, #31
 8015094:	bf44      	itt	mi
 8015096:	f041 0120 	orrmi.w	r1, r1, #32
 801509a:	6021      	strmi	r1, [r4, #0]
 801509c:	b91b      	cbnz	r3, 80150a6 <_printf_i+0x15e>
 801509e:	6822      	ldr	r2, [r4, #0]
 80150a0:	f022 0220 	bic.w	r2, r2, #32
 80150a4:	6022      	str	r2, [r4, #0]
 80150a6:	2210      	movs	r2, #16
 80150a8:	e7b7      	b.n	801501a <_printf_i+0xd2>
 80150aa:	064d      	lsls	r5, r1, #25
 80150ac:	bf48      	it	mi
 80150ae:	b29b      	uxthmi	r3, r3
 80150b0:	e7ef      	b.n	8015092 <_printf_i+0x14a>
 80150b2:	4665      	mov	r5, ip
 80150b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80150b8:	fb02 3311 	mls	r3, r2, r1, r3
 80150bc:	5cc3      	ldrb	r3, [r0, r3]
 80150be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80150c2:	460b      	mov	r3, r1
 80150c4:	2900      	cmp	r1, #0
 80150c6:	d1f5      	bne.n	80150b4 <_printf_i+0x16c>
 80150c8:	e7b9      	b.n	801503e <_printf_i+0xf6>
 80150ca:	6813      	ldr	r3, [r2, #0]
 80150cc:	6825      	ldr	r5, [r4, #0]
 80150ce:	6961      	ldr	r1, [r4, #20]
 80150d0:	1d18      	adds	r0, r3, #4
 80150d2:	6010      	str	r0, [r2, #0]
 80150d4:	0628      	lsls	r0, r5, #24
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	d501      	bpl.n	80150de <_printf_i+0x196>
 80150da:	6019      	str	r1, [r3, #0]
 80150dc:	e002      	b.n	80150e4 <_printf_i+0x19c>
 80150de:	066a      	lsls	r2, r5, #25
 80150e0:	d5fb      	bpl.n	80150da <_printf_i+0x192>
 80150e2:	8019      	strh	r1, [r3, #0]
 80150e4:	2300      	movs	r3, #0
 80150e6:	6123      	str	r3, [r4, #16]
 80150e8:	4665      	mov	r5, ip
 80150ea:	e7b9      	b.n	8015060 <_printf_i+0x118>
 80150ec:	6813      	ldr	r3, [r2, #0]
 80150ee:	1d19      	adds	r1, r3, #4
 80150f0:	6011      	str	r1, [r2, #0]
 80150f2:	681d      	ldr	r5, [r3, #0]
 80150f4:	6862      	ldr	r2, [r4, #4]
 80150f6:	2100      	movs	r1, #0
 80150f8:	4628      	mov	r0, r5
 80150fa:	f7eb f891 	bl	8000220 <memchr>
 80150fe:	b108      	cbz	r0, 8015104 <_printf_i+0x1bc>
 8015100:	1b40      	subs	r0, r0, r5
 8015102:	6060      	str	r0, [r4, #4]
 8015104:	6863      	ldr	r3, [r4, #4]
 8015106:	6123      	str	r3, [r4, #16]
 8015108:	2300      	movs	r3, #0
 801510a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801510e:	e7a7      	b.n	8015060 <_printf_i+0x118>
 8015110:	6923      	ldr	r3, [r4, #16]
 8015112:	462a      	mov	r2, r5
 8015114:	4639      	mov	r1, r7
 8015116:	4630      	mov	r0, r6
 8015118:	47c0      	blx	r8
 801511a:	3001      	adds	r0, #1
 801511c:	d0aa      	beq.n	8015074 <_printf_i+0x12c>
 801511e:	6823      	ldr	r3, [r4, #0]
 8015120:	079b      	lsls	r3, r3, #30
 8015122:	d413      	bmi.n	801514c <_printf_i+0x204>
 8015124:	68e0      	ldr	r0, [r4, #12]
 8015126:	9b03      	ldr	r3, [sp, #12]
 8015128:	4298      	cmp	r0, r3
 801512a:	bfb8      	it	lt
 801512c:	4618      	movlt	r0, r3
 801512e:	e7a3      	b.n	8015078 <_printf_i+0x130>
 8015130:	2301      	movs	r3, #1
 8015132:	464a      	mov	r2, r9
 8015134:	4639      	mov	r1, r7
 8015136:	4630      	mov	r0, r6
 8015138:	47c0      	blx	r8
 801513a:	3001      	adds	r0, #1
 801513c:	d09a      	beq.n	8015074 <_printf_i+0x12c>
 801513e:	3501      	adds	r5, #1
 8015140:	68e3      	ldr	r3, [r4, #12]
 8015142:	9a03      	ldr	r2, [sp, #12]
 8015144:	1a9b      	subs	r3, r3, r2
 8015146:	42ab      	cmp	r3, r5
 8015148:	dcf2      	bgt.n	8015130 <_printf_i+0x1e8>
 801514a:	e7eb      	b.n	8015124 <_printf_i+0x1dc>
 801514c:	2500      	movs	r5, #0
 801514e:	f104 0919 	add.w	r9, r4, #25
 8015152:	e7f5      	b.n	8015140 <_printf_i+0x1f8>
 8015154:	2b00      	cmp	r3, #0
 8015156:	d1ac      	bne.n	80150b2 <_printf_i+0x16a>
 8015158:	7803      	ldrb	r3, [r0, #0]
 801515a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801515e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015162:	e76c      	b.n	801503e <_printf_i+0xf6>
 8015164:	08016a09 	.word	0x08016a09
 8015168:	08016a1a 	.word	0x08016a1a

0801516c <memmove>:
 801516c:	4288      	cmp	r0, r1
 801516e:	b510      	push	{r4, lr}
 8015170:	eb01 0302 	add.w	r3, r1, r2
 8015174:	d807      	bhi.n	8015186 <memmove+0x1a>
 8015176:	1e42      	subs	r2, r0, #1
 8015178:	4299      	cmp	r1, r3
 801517a:	d00a      	beq.n	8015192 <memmove+0x26>
 801517c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015180:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015184:	e7f8      	b.n	8015178 <memmove+0xc>
 8015186:	4283      	cmp	r3, r0
 8015188:	d9f5      	bls.n	8015176 <memmove+0xa>
 801518a:	1881      	adds	r1, r0, r2
 801518c:	1ad2      	subs	r2, r2, r3
 801518e:	42d3      	cmn	r3, r2
 8015190:	d100      	bne.n	8015194 <memmove+0x28>
 8015192:	bd10      	pop	{r4, pc}
 8015194:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015198:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801519c:	e7f7      	b.n	801518e <memmove+0x22>

0801519e <_realloc_r>:
 801519e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151a0:	4607      	mov	r7, r0
 80151a2:	4614      	mov	r4, r2
 80151a4:	460e      	mov	r6, r1
 80151a6:	b921      	cbnz	r1, 80151b2 <_realloc_r+0x14>
 80151a8:	4611      	mov	r1, r2
 80151aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80151ae:	f7ff bc29 	b.w	8014a04 <_malloc_r>
 80151b2:	b922      	cbnz	r2, 80151be <_realloc_r+0x20>
 80151b4:	f7ff fbd8 	bl	8014968 <_free_r>
 80151b8:	4625      	mov	r5, r4
 80151ba:	4628      	mov	r0, r5
 80151bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151be:	f000 f814 	bl	80151ea <_malloc_usable_size_r>
 80151c2:	42a0      	cmp	r0, r4
 80151c4:	d20f      	bcs.n	80151e6 <_realloc_r+0x48>
 80151c6:	4621      	mov	r1, r4
 80151c8:	4638      	mov	r0, r7
 80151ca:	f7ff fc1b 	bl	8014a04 <_malloc_r>
 80151ce:	4605      	mov	r5, r0
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d0f2      	beq.n	80151ba <_realloc_r+0x1c>
 80151d4:	4631      	mov	r1, r6
 80151d6:	4622      	mov	r2, r4
 80151d8:	f7ff fbb2 	bl	8014940 <memcpy>
 80151dc:	4631      	mov	r1, r6
 80151de:	4638      	mov	r0, r7
 80151e0:	f7ff fbc2 	bl	8014968 <_free_r>
 80151e4:	e7e9      	b.n	80151ba <_realloc_r+0x1c>
 80151e6:	4635      	mov	r5, r6
 80151e8:	e7e7      	b.n	80151ba <_realloc_r+0x1c>

080151ea <_malloc_usable_size_r>:
 80151ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151ee:	1f18      	subs	r0, r3, #4
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	bfbc      	itt	lt
 80151f4:	580b      	ldrlt	r3, [r1, r0]
 80151f6:	18c0      	addlt	r0, r0, r3
 80151f8:	4770      	bx	lr

080151fa <fmax>:
 80151fa:	b508      	push	{r3, lr}
 80151fc:	ed2d 8b04 	vpush	{d8-d9}
 8015200:	eeb0 8a40 	vmov.f32	s16, s0
 8015204:	eef0 8a60 	vmov.f32	s17, s1
 8015208:	eeb0 9a41 	vmov.f32	s18, s2
 801520c:	eef0 9a61 	vmov.f32	s19, s3
 8015210:	f000 f842 	bl	8015298 <__fpclassifyd>
 8015214:	b168      	cbz	r0, 8015232 <fmax+0x38>
 8015216:	eeb0 0a49 	vmov.f32	s0, s18
 801521a:	eef0 0a69 	vmov.f32	s1, s19
 801521e:	f000 f83b 	bl	8015298 <__fpclassifyd>
 8015222:	b150      	cbz	r0, 801523a <fmax+0x40>
 8015224:	ec53 2b19 	vmov	r2, r3, d9
 8015228:	ec51 0b18 	vmov	r0, r1, d8
 801522c:	f7eb fc94 	bl	8000b58 <__aeabi_dcmpgt>
 8015230:	b918      	cbnz	r0, 801523a <fmax+0x40>
 8015232:	eeb0 8a49 	vmov.f32	s16, s18
 8015236:	eef0 8a69 	vmov.f32	s17, s19
 801523a:	eeb0 0a48 	vmov.f32	s0, s16
 801523e:	eef0 0a68 	vmov.f32	s1, s17
 8015242:	ecbd 8b04 	vpop	{d8-d9}
 8015246:	bd08      	pop	{r3, pc}

08015248 <fmin>:
 8015248:	b508      	push	{r3, lr}
 801524a:	ed2d 8b04 	vpush	{d8-d9}
 801524e:	eeb0 8a40 	vmov.f32	s16, s0
 8015252:	eef0 8a60 	vmov.f32	s17, s1
 8015256:	eeb0 9a41 	vmov.f32	s18, s2
 801525a:	eef0 9a61 	vmov.f32	s19, s3
 801525e:	f000 f81b 	bl	8015298 <__fpclassifyd>
 8015262:	b168      	cbz	r0, 8015280 <fmin+0x38>
 8015264:	eeb0 0a49 	vmov.f32	s0, s18
 8015268:	eef0 0a69 	vmov.f32	s1, s19
 801526c:	f000 f814 	bl	8015298 <__fpclassifyd>
 8015270:	b150      	cbz	r0, 8015288 <fmin+0x40>
 8015272:	ec53 2b19 	vmov	r2, r3, d9
 8015276:	ec51 0b18 	vmov	r0, r1, d8
 801527a:	f7eb fc4f 	bl	8000b1c <__aeabi_dcmplt>
 801527e:	b918      	cbnz	r0, 8015288 <fmin+0x40>
 8015280:	eeb0 8a49 	vmov.f32	s16, s18
 8015284:	eef0 8a69 	vmov.f32	s17, s19
 8015288:	eeb0 0a48 	vmov.f32	s0, s16
 801528c:	eef0 0a68 	vmov.f32	s1, s17
 8015290:	ecbd 8b04 	vpop	{d8-d9}
 8015294:	bd08      	pop	{r3, pc}
	...

08015298 <__fpclassifyd>:
 8015298:	ec51 0b10 	vmov	r0, r1, d0
 801529c:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 80152a0:	b510      	push	{r4, lr}
 80152a2:	460b      	mov	r3, r1
 80152a4:	d01b      	beq.n	80152de <__fpclassifyd+0x46>
 80152a6:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80152aa:	490f      	ldr	r1, [pc, #60]	; (80152e8 <__fpclassifyd+0x50>)
 80152ac:	428c      	cmp	r4, r1
 80152ae:	d910      	bls.n	80152d2 <__fpclassifyd+0x3a>
 80152b0:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80152b4:	490c      	ldr	r1, [pc, #48]	; (80152e8 <__fpclassifyd+0x50>)
 80152b6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80152ba:	428b      	cmp	r3, r1
 80152bc:	d909      	bls.n	80152d2 <__fpclassifyd+0x3a>
 80152be:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80152c2:	d308      	bcc.n	80152d6 <__fpclassifyd+0x3e>
 80152c4:	4b09      	ldr	r3, [pc, #36]	; (80152ec <__fpclassifyd+0x54>)
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d107      	bne.n	80152da <__fpclassifyd+0x42>
 80152ca:	fab0 f080 	clz	r0, r0
 80152ce:	0940      	lsrs	r0, r0, #5
 80152d0:	bd10      	pop	{r4, pc}
 80152d2:	2004      	movs	r0, #4
 80152d4:	e7fc      	b.n	80152d0 <__fpclassifyd+0x38>
 80152d6:	2003      	movs	r0, #3
 80152d8:	e7fa      	b.n	80152d0 <__fpclassifyd+0x38>
 80152da:	2000      	movs	r0, #0
 80152dc:	e7f8      	b.n	80152d0 <__fpclassifyd+0x38>
 80152de:	2800      	cmp	r0, #0
 80152e0:	d1e6      	bne.n	80152b0 <__fpclassifyd+0x18>
 80152e2:	2002      	movs	r0, #2
 80152e4:	e7f4      	b.n	80152d0 <__fpclassifyd+0x38>
 80152e6:	bf00      	nop
 80152e8:	7fdfffff 	.word	0x7fdfffff
 80152ec:	7ff00000 	.word	0x7ff00000

080152f0 <pow>:
 80152f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152f4:	ed2d 8b04 	vpush	{d8-d9}
 80152f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80155cc <pow+0x2dc>
 80152fc:	b08d      	sub	sp, #52	; 0x34
 80152fe:	ec57 6b10 	vmov	r6, r7, d0
 8015302:	ec55 4b11 	vmov	r4, r5, d1
 8015306:	f000 f963 	bl	80155d0 <__ieee754_pow>
 801530a:	f999 3000 	ldrsb.w	r3, [r9]
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	3301      	adds	r3, #1
 8015312:	eeb0 8a40 	vmov.f32	s16, s0
 8015316:	eef0 8a60 	vmov.f32	s17, s1
 801531a:	46c8      	mov	r8, r9
 801531c:	d05f      	beq.n	80153de <pow+0xee>
 801531e:	4622      	mov	r2, r4
 8015320:	462b      	mov	r3, r5
 8015322:	4620      	mov	r0, r4
 8015324:	4629      	mov	r1, r5
 8015326:	f7eb fc21 	bl	8000b6c <__aeabi_dcmpun>
 801532a:	4683      	mov	fp, r0
 801532c:	2800      	cmp	r0, #0
 801532e:	d156      	bne.n	80153de <pow+0xee>
 8015330:	4632      	mov	r2, r6
 8015332:	463b      	mov	r3, r7
 8015334:	4630      	mov	r0, r6
 8015336:	4639      	mov	r1, r7
 8015338:	f7eb fc18 	bl	8000b6c <__aeabi_dcmpun>
 801533c:	9001      	str	r0, [sp, #4]
 801533e:	b1e8      	cbz	r0, 801537c <pow+0x8c>
 8015340:	2200      	movs	r2, #0
 8015342:	2300      	movs	r3, #0
 8015344:	4620      	mov	r0, r4
 8015346:	4629      	mov	r1, r5
 8015348:	f7eb fbde 	bl	8000b08 <__aeabi_dcmpeq>
 801534c:	2800      	cmp	r0, #0
 801534e:	d046      	beq.n	80153de <pow+0xee>
 8015350:	2301      	movs	r3, #1
 8015352:	9302      	str	r3, [sp, #8]
 8015354:	4b96      	ldr	r3, [pc, #600]	; (80155b0 <pow+0x2c0>)
 8015356:	9303      	str	r3, [sp, #12]
 8015358:	4b96      	ldr	r3, [pc, #600]	; (80155b4 <pow+0x2c4>)
 801535a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801535e:	2200      	movs	r2, #0
 8015360:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015364:	9b00      	ldr	r3, [sp, #0]
 8015366:	2b02      	cmp	r3, #2
 8015368:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801536c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015370:	d033      	beq.n	80153da <pow+0xea>
 8015372:	a802      	add	r0, sp, #8
 8015374:	f000 fefb 	bl	801616e <matherr>
 8015378:	bb48      	cbnz	r0, 80153ce <pow+0xde>
 801537a:	e05d      	b.n	8015438 <pow+0x148>
 801537c:	f04f 0a00 	mov.w	sl, #0
 8015380:	f04f 0b00 	mov.w	fp, #0
 8015384:	4652      	mov	r2, sl
 8015386:	465b      	mov	r3, fp
 8015388:	4630      	mov	r0, r6
 801538a:	4639      	mov	r1, r7
 801538c:	f7eb fbbc 	bl	8000b08 <__aeabi_dcmpeq>
 8015390:	ec4b ab19 	vmov	d9, sl, fp
 8015394:	2800      	cmp	r0, #0
 8015396:	d054      	beq.n	8015442 <pow+0x152>
 8015398:	4652      	mov	r2, sl
 801539a:	465b      	mov	r3, fp
 801539c:	4620      	mov	r0, r4
 801539e:	4629      	mov	r1, r5
 80153a0:	f7eb fbb2 	bl	8000b08 <__aeabi_dcmpeq>
 80153a4:	4680      	mov	r8, r0
 80153a6:	b318      	cbz	r0, 80153f0 <pow+0x100>
 80153a8:	2301      	movs	r3, #1
 80153aa:	9302      	str	r3, [sp, #8]
 80153ac:	4b80      	ldr	r3, [pc, #512]	; (80155b0 <pow+0x2c0>)
 80153ae:	9303      	str	r3, [sp, #12]
 80153b0:	9b01      	ldr	r3, [sp, #4]
 80153b2:	930a      	str	r3, [sp, #40]	; 0x28
 80153b4:	9b00      	ldr	r3, [sp, #0]
 80153b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80153ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80153be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d0d5      	beq.n	8015372 <pow+0x82>
 80153c6:	4b7b      	ldr	r3, [pc, #492]	; (80155b4 <pow+0x2c4>)
 80153c8:	2200      	movs	r2, #0
 80153ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80153ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153d0:	b11b      	cbz	r3, 80153da <pow+0xea>
 80153d2:	f7ff fa7b 	bl	80148cc <__errno>
 80153d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153d8:	6003      	str	r3, [r0, #0]
 80153da:	ed9d 8b08 	vldr	d8, [sp, #32]
 80153de:	eeb0 0a48 	vmov.f32	s0, s16
 80153e2:	eef0 0a68 	vmov.f32	s1, s17
 80153e6:	b00d      	add	sp, #52	; 0x34
 80153e8:	ecbd 8b04 	vpop	{d8-d9}
 80153ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153f0:	ec45 4b10 	vmov	d0, r4, r5
 80153f4:	f000 feb3 	bl	801615e <finite>
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d0f0      	beq.n	80153de <pow+0xee>
 80153fc:	4652      	mov	r2, sl
 80153fe:	465b      	mov	r3, fp
 8015400:	4620      	mov	r0, r4
 8015402:	4629      	mov	r1, r5
 8015404:	f7eb fb8a 	bl	8000b1c <__aeabi_dcmplt>
 8015408:	2800      	cmp	r0, #0
 801540a:	d0e8      	beq.n	80153de <pow+0xee>
 801540c:	2301      	movs	r3, #1
 801540e:	9302      	str	r3, [sp, #8]
 8015410:	4b67      	ldr	r3, [pc, #412]	; (80155b0 <pow+0x2c0>)
 8015412:	9303      	str	r3, [sp, #12]
 8015414:	f999 3000 	ldrsb.w	r3, [r9]
 8015418:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801541c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015420:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015424:	b913      	cbnz	r3, 801542c <pow+0x13c>
 8015426:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801542a:	e7a2      	b.n	8015372 <pow+0x82>
 801542c:	4962      	ldr	r1, [pc, #392]	; (80155b8 <pow+0x2c8>)
 801542e:	2000      	movs	r0, #0
 8015430:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015434:	2b02      	cmp	r3, #2
 8015436:	d19c      	bne.n	8015372 <pow+0x82>
 8015438:	f7ff fa48 	bl	80148cc <__errno>
 801543c:	2321      	movs	r3, #33	; 0x21
 801543e:	6003      	str	r3, [r0, #0]
 8015440:	e7c5      	b.n	80153ce <pow+0xde>
 8015442:	eeb0 0a48 	vmov.f32	s0, s16
 8015446:	eef0 0a68 	vmov.f32	s1, s17
 801544a:	f000 fe88 	bl	801615e <finite>
 801544e:	9000      	str	r0, [sp, #0]
 8015450:	2800      	cmp	r0, #0
 8015452:	f040 8081 	bne.w	8015558 <pow+0x268>
 8015456:	ec47 6b10 	vmov	d0, r6, r7
 801545a:	f000 fe80 	bl	801615e <finite>
 801545e:	2800      	cmp	r0, #0
 8015460:	d07a      	beq.n	8015558 <pow+0x268>
 8015462:	ec45 4b10 	vmov	d0, r4, r5
 8015466:	f000 fe7a 	bl	801615e <finite>
 801546a:	2800      	cmp	r0, #0
 801546c:	d074      	beq.n	8015558 <pow+0x268>
 801546e:	ec53 2b18 	vmov	r2, r3, d8
 8015472:	ee18 0a10 	vmov	r0, s16
 8015476:	4619      	mov	r1, r3
 8015478:	f7eb fb78 	bl	8000b6c <__aeabi_dcmpun>
 801547c:	f999 9000 	ldrsb.w	r9, [r9]
 8015480:	4b4b      	ldr	r3, [pc, #300]	; (80155b0 <pow+0x2c0>)
 8015482:	b1b0      	cbz	r0, 80154b2 <pow+0x1c2>
 8015484:	2201      	movs	r2, #1
 8015486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801548a:	9b00      	ldr	r3, [sp, #0]
 801548c:	930a      	str	r3, [sp, #40]	; 0x28
 801548e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015492:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015496:	f1b9 0f00 	cmp.w	r9, #0
 801549a:	d0c4      	beq.n	8015426 <pow+0x136>
 801549c:	4652      	mov	r2, sl
 801549e:	465b      	mov	r3, fp
 80154a0:	4650      	mov	r0, sl
 80154a2:	4659      	mov	r1, fp
 80154a4:	f7eb f9f2 	bl	800088c <__aeabi_ddiv>
 80154a8:	f1b9 0f02 	cmp.w	r9, #2
 80154ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80154b0:	e7c1      	b.n	8015436 <pow+0x146>
 80154b2:	2203      	movs	r2, #3
 80154b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80154b8:	900a      	str	r0, [sp, #40]	; 0x28
 80154ba:	4629      	mov	r1, r5
 80154bc:	4620      	mov	r0, r4
 80154be:	2200      	movs	r2, #0
 80154c0:	4b3e      	ldr	r3, [pc, #248]	; (80155bc <pow+0x2cc>)
 80154c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80154c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80154ca:	f7eb f8b5 	bl	8000638 <__aeabi_dmul>
 80154ce:	4604      	mov	r4, r0
 80154d0:	460d      	mov	r5, r1
 80154d2:	f1b9 0f00 	cmp.w	r9, #0
 80154d6:	d124      	bne.n	8015522 <pow+0x232>
 80154d8:	4b39      	ldr	r3, [pc, #228]	; (80155c0 <pow+0x2d0>)
 80154da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80154de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80154e2:	4630      	mov	r0, r6
 80154e4:	4652      	mov	r2, sl
 80154e6:	465b      	mov	r3, fp
 80154e8:	4639      	mov	r1, r7
 80154ea:	f7eb fb17 	bl	8000b1c <__aeabi_dcmplt>
 80154ee:	2800      	cmp	r0, #0
 80154f0:	d056      	beq.n	80155a0 <pow+0x2b0>
 80154f2:	ec45 4b10 	vmov	d0, r4, r5
 80154f6:	f000 fe47 	bl	8016188 <rint>
 80154fa:	4622      	mov	r2, r4
 80154fc:	462b      	mov	r3, r5
 80154fe:	ec51 0b10 	vmov	r0, r1, d0
 8015502:	f7eb fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8015506:	b920      	cbnz	r0, 8015512 <pow+0x222>
 8015508:	4b2e      	ldr	r3, [pc, #184]	; (80155c4 <pow+0x2d4>)
 801550a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801550e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015512:	f998 3000 	ldrsb.w	r3, [r8]
 8015516:	2b02      	cmp	r3, #2
 8015518:	d142      	bne.n	80155a0 <pow+0x2b0>
 801551a:	f7ff f9d7 	bl	80148cc <__errno>
 801551e:	2322      	movs	r3, #34	; 0x22
 8015520:	e78d      	b.n	801543e <pow+0x14e>
 8015522:	4b29      	ldr	r3, [pc, #164]	; (80155c8 <pow+0x2d8>)
 8015524:	2200      	movs	r2, #0
 8015526:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801552a:	4630      	mov	r0, r6
 801552c:	4652      	mov	r2, sl
 801552e:	465b      	mov	r3, fp
 8015530:	4639      	mov	r1, r7
 8015532:	f7eb faf3 	bl	8000b1c <__aeabi_dcmplt>
 8015536:	2800      	cmp	r0, #0
 8015538:	d0eb      	beq.n	8015512 <pow+0x222>
 801553a:	ec45 4b10 	vmov	d0, r4, r5
 801553e:	f000 fe23 	bl	8016188 <rint>
 8015542:	4622      	mov	r2, r4
 8015544:	462b      	mov	r3, r5
 8015546:	ec51 0b10 	vmov	r0, r1, d0
 801554a:	f7eb fadd 	bl	8000b08 <__aeabi_dcmpeq>
 801554e:	2800      	cmp	r0, #0
 8015550:	d1df      	bne.n	8015512 <pow+0x222>
 8015552:	2200      	movs	r2, #0
 8015554:	4b18      	ldr	r3, [pc, #96]	; (80155b8 <pow+0x2c8>)
 8015556:	e7da      	b.n	801550e <pow+0x21e>
 8015558:	2200      	movs	r2, #0
 801555a:	2300      	movs	r3, #0
 801555c:	ec51 0b18 	vmov	r0, r1, d8
 8015560:	f7eb fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8015564:	2800      	cmp	r0, #0
 8015566:	f43f af3a 	beq.w	80153de <pow+0xee>
 801556a:	ec47 6b10 	vmov	d0, r6, r7
 801556e:	f000 fdf6 	bl	801615e <finite>
 8015572:	2800      	cmp	r0, #0
 8015574:	f43f af33 	beq.w	80153de <pow+0xee>
 8015578:	ec45 4b10 	vmov	d0, r4, r5
 801557c:	f000 fdef 	bl	801615e <finite>
 8015580:	2800      	cmp	r0, #0
 8015582:	f43f af2c 	beq.w	80153de <pow+0xee>
 8015586:	2304      	movs	r3, #4
 8015588:	9302      	str	r3, [sp, #8]
 801558a:	4b09      	ldr	r3, [pc, #36]	; (80155b0 <pow+0x2c0>)
 801558c:	9303      	str	r3, [sp, #12]
 801558e:	2300      	movs	r3, #0
 8015590:	930a      	str	r3, [sp, #40]	; 0x28
 8015592:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015596:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801559a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801559e:	e7b8      	b.n	8015512 <pow+0x222>
 80155a0:	a802      	add	r0, sp, #8
 80155a2:	f000 fde4 	bl	801616e <matherr>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	f47f af11 	bne.w	80153ce <pow+0xde>
 80155ac:	e7b5      	b.n	801551a <pow+0x22a>
 80155ae:	bf00      	nop
 80155b0:	08016a2b 	.word	0x08016a2b
 80155b4:	3ff00000 	.word	0x3ff00000
 80155b8:	fff00000 	.word	0xfff00000
 80155bc:	3fe00000 	.word	0x3fe00000
 80155c0:	47efffff 	.word	0x47efffff
 80155c4:	c7efffff 	.word	0xc7efffff
 80155c8:	7ff00000 	.word	0x7ff00000
 80155cc:	200001f8 	.word	0x200001f8

080155d0 <__ieee754_pow>:
 80155d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d4:	b091      	sub	sp, #68	; 0x44
 80155d6:	ed8d 1b00 	vstr	d1, [sp]
 80155da:	e9dd 2900 	ldrd	r2, r9, [sp]
 80155de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80155e2:	ea58 0302 	orrs.w	r3, r8, r2
 80155e6:	ec57 6b10 	vmov	r6, r7, d0
 80155ea:	f000 84be 	beq.w	8015f6a <__ieee754_pow+0x99a>
 80155ee:	4b7a      	ldr	r3, [pc, #488]	; (80157d8 <__ieee754_pow+0x208>)
 80155f0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80155f4:	429c      	cmp	r4, r3
 80155f6:	463d      	mov	r5, r7
 80155f8:	ee10 aa10 	vmov	sl, s0
 80155fc:	dc09      	bgt.n	8015612 <__ieee754_pow+0x42>
 80155fe:	d103      	bne.n	8015608 <__ieee754_pow+0x38>
 8015600:	b93e      	cbnz	r6, 8015612 <__ieee754_pow+0x42>
 8015602:	45a0      	cmp	r8, r4
 8015604:	dc0d      	bgt.n	8015622 <__ieee754_pow+0x52>
 8015606:	e001      	b.n	801560c <__ieee754_pow+0x3c>
 8015608:	4598      	cmp	r8, r3
 801560a:	dc02      	bgt.n	8015612 <__ieee754_pow+0x42>
 801560c:	4598      	cmp	r8, r3
 801560e:	d10e      	bne.n	801562e <__ieee754_pow+0x5e>
 8015610:	b16a      	cbz	r2, 801562e <__ieee754_pow+0x5e>
 8015612:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015616:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801561a:	ea54 030a 	orrs.w	r3, r4, sl
 801561e:	f000 84a4 	beq.w	8015f6a <__ieee754_pow+0x99a>
 8015622:	486e      	ldr	r0, [pc, #440]	; (80157dc <__ieee754_pow+0x20c>)
 8015624:	b011      	add	sp, #68	; 0x44
 8015626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801562a:	f000 bda5 	b.w	8016178 <nan>
 801562e:	2d00      	cmp	r5, #0
 8015630:	da53      	bge.n	80156da <__ieee754_pow+0x10a>
 8015632:	4b6b      	ldr	r3, [pc, #428]	; (80157e0 <__ieee754_pow+0x210>)
 8015634:	4598      	cmp	r8, r3
 8015636:	dc4d      	bgt.n	80156d4 <__ieee754_pow+0x104>
 8015638:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801563c:	4598      	cmp	r8, r3
 801563e:	dd4c      	ble.n	80156da <__ieee754_pow+0x10a>
 8015640:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015644:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015648:	2b14      	cmp	r3, #20
 801564a:	dd26      	ble.n	801569a <__ieee754_pow+0xca>
 801564c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015650:	fa22 f103 	lsr.w	r1, r2, r3
 8015654:	fa01 f303 	lsl.w	r3, r1, r3
 8015658:	4293      	cmp	r3, r2
 801565a:	d13e      	bne.n	80156da <__ieee754_pow+0x10a>
 801565c:	f001 0101 	and.w	r1, r1, #1
 8015660:	f1c1 0b02 	rsb	fp, r1, #2
 8015664:	2a00      	cmp	r2, #0
 8015666:	d15b      	bne.n	8015720 <__ieee754_pow+0x150>
 8015668:	4b5b      	ldr	r3, [pc, #364]	; (80157d8 <__ieee754_pow+0x208>)
 801566a:	4598      	cmp	r8, r3
 801566c:	d124      	bne.n	80156b8 <__ieee754_pow+0xe8>
 801566e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015672:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015676:	ea53 030a 	orrs.w	r3, r3, sl
 801567a:	f000 8476 	beq.w	8015f6a <__ieee754_pow+0x99a>
 801567e:	4b59      	ldr	r3, [pc, #356]	; (80157e4 <__ieee754_pow+0x214>)
 8015680:	429c      	cmp	r4, r3
 8015682:	dd2d      	ble.n	80156e0 <__ieee754_pow+0x110>
 8015684:	f1b9 0f00 	cmp.w	r9, #0
 8015688:	f280 8473 	bge.w	8015f72 <__ieee754_pow+0x9a2>
 801568c:	2000      	movs	r0, #0
 801568e:	2100      	movs	r1, #0
 8015690:	ec41 0b10 	vmov	d0, r0, r1
 8015694:	b011      	add	sp, #68	; 0x44
 8015696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801569a:	2a00      	cmp	r2, #0
 801569c:	d13e      	bne.n	801571c <__ieee754_pow+0x14c>
 801569e:	f1c3 0314 	rsb	r3, r3, #20
 80156a2:	fa48 f103 	asr.w	r1, r8, r3
 80156a6:	fa01 f303 	lsl.w	r3, r1, r3
 80156aa:	4543      	cmp	r3, r8
 80156ac:	f040 8469 	bne.w	8015f82 <__ieee754_pow+0x9b2>
 80156b0:	f001 0101 	and.w	r1, r1, #1
 80156b4:	f1c1 0b02 	rsb	fp, r1, #2
 80156b8:	4b4b      	ldr	r3, [pc, #300]	; (80157e8 <__ieee754_pow+0x218>)
 80156ba:	4598      	cmp	r8, r3
 80156bc:	d118      	bne.n	80156f0 <__ieee754_pow+0x120>
 80156be:	f1b9 0f00 	cmp.w	r9, #0
 80156c2:	f280 845a 	bge.w	8015f7a <__ieee754_pow+0x9aa>
 80156c6:	4948      	ldr	r1, [pc, #288]	; (80157e8 <__ieee754_pow+0x218>)
 80156c8:	4632      	mov	r2, r6
 80156ca:	463b      	mov	r3, r7
 80156cc:	2000      	movs	r0, #0
 80156ce:	f7eb f8dd 	bl	800088c <__aeabi_ddiv>
 80156d2:	e7dd      	b.n	8015690 <__ieee754_pow+0xc0>
 80156d4:	f04f 0b02 	mov.w	fp, #2
 80156d8:	e7c4      	b.n	8015664 <__ieee754_pow+0x94>
 80156da:	f04f 0b00 	mov.w	fp, #0
 80156de:	e7c1      	b.n	8015664 <__ieee754_pow+0x94>
 80156e0:	f1b9 0f00 	cmp.w	r9, #0
 80156e4:	dad2      	bge.n	801568c <__ieee754_pow+0xbc>
 80156e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80156ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80156ee:	e7cf      	b.n	8015690 <__ieee754_pow+0xc0>
 80156f0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80156f4:	d106      	bne.n	8015704 <__ieee754_pow+0x134>
 80156f6:	4632      	mov	r2, r6
 80156f8:	463b      	mov	r3, r7
 80156fa:	4610      	mov	r0, r2
 80156fc:	4619      	mov	r1, r3
 80156fe:	f7ea ff9b 	bl	8000638 <__aeabi_dmul>
 8015702:	e7c5      	b.n	8015690 <__ieee754_pow+0xc0>
 8015704:	4b39      	ldr	r3, [pc, #228]	; (80157ec <__ieee754_pow+0x21c>)
 8015706:	4599      	cmp	r9, r3
 8015708:	d10a      	bne.n	8015720 <__ieee754_pow+0x150>
 801570a:	2d00      	cmp	r5, #0
 801570c:	db08      	blt.n	8015720 <__ieee754_pow+0x150>
 801570e:	ec47 6b10 	vmov	d0, r6, r7
 8015712:	b011      	add	sp, #68	; 0x44
 8015714:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015718:	f000 bc68 	b.w	8015fec <__ieee754_sqrt>
 801571c:	f04f 0b00 	mov.w	fp, #0
 8015720:	ec47 6b10 	vmov	d0, r6, r7
 8015724:	f000 fd12 	bl	801614c <fabs>
 8015728:	ec51 0b10 	vmov	r0, r1, d0
 801572c:	f1ba 0f00 	cmp.w	sl, #0
 8015730:	d127      	bne.n	8015782 <__ieee754_pow+0x1b2>
 8015732:	b124      	cbz	r4, 801573e <__ieee754_pow+0x16e>
 8015734:	4b2c      	ldr	r3, [pc, #176]	; (80157e8 <__ieee754_pow+0x218>)
 8015736:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801573a:	429a      	cmp	r2, r3
 801573c:	d121      	bne.n	8015782 <__ieee754_pow+0x1b2>
 801573e:	f1b9 0f00 	cmp.w	r9, #0
 8015742:	da05      	bge.n	8015750 <__ieee754_pow+0x180>
 8015744:	4602      	mov	r2, r0
 8015746:	460b      	mov	r3, r1
 8015748:	2000      	movs	r0, #0
 801574a:	4927      	ldr	r1, [pc, #156]	; (80157e8 <__ieee754_pow+0x218>)
 801574c:	f7eb f89e 	bl	800088c <__aeabi_ddiv>
 8015750:	2d00      	cmp	r5, #0
 8015752:	da9d      	bge.n	8015690 <__ieee754_pow+0xc0>
 8015754:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015758:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801575c:	ea54 030b 	orrs.w	r3, r4, fp
 8015760:	d108      	bne.n	8015774 <__ieee754_pow+0x1a4>
 8015762:	4602      	mov	r2, r0
 8015764:	460b      	mov	r3, r1
 8015766:	4610      	mov	r0, r2
 8015768:	4619      	mov	r1, r3
 801576a:	f7ea fdad 	bl	80002c8 <__aeabi_dsub>
 801576e:	4602      	mov	r2, r0
 8015770:	460b      	mov	r3, r1
 8015772:	e7ac      	b.n	80156ce <__ieee754_pow+0xfe>
 8015774:	f1bb 0f01 	cmp.w	fp, #1
 8015778:	d18a      	bne.n	8015690 <__ieee754_pow+0xc0>
 801577a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801577e:	4619      	mov	r1, r3
 8015780:	e786      	b.n	8015690 <__ieee754_pow+0xc0>
 8015782:	0fed      	lsrs	r5, r5, #31
 8015784:	1e6b      	subs	r3, r5, #1
 8015786:	930d      	str	r3, [sp, #52]	; 0x34
 8015788:	ea5b 0303 	orrs.w	r3, fp, r3
 801578c:	d102      	bne.n	8015794 <__ieee754_pow+0x1c4>
 801578e:	4632      	mov	r2, r6
 8015790:	463b      	mov	r3, r7
 8015792:	e7e8      	b.n	8015766 <__ieee754_pow+0x196>
 8015794:	4b16      	ldr	r3, [pc, #88]	; (80157f0 <__ieee754_pow+0x220>)
 8015796:	4598      	cmp	r8, r3
 8015798:	f340 80fe 	ble.w	8015998 <__ieee754_pow+0x3c8>
 801579c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80157a0:	4598      	cmp	r8, r3
 80157a2:	dd0a      	ble.n	80157ba <__ieee754_pow+0x1ea>
 80157a4:	4b0f      	ldr	r3, [pc, #60]	; (80157e4 <__ieee754_pow+0x214>)
 80157a6:	429c      	cmp	r4, r3
 80157a8:	dc0d      	bgt.n	80157c6 <__ieee754_pow+0x1f6>
 80157aa:	f1b9 0f00 	cmp.w	r9, #0
 80157ae:	f6bf af6d 	bge.w	801568c <__ieee754_pow+0xbc>
 80157b2:	a307      	add	r3, pc, #28	; (adr r3, 80157d0 <__ieee754_pow+0x200>)
 80157b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b8:	e79f      	b.n	80156fa <__ieee754_pow+0x12a>
 80157ba:	4b0e      	ldr	r3, [pc, #56]	; (80157f4 <__ieee754_pow+0x224>)
 80157bc:	429c      	cmp	r4, r3
 80157be:	ddf4      	ble.n	80157aa <__ieee754_pow+0x1da>
 80157c0:	4b09      	ldr	r3, [pc, #36]	; (80157e8 <__ieee754_pow+0x218>)
 80157c2:	429c      	cmp	r4, r3
 80157c4:	dd18      	ble.n	80157f8 <__ieee754_pow+0x228>
 80157c6:	f1b9 0f00 	cmp.w	r9, #0
 80157ca:	dcf2      	bgt.n	80157b2 <__ieee754_pow+0x1e2>
 80157cc:	e75e      	b.n	801568c <__ieee754_pow+0xbc>
 80157ce:	bf00      	nop
 80157d0:	8800759c 	.word	0x8800759c
 80157d4:	7e37e43c 	.word	0x7e37e43c
 80157d8:	7ff00000 	.word	0x7ff00000
 80157dc:	080169fd 	.word	0x080169fd
 80157e0:	433fffff 	.word	0x433fffff
 80157e4:	3fefffff 	.word	0x3fefffff
 80157e8:	3ff00000 	.word	0x3ff00000
 80157ec:	3fe00000 	.word	0x3fe00000
 80157f0:	41e00000 	.word	0x41e00000
 80157f4:	3feffffe 	.word	0x3feffffe
 80157f8:	2200      	movs	r2, #0
 80157fa:	4b63      	ldr	r3, [pc, #396]	; (8015988 <__ieee754_pow+0x3b8>)
 80157fc:	f7ea fd64 	bl	80002c8 <__aeabi_dsub>
 8015800:	a355      	add	r3, pc, #340	; (adr r3, 8015958 <__ieee754_pow+0x388>)
 8015802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015806:	4604      	mov	r4, r0
 8015808:	460d      	mov	r5, r1
 801580a:	f7ea ff15 	bl	8000638 <__aeabi_dmul>
 801580e:	a354      	add	r3, pc, #336	; (adr r3, 8015960 <__ieee754_pow+0x390>)
 8015810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015814:	4606      	mov	r6, r0
 8015816:	460f      	mov	r7, r1
 8015818:	4620      	mov	r0, r4
 801581a:	4629      	mov	r1, r5
 801581c:	f7ea ff0c 	bl	8000638 <__aeabi_dmul>
 8015820:	2200      	movs	r2, #0
 8015822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015826:	4b59      	ldr	r3, [pc, #356]	; (801598c <__ieee754_pow+0x3bc>)
 8015828:	4620      	mov	r0, r4
 801582a:	4629      	mov	r1, r5
 801582c:	f7ea ff04 	bl	8000638 <__aeabi_dmul>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	a14c      	add	r1, pc, #304	; (adr r1, 8015968 <__ieee754_pow+0x398>)
 8015836:	e9d1 0100 	ldrd	r0, r1, [r1]
 801583a:	f7ea fd45 	bl	80002c8 <__aeabi_dsub>
 801583e:	4622      	mov	r2, r4
 8015840:	462b      	mov	r3, r5
 8015842:	f7ea fef9 	bl	8000638 <__aeabi_dmul>
 8015846:	4602      	mov	r2, r0
 8015848:	460b      	mov	r3, r1
 801584a:	2000      	movs	r0, #0
 801584c:	4950      	ldr	r1, [pc, #320]	; (8015990 <__ieee754_pow+0x3c0>)
 801584e:	f7ea fd3b 	bl	80002c8 <__aeabi_dsub>
 8015852:	4622      	mov	r2, r4
 8015854:	462b      	mov	r3, r5
 8015856:	4680      	mov	r8, r0
 8015858:	4689      	mov	r9, r1
 801585a:	4620      	mov	r0, r4
 801585c:	4629      	mov	r1, r5
 801585e:	f7ea feeb 	bl	8000638 <__aeabi_dmul>
 8015862:	4602      	mov	r2, r0
 8015864:	460b      	mov	r3, r1
 8015866:	4640      	mov	r0, r8
 8015868:	4649      	mov	r1, r9
 801586a:	f7ea fee5 	bl	8000638 <__aeabi_dmul>
 801586e:	a340      	add	r3, pc, #256	; (adr r3, 8015970 <__ieee754_pow+0x3a0>)
 8015870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015874:	f7ea fee0 	bl	8000638 <__aeabi_dmul>
 8015878:	4602      	mov	r2, r0
 801587a:	460b      	mov	r3, r1
 801587c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015880:	f7ea fd22 	bl	80002c8 <__aeabi_dsub>
 8015884:	4602      	mov	r2, r0
 8015886:	460b      	mov	r3, r1
 8015888:	4604      	mov	r4, r0
 801588a:	460d      	mov	r5, r1
 801588c:	4630      	mov	r0, r6
 801588e:	4639      	mov	r1, r7
 8015890:	f7ea fd1c 	bl	80002cc <__adddf3>
 8015894:	2000      	movs	r0, #0
 8015896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801589a:	4632      	mov	r2, r6
 801589c:	463b      	mov	r3, r7
 801589e:	f7ea fd13 	bl	80002c8 <__aeabi_dsub>
 80158a2:	4602      	mov	r2, r0
 80158a4:	460b      	mov	r3, r1
 80158a6:	4620      	mov	r0, r4
 80158a8:	4629      	mov	r1, r5
 80158aa:	f7ea fd0d 	bl	80002c8 <__aeabi_dsub>
 80158ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80158b0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80158b4:	4313      	orrs	r3, r2
 80158b6:	4606      	mov	r6, r0
 80158b8:	460f      	mov	r7, r1
 80158ba:	f040 81eb 	bne.w	8015c94 <__ieee754_pow+0x6c4>
 80158be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015978 <__ieee754_pow+0x3a8>
 80158c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80158c6:	2400      	movs	r4, #0
 80158c8:	4622      	mov	r2, r4
 80158ca:	462b      	mov	r3, r5
 80158cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80158d4:	f7ea fcf8 	bl	80002c8 <__aeabi_dsub>
 80158d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158dc:	f7ea feac 	bl	8000638 <__aeabi_dmul>
 80158e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158e4:	4680      	mov	r8, r0
 80158e6:	4689      	mov	r9, r1
 80158e8:	4630      	mov	r0, r6
 80158ea:	4639      	mov	r1, r7
 80158ec:	f7ea fea4 	bl	8000638 <__aeabi_dmul>
 80158f0:	4602      	mov	r2, r0
 80158f2:	460b      	mov	r3, r1
 80158f4:	4640      	mov	r0, r8
 80158f6:	4649      	mov	r1, r9
 80158f8:	f7ea fce8 	bl	80002cc <__adddf3>
 80158fc:	4622      	mov	r2, r4
 80158fe:	462b      	mov	r3, r5
 8015900:	4680      	mov	r8, r0
 8015902:	4689      	mov	r9, r1
 8015904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015908:	f7ea fe96 	bl	8000638 <__aeabi_dmul>
 801590c:	460b      	mov	r3, r1
 801590e:	4604      	mov	r4, r0
 8015910:	460d      	mov	r5, r1
 8015912:	4602      	mov	r2, r0
 8015914:	4649      	mov	r1, r9
 8015916:	4640      	mov	r0, r8
 8015918:	e9cd 4500 	strd	r4, r5, [sp]
 801591c:	f7ea fcd6 	bl	80002cc <__adddf3>
 8015920:	4b1c      	ldr	r3, [pc, #112]	; (8015994 <__ieee754_pow+0x3c4>)
 8015922:	4299      	cmp	r1, r3
 8015924:	4606      	mov	r6, r0
 8015926:	460f      	mov	r7, r1
 8015928:	468b      	mov	fp, r1
 801592a:	f340 82f7 	ble.w	8015f1c <__ieee754_pow+0x94c>
 801592e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015932:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015936:	4303      	orrs	r3, r0
 8015938:	f000 81ea 	beq.w	8015d10 <__ieee754_pow+0x740>
 801593c:	a310      	add	r3, pc, #64	; (adr r3, 8015980 <__ieee754_pow+0x3b0>)
 801593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015946:	f7ea fe77 	bl	8000638 <__aeabi_dmul>
 801594a:	a30d      	add	r3, pc, #52	; (adr r3, 8015980 <__ieee754_pow+0x3b0>)
 801594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015950:	e6d5      	b.n	80156fe <__ieee754_pow+0x12e>
 8015952:	bf00      	nop
 8015954:	f3af 8000 	nop.w
 8015958:	60000000 	.word	0x60000000
 801595c:	3ff71547 	.word	0x3ff71547
 8015960:	f85ddf44 	.word	0xf85ddf44
 8015964:	3e54ae0b 	.word	0x3e54ae0b
 8015968:	55555555 	.word	0x55555555
 801596c:	3fd55555 	.word	0x3fd55555
 8015970:	652b82fe 	.word	0x652b82fe
 8015974:	3ff71547 	.word	0x3ff71547
 8015978:	00000000 	.word	0x00000000
 801597c:	bff00000 	.word	0xbff00000
 8015980:	8800759c 	.word	0x8800759c
 8015984:	7e37e43c 	.word	0x7e37e43c
 8015988:	3ff00000 	.word	0x3ff00000
 801598c:	3fd00000 	.word	0x3fd00000
 8015990:	3fe00000 	.word	0x3fe00000
 8015994:	408fffff 	.word	0x408fffff
 8015998:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801599c:	f04f 0200 	mov.w	r2, #0
 80159a0:	da05      	bge.n	80159ae <__ieee754_pow+0x3de>
 80159a2:	4bd3      	ldr	r3, [pc, #844]	; (8015cf0 <__ieee754_pow+0x720>)
 80159a4:	f7ea fe48 	bl	8000638 <__aeabi_dmul>
 80159a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80159ac:	460c      	mov	r4, r1
 80159ae:	1523      	asrs	r3, r4, #20
 80159b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80159b4:	4413      	add	r3, r2
 80159b6:	9309      	str	r3, [sp, #36]	; 0x24
 80159b8:	4bce      	ldr	r3, [pc, #824]	; (8015cf4 <__ieee754_pow+0x724>)
 80159ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80159be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80159c2:	429c      	cmp	r4, r3
 80159c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80159c8:	dd08      	ble.n	80159dc <__ieee754_pow+0x40c>
 80159ca:	4bcb      	ldr	r3, [pc, #812]	; (8015cf8 <__ieee754_pow+0x728>)
 80159cc:	429c      	cmp	r4, r3
 80159ce:	f340 815e 	ble.w	8015c8e <__ieee754_pow+0x6be>
 80159d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159d4:	3301      	adds	r3, #1
 80159d6:	9309      	str	r3, [sp, #36]	; 0x24
 80159d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80159dc:	f04f 0a00 	mov.w	sl, #0
 80159e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80159e4:	930c      	str	r3, [sp, #48]	; 0x30
 80159e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159e8:	4bc4      	ldr	r3, [pc, #784]	; (8015cfc <__ieee754_pow+0x72c>)
 80159ea:	4413      	add	r3, r2
 80159ec:	ed93 7b00 	vldr	d7, [r3]
 80159f0:	4629      	mov	r1, r5
 80159f2:	ec53 2b17 	vmov	r2, r3, d7
 80159f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80159fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80159fe:	f7ea fc63 	bl	80002c8 <__aeabi_dsub>
 8015a02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015a06:	4606      	mov	r6, r0
 8015a08:	460f      	mov	r7, r1
 8015a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a0e:	f7ea fc5d 	bl	80002cc <__adddf3>
 8015a12:	4602      	mov	r2, r0
 8015a14:	460b      	mov	r3, r1
 8015a16:	2000      	movs	r0, #0
 8015a18:	49b9      	ldr	r1, [pc, #740]	; (8015d00 <__ieee754_pow+0x730>)
 8015a1a:	f7ea ff37 	bl	800088c <__aeabi_ddiv>
 8015a1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015a22:	4602      	mov	r2, r0
 8015a24:	460b      	mov	r3, r1
 8015a26:	4630      	mov	r0, r6
 8015a28:	4639      	mov	r1, r7
 8015a2a:	f7ea fe05 	bl	8000638 <__aeabi_dmul>
 8015a2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a32:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015a36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	9302      	str	r3, [sp, #8]
 8015a3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015a42:	106d      	asrs	r5, r5, #1
 8015a44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015a48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015a52:	4640      	mov	r0, r8
 8015a54:	4649      	mov	r1, r9
 8015a56:	4614      	mov	r4, r2
 8015a58:	461d      	mov	r5, r3
 8015a5a:	f7ea fded 	bl	8000638 <__aeabi_dmul>
 8015a5e:	4602      	mov	r2, r0
 8015a60:	460b      	mov	r3, r1
 8015a62:	4630      	mov	r0, r6
 8015a64:	4639      	mov	r1, r7
 8015a66:	f7ea fc2f 	bl	80002c8 <__aeabi_dsub>
 8015a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015a6e:	4606      	mov	r6, r0
 8015a70:	460f      	mov	r7, r1
 8015a72:	4620      	mov	r0, r4
 8015a74:	4629      	mov	r1, r5
 8015a76:	f7ea fc27 	bl	80002c8 <__aeabi_dsub>
 8015a7a:	4602      	mov	r2, r0
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015a82:	f7ea fc21 	bl	80002c8 <__aeabi_dsub>
 8015a86:	4642      	mov	r2, r8
 8015a88:	464b      	mov	r3, r9
 8015a8a:	f7ea fdd5 	bl	8000638 <__aeabi_dmul>
 8015a8e:	4602      	mov	r2, r0
 8015a90:	460b      	mov	r3, r1
 8015a92:	4630      	mov	r0, r6
 8015a94:	4639      	mov	r1, r7
 8015a96:	f7ea fc17 	bl	80002c8 <__aeabi_dsub>
 8015a9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015a9e:	f7ea fdcb 	bl	8000638 <__aeabi_dmul>
 8015aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015aaa:	4610      	mov	r0, r2
 8015aac:	4619      	mov	r1, r3
 8015aae:	f7ea fdc3 	bl	8000638 <__aeabi_dmul>
 8015ab2:	a37b      	add	r3, pc, #492	; (adr r3, 8015ca0 <__ieee754_pow+0x6d0>)
 8015ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab8:	4604      	mov	r4, r0
 8015aba:	460d      	mov	r5, r1
 8015abc:	f7ea fdbc 	bl	8000638 <__aeabi_dmul>
 8015ac0:	a379      	add	r3, pc, #484	; (adr r3, 8015ca8 <__ieee754_pow+0x6d8>)
 8015ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac6:	f7ea fc01 	bl	80002cc <__adddf3>
 8015aca:	4622      	mov	r2, r4
 8015acc:	462b      	mov	r3, r5
 8015ace:	f7ea fdb3 	bl	8000638 <__aeabi_dmul>
 8015ad2:	a377      	add	r3, pc, #476	; (adr r3, 8015cb0 <__ieee754_pow+0x6e0>)
 8015ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad8:	f7ea fbf8 	bl	80002cc <__adddf3>
 8015adc:	4622      	mov	r2, r4
 8015ade:	462b      	mov	r3, r5
 8015ae0:	f7ea fdaa 	bl	8000638 <__aeabi_dmul>
 8015ae4:	a374      	add	r3, pc, #464	; (adr r3, 8015cb8 <__ieee754_pow+0x6e8>)
 8015ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aea:	f7ea fbef 	bl	80002cc <__adddf3>
 8015aee:	4622      	mov	r2, r4
 8015af0:	462b      	mov	r3, r5
 8015af2:	f7ea fda1 	bl	8000638 <__aeabi_dmul>
 8015af6:	a372      	add	r3, pc, #456	; (adr r3, 8015cc0 <__ieee754_pow+0x6f0>)
 8015af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afc:	f7ea fbe6 	bl	80002cc <__adddf3>
 8015b00:	4622      	mov	r2, r4
 8015b02:	462b      	mov	r3, r5
 8015b04:	f7ea fd98 	bl	8000638 <__aeabi_dmul>
 8015b08:	a36f      	add	r3, pc, #444	; (adr r3, 8015cc8 <__ieee754_pow+0x6f8>)
 8015b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0e:	f7ea fbdd 	bl	80002cc <__adddf3>
 8015b12:	4622      	mov	r2, r4
 8015b14:	4606      	mov	r6, r0
 8015b16:	460f      	mov	r7, r1
 8015b18:	462b      	mov	r3, r5
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	4629      	mov	r1, r5
 8015b1e:	f7ea fd8b 	bl	8000638 <__aeabi_dmul>
 8015b22:	4602      	mov	r2, r0
 8015b24:	460b      	mov	r3, r1
 8015b26:	4630      	mov	r0, r6
 8015b28:	4639      	mov	r1, r7
 8015b2a:	f7ea fd85 	bl	8000638 <__aeabi_dmul>
 8015b2e:	4642      	mov	r2, r8
 8015b30:	4604      	mov	r4, r0
 8015b32:	460d      	mov	r5, r1
 8015b34:	464b      	mov	r3, r9
 8015b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015b3a:	f7ea fbc7 	bl	80002cc <__adddf3>
 8015b3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b42:	f7ea fd79 	bl	8000638 <__aeabi_dmul>
 8015b46:	4622      	mov	r2, r4
 8015b48:	462b      	mov	r3, r5
 8015b4a:	f7ea fbbf 	bl	80002cc <__adddf3>
 8015b4e:	4642      	mov	r2, r8
 8015b50:	4606      	mov	r6, r0
 8015b52:	460f      	mov	r7, r1
 8015b54:	464b      	mov	r3, r9
 8015b56:	4640      	mov	r0, r8
 8015b58:	4649      	mov	r1, r9
 8015b5a:	f7ea fd6d 	bl	8000638 <__aeabi_dmul>
 8015b5e:	2200      	movs	r2, #0
 8015b60:	4b68      	ldr	r3, [pc, #416]	; (8015d04 <__ieee754_pow+0x734>)
 8015b62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015b66:	f7ea fbb1 	bl	80002cc <__adddf3>
 8015b6a:	4632      	mov	r2, r6
 8015b6c:	463b      	mov	r3, r7
 8015b6e:	f7ea fbad 	bl	80002cc <__adddf3>
 8015b72:	9802      	ldr	r0, [sp, #8]
 8015b74:	460d      	mov	r5, r1
 8015b76:	4604      	mov	r4, r0
 8015b78:	4602      	mov	r2, r0
 8015b7a:	460b      	mov	r3, r1
 8015b7c:	4640      	mov	r0, r8
 8015b7e:	4649      	mov	r1, r9
 8015b80:	f7ea fd5a 	bl	8000638 <__aeabi_dmul>
 8015b84:	2200      	movs	r2, #0
 8015b86:	4680      	mov	r8, r0
 8015b88:	4689      	mov	r9, r1
 8015b8a:	4b5e      	ldr	r3, [pc, #376]	; (8015d04 <__ieee754_pow+0x734>)
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	4629      	mov	r1, r5
 8015b90:	f7ea fb9a 	bl	80002c8 <__aeabi_dsub>
 8015b94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015b98:	f7ea fb96 	bl	80002c8 <__aeabi_dsub>
 8015b9c:	4602      	mov	r2, r0
 8015b9e:	460b      	mov	r3, r1
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	4639      	mov	r1, r7
 8015ba4:	f7ea fb90 	bl	80002c8 <__aeabi_dsub>
 8015ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bac:	f7ea fd44 	bl	8000638 <__aeabi_dmul>
 8015bb0:	4622      	mov	r2, r4
 8015bb2:	4606      	mov	r6, r0
 8015bb4:	460f      	mov	r7, r1
 8015bb6:	462b      	mov	r3, r5
 8015bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015bbc:	f7ea fd3c 	bl	8000638 <__aeabi_dmul>
 8015bc0:	4602      	mov	r2, r0
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	4639      	mov	r1, r7
 8015bc8:	f7ea fb80 	bl	80002cc <__adddf3>
 8015bcc:	4606      	mov	r6, r0
 8015bce:	460f      	mov	r7, r1
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	460b      	mov	r3, r1
 8015bd4:	4640      	mov	r0, r8
 8015bd6:	4649      	mov	r1, r9
 8015bd8:	f7ea fb78 	bl	80002cc <__adddf3>
 8015bdc:	9802      	ldr	r0, [sp, #8]
 8015bde:	a33c      	add	r3, pc, #240	; (adr r3, 8015cd0 <__ieee754_pow+0x700>)
 8015be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be4:	4604      	mov	r4, r0
 8015be6:	460d      	mov	r5, r1
 8015be8:	f7ea fd26 	bl	8000638 <__aeabi_dmul>
 8015bec:	4642      	mov	r2, r8
 8015bee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015bf2:	464b      	mov	r3, r9
 8015bf4:	4620      	mov	r0, r4
 8015bf6:	4629      	mov	r1, r5
 8015bf8:	f7ea fb66 	bl	80002c8 <__aeabi_dsub>
 8015bfc:	4602      	mov	r2, r0
 8015bfe:	460b      	mov	r3, r1
 8015c00:	4630      	mov	r0, r6
 8015c02:	4639      	mov	r1, r7
 8015c04:	f7ea fb60 	bl	80002c8 <__aeabi_dsub>
 8015c08:	a333      	add	r3, pc, #204	; (adr r3, 8015cd8 <__ieee754_pow+0x708>)
 8015c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c0e:	f7ea fd13 	bl	8000638 <__aeabi_dmul>
 8015c12:	a333      	add	r3, pc, #204	; (adr r3, 8015ce0 <__ieee754_pow+0x710>)
 8015c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c18:	4606      	mov	r6, r0
 8015c1a:	460f      	mov	r7, r1
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	4629      	mov	r1, r5
 8015c20:	f7ea fd0a 	bl	8000638 <__aeabi_dmul>
 8015c24:	4602      	mov	r2, r0
 8015c26:	460b      	mov	r3, r1
 8015c28:	4630      	mov	r0, r6
 8015c2a:	4639      	mov	r1, r7
 8015c2c:	f7ea fb4e 	bl	80002cc <__adddf3>
 8015c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c32:	4b35      	ldr	r3, [pc, #212]	; (8015d08 <__ieee754_pow+0x738>)
 8015c34:	4413      	add	r3, r2
 8015c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c3a:	f7ea fb47 	bl	80002cc <__adddf3>
 8015c3e:	4604      	mov	r4, r0
 8015c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c42:	460d      	mov	r5, r1
 8015c44:	f7ea fc8e 	bl	8000564 <__aeabi_i2d>
 8015c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c4a:	4b30      	ldr	r3, [pc, #192]	; (8015d0c <__ieee754_pow+0x73c>)
 8015c4c:	4413      	add	r3, r2
 8015c4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015c52:	4606      	mov	r6, r0
 8015c54:	460f      	mov	r7, r1
 8015c56:	4622      	mov	r2, r4
 8015c58:	462b      	mov	r3, r5
 8015c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c5e:	f7ea fb35 	bl	80002cc <__adddf3>
 8015c62:	4642      	mov	r2, r8
 8015c64:	464b      	mov	r3, r9
 8015c66:	f7ea fb31 	bl	80002cc <__adddf3>
 8015c6a:	4632      	mov	r2, r6
 8015c6c:	463b      	mov	r3, r7
 8015c6e:	f7ea fb2d 	bl	80002cc <__adddf3>
 8015c72:	9802      	ldr	r0, [sp, #8]
 8015c74:	4632      	mov	r2, r6
 8015c76:	463b      	mov	r3, r7
 8015c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c7c:	f7ea fb24 	bl	80002c8 <__aeabi_dsub>
 8015c80:	4642      	mov	r2, r8
 8015c82:	464b      	mov	r3, r9
 8015c84:	f7ea fb20 	bl	80002c8 <__aeabi_dsub>
 8015c88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015c8c:	e607      	b.n	801589e <__ieee754_pow+0x2ce>
 8015c8e:	f04f 0a01 	mov.w	sl, #1
 8015c92:	e6a5      	b.n	80159e0 <__ieee754_pow+0x410>
 8015c94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015ce8 <__ieee754_pow+0x718>
 8015c98:	e613      	b.n	80158c2 <__ieee754_pow+0x2f2>
 8015c9a:	bf00      	nop
 8015c9c:	f3af 8000 	nop.w
 8015ca0:	4a454eef 	.word	0x4a454eef
 8015ca4:	3fca7e28 	.word	0x3fca7e28
 8015ca8:	93c9db65 	.word	0x93c9db65
 8015cac:	3fcd864a 	.word	0x3fcd864a
 8015cb0:	a91d4101 	.word	0xa91d4101
 8015cb4:	3fd17460 	.word	0x3fd17460
 8015cb8:	518f264d 	.word	0x518f264d
 8015cbc:	3fd55555 	.word	0x3fd55555
 8015cc0:	db6fabff 	.word	0xdb6fabff
 8015cc4:	3fdb6db6 	.word	0x3fdb6db6
 8015cc8:	33333303 	.word	0x33333303
 8015ccc:	3fe33333 	.word	0x3fe33333
 8015cd0:	e0000000 	.word	0xe0000000
 8015cd4:	3feec709 	.word	0x3feec709
 8015cd8:	dc3a03fd 	.word	0xdc3a03fd
 8015cdc:	3feec709 	.word	0x3feec709
 8015ce0:	145b01f5 	.word	0x145b01f5
 8015ce4:	be3e2fe0 	.word	0xbe3e2fe0
 8015ce8:	00000000 	.word	0x00000000
 8015cec:	3ff00000 	.word	0x3ff00000
 8015cf0:	43400000 	.word	0x43400000
 8015cf4:	0003988e 	.word	0x0003988e
 8015cf8:	000bb679 	.word	0x000bb679
 8015cfc:	08016a30 	.word	0x08016a30
 8015d00:	3ff00000 	.word	0x3ff00000
 8015d04:	40080000 	.word	0x40080000
 8015d08:	08016a50 	.word	0x08016a50
 8015d0c:	08016a40 	.word	0x08016a40
 8015d10:	a3b4      	add	r3, pc, #720	; (adr r3, 8015fe4 <__ieee754_pow+0xa14>)
 8015d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d16:	4640      	mov	r0, r8
 8015d18:	4649      	mov	r1, r9
 8015d1a:	f7ea fad7 	bl	80002cc <__adddf3>
 8015d1e:	4622      	mov	r2, r4
 8015d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d24:	462b      	mov	r3, r5
 8015d26:	4630      	mov	r0, r6
 8015d28:	4639      	mov	r1, r7
 8015d2a:	f7ea facd 	bl	80002c8 <__aeabi_dsub>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	460b      	mov	r3, r1
 8015d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015d36:	f7ea ff0f 	bl	8000b58 <__aeabi_dcmpgt>
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	f47f adfe 	bne.w	801593c <__ieee754_pow+0x36c>
 8015d40:	4aa3      	ldr	r2, [pc, #652]	; (8015fd0 <__ieee754_pow+0xa00>)
 8015d42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015d46:	4293      	cmp	r3, r2
 8015d48:	f340 810a 	ble.w	8015f60 <__ieee754_pow+0x990>
 8015d4c:	151b      	asrs	r3, r3, #20
 8015d4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015d52:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015d56:	fa4a f303 	asr.w	r3, sl, r3
 8015d5a:	445b      	add	r3, fp
 8015d5c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015d60:	4e9c      	ldr	r6, [pc, #624]	; (8015fd4 <__ieee754_pow+0xa04>)
 8015d62:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015d66:	4116      	asrs	r6, r2
 8015d68:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015d6c:	2000      	movs	r0, #0
 8015d6e:	ea23 0106 	bic.w	r1, r3, r6
 8015d72:	f1c2 0214 	rsb	r2, r2, #20
 8015d76:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015d7a:	fa4a fa02 	asr.w	sl, sl, r2
 8015d7e:	f1bb 0f00 	cmp.w	fp, #0
 8015d82:	4602      	mov	r2, r0
 8015d84:	460b      	mov	r3, r1
 8015d86:	4620      	mov	r0, r4
 8015d88:	4629      	mov	r1, r5
 8015d8a:	bfb8      	it	lt
 8015d8c:	f1ca 0a00 	rsblt	sl, sl, #0
 8015d90:	f7ea fa9a 	bl	80002c8 <__aeabi_dsub>
 8015d94:	e9cd 0100 	strd	r0, r1, [sp]
 8015d98:	4642      	mov	r2, r8
 8015d9a:	464b      	mov	r3, r9
 8015d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015da0:	f7ea fa94 	bl	80002cc <__adddf3>
 8015da4:	2000      	movs	r0, #0
 8015da6:	a378      	add	r3, pc, #480	; (adr r3, 8015f88 <__ieee754_pow+0x9b8>)
 8015da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dac:	4604      	mov	r4, r0
 8015dae:	460d      	mov	r5, r1
 8015db0:	f7ea fc42 	bl	8000638 <__aeabi_dmul>
 8015db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015db8:	4606      	mov	r6, r0
 8015dba:	460f      	mov	r7, r1
 8015dbc:	4620      	mov	r0, r4
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	f7ea fa82 	bl	80002c8 <__aeabi_dsub>
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	460b      	mov	r3, r1
 8015dc8:	4640      	mov	r0, r8
 8015dca:	4649      	mov	r1, r9
 8015dcc:	f7ea fa7c 	bl	80002c8 <__aeabi_dsub>
 8015dd0:	a36f      	add	r3, pc, #444	; (adr r3, 8015f90 <__ieee754_pow+0x9c0>)
 8015dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd6:	f7ea fc2f 	bl	8000638 <__aeabi_dmul>
 8015dda:	a36f      	add	r3, pc, #444	; (adr r3, 8015f98 <__ieee754_pow+0x9c8>)
 8015ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de0:	4680      	mov	r8, r0
 8015de2:	4689      	mov	r9, r1
 8015de4:	4620      	mov	r0, r4
 8015de6:	4629      	mov	r1, r5
 8015de8:	f7ea fc26 	bl	8000638 <__aeabi_dmul>
 8015dec:	4602      	mov	r2, r0
 8015dee:	460b      	mov	r3, r1
 8015df0:	4640      	mov	r0, r8
 8015df2:	4649      	mov	r1, r9
 8015df4:	f7ea fa6a 	bl	80002cc <__adddf3>
 8015df8:	4604      	mov	r4, r0
 8015dfa:	460d      	mov	r5, r1
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	460b      	mov	r3, r1
 8015e00:	4630      	mov	r0, r6
 8015e02:	4639      	mov	r1, r7
 8015e04:	f7ea fa62 	bl	80002cc <__adddf3>
 8015e08:	4632      	mov	r2, r6
 8015e0a:	463b      	mov	r3, r7
 8015e0c:	4680      	mov	r8, r0
 8015e0e:	4689      	mov	r9, r1
 8015e10:	f7ea fa5a 	bl	80002c8 <__aeabi_dsub>
 8015e14:	4602      	mov	r2, r0
 8015e16:	460b      	mov	r3, r1
 8015e18:	4620      	mov	r0, r4
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	f7ea fa54 	bl	80002c8 <__aeabi_dsub>
 8015e20:	4642      	mov	r2, r8
 8015e22:	4606      	mov	r6, r0
 8015e24:	460f      	mov	r7, r1
 8015e26:	464b      	mov	r3, r9
 8015e28:	4640      	mov	r0, r8
 8015e2a:	4649      	mov	r1, r9
 8015e2c:	f7ea fc04 	bl	8000638 <__aeabi_dmul>
 8015e30:	a35b      	add	r3, pc, #364	; (adr r3, 8015fa0 <__ieee754_pow+0x9d0>)
 8015e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e36:	4604      	mov	r4, r0
 8015e38:	460d      	mov	r5, r1
 8015e3a:	f7ea fbfd 	bl	8000638 <__aeabi_dmul>
 8015e3e:	a35a      	add	r3, pc, #360	; (adr r3, 8015fa8 <__ieee754_pow+0x9d8>)
 8015e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e44:	f7ea fa40 	bl	80002c8 <__aeabi_dsub>
 8015e48:	4622      	mov	r2, r4
 8015e4a:	462b      	mov	r3, r5
 8015e4c:	f7ea fbf4 	bl	8000638 <__aeabi_dmul>
 8015e50:	a357      	add	r3, pc, #348	; (adr r3, 8015fb0 <__ieee754_pow+0x9e0>)
 8015e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e56:	f7ea fa39 	bl	80002cc <__adddf3>
 8015e5a:	4622      	mov	r2, r4
 8015e5c:	462b      	mov	r3, r5
 8015e5e:	f7ea fbeb 	bl	8000638 <__aeabi_dmul>
 8015e62:	a355      	add	r3, pc, #340	; (adr r3, 8015fb8 <__ieee754_pow+0x9e8>)
 8015e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e68:	f7ea fa2e 	bl	80002c8 <__aeabi_dsub>
 8015e6c:	4622      	mov	r2, r4
 8015e6e:	462b      	mov	r3, r5
 8015e70:	f7ea fbe2 	bl	8000638 <__aeabi_dmul>
 8015e74:	a352      	add	r3, pc, #328	; (adr r3, 8015fc0 <__ieee754_pow+0x9f0>)
 8015e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7a:	f7ea fa27 	bl	80002cc <__adddf3>
 8015e7e:	4622      	mov	r2, r4
 8015e80:	462b      	mov	r3, r5
 8015e82:	f7ea fbd9 	bl	8000638 <__aeabi_dmul>
 8015e86:	4602      	mov	r2, r0
 8015e88:	460b      	mov	r3, r1
 8015e8a:	4640      	mov	r0, r8
 8015e8c:	4649      	mov	r1, r9
 8015e8e:	f7ea fa1b 	bl	80002c8 <__aeabi_dsub>
 8015e92:	4604      	mov	r4, r0
 8015e94:	460d      	mov	r5, r1
 8015e96:	4602      	mov	r2, r0
 8015e98:	460b      	mov	r3, r1
 8015e9a:	4640      	mov	r0, r8
 8015e9c:	4649      	mov	r1, r9
 8015e9e:	f7ea fbcb 	bl	8000638 <__aeabi_dmul>
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	e9cd 0100 	strd	r0, r1, [sp]
 8015ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015eac:	4620      	mov	r0, r4
 8015eae:	4629      	mov	r1, r5
 8015eb0:	f7ea fa0a 	bl	80002c8 <__aeabi_dsub>
 8015eb4:	4602      	mov	r2, r0
 8015eb6:	460b      	mov	r3, r1
 8015eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ebc:	f7ea fce6 	bl	800088c <__aeabi_ddiv>
 8015ec0:	4632      	mov	r2, r6
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	460d      	mov	r5, r1
 8015ec6:	463b      	mov	r3, r7
 8015ec8:	4640      	mov	r0, r8
 8015eca:	4649      	mov	r1, r9
 8015ecc:	f7ea fbb4 	bl	8000638 <__aeabi_dmul>
 8015ed0:	4632      	mov	r2, r6
 8015ed2:	463b      	mov	r3, r7
 8015ed4:	f7ea f9fa 	bl	80002cc <__adddf3>
 8015ed8:	4602      	mov	r2, r0
 8015eda:	460b      	mov	r3, r1
 8015edc:	4620      	mov	r0, r4
 8015ede:	4629      	mov	r1, r5
 8015ee0:	f7ea f9f2 	bl	80002c8 <__aeabi_dsub>
 8015ee4:	4642      	mov	r2, r8
 8015ee6:	464b      	mov	r3, r9
 8015ee8:	f7ea f9ee 	bl	80002c8 <__aeabi_dsub>
 8015eec:	4602      	mov	r2, r0
 8015eee:	460b      	mov	r3, r1
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	4939      	ldr	r1, [pc, #228]	; (8015fd8 <__ieee754_pow+0xa08>)
 8015ef4:	f7ea f9e8 	bl	80002c8 <__aeabi_dsub>
 8015ef8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015efc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015f00:	4602      	mov	r2, r0
 8015f02:	460b      	mov	r3, r1
 8015f04:	da2f      	bge.n	8015f66 <__ieee754_pow+0x996>
 8015f06:	4650      	mov	r0, sl
 8015f08:	ec43 2b10 	vmov	d0, r2, r3
 8015f0c:	f000 f9c0 	bl	8016290 <scalbn>
 8015f10:	ec51 0b10 	vmov	r0, r1, d0
 8015f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015f18:	f7ff bbf1 	b.w	80156fe <__ieee754_pow+0x12e>
 8015f1c:	4b2f      	ldr	r3, [pc, #188]	; (8015fdc <__ieee754_pow+0xa0c>)
 8015f1e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015f22:	429e      	cmp	r6, r3
 8015f24:	f77f af0c 	ble.w	8015d40 <__ieee754_pow+0x770>
 8015f28:	4b2d      	ldr	r3, [pc, #180]	; (8015fe0 <__ieee754_pow+0xa10>)
 8015f2a:	440b      	add	r3, r1
 8015f2c:	4303      	orrs	r3, r0
 8015f2e:	d00b      	beq.n	8015f48 <__ieee754_pow+0x978>
 8015f30:	a325      	add	r3, pc, #148	; (adr r3, 8015fc8 <__ieee754_pow+0x9f8>)
 8015f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f3a:	f7ea fb7d 	bl	8000638 <__aeabi_dmul>
 8015f3e:	a322      	add	r3, pc, #136	; (adr r3, 8015fc8 <__ieee754_pow+0x9f8>)
 8015f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f44:	f7ff bbdb 	b.w	80156fe <__ieee754_pow+0x12e>
 8015f48:	4622      	mov	r2, r4
 8015f4a:	462b      	mov	r3, r5
 8015f4c:	f7ea f9bc 	bl	80002c8 <__aeabi_dsub>
 8015f50:	4642      	mov	r2, r8
 8015f52:	464b      	mov	r3, r9
 8015f54:	f7ea fdf6 	bl	8000b44 <__aeabi_dcmpge>
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	f43f aef1 	beq.w	8015d40 <__ieee754_pow+0x770>
 8015f5e:	e7e7      	b.n	8015f30 <__ieee754_pow+0x960>
 8015f60:	f04f 0a00 	mov.w	sl, #0
 8015f64:	e718      	b.n	8015d98 <__ieee754_pow+0x7c8>
 8015f66:	4621      	mov	r1, r4
 8015f68:	e7d4      	b.n	8015f14 <__ieee754_pow+0x944>
 8015f6a:	2000      	movs	r0, #0
 8015f6c:	491a      	ldr	r1, [pc, #104]	; (8015fd8 <__ieee754_pow+0xa08>)
 8015f6e:	f7ff bb8f 	b.w	8015690 <__ieee754_pow+0xc0>
 8015f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f76:	f7ff bb8b 	b.w	8015690 <__ieee754_pow+0xc0>
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	f7ff bb87 	b.w	8015690 <__ieee754_pow+0xc0>
 8015f82:	4693      	mov	fp, r2
 8015f84:	f7ff bb98 	b.w	80156b8 <__ieee754_pow+0xe8>
 8015f88:	00000000 	.word	0x00000000
 8015f8c:	3fe62e43 	.word	0x3fe62e43
 8015f90:	fefa39ef 	.word	0xfefa39ef
 8015f94:	3fe62e42 	.word	0x3fe62e42
 8015f98:	0ca86c39 	.word	0x0ca86c39
 8015f9c:	be205c61 	.word	0xbe205c61
 8015fa0:	72bea4d0 	.word	0x72bea4d0
 8015fa4:	3e663769 	.word	0x3e663769
 8015fa8:	c5d26bf1 	.word	0xc5d26bf1
 8015fac:	3ebbbd41 	.word	0x3ebbbd41
 8015fb0:	af25de2c 	.word	0xaf25de2c
 8015fb4:	3f11566a 	.word	0x3f11566a
 8015fb8:	16bebd93 	.word	0x16bebd93
 8015fbc:	3f66c16c 	.word	0x3f66c16c
 8015fc0:	5555553e 	.word	0x5555553e
 8015fc4:	3fc55555 	.word	0x3fc55555
 8015fc8:	c2f8f359 	.word	0xc2f8f359
 8015fcc:	01a56e1f 	.word	0x01a56e1f
 8015fd0:	3fe00000 	.word	0x3fe00000
 8015fd4:	000fffff 	.word	0x000fffff
 8015fd8:	3ff00000 	.word	0x3ff00000
 8015fdc:	4090cbff 	.word	0x4090cbff
 8015fe0:	3f6f3400 	.word	0x3f6f3400
 8015fe4:	652b82fe 	.word	0x652b82fe
 8015fe8:	3c971547 	.word	0x3c971547

08015fec <__ieee754_sqrt>:
 8015fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ff0:	4955      	ldr	r1, [pc, #340]	; (8016148 <__ieee754_sqrt+0x15c>)
 8015ff2:	ec55 4b10 	vmov	r4, r5, d0
 8015ff6:	43a9      	bics	r1, r5
 8015ff8:	462b      	mov	r3, r5
 8015ffa:	462a      	mov	r2, r5
 8015ffc:	d112      	bne.n	8016024 <__ieee754_sqrt+0x38>
 8015ffe:	ee10 2a10 	vmov	r2, s0
 8016002:	ee10 0a10 	vmov	r0, s0
 8016006:	4629      	mov	r1, r5
 8016008:	f7ea fb16 	bl	8000638 <__aeabi_dmul>
 801600c:	4602      	mov	r2, r0
 801600e:	460b      	mov	r3, r1
 8016010:	4620      	mov	r0, r4
 8016012:	4629      	mov	r1, r5
 8016014:	f7ea f95a 	bl	80002cc <__adddf3>
 8016018:	4604      	mov	r4, r0
 801601a:	460d      	mov	r5, r1
 801601c:	ec45 4b10 	vmov	d0, r4, r5
 8016020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016024:	2d00      	cmp	r5, #0
 8016026:	ee10 0a10 	vmov	r0, s0
 801602a:	4621      	mov	r1, r4
 801602c:	dc0f      	bgt.n	801604e <__ieee754_sqrt+0x62>
 801602e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016032:	4330      	orrs	r0, r6
 8016034:	d0f2      	beq.n	801601c <__ieee754_sqrt+0x30>
 8016036:	b155      	cbz	r5, 801604e <__ieee754_sqrt+0x62>
 8016038:	ee10 2a10 	vmov	r2, s0
 801603c:	4620      	mov	r0, r4
 801603e:	4629      	mov	r1, r5
 8016040:	f7ea f942 	bl	80002c8 <__aeabi_dsub>
 8016044:	4602      	mov	r2, r0
 8016046:	460b      	mov	r3, r1
 8016048:	f7ea fc20 	bl	800088c <__aeabi_ddiv>
 801604c:	e7e4      	b.n	8016018 <__ieee754_sqrt+0x2c>
 801604e:	151b      	asrs	r3, r3, #20
 8016050:	d073      	beq.n	801613a <__ieee754_sqrt+0x14e>
 8016052:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016056:	07dd      	lsls	r5, r3, #31
 8016058:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801605c:	bf48      	it	mi
 801605e:	0fc8      	lsrmi	r0, r1, #31
 8016060:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016064:	bf44      	itt	mi
 8016066:	0049      	lslmi	r1, r1, #1
 8016068:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801606c:	2500      	movs	r5, #0
 801606e:	1058      	asrs	r0, r3, #1
 8016070:	0fcb      	lsrs	r3, r1, #31
 8016072:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016076:	0049      	lsls	r1, r1, #1
 8016078:	2316      	movs	r3, #22
 801607a:	462c      	mov	r4, r5
 801607c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016080:	19a7      	adds	r7, r4, r6
 8016082:	4297      	cmp	r7, r2
 8016084:	bfde      	ittt	le
 8016086:	19bc      	addle	r4, r7, r6
 8016088:	1bd2      	suble	r2, r2, r7
 801608a:	19ad      	addle	r5, r5, r6
 801608c:	0fcf      	lsrs	r7, r1, #31
 801608e:	3b01      	subs	r3, #1
 8016090:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016094:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016098:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801609c:	d1f0      	bne.n	8016080 <__ieee754_sqrt+0x94>
 801609e:	f04f 0c20 	mov.w	ip, #32
 80160a2:	469e      	mov	lr, r3
 80160a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80160a8:	42a2      	cmp	r2, r4
 80160aa:	eb06 070e 	add.w	r7, r6, lr
 80160ae:	dc02      	bgt.n	80160b6 <__ieee754_sqrt+0xca>
 80160b0:	d112      	bne.n	80160d8 <__ieee754_sqrt+0xec>
 80160b2:	428f      	cmp	r7, r1
 80160b4:	d810      	bhi.n	80160d8 <__ieee754_sqrt+0xec>
 80160b6:	2f00      	cmp	r7, #0
 80160b8:	eb07 0e06 	add.w	lr, r7, r6
 80160bc:	da42      	bge.n	8016144 <__ieee754_sqrt+0x158>
 80160be:	f1be 0f00 	cmp.w	lr, #0
 80160c2:	db3f      	blt.n	8016144 <__ieee754_sqrt+0x158>
 80160c4:	f104 0801 	add.w	r8, r4, #1
 80160c8:	1b12      	subs	r2, r2, r4
 80160ca:	428f      	cmp	r7, r1
 80160cc:	bf88      	it	hi
 80160ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80160d2:	1bc9      	subs	r1, r1, r7
 80160d4:	4433      	add	r3, r6
 80160d6:	4644      	mov	r4, r8
 80160d8:	0052      	lsls	r2, r2, #1
 80160da:	f1bc 0c01 	subs.w	ip, ip, #1
 80160de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80160e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80160e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80160ea:	d1dd      	bne.n	80160a8 <__ieee754_sqrt+0xbc>
 80160ec:	430a      	orrs	r2, r1
 80160ee:	d006      	beq.n	80160fe <__ieee754_sqrt+0x112>
 80160f0:	1c5c      	adds	r4, r3, #1
 80160f2:	bf13      	iteet	ne
 80160f4:	3301      	addne	r3, #1
 80160f6:	3501      	addeq	r5, #1
 80160f8:	4663      	moveq	r3, ip
 80160fa:	f023 0301 	bicne.w	r3, r3, #1
 80160fe:	106a      	asrs	r2, r5, #1
 8016100:	085b      	lsrs	r3, r3, #1
 8016102:	07e9      	lsls	r1, r5, #31
 8016104:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016108:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801610c:	bf48      	it	mi
 801610e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016112:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016116:	461c      	mov	r4, r3
 8016118:	e780      	b.n	801601c <__ieee754_sqrt+0x30>
 801611a:	0aca      	lsrs	r2, r1, #11
 801611c:	3815      	subs	r0, #21
 801611e:	0549      	lsls	r1, r1, #21
 8016120:	2a00      	cmp	r2, #0
 8016122:	d0fa      	beq.n	801611a <__ieee754_sqrt+0x12e>
 8016124:	02d6      	lsls	r6, r2, #11
 8016126:	d50a      	bpl.n	801613e <__ieee754_sqrt+0x152>
 8016128:	f1c3 0420 	rsb	r4, r3, #32
 801612c:	fa21 f404 	lsr.w	r4, r1, r4
 8016130:	1e5d      	subs	r5, r3, #1
 8016132:	4099      	lsls	r1, r3
 8016134:	4322      	orrs	r2, r4
 8016136:	1b43      	subs	r3, r0, r5
 8016138:	e78b      	b.n	8016052 <__ieee754_sqrt+0x66>
 801613a:	4618      	mov	r0, r3
 801613c:	e7f0      	b.n	8016120 <__ieee754_sqrt+0x134>
 801613e:	0052      	lsls	r2, r2, #1
 8016140:	3301      	adds	r3, #1
 8016142:	e7ef      	b.n	8016124 <__ieee754_sqrt+0x138>
 8016144:	46a0      	mov	r8, r4
 8016146:	e7bf      	b.n	80160c8 <__ieee754_sqrt+0xdc>
 8016148:	7ff00000 	.word	0x7ff00000

0801614c <fabs>:
 801614c:	ec51 0b10 	vmov	r0, r1, d0
 8016150:	ee10 2a10 	vmov	r2, s0
 8016154:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016158:	ec43 2b10 	vmov	d0, r2, r3
 801615c:	4770      	bx	lr

0801615e <finite>:
 801615e:	ee10 3a90 	vmov	r3, s1
 8016162:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016166:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801616a:	0fc0      	lsrs	r0, r0, #31
 801616c:	4770      	bx	lr

0801616e <matherr>:
 801616e:	2000      	movs	r0, #0
 8016170:	4770      	bx	lr
 8016172:	0000      	movs	r0, r0
 8016174:	0000      	movs	r0, r0
	...

08016178 <nan>:
 8016178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016180 <nan+0x8>
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop
 8016180:	00000000 	.word	0x00000000
 8016184:	7ff80000 	.word	0x7ff80000

08016188 <rint>:
 8016188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801618a:	ec51 0b10 	vmov	r0, r1, d0
 801618e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016192:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016196:	2e13      	cmp	r6, #19
 8016198:	460b      	mov	r3, r1
 801619a:	ee10 4a10 	vmov	r4, s0
 801619e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80161a2:	dc56      	bgt.n	8016252 <rint+0xca>
 80161a4:	2e00      	cmp	r6, #0
 80161a6:	da2b      	bge.n	8016200 <rint+0x78>
 80161a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80161ac:	4302      	orrs	r2, r0
 80161ae:	d023      	beq.n	80161f8 <rint+0x70>
 80161b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80161b4:	4302      	orrs	r2, r0
 80161b6:	4254      	negs	r4, r2
 80161b8:	4314      	orrs	r4, r2
 80161ba:	0c4b      	lsrs	r3, r1, #17
 80161bc:	0b24      	lsrs	r4, r4, #12
 80161be:	045b      	lsls	r3, r3, #17
 80161c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80161c4:	ea44 0103 	orr.w	r1, r4, r3
 80161c8:	460b      	mov	r3, r1
 80161ca:	492f      	ldr	r1, [pc, #188]	; (8016288 <rint+0x100>)
 80161cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80161d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80161d4:	4602      	mov	r2, r0
 80161d6:	4639      	mov	r1, r7
 80161d8:	4630      	mov	r0, r6
 80161da:	f7ea f877 	bl	80002cc <__adddf3>
 80161de:	e9cd 0100 	strd	r0, r1, [sp]
 80161e2:	463b      	mov	r3, r7
 80161e4:	4632      	mov	r2, r6
 80161e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80161ea:	f7ea f86d 	bl	80002c8 <__aeabi_dsub>
 80161ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80161f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80161f6:	4639      	mov	r1, r7
 80161f8:	ec41 0b10 	vmov	d0, r0, r1
 80161fc:	b003      	add	sp, #12
 80161fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016200:	4a22      	ldr	r2, [pc, #136]	; (801628c <rint+0x104>)
 8016202:	4132      	asrs	r2, r6
 8016204:	ea01 0702 	and.w	r7, r1, r2
 8016208:	4307      	orrs	r7, r0
 801620a:	d0f5      	beq.n	80161f8 <rint+0x70>
 801620c:	0852      	lsrs	r2, r2, #1
 801620e:	4011      	ands	r1, r2
 8016210:	430c      	orrs	r4, r1
 8016212:	d00b      	beq.n	801622c <rint+0xa4>
 8016214:	ea23 0202 	bic.w	r2, r3, r2
 8016218:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801621c:	2e13      	cmp	r6, #19
 801621e:	fa43 f306 	asr.w	r3, r3, r6
 8016222:	bf0c      	ite	eq
 8016224:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016228:	2400      	movne	r4, #0
 801622a:	4313      	orrs	r3, r2
 801622c:	4916      	ldr	r1, [pc, #88]	; (8016288 <rint+0x100>)
 801622e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016232:	4622      	mov	r2, r4
 8016234:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016238:	4620      	mov	r0, r4
 801623a:	4629      	mov	r1, r5
 801623c:	f7ea f846 	bl	80002cc <__adddf3>
 8016240:	e9cd 0100 	strd	r0, r1, [sp]
 8016244:	4622      	mov	r2, r4
 8016246:	462b      	mov	r3, r5
 8016248:	e9dd 0100 	ldrd	r0, r1, [sp]
 801624c:	f7ea f83c 	bl	80002c8 <__aeabi_dsub>
 8016250:	e7d2      	b.n	80161f8 <rint+0x70>
 8016252:	2e33      	cmp	r6, #51	; 0x33
 8016254:	dd07      	ble.n	8016266 <rint+0xde>
 8016256:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801625a:	d1cd      	bne.n	80161f8 <rint+0x70>
 801625c:	ee10 2a10 	vmov	r2, s0
 8016260:	f7ea f834 	bl	80002cc <__adddf3>
 8016264:	e7c8      	b.n	80161f8 <rint+0x70>
 8016266:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801626a:	f04f 32ff 	mov.w	r2, #4294967295
 801626e:	40f2      	lsrs	r2, r6
 8016270:	4210      	tst	r0, r2
 8016272:	d0c1      	beq.n	80161f8 <rint+0x70>
 8016274:	0852      	lsrs	r2, r2, #1
 8016276:	4210      	tst	r0, r2
 8016278:	bf1f      	itttt	ne
 801627a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801627e:	ea20 0202 	bicne.w	r2, r0, r2
 8016282:	4134      	asrne	r4, r6
 8016284:	4314      	orrne	r4, r2
 8016286:	e7d1      	b.n	801622c <rint+0xa4>
 8016288:	08016a60 	.word	0x08016a60
 801628c:	000fffff 	.word	0x000fffff

08016290 <scalbn>:
 8016290:	b570      	push	{r4, r5, r6, lr}
 8016292:	ec55 4b10 	vmov	r4, r5, d0
 8016296:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801629a:	4606      	mov	r6, r0
 801629c:	462b      	mov	r3, r5
 801629e:	b9aa      	cbnz	r2, 80162cc <scalbn+0x3c>
 80162a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80162a4:	4323      	orrs	r3, r4
 80162a6:	d03b      	beq.n	8016320 <scalbn+0x90>
 80162a8:	4b31      	ldr	r3, [pc, #196]	; (8016370 <scalbn+0xe0>)
 80162aa:	4629      	mov	r1, r5
 80162ac:	2200      	movs	r2, #0
 80162ae:	ee10 0a10 	vmov	r0, s0
 80162b2:	f7ea f9c1 	bl	8000638 <__aeabi_dmul>
 80162b6:	4b2f      	ldr	r3, [pc, #188]	; (8016374 <scalbn+0xe4>)
 80162b8:	429e      	cmp	r6, r3
 80162ba:	4604      	mov	r4, r0
 80162bc:	460d      	mov	r5, r1
 80162be:	da12      	bge.n	80162e6 <scalbn+0x56>
 80162c0:	a327      	add	r3, pc, #156	; (adr r3, 8016360 <scalbn+0xd0>)
 80162c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c6:	f7ea f9b7 	bl	8000638 <__aeabi_dmul>
 80162ca:	e009      	b.n	80162e0 <scalbn+0x50>
 80162cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80162d0:	428a      	cmp	r2, r1
 80162d2:	d10c      	bne.n	80162ee <scalbn+0x5e>
 80162d4:	ee10 2a10 	vmov	r2, s0
 80162d8:	4620      	mov	r0, r4
 80162da:	4629      	mov	r1, r5
 80162dc:	f7e9 fff6 	bl	80002cc <__adddf3>
 80162e0:	4604      	mov	r4, r0
 80162e2:	460d      	mov	r5, r1
 80162e4:	e01c      	b.n	8016320 <scalbn+0x90>
 80162e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80162ea:	460b      	mov	r3, r1
 80162ec:	3a36      	subs	r2, #54	; 0x36
 80162ee:	4432      	add	r2, r6
 80162f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80162f4:	428a      	cmp	r2, r1
 80162f6:	dd0b      	ble.n	8016310 <scalbn+0x80>
 80162f8:	ec45 4b11 	vmov	d1, r4, r5
 80162fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016368 <scalbn+0xd8>
 8016300:	f000 f83c 	bl	801637c <copysign>
 8016304:	a318      	add	r3, pc, #96	; (adr r3, 8016368 <scalbn+0xd8>)
 8016306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630a:	ec51 0b10 	vmov	r0, r1, d0
 801630e:	e7da      	b.n	80162c6 <scalbn+0x36>
 8016310:	2a00      	cmp	r2, #0
 8016312:	dd08      	ble.n	8016326 <scalbn+0x96>
 8016314:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016318:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801631c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016320:	ec45 4b10 	vmov	d0, r4, r5
 8016324:	bd70      	pop	{r4, r5, r6, pc}
 8016326:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801632a:	da0d      	bge.n	8016348 <scalbn+0xb8>
 801632c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016330:	429e      	cmp	r6, r3
 8016332:	ec45 4b11 	vmov	d1, r4, r5
 8016336:	dce1      	bgt.n	80162fc <scalbn+0x6c>
 8016338:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016360 <scalbn+0xd0>
 801633c:	f000 f81e 	bl	801637c <copysign>
 8016340:	a307      	add	r3, pc, #28	; (adr r3, 8016360 <scalbn+0xd0>)
 8016342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016346:	e7e0      	b.n	801630a <scalbn+0x7a>
 8016348:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801634c:	3236      	adds	r2, #54	; 0x36
 801634e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016352:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016356:	4620      	mov	r0, r4
 8016358:	4629      	mov	r1, r5
 801635a:	2200      	movs	r2, #0
 801635c:	4b06      	ldr	r3, [pc, #24]	; (8016378 <scalbn+0xe8>)
 801635e:	e7b2      	b.n	80162c6 <scalbn+0x36>
 8016360:	c2f8f359 	.word	0xc2f8f359
 8016364:	01a56e1f 	.word	0x01a56e1f
 8016368:	8800759c 	.word	0x8800759c
 801636c:	7e37e43c 	.word	0x7e37e43c
 8016370:	43500000 	.word	0x43500000
 8016374:	ffff3cb0 	.word	0xffff3cb0
 8016378:	3c900000 	.word	0x3c900000

0801637c <copysign>:
 801637c:	ec51 0b10 	vmov	r0, r1, d0
 8016380:	ee11 0a90 	vmov	r0, s3
 8016384:	ee10 2a10 	vmov	r2, s0
 8016388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801638c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8016390:	ea41 0300 	orr.w	r3, r1, r0
 8016394:	ec43 2b10 	vmov	d0, r2, r3
 8016398:	4770      	bx	lr
	...

0801639c <_init>:
 801639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639e:	bf00      	nop
 80163a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163a2:	bc08      	pop	{r3}
 80163a4:	469e      	mov	lr, r3
 80163a6:	4770      	bx	lr

080163a8 <_fini>:
 80163a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163aa:	bf00      	nop
 80163ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163ae:	bc08      	pop	{r3}
 80163b0:	469e      	mov	lr, r3
 80163b2:	4770      	bx	lr
