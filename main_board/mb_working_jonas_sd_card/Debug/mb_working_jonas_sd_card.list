
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08018168  08018168  00028168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018938  08018938  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08018938  08018938  00028938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018940  08018940  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018940  08018940  00028940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018944  08018944  00028944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08018948  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ec4  200001fc  08018b44  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200170c0  08018b44  000370c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aa97  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071c0  00000000  00000000  0006acc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002660  00000000  00000000  00071e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002318  00000000  00000000  000744e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d131  00000000  00000000  00076800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002778c  00000000  00000000  00083931  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104556  00000000  00000000  000ab0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001af613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7e4  00000000  00000000  001af690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801814c 	.word	0x0801814c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801814c 	.word	0x0801814c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <init_env>:
#include "Sensor_Fusion_Helper/env.h"

void init_env(env *env) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/* init constants */
	env->p_g = PRESSURE_REFERENCE; // ISA reference pressure at sea level [Pa]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <init_env+0x20>)
 8000f84:	601a      	str	r2, [r3, #0]
	env->T_g = 15.0 + T_0; // ISA reference temperature at sea level [K]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <init_env+0x24>)
 8000f8a:	605a      	str	r2, [r3, #4]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	47c5e680 	.word	0x47c5e680
 8000f9c:	43901333 	.word	0x43901333

08000fa0 <mach_number>:
void update_env(env *env, float T) {
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
}

float mach_number(env *env, float V_x) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8000fac:	edd7 7a00 	vldr	s15, [r7]
 8000fb0:	eef0 6ae7 	vabs.f32	s13, s15
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fbe:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b09d      	sub	sp, #116	; 0x74
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f003 fc84 	bl	80048ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f915 	bl	8001210 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 8000fe6:	4b61      	ldr	r3, [pc, #388]	; (800116c <main+0x194>)
 8000fe8:	4a61      	ldr	r2, [pc, #388]	; (8001170 <main+0x198>)
 8000fea:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 8000fec:	4b5f      	ldr	r3, [pc, #380]	; (800116c <main+0x194>)
 8000fee:	4a61      	ldr	r2, [pc, #388]	; (8001174 <main+0x19c>)
 8000ff0:	60da      	str	r2, [r3, #12]
  init_env(&global_env);
 8000ff2:	4861      	ldr	r0, [pc, #388]	; (8001178 <main+0x1a0>)
 8000ff4:	f7ff ffc0 	bl	8000f78 <init_env>
  reset_flight_phase_detection(&global_flight_phase_detection);
 8000ff8:	4860      	ldr	r0, [pc, #384]	; (800117c <main+0x1a4>)
 8000ffa:	f002 fbeb 	bl	80037d4 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fab7 	bl	8001570 <MX_GPIO_Init>
  MX_DMA_Init();
 8001002:	f000 fa8f 	bl	8001524 <MX_DMA_Init>
  MX_SPI3_Init();
 8001006:	f000 fa25 	bl	8001454 <MX_SPI3_Init>
  MX_SPI1_Init();
 800100a:	f000 f9b3 	bl	8001374 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 800100e:	f000 f991 	bl	8001334 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8001012:	f000 f9e7 	bl	80013e4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001016:	f00b ff99 	bl	800cf4c <MX_FATFS_Init>
  MX_UART7_Init();
 800101a:	f000 fa53 	bl	80014c4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 800101e:	f014 fdc5 	bl	8015bac <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001022:	f010 fd85 	bl	8011b30 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Sensor Board 1 Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <main+0x1a8>)
 8001028:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800102c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 8001032:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001036:	4618      	mov	r0, r3
 8001038:	f010 ff4c 	bl	8011ed4 <osMutexNew>
 800103c:	4602      	mov	r2, r0
 800103e:	4b51      	ldr	r3, [pc, #324]	; (8001184 <main+0x1ac>)
 8001040:	601a      	str	r2, [r3, #0]

   /* Sensor Board 2 Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <main+0x1b0>)
 8001044:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 800104e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001052:	4618      	mov	r0, r3
 8001054:	f010 ff3e 	bl	8011ed4 <osMutexNew>
 8001058:	4602      	mov	r2, r0
 800105a:	4b4c      	ldr	r3, [pc, #304]	; (800118c <main+0x1b4>)
 800105c:	601a      	str	r2, [r3, #0]

    /* Sensor Board 3 Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 800105e:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <main+0x1b8>)
 8001060:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 800106a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800106e:	4618      	mov	r0, r3
 8001070:	f010 ff30 	bl	8011ed4 <osMutexNew>
 8001074:	4602      	mov	r2, r0
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <main+0x1bc>)
 8001078:	601a      	str	r2, [r3, #0]

     /* State Estimation Output Mutex */
      const osMutexAttr_t state_est_mutex_attr = {
 800107a:	4b47      	ldr	r3, [pc, #284]	; (8001198 <main+0x1c0>)
 800107c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexPrioInherit,    					 // attr_bits
        NULL,                                     // memory for control block
        0U                                        // size for control block
      };

      state_est_mutex = osMutexNew(&state_est_mutex_attr);
 8001086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108a:	4618      	mov	r0, r3
 800108c:	f010 ff22 	bl	8011ed4 <osMutexNew>
 8001090:	4602      	mov	r2, r0
 8001092:	4b42      	ldr	r3, [pc, #264]	; (800119c <main+0x1c4>)
 8001094:	601a      	str	r2, [r3, #0]

      /* FSM Output Mutex */
       const osMutexAttr_t fsm_mutex_attr = {
 8001096:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <main+0x1c8>)
 8001098:	f107 0420 	add.w	r4, r7, #32
 800109c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800109e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         osMutexPrioInherit,    					 // attr_bits
         NULL,                                     // memory for control block
         0U                                        // size for control block
       };

       fsm_mutex = osMutexNew(&fsm_mutex_attr);
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	4618      	mov	r0, r3
 80010a8:	f010 ff14 	bl	8011ed4 <osMutexNew>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <main+0x1cc>)
 80010b0:	601a      	str	r2, [r3, #0]

       /* Environment Mutex */
        const osMutexAttr_t environment_mutex_attr = {
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <main+0x1d0>)
 80010b4:	f107 0410 	add.w	r4, r7, #16
 80010b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          osMutexPrioInherit,    					 // attr_bits
          NULL,                                     // memory for control block
          0U                                        // size for control block
        };

        environment_mutex = osMutexNew(&environment_mutex_attr);
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4618      	mov	r0, r3
 80010c4:	f010 ff06 	bl	8011ed4 <osMutexNew>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <main+0x1d4>)
 80010cc:	601a      	str	r2, [r3, #0]

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <main+0x1d8>)
 80010d0:	463c      	mov	r4, r7
 80010d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 80010d8:	463b      	mov	r3, r7
 80010da:	4618      	mov	r0, r3
 80010dc:	f010 fefa 	bl	8011ed4 <osMutexNew>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <main+0x1dc>)
 80010e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2196      	movs	r1, #150	; 0x96
 80010ea:	2080      	movs	r0, #128	; 0x80
 80010ec:	f011 f9fc 	bl	80124e8 <osMessageQueueNew>
 80010f0:	4602      	mov	r2, r0
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <main+0x1e0>)
 80010f4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <main+0x1e4>)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4831      	ldr	r0, [pc, #196]	; (80011c0 <main+0x1e8>)
 80010fc:	f010 fdd6 	bl	8011cac <osThreadNew>
 8001100:	4602      	mov	r2, r0
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <main+0x1ec>)
 8001104:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8001106:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <main+0x1f0>)
 8001108:	2100      	movs	r1, #0
 800110a:	4830      	ldr	r0, [pc, #192]	; (80011cc <main+0x1f4>)
 800110c:	f010 fdce 	bl	8011cac <osThreadNew>
 8001110:	4602      	mov	r2, r0
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <main+0x1f8>)
 8001114:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8001116:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <main+0x1fc>)
 8001118:	2100      	movs	r1, #0
 800111a:	482f      	ldr	r0, [pc, #188]	; (80011d8 <main+0x200>)
 800111c:	f010 fdc6 	bl	8011cac <osThreadNew>
 8001120:	4602      	mov	r2, r0
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <main+0x204>)
 8001124:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8001126:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <main+0x208>)
 8001128:	2100      	movs	r1, #0
 800112a:	482e      	ldr	r0, [pc, #184]	; (80011e4 <main+0x20c>)
 800112c:	f010 fdbe 	bl	8011cac <osThreadNew>
 8001130:	4602      	mov	r2, r0
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <main+0x210>)
 8001134:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8001136:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <main+0x214>)
 8001138:	2100      	movs	r1, #0
 800113a:	482d      	ldr	r0, [pc, #180]	; (80011f0 <main+0x218>)
 800113c:	f010 fdb6 	bl	8011cac <osThreadNew>
 8001140:	4602      	mov	r2, r0
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <main+0x21c>)
 8001144:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8001146:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <main+0x220>)
 8001148:	2100      	movs	r1, #0
 800114a:	482c      	ldr	r0, [pc, #176]	; (80011fc <main+0x224>)
 800114c:	f010 fdae 	bl	8011cac <osThreadNew>
 8001150:	4602      	mov	r2, r0
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <main+0x228>)
 8001154:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <main+0x22c>)
 8001158:	2100      	movs	r1, #0
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <main+0x230>)
 800115c:	f010 fda6 	bl	8011cac <osThreadNew>
 8001160:	4602      	mov	r2, r0
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <main+0x234>)
 8001164:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001166:	f010 fd39 	bl	8011bdc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116a:	e7fe      	b.n	800116a <main+0x192>
 800116c:	e0042000 	.word	0xe0042000
 8001170:	07e01bff 	.word	0x07e01bff
 8001174:	00070003 	.word	0x00070003
 8001178:	200002fc 	.word	0x200002fc
 800117c:	2000030c 	.word	0x2000030c
 8001180:	080181d8 	.word	0x080181d8
 8001184:	2000ab80 	.word	0x2000ab80
 8001188:	080181f4 	.word	0x080181f4
 800118c:	20014e8c 	.word	0x20014e8c
 8001190:	08018210 	.word	0x08018210
 8001194:	2000abe4 	.word	0x2000abe4
 8001198:	08018230 	.word	0x08018230
 800119c:	2000abe8 	.word	0x2000abe8
 80011a0:	0801824c 	.word	0x0801824c
 80011a4:	20008878 	.word	0x20008878
 80011a8:	08018270 	.word	0x08018270
 80011ac:	200089c0 	.word	0x200089c0
 80011b0:	0801828c 	.word	0x0801828c
 80011b4:	2000cc48 	.word	0x2000cc48
 80011b8:	20010d6c 	.word	0x20010d6c
 80011bc:	0801870c 	.word	0x0801870c
 80011c0:	0800164d 	.word	0x0800164d
 80011c4:	20008874 	.word	0x20008874
 80011c8:	08018730 	.word	0x08018730
 80011cc:	08004019 	.word	0x08004019
 80011d0:	2000ab7c 	.word	0x2000ab7c
 80011d4:	08018754 	.word	0x08018754
 80011d8:	08003189 	.word	0x08003189
 80011dc:	20014e88 	.word	0x20014e88
 80011e0:	08018778 	.word	0x08018778
 80011e4:	08003e79 	.word	0x08003e79
 80011e8:	20008a48 	.word	0x20008a48
 80011ec:	0801879c 	.word	0x0801879c
 80011f0:	08003af1 	.word	0x08003af1
 80011f4:	20008960 	.word	0x20008960
 80011f8:	080187c0 	.word	0x080187c0
 80011fc:	08003805 	.word	0x08003805
 8001200:	2000ab78 	.word	0x2000ab78
 8001204:	080187e4 	.word	0x080187e4
 8001208:	08003479 	.word	0x08003479
 800120c:	2000ab84 	.word	0x2000ab84

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0b4      	sub	sp, #208	; 0xd0
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f015 fa71 	bl	8016706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2284      	movs	r2, #132	; 0x84
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f015 fa62 	bl	8016706 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <SystemClock_Config+0x118>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a38      	ldr	r2, [pc, #224]	; (8001328 <SystemClock_Config+0x118>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <SystemClock_Config+0x118>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <SystemClock_Config+0x11c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <SystemClock_Config+0x11c>)
 8001264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <SystemClock_Config+0x11c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001276:	2301      	movs	r3, #1
 8001278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800128e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001292:	2304      	movs	r3, #4
 8001294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001298:	23a8      	movs	r3, #168	; 0xa8
 800129a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a4:	2307      	movs	r3, #7
 80012a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fb72 	bl	8006998 <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012ba:	f000 f9e3 	bl	8001684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012e4:	2105      	movs	r1, #5
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 fdfa 	bl	8006ee0 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80012f2:	f000 f9c7 	bl	8001684 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <SystemClock_Config+0x120>)
 80012f8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f006 f810 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800131a:	f000 f9b3 	bl	8001684 <Error_Handler>
  }
}
 800131e:	bf00      	nop
 8001320:	37d0      	adds	r7, #208	; 0xd0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40007000 	.word	0x40007000
 8001330:	00a01000 	.word	0x00a01000

08001334 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_SDMMC1_SD_Init+0x38>)
 800133a:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <MX_SDMMC1_SD_Init+0x3c>)
 800133c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_SDMMC1_SD_Init+0x38>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_SDMMC1_SD_Init+0x38>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_SDMMC1_SD_Init+0x38>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_SDMMC1_SD_Init+0x38>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <MX_SDMMC1_SD_Init+0x38>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <MX_SDMMC1_SD_Init+0x38>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200089c4 	.word	0x200089c4
 8001370:	40012c00 	.word	0x40012c00

08001374 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_SPI1_Init+0x68>)
 800137a:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <MX_SPI1_Init+0x6c>)
 800137c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_SPI1_Init+0x68>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_SPI1_Init+0x68>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_SPI1_Init+0x68>)
 800138c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001390:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_SPI1_Init+0x68>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_SPI1_Init+0x68>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_SPI1_Init+0x68>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <MX_SPI1_Init+0x68>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_SPI1_Init+0x68>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_SPI1_Init+0x68>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_SPI1_Init+0x68>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_SPI1_Init+0x68>)
 80013be:	2200      	movs	r2, #0
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_SPI1_Init+0x68>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_SPI1_Init+0x68>)
 80013ca:	f007 fe5f 	bl	800908c <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80013d4:	f000 f956 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20010d08 	.word	0x20010d08
 80013e0:	40013000 	.word	0x40013000

080013e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_SPI2_Init+0x68>)
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <MX_SPI2_Init+0x6c>)
 80013ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_SPI2_Init+0x68>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_SPI2_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_SPI2_Init+0x68>)
 80013fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001400:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_SPI2_Init+0x68>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_SPI2_Init+0x68>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_SPI2_Init+0x68>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <MX_SPI2_Init+0x68>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_SPI2_Init+0x68>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_SPI2_Init+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_SPI2_Init+0x68>)
 8001428:	2207      	movs	r2, #7
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MX_SPI2_Init+0x68>)
 800142e:	2200      	movs	r2, #0
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_SPI2_Init+0x68>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_SPI2_Init+0x68>)
 800143a:	f007 fe27 	bl	800908c <HAL_SPI_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001444:	f000 f91e 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000887c 	.word	0x2000887c
 8001450:	40003800 	.word	0x40003800

08001454 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_SPI3_Init+0x68>)
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <MX_SPI3_Init+0x6c>)
 800145c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_SPI3_Init+0x68>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_SPI3_Init+0x68>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_SPI3_Init+0x68>)
 800146c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001470:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_SPI3_Init+0x68>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_SPI3_Init+0x68>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_SPI3_Init+0x68>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_SPI3_Init+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_SPI3_Init+0x68>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_SPI3_Init+0x68>)
 8001492:	2200      	movs	r2, #0
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_SPI3_Init+0x68>)
 8001498:	2207      	movs	r2, #7
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_SPI3_Init+0x68>)
 800149e:	2200      	movs	r2, #0
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_SPI3_Init+0x68>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_SPI3_Init+0x68>)
 80014aa:	f007 fdef 	bl	800908c <HAL_SPI_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80014b4:	f000 f8e6 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000aa4c 	.word	0x2000aa4c
 80014c0:	40003c00 	.word	0x40003c00

080014c4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_UART7_Init+0x58>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <MX_UART7_Init+0x5c>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_UART7_Init+0x58>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_UART7_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_UART7_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_UART7_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_UART7_Init+0x58>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_UART7_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_UART7_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_UART7_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_UART7_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_UART7_Init+0x58>)
 8001508:	f008 fe78 	bl	800a1fc <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001512:	f000 f8b7 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200088e0 	.word	0x200088e0
 8001520:	40007800 	.word	0x40007800

08001524 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_DMA_Init+0x48>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <MX_DMA_Init+0x48>)
 8001530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_DMA_Init+0x48>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2105      	movs	r1, #5
 8001546:	203b      	movs	r0, #59	; 0x3b
 8001548:	f003 fad6 	bl	8004af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800154c:	203b      	movs	r0, #59	; 0x3b
 800154e:	f003 faef 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2105      	movs	r1, #5
 8001556:	2045      	movs	r0, #69	; 0x45
 8001558:	f003 face 	bl	8004af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800155c:	2045      	movs	r0, #69	; 0x45
 800155e:	f003 fae7 	bl	8004b30 <HAL_NVIC_EnableIRQ>

}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <MX_GPIO_Init+0xd4>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <MX_GPIO_Init+0xd4>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_GPIO_Init+0xd4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a28      	ldr	r2, [pc, #160]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a22      	ldr	r2, [pc, #136]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_GPIO_Init+0xd4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <MX_GPIO_Init+0xd4>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_GPIO_Init+0xd4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2108      	movs	r1, #8
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <MX_GPIO_Init+0xd8>)
 800161c:	f003 ffe4 	bl	80055e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001620:	2308      	movs	r3, #8
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_GPIO_Init+0xd8>)
 8001638:	f003 fe2c 	bl	8005294 <HAL_GPIO_Init>

}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	; 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40020800 	.word	0x40020800

0800164c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001654:	f014 faaa 	bl	8015bac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f010 fbcd 	bl	8011df8 <osDelay>
 800165e:	e7fb      	b.n	8001658 <StartDefaultTask+0xc>

08001660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001672:	f003 f947 	bl	8004904 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40010000 	.word	0x40010000

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <eye>:
#include "math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8001692:	b490      	push	{r4, r7}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	1e43      	subs	r3, r0, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	f04f 0400 	mov.w	r4, #0
 80016b2:	0154      	lsls	r4, r2, #5
 80016b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016b8:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	e02b      	b.n	8001718 <eye+0x86>
        for(int j = 0; j < dim; j++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e021      	b.n	800170a <eye+0x78>
            if (i == j){
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10d      	bne.n	80016ea <eye+0x58>
				A[i][j] = 1;
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	fb03 f302 	mul.w	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	441a      	add	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e00c      	b.n	8001704 <eye+0x72>
			} else {
				A[i][j] = 0;
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	fb03 f302 	mul.w	r3, r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	441a      	add	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbd9      	blt.n	80016c6 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	3301      	adds	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbcf      	blt.n	80016c0 <eye+0x2e>
			}
        }
    }
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bc90      	pop	{r4, r7}
 8001728:	4770      	bx	lr

0800172a <transpose>:

void transpose(int n, int m, float A[n][m], float A_T[m][n]) {
 800172a:	b4b0      	push	{r4, r5, r7}
 800172c:	b089      	sub	sp, #36	; 0x24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	68b8      	ldr	r0, [r7, #8]
 800173a:	1e43      	subs	r3, r0, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	4603      	mov	r3, r0
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f04f 0400 	mov.w	r4, #0
 800174e:	0154      	lsls	r4, r2, #5
 8001750:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001754:	014b      	lsls	r3, r1, #5
 8001756:	68fd      	ldr	r5, [r7, #12]
 8001758:	1e6b      	subs	r3, r5, #1
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	462b      	mov	r3, r5
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	f04f 0400 	mov.w	r4, #0
 800176c:	0154      	lsls	r4, r2, #5
 800176e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001772:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < n; i++){
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	e022      	b.n	80017c0 <transpose+0x96>
		for(int j = 0; j < m; j++){
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e018      	b.n	80017b2 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8001780:	4602      	mov	r2, r0
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	fb03 f302 	mul.w	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	441a      	add	r2, r3
 800178e:	4629      	mov	r1, r5
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	fb03 f301 	mul.w	r3, r3, r1
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	6839      	ldr	r1, [r7, #0]
 800179a:	4419      	add	r1, r3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < m; j++){
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	3301      	adds	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbe2      	blt.n	8001780 <transpose+0x56>
	for(int i = 0; i < n; i++){
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	3301      	adds	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbd8      	blt.n	800177a <transpose+0x50>
		}
	}
}
 80017c8:	bf00      	nop
 80017ca:	3724      	adds	r7, #36	; 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bcb0      	pop	{r4, r5, r7}
 80017d0:	4770      	bx	lr

080017d2 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 80017d2:	b480      	push	{r7}
 80017d4:	b087      	sub	sp, #28
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e016      	b.n	8001814 <vecadd+0x42>
		c[i] = a[i] + b[i];
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	4413      	add	r3, r2
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbe4      	blt.n	80017e6 <vecadd+0x14>
	}
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e016      	b.n	800186a <vecsub+0x42>
		c[i] = a[i] - b[i];
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	ed93 7a00 	vldr	s14, [r3]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	4413      	add	r3, r2
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbe4      	blt.n	800183c <vecsub+0x14>
	}
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <matadd>:

void matadd(int n, int m, float A[n][m], float B[n][m], float C[n][m]) {
 800187e:	b4f0      	push	{r4, r5, r6, r7}
 8001880:	b08a      	sub	sp, #40	; 0x28
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	1e43      	subs	r3, r0, #1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
 8001892:	4603      	mov	r3, r0
 8001894:	4619      	mov	r1, r3
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	0154      	lsls	r4, r2, #5
 80018a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018a8:	014b      	lsls	r3, r1, #5
 80018aa:	68bd      	ldr	r5, [r7, #8]
 80018ac:	1e6b      	subs	r3, r5, #1
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	462b      	mov	r3, r5
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f04f 0400 	mov.w	r4, #0
 80018c0:	0154      	lsls	r4, r2, #5
 80018c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018c6:	014b      	lsls	r3, r1, #5
 80018c8:	68be      	ldr	r6, [r7, #8]
 80018ca:	1e73      	subs	r3, r6, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	4633      	mov	r3, r6
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	f04f 0400 	mov.w	r4, #0
 80018de:	0154      	lsls	r4, r2, #5
 80018e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e4:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < n; i++){
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e032      	b.n	8001952 <matadd+0xd4>
        for(int j = 0; j < m; j++){
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
 80018f0:	e028      	b.n	8001944 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 80018f2:	4602      	mov	r2, r0
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	fb03 f302 	mul.w	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	441a      	add	r2, r3
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	462a      	mov	r2, r5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	fb03 f302 	mul.w	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	441a      	add	r2, r3
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	4632      	mov	r2, r6
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	fb03 f302 	mul.w	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800192e:	441a      	add	r2, r3
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < m; j++){
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	3301      	adds	r3, #1
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbd2      	blt.n	80018f2 <matadd+0x74>
	for(int i = 0; i < n; i++){
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	429a      	cmp	r2, r3
 8001958:	dbc8      	blt.n	80018ec <matadd+0x6e>
        }
    }
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bcf0      	pop	{r4, r5, r6, r7}
 8001962:	4770      	bx	lr

08001964 <matsub>:

void matsub(int n, int m, float A[n][m], float B[n][m], float C[n][m]) {
 8001964:	b4f0      	push	{r4, r5, r6, r7}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	1e43      	subs	r3, r0, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f04f 0400 	mov.w	r4, #0
 8001988:	0154      	lsls	r4, r2, #5
 800198a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800198e:	014b      	lsls	r3, r1, #5
 8001990:	68bd      	ldr	r5, [r7, #8]
 8001992:	1e6b      	subs	r3, r5, #1
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	462b      	mov	r3, r5
 8001998:	4619      	mov	r1, r3
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	f04f 0400 	mov.w	r4, #0
 80019a6:	0154      	lsls	r4, r2, #5
 80019a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ac:	014b      	lsls	r3, r1, #5
 80019ae:	68be      	ldr	r6, [r7, #8]
 80019b0:	1e73      	subs	r3, r6, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	4633      	mov	r3, r6
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f04f 0400 	mov.w	r4, #0
 80019c4:	0154      	lsls	r4, r2, #5
 80019c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ca:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < n; i++){
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	e032      	b.n	8001a38 <matsub+0xd4>
        for(int j = 0; j < m; j++){
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
 80019d6:	e028      	b.n	8001a2a <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 80019d8:	4602      	mov	r2, r0
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fb03 f302 	mul.w	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	441a      	add	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	462a      	mov	r2, r5
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fb03 f302 	mul.w	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	441a      	add	r2, r3
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	4632      	mov	r2, r6
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fb03 f302 	mul.w	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a14:	441a      	add	r2, r3
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < m; j++){
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	3301      	adds	r3, #1
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	6a3a      	ldr	r2, [r7, #32]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dbd2      	blt.n	80019d8 <matsub+0x74>
	for(int i = 0; i < n; i++){
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbc8      	blt.n	80019d2 <matsub+0x6e>
        }
    }
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bcf0      	pop	{r4, r5, r6, r7}
 8001a48:	4770      	bx	lr

08001a4a <matmul>:

void matmul(int n, int m, int o, float A[n][m], float B[m][o], float C[n][o], bool reset) {
 8001a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4c:	b08d      	sub	sp, #52	; 0x34
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6178      	str	r0, [r7, #20]
 8001a52:	6139      	str	r1, [r7, #16]
 8001a54:	60fa      	str	r2, [r7, #12]
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	693e      	ldr	r6, [r7, #16]
 8001a5a:	1e73      	subs	r3, r6, #1
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	4633      	mov	r3, r6
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	f04f 0400 	mov.w	r4, #0
 8001a6e:	0154      	lsls	r4, r2, #5
 8001a70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a74:	014b      	lsls	r3, r1, #5
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	4613      	mov	r3, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	f04f 0400 	mov.w	r4, #0
 8001a90:	0154      	lsls	r4, r2, #5
 8001a92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a96:	014b      	lsls	r3, r1, #5
 8001a98:	68fd      	ldr	r5, [r7, #12]
 8001a9a:	1e6b      	subs	r3, r5, #1
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	462b      	mov	r3, r5
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	0154      	lsls	r4, r2, #5
 8001ab0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ab4:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001ab6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <matmul+0x88>
		memset(C, 0, n*o*sizeof(C[0][0]));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ace:	f014 fe1a 	bl	8016706 <memset>
	}
	for(int i = 0; i < n; i++){
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	e04a      	b.n	8001b6e <matmul+0x124>
        for(int j = 0; j < o; j++){
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8001adc:	e040      	b.n	8001b60 <matmul+0x116>
            for(int k = 0; k < m; k++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae2:	e036      	b.n	8001b52 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8001ae4:	4632      	mov	r2, r6
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	fb03 f302 	mul.w	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	441a      	add	r2, r3
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	ed93 7a00 	vldr	s14, [r3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	fb03 f302 	mul.w	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b08:	441a      	add	r2, r3
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	462a      	mov	r2, r5
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	fb03 f302 	mul.w	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b24:	441a      	add	r2, r3
 8001b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	462a      	mov	r2, r5
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	fb03 f302 	mul.w	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b3c:	441a      	add	r2, r3
 8001b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < m; k++){
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	3301      	adds	r3, #1
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbc4      	blt.n	8001ae4 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbba      	blt.n	8001ade <matmul+0x94>
	for(int i = 0; i < n; i++){
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbb0      	blt.n	8001ad8 <matmul+0x8e>
            }
        }
    }
}
 8001b76:	bf00      	nop
 8001b78:	3734      	adds	r7, #52	; 0x34
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b7e <matvecprod>:

void matvecprod(int n, int m, float A[n][m], float b[m], float c[n], bool reset) {
 8001b7e:	b5b0      	push	{r4, r5, r7, lr}
 8001b80:	b088      	sub	sp, #32
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	68bd      	ldr	r5, [r7, #8]
 8001b8e:	1e6b      	subs	r3, r5, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	462b      	mov	r3, r5
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	0154      	lsls	r4, r2, #5
 8001ba4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ba8:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001baa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <matvecprod+0x42>
		memset(c, 0, n*sizeof(c[0]));
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2100      	movs	r1, #0
 8001bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bbc:	f014 fda3 	bl	8016706 <memset>
	}
	for(int i = 0; i < n; i++){
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	e02e      	b.n	8001c24 <matvecprod+0xa6>
        for(int j = 0; j < m; j++){
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e024      	b.n	8001c16 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8001bcc:	462a      	mov	r2, r5
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	fb03 f302 	mul.w	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	441a      	add	r2, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	ed93 7a00 	vldr	s14, [r3]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bfa:	4413      	add	r3, r2
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c06:	4413      	add	r3, r2
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < m; j++){
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	3301      	adds	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbd6      	blt.n	8001bcc <matvecprod+0x4e>
	for(int i = 0; i < n; i++){
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbcc      	blt.n	8001bc6 <matvecprod+0x48>
        }
    }
}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bdb0      	pop	{r4, r5, r7, pc}

08001c34 <pinv>:

void pinv(int dim, float lambda, float Matrix[dim][dim], float Inverse[dim][dim]){
 8001c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c38:	b098      	sub	sp, #96	; 0x60
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6178      	str	r0, [r7, #20]
 8001c3e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c42:	60f9      	str	r1, [r7, #12]
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	603a      	str	r2, [r7, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c50:	4613      	mov	r3, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	697e      	ldr	r6, [r7, #20]
 8001c6a:	1e73      	subs	r3, r6, #1
 8001c6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c6e:	4633      	mov	r3, r6
 8001c70:	4619      	mov	r1, r3
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f04f 0400 	mov.w	r4, #0
 8001c7e:	0154      	lsls	r4, r2, #5
 8001c80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c84:	014b      	lsls	r3, r1, #5
 8001c86:	466b      	mov	r3, sp
 8001c88:	469a      	mov	sl, r3

	/* Moore Penrose Pseudoinverse */
	/* pinv = A_T*(A*A_T*lambda^2*eye(size(A)))^-1 */
	float Matrix_T[dim][dim];
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	697d      	ldr	r5, [r7, #20]
 8001c8e:	1e43      	subs	r3, r0, #1
 8001c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c92:	4603      	mov	r3, r0
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f04f 0400 	mov.w	r4, #0
 8001ca2:	0154      	lsls	r4, r2, #5
 8001ca4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca8:	014b      	lsls	r3, r1, #5
 8001caa:	4603      	mov	r3, r0
 8001cac:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001cb0:	1e6b      	subs	r3, r5, #1
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	f04f 0400 	mov.w	r4, #0
 8001cc2:	fb03 fe02 	mul.w	lr, r3, r2
 8001cc6:	fb01 fc04 	mul.w	ip, r1, r4
 8001cca:	44f4      	add	ip, lr
 8001ccc:	fba1 3403 	umull	r3, r4, r1, r3
 8001cd0:	eb0c 0204 	add.w	r2, ip, r4
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	0162      	lsls	r2, r4, #5
 8001ce0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001ce4:	0159      	lsls	r1, r3, #5
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	462b      	mov	r3, r5
 8001cf0:	f04f 0400 	mov.w	r4, #0
 8001cf4:	fb03 fe02 	mul.w	lr, r3, r2
 8001cf8:	fb01 fc04 	mul.w	ip, r1, r4
 8001cfc:	44f4      	add	ip, lr
 8001cfe:	fba1 3403 	umull	r3, r4, r1, r3
 8001d02:	eb0c 0204 	add.w	r2, ip, r4
 8001d06:	4614      	mov	r4, r2
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	0162      	lsls	r2, r4, #5
 8001d12:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001d16:	0159      	lsls	r1, r3, #5
 8001d18:	4603      	mov	r3, r0
 8001d1a:	462a      	mov	r2, r5
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	3303      	adds	r3, #3
 8001d24:	3307      	adds	r3, #7
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d2e:	466b      	mov	r3, sp
 8001d30:	3303      	adds	r3, #3
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
	memset(Matrix_T, 0, dim*dim);
 8001d38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	2100      	movs	r1, #0
 8001d46:	f014 fcde 	bl	8016706 <memset>
	float Matrix_to_inv[dim][dim];
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	697c      	ldr	r4, [r7, #20]
 8001d4e:	607c      	str	r4, [r7, #4]
 8001d50:	1e43      	subs	r3, r0, #1
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
 8001d54:	4603      	mov	r3, r0
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	f04f 0400 	mov.w	r4, #0
 8001d64:	0154      	lsls	r4, r2, #5
 8001d66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d6a:	014b      	lsls	r3, r1, #5
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	009d      	lsls	r5, r3, #2
 8001d70:	687c      	ldr	r4, [r7, #4]
 8001d72:	4623      	mov	r3, r4
 8001d74:	3b01      	subs	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	607c      	str	r4, [r7, #4]
 8001d82:	4623      	mov	r3, r4
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	fb03 fe02 	mul.w	lr, r3, r2
 8001d8c:	fb01 fc04 	mul.w	ip, r1, r4
 8001d90:	44f4      	add	ip, lr
 8001d92:	fba1 3403 	umull	r3, r4, r1, r3
 8001d96:	eb0c 0204 	add.w	r2, ip, r4
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	0162      	lsls	r2, r4, #5
 8001da6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001daa:	0159      	lsls	r1, r3, #5
 8001dac:	4603      	mov	r3, r0
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f04f 0400 	mov.w	r4, #0
 8001dba:	fb03 fe02 	mul.w	lr, r3, r2
 8001dbe:	fb01 fc04 	mul.w	ip, r1, r4
 8001dc2:	44f4      	add	ip, lr
 8001dc4:	fba1 3403 	umull	r3, r4, r1, r3
 8001dc8:	eb0c 0204 	add.w	r2, ip, r4
 8001dcc:	4614      	mov	r4, r2
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	0162      	lsls	r2, r4, #5
 8001dd8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001ddc:	0159      	lsls	r1, r3, #5
 8001dde:	4603      	mov	r3, r0
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3303      	adds	r3, #3
 8001dea:	3307      	adds	r3, #7
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	ebad 0d03 	sub.w	sp, sp, r3
 8001df4:	466b      	mov	r3, sp
 8001df6:	3303      	adds	r3, #3
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
	memset(Matrix_to_inv, 0, dim*dim);
 8001dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f014 fc7b 	bl	8016706 <memset>
	float First_Inverse[dim][dim];
 8001e10:	6978      	ldr	r0, [r7, #20]
 8001e12:	697c      	ldr	r4, [r7, #20]
 8001e14:	607c      	str	r4, [r7, #4]
 8001e16:	1e43      	subs	r3, r0, #1
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	f04f 0400 	mov.w	r4, #0
 8001e2a:	0154      	lsls	r4, r2, #5
 8001e2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e30:	014b      	lsls	r3, r1, #5
 8001e32:	4603      	mov	r3, r0
 8001e34:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001e38:	687c      	ldr	r4, [r7, #4]
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	4603      	mov	r3, r0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	607c      	str	r4, [r7, #4]
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	f04f 0400 	mov.w	r4, #0
 8001e50:	fb03 fe02 	mul.w	lr, r3, r2
 8001e54:	fb01 fc04 	mul.w	ip, r1, r4
 8001e58:	44f4      	add	ip, lr
 8001e5a:	fba1 3403 	umull	r3, r4, r1, r3
 8001e5e:	eb0c 0204 	add.w	r2, ip, r4
 8001e62:	4614      	mov	r4, r2
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	0162      	lsls	r2, r4, #5
 8001e6e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	4603      	mov	r3, r0
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f04f 0400 	mov.w	r4, #0
 8001e82:	fb03 fe02 	mul.w	lr, r3, r2
 8001e86:	fb01 fc04 	mul.w	ip, r1, r4
 8001e8a:	44f4      	add	ip, lr
 8001e8c:	fba1 3403 	umull	r3, r4, r1, r3
 8001e90:	eb0c 0204 	add.w	r2, ip, r4
 8001e94:	4614      	mov	r4, r2
 8001e96:	f04f 0100 	mov.w	r1, #0
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	0162      	lsls	r2, r4, #5
 8001ea0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001ea4:	0159      	lsls	r1, r3, #5
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	ebad 0d03 	sub.w	sp, sp, r3
 8001ebc:	466b      	mov	r3, sp
 8001ebe:	3303      	adds	r3, #3
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
	memset(First_Inverse, 0, dim*dim);
 8001ec6:	69f8      	ldr	r0, [r7, #28]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f014 fc17 	bl	8016706 <memset>

	transpose(dim, dim, Matrix, Matrix_T);
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	6979      	ldr	r1, [r7, #20]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff fc23 	bl	800172a <transpose>

	/* Calculate the Matrix to be inversed A*A_T*lambda^2*eye(size(A))*/
	for(int j = 0; j < dim; j++){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee8:	e06a      	b.n	8001fc0 <pinv+0x38c>
		for(int i = 0; i < dim; i++){
 8001eea:	2300      	movs	r3, #0
 8001eec:	643b      	str	r3, [r7, #64]	; 0x40
 8001eee:	e060      	b.n	8001fb2 <pinv+0x37e>
			for(int k = 0; k < dim; k++){
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef4:	e056      	b.n	8001fa4 <pinv+0x370>
				Matrix_to_inv[j][i] +=  Matrix[j][k] * Matrix_T[k][i];
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efa:	fb03 f302 	mul.w	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	441a      	add	r2, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8001f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f16:	fb01 f103 	mul.w	r1, r1, r3
 8001f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1c:	440b      	add	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2a:	08ab      	lsrs	r3, r5, #2
 8001f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f30:	fb01 f103 	mul.w	r1, r1, r3
 8001f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f36:	440b      	add	r3, r1
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	08ab      	lsrs	r3, r5, #2
 8001f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f4a:	fb01 f103 	mul.w	r1, r1, r3
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f50:	440b      	add	r3, r1
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	edc3 7a00 	vstr	s15, [r3]
				if(i == j){
 8001f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11d      	bne.n	8001f9e <pinv+0x36a>
					Matrix_to_inv[j][i] += lambda * lambda;
 8001f62:	08ab      	lsrs	r3, r5, #2
 8001f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f68:	fb01 f103 	mul.w	r1, r1, r3
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	440b      	add	r3, r1
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	ed93 7a00 	vldr	s14, [r3]
 8001f78:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	08ab      	lsrs	r3, r5, #2
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f8e:	fb01 f103 	mul.w	r1, r1, r3
 8001f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f94:	440b      	add	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < dim; k++){
 8001f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dba4      	blt.n	8001ef6 <pinv+0x2c2>
		for(int i = 0; i < dim; i++){
 8001fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fae:	3301      	adds	r3, #1
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	db9a      	blt.n	8001ef0 <pinv+0x2bc>
	for(int j = 0; j < dim; j++){
 8001fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	db90      	blt.n	8001eea <pinv+0x2b6>
			}
		}
	}

	/* Calculate inverse */
	cofactor(dim, Matrix_to_inv, First_Inverse, dim);
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	6979      	ldr	r1, [r7, #20]
 8001fce:	ee07 1a90 	vmov	s15, r1
 8001fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fda:	4619      	mov	r1, r3
 8001fdc:	6978      	ldr	r0, [r7, #20]
 8001fde:	f000 f993 	bl	8002308 <cofactor>
	for(int j = 0; j < dim; j++){
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fe6:	e04a      	b.n	800207e <pinv+0x44a>
		for(int i = 0; i < dim; i++){
 8001fe8:	2300      	movs	r3, #0
 8001fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fec:	e040      	b.n	8002070 <pinv+0x43c>
			for(int k = 0; k < dim; k++){
 8001fee:	2300      	movs	r3, #0
 8001ff0:	653b      	str	r3, [r7, #80]	; 0x50
 8001ff2:	e036      	b.n	8002062 <pinv+0x42e>
				Inverse[j][i] +=  Matrix_T[j][k] * First_Inverse[k][i];
 8001ff4:	4632      	mov	r2, r6
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff8:	fb03 f302 	mul.w	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	441a      	add	r2, r3
 8002002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	ed93 7a00 	vldr	s14, [r3]
 800200c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002012:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002014:	fb01 f103 	mul.w	r1, r1, r3
 8002018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201a:	440b      	add	r3, r1
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	edd3 6a00 	vldr	s13, [r3]
 8002024:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800202c:	fb01 f103 	mul.w	r1, r1, r3
 8002030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002032:	440b      	add	r3, r1
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002040:	4632      	mov	r2, r6
 8002042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002044:	fb03 f302 	mul.w	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	441a      	add	r2, r3
 800204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < dim; k++){
 800205c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205e:	3301      	adds	r3, #1
 8002060:	653b      	str	r3, [r7, #80]	; 0x50
 8002062:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbc4      	blt.n	8001ff4 <pinv+0x3c0>
		for(int i = 0; i < dim; i++){
 800206a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206c:	3301      	adds	r3, #1
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbba      	blt.n	8001fee <pinv+0x3ba>
	for(int j = 0; j < dim; j++){
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207a:	3301      	adds	r3, #1
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
 800207e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	429a      	cmp	r2, r3
 8002084:	dbb0      	blt.n	8001fe8 <pinv+0x3b4>
 8002086:	46d5      	mov	sp, sl
			}
		}
	}
}
 8002088:	bf00      	nop
 800208a:	3760      	adds	r7, #96	; 0x60
 800208c:	46bd      	mov	sp, r7
 800208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002092 <determinant>:

/*For calculating Determinant of the Matrix */
float determinant(int dim, float a[dim][dim], float size)
{
 8002092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002096:	ed2d 8b02 	vpush	{d8}
 800209a:	b091      	sub	sp, #68	; 0x44
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	ed87 0a01 	vstr	s0, [r7, #4]
float determinant(int dim, float a[dim][dim], float size)
 80020a6:	68fe      	ldr	r6, [r7, #12]
 80020a8:	1e73      	subs	r3, r6, #1
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	4633      	mov	r3, r6
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f04f 0400 	mov.w	r4, #0
 80020bc:	0154      	lsls	r4, r2, #5
 80020be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020c2:	014b      	lsls	r3, r1, #5
{
 80020c4:	466b      	mov	r3, sp
 80020c6:	4699      	mov	r9, r3
	float s = 1, det = 0, b[dim][dim];
 80020c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	68fd      	ldr	r5, [r7, #12]
 80020d8:	1e43      	subs	r3, r0, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f04f 0400 	mov.w	r4, #0
 80020ec:	0154      	lsls	r4, r2, #5
 80020ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020f2:	014b      	lsls	r3, r1, #5
 80020f4:	4603      	mov	r3, r0
 80020f6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80020fa:	1e6b      	subs	r3, r5, #1
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	462b      	mov	r3, r5
 8002108:	f04f 0400 	mov.w	r4, #0
 800210c:	fb03 fe02 	mul.w	lr, r3, r2
 8002110:	fb01 fc04 	mul.w	ip, r1, r4
 8002114:	44f4      	add	ip, lr
 8002116:	fba1 3403 	umull	r3, r4, r1, r3
 800211a:	eb0c 0204 	add.w	r2, ip, r4
 800211e:	4614      	mov	r4, r2
 8002120:	f04f 0100 	mov.w	r1, #0
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	0162      	lsls	r2, r4, #5
 800212a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800212e:	0159      	lsls	r1, r3, #5
 8002130:	4603      	mov	r3, r0
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	462b      	mov	r3, r5
 800213a:	f04f 0400 	mov.w	r4, #0
 800213e:	fb03 fe02 	mul.w	lr, r3, r2
 8002142:	fb01 fc04 	mul.w	ip, r1, r4
 8002146:	44f4      	add	ip, lr
 8002148:	fba1 3403 	umull	r3, r4, r1, r3
 800214c:	eb0c 0204 	add.w	r2, ip, r4
 8002150:	4614      	mov	r4, r2
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	0162      	lsls	r2, r4, #5
 800215c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002160:	0159      	lsls	r1, r3, #5
 8002162:	4603      	mov	r3, r0
 8002164:	462a      	mov	r2, r5
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3303      	adds	r3, #3
 800216e:	3307      	adds	r3, #7
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	ebad 0d03 	sub.w	sp, sp, r3
 8002178:	466b      	mov	r3, sp
 800217a:	3303      	adds	r3, #3
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	617b      	str	r3, [r7, #20]
	int i, j, m, n, c;
	if (size == 1)
 8002182:	edd7 7a01 	vldr	s15, [r7, #4]
 8002186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800218a:	eef4 7a47 	vcmp.f32	s15, s14
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	d102      	bne.n	800219a <determinant+0x108>
	{
		return (a[0][0]);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	e0a8      	b.n	80022ec <determinant+0x25a>
	}
	else
	{
		det = 0;
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
		for (c = 0; c < size; c++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a4:	e094      	b.n	80022d0 <determinant+0x23e>
		{
			m = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
			n = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
			for (i = 0;i < size; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b2:	e057      	b.n	8002264 <determinant+0x1d2>
			{
				for (j = 0 ;j < size; j++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
 80021b8:	e045      	b.n	8002246 <determinant+0x1b4>
				{
					b[i][j] = 0;
 80021ba:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021c2:	fb01 f103 	mul.w	r1, r1, r3
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c8:	440b      	add	r3, r1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d032      	beq.n	8002240 <determinant+0x1ae>
 80021da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021de:	429a      	cmp	r2, r3
 80021e0:	d02e      	beq.n	8002240 <determinant+0x1ae>
					{
						b[m][n] = a[i][j];
 80021e2:	4632      	mov	r2, r6
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	fb03 f302 	mul.w	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	18d1      	adds	r1, r2, r3
 80021f0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80021f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	440a      	add	r2, r1
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	6979      	ldr	r1, [r7, #20]
 80021fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002200:	fb00 f003 	mul.w	r0, r0, r3
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	4403      	add	r3, r0
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	601a      	str	r2, [r3, #0]
						if (n < (size - 2))
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002218:	edd7 7a01 	vldr	s15, [r7, #4]
 800221c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002220:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	d503      	bpl.n	8002236 <determinant+0x1a4>
							n++;
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002230:	3301      	adds	r3, #1
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
 8002234:	e004      	b.n	8002240 <determinant+0x1ae>
						else
						{
							n = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
							m++;
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223c:	3301      	adds	r3, #1
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
				for (j = 0 ;j < size; j++)
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	3301      	adds	r3, #1
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002250:	ed97 7a01 	vldr	s14, [r7, #4]
 8002254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	dcad      	bgt.n	80021ba <determinant+0x128>
			for (i = 0;i < size; i++)
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	3301      	adds	r3, #1
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	dc9b      	bgt.n	80021b4 <determinant+0x122>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(dim, b, size - 1));
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	ed93 8a00 	vldr	s16, [r3]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	edd7 7a01 	vldr	s15, [r7, #4]
 800228e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002296:	eeb0 0a67 	vmov.f32	s0, s15
 800229a:	4619      	mov	r1, r3
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7ff fef8 	bl	8002092 <determinant>
 80022a2:	eef0 7a40 	vmov.f32	s15, s0
 80022a6:	ee28 7a27 	vmul.f32	s14, s16, s15
 80022aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80022b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			s = -1 * s;
 80022be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022c2:	eef1 7a67 	vneg.f32	s15, s15
 80022c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (c = 0; c < size; c++)
 80022ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022cc:	3301      	adds	r3, #1
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022da:	ed97 7a01 	vldr	s14, [r7, #4]
 80022de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	f73f af5e 	bgt.w	80021a6 <determinant+0x114>
		}
	}

	return (det);
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	46cd      	mov	sp, r9
 80022ee:	ee07 3a90 	vmov	s15, r3
}
 80022f2:	eeb0 0a67 	vmov.f32	s0, s15
 80022f6:	3744      	adds	r7, #68	; 0x44
 80022f8:	46bd      	mov	sp, r7
 80022fa:	ecbd 8b02 	vpop	{d8}
 80022fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002302:	0000      	movs	r0, r0
 8002304:	0000      	movs	r0, r0
	...

08002308 <cofactor>:

void cofactor(int dim, float num[dim][dim], float inverse[dim][dim], float size)
{
 8002308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800230c:	ed2d 8b02 	vpush	{d8}
 8002310:	b092      	sub	sp, #72	; 0x48
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	ed87 0a00 	vstr	s0, [r7]
void cofactor(int dim, float num[dim][dim], float inverse[dim][dim], float size)
 800231e:	68fe      	ldr	r6, [r7, #12]
 8002320:	1e73      	subs	r3, r6, #1
 8002322:	643b      	str	r3, [r7, #64]	; 0x40
 8002324:	4633      	mov	r3, r6
 8002326:	4619      	mov	r1, r3
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	f04f 0400 	mov.w	r4, #0
 8002334:	0154      	lsls	r4, r2, #5
 8002336:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800233a:	014b      	lsls	r3, r1, #5
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e5a      	subs	r2, r3, #1
 8002340:	647a      	str	r2, [r7, #68]	; 0x44
 8002342:	4619      	mov	r1, r3
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	0154      	lsls	r4, r2, #5
 8002352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002356:	014b      	lsls	r3, r1, #5
{
 8002358:	466b      	mov	r3, sp
 800235a:	469a      	mov	sl, r3
	float b[dim][dim], fac[dim][dim];
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	68fd      	ldr	r5, [r7, #12]
 8002360:	1e43      	subs	r3, r0, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	4603      	mov	r3, r0
 8002366:	4619      	mov	r1, r3
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	f04f 0400 	mov.w	r4, #0
 8002374:	0154      	lsls	r4, r2, #5
 8002376:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800237a:	014b      	lsls	r3, r1, #5
 800237c:	4603      	mov	r3, r0
 800237e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002382:	1e6b      	subs	r3, r5, #1
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	4603      	mov	r3, r0
 8002388:	4619      	mov	r1, r3
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	462b      	mov	r3, r5
 8002390:	f04f 0400 	mov.w	r4, #0
 8002394:	fb03 fe02 	mul.w	lr, r3, r2
 8002398:	fb01 fc04 	mul.w	ip, r1, r4
 800239c:	44f4      	add	ip, lr
 800239e:	fba1 3403 	umull	r3, r4, r1, r3
 80023a2:	eb0c 0204 	add.w	r2, ip, r4
 80023a6:	4614      	mov	r4, r2
 80023a8:	f04f 0100 	mov.w	r1, #0
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	0162      	lsls	r2, r4, #5
 80023b2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80023b6:	0159      	lsls	r1, r3, #5
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	462b      	mov	r3, r5
 80023c2:	f04f 0400 	mov.w	r4, #0
 80023c6:	fb03 fe02 	mul.w	lr, r3, r2
 80023ca:	fb01 fc04 	mul.w	ip, r1, r4
 80023ce:	44f4      	add	ip, lr
 80023d0:	fba1 3403 	umull	r3, r4, r1, r3
 80023d4:	eb0c 0204 	add.w	r2, ip, r4
 80023d8:	4614      	mov	r4, r2
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	0162      	lsls	r2, r4, #5
 80023e4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80023e8:	0159      	lsls	r1, r3, #5
 80023ea:	4603      	mov	r3, r0
 80023ec:	462a      	mov	r2, r5
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3303      	adds	r3, #3
 80023f6:	3307      	adds	r3, #7
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	ebad 0d03 	sub.w	sp, sp, r3
 8002400:	466b      	mov	r3, sp
 8002402:	3303      	adds	r3, #3
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	68fd      	ldr	r5, [r7, #12]
 800240e:	1e43      	subs	r3, r0, #1
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	0154      	lsls	r4, r2, #5
 8002424:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002428:	014b      	lsls	r3, r1, #5
 800242a:	4603      	mov	r3, r0
 800242c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8002430:	1e6b      	subs	r3, r5, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	462b      	mov	r3, r5
 800243e:	f04f 0400 	mov.w	r4, #0
 8002442:	fb03 fe02 	mul.w	lr, r3, r2
 8002446:	fb01 fc04 	mul.w	ip, r1, r4
 800244a:	44f4      	add	ip, lr
 800244c:	fba1 3403 	umull	r3, r4, r1, r3
 8002450:	eb0c 0204 	add.w	r2, ip, r4
 8002454:	4614      	mov	r4, r2
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	0162      	lsls	r2, r4, #5
 8002460:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002464:	0159      	lsls	r1, r3, #5
 8002466:	4603      	mov	r3, r0
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	462b      	mov	r3, r5
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	fb03 fe02 	mul.w	lr, r3, r2
 8002478:	fb01 fc04 	mul.w	ip, r1, r4
 800247c:	44f4      	add	ip, lr
 800247e:	fba1 3403 	umull	r3, r4, r1, r3
 8002482:	eb0c 0204 	add.w	r2, ip, r4
 8002486:	4614      	mov	r4, r2
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	0162      	lsls	r2, r4, #5
 8002492:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002496:	0159      	lsls	r1, r3, #5
 8002498:	4603      	mov	r3, r0
 800249a:	462a      	mov	r2, r5
 800249c:	fb02 f303 	mul.w	r3, r2, r3
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	3303      	adds	r3, #3
 80024a4:	3307      	adds	r3, #7
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	ebad 0d03 	sub.w	sp, sp, r3
 80024ae:	466b      	mov	r3, sp
 80024b0:	3303      	adds	r3, #3
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
	int p, q, m, n, i, j;
	for (q = 0;q < size; q++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024bc:	e0b3      	b.n	8002626 <cofactor+0x31e>
	{
		for (p = 0;p < size; p++)
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c2:	e0a0      	b.n	8002606 <cofactor+0x2fe>
		{
			m = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
			n = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
			for (i = 0;i < size; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d0:	e04b      	b.n	800256a <cofactor+0x262>
			{
				for (j = 0;j < size; j++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d6:	e039      	b.n	800254c <cofactor+0x244>
				{
					if (i != q && j != p)
 80024d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	429a      	cmp	r2, r3
 80024de:	d032      	beq.n	8002546 <cofactor+0x23e>
 80024e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d02e      	beq.n	8002546 <cofactor+0x23e>
					{
						b[m][n] = num[i][j];
 80024e8:	4632      	mov	r2, r6
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	fb03 f302 	mul.w	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	18d1      	adds	r1, r2, r3
 80024f6:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80024fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	440a      	add	r2, r1
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	69f9      	ldr	r1, [r7, #28]
 8002504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002506:	fb00 f003 	mul.w	r0, r0, r3
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	4403      	add	r3, r0
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	601a      	str	r2, [r3, #0]
						if (n < (size - 2))
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251e:	edd7 7a00 	vldr	s15, [r7]
 8002522:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002526:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	d503      	bpl.n	800253c <cofactor+0x234>
							n++;
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	3301      	adds	r3, #1
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	e004      	b.n	8002546 <cofactor+0x23e>
						else
						{
							n = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
							m++;
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	3301      	adds	r3, #1
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
				for (j = 0;j < size; j++)
 8002546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002548:	3301      	adds	r3, #1
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	ed97 7a00 	vldr	s14, [r7]
 800255a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	dcb9      	bgt.n	80024d8 <cofactor+0x1d0>
			for (i = 0;i < size; i++)
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	3301      	adds	r3, #1
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002574:	ed97 7a00 	vldr	s14, [r7]
 8002578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	dca7      	bgt.n	80024d2 <cofactor+0x1ca>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(dim, b, size - 1);
 8002582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	4413      	add	r3, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ffeb 	bl	8000564 <__aeabi_i2d>
 800258e:	4603      	mov	r3, r0
 8002590:	460c      	mov	r4, r1
 8002592:	ec44 3b11 	vmov	d1, r3, r4
 8002596:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8002660 <cofactor+0x358>
 800259a:	f014 fd81 	bl	80170a0 <pow>
 800259e:	eeb0 8a40 	vmov.f32	s16, s0
 80025a2:	eef0 8a60 	vmov.f32	s17, s1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	edd7 7a00 	vldr	s15, [r7]
 80025ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025b4:	eeb0 0a67 	vmov.f32	s0, s15
 80025b8:	4619      	mov	r1, r3
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f7ff fd69 	bl	8002092 <determinant>
 80025c0:	ee10 3a10 	vmov	r3, s0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ffdf 	bl	8000588 <__aeabi_f2d>
 80025ca:	4603      	mov	r3, r0
 80025cc:	460c      	mov	r4, r1
 80025ce:	461a      	mov	r2, r3
 80025d0:	4623      	mov	r3, r4
 80025d2:	ec51 0b18 	vmov	r0, r1, d8
 80025d6:	f7fe f82f 	bl	8000638 <__aeabi_dmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	460c      	mov	r4, r1
 80025de:	461a      	mov	r2, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	ea4f 0499 	mov.w	r4, r9, lsr #2
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe faf5 	bl	8000bd8 <__aeabi_d2f>
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	fb03 f104 	mul.w	r1, r3, r4
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	440b      	add	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	6018      	str	r0, [r3, #0]
		for (p = 0;p < size; p++)
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	3301      	adds	r3, #1
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002610:	ed97 7a00 	vldr	s14, [r7]
 8002614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	f73f af52 	bgt.w	80024c4 <cofactor+0x1bc>
	for (q = 0;q < size; q++)
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	3301      	adds	r3, #1
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	ee07 3a90 	vmov	s15, r3
 800262c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002630:	ed97 7a00 	vldr	s14, [r7]
 8002634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263c:	f73f af3f 	bgt.w	80024be <cofactor+0x1b6>
		}
	}
	pinv_transpose(dim, inverse, num, fac, size);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	ed97 0a00 	vldr	s0, [r7]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f80c 	bl	8002668 <pinv_transpose>
 8002650:	46d5      	mov	sp, sl
}
 8002652:	bf00      	nop
 8002654:	3748      	adds	r7, #72	; 0x48
 8002656:	46bd      	mov	sp, r7
 8002658:	ecbd 8b02 	vpop	{d8}
 800265c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002660:	00000000 	.word	0x00000000
 8002664:	bff00000 	.word	0xbff00000

08002668 <pinv_transpose>:
/*Finding transpose of matrix*/
void pinv_transpose(int dim, float inverse[dim][dim], float num[dim][dim], float fac[dim][dim], float size)
{
 8002668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800266c:	b091      	sub	sp, #68	; 0x44
 800266e:	af00      	add	r7, sp, #0
 8002670:	6178      	str	r0, [r7, #20]
 8002672:	6139      	str	r1, [r7, #16]
 8002674:	60fa      	str	r2, [r7, #12]
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	ed87 0a01 	vstr	s0, [r7, #4]
void pinv_transpose(int dim, float inverse[dim][dim], float num[dim][dim], float fac[dim][dim], float size)
 800267c:	697e      	ldr	r6, [r7, #20]
 800267e:	1e73      	subs	r3, r6, #1
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
 8002682:	4633      	mov	r3, r6
 8002684:	4619      	mov	r1, r3
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f04f 0400 	mov.w	r4, #0
 8002692:	0154      	lsls	r4, r2, #5
 8002694:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002698:	014b      	lsls	r3, r1, #5
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026a0:	4619      	mov	r1, r3
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	0154      	lsls	r4, r2, #5
 80026b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026b4:	014b      	lsls	r3, r1, #5
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	603a      	str	r2, [r7, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	3b01      	subs	r3, #1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c0:	4613      	mov	r3, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	f04f 0400 	mov.w	r4, #0
 80026d0:	0154      	lsls	r4, r2, #5
 80026d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026d6:	014b      	lsls	r3, r1, #5
{
 80026d8:	466b      	mov	r3, sp
 80026da:	4699      	mov	r9, r3
	int i, j;
	float b[dim][dim], d;
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	697d      	ldr	r5, [r7, #20]
 80026e0:	1e43      	subs	r3, r0, #1
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e4:	4603      	mov	r3, r0
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	0154      	lsls	r4, r2, #5
 80026f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026fa:	014b      	lsls	r3, r1, #5
 80026fc:	4603      	mov	r3, r0
 80026fe:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002702:	1e6b      	subs	r3, r5, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	462b      	mov	r3, r5
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	fb03 fe02 	mul.w	lr, r3, r2
 8002718:	fb01 fc04 	mul.w	ip, r1, r4
 800271c:	44f4      	add	ip, lr
 800271e:	fba1 3403 	umull	r3, r4, r1, r3
 8002722:	eb0c 0204 	add.w	r2, ip, r4
 8002726:	4614      	mov	r4, r2
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	0162      	lsls	r2, r4, #5
 8002732:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002736:	0159      	lsls	r1, r3, #5
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	462b      	mov	r3, r5
 8002742:	f04f 0400 	mov.w	r4, #0
 8002746:	fb03 fe02 	mul.w	lr, r3, r2
 800274a:	fb01 fc04 	mul.w	ip, r1, r4
 800274e:	44f4      	add	ip, lr
 8002750:	fba1 3403 	umull	r3, r4, r1, r3
 8002754:	eb0c 0204 	add.w	r2, ip, r4
 8002758:	4614      	mov	r4, r2
 800275a:	f04f 0100 	mov.w	r1, #0
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	0162      	lsls	r2, r4, #5
 8002764:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002768:	0159      	lsls	r1, r3, #5
 800276a:	4603      	mov	r3, r0
 800276c:	462a      	mov	r2, r5
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	3303      	adds	r3, #3
 8002776:	3307      	adds	r3, #7
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	ebad 0d03 	sub.w	sp, sp, r3
 8002780:	466b      	mov	r3, sp
 8002782:	3303      	adds	r3, #3
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	623b      	str	r3, [r7, #32]

	for (i = 0;i < size; i++)
 800278a:	2300      	movs	r3, #0
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
 800278e:	e02a      	b.n	80027e6 <pinv_transpose+0x17e>
	{
		for (j = 0;j < size; j++)
 8002790:	2300      	movs	r3, #0
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
 8002794:	e018      	b.n	80027c8 <pinv_transpose+0x160>
		{
			b[i][j] = fac[j][i];
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	fb03 f302 	mul.w	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	18d1      	adds	r1, r2, r3
 80027a4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80027a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027aa:	0092      	lsls	r2, r2, #2
 80027ac:	440a      	add	r2, r1
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b4:	fb00 f003 	mul.w	r0, r0, r3
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	4403      	add	r3, r0
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	601a      	str	r2, [r3, #0]
		for (j = 0;j < size; j++)
 80027c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c4:	3301      	adds	r3, #1
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
 80027c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80027d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	dcda      	bgt.n	8002796 <pinv_transpose+0x12e>
	for (i = 0;i < size; i++)
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	3301      	adds	r3, #1
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80027f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fc:	dcc8      	bgt.n	8002790 <pinv_transpose+0x128>
		}
	}
	d = determinant(dim, num, size);
 80027fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002802:	68f9      	ldr	r1, [r7, #12]
 8002804:	6978      	ldr	r0, [r7, #20]
 8002806:	f7ff fc44 	bl	8002092 <determinant>
 800280a:	ed87 0a07 	vstr	s0, [r7, #28]

	for (i = 0;i < size; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
 8002812:	e030      	b.n	8002876 <pinv_transpose+0x20e>
	{
		for (j = 0;j < size; j++)
 8002814:	2300      	movs	r3, #0
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
 8002818:	e01e      	b.n	8002858 <pinv_transpose+0x1f0>
		{
			inverse[i][j] = b[i][j] / d;
 800281a:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002822:	fb01 f103 	mul.w	r1, r1, r3
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	440b      	add	r3, r1
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	edd3 6a00 	vldr	s13, [r3]
 8002832:	4632      	mov	r2, r6
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	fb03 f302 	mul.w	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	441a      	add	r2, r3
 8002840:	ed97 7a07 	vldr	s14, [r7, #28]
 8002844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0;j < size; j++)
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	3301      	adds	r3, #1
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
 8002858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002862:	ed97 7a01 	vldr	s14, [r7, #4]
 8002866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	dcd4      	bgt.n	800281a <pinv_transpose+0x1b2>
	for (i = 0;i < size; i++)
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	3301      	adds	r3, #1
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002880:	ed97 7a01 	vldr	s14, [r7, #4]
 8002884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	dcc2      	bgt.n	8002814 <pinv_transpose+0x1ac>
 800288e:	46cd      	mov	sp, r9
		}
	}
}
 8002890:	bf00      	nop
 8002892:	3744      	adds	r7, #68	; 0x44
 8002894:	46bd      	mov	sp, r7
 8002896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800289c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_MspInit+0x4c>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <HAL_MspInit+0x4c>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_MspInit+0x4c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_MspInit+0x4c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_MspInit+0x4c>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_MspInit+0x4c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	210f      	movs	r1, #15
 80028d6:	f06f 0001 	mvn.w	r0, #1
 80028da:	f002 f90d 	bl	8004af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_SD_MspInit+0x1b4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	f040 80c3 	bne.w	8002a96 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002910:	4b64      	ldr	r3, [pc, #400]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	4a63      	ldr	r2, [pc, #396]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 8002916:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800291a:	6453      	str	r3, [r2, #68]	; 0x44
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002928:	4b5e      	ldr	r3, [pc, #376]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a57      	ldr	r2, [pc, #348]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <HAL_SD_MspInit+0x1b8>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002958:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800295c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800296a:	230c      	movs	r3, #12
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	484c      	ldr	r0, [pc, #304]	; (8002aa8 <HAL_SD_MspInit+0x1bc>)
 8002976:	f002 fc8d 	bl	8005294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800297a:	2304      	movs	r3, #4
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800298a:	230c      	movs	r3, #12
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4845      	ldr	r0, [pc, #276]	; (8002aac <HAL_SD_MspInit+0x1c0>)
 8002996:	f002 fc7d 	bl	8005294 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800299a:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 800299c:	4a45      	ldr	r2, [pc, #276]	; (8002ab4 <HAL_SD_MspInit+0x1c8>)
 800299e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029a6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ae:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b4:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ba:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029bc:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ca:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80029cc:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029ce:	2220      	movs	r2, #32
 80029d0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029d8:	4b35      	ldr	r3, [pc, #212]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029da:	2204      	movs	r2, #4
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029e0:	2203      	movs	r2, #3
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80029e4:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80029f4:	482e      	ldr	r0, [pc, #184]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 80029f6:	f002 f8a9 	bl	8004b4c <HAL_DMA_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8002a00:	f7fe fe40 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_SD_MspInit+0x1c4>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a12:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_SD_MspInit+0x1d0>)
 8002a14:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a1c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a20:	2240      	movs	r2, #64	; 0x40
 8002a22:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a24:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a30:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a38:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a40:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a44:	2220      	movs	r2, #32
 8002a46:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a50:	2204      	movs	r2, #4
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a56:	2203      	movs	r2, #3
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002a5a:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002a6a:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a6c:	f002 f86e 	bl	8004b4c <HAL_DMA_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8002a76:	f7fe fe05 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_SD_MspInit+0x1cc>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2105      	movs	r1, #5
 8002a8a:	2031      	movs	r0, #49	; 0x31
 8002a8c:	f002 f834 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002a90:	2031      	movs	r0, #49	; 0x31
 8002a92:	f002 f84d 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	2000cca8 	.word	0x2000cca8
 8002ab4:	40026458 	.word	0x40026458
 8002ab8:	20014e28 	.word	0x20014e28
 8002abc:	400264a0 	.word	0x400264a0

08002ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	; 0x38
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a68      	ldr	r2, [pc, #416]	; (8002c80 <HAL_SPI_MspInit+0x1c0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d131      	bne.n	8002b46 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ae2:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a61      	ldr	r2, [pc, #388]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8002b12:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b24:	2305      	movs	r3, #5
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4856      	ldr	r0, [pc, #344]	; (8002c88 <HAL_SPI_MspInit+0x1c8>)
 8002b30:	f002 fbb0 	bl	8005294 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2105      	movs	r1, #5
 8002b38:	2023      	movs	r0, #35	; 0x23
 8002b3a:	f001 ffdd 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b3e:	2023      	movs	r0, #35	; 0x23
 8002b40:	f001 fff6 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b44:	e097      	b.n	8002c76 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_SPI_MspInit+0x1cc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d131      	bne.n	8002bb4 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5c:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4a45      	ldr	r2, [pc, #276]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	6313      	str	r3, [r2, #48]	; 0x30
 8002b74:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b80:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b92:	2305      	movs	r3, #5
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	483c      	ldr	r0, [pc, #240]	; (8002c90 <HAL_SPI_MspInit+0x1d0>)
 8002b9e:	f002 fb79 	bl	8005294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	2024      	movs	r0, #36	; 0x24
 8002ba8:	f001 ffa6 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002bac:	2024      	movs	r0, #36	; 0x24
 8002bae:	f001 ffbf 	bl	8004b30 <HAL_NVIC_EnableIRQ>
}
 8002bb2:	e060      	b.n	8002c76 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <HAL_SPI_MspInit+0x1d4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d15b      	bne.n	8002c76 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_SPI_MspInit+0x1c4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c06:	2310      	movs	r3, #16
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c16:	2306      	movs	r3, #6
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4819      	ldr	r0, [pc, #100]	; (8002c88 <HAL_SPI_MspInit+0x1c8>)
 8002c22:	f002 fb37 	bl	8005294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c26:	2304      	movs	r3, #4
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002c36:	2307      	movs	r3, #7
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <HAL_SPI_MspInit+0x1d0>)
 8002c42:	f002 fb27 	bl	8005294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c46:	2318      	movs	r3, #24
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c56:	2306      	movs	r3, #6
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <HAL_SPI_MspInit+0x1d0>)
 8002c62:	f002 fb17 	bl	8005294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2105      	movs	r1, #5
 8002c6a:	2033      	movs	r0, #51	; 0x33
 8002c6c:	f001 ff44 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002c70:	2033      	movs	r0, #51	; 0x33
 8002c72:	f001 ff5d 	bl	8004b30 <HAL_NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3738      	adds	r7, #56	; 0x38
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40013000 	.word	0x40013000
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40003800 	.word	0x40003800
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40003c00 	.word	0x40003c00

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_UART_MspInit+0x7c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d128      	bne.n	8002d0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_UART_MspInit+0x80>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_UART_MspInit+0x80>)
 8002cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_UART_MspInit+0x80>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_UART_MspInit+0x80>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <HAL_UART_MspInit+0x80>)
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_UART_MspInit+0x80>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002cea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <HAL_UART_MspInit+0x84>)
 8002d08:	f002 fac4 	bl	8005294 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3728      	adds	r7, #40	; 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40007800 	.word	0x40007800
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	2019      	movs	r0, #25
 8002d36:	f001 fedf 	bl	8004af8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002d3a:	2019      	movs	r0, #25
 8002d3c:	f001 fef8 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_InitTick+0xa0>)
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_InitTick+0xa0>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_InitTick+0xa0>)
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d58:	f107 0210 	add.w	r2, r7, #16
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 fab4 	bl	80072d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002d68:	f004 fa9e 	bl	80072a8 <HAL_RCC_GetPCLK2Freq>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_InitTick+0xa4>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0c9b      	lsrs	r3, r3, #18
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_InitTick+0xa8>)
 8002d82:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <HAL_InitTick+0xac>)
 8002d84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_InitTick+0xa8>)
 8002d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d8e:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <HAL_InitTick+0xa8>)
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_InitTick+0xa8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_InitTick+0xa8>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002da0:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <HAL_InitTick+0xa8>)
 8002da2:	f006 ffc6 	bl	8009d32 <HAL_TIM_Base_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002dac:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <HAL_InitTick+0xa8>)
 8002dae:	f006 fff5 	bl	8009d9c <HAL_TIM_Base_Start_IT>
 8002db2:	4603      	mov	r3, r0
 8002db4:	e000      	b.n	8002db8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3730      	adds	r7, #48	; 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	431bde83 	.word	0x431bde83
 8002dc8:	20014e90 	.word	0x20014e90
 8002dcc:	40010000 	.word	0x40010000

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <HardFault_Handler+0x4>

08002de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <MemManage_Handler+0x4>

08002dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <BusFault_Handler+0x4>

08002df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <UsageFault_Handler+0x4>

08002df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e0a:	f006 fff1 	bl	8009df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20014e90 	.word	0x20014e90

08002e18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <SPI1_IRQHandler+0x10>)
 8002e1e:	f006 fb1f 	bl	8009460 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20010d08 	.word	0x20010d08

08002e2c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <SPI2_IRQHandler+0x10>)
 8002e32:	f006 fb15 	bl	8009460 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000887c 	.word	0x2000887c

08002e40 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <SDMMC1_IRQHandler+0x10>)
 8002e46:	f005 f89d 	bl	8007f84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200089c4 	.word	0x200089c4

08002e54 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <SPI3_IRQHandler+0x10>)
 8002e5a:	f006 fb01 	bl	8009460 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000aa4c 	.word	0x2000aa4c

08002e68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <DMA2_Stream3_IRQHandler+0x10>)
 8002e6e:	f001 ff9d 	bl	8004dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000cca8 	.word	0x2000cca8

08002e7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <OTG_FS_IRQHandler+0x10>)
 8002e82:	f002 fd10 	bl	80058a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20016cb8 	.word	0x20016cb8

08002e90 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <DMA2_Stream6_IRQHandler+0x10>)
 8002e96:	f001 ff89 	bl	8004dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20014e28 	.word	0x20014e28

08002ea4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <_sbrk+0x50>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <_sbrk+0x16>
		heap_end = &end;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <_sbrk+0x50>)
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <_sbrk+0x54>)
 8002eb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <_sbrk+0x50>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <_sbrk+0x50>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	466a      	mov	r2, sp
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d907      	bls.n	8002ede <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ece:	f013 fbd5 	bl	801667c <__errno>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e006      	b.n	8002eec <_sbrk+0x48>
	}

	heap_end += incr;
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <_sbrk+0x50>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <_sbrk+0x50>)
 8002ee8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002eea:	68fb      	ldr	r3, [r7, #12]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000318 	.word	0x20000318
 8002ef8:	200170c0 	.word	0x200170c0

08002efc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <SystemInit+0x5c>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <SystemInit+0x5c>)
 8002f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <SystemInit+0x60>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <SystemInit+0x60>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <SystemInit+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <SystemInit+0x60>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	490d      	ldr	r1, [pc, #52]	; (8002f5c <SystemInit+0x60>)
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <SystemInit+0x64>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <SystemInit+0x60>)
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <SystemInit+0x68>)
 8002f32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <SystemInit+0x60>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <SystemInit+0x60>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <SystemInit+0x60>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <SystemInit+0x5c>)
 8002f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f4c:	609a      	str	r2, [r3, #8]
#endif
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	fef6ffff 	.word	0xfef6ffff
 8002f64:	24003010 	.word	0x24003010

08002f68 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	b0b3      	sub	sp, #204	; 0xcc
 8002f6c:	af06      	add	r7, sp, #24
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	72fb      	strb	r3, [r7, #11]
 8002f76:	4613      	mov	r3, r2
 8002f78:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	2296      	movs	r2, #150	; 0x96
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f013 fbbf 	bl	8016706 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8002f88:	7afb      	ldrb	r3, [r7, #11]
 8002f8a:	7aba      	ldrb	r2, [r7, #10]
 8002f8c:	f107 0010 	add.w	r0, r7, #16
 8002f90:	9202      	str	r2, [sp, #8]
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	2301      	movs	r3, #1
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a41      	ldr	r2, [pc, #260]	; (80030a0 <logSensor+0x138>)
 8002f9c:	2196      	movs	r1, #150	; 0x96
 8002f9e:	f013 fc73 	bl	8016888 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8002fa2:	7abb      	ldrb	r3, [r7, #10]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <logSensor+0x46>
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d01d      	beq.n	8002fe8 <logSensor+0x80>
 8002fac:	e055      	b.n	800305a <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd f929 	bl	8000210 <strlen>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	1898      	adds	r0, r3, r2
 8002fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	9201      	str	r2, [sp, #4]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4a31      	ldr	r2, [pc, #196]	; (80030a4 <logSensor+0x13c>)
 8002fe0:	2196      	movs	r1, #150	; 0x96
 8002fe2:	f013 fc51 	bl	8016888 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8002fe6:	e04e      	b.n	8003086 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8002fee:	f107 0310 	add.w	r3, r7, #16
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd f90c 	bl	8000210 <strlen>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003004:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003008:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800300a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003012:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003018:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 800301c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800301e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003022:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003026:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800302c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003030:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003036:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 800303a:	461e      	mov	r6, r3
 800303c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	9305      	str	r3, [sp, #20]
 8003044:	9604      	str	r6, [sp, #16]
 8003046:	9503      	str	r5, [sp, #12]
 8003048:	9402      	str	r4, [sp, #8]
 800304a:	9101      	str	r1, [sp, #4]
 800304c:	9200      	str	r2, [sp, #0]
 800304e:	4663      	mov	r3, ip
 8003050:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <logSensor+0x140>)
 8003052:	2196      	movs	r1, #150	; 0x96
 8003054:	f013 fc18 	bl	8016888 <sniprintf>
	}
		break;
 8003058:	e015      	b.n	8003086 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 800305a:	f107 0310 	add.w	r3, r7, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd f8d6 	bl	8000210 <strlen>
 8003064:	4602      	mov	r2, r0
 8003066:	f107 0310 	add.w	r3, r7, #16
 800306a:	4413      	add	r3, r2
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <logSensor+0x144>)
 800306e:	461d      	mov	r5, r3
 8003070:	4614      	mov	r4, r2
 8003072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003074:	6028      	str	r0, [r5, #0]
 8003076:	6069      	str	r1, [r5, #4]
 8003078:	60aa      	str	r2, [r5, #8]
 800307a:	60eb      	str	r3, [r5, #12]
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	6128      	str	r0, [r5, #16]
 8003080:	7923      	ldrb	r3, [r4, #4]
 8003082:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8003084:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <logSensor+0x148>)
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f107 0110 	add.w	r1, r7, #16
 800308e:	2300      	movs	r3, #0
 8003090:	2200      	movs	r2, #0
 8003092:	f00f faaf 	bl	80125f4 <osMessageQueuePut>
 8003096:	4603      	mov	r3, r0
}
 8003098:	4618      	mov	r0, r3
 800309a:	37b4      	adds	r7, #180	; 0xb4
 800309c:	46bd      	mov	sp, r7
 800309e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a0:	0801829c 	.word	0x0801829c
 80030a4:	080182ac 	.word	0x080182ac
 80030a8:	080182bc 	.word	0x080182bc
 80030ac:	080182dc 	.word	0x080182dc
 80030b0:	20010d6c 	.word	0x20010d6c

080030b4 <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 80030b4:	b084      	sub	sp, #16
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b0ac      	sub	sp, #176	; 0xb0
 80030ba:	af04      	add	r7, sp, #16
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80030c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	2296      	movs	r2, #150	; 0x96
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f013 fb19 	bl	8016706 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 80030d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030dc:	f107 0008 	add.w	r0, r7, #8
 80030e0:	9202      	str	r2, [sp, #8]
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	2303      	movs	r3, #3
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <logEstimatorVar+0x60>)
 80030ec:	2196      	movs	r1, #150	; 0x96
 80030ee:	f013 fbcb 	bl	8016888 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <logEstimatorVar+0x64>)
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f107 0108 	add.w	r1, r7, #8
 80030fa:	2300      	movs	r3, #0
 80030fc:	2200      	movs	r2, #0
 80030fe:	f00f fa79 	bl	80125f4 <osMessageQueuePut>
 8003102:	4603      	mov	r3, r0
}
 8003104:	4618      	mov	r0, r3
 8003106:	37a0      	adds	r7, #160	; 0xa0
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800310e:	b004      	add	sp, #16
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	08018300 	.word	0x08018300
 8003118:	20010d6c 	.word	0x20010d6c

0800311c <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 800311c:	b40f      	push	{r0, r1, r2, r3}
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <UsbPrint+0x60>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f00e ff6a 	bl	8012008 <osMutexAcquire>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	21c8      	movs	r1, #200	; 0xc8
 8003146:	480e      	ldr	r0, [pc, #56]	; (8003180 <UsbPrint+0x64>)
 8003148:	f013 fbfe 	bl	8016948 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 800314c:	480c      	ldr	r0, [pc, #48]	; (8003180 <UsbPrint+0x64>)
 800314e:	f7fd f85f 	bl	8000210 <strlen>
 8003152:	4603      	mov	r3, r0
 8003154:	b29b      	uxth	r3, r3
 8003156:	4619      	mov	r1, r3
 8003158:	4809      	ldr	r0, [pc, #36]	; (8003180 <UsbPrint+0x64>)
 800315a:	f012 fde5 	bl	8015d28 <CDC_Transmit_FS>
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <UsbPrint+0x60>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f00e ffac 	bl	80120c4 <osMutexRelease>
	}
#endif
	return ret;
 800316c:	79fb      	ldrb	r3, [r7, #7]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003178:	b004      	add	sp, #16
 800317a:	4770      	bx	lr
 800317c:	2000cc48 	.word	0x2000cc48
 8003180:	2000aab0 	.word	0x2000aab0
 8003184:	00000000 	.word	0x00000000

08003188 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800318e:	af00      	add	r7, sp, #0
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 8003194:	f107 031c 	add.w	r3, r7, #28
 8003198:	4618      	mov	r0, r3
 800319a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800319e:	461a      	mov	r2, r3
 80031a0:	2100      	movs	r1, #0
 80031a2:	f013 fab0 	bl	8016706 <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	6053      	str	r3, [r2, #4]
 80031c2:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 80031ee:	2301      	movs	r3, #1
 80031f0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80031f4:	f00e fd28 	bl	8011c48 <osKernelGetTickCount>
 80031f8:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80031fc:	f00e fd4c 	bl	8011c98 <osKernelGetTickFreq>
 8003200:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8003204:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8003208:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800320c:	4413      	add	r3, r2
 800320e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 8003212:	f107 021c 	add.w	r2, r7, #28
 8003216:	f107 0110 	add.w	r1, r7, #16
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	4618      	mov	r0, r3
 8003220:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 8003224:	f000 f898 	bl	8003358 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8003234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003238:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	eeb1 7a67 	vneg.f32	s14, s15
 8003248:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 800324c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	edd3 6a01 	vldr	s13, [r3, #4]
 8003258:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 800325c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003260:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	edd3 6a02 	vldr	s13, [r3, #8]
 800326c:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8003270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003274:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8003278:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 800327c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003280:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 8003284:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8003288:	f7fd f97e 	bl	8000588 <__aeabi_f2d>
 800328c:	4603      	mov	r3, r0
 800328e:	460c      	mov	r4, r1
 8003290:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8003338 <vTaskController+0x1b0>
 8003294:	ec44 3b10 	vmov	d0, r3, r4
 8003298:	f013 feae 	bl	8016ff8 <fmin>
 800329c:	eeb0 7a40 	vmov.f32	s14, s0
 80032a0:	eef0 7a60 	vmov.f32	s15, s1
 80032a4:	eeb0 1a47 	vmov.f32	s2, s14
 80032a8:	eef0 1a67 	vmov.f32	s3, s15
 80032ac:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8003340 <vTaskController+0x1b8>
 80032b0:	f013 fe7b 	bl	8016faa <fmax>
 80032b4:	ec54 3b10 	vmov	r3, r4, d0
 80032b8:	4618      	mov	r0, r3
 80032ba:	4621      	mov	r1, r4
 80032bc:	f7fd fc8c 	bl	8000bd8 <__aeabi_d2f>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 80032c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d2:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80032d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032da:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80032de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e2:	ee17 0a90 	vmov	r0, s15
 80032e6:	f7fd f94f 	bl	8000588 <__aeabi_f2d>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003348 <vTaskController+0x1c0>
 80032f2:	ec44 3b10 	vmov	d0, r3, r4
 80032f6:	f013 fe7f 	bl	8016ff8 <fmin>
 80032fa:	eeb0 7a40 	vmov.f32	s14, s0
 80032fe:	eef0 7a60 	vmov.f32	s15, s1
 8003302:	eeb0 1a47 	vmov.f32	s2, s14
 8003306:	eef0 1a67 	vmov.f32	s3, s15
 800330a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003350 <vTaskController+0x1c8>
 800330e:	f013 fe4c 	bl	8016faa <fmax>
 8003312:	ec54 3b10 	vmov	r3, r4, d0
 8003316:	4618      	mov	r0, r3
 8003318:	4621      	mov	r1, r4
 800331a:	f7fd fc5d 	bl	8000bd8 <__aeabi_d2f>
 800331e:	4603      	mov	r3, r0
 8003320:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8003324:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003328:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

		/* Sleep */
		osDelayUntil(tick_count);
 800332c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8003330:	f00e fd90 	bl	8011e54 <osDelayUntil>
		tick_count += tick_update;
 8003334:	e766      	b.n	8003204 <vTaskController+0x7c>
 8003336:	bf00      	nop
 8003338:	00000000 	.word	0x00000000
 800333c:	3ff00000 	.word	0x3ff00000
	...
 800334c:	40240000 	.word	0x40240000
 8003350:	00000000 	.word	0x00000000
 8003354:	c0240000 	.word	0xc0240000

08003358 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003362:	60b8      	str	r0, [r7, #8]
 8003364:	6079      	str	r1, [r7, #4]
 8003366:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e07b      	b.n	800346a <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7fd f908 	bl	8000588 <__aeabi_f2d>
 8003378:	4604      	mov	r4, r0
 800337a:	460d      	mov	r5, r1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f1c3 031d 	rsb	r3, r3, #29
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8ee 	bl	8000564 <__aeabi_i2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	ec43 2b11 	vmov	d1, r2, r3
 8003390:	ec45 4b10 	vmov	d0, r4, r5
 8003394:	f013 fe84 	bl	80170a0 <pow>
 8003398:	ec54 3b10 	vmov	r3, r4, d0
 800339c:	4618      	mov	r0, r3
 800339e:	4621      	mov	r1, r4
 80033a0:	f7fd fbfa 	bl	8000b98 <__aeabi_d2uiz>
 80033a4:	4603      	mov	r3, r0
 80033a6:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	ed93 7a00 	vldr	s14, [r3]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	edd3 6a00 	vldr	s13, [r3]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	ed93 7a00 	vldr	s14, [r3]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	edd3 6a00 	vldr	s13, [r3]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3308      	adds	r3, #8
 8003408:	ed93 7a00 	vldr	s14, [r3]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	edd3 6a00 	vldr	s13, [r3]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3308      	adds	r3, #8
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	ed93 7a00 	vldr	s14, [r3]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	edd3 6a00 	vldr	s13, [r3]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3301      	adds	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b1d      	cmp	r3, #29
 800346e:	dd80      	ble.n	8003372 <CalcPolynomial+0x1a>
	}

}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}

08003478 <vTaskFSM>:
void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *env);

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection);


void vTaskFSM(void *argument) {
 8003478:	b5b0      	push	{r4, r5, r7, lr}
 800347a:	b0ae      	sub	sp, #184	; 0xb8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003480:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 800348c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f99f 	bl	80037d4 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8003496:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800349a:	223c      	movs	r2, #60	; 0x3c
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f013 f931 	bl	8016706 <memset>
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 80034a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a8:	223c      	movs	r2, #60	; 0x3c
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f013 f92a 	bl	8016706 <memset>

	/* environment data */
	env environment;
	env dummy_env;
	init_env(&dummy_env);
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fd5e 	bl	8000f78 <init_env>
	init_env(&environment);
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd fd59 	bl	8000f78 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80034c6:	f00e fbbf 	bl	8011c48 <osKernelGetTickCount>
 80034ca:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80034ce:	f00e fbe3 	bl	8011c98 <osKernelGetTickFreq>
 80034d2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80034d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034de:	4413      	add	r3, r2
 80034e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <vTaskFSM+0x148>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f00e fe3b 	bl	8012164 <osMutexGetOwner>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d123      	bne.n	800353c <vTaskFSM+0xc4>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data;
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <vTaskFSM+0x14c>)
 80034f6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80034fa:	461d      	mov	r5, r3
 80034fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800350c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 8003510:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <vTaskFSM+0x148>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f00e fe25 	bl	8012164 <osMutexGetOwner>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <vTaskFSM+0xc4>
				state_est_data_fsm = state_est_data_fsm_dummy;
 8003520:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8003524:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8003528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003534:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003538:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}
		/* Update Environment */
		if(osMutexGetOwner(environment_mutex) == NULL){
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <vTaskFSM+0x150>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f00e fe0f 	bl	8012164 <osMutexGetOwner>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d114      	bne.n	8003576 <vTaskFSM+0xfe>
			dummy_env = global_env;
 800354c:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <vTaskFSM+0x154>)
 800354e:	f107 040c 	add.w	r4, r7, #12
 8003552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <vTaskFSM+0x148>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f00e fe01 	bl	8012164 <osMutexGetOwner>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <vTaskFSM+0xfe>
				environment = dummy_env;
 8003568:	f107 041c 	add.w	r4, r7, #28
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8003576:	f107 021c 	add.w	r2, r7, #28
 800357a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800357e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f828 	bl	80035d8 <detect_flight_phase>

		/* TODO Write NEW State in GLobal Variable */
		if(osMutexAcquire(fsm_mutex, 10) == osOK){
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <vTaskFSM+0x158>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	210a      	movs	r1, #10
 800358e:	4618      	mov	r0, r3
 8003590:	f00e fd3a 	bl	8012008 <osMutexAcquire>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <vTaskFSM+0x13c>
			global_flight_phase_detection = flight_phase_detection;
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <vTaskFSM+0x15c>)
 800359c:	461c      	mov	r4, r3
 800359e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(fsm_mutex);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <vTaskFSM+0x158>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f00e fd88 	bl	80120c4 <osMutexRelease>
		}

		/* Sleep */
		osDelayUntil(tick_count);
 80035b4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80035b8:	f00e fc4c 	bl	8011e54 <osDelayUntil>
		tick_count += tick_update;
 80035bc:	e78b      	b.n	80034d6 <vTaskFSM+0x5e>
 80035be:	bf00      	nop
 80035c0:	2000abe8 	.word	0x2000abe8
 80035c4:	200002c0 	.word	0x200002c0
 80035c8:	200089c0 	.word	0x200089c0
 80035cc:	200002fc 	.word	0x200002fc
 80035d0:	20008878 	.word	0x20008878
 80035d4:	2000030c 	.word	0x2000030c

080035d8 <detect_flight_phase>:
}


void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *environment)

{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	f200 80a6 	bhi.w	800373c <detect_flight_phase+0x164>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <detect_flight_phase+0x20>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	0800360d 	.word	0x0800360d
 80035fc:	0800373d 	.word	0x0800373d
 8003600:	0800365b 	.word	0x0800365b
 8003604:	080036a5 	.word	0x080036a5
 8003608:	080036ef 	.word	0x080036ef
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 > 20) {
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003618:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80037d0 <detect_flight_phase+0x1f8>
 800361c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003620:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362c:	dc00      	bgt.n	8003630 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800362e:	e087      	b.n	8003740 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	b25a      	sxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003648:	2b03      	cmp	r3, #3
 800364a:	dd79      	ble.n	8003740 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2203      	movs	r2, #3
 8003650:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	721a      	strb	r2, [r3, #8]
        break;
 8003658:	e072      	b.n	8003740 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 < 0) {
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003666:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80037d0 <detect_flight_phase+0x1f8>
 800366a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003676:	d400      	bmi.n	800367a <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003678:	e064      	b.n	8003744 <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3301      	adds	r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	b25a      	sxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003692:	2b03      	cmp	r3, #3
 8003694:	dd56      	ble.n	8003744 <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2204      	movs	r2, #4
 800369a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	721a      	strb	r2, [r3, #8]
        break;
 80036a2:	e04f      	b.n	8003744 <detect_flight_phase+0x16c>

        case COASTING:
            if (((float)(state_est_data->velocity_world[2]))/1000 < 0) {
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80037d0 <detect_flight_phase+0x1f8>
 80036b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d400      	bmi.n	80036c4 <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80036c2:	e041      	b.n	8003748 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	b25a      	sxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	dd33      	ble.n	8003748 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2205      	movs	r2, #5
 80036e4:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	721a      	strb	r2, [r3, #8]
        break;
 80036ec:	e02c      	b.n	8003748 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2]))/1000 < 20) {
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036fa:	eddf 6a35 	vldr	s13, [pc, #212]	; 80037d0 <detect_flight_phase+0x1f8>
 80036fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003702:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370e:	d400      	bmi.n	8003712 <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003710:	e01c      	b.n	800374c <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3301      	adds	r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	b25a      	sxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800372a:	2b03      	cmp	r3, #3
 800372c:	dd0e      	ble.n	800374c <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2206      	movs	r2, #6
 8003732:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	721a      	strb	r2, [r3, #8]
        break;
 800373a:	e007      	b.n	800374c <detect_flight_phase+0x174>

        default:
        break;
 800373c:	bf00      	nop
 800373e:	e006      	b.n	800374e <detect_flight_phase+0x176>
        break;
 8003740:	bf00      	nop
 8003742:	e004      	b.n	800374e <detect_flight_phase+0x176>
        break;
 8003744:	bf00      	nop
 8003746:	e002      	b.n	800374e <detect_flight_phase+0x176>
        break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <detect_flight_phase+0x176>
        break;
 800374c:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(environment, state_est_data->velocity_rocket[0]);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fd fc23 	bl	8000fa0 <mach_number>
 800375a:	ee07 0a90 	vmov	s15, r0
 800375e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc ff0b 	bl	8000588 <__aeabi_f2d>
 8003772:	a313      	add	r3, pc, #76	; (adr r3, 80037c0 <detect_flight_phase+0x1e8>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fd f9e4 	bl	8000b44 <__aeabi_dcmpge>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <detect_flight_phase+0x1b2>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2203      	movs	r2, #3
 8003786:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }


}
 8003788:	e013      	b.n	80037b2 <detect_flight_phase+0x1da>
    } else if (flight_phase_detection->mach_number >= 0.8)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fefa 	bl	8000588 <__aeabi_f2d>
 8003794:	a30c      	add	r3, pc, #48	; (adr r3, 80037c8 <detect_flight_phase+0x1f0>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fd f9d3 	bl	8000b44 <__aeabi_dcmpge>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <detect_flight_phase+0x1d4>
        flight_phase_detection->mach_regime = TRANSONIC;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2202      	movs	r2, #2
 80037a8:	705a      	strb	r2, [r3, #1]
}
 80037aa:	e002      	b.n	80037b2 <detect_flight_phase+0x1da>
        flight_phase_detection->mach_regime = SUBSONIC;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	705a      	strb	r2, [r3, #1]
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	f3af 8000 	nop.w
 80037c0:	cccccccd 	.word	0xcccccccd
 80037c4:	3ff4cccc 	.word	0x3ff4cccc
 80037c8:	9999999a 	.word	0x9999999a
 80037cc:	3fe99999 	.word	0x3fe99999
 80037d0:	447a0000 	.word	0x447a0000

080037d4 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	721a      	strb	r2, [r3, #8]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <vTaskMotorCont>:

uint16_t calculateCRC(uint8_t *data, uint8_t len);

uint8_t rx_data[10] = { 0 };

void vTaskMotorCont(void *argument) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b090      	sub	sp, #64	; 0x40
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800380c:	f00e fa1c 	bl	8011c48 <osKernelGetTickCount>
 8003810:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8003812:	f00e fa41 	bl	8011c98 <osKernelGetTickFreq>
 8003816:	6378      	str	r0, [r7, #52]	; 0x34
	uint8_t counter = 10;
 8003818:	230a      	movs	r3, #10
 800381a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	for (;;) {
		tick_count += tick_update;
 800381e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003822:	4413      	add	r3, r2
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Command */
		uint8_t byte_stream_read[10] = { 0 };
 8003826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	811a      	strh	r2, [r3, #8]
		byte_stream_read[0] = 0x90;		// DLE
 8003832:	2390      	movs	r3, #144	; 0x90
 8003834:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		byte_stream_read[1] = 0x02;		// STX
 8003838:	2302      	movs	r3, #2
 800383a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		byte_stream_read[2] = 0x60;		// Read Object
 800383e:	2360      	movs	r3, #96	; 0x60
 8003840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		byte_stream_read[3] = 0x02;		// Length of stuff sent
 8003844:	2302      	movs	r3, #2
 8003846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		byte_stream_read[4] = 0x01;		// Node ID
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		byte_stream_read[5] = 0x7A;		// Index Low Byte
 8003850:	237a      	movs	r3, #122	; 0x7a
 8003852:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		byte_stream_read[6] = 0x60;		// Index High byte
 8003856:	2360      	movs	r3, #96	; 0x60
 8003858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		byte_stream_read[7] = 0x00;		// Subindex of object
 800385c:	2300      	movs	r3, #0
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		/* CRC data array */
		uint8_t crc_data_array[6] = { 0 };
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	809a      	strh	r2, [r3, #4]
		memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 800386c:	f107 031c 	add.w	r3, r7, #28
 8003870:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8003874:	6810      	ldr	r0, [r2, #0]
 8003876:	6018      	str	r0, [r3, #0]
 8003878:	8892      	ldrh	r2, [r2, #4]
 800387a:	809a      	strh	r2, [r3, #4]

		uint16_t crc_calc = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	867b      	strh	r3, [r7, #50]	; 0x32
		crc_calc = calculateCRC(crc_data_array, 6);
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	2106      	movs	r1, #6
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f8ca 	bl	8003a20 <calculateCRC>
 800388c:	4603      	mov	r3, r0
 800388e:	867b      	strh	r3, [r7, #50]	; 0x32

		byte_stream_read[8] = crc_calc & 0xFF;;		// CRC low byte
 8003890:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8003898:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b29b      	uxth	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		byte_stream_read[8] = 0x6C;		// CRC low byte
 80038a4:	236c      	movs	r3, #108	; 0x6c
 80038a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = 0xE6;		// CRC high byte
 80038aa:	23e6      	movs	r3, #230	; 0xe6
 80038ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


		/* rx buffer */
		HAL_StatusTypeDef status;
		status = HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 80038b0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80038b4:	230a      	movs	r3, #10
 80038b6:	220a      	movs	r2, #10
 80038b8:	484e      	ldr	r0, [pc, #312]	; (80039f4 <vTaskMotorCont+0x1f0>)
 80038ba:	f006 fced 	bl	800a298 <HAL_UART_Transmit>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		HAL_UART_Receive_IT(&huart7, rx_data, 10);
 80038c4:	220a      	movs	r2, #10
 80038c6:	494c      	ldr	r1, [pc, #304]	; (80039f8 <vTaskMotorCont+0x1f4>)
 80038c8:	484a      	ldr	r0, [pc, #296]	; (80039f4 <vTaskMotorCont+0x1f0>)
 80038ca:	f006 fd77 	bl	800a3bc <HAL_UART_Receive_IT>

		uint8_t byte_stream_write[14] = { 0 };
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	819a      	strh	r2, [r3, #12]

		if (counter > 20){
 80038dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80038e0:	2b14      	cmp	r3, #20
 80038e2:	d907      	bls.n	80038f4 <vTaskMotorCont+0xf0>
			counter = 10;
 80038e4:	230a      	movs	r3, #10
 80038e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			byte_stream_write[12] = 0x41;		// CRC low byte
 80038ea:	2341      	movs	r3, #65	; 0x41
 80038ec:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0xBF;		// CRC high byte
 80038ee:	23bf      	movs	r3, #191	; 0xbf
 80038f0:	767b      	strb	r3, [r7, #25]
 80038f2:	e006      	b.n	8003902 <vTaskMotorCont+0xfe>
		}
		else{
			byte_stream_write[12] = 0x87;		// CRC low byte
 80038f4:	2387      	movs	r3, #135	; 0x87
 80038f6:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0x39;		// CRC high byte
 80038f8:	2339      	movs	r3, #57	; 0x39
 80038fa:	767b      	strb	r3, [r7, #25]
			counter = 30;
 80038fc:	231e      	movs	r3, #30
 80038fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		/* Write Command */

		byte_stream_write[0] = 0x90;		// DLE
 8003902:	2390      	movs	r3, #144	; 0x90
 8003904:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 8003906:	2302      	movs	r3, #2
 8003908:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 800390a:	2368      	movs	r3, #104	; 0x68
 800390c:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 800390e:	2304      	movs	r3, #4
 8003910:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 8003912:	2301      	movs	r3, #1
 8003914:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x7A;		// Index Low Byte
 8003916:	237a      	movs	r3, #122	; 0x7a
 8003918:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 800391a:	2360      	movs	r3, #96	; 0x60
 800391c:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 800391e:	2300      	movs	r3, #0
 8003920:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = counter;		// Data LSB
 8003922:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003926:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 8003928:	2300      	movs	r3, #0
 800392a:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 800392c:	2300      	movs	r3, #0
 800392e:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]
//		byte_stream_write[12] = 0x41;		// CRC low byte
//		byte_stream_write[13] = 0xBF;		// CRC high byte
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8003934:	f107 010c 	add.w	r1, r7, #12
 8003938:	230a      	movs	r3, #10
 800393a:	220e      	movs	r2, #14
 800393c:	482d      	ldr	r0, [pc, #180]	; (80039f4 <vTaskMotorCont+0x1f0>)
 800393e:	f006 fcab 	bl	800a298 <HAL_UART_Transmit>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 8003948:	2001      	movs	r0, #1
 800394a:	f00e fa55 	bl	8011df8 <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 800394e:	2390      	movs	r3, #144	; 0x90
 8003950:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 8003952:	2302      	movs	r3, #2
 8003954:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 8003956:	2368      	movs	r3, #104	; 0x68
 8003958:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 800395a:	2304      	movs	r3, #4
 800395c:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 800395e:	2301      	movs	r3, #1
 8003960:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 8003962:	2340      	movs	r3, #64	; 0x40
 8003964:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 8003966:	2360      	movs	r3, #96	; 0x60
 8003968:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 800396a:	2300      	movs	r3, #0
 800396c:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x3F;		// Data LSB
 800396e:	233f      	movs	r3, #63	; 0x3f
 8003970:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 8003972:	2300      	movs	r3, #0
 8003974:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 8003976:	2300      	movs	r3, #0
 8003978:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0x16;		// CRC low byte
 800397e:	2316      	movs	r3, #22
 8003980:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0xC2;		// CRC high byte
 8003982:	23c2      	movs	r3, #194	; 0xc2
 8003984:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8003986:	f107 010c 	add.w	r1, r7, #12
 800398a:	230a      	movs	r3, #10
 800398c:	220e      	movs	r2, #14
 800398e:	4819      	ldr	r0, [pc, #100]	; (80039f4 <vTaskMotorCont+0x1f0>)
 8003990:	f006 fc82 	bl	800a298 <HAL_UART_Transmit>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 800399a:	2001      	movs	r0, #1
 800399c:	f00e fa2c 	bl	8011df8 <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 80039a0:	2390      	movs	r3, #144	; 0x90
 80039a2:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 80039a4:	2302      	movs	r3, #2
 80039a6:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 80039a8:	2368      	movs	r3, #104	; 0x68
 80039aa:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 80039ac:	2304      	movs	r3, #4
 80039ae:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 80039b0:	2301      	movs	r3, #1
 80039b2:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 80039b4:	2340      	movs	r3, #64	; 0x40
 80039b6:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 80039b8:	2360      	movs	r3, #96	; 0x60
 80039ba:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 80039bc:	2300      	movs	r3, #0
 80039be:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x0F;		// Data LSB
 80039c0:	230f      	movs	r3, #15
 80039c2:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 80039c4:	2300      	movs	r3, #0
 80039c6:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 80039c8:	2300      	movs	r3, #0
 80039ca:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 80039cc:	2300      	movs	r3, #0
 80039ce:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0xB3;		// CRC low byte
 80039d0:	23b3      	movs	r3, #179	; 0xb3
 80039d2:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0x07;		// CRC high byte
 80039d4:	2307      	movs	r3, #7
 80039d6:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 80039d8:	f107 010c 	add.w	r1, r7, #12
 80039dc:	230a      	movs	r3, #10
 80039de:	220e      	movs	r2, #14
 80039e0:	4804      	ldr	r0, [pc, #16]	; (80039f4 <vTaskMotorCont+0x1f0>)
 80039e2:	f006 fc59 	bl	800a298 <HAL_UART_Transmit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31


		osDelayUntil(tick_count);
 80039ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039ee:	f00e fa31 	bl	8011e54 <osDelayUntil>
	for (;;) {
 80039f2:	e714      	b.n	800381e <vTaskMotorCont+0x1a>
 80039f4:	200088e0 	.word	0x200088e0
 80039f8:	2000031c 	.word	0x2000031c

080039fc <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart7, rx_data, sizeof(rx_data));
 8003a04:	220a      	movs	r2, #10
 8003a06:	4904      	ldr	r1, [pc, #16]	; (8003a18 <HAL_UART_RxCpltCallback+0x1c>)
 8003a08:	4804      	ldr	r0, [pc, #16]	; (8003a1c <HAL_UART_RxCpltCallback+0x20>)
 8003a0a:	f006 fcd7 	bl	800a3bc <HAL_UART_Receive_IT>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000031c 	.word	0x2000031c
 8003a1c:	200088e0 	.word	0x200088e0

08003a20 <calculateCRC>:


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crcCalc = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e04f      	b.n	8003ad6 <calculateCRC+0xb6>
    shifter = 0x8000;
 8003a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3a:	82fb      	strh	r3, [r7, #22]
    if (i == 0) {
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <calculateCRC+0x42>
      c = data[i] << 8 | data[i+1];
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	b21a      	sxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	440b      	add	r3, r1
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	82bb      	strh	r3, [r7, #20]
 8003a60:	e015      	b.n	8003a8e <calculateCRC+0x6e>
    } else if (i == len) {
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d102      	bne.n	8003a70 <calculateCRC+0x50>
      c = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	82bb      	strh	r3, [r7, #20]
 8003a6e:	e00e      	b.n	8003a8e <calculateCRC+0x6e>
    } else {
      c = data[i+1] << 8 | data[i];
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3301      	adds	r3, #1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	b21a      	sxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	440b      	add	r3, r1
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	b21b      	sxth	r3, r3
 8003a8c:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crcCalc & 0x8000;
 8003a8e:	8a7b      	ldrh	r3, [r7, #18]
 8003a90:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a98:	817b      	strh	r3, [r7, #10]
      crcCalc <<= 1;
 8003a9a:	8a7b      	ldrh	r3, [r7, #18]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crcCalc++;
 8003aa0:	8aba      	ldrh	r2, [r7, #20]
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <calculateCRC+0x92>
 8003aac:	8a7b      	ldrh	r3, [r7, #18]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	827b      	strh	r3, [r7, #18]
      if(carry) crcCalc ^= 0x1021;
 8003ab2:	897b      	ldrh	r3, [r7, #10]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <calculateCRC+0xa4>
 8003ab8:	8a7b      	ldrh	r3, [r7, #18]
 8003aba:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8003ac4:	8afb      	ldrh	r3, [r7, #22]
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1de      	bne.n	8003a8e <calculateCRC+0x6e>
  for (int i = 0; i < len + 2; i += 2) {
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	3302      	adds	r3, #2
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dbaa      	blt.n	8003a36 <calculateCRC+0x16>
  }
  return crcCalc;
 8003ae0:	8a7b      	ldrh	r3, [r7, #18]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8003af0:	b5b0      	push	{r4, r5, r7, lr}
 8003af2:	b0cc      	sub	sp, #304	; 0x130
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003b0c:	48c1      	ldr	r0, [pc, #772]	; (8003e14 <vTaskSdCard+0x324>)
 8003b0e:	f7ff fb05 	bl	800311c <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8003b12:	48c1      	ldr	r0, [pc, #772]	; (8003e18 <vTaskSdCard+0x328>)
 8003b14:	f7ff fb02 	bl	800311c <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	49c0      	ldr	r1, [pc, #768]	; (8003e1c <vTaskSdCard+0x32c>)
 8003b1c:	48c0      	ldr	r0, [pc, #768]	; (8003e20 <vTaskSdCard+0x330>)
 8003b1e:	f00c ff87 	bl	8010a30 <f_mount>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003b28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003b30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b34:	4619      	mov	r1, r3
 8003b36:	48bb      	ldr	r0, [pc, #748]	; (8003e24 <vTaskSdCard+0x334>)
 8003b38:	f7ff faf0 	bl	800311c <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8003b3c:	4bba      	ldr	r3, [pc, #744]	; (8003e28 <vTaskSdCard+0x338>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8003b42:	2064      	movs	r0, #100	; 0x64
 8003b44:	f00e f958 	bl	8011df8 <osDelay>
		}
	} while (res != FR_OK);
 8003b48:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e3      	bne.n	8003b18 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8003b50:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 80a9 	bne.w	8003cac <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8003b5a:	48b4      	ldr	r0, [pc, #720]	; (8003e2c <vTaskSdCard+0x33c>)
 8003b5c:	f7ff fade 	bl	800311c <UsbPrint>

		unsigned int file_number = 1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003b66:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003b6a:	f107 0008 	add.w	r0, r7, #8
 8003b6e:	4bb0      	ldr	r3, [pc, #704]	; (8003e30 <vTaskSdCard+0x340>)
 8003b70:	4aaa      	ldr	r2, [pc, #680]	; (8003e1c <vTaskSdCard+0x32c>)
 8003b72:	f00d ff15 	bl	80119a0 <f_findfirst>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003b7c:	e02b      	b.n	8003bd6 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003b7e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003b82:	3b30      	subs	r3, #48	; 0x30
 8003b84:	2264      	movs	r2, #100	; 0x64
 8003b86:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003b8a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	18ca      	adds	r2, r1, r3
 8003b9c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003ba0:	3b30      	subs	r3, #48	; 0x30
 8003ba2:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003ba4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			if (current_file_number + 1 > file_number) {
 8003ba8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bac:	3301      	adds	r3, #1
 8003bae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d204      	bcs.n	8003bc0 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8003bb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8003bc0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003bc4:	f107 0308 	add.w	r3, r7, #8
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f00d fec0 	bl	8011950 <f_findnext>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003bd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <vTaskSdCard+0xf6>
 8003bde:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1cb      	bne.n	8003b7e <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8003be6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8003bee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	488f      	ldr	r0, [pc, #572]	; (8003e34 <vTaskSdCard+0x344>)
 8003bf6:	f7ff fa91 	bl	800311c <UsbPrint>
					res);
			goto resetSDCard;
 8003bfa:	e78a      	b.n	8003b12 <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8003bfc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003c00:	4a8d      	ldr	r2, [pc, #564]	; (8003e38 <vTaskSdCard+0x348>)
 8003c02:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003c08:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003c0c:	4b8b      	ldr	r3, [pc, #556]	; (8003e3c <vTaskSdCard+0x34c>)
 8003c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c12:	08da      	lsrs	r2, r3, #3
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	1aca      	subs	r2, r1, r3
 8003c1e:	b2d3      	uxtb	r3, r2
 8003c20:	3330      	adds	r3, #48	; 0x30
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c2c:	4a83      	ldr	r2, [pc, #524]	; (8003e3c <vTaskSdCard+0x34c>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	08d9      	lsrs	r1, r3, #3
 8003c34:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <vTaskSdCard+0x34c>)
 8003c36:	fba3 2301 	umull	r2, r3, r3, r1
 8003c3a:	08da      	lsrs	r2, r3, #3
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	1aca      	subs	r2, r1, r3
 8003c46:	b2d3      	uxtb	r3, r2
 8003c48:	3330      	adds	r3, #48	; 0x30
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8003c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c54:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <vTaskSdCard+0x350>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0959      	lsrs	r1, r3, #5
 8003c5c:	4b77      	ldr	r3, [pc, #476]	; (8003e3c <vTaskSdCard+0x34c>)
 8003c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c62:	08da      	lsrs	r2, r3, #3
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	1aca      	subs	r2, r1, r3
 8003c6e:	b2d3      	uxtb	r3, r2
 8003c70:	3330      	adds	r3, #48	; 0x30
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8003c78:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4871      	ldr	r0, [pc, #452]	; (8003e44 <vTaskSdCard+0x354>)
 8003c80:	f7ff fa4c 	bl	800311c <UsbPrint>

		res = f_closedir(&dj);
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f00d fdf3 	bl	8011874 <f_closedir>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003c94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8003c9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4869      	ldr	r0, [pc, #420]	; (8003e48 <vTaskSdCard+0x358>)
 8003ca4:	f7ff fa3a 	bl	800311c <UsbPrint>
			goto resetSDCard;
 8003ca8:	bf00      	nop
 8003caa:	e732      	b.n	8003b12 <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8003cac:	4867      	ldr	r0, [pc, #412]	; (8003e4c <vTaskSdCard+0x35c>)
 8003cae:	f7ff fa35 	bl	800311c <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003cb2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003cb6:	2212      	movs	r2, #18
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4865      	ldr	r0, [pc, #404]	; (8003e50 <vTaskSdCard+0x360>)
 8003cbc:	f00c ff1c 	bl	8010af8 <f_open>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8003cc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8003cce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	485f      	ldr	r0, [pc, #380]	; (8003e54 <vTaskSdCard+0x364>)
 8003cd6:	f7ff fa21 	bl	800311c <UsbPrint>
		goto resetSDCard;
 8003cda:	e71a      	b.n	8003b12 <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8003cdc:	485e      	ldr	r0, [pc, #376]	; (8003e58 <vTaskSdCard+0x368>)
 8003cde:	f7ff fa1d 	bl	800311c <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <vTaskSdCard+0x360>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4859      	ldr	r0, [pc, #356]	; (8003e50 <vTaskSdCard+0x360>)
 8003cea:	f00d faf7 	bl	80112dc <f_lseek>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8003cf4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8003cfc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d00:	4619      	mov	r1, r3
 8003d02:	4856      	ldr	r0, [pc, #344]	; (8003e5c <vTaskSdCard+0x36c>)
 8003d04:	f7ff fa0a 	bl	800311c <UsbPrint>
		goto resetSDCard;
 8003d08:	e703      	b.n	8003b12 <vTaskSdCard+0x22>
	}

	int msgCounter = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <vTaskSdCard+0x370>)
 8003d12:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8003d16:	461d      	mov	r5, r3
 8003d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003d20:	c407      	stmia	r4!, {r0, r1, r2}
 8003d22:	8023      	strh	r3, [r4, #0]
 8003d24:	3402      	adds	r4, #2
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	7023      	strb	r3, [r4, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003d36:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc fa68 	bl	8000210 <strlen>
 8003d40:	4602      	mov	r2, r0
 8003d42:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8003d46:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <vTaskSdCard+0x374>)
 8003d48:	4841      	ldr	r0, [pc, #260]	; (8003e50 <vTaskSdCard+0x360>)
 8003d4a:	f00d f89a 	bl	8010e82 <f_write>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8003d54:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8003d5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d60:	4619      	mov	r1, r3
 8003d62:	4841      	ldr	r0, [pc, #260]	; (8003e68 <vTaskSdCard+0x378>)
 8003d64:	f7ff f9da 	bl	800311c <UsbPrint>
		goto resetSDCard;
 8003d68:	e6d3      	b.n	8003b12 <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8003d6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d6e:	2296      	movs	r2, #150	; 0x96
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f012 fcc7 	bl	8016706 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003d78:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <vTaskSdCard+0x37c>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	2200      	movs	r2, #0
 8003d86:	f00e fca9 	bl	80126dc <osMessageQueueGet>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f3      	bne.n	8003d78 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8003d90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc fa3b 	bl	8000210 <strlen>
 8003d9a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			if (num_bytes > 0) {
 8003d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d015      	beq.n	8003dd2 <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003da6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003daa:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <vTaskSdCard+0x374>)
 8003dac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003db0:	4827      	ldr	r0, [pc, #156]	; (8003e50 <vTaskSdCard+0x360>)
 8003db2:	f00d f866 	bl	8010e82 <f_write>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8003dbc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d006      	beq.n	8003dd2 <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8003dc4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4827      	ldr	r0, [pc, #156]	; (8003e68 <vTaskSdCard+0x378>)
 8003dcc:	f7ff f9a6 	bl	800311c <UsbPrint>
							res);
					goto resetSDCard;
 8003dd0:	e69f      	b.n	8003b12 <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8003dd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8003ddc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003de0:	2b7f      	cmp	r3, #127	; 0x7f
 8003de2:	ddc9      	ble.n	8003d78 <vTaskSdCard+0x288>
				msgCounter = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8003dea:	4821      	ldr	r0, [pc, #132]	; (8003e70 <vTaskSdCard+0x380>)
 8003dec:	f7ff f996 	bl	800311c <UsbPrint>
				//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
				res = f_sync(&EULER_LOG_FILE);
 8003df0:	4817      	ldr	r0, [pc, #92]	; (8003e50 <vTaskSdCard+0x360>)
 8003df2:	f00d f9ea 	bl	80111ca <f_sync>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8003dfc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0b9      	beq.n	8003d78 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8003e04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e08:	4619      	mov	r1, r3
 8003e0a:	481a      	ldr	r0, [pc, #104]	; (8003e74 <vTaskSdCard+0x384>)
 8003e0c:	f7ff f986 	bl	800311c <UsbPrint>
					goto resetSDCard;
 8003e10:	e67f      	b.n	8003b12 <vTaskSdCard+0x22>
 8003e12:	bf00      	nop
 8003e14:	0801831c 	.word	0x0801831c
 8003e18:	08018344 	.word	0x08018344
 8003e1c:	08018368 	.word	0x08018368
 8003e20:	20015100 	.word	0x20015100
 8003e24:	0801836c 	.word	0x0801836c
 8003e28:	20000358 	.word	0x20000358
 8003e2c:	08018398 	.word	0x08018398
 8003e30:	080183bc 	.word	0x080183bc
 8003e34:	080183c8 	.word	0x080183c8
 8003e38:	08018400 	.word	0x08018400
 8003e3c:	cccccccd 	.word	0xcccccccd
 8003e40:	51eb851f 	.word	0x51eb851f
 8003e44:	0801840c 	.word	0x0801840c
 8003e48:	08018430 	.word	0x08018430
 8003e4c:	08018460 	.word	0x08018460
 8003e50:	20014ed0 	.word	0x20014ed0
 8003e54:	08018484 	.word	0x08018484
 8003e58:	080184b0 	.word	0x080184b0
 8003e5c:	080184d8 	.word	0x080184d8
 8003e60:	0801857c 	.word	0x0801857c
 8003e64:	20015334 	.word	0x20015334
 8003e68:	08018508 	.word	0x08018508
 8003e6c:	20010d6c 	.word	0x20010d6c
 8003e70:	08018534 	.word	0x08018534
 8003e74:	08018554 	.word	0x08018554

08003e78 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af04      	add	r7, sp, #16
 8003e7e:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003e80:	f00d fee2 	bl	8011c48 <osKernelGetTickCount>
 8003e84:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8003e86:	f00d ff07 	bl	8011c98 <osKernelGetTickFreq>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4b4b      	ldr	r3, [pc, #300]	; (8003fbc <vTaskSensRead+0x144>)
 8003e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	60bb      	str	r3, [r7, #8]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8003e9e:	221c      	movs	r2, #28
 8003ea0:	4947      	ldr	r1, [pc, #284]	; (8003fc0 <vTaskSensRead+0x148>)
 8003ea2:	4848      	ldr	r0, [pc, #288]	; (8003fc4 <vTaskSensRead+0x14c>)
 8003ea4:	f005 f984 	bl	80091b0 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003ea8:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <vTaskSensRead+0x150>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	211e      	movs	r1, #30
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f00e f8aa 	bl	8012008 <osMutexAcquire>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d110      	bne.n	8003edc <vTaskSensRead+0x64>
			sb3_baro = sb3_data.baro;
 8003eba:	4b44      	ldr	r3, [pc, #272]	; (8003fcc <vTaskSensRead+0x154>)
 8003ebc:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <vTaskSensRead+0x148>)
 8003ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8003ec4:	4a42      	ldr	r2, [pc, #264]	; (8003fd0 <vTaskSensRead+0x158>)
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <vTaskSensRead+0x148>)
 8003ec8:	4614      	mov	r4, r2
 8003eca:	330c      	adds	r3, #12
 8003ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <vTaskSensRead+0x150>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f00e f8f4 	bl	80120c4 <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003edc:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <vTaskSensRead+0x15c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	211e      	movs	r1, #30
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f00e f890 	bl	8012008 <osMutexAcquire>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d110      	bne.n	8003f10 <vTaskSensRead+0x98>
			sb2_baro = sb3_data.baro;
 8003eee:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <vTaskSensRead+0x160>)
 8003ef0:	4a33      	ldr	r2, [pc, #204]	; (8003fc0 <vTaskSensRead+0x148>)
 8003ef2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ef4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 8003ef8:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <vTaskSensRead+0x164>)
 8003efa:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <vTaskSensRead+0x148>)
 8003efc:	4614      	mov	r4, r2
 8003efe:	330c      	adds	r3, #12
 8003f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 8003f06:	4b33      	ldr	r3, [pc, #204]	; (8003fd4 <vTaskSensRead+0x15c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f00e f8da 	bl	80120c4 <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003f10:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <vTaskSensRead+0x168>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	211e      	movs	r1, #30
 8003f16:	4618      	mov	r0, r3
 8003f18:	f00e f876 	bl	8012008 <osMutexAcquire>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d110      	bne.n	8003f44 <vTaskSensRead+0xcc>
			sb1_baro = sb3_data.baro;
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <vTaskSensRead+0x16c>)
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <vTaskSensRead+0x148>)
 8003f26:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8003f2c:	4a2e      	ldr	r2, [pc, #184]	; (8003fe8 <vTaskSensRead+0x170>)
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <vTaskSensRead+0x148>)
 8003f30:	4614      	mov	r4, r2
 8003f32:	330c      	adds	r3, #12
 8003f34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 8003f3a:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <vTaskSensRead+0x168>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f00e f8c0 	bl	80120c4 <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <vTaskSensRead+0x154>)
 8003f46:	6819      	ldr	r1, [r3, #0]
 8003f48:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <vTaskSensRead+0x154>)
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4827      	ldr	r0, [pc, #156]	; (8003fec <vTaskSensRead+0x174>)
 8003f50:	f7ff f8e4 	bl	800311c <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003f54:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <vTaskSensRead+0x158>)
 8003f56:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 8003f5a:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <vTaskSensRead+0x158>)
 8003f5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 8003f62:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <vTaskSensRead+0x158>)
 8003f66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 8003f6a:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <vTaskSensRead+0x158>)
 8003f6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 8003f72:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <vTaskSensRead+0x158>)
 8003f76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 8003f7a:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <vTaskSensRead+0x158>)
 8003f7e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 8003f82:	4618      	mov	r0, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	9002      	str	r0, [sp, #8]
 8003f8a:	9101      	str	r1, [sp, #4]
 8003f8c:	9200      	str	r2, [sp, #0]
 8003f8e:	4633      	mov	r3, r6
 8003f90:	462a      	mov	r2, r5
 8003f92:	4621      	mov	r1, r4
 8003f94:	4816      	ldr	r0, [pc, #88]	; (8003ff0 <vTaskSensRead+0x178>)
 8003f96:	f7ff f8c1 	bl	800311c <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <vTaskSensRead+0x154>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7fe ffe1 	bl	8002f68 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <vTaskSensRead+0x158>)
 8003fa8:	2202      	movs	r2, #2
 8003faa:	2103      	movs	r1, #3
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7fe ffdb 	bl	8002f68 <logSensor>

		osDelayUntil(tick_count);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f00d ff4e 	bl	8011e54 <osDelayUntil>
		tick_count += tick_update;
 8003fb8:	e76d      	b.n	8003e96 <vTaskSensRead+0x1e>
 8003fba:	bf00      	nop
 8003fbc:	51eb851f 	.word	0x51eb851f
 8003fc0:	200002a4 	.word	0x200002a4
 8003fc4:	2000aa4c 	.word	0x2000aa4c
 8003fc8:	2000abe4 	.word	0x2000abe4
 8003fcc:	20000288 	.word	0x20000288
 8003fd0:	20000294 	.word	0x20000294
 8003fd4:	20014e8c 	.word	0x20014e8c
 8003fd8:	20000250 	.word	0x20000250
 8003fdc:	2000025c 	.word	0x2000025c
 8003fe0:	2000ab80 	.word	0x2000ab80
 8003fe4:	20000218 	.word	0x20000218
 8003fe8:	20000224 	.word	0x20000224
 8003fec:	0801859c 	.word	0x0801859c
 8003ff0:	080185bc 	.word	0x080185bc

08003ff4 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8003ffc:	221c      	movs	r2, #28
 8003ffe:	4904      	ldr	r1, [pc, #16]	; (8004010 <HAL_SPI_RxCpltCallback+0x1c>)
 8004000:	4804      	ldr	r0, [pc, #16]	; (8004014 <HAL_SPI_RxCpltCallback+0x20>)
 8004002:	f005 f8d5 	bl	80091b0 <HAL_SPI_Receive_IT>

}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200002a4 	.word	0x200002a4
 8004014:	2000aa4c 	.word	0x2000aa4c

08004018 <vTaskStateEst>:
void ekf_update(ekf_state_t *ekf_state);
void ekf_prediction(ekf_state_t *ekf_state);



void vTaskStateEst(void *argument) {
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401a:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 800401e:	af0c      	add	r7, sp, #48	; 0x30
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env environment;
	init_env(&environment);
 8004024:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc ffa5 	bl	8000f78 <init_env>

	flight_phase_detection_t dummy_flight_phase_detection = { 0 };
 800402e:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
	flight_phase_detection_t flight_phase_detection = { 0 };
 800403a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004046:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fbc2 	bl	80037d4 <reset_flight_phase_detection>
	reset_flight_phase_detection(&dummy_flight_phase_detection);
 8004050:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fbbd 	bl	80037d4 <reset_flight_phase_detection>
	state_est_meas_t measured_data = { 0 };
 800405a:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800405e:	2254      	movs	r2, #84	; 0x54
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f012 fb4f 	bl	8016706 <memset>

	/* Initialise States */
	ekf_state_t ekf_state = { 0 };
 8004068:	f107 031c 	add.w	r3, r7, #28
 800406c:	4618      	mov	r0, r3
 800406e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2100      	movs	r1, #0
 8004076:	f012 fb46 	bl	8016706 <memset>
	reset_ekf_state(&ekf_state);
 800407a:	f107 031c 	add.w	r3, r7, #28
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa0a 	bl	8004498 <reset_ekf_state>

	/* Initialise placeholder variables for sensor reading */
	float Placeholder_measurement[3] = { 0 };
 8004084:	f107 0310 	add.w	r3, r7, #16
 8004088:	461a      	mov	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	6053      	str	r3, [r2, #4]
 8004090:	6093      	str	r3, [r2, #8]
	uint32_t Placeholder_timestamps[2] = { 0 };
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	461a      	mov	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	6053      	str	r3, [r2, #4]



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800409e:	f00d fdd3 	bl	8011c48 <osKernelGetTickCount>
 80040a2:	f8c7 059c 	str.w	r0, [r7, #1436]	; 0x59c
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 80040a6:	f00d fdf7 	bl	8011c98 <osKernelGetTickFreq>
 80040aa:	f8c7 0598 	str.w	r0, [r7, #1432]	; 0x598
	for (;;) {
		tick_count += tick_update;
 80040ae:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 80040b2:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 80040b6:	4413      	add	r3, r2
 80040b8:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c

		/* Acquire the Sensor data */
		/* Sensor Board 1 */
		if(osMutexGetOwner(sb1_mutex) == NULL){
 80040bc:	4bd2      	ldr	r3, [pc, #840]	; (8004408 <vTaskStateEst+0x3f0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f00e f84f 	bl	8012164 <osMutexGetOwner>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d159      	bne.n	8004180 <vTaskStateEst+0x168>
			Placeholder_measurement[0] = (float) sb1_data.baro.pressure;
 80040cc:	4bcf      	ldr	r3, [pc, #828]	; (800440c <vTaskStateEst+0x3f4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb1_data.baro.ts;
 80040e0:	4bca      	ldr	r3, [pc, #808]	; (800440c <vTaskStateEst+0x3f4>)
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	f107 0308 	add.w	r3, r7, #8
 80040e8:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = (float) sb1_data.imu.acc_z;
 80040ea:	4bc8      	ldr	r3, [pc, #800]	; (800440c <vTaskStateEst+0x3f4>)
 80040ec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f8:	f107 0310 	add.w	r3, r7, #16
 80040fc:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb1_data.imu.ts;
 8004100:	4bc2      	ldr	r3, [pc, #776]	; (800440c <vTaskStateEst+0x3f4>)
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	f107 0308 	add.w	r3, r7, #8
 8004108:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = (float) sb1_data.baro.temperature;
 800410a:	4bc0      	ldr	r3, [pc, #768]	; (800440c <vTaskStateEst+0x3f4>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004116:	f107 0310 	add.w	r3, r7, #16
 800411a:	edc3 7a02 	vstr	s15, [r3, #8]

			if(osMutexGetOwner(sb1_mutex) == NULL){
 800411e:	4bba      	ldr	r3, [pc, #744]	; (8004408 <vTaskStateEst+0x3f0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f00e f81e 	bl	8012164 <osMutexGetOwner>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d128      	bne.n	8004180 <vTaskStateEst+0x168>
				measured_data.baro_data[0].pressure = Placeholder_measurement[0];
 800412e:	f107 0310 	add.w	r3, r7, #16
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413a:	ee17 3a90 	vmov	r3, s15
 800413e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
				measured_data.baro_data[0].temperature = Placeholder_measurement[2];
 8004142:	f107 0310 	add.w	r3, r7, #16
 8004146:	edd3 7a02 	vldr	s15, [r3, #8]
 800414a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800414e:	ee17 3a90 	vmov	r3, s15
 8004152:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
				measured_data.baro_data[0].ts = Placeholder_timestamps[0];
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

				measured_data.imu_data[0].acc_z = Placeholder_measurement[1];
 8004160:	f107 0310 	add.w	r3, r7, #16
 8004164:	edd3 7a01 	vldr	s15, [r3, #4]
 8004168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800416c:	ee17 3a90 	vmov	r3, s15
 8004170:	b21b      	sxth	r3, r3
 8004172:	f8a7 354a 	strh.w	r3, [r7, #1354]	; 0x54a
				measured_data.imu_data[0].ts = Placeholder_timestamps[1];
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
			}
		}

		/* Sensor Board 2 */
		if(osMutexGetOwner(sb2_mutex) == NULL){
 8004180:	4ba3      	ldr	r3, [pc, #652]	; (8004410 <vTaskStateEst+0x3f8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f00d ffed 	bl	8012164 <osMutexGetOwner>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d159      	bne.n	8004244 <vTaskStateEst+0x22c>
			Placeholder_measurement[0] = (float) sb2_data.baro.pressure;
 8004190:	4ba0      	ldr	r3, [pc, #640]	; (8004414 <vTaskStateEst+0x3fc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419c:	f107 0310 	add.w	r3, r7, #16
 80041a0:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb2_data.baro.ts;
 80041a4:	4b9b      	ldr	r3, [pc, #620]	; (8004414 <vTaskStateEst+0x3fc>)
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	f107 0308 	add.w	r3, r7, #8
 80041ac:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = (float) sb2_data.imu.acc_z;
 80041ae:	4b99      	ldr	r3, [pc, #612]	; (8004414 <vTaskStateEst+0x3fc>)
 80041b0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb2_data.imu.ts;
 80041c4:	4b93      	ldr	r3, [pc, #588]	; (8004414 <vTaskStateEst+0x3fc>)
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	f107 0308 	add.w	r3, r7, #8
 80041cc:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = (float) sb2_data.baro.temperature;
 80041ce:	4b91      	ldr	r3, [pc, #580]	; (8004414 <vTaskStateEst+0x3fc>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	edc3 7a02 	vstr	s15, [r3, #8]
			if(osMutexGetOwner(sb2_mutex) == NULL){
 80041e2:	4b8b      	ldr	r3, [pc, #556]	; (8004410 <vTaskStateEst+0x3f8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f00d ffbc 	bl	8012164 <osMutexGetOwner>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d128      	bne.n	8004244 <vTaskStateEst+0x22c>
				measured_data.baro_data[1].pressure = Placeholder_measurement[0];
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041fe:	ee17 3a90 	vmov	r3, s15
 8004202:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
				measured_data.baro_data[1].temperature = Placeholder_measurement[2];
 8004206:	f107 0310 	add.w	r3, r7, #16
 800420a:	edd3 7a02 	vldr	s15, [r3, #8]
 800420e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004212:	ee17 3a90 	vmov	r3, s15
 8004216:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
				measured_data.baro_data[1].ts = Placeholder_timestamps[0];
 800421a:	f107 0308 	add.w	r3, r7, #8
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530

				measured_data.imu_data[1].acc_z = Placeholder_measurement[1];
 8004224:	f107 0310 	add.w	r3, r7, #16
 8004228:	edd3 7a01 	vldr	s15, [r3, #4]
 800422c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004230:	ee17 3a90 	vmov	r3, s15
 8004234:	b21b      	sxth	r3, r3
 8004236:	f8a7 355a 	strh.w	r3, [r7, #1370]	; 0x55a
				measured_data.imu_data[1].ts = Placeholder_timestamps[1];
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c

			}
		}

		/* Sensor Board 3 */
		if(osMutexGetOwner(sb3_mutex) == NULL){
 8004244:	4b74      	ldr	r3, [pc, #464]	; (8004418 <vTaskStateEst+0x400>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f00d ff8b 	bl	8012164 <osMutexGetOwner>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d159      	bne.n	8004308 <vTaskStateEst+0x2f0>
			Placeholder_measurement[0] = (float) sb3_data.baro.pressure;
 8004254:	4b71      	ldr	r3, [pc, #452]	; (800441c <vTaskStateEst+0x404>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004260:	f107 0310 	add.w	r3, r7, #16
 8004264:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb3_data.baro.ts;
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <vTaskStateEst+0x404>)
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	f107 0308 	add.w	r3, r7, #8
 8004270:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = (float) sb3_data.imu.acc_z;
 8004272:	4b6a      	ldr	r3, [pc, #424]	; (800441c <vTaskStateEst+0x404>)
 8004274:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004280:	f107 0310 	add.w	r3, r7, #16
 8004284:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb3_data.imu.ts;
 8004288:	4b64      	ldr	r3, [pc, #400]	; (800441c <vTaskStateEst+0x404>)
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	f107 0308 	add.w	r3, r7, #8
 8004290:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = (float) sb2_data.baro.temperature;
 8004292:	4b60      	ldr	r3, [pc, #384]	; (8004414 <vTaskStateEst+0x3fc>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429e:	f107 0310 	add.w	r3, r7, #16
 80042a2:	edc3 7a02 	vstr	s15, [r3, #8]
			if(osMutexGetOwner(sb3_mutex) == NULL){
 80042a6:	4b5c      	ldr	r3, [pc, #368]	; (8004418 <vTaskStateEst+0x400>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f00d ff5a 	bl	8012164 <osMutexGetOwner>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d128      	bne.n	8004308 <vTaskStateEst+0x2f0>
				measured_data.baro_data[2].pressure = Placeholder_measurement[0];
 80042b6:	f107 0310 	add.w	r3, r7, #16
 80042ba:	edd3 7a00 	vldr	s15, [r3]
 80042be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042c2:	ee17 3a90 	vmov	r3, s15
 80042c6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
				measured_data.baro_data[2].temperature = Placeholder_measurement[2];
 80042ca:	f107 0310 	add.w	r3, r7, #16
 80042ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80042d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042d6:	ee17 3a90 	vmov	r3, s15
 80042da:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
				measured_data.baro_data[2].ts = Placeholder_timestamps[0];
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c

				measured_data.imu_data[2].acc_z = Placeholder_measurement[1];
 80042e8:	f107 0310 	add.w	r3, r7, #16
 80042ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80042f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042f4:	ee17 3a90 	vmov	r3, s15
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
				measured_data.imu_data[2].ts = Placeholder_timestamps[1];
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			}
		}

		/* get new Phase Detection*/
		if(osMutexGetOwner(fsm_mutex) == NULL){
 8004308:	4b45      	ldr	r3, [pc, #276]	; (8004420 <vTaskStateEst+0x408>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f00d ff29 	bl	8012164 <osMutexGetOwner>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d114      	bne.n	8004342 <vTaskStateEst+0x32a>
			dummy_flight_phase_detection = global_flight_phase_detection;
 8004318:	4a42      	ldr	r2, [pc, #264]	; (8004424 <vTaskStateEst+0x40c>)
 800431a:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 800431e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004320:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(fsm_mutex) == NULL){
 8004324:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <vTaskStateEst+0x408>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f00d ff1b 	bl	8012164 <osMutexGetOwner>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <vTaskStateEst+0x32a>
				flight_phase_detection = dummy_flight_phase_detection;
 8004334:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004338:	f207 527c 	addw	r2, r7, #1404	; 0x57c
 800433c:	ca07      	ldmia	r2, {r0, r1, r2}
 800433e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		/* TODO Get current flight Phase from Global Variable */

		/* Start Kalman Update */

		/* Prediction Step */
		ekf_prediction(&ekf_state);
 8004342:	f107 031c 	add.w	r3, r7, #28
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f946 	bl	80045d8 <ekf_prediction>

		/* update Step */
		ekf_update(&ekf_state);
 800434c:	f107 031c 	add.w	r3, r7, #28
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f9b3 	bl	80046bc <ekf_update>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 8004356:	4b34      	ldr	r3, [pc, #208]	; (8004428 <vTaskStateEst+0x410>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	210a      	movs	r1, #10
 800435c:	4618      	mov	r0, r3
 800435e:	f00d fe53 	bl	8012008 <osMutexAcquire>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d14a      	bne.n	80043fe <vTaskStateEst+0x3e6>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data.position_world[2] = (int32_t)(ekf_state.x_est[0]*1000);
 8004368:	f107 031c 	add.w	r3, r7, #28
 800436c:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8004370:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800442c <vTaskStateEst+0x414>
 8004374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800437c:	ee17 2a90 	vmov	r2, s15
 8004380:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <vTaskStateEst+0x418>)
 8004382:	609a      	str	r2, [r3, #8]
			state_est_data.velocity_rocket[0] = (int32_t)(ekf_state.x_est[1]*1000);
 8004384:	f107 031c 	add.w	r3, r7, #28
 8004388:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 800438c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800442c <vTaskStateEst+0x414>
 8004390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004398:	ee17 2a90 	vmov	r2, s15
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <vTaskStateEst+0x418>)
 800439e:	60da      	str	r2, [r3, #12]
			state_est_data.velocity_world[2] = (int32_t)(ekf_state.x_est[1]*1000);
 80043a0:	f107 031c 	add.w	r3, r7, #28
 80043a4:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 80043a8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800442c <vTaskStateEst+0x414>
 80043ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b4:	ee17 2a90 	vmov	r2, s15
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <vTaskStateEst+0x418>)
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c
			state_est_data.acceleration_rocket[0] = (int32_t)(ekf_state.u[0]*1000);
 80043bc:	f107 031c 	add.w	r3, r7, #28
 80043c0:	edd3 7a64 	vldr	s15, [r3, #400]	; 0x190
 80043c4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800442c <vTaskStateEst+0x414>
 80043c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d0:	ee17 2a90 	vmov	r2, s15
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <vTaskStateEst+0x418>)
 80043d6:	619a      	str	r2, [r3, #24]
			state_est_data.acceleration_rocket[2] = (int32_t)(ekf_state.u[0]*1000);
 80043d8:	f107 031c 	add.w	r3, r7, #28
 80043dc:	edd3 7a64 	vldr	s15, [r3, #400]	; 0x190
 80043e0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800442c <vTaskStateEst+0x414>
 80043e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ec:	ee17 2a90 	vmov	r2, s15
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <vTaskStateEst+0x418>)
 80043f2:	621a      	str	r2, [r3, #32]
			osMutexRelease(state_est_mutex);
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <vTaskStateEst+0x410>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f00d fe63 	bl	80120c4 <osMutexRelease>
		}

		/* Update Environment for FSM */
		if(osMutexAcquire(environment_mutex, 10) == osOK){
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <vTaskStateEst+0x41c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	210a      	movs	r1, #10
 8004404:	4618      	mov	r0, r3
 8004406:	e017      	b.n	8004438 <vTaskStateEst+0x420>
 8004408:	2000ab80 	.word	0x2000ab80
 800440c:	20000234 	.word	0x20000234
 8004410:	20014e8c 	.word	0x20014e8c
 8004414:	2000026c 	.word	0x2000026c
 8004418:	2000abe4 	.word	0x2000abe4
 800441c:	200002a4 	.word	0x200002a4
 8004420:	20008878 	.word	0x20008878
 8004424:	2000030c 	.word	0x2000030c
 8004428:	2000abe8 	.word	0x2000abe8
 800442c:	447a0000 	.word	0x447a0000
 8004430:	200002c0 	.word	0x200002c0
 8004434:	200089c0 	.word	0x200089c0
 8004438:	f00d fde6 	bl	8012008 <osMutexAcquire>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <vTaskStateEst+0x442>
			global_env = environment;
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <vTaskStateEst+0x474>)
 8004444:	461c      	mov	r4, r3
 8004446:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800444a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800444c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(environment_mutex);
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <vTaskStateEst+0x478>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f00d fe35 	bl	80120c4 <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data);
 800445a:	f00d fbf5 	bl	8011c48 <osKernelGetTickCount>
 800445e:	4684      	mov	ip, r0
 8004460:	4e0c      	ldr	r6, [pc, #48]	; (8004494 <vTaskStateEst+0x47c>)
 8004462:	466d      	mov	r5, sp
 8004464:	f106 040c 	add.w	r4, r6, #12
 8004468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800446c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004470:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004474:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004478:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800447c:	4660      	mov	r0, ip
 800447e:	f7fe fe19 	bl	80030b4 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 8004482:	f8d7 059c 	ldr.w	r0, [r7, #1436]	; 0x59c
 8004486:	f00d fce5 	bl	8011e54 <osDelayUntil>
		tick_count += tick_update;
 800448a:	e610      	b.n	80040ae <vTaskStateEst+0x96>
 800448c:	200002fc 	.word	0x200002fc
 8004490:	200089c0 	.word	0x200089c0
 8004494:	200002c0 	.word	0x200002c0

08004498 <reset_ekf_state>:
	}
}


void reset_ekf_state(ekf_state_t *ekf_state){
 8004498:	b5b0      	push	{r4, r5, r7, lr}
 800449a:	b0b0      	sub	sp, #192	; 0xc0
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

	float A_init[NUMBER_STATES][NUMBER_STATES] = {{0, 1, 0}, {0, 0, 1}, {0, 0, 0}};
 80044a0:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <reset_ekf_state+0x138>)
 80044a2:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 80044a6:	461d      	mov	r5, r3
 80044a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	6023      	str	r3, [r4, #0]
	float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{0}, {1}, {0}};
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float G_init[NUMBER_STATES][NUMBER_NOISE] = {{0}, {1}, {0}};
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float H_init[NUMBER_SENSOR][NUMBER_STATES] = {{1, 0, 0},{1, 0, 0}, {1, 0, 0}, {1, 0, 0}, {1, 0, 0}, {1, 0, 0}};
 80044e4:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <reset_ekf_state+0x13c>)
 80044e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044ea:	4611      	mov	r1, r2
 80044ec:	2248      	movs	r2, #72	; 0x48
 80044ee:	4618      	mov	r0, r3
 80044f0:	f012 f8fe 	bl	80166f0 <memcpy>

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f012 f8f9 	bl	8016706 <memset>

	memcpy(ekf_state->H, H_init, sizeof(H_init));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	336c      	adds	r3, #108	; 0x6c
 8004518:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800451c:	2248      	movs	r2, #72	; 0x48
 800451e:	4618      	mov	r0, r3
 8004520:	f012 f8e6 	bl	80166f0 <memcpy>
	memcpy(ekf_state->Ad, A_init, sizeof(A_init));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	4618      	mov	r0, r3
 800452e:	f012 f8df 	bl	80166f0 <memcpy>
	memcpy(ekf_state->Bd, B_init, sizeof(B_init));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3348      	adds	r3, #72	; 0x48
 8004536:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800453a:	220c      	movs	r2, #12
 800453c:	4618      	mov	r0, r3
 800453e:	f012 f8d7 	bl	80166f0 <memcpy>
    memcpy(ekf_state->Gd, G_init, sizeof(G_init));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3354      	adds	r3, #84	; 0x54
 8004546:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800454a:	220c      	movs	r2, #12
 800454c:	4618      	mov	r0, r3
 800454e:	f012 f8cf 	bl	80166f0 <memcpy>
    memcpy(ekf_state->x_est, x_est_init, sizeof(x_est_init));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8004558:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800455c:	220c      	movs	r2, #12
 800455e:	4618      	mov	r0, r3
 8004560:	f012 f8c6 	bl	80166f0 <memcpy>
    memcpy(ekf_state->P_est, P_est_init, sizeof(P_est_init));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800456a:	f107 010c 	add.w	r1, r7, #12
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	4618      	mov	r0, r3
 8004572:	f012 f8bd 	bl	80166f0 <memcpy>

    memset(ekf_state->Q, 0, NUMBER_NOISE*NUMBER_NOISE*sizeof(ekf_state->Q[0][0]));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	33fc      	adds	r3, #252	; 0xfc
 800457a:	2204      	movs	r2, #4
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f012 f8c1 	bl	8016706 <memset>
    memset(ekf_state->R, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(ekf_state->R[0][0]));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800458a:	2290      	movs	r2, #144	; 0x90
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f012 f8b9 	bl	8016706 <memset>

    transpose(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->Ad_T);
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3324      	adds	r3, #36	; 0x24
 800459a:	2103      	movs	r1, #3
 800459c:	2003      	movs	r0, #3
 800459e:	f7fd f8c4 	bl	800172a <transpose>
    transpose(NUMBER_STATES, NUMBER_NOISE, ekf_state->Gd, ekf_state->Gd_T);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3360      	adds	r3, #96	; 0x60
 80045ac:	2101      	movs	r1, #1
 80045ae:	2003      	movs	r0, #3
 80045b0:	f7fd f8bb 	bl	800172a <transpose>
    transpose(NUMBER_SENSOR, NUMBER_STATES, ekf_state->H, ekf_state->H_T);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	33b4      	adds	r3, #180	; 0xb4
 80045be:	2103      	movs	r1, #3
 80045c0:	2006      	movs	r0, #6
 80045c2:	f7fd f8b2 	bl	800172a <transpose>
}
 80045c6:	bf00      	nop
 80045c8:	37c0      	adds	r7, #192	; 0xc0
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bdb0      	pop	{r4, r5, r7, pc}
 80045ce:	bf00      	nop
 80045d0:	080185fc 	.word	0x080185fc
 80045d4:	08018620 	.word	0x08018620

080045d8 <ekf_prediction>:

void ekf_prediction(ekf_state_t *ekf_state){
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af04      	add	r7, sp, #16
 80045de:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->x_est, ekf_state->x_priori, true);
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80045ee:	2201      	movs	r2, #1
 80045f0:	9201      	str	r2, [sp, #4]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	4603      	mov	r3, r0
 80045f6:	460a      	mov	r2, r1
 80045f8:	2103      	movs	r1, #3
 80045fa:	2003      	movs	r0, #3
 80045fc:	f7fd fabf 	bl	8001b7e <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, ekf_state->Bd, ekf_state->u, ekf_state->x_priori, false);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004612:	2200      	movs	r2, #0
 8004614:	9201      	str	r2, [sp, #4]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	4603      	mov	r3, r0
 800461a:	460a      	mov	r2, r1
 800461c:	2101      	movs	r1, #1
 800461e:	2003      	movs	r0, #3
 8004620:	f7fd faad 	bl	8001b7e <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->P_est, ekf_state->Placeholder_Ad_mult_P_est, true);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 8004632:	2101      	movs	r1, #1
 8004634:	9102      	str	r1, [sp, #8]
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4603      	mov	r3, r0
 800463c:	2203      	movs	r2, #3
 800463e:	2103      	movs	r1, #3
 8004640:	2003      	movs	r0, #3
 8004642:	f7fd fa02 	bl	8001a4a <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_NOISE, ekf_state->Gd, ekf_state->Q, ekf_state->Placeholder_Gd_mult_Q, true);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	33fc      	adds	r3, #252	; 0xfc
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	f502 726c 	add.w	r2, r2, #944	; 0x3b0
 8004656:	2101      	movs	r1, #1
 8004658:	9102      	str	r1, [sp, #8]
 800465a:	9201      	str	r2, [sp, #4]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4603      	mov	r3, r0
 8004660:	2201      	movs	r2, #1
 8004662:	2101      	movs	r1, #1
 8004664:	2003      	movs	r0, #3
 8004666:	f7fd f9f0 	bl	8001a4a <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_Ad_mult_P_est, ekf_state->Ad_T, ekf_state->P_priori, true);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3324      	adds	r3, #36	; 0x24
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	f502 72e8 	add.w	r2, r2, #464	; 0x1d0
 800467a:	2101      	movs	r1, #1
 800467c:	9102      	str	r1, [sp, #8]
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4603      	mov	r3, r0
 8004684:	2203      	movs	r2, #3
 8004686:	2103      	movs	r1, #3
 8004688:	2003      	movs	r0, #3
 800468a:	f7fd f9de 	bl	8001a4a <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_STATES, ekf_state->Placeholder_Gd_mult_Q, ekf_state->Gd_T, ekf_state->P_priori, false);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3360      	adds	r3, #96	; 0x60
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	f502 72e8 	add.w	r2, r2, #464	; 0x1d0
 800469e:	2100      	movs	r1, #0
 80046a0:	9102      	str	r1, [sp, #8]
 80046a2:	9201      	str	r2, [sp, #4]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4603      	mov	r3, r0
 80046a8:	2203      	movs	r2, #3
 80046aa:	2101      	movs	r1, #1
 80046ac:	2003      	movs	r0, #3
 80046ae:	f7fd f9cc 	bl	8001a4a <matmul>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <ekf_update>:

void ekf_update(ekf_state_t *ekf_state) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af04      	add	r7, sp, #16
 80046c2:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_SENSOR, NUMBER_STATES, ekf_state->H, ekf_state->x_priori, ekf_state->y, true);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f503 70e2 	add.w	r0, r3, #452	; 0x1c4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80046d6:	2201      	movs	r2, #1
 80046d8:	9201      	str	r2, [sp, #4]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4603      	mov	r3, r0
 80046de:	460a      	mov	r2, r1
 80046e0:	2103      	movs	r1, #3
 80046e2:	2006      	movs	r0, #6
 80046e4:	f7fd fa4b 	bl	8001b7e <matvecprod>
    vecsub(NUMBER_SENSOR, ekf_state->z, ekf_state->y, ekf_state->y);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 71fa 	add.w	r1, r3, #500	; 0x1f4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80046fa:	2006      	movs	r0, #6
 80046fc:	f7fd f894 	bl	8001828 <vecsub>

    /* S = H*P*H_T + R */
    matmul(NUMBER_SENSOR, NUMBER_STATES, NUMBER_STATES, ekf_state->H, ekf_state->P_priori, ekf_state->Placeholder_H_mult_P_priori, true);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
 8004712:	2101      	movs	r1, #1
 8004714:	9102      	str	r1, [sp, #8]
 8004716:	9201      	str	r2, [sp, #4]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	4603      	mov	r3, r0
 800471c:	2203      	movs	r2, #3
 800471e:	2103      	movs	r1, #3
 8004720:	2006      	movs	r0, #6
 8004722:	f7fd f992 	bl	8001a4a <matmul>
    matmul(NUMBER_SENSOR, NUMBER_STATES, NUMBER_SENSOR, ekf_state->Placeholder_H_mult_P_priori, ekf_state->H_T, ekf_state->S, true);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	33b4      	adds	r3, #180	; 0xb4
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8004736:	2101      	movs	r1, #1
 8004738:	9102      	str	r1, [sp, #8]
 800473a:	9201      	str	r2, [sp, #4]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4603      	mov	r3, r0
 8004740:	2206      	movs	r2, #6
 8004742:	2103      	movs	r1, #3
 8004744:	2006      	movs	r0, #6
 8004746:	f7fd f980 	bl	8001a4a <matmul>
    matadd(NUMBER_SENSOR,  NUMBER_SENSOR, ekf_state->S, ekf_state->R, ekf_state->S);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	460b      	mov	r3, r1
 8004760:	2106      	movs	r1, #6
 8004762:	2006      	movs	r0, #6
 8004764:	f7fd f88b 	bl	800187e <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(ekf_state->S_inv, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(ekf_state->S_inv[0][0]));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800476e:	2290      	movs	r2, #144	; 0x90
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f011 ffc7 	bl	8016706 <memset>
    pinv(NUMBER_SENSOR, LAMBDA, ekf_state->S, ekf_state->S_inv);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 7109 	add.w	r1, r3, #548	; 0x224
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004784:	461a      	mov	r2, r3
 8004786:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8004894 <ekf_update+0x1d8>
 800478a:	2006      	movs	r0, #6
 800478c:	f7fd fa52 	bl	8001c34 <pinv>

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_SENSOR, ekf_state->P_priori, ekf_state->H_T, ekf_state->Placeholder_P_priori_mult_H_T, true);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	33b4      	adds	r3, #180	; 0xb4
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	f202 424c 	addw	r2, r2, #1100	; 0x44c
 80047a0:	2101      	movs	r1, #1
 80047a2:	9102      	str	r1, [sp, #8]
 80047a4:	9201      	str	r2, [sp, #4]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	4603      	mov	r3, r0
 80047aa:	2206      	movs	r2, #6
 80047ac:	2103      	movs	r1, #3
 80047ae:	2003      	movs	r0, #3
 80047b0:	f7fd f94b 	bl	8001a4a <matmul>
    matmul(NUMBER_STATES, NUMBER_SENSOR, NUMBER_SENSOR, ekf_state->Placeholder_P_priori_mult_H_T, ekf_state->S_inv, ekf_state->K, true);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f203 404c 	addw	r0, r3, #1100	; 0x44c
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	f502 7251 	add.w	r2, r2, #836	; 0x344
 80047c6:	2101      	movs	r1, #1
 80047c8:	9102      	str	r1, [sp, #8]
 80047ca:	9201      	str	r2, [sp, #4]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4603      	mov	r3, r0
 80047d0:	2206      	movs	r2, #6
 80047d2:	2106      	movs	r1, #6
 80047d4:	2003      	movs	r0, #3
 80047d6:	f7fd f938 	bl	8001a4a <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_SENSOR, ekf_state->K, ekf_state->y, ekf_state->x_est, true);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 7151 	add.w	r1, r3, #836	; 0x344
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80047ec:	2201      	movs	r2, #1
 80047ee:	9201      	str	r2, [sp, #4]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4603      	mov	r3, r0
 80047f4:	460a      	mov	r2, r1
 80047f6:	2106      	movs	r1, #6
 80047f8:	2003      	movs	r0, #3
 80047fa:	f7fd f9c0 	bl	8001b7e <matvecprod>
    vecadd(NUMBER_STATES, ekf_state->x_priori, ekf_state->x_est, ekf_state->x_est);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8004810:	2003      	movs	r0, #3
 8004812:	f7fc ffde 	bl	80017d2 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, ekf_state->Placeholder_eye);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800481c:	4619      	mov	r1, r3
 800481e:	2003      	movs	r0, #3
 8004820:	f7fc ff37 	bl	8001692 <eye>
    matmul(NUMBER_STATES, NUMBER_SENSOR, NUMBER_STATES, ekf_state->K, ekf_state->H, ekf_state->Placeholder_K_mult_H, true);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	336c      	adds	r3, #108	; 0x6c
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	f202 42dc 	addw	r2, r2, #1244	; 0x4dc
 8004834:	2101      	movs	r1, #1
 8004836:	9102      	str	r1, [sp, #8]
 8004838:	9201      	str	r2, [sp, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4603      	mov	r3, r0
 800483e:	2203      	movs	r2, #3
 8004840:	2106      	movs	r1, #6
 8004842:	2003      	movs	r0, #3
 8004844:	f7fd f901 	bl	8001a4a <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_eye, ekf_state->Placeholder_K_mult_H, ekf_state->Placeholder_P_est);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 6297 	add.w	r2, r3, #1208	; 0x4b8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f203 41dc 	addw	r1, r3, #1244	; 0x4dc
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	460b      	mov	r3, r1
 800485e:	2103      	movs	r1, #3
 8004860:	2003      	movs	r0, #3
 8004862:	f7fd f87f 	bl	8001964 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, ekf_state->Placeholder_P_est, ekf_state->P_priori, ekf_state->P_est, true);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8004878:	2101      	movs	r1, #1
 800487a:	9102      	str	r1, [sp, #8]
 800487c:	9201      	str	r2, [sp, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4603      	mov	r3, r0
 8004882:	2203      	movs	r2, #3
 8004884:	2103      	movs	r1, #3
 8004886:	2003      	movs	r0, #3
 8004888:	f7fd f8df 	bl	8001a4a <matmul>
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	3dcccccd 	.word	0x3dcccccd

08004898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800489c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800489e:	e003      	b.n	80048a8 <LoopCopyDataInit>

080048a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80048a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80048a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80048a6:	3104      	adds	r1, #4

080048a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80048a8:	480b      	ldr	r0, [pc, #44]	; (80048d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80048ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80048ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048b0:	d3f6      	bcc.n	80048a0 <CopyDataInit>
  ldr  r2, =_sbss
 80048b2:	4a0b      	ldr	r2, [pc, #44]	; (80048e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80048b4:	e002      	b.n	80048bc <LoopFillZerobss>

080048b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80048b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048b8:	f842 3b04 	str.w	r3, [r2], #4

080048bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048c0:	d3f9      	bcc.n	80048b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048c2:	f7fe fb1b 	bl	8002efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048c6:	f011 fedf 	bl	8016688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048ca:	f7fc fb85 	bl	8000fd8 <main>
  bx  lr    
 80048ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048d0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80048d4:	08018948 	.word	0x08018948
  ldr  r0, =_sdata
 80048d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048dc:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80048e0:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 80048e4:	200170c0 	.word	0x200170c0

080048e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048e8:	e7fe      	b.n	80048e8 <ADC_IRQHandler>

080048ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ee:	2003      	movs	r0, #3
 80048f0:	f000 f8f7 	bl	8004ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fe fa13 	bl	8002d20 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048fa:	f7fd ffcf 	bl	800289c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_IncTick+0x20>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_IncTick+0x24>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4413      	add	r3, r2
 8004914:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_IncTick+0x24>)
 8004916:	6013      	str	r3, [r2, #0]
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000008 	.word	0x20000008
 8004928:	20015338 	.word	0x20015338

0800492c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return uwTick;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <HAL_GetTick+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20015338 	.word	0x20015338

08004944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800494c:	f7ff ffee 	bl	800492c <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d005      	beq.n	800496a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_Delay+0x40>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800496a:	bf00      	nop
 800496c:	f7ff ffde 	bl	800492c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d8f7      	bhi.n	800496c <HAL_Delay+0x28>
  {
  }
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000008 	.word	0x20000008

08004988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <__NVIC_SetPriorityGrouping+0x40>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049a4:	4013      	ands	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <__NVIC_SetPriorityGrouping+0x44>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b6:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <__NVIC_SetPriorityGrouping+0x40>)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	60d3      	str	r3, [r2, #12]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed00 	.word	0xe000ed00
 80049cc:	05fa0000 	.word	0x05fa0000

080049d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <__NVIC_GetPriorityGrouping+0x18>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	0a1b      	lsrs	r3, r3, #8
 80049da:	f003 0307 	and.w	r3, r3, #7
}
 80049de:	4618      	mov	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	db0b      	blt.n	8004a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	4907      	ldr	r1, [pc, #28]	; (8004a24 <__NVIC_EnableIRQ+0x38>)
 8004a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	e000e100 	.word	0xe000e100

08004a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	6039      	str	r1, [r7, #0]
 8004a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	db0a      	blt.n	8004a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	490c      	ldr	r1, [pc, #48]	; (8004a74 <__NVIC_SetPriority+0x4c>)
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	0112      	lsls	r2, r2, #4
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a50:	e00a      	b.n	8004a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4908      	ldr	r1, [pc, #32]	; (8004a78 <__NVIC_SetPriority+0x50>)
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	3b04      	subs	r3, #4
 8004a60:	0112      	lsls	r2, r2, #4
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	440b      	add	r3, r1
 8004a66:	761a      	strb	r2, [r3, #24]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000e100 	.word	0xe000e100
 8004a78:	e000ed00 	.word	0xe000ed00

08004a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	; 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f1c3 0307 	rsb	r3, r3, #7
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	bf28      	it	cs
 8004a9a:	2304      	movcs	r3, #4
 8004a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	2b06      	cmp	r3, #6
 8004aa4:	d902      	bls.n	8004aac <NVIC_EncodePriority+0x30>
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3b03      	subs	r3, #3
 8004aaa:	e000      	b.n	8004aae <NVIC_EncodePriority+0x32>
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43da      	mvns	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	401a      	ands	r2, r3
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	43d9      	mvns	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad4:	4313      	orrs	r3, r2
         );
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3724      	adds	r7, #36	; 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ff4c 	bl	8004988 <__NVIC_SetPriorityGrouping>
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b0a:	f7ff ff61 	bl	80049d0 <__NVIC_GetPriorityGrouping>
 8004b0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	f7ff ffb1 	bl	8004a7c <NVIC_EncodePriority>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ff80 	bl	8004a28 <__NVIC_SetPriority>
}
 8004b28:	bf00      	nop
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ff54 	bl	80049ec <__NVIC_EnableIRQ>
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7ff fee8 	bl	800492c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e099      	b.n	8004c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b88:	e00f      	b.n	8004baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b8a:	f7ff fecf 	bl	800492c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d908      	bls.n	8004baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e078      	b.n	8004c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e8      	bne.n	8004b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <HAL_DMA_Init+0x158>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d107      	bne.n	8004c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d117      	bne.n	8004c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 faa5 	bl	80051a0 <DMA_CheckFifoParam>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2240      	movs	r2, #64	; 0x40
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e016      	b.n	8004c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fa5c 	bl	8005134 <DMA_CalcBaseAndBitshift>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	223f      	movs	r2, #63	; 0x3f
 8004c86:	409a      	lsls	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	f010803f 	.word	0xf010803f

08004ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_DMA_Start_IT+0x26>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e048      	b.n	8004d60 <HAL_DMA_Start_IT+0xb8>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d137      	bne.n	8004d52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f9ee 	bl	80050d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	223f      	movs	r2, #63	; 0x3f
 8004d02:	409a      	lsls	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0216 	orr.w	r2, r2, #22
 8004d16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d26:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0208 	orr.w	r2, r2, #8
 8004d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e005      	b.n	8004d5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d004      	beq.n	8004d86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2280      	movs	r2, #128	; 0x80
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00c      	b.n	8004da0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2205      	movs	r2, #5
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004db8:	4b92      	ldr	r3, [pc, #584]	; (8005004 <HAL_DMA_IRQHandler+0x258>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a92      	ldr	r2, [pc, #584]	; (8005008 <HAL_DMA_IRQHandler+0x25c>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	0a9b      	lsrs	r3, r3, #10
 8004dc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01a      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0204 	bic.w	r2, r2, #4
 8004dfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e04:	2208      	movs	r2, #8
 8004e06:	409a      	lsls	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	f043 0201 	orr.w	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d012      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f043 0202 	orr.w	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	2204      	movs	r2, #4
 8004e54:	409a      	lsls	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d012      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e70:	2204      	movs	r2, #4
 8004e72:	409a      	lsls	r2, r3
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f043 0204 	orr.w	r2, r3, #4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	2210      	movs	r2, #16
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d043      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d03c      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d018      	beq.n	8004eee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d108      	bne.n	8004edc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d024      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
 8004eda:	e01f      	b.n	8004f1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
 8004eec:	e016      	b.n	8004f1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0208 	bic.w	r2, r2, #8
 8004f0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	2220      	movs	r2, #32
 8004f22:	409a      	lsls	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 808e 	beq.w	800504a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8086 	beq.w	800504a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	2220      	movs	r2, #32
 8004f44:	409a      	lsls	r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d136      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0216 	bic.w	r2, r2, #22
 8004f64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <HAL_DMA_IRQHandler+0x1da>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0208 	bic.w	r2, r2, #8
 8004f94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	223f      	movs	r2, #63	; 0x3f
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d07d      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
        }
        return;
 8004fc2:	e078      	b.n	80050b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01c      	beq.n	800500c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d108      	bne.n	8004ff2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d030      	beq.n	800504a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
 8004ff0:	e02b      	b.n	800504a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d027      	beq.n	800504a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
 8005002:	e022      	b.n	800504a <HAL_DMA_IRQHandler+0x29e>
 8005004:	20000000 	.word	0x20000000
 8005008:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10f      	bne.n	800503a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0210 	bic.w	r2, r2, #16
 8005028:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	2b00      	cmp	r3, #0
 8005050:	d032      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d022      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2205      	movs	r2, #5
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	3301      	adds	r3, #1
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	429a      	cmp	r2, r3
 8005080:	d307      	bcc.n	8005092 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f2      	bne.n	8005076 <HAL_DMA_IRQHandler+0x2ca>
 8005090:	e000      	b.n	8005094 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005092:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
 80050b4:	e000      	b.n	80050b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80050b6:	bf00      	nop
    }
  }
}
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop

080050c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d108      	bne.n	8005118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005116:	e007      	b.n	8005128 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	60da      	str	r2, [r3, #12]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	3b10      	subs	r3, #16
 8005144:	4a13      	ldr	r2, [pc, #76]	; (8005194 <DMA_CalcBaseAndBitshift+0x60>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800514e:	4a12      	ldr	r2, [pc, #72]	; (8005198 <DMA_CalcBaseAndBitshift+0x64>)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d908      	bls.n	8005174 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <DMA_CalcBaseAndBitshift+0x68>)
 800516a:	4013      	ands	r3, r2
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	659a      	str	r2, [r3, #88]	; 0x58
 8005172:	e006      	b.n	8005182 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	4b08      	ldr	r3, [pc, #32]	; (800519c <DMA_CalcBaseAndBitshift+0x68>)
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	aaaaaaab 	.word	0xaaaaaaab
 8005198:	08018820 	.word	0x08018820
 800519c:	fffffc00 	.word	0xfffffc00

080051a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11f      	bne.n	80051fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d855      	bhi.n	800526c <DMA_CheckFifoParam+0xcc>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <DMA_CheckFifoParam+0x28>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051eb 	.word	0x080051eb
 80051d0:	080051d9 	.word	0x080051d9
 80051d4:	0800526d 	.word	0x0800526d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d045      	beq.n	8005270 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e8:	e042      	b.n	8005270 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051f2:	d13f      	bne.n	8005274 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f8:	e03c      	b.n	8005274 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005202:	d121      	bne.n	8005248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d836      	bhi.n	8005278 <DMA_CheckFifoParam+0xd8>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <DMA_CheckFifoParam+0x70>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005221 	.word	0x08005221
 8005214:	08005227 	.word	0x08005227
 8005218:	08005221 	.word	0x08005221
 800521c:	08005239 	.word	0x08005239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	e02f      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d024      	beq.n	800527c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005236:	e021      	b.n	800527c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005240:	d11e      	bne.n	8005280 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005246:	e01b      	b.n	8005280 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d902      	bls.n	8005254 <DMA_CheckFifoParam+0xb4>
 800524e:	2b03      	cmp	r3, #3
 8005250:	d003      	beq.n	800525a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005252:	e018      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e015      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00e      	beq.n	8005284 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
      break;
 800526a:	e00b      	b.n	8005284 <DMA_CheckFifoParam+0xe4>
      break;
 800526c:	bf00      	nop
 800526e:	e00a      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      break;
 8005270:	bf00      	nop
 8005272:	e008      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      break;
 8005274:	bf00      	nop
 8005276:	e006      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      break;
 8005278:	bf00      	nop
 800527a:	e004      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      break;
 800527c:	bf00      	nop
 800527e:	e002      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      break;   
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <DMA_CheckFifoParam+0xe6>
      break;
 8005284:	bf00      	nop
    }
  } 
  
  return status; 
 8005286:	7bfb      	ldrb	r3, [r7, #15]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005294:	b480      	push	{r7}
 8005296:	b089      	sub	sp, #36	; 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	e175      	b.n	80055a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052b4:	2201      	movs	r2, #1
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4013      	ands	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	f040 8164 	bne.w	800559a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d00b      	beq.n	80052f2 <HAL_GPIO_Init+0x5e>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d007      	beq.n	80052f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052e6:	2b11      	cmp	r3, #17
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b12      	cmp	r3, #18
 80052f0:	d130      	bne.n	8005354 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	2203      	movs	r2, #3
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005328:	2201      	movs	r2, #1
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 0201 	and.w	r2, r3, #1
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	2203      	movs	r2, #3
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	43db      	mvns	r3, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4013      	ands	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d003      	beq.n	8005394 <HAL_GPIO_Init+0x100>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b12      	cmp	r3, #18
 8005392:	d123      	bne.n	80053dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	08da      	lsrs	r2, r3, #3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3208      	adds	r2, #8
 800539c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	220f      	movs	r2, #15
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	08da      	lsrs	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3208      	adds	r2, #8
 80053d6:	69b9      	ldr	r1, [r7, #24]
 80053d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	2203      	movs	r2, #3
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0203 	and.w	r2, r3, #3
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80be 	beq.w	800559a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800541e:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <HAL_GPIO_Init+0x320>)
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	4a64      	ldr	r2, [pc, #400]	; (80055b4 <HAL_GPIO_Init+0x320>)
 8005424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005428:	6453      	str	r3, [r2, #68]	; 0x44
 800542a:	4b62      	ldr	r3, [pc, #392]	; (80055b4 <HAL_GPIO_Init+0x320>)
 800542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005436:	4a60      	ldr	r2, [pc, #384]	; (80055b8 <HAL_GPIO_Init+0x324>)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	089b      	lsrs	r3, r3, #2
 800543c:	3302      	adds	r3, #2
 800543e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005442:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	220f      	movs	r2, #15
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a57      	ldr	r2, [pc, #348]	; (80055bc <HAL_GPIO_Init+0x328>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d037      	beq.n	80054d2 <HAL_GPIO_Init+0x23e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a56      	ldr	r2, [pc, #344]	; (80055c0 <HAL_GPIO_Init+0x32c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d031      	beq.n	80054ce <HAL_GPIO_Init+0x23a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a55      	ldr	r2, [pc, #340]	; (80055c4 <HAL_GPIO_Init+0x330>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d02b      	beq.n	80054ca <HAL_GPIO_Init+0x236>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a54      	ldr	r2, [pc, #336]	; (80055c8 <HAL_GPIO_Init+0x334>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d025      	beq.n	80054c6 <HAL_GPIO_Init+0x232>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a53      	ldr	r2, [pc, #332]	; (80055cc <HAL_GPIO_Init+0x338>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01f      	beq.n	80054c2 <HAL_GPIO_Init+0x22e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a52      	ldr	r2, [pc, #328]	; (80055d0 <HAL_GPIO_Init+0x33c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d019      	beq.n	80054be <HAL_GPIO_Init+0x22a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a51      	ldr	r2, [pc, #324]	; (80055d4 <HAL_GPIO_Init+0x340>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_GPIO_Init+0x226>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a50      	ldr	r2, [pc, #320]	; (80055d8 <HAL_GPIO_Init+0x344>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00d      	beq.n	80054b6 <HAL_GPIO_Init+0x222>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4f      	ldr	r2, [pc, #316]	; (80055dc <HAL_GPIO_Init+0x348>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <HAL_GPIO_Init+0x21e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a4e      	ldr	r2, [pc, #312]	; (80055e0 <HAL_GPIO_Init+0x34c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d101      	bne.n	80054ae <HAL_GPIO_Init+0x21a>
 80054aa:	2309      	movs	r3, #9
 80054ac:	e012      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054ae:	230a      	movs	r3, #10
 80054b0:	e010      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054b2:	2308      	movs	r3, #8
 80054b4:	e00e      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054b6:	2307      	movs	r3, #7
 80054b8:	e00c      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054ba:	2306      	movs	r3, #6
 80054bc:	e00a      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054be:	2305      	movs	r3, #5
 80054c0:	e008      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054c2:	2304      	movs	r3, #4
 80054c4:	e006      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054c6:	2303      	movs	r3, #3
 80054c8:	e004      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e002      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_GPIO_Init+0x240>
 80054d2:	2300      	movs	r3, #0
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	f002 0203 	and.w	r2, r2, #3
 80054da:	0092      	lsls	r2, r2, #2
 80054dc:	4093      	lsls	r3, r2
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80054e4:	4934      	ldr	r1, [pc, #208]	; (80055b8 <HAL_GPIO_Init+0x324>)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	3302      	adds	r3, #2
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054f2:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <HAL_GPIO_Init+0x350>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800551c:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <HAL_GPIO_Init+0x350>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005540:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800556a:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <HAL_GPIO_Init+0x350>)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005570:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	f67f ae86 	bls.w	80052b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055a8:	bf00      	nop
 80055aa:	3724      	adds	r7, #36	; 0x24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40013800 	.word	0x40013800
 80055bc:	40020000 	.word	0x40020000
 80055c0:	40020400 	.word	0x40020400
 80055c4:	40020800 	.word	0x40020800
 80055c8:	40020c00 	.word	0x40020c00
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40021400 	.word	0x40021400
 80055d4:	40021800 	.word	0x40021800
 80055d8:	40021c00 	.word	0x40021c00
 80055dc:	40022000 	.word	0x40022000
 80055e0:	40022400 	.word	0x40022400
 80055e4:	40013c00 	.word	0x40013c00

080055e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	807b      	strh	r3, [r7, #2]
 80055f4:	4613      	mov	r3, r2
 80055f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055f8:	787b      	ldrb	r3, [r7, #1]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055fe:	887a      	ldrh	r2, [r7, #2]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005604:	e003      	b.n	800560e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005606:	887b      	ldrh	r3, [r7, #2]
 8005608:	041a      	lsls	r2, r3, #16
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	619a      	str	r2, [r3, #24]
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800561a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561c:	b08f      	sub	sp, #60	; 0x3c
 800561e:	af0a      	add	r7, sp, #40	; 0x28
 8005620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e116      	b.n	800585a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f010 fcc6 	bl	8015fd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2203      	movs	r2, #3
 8005650:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f006 fa57 	bl	800bb1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	687e      	ldr	r6, [r7, #4]
 8005678:	466d      	mov	r5, sp
 800567a:	f106 0410 	add.w	r4, r6, #16
 800567e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800568a:	e885 0003 	stmia.w	r5, {r0, r1}
 800568e:	1d33      	adds	r3, r6, #4
 8005690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005692:	6838      	ldr	r0, [r7, #0]
 8005694:	f006 f938 	bl	800b908 <USB_CoreInit>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e0d7      	b.n	800585a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2100      	movs	r1, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f006 fa45 	bl	800bb40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e04a      	b.n	8005752 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	333d      	adds	r3, #61	; 0x3d
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056d0:	7bfa      	ldrb	r2, [r7, #15]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	333c      	adds	r3, #60	; 0x3c
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	b298      	uxth	r0, r3
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	3342      	adds	r3, #66	; 0x42
 80056f8:	4602      	mov	r2, r0
 80056fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056fc:	7bfa      	ldrb	r2, [r7, #15]
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	333f      	adds	r3, #63	; 0x3f
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	3344      	adds	r3, #68	; 0x44
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005724:	7bfa      	ldrb	r2, [r7, #15]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	3348      	adds	r3, #72	; 0x48
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3350      	adds	r3, #80	; 0x50
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	3301      	adds	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3af      	bcc.n	80056bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575c:	2300      	movs	r3, #0
 800575e:	73fb      	strb	r3, [r7, #15]
 8005760:	e044      	b.n	80057ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005762:	7bfa      	ldrb	r2, [r7, #15]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005778:	7bfa      	ldrb	r2, [r7, #15]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800578a:	7bfa      	ldrb	r2, [r7, #15]
 800578c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800578e:	7bfa      	ldrb	r2, [r7, #15]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057a4:	7bfa      	ldrb	r2, [r7, #15]
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057ba:	7bfa      	ldrb	r2, [r7, #15]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057d0:	7bfa      	ldrb	r2, [r7, #15]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	3301      	adds	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d3b5      	bcc.n	8005762 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	687e      	ldr	r6, [r7, #4]
 80057fe:	466d      	mov	r5, sp
 8005800:	f106 0410 	add.w	r4, r6, #16
 8005804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800580c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005810:	e885 0003 	stmia.w	r5, {r0, r1}
 8005814:	1d33      	adds	r3, r6, #4
 8005816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005818:	6838      	ldr	r0, [r7, #0]
 800581a:	f006 f9bb 	bl	800bb94 <USB_DevInit>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e014      	b.n	800585a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	2b01      	cmp	r3, #1
 8005846:	d102      	bne.n	800584e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 f881 	bl	8006950 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f007 fa0a 	bl	800cc6c <USB_DevDisconnect>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005862 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_PCD_Start+0x16>
 8005874:	2302      	movs	r3, #2
 8005876:	e012      	b.n	800589e <HAL_PCD_Start+0x3c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f007 f9d9 	bl	800cc3c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f006 f934 	bl	800bafc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058a6:	b590      	push	{r4, r7, lr}
 80058a8:	b08d      	sub	sp, #52	; 0x34
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f007 fa80 	bl	800cdc2 <USB_GetMode>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 83ca 	bne.w	800605e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f007 f9e4 	bl	800cc9c <USB_ReadInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 83c0 	beq.w	800605c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f007 f9db 	bl	800cc9c <USB_ReadInterrupts>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d107      	bne.n	8005900 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f002 0202 	and.w	r2, r2, #2
 80058fe:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f007 f9c9 	bl	800cc9c <USB_ReadInterrupts>
 800590a:	4603      	mov	r3, r0
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b10      	cmp	r3, #16
 8005912:	d161      	bne.n	80059d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0210 	bic.w	r2, r2, #16
 8005922:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	f003 020f 	and.w	r2, r3, #15
 8005930:	4613      	mov	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	4413      	add	r3, r2
 8005940:	3304      	adds	r3, #4
 8005942:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	0c5b      	lsrs	r3, r3, #17
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2b02      	cmp	r3, #2
 800594e:	d124      	bne.n	800599a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d035      	beq.n	80059c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	6a38      	ldr	r0, [r7, #32]
 8005970:	f007 f841 	bl	800c9f6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	091b      	lsrs	r3, r3, #4
 800597c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005980:	441a      	add	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005992:	441a      	add	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	619a      	str	r2, [r3, #24]
 8005998:	e016      	b.n	80059c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	0c5b      	lsrs	r3, r3, #17
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d110      	bne.n	80059c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059ac:	2208      	movs	r2, #8
 80059ae:	4619      	mov	r1, r3
 80059b0:	6a38      	ldr	r0, [r7, #32]
 80059b2:	f007 f820 	bl	800c9f6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059c2:	441a      	add	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0210 	orr.w	r2, r2, #16
 80059d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f007 f95d 	bl	800cc9c <USB_ReadInterrupts>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059ec:	d16e      	bne.n	8005acc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f007 f963 	bl	800ccc2 <USB_ReadDevAllOutEpInterrupt>
 80059fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059fe:	e062      	b.n	8005ac6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d057      	beq.n	8005aba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f007 f988 	bl	800cd2a <USB_ReadDevOutEPInterrupt>
 8005a1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	461a      	mov	r2, r3
 8005a34:	2301      	movs	r3, #1
 8005a36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fdde 	bl	80065fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	2308      	movs	r3, #8
 8005a5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fed8 	bl	8006814 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	461a      	mov	r2, r3
 8005a98:	2320      	movs	r3, #32
 8005a9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ab8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	3301      	adds	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d199      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f007 f8e3 	bl	800cc9c <USB_ReadInterrupts>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005adc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ae0:	f040 80c0 	bne.w	8005c64 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f007 f904 	bl	800ccf6 <USB_ReadDevAllInEpInterrupt>
 8005aee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005af4:	e0b2      	b.n	8005c5c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80a7 	beq.w	8005c50 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f007 f92a 	bl	800cd66 <USB_ReadDevInEPInterrupt>
 8005b12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d057      	beq.n	8005bce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	2201      	movs	r2, #1
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69f9      	ldr	r1, [r7, #28]
 8005b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b3e:	4013      	ands	r3, r2
 8005b40:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	461a      	mov	r2, r3
 8005b50:	2301      	movs	r3, #1
 8005b52:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d132      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	1a9b      	subs	r3, r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3348      	adds	r3, #72	; 0x48
 8005b6c:	6819      	ldr	r1, [r3, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b72:	4613      	mov	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4403      	add	r3, r0
 8005b7c:	3344      	adds	r3, #68	; 0x44
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4419      	add	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4403      	add	r3, r0
 8005b90:	3348      	adds	r3, #72	; 0x48
 8005b92:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d113      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x31c>
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3350      	adds	r3, #80	; 0x50
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	f007 f933 	bl	800ce28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f010 fa88 	bl	80160de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	461a      	mov	r2, r3
 8005be6:	2308      	movs	r3, #8
 8005be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	461a      	mov	r2, r3
 8005c02:	2310      	movs	r3, #16
 8005c04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2340      	movs	r3, #64	; 0x40
 8005c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fc48 	bl	80064e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	3301      	adds	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f47f af49 	bne.w	8005af6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f007 f817 	bl	800cc9c <USB_ReadInterrupts>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c78:	d122      	bne.n	8005cc0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d108      	bne.n	8005caa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f010 fc6a 	bl	801657c <HAL_PCDEx_LPM_Callback>
 8005ca8:	e002      	b.n	8005cb0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f010 fa8e 	bl	80161cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f006 ffe9 	bl	800cc9c <USB_ReadInterrupts>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd4:	d112      	bne.n	8005cfc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d102      	bne.n	8005cec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f010 fa4a 	bl	8016180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005cfa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f006 ffcb 	bl	800cc9c <USB_ReadInterrupts>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d10:	d121      	bne.n	8005d56 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005d20:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d111      	bne.n	8005d50 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d46:	2101      	movs	r1, #1
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f010 fc17 	bl	801657c <HAL_PCDEx_LPM_Callback>
 8005d4e:	e002      	b.n	8005d56 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f010 fa15 	bl	8016180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f006 ff9e 	bl	800cc9c <USB_ReadInterrupts>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6a:	f040 80c7 	bne.w	8005efc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2110      	movs	r1, #16
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f006 f871 	bl	800be70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d92:	e056      	b.n	8005e42 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	461a      	mov	r2, r3
 8005da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005da6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dc6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005de6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	461a      	mov	r2, r3
 8005df6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dfa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	3301      	adds	r3, #1
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d3a3      	bcc.n	8005d94 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d016      	beq.n	8005e96 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e78:	f043 030b 	orr.w	r3, r3, #11
 8005e7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8e:	f043 030b 	orr.w	r3, r3, #11
 8005e92:	6453      	str	r3, [r2, #68]	; 0x44
 8005e94:	e015      	b.n	8005ec2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	f242 032b 	movw	r3, #8235	; 0x202b
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ebc:	f043 030b 	orr.w	r3, r3, #11
 8005ec0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ed4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f006 ff9e 	bl	800ce28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f006 fecb 	bl	800cc9c <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	d124      	bne.n	8005f5c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f006 ff62 	bl	800cde0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f006 f806 	bl	800bf32 <USB_GetDevSpeed>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681c      	ldr	r4, [r3, #0]
 8005f32:	f001 f999 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 8005f36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4620      	mov	r0, r4
 8005f42:	f005 fd39 	bl	800b9b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f010 f8f1 	bl	801612e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f006 fe9b 	bl	800cc9c <USB_ReadInterrupts>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d10a      	bne.n	8005f86 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f010 f8ce 	bl	8016112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695a      	ldr	r2, [r3, #20]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f002 0208 	and.w	r2, r2, #8
 8005f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f006 fe86 	bl	800cc9c <USB_ReadInterrupts>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9a:	d10f      	bne.n	8005fbc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f010 f930 	bl	801620c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f006 fe6b 	bl	800cc9c <USB_ReadInterrupts>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd0:	d10f      	bne.n	8005ff2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f010 f903 	bl	80161e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f006 fe50 	bl	800cc9c <USB_ReadInterrupts>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006006:	d10a      	bne.n	800601e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f010 f911 	bl	8016230 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800601c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f006 fe3a 	bl	800cc9c <USB_ReadInterrupts>
 8006028:	4603      	mov	r3, r0
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b04      	cmp	r3, #4
 8006030:	d115      	bne.n	800605e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f010 f901 	bl	801624c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6859      	ldr	r1, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	e000      	b.n	800605e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800605c:	bf00      	nop
    }
  }
}
 800605e:	3734      	adds	r7, #52	; 0x34
 8006060:	46bd      	mov	sp, r7
 8006062:	bd90      	pop	{r4, r7, pc}

08006064 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_PCD_SetAddress+0x1a>
 800607a:	2302      	movs	r3, #2
 800607c:	e013      	b.n	80060a6 <HAL_PCD_SetAddress+0x42>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	4611      	mov	r1, r2
 8006096:	4618      	mov	r0, r3
 8006098:	f006 fdaa 	bl	800cbf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	461a      	mov	r2, r3
 80060bc:	4603      	mov	r3, r0
 80060be:	70fb      	strb	r3, [r7, #3]
 80060c0:	460b      	mov	r3, r1
 80060c2:	803b      	strh	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da0f      	bge.n	80060f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 020f 	and.w	r2, r3, #15
 80060da:	4613      	mov	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	3338      	adds	r3, #56	; 0x38
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	3304      	adds	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	705a      	strb	r2, [r3, #1]
 80060f2:	e00f      	b.n	8006114 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	3304      	adds	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006120:	883a      	ldrh	r2, [r7, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	78ba      	ldrb	r2, [r7, #2]
 800612a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800613e:	78bb      	ldrb	r3, [r7, #2]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d102      	bne.n	800614a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_PCD_EP_Open+0xaa>
 8006154:	2302      	movs	r3, #2
 8006156:	e00e      	b.n	8006176 <HAL_PCD_EP_Open+0xc8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68f9      	ldr	r1, [r7, #12]
 8006166:	4618      	mov	r0, r3
 8006168:	f005 ff08 	bl	800bf7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006174:	7afb      	ldrb	r3, [r7, #11]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800618a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	da0f      	bge.n	80061b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	f003 020f 	and.w	r2, r3, #15
 8006198:	4613      	mov	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	3338      	adds	r3, #56	; 0x38
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	4413      	add	r3, r2
 80061a6:	3304      	adds	r3, #4
 80061a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	705a      	strb	r2, [r3, #1]
 80061b0:	e00f      	b.n	80061d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	4613      	mov	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	4413      	add	r3, r2
 80061c8:	3304      	adds	r3, #4
 80061ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_PCD_EP_Close+0x6e>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e00e      	b.n	800620a <HAL_PCD_EP_Close+0x8c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f005 ff46 	bl	800c08c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	460b      	mov	r3, r1
 8006220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006222:	7afb      	ldrb	r3, [r7, #11]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2200      	movs	r2, #0
 800624c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	b2da      	uxtb	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d102      	bne.n	800626e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800626e:	7afb      	ldrb	r3, [r7, #11]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	f006 fa29 	bl	800c6dc <USB_EP0StartXfer>
 800628a:	e008      	b.n	800629e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	6979      	ldr	r1, [r7, #20]
 800629a:	f005 ffd3 	bl	800c244 <USB_EPStartXfer>
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80062ca:	681b      	ldr	r3, [r3, #0]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	460b      	mov	r3, r1
 80062e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	3338      	adds	r3, #56	; 0x38
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	3304      	adds	r3, #4
 80062fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2200      	movs	r2, #0
 8006310:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2201      	movs	r2, #1
 8006316:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	b2da      	uxtb	r2, r3
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d102      	bne.n	8006332 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006332:	7afb      	ldrb	r3, [r7, #11]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	f006 f9c7 	bl	800c6dc <USB_EP0StartXfer>
 800634e:	e008      	b.n	8006362 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	f005 ff71 	bl	800c244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d901      	bls.n	800638a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e050      	b.n	800642c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800638a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800638e:	2b00      	cmp	r3, #0
 8006390:	da0f      	bge.n	80063b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	f003 020f 	and.w	r2, r3, #15
 8006398:	4613      	mov	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	3338      	adds	r3, #56	; 0x38
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	3304      	adds	r3, #4
 80063a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	705a      	strb	r2, [r3, #1]
 80063b0:	e00d      	b.n	80063ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	3304      	adds	r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_PCD_EP_SetStall+0x82>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e01e      	b.n	800642c <HAL_PCD_EP_SetStall+0xc0>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f006 fb23 	bl	800ca48 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	b2d9      	uxtb	r1, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800641c:	461a      	mov	r2, r3
 800641e:	f006 fd03 	bl	800ce28 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	f003 020f 	and.w	r2, r3, #15
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	429a      	cmp	r2, r3
 800644c:	d901      	bls.n	8006452 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e042      	b.n	80064d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da0f      	bge.n	800647a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	f003 020f 	and.w	r2, r3, #15
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	3338      	adds	r3, #56	; 0x38
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	3304      	adds	r3, #4
 8006470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	705a      	strb	r2, [r3, #1]
 8006478:	e00f      	b.n	800649a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	4613      	mov	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	4413      	add	r3, r2
 8006490:	3304      	adds	r3, #4
 8006492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_PCD_EP_ClrStall+0x86>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e00e      	b.n	80064d8 <HAL_PCD_EP_ClrStall+0xa4>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f006 fb2b 	bl	800cb24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	4613      	mov	r3, r2
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	3338      	adds	r3, #56	; 0x38
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	3304      	adds	r3, #4
 8006506:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	429a      	cmp	r2, r3
 8006512:	d901      	bls.n	8006518 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e06c      	b.n	80065f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	429a      	cmp	r2, r3
 800652c:	d902      	bls.n	8006534 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	3303      	adds	r3, #3
 8006538:	089b      	lsrs	r3, r3, #2
 800653a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800653c:	e02b      	b.n	8006596 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	429a      	cmp	r2, r3
 8006552:	d902      	bls.n	800655a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3303      	adds	r3, #3
 800655e:	089b      	lsrs	r3, r3, #2
 8006560:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	68d9      	ldr	r1, [r3, #12]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006572:	b2db      	uxtb	r3, r3
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4603      	mov	r3, r0
 8006578:	6978      	ldr	r0, [r7, #20]
 800657a:	f006 fa07 	bl	800c98c <USB_WritePacket>

    ep->xfer_buff  += len;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	441a      	add	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	441a      	add	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d809      	bhi.n	80065c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d203      	bcs.n	80065c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1be      	bne.n	800653e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d811      	bhi.n	80065f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	2201      	movs	r2, #1
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	6939      	ldr	r1, [r7, #16]
 80065e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ec:	4013      	ands	r3, r2
 80065ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	333c      	adds	r3, #60	; 0x3c
 8006614:	3304      	adds	r3, #4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b01      	cmp	r3, #1
 8006630:	f040 80a0 	bne.w	8006774 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d015      	beq.n	800666a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a72      	ldr	r2, [pc, #456]	; (800680c <PCD_EP_OutXfrComplete_int+0x210>)
 8006642:	4293      	cmp	r3, r2
 8006644:	f240 80dd 	bls.w	8006802 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80d7 	beq.w	8006802 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006660:	461a      	mov	r2, r3
 8006662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006666:	6093      	str	r3, [r2, #8]
 8006668:	e0cb      	b.n	8006802 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	2320      	movs	r3, #32
 8006684:	6093      	str	r3, [r2, #8]
 8006686:	e0bc      	b.n	8006802 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	f040 80b7 	bne.w	8006802 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4a5d      	ldr	r2, [pc, #372]	; (800680c <PCD_EP_OutXfrComplete_int+0x210>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d90f      	bls.n	80066bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	461a      	mov	r2, r3
 80066b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b8:	6093      	str	r3, [r2, #8]
 80066ba:	e0a2      	b.n	8006802 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	0159      	lsls	r1, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	440b      	add	r3, r1
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80066e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4403      	add	r3, r0
 80066f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800670a:	6819      	ldr	r1, [r3, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4403      	add	r3, r0
 800671a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4419      	add	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4403      	add	r3, r0
 8006730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006734:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d114      	bne.n	8006766 <PCD_EP_OutXfrComplete_int+0x16a>
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800675e:	461a      	mov	r2, r3
 8006760:	2101      	movs	r1, #1
 8006762:	f006 fb61 	bl	800ce28 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f00f fc9b 	bl	80160a8 <HAL_PCD_DataOutStageCallback>
 8006772:	e046      	b.n	8006802 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a26      	ldr	r2, [pc, #152]	; (8006810 <PCD_EP_OutXfrComplete_int+0x214>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d124      	bne.n	80067c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	461a      	mov	r2, r3
 8006794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006798:	6093      	str	r3, [r2, #8]
 800679a:	e032      	b.n	8006802 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	461a      	mov	r2, r3
 80067b4:	2320      	movs	r3, #32
 80067b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f00f fc72 	bl	80160a8 <HAL_PCD_DataOutStageCallback>
 80067c4:	e01d      	b.n	8006802 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d114      	bne.n	80067f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d108      	bne.n	80067f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067ee:	461a      	mov	r2, r3
 80067f0:	2100      	movs	r1, #0
 80067f2:	f006 fb19 	bl	800ce28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f00f fc53 	bl	80160a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	4f54300a 	.word	0x4f54300a
 8006810:	4f54310a 	.word	0x4f54310a

08006814 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	333c      	adds	r3, #60	; 0x3c
 800682c:	3304      	adds	r3, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a15      	ldr	r2, [pc, #84]	; (800689c <PCD_EP_OutSetupPacket_int+0x88>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d90e      	bls.n	8006868 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	461a      	mov	r2, r3
 8006862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006866:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f00f fc0b 	bl	8016084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a0a      	ldr	r2, [pc, #40]	; (800689c <PCD_EP_OutSetupPacket_int+0x88>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d90c      	bls.n	8006890 <PCD_EP_OutSetupPacket_int+0x7c>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d108      	bne.n	8006890 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006888:	461a      	mov	r2, r3
 800688a:	2101      	movs	r1, #1
 800688c:	f006 facc 	bl	800ce28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	4f54300a 	.word	0x4f54300a

080068a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
 80068ac:	4613      	mov	r3, r2
 80068ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d107      	bne.n	80068ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80068be:	883b      	ldrh	r3, [r7, #0]
 80068c0:	0419      	lsls	r1, r3, #16
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28
 80068cc:	e028      	b.n	8006920 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	0c1b      	lsrs	r3, r3, #16
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e00d      	b.n	80068fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	3340      	adds	r3, #64	; 0x40
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	0c1b      	lsrs	r3, r3, #16
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	4413      	add	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	3301      	adds	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
 80068fe:	7bfa      	ldrb	r2, [r7, #15]
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	3b01      	subs	r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d3ec      	bcc.n	80068e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006908:	883b      	ldrh	r3, [r7, #0]
 800690a:	0418      	lsls	r0, r3, #16
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	3b01      	subs	r3, #1
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	4302      	orrs	r2, r0
 8006918:	3340      	adds	r3, #64	; 0x40
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	887a      	ldrh	r2, [r7, #2]
 8006940:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <HAL_PCDEx_ActivateLPM+0x44>)
 8006980:	4313      	orrs	r3, r2
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	10000003 	.word	0x10000003

08006998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80069a0:	2300      	movs	r3, #0
 80069a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e291      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8087 	beq.w	8006aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069bc:	4b96      	ldr	r3, [pc, #600]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 030c 	and.w	r3, r3, #12
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d00c      	beq.n	80069e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069c8:	4b93      	ldr	r3, [pc, #588]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d112      	bne.n	80069fa <HAL_RCC_OscConfig+0x62>
 80069d4:	4b90      	ldr	r3, [pc, #576]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e0:	d10b      	bne.n	80069fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e2:	4b8d      	ldr	r3, [pc, #564]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d06c      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x130>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d168      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e26b      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a02:	d106      	bne.n	8006a12 <HAL_RCC_OscConfig+0x7a>
 8006a04:	4b84      	ldr	r3, [pc, #528]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a83      	ldr	r2, [pc, #524]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e02e      	b.n	8006a70 <HAL_RCC_OscConfig+0xd8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10c      	bne.n	8006a34 <HAL_RCC_OscConfig+0x9c>
 8006a1a:	4b7f      	ldr	r3, [pc, #508]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7e      	ldr	r2, [pc, #504]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	4b7c      	ldr	r3, [pc, #496]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a7b      	ldr	r2, [pc, #492]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e01d      	b.n	8006a70 <HAL_RCC_OscConfig+0xd8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0xc0>
 8006a3e:	4b76      	ldr	r3, [pc, #472]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a75      	ldr	r2, [pc, #468]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	4b73      	ldr	r3, [pc, #460]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a72      	ldr	r2, [pc, #456]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e00b      	b.n	8006a70 <HAL_RCC_OscConfig+0xd8>
 8006a58:	4b6f      	ldr	r3, [pc, #444]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a6e      	ldr	r2, [pc, #440]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	4b6c      	ldr	r3, [pc, #432]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a6b      	ldr	r2, [pc, #428]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d013      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fd ff58 	bl	800492c <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a80:	f7fd ff54 	bl	800492c <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e21f      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a92:	4b61      	ldr	r3, [pc, #388]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0xe8>
 8006a9e:	e014      	b.n	8006aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fd ff44 	bl	800492c <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa8:	f7fd ff40 	bl	800492c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b64      	cmp	r3, #100	; 0x64
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e20b      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aba:	4b57      	ldr	r3, [pc, #348]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x110>
 8006ac6:	e000      	b.n	8006aca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d069      	beq.n	8006baa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ad6:	4b50      	ldr	r3, [pc, #320]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 030c 	and.w	r3, r3, #12
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ae2:	4b4d      	ldr	r3, [pc, #308]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 030c 	and.w	r3, r3, #12
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d11c      	bne.n	8006b28 <HAL_RCC_OscConfig+0x190>
 8006aee:	4b4a      	ldr	r3, [pc, #296]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d116      	bne.n	8006b28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006afa:	4b47      	ldr	r3, [pc, #284]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <HAL_RCC_OscConfig+0x17a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d001      	beq.n	8006b12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e1df      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b12:	4b41      	ldr	r3, [pc, #260]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	493d      	ldr	r1, [pc, #244]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b26:	e040      	b.n	8006baa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d023      	beq.n	8006b78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b30:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a38      	ldr	r2, [pc, #224]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fd fef6 	bl	800492c <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b44:	f7fd fef2 	bl	800492c <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e1bd      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b56:	4b30      	ldr	r3, [pc, #192]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b62:	4b2d      	ldr	r3, [pc, #180]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4929      	ldr	r1, [pc, #164]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]
 8006b76:	e018      	b.n	8006baa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b78:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a26      	ldr	r2, [pc, #152]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fd fed2 	bl	800492c <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8c:	f7fd fece 	bl	800492c <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e199      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b9e:	4b1e      	ldr	r3, [pc, #120]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d038      	beq.n	8006c28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d019      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bbe:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bca:	f7fd feaf 	bl	800492c <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd2:	f7fd feab 	bl	800492c <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e176      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x23a>
 8006bf0:	e01a      	b.n	8006c28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf2:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf6:	4a08      	ldr	r2, [pc, #32]	; (8006c18 <HAL_RCC_OscConfig+0x280>)
 8006bf8:	f023 0301 	bic.w	r3, r3, #1
 8006bfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfe:	f7fd fe95 	bl	800492c <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c04:	e00a      	b.n	8006c1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c06:	f7fd fe91 	bl	800492c <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d903      	bls.n	8006c1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e15c      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
 8006c18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1c:	4b91      	ldr	r3, [pc, #580]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1ee      	bne.n	8006c06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80a4 	beq.w	8006d7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c36:	4b8b      	ldr	r3, [pc, #556]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c42:	4b88      	ldr	r3, [pc, #544]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4a87      	ldr	r2, [pc, #540]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4e:	4b85      	ldr	r3, [pc, #532]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c5e:	4b82      	ldr	r3, [pc, #520]	; (8006e68 <HAL_RCC_OscConfig+0x4d0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d118      	bne.n	8006c9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c6a:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <HAL_RCC_OscConfig+0x4d0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a7e      	ldr	r2, [pc, #504]	; (8006e68 <HAL_RCC_OscConfig+0x4d0>)
 8006c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c76:	f7fd fe59 	bl	800492c <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c7e:	f7fd fe55 	bl	800492c <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b64      	cmp	r3, #100	; 0x64
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e120      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c90:	4b75      	ldr	r3, [pc, #468]	; (8006e68 <HAL_RCC_OscConfig+0x4d0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x31a>
 8006ca4:	4b6f      	ldr	r3, [pc, #444]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	4a6e      	ldr	r2, [pc, #440]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb0:	e02d      	b.n	8006d0e <HAL_RCC_OscConfig+0x376>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10c      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x33c>
 8006cba:	4b6a      	ldr	r3, [pc, #424]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	4a69      	ldr	r2, [pc, #420]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc6:	4b67      	ldr	r3, [pc, #412]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cca:	4a66      	ldr	r2, [pc, #408]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006ccc:	f023 0304 	bic.w	r3, r3, #4
 8006cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd2:	e01c      	b.n	8006d0e <HAL_RCC_OscConfig+0x376>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d10c      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x35e>
 8006cdc:	4b61      	ldr	r3, [pc, #388]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce0:	4a60      	ldr	r2, [pc, #384]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006ce2:	f043 0304 	orr.w	r3, r3, #4
 8006ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce8:	4b5e      	ldr	r3, [pc, #376]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	4a5d      	ldr	r2, [pc, #372]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf4:	e00b      	b.n	8006d0e <HAL_RCC_OscConfig+0x376>
 8006cf6:	4b5b      	ldr	r3, [pc, #364]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	4a5a      	ldr	r2, [pc, #360]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	6713      	str	r3, [r2, #112]	; 0x70
 8006d02:	4b58      	ldr	r3, [pc, #352]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	4a57      	ldr	r2, [pc, #348]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d08:	f023 0304 	bic.w	r3, r3, #4
 8006d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d015      	beq.n	8006d42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d16:	f7fd fe09 	bl	800492c <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1c:	e00a      	b.n	8006d34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1e:	f7fd fe05 	bl	800492c <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e0ce      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d34:	4b4b      	ldr	r3, [pc, #300]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ee      	beq.n	8006d1e <HAL_RCC_OscConfig+0x386>
 8006d40:	e014      	b.n	8006d6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d42:	f7fd fdf3 	bl	800492c <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d48:	e00a      	b.n	8006d60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fd fdef 	bl	800492c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e0b8      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d60:	4b40      	ldr	r3, [pc, #256]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1ee      	bne.n	8006d4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d105      	bne.n	8006d7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d72:	4b3c      	ldr	r3, [pc, #240]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	4a3b      	ldr	r2, [pc, #236]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80a4 	beq.w	8006ed0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d06b      	beq.n	8006e6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d149      	bne.n	8006e30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9c:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a30      	ldr	r2, [pc, #192]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fd fdc0 	bl	800492c <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fd fdbc 	bl	800492c <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e087      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc2:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	019b      	lsls	r3, r3, #6
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	3b01      	subs	r3, #1
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	061b      	lsls	r3, r3, #24
 8006df2:	4313      	orrs	r3, r2
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dfa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a18      	ldr	r2, [pc, #96]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e08:	f7fd fd90 	bl	800492c <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fd fd8c 	bl	800492c <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e057      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0f0      	beq.n	8006e10 <HAL_RCC_OscConfig+0x478>
 8006e2e:	e04f      	b.n	8006ed0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e30:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fd fd76 	bl	800492c <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fd fd72 	bl	800492c <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e03d      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e56:	4b03      	ldr	r3, [pc, #12]	; (8006e64 <HAL_RCC_OscConfig+0x4cc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x4ac>
 8006e62:	e035      	b.n	8006ed0 <HAL_RCC_OscConfig+0x538>
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e6c:	4b1b      	ldr	r3, [pc, #108]	; (8006edc <HAL_RCC_OscConfig+0x544>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d028      	beq.n	8006ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d121      	bne.n	8006ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d11a      	bne.n	8006ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ea2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d111      	bne.n	8006ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40023800 	.word	0x40023800

08006ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e0d0      	b.n	800709a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef8:	4b6a      	ldr	r3, [pc, #424]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d910      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f06:	4b67      	ldr	r3, [pc, #412]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 020f 	bic.w	r2, r3, #15
 8006f0e:	4965      	ldr	r1, [pc, #404]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b63      	ldr	r3, [pc, #396]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0b8      	b.n	800709a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d020      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f40:	4b59      	ldr	r3, [pc, #356]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	4a58      	ldr	r2, [pc, #352]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f58:	4b53      	ldr	r3, [pc, #332]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4a52      	ldr	r2, [pc, #328]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f64:	4b50      	ldr	r3, [pc, #320]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	494d      	ldr	r1, [pc, #308]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d040      	beq.n	8007004 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8a:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d115      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07f      	b.n	800709a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d107      	bne.n	8006fb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa2:	4b41      	ldr	r3, [pc, #260]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e073      	b.n	800709a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb2:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e06b      	b.n	800709a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fc2:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f023 0203 	bic.w	r2, r3, #3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4936      	ldr	r1, [pc, #216]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd4:	f7fd fcaa 	bl	800492c <HAL_GetTick>
 8006fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fda:	e00a      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fdc:	f7fd fca6 	bl	800492c <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e053      	b.n	800709a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 020c 	and.w	r2, r3, #12
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	429a      	cmp	r2, r3
 8007002:	d1eb      	bne.n	8006fdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007004:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d210      	bcs.n	8007034 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007012:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f023 020f 	bic.w	r2, r3, #15
 800701a:	4922      	ldr	r1, [pc, #136]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	4313      	orrs	r3, r2
 8007020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007022:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d001      	beq.n	8007034 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e032      	b.n	800709a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4916      	ldr	r1, [pc, #88]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	490e      	ldr	r1, [pc, #56]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 800706e:	4313      	orrs	r3, r2
 8007070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007072:	f000 f821 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8007076:	4601      	mov	r1, r0
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <HAL_RCC_ClockConfig+0x1cc>)
 8007084:	5cd3      	ldrb	r3, [r2, r3]
 8007086:	fa21 f303 	lsr.w	r3, r1, r3
 800708a:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <HAL_RCC_ClockConfig+0x1d0>)
 800708c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800708e:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <HAL_RCC_ClockConfig+0x1d4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fb fe44 	bl	8002d20 <HAL_InitTick>

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40023c00 	.word	0x40023c00
 80070a8:	40023800 	.word	0x40023800
 80070ac:	08018808 	.word	0x08018808
 80070b0:	20000000 	.word	0x20000000
 80070b4:	20000004 	.word	0x20000004

080070b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	2300      	movs	r3, #0
 80070c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070ce:	4b63      	ldr	r3, [pc, #396]	; (800725c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 030c 	and.w	r3, r3, #12
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d007      	beq.n	80070ea <HAL_RCC_GetSysClockFreq+0x32>
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d008      	beq.n	80070f0 <HAL_RCC_GetSysClockFreq+0x38>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 80b4 	bne.w	800724c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070e4:	4b5e      	ldr	r3, [pc, #376]	; (8007260 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80070e6:	60bb      	str	r3, [r7, #8]
      break;
 80070e8:	e0b3      	b.n	8007252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070ea:	4b5e      	ldr	r3, [pc, #376]	; (8007264 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80070ec:	60bb      	str	r3, [r7, #8]
      break;
 80070ee:	e0b0      	b.n	8007252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070f0:	4b5a      	ldr	r3, [pc, #360]	; (800725c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80070fa:	4b58      	ldr	r3, [pc, #352]	; (800725c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d04a      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007106:	4b55      	ldr	r3, [pc, #340]	; (800725c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	099b      	lsrs	r3, r3, #6
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	ea03 0501 	and.w	r5, r3, r1
 800711c:	ea04 0602 	and.w	r6, r4, r2
 8007120:	4629      	mov	r1, r5
 8007122:	4632      	mov	r2, r6
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	f04f 0400 	mov.w	r4, #0
 800712c:	0154      	lsls	r4, r2, #5
 800712e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007132:	014b      	lsls	r3, r1, #5
 8007134:	4619      	mov	r1, r3
 8007136:	4622      	mov	r2, r4
 8007138:	1b49      	subs	r1, r1, r5
 800713a:	eb62 0206 	sbc.w	r2, r2, r6
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	f04f 0400 	mov.w	r4, #0
 8007146:	0194      	lsls	r4, r2, #6
 8007148:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800714c:	018b      	lsls	r3, r1, #6
 800714e:	1a5b      	subs	r3, r3, r1
 8007150:	eb64 0402 	sbc.w	r4, r4, r2
 8007154:	f04f 0100 	mov.w	r1, #0
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	00e2      	lsls	r2, r4, #3
 800715e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007162:	00d9      	lsls	r1, r3, #3
 8007164:	460b      	mov	r3, r1
 8007166:	4614      	mov	r4, r2
 8007168:	195b      	adds	r3, r3, r5
 800716a:	eb44 0406 	adc.w	r4, r4, r6
 800716e:	f04f 0100 	mov.w	r1, #0
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	0262      	lsls	r2, r4, #9
 8007178:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800717c:	0259      	lsls	r1, r3, #9
 800717e:	460b      	mov	r3, r1
 8007180:	4614      	mov	r4, r2
 8007182:	4618      	mov	r0, r3
 8007184:	4621      	mov	r1, r4
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f04f 0400 	mov.w	r4, #0
 800718c:	461a      	mov	r2, r3
 800718e:	4623      	mov	r3, r4
 8007190:	f7f9 fd72 	bl	8000c78 <__aeabi_uldivmod>
 8007194:	4603      	mov	r3, r0
 8007196:	460c      	mov	r4, r1
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e049      	b.n	8007230 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800719c:	4b2f      	ldr	r3, [pc, #188]	; (800725c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	099b      	lsrs	r3, r3, #6
 80071a2:	f04f 0400 	mov.w	r4, #0
 80071a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	ea03 0501 	and.w	r5, r3, r1
 80071b2:	ea04 0602 	and.w	r6, r4, r2
 80071b6:	4629      	mov	r1, r5
 80071b8:	4632      	mov	r2, r6
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	f04f 0400 	mov.w	r4, #0
 80071c2:	0154      	lsls	r4, r2, #5
 80071c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071c8:	014b      	lsls	r3, r1, #5
 80071ca:	4619      	mov	r1, r3
 80071cc:	4622      	mov	r2, r4
 80071ce:	1b49      	subs	r1, r1, r5
 80071d0:	eb62 0206 	sbc.w	r2, r2, r6
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	f04f 0400 	mov.w	r4, #0
 80071dc:	0194      	lsls	r4, r2, #6
 80071de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071e2:	018b      	lsls	r3, r1, #6
 80071e4:	1a5b      	subs	r3, r3, r1
 80071e6:	eb64 0402 	sbc.w	r4, r4, r2
 80071ea:	f04f 0100 	mov.w	r1, #0
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	00e2      	lsls	r2, r4, #3
 80071f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071f8:	00d9      	lsls	r1, r3, #3
 80071fa:	460b      	mov	r3, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	195b      	adds	r3, r3, r5
 8007200:	eb44 0406 	adc.w	r4, r4, r6
 8007204:	f04f 0100 	mov.w	r1, #0
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	02a2      	lsls	r2, r4, #10
 800720e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007212:	0299      	lsls	r1, r3, #10
 8007214:	460b      	mov	r3, r1
 8007216:	4614      	mov	r4, r2
 8007218:	4618      	mov	r0, r3
 800721a:	4621      	mov	r1, r4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f04f 0400 	mov.w	r4, #0
 8007222:	461a      	mov	r2, r3
 8007224:	4623      	mov	r3, r4
 8007226:	f7f9 fd27 	bl	8000c78 <__aeabi_uldivmod>
 800722a:	4603      	mov	r3, r0
 800722c:	460c      	mov	r4, r1
 800722e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	3301      	adds	r3, #1
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	fbb2 f3f3 	udiv	r3, r2, r3
 8007248:	60bb      	str	r3, [r7, #8]
      break;
 800724a:	e002      	b.n	8007252 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800724c:	4b04      	ldr	r3, [pc, #16]	; (8007260 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800724e:	60bb      	str	r3, [r7, #8]
      break;
 8007250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007252:	68bb      	ldr	r3, [r7, #8]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725c:	40023800 	.word	0x40023800
 8007260:	00f42400 	.word	0x00f42400
 8007264:	007a1200 	.word	0x007a1200

08007268 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <HAL_RCC_GetHCLKFreq+0x14>)
 800726e:	681b      	ldr	r3, [r3, #0]
}
 8007270:	4618      	mov	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	20000000 	.word	0x20000000

08007280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007284:	f7ff fff0 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 8007288:	4601      	mov	r1, r0
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	0a9b      	lsrs	r3, r3, #10
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	4a03      	ldr	r2, [pc, #12]	; (80072a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007296:	5cd3      	ldrb	r3, [r2, r3]
 8007298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800729c:	4618      	mov	r0, r3
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40023800 	.word	0x40023800
 80072a4:	08018818 	.word	0x08018818

080072a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072ac:	f7ff ffdc 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80072b0:	4601      	mov	r1, r0
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	0b5b      	lsrs	r3, r3, #13
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	4a03      	ldr	r2, [pc, #12]	; (80072cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072be:	5cd3      	ldrb	r3, [r2, r3]
 80072c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40023800 	.word	0x40023800
 80072cc:	08018818 	.word	0x08018818

080072d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	220f      	movs	r2, #15
 80072de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072e0:	4b12      	ldr	r3, [pc, #72]	; (800732c <HAL_RCC_GetClockConfig+0x5c>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 0203 	and.w	r2, r3, #3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072ec:	4b0f      	ldr	r3, [pc, #60]	; (800732c <HAL_RCC_GetClockConfig+0x5c>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072f8:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_RCC_GetClockConfig+0x5c>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007304:	4b09      	ldr	r3, [pc, #36]	; (800732c <HAL_RCC_GetClockConfig+0x5c>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	08db      	lsrs	r3, r3, #3
 800730a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007312:	4b07      	ldr	r3, [pc, #28]	; (8007330 <HAL_RCC_GetClockConfig+0x60>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 020f 	and.w	r2, r3, #15
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40023800 	.word	0x40023800
 8007330:	40023c00 	.word	0x40023c00

08007334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d012      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800735c:	4b69      	ldr	r3, [pc, #420]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	4a68      	ldr	r2, [pc, #416]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007366:	6093      	str	r3, [r2, #8]
 8007368:	4b66      	ldr	r3, [pc, #408]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	4964      	ldr	r1, [pc, #400]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d017      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800738e:	4b5d      	ldr	r3, [pc, #372]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739c:	4959      	ldr	r1, [pc, #356]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ac:	d101      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80073ba:	2301      	movs	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d017      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80073ca:	4b4e      	ldr	r3, [pc, #312]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	494a      	ldr	r1, [pc, #296]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073e8:	d101      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80073f6:	2301      	movs	r3, #1
 80073f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 808b 	beq.w	800752e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007418:	4b3a      	ldr	r3, [pc, #232]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	4a39      	ldr	r2, [pc, #228]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007422:	6413      	str	r3, [r2, #64]	; 0x40
 8007424:	4b37      	ldr	r3, [pc, #220]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007430:	4b35      	ldr	r3, [pc, #212]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a34      	ldr	r2, [pc, #208]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743c:	f7fd fa76 	bl	800492c <HAL_GetTick>
 8007440:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007444:	f7fd fa72 	bl	800492c <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b64      	cmp	r3, #100	; 0x64
 8007450:	d901      	bls.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e31e      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007456:	4b2c      	ldr	r3, [pc, #176]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007462:	4b28      	ldr	r3, [pc, #160]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d035      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d02e      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007480:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007488:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800748a:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	4a1d      	ldr	r2, [pc, #116]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007494:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007496:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074a8:	4b16      	ldr	r3, [pc, #88]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d114      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b4:	f7fd fa3a 	bl	800492c <HAL_GetTick>
 80074b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ba:	e00a      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074bc:	f7fd fa36 	bl	800492c <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e2e0      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0ee      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ea:	d111      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80074fa:	400b      	ands	r3, r1
 80074fc:	4901      	ldr	r1, [pc, #4]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	608b      	str	r3, [r1, #8]
 8007502:	e00b      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007504:	40023800 	.word	0x40023800
 8007508:	40007000 	.word	0x40007000
 800750c:	0ffffcff 	.word	0x0ffffcff
 8007510:	4bac      	ldr	r3, [pc, #688]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	4aab      	ldr	r2, [pc, #684]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007516:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800751a:	6093      	str	r3, [r2, #8]
 800751c:	4ba9      	ldr	r3, [pc, #676]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800751e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007528:	49a6      	ldr	r1, [pc, #664]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800752a:	4313      	orrs	r3, r2
 800752c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	2b00      	cmp	r3, #0
 8007538:	d010      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800753a:	4ba2      	ldr	r3, [pc, #648]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800753c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007540:	4aa0      	ldr	r2, [pc, #640]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007546:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800754a:	4b9e      	ldr	r3, [pc, #632]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800754c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	499b      	ldr	r1, [pc, #620]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007568:	4b96      	ldr	r3, [pc, #600]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007576:	4993      	ldr	r1, [pc, #588]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800758a:	4b8e      	ldr	r3, [pc, #568]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007598:	498a      	ldr	r1, [pc, #552]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075ac:	4b85      	ldr	r3, [pc, #532]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ba:	4982      	ldr	r1, [pc, #520]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075ce:	4b7d      	ldr	r3, [pc, #500]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	4979      	ldr	r1, [pc, #484]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075f0:	4b74      	ldr	r3, [pc, #464]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f6:	f023 0203 	bic.w	r2, r3, #3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	4971      	ldr	r1, [pc, #452]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007612:	4b6c      	ldr	r3, [pc, #432]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007618:	f023 020c 	bic.w	r2, r3, #12
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007620:	4968      	ldr	r1, [pc, #416]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007634:	4b63      	ldr	r3, [pc, #396]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007642:	4960      	ldr	r1, [pc, #384]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007656:	4b5b      	ldr	r3, [pc, #364]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	4957      	ldr	r1, [pc, #348]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007678:	4b52      	ldr	r3, [pc, #328]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800767a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007686:	494f      	ldr	r1, [pc, #316]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800769a:	4b4a      	ldr	r3, [pc, #296]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800769c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a8:	4946      	ldr	r1, [pc, #280]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80076bc:	4b41      	ldr	r3, [pc, #260]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ca:	493e      	ldr	r1, [pc, #248]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076de:	4b39      	ldr	r3, [pc, #228]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ec:	4935      	ldr	r1, [pc, #212]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007700:	4b30      	ldr	r3, [pc, #192]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007706:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800770e:	492d      	ldr	r1, [pc, #180]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d011      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007722:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007728:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007730:	4924      	ldr	r1, [pc, #144]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800773c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007740:	d101      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007742:	2301      	movs	r3, #1
 8007744:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007752:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007758:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007760:	4918      	ldr	r1, [pc, #96]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007774:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007784:	490f      	ldr	r1, [pc, #60]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007786:	4313      	orrs	r3, r2
 8007788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d005      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800779a:	f040 80d8 	bne.w	800794e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077aa:	f7fd f8bf 	bl	800492c <HAL_GetTick>
 80077ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077b0:	e00a      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077b2:	f7fd f8bb 	bl	800492c <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b64      	cmp	r3, #100	; 0x64
 80077be:	d903      	bls.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e167      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80077c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077c8:	4bad      	ldr	r3, [pc, #692]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1ee      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d021      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11d      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077e8:	4ba5      	ldr	r3, [pc, #660]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80077ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	f003 0303 	and.w	r3, r3, #3
 80077f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077f6:	4ba2      	ldr	r3, [pc, #648]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80077f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fc:	0e1b      	lsrs	r3, r3, #24
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	019a      	lsls	r2, r3, #6
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	431a      	orrs	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	061b      	lsls	r3, r3, #24
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	071b      	lsls	r3, r3, #28
 800781c:	4998      	ldr	r1, [pc, #608]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800781e:	4313      	orrs	r3, r2
 8007820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007838:	d00a      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007842:	2b00      	cmp	r3, #0
 8007844:	d02e      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800784e:	d129      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007850:	4b8b      	ldr	r3, [pc, #556]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007856:	0c1b      	lsrs	r3, r3, #16
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800785e:	4b88      	ldr	r3, [pc, #544]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007864:	0f1b      	lsrs	r3, r3, #28
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	019a      	lsls	r2, r3, #6
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	061b      	lsls	r3, r3, #24
 800787e:	431a      	orrs	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	071b      	lsls	r3, r3, #28
 8007884:	497e      	ldr	r1, [pc, #504]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800788c:	4b7c      	ldr	r3, [pc, #496]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800788e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007892:	f023 021f 	bic.w	r2, r3, #31
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	3b01      	subs	r3, #1
 800789c:	4978      	ldr	r1, [pc, #480]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01d      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078b0:	4b73      	ldr	r3, [pc, #460]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80078b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b6:	0e1b      	lsrs	r3, r3, #24
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078be:	4b70      	ldr	r3, [pc, #448]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80078c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c4:	0f1b      	lsrs	r3, r3, #28
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	019a      	lsls	r2, r3, #6
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	431a      	orrs	r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	061b      	lsls	r3, r3, #24
 80078de:	431a      	orrs	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	071b      	lsls	r3, r3, #28
 80078e4:	4966      	ldr	r1, [pc, #408]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d011      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	019a      	lsls	r2, r3, #6
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	061b      	lsls	r3, r3, #24
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	071b      	lsls	r3, r3, #28
 8007914:	495a      	ldr	r1, [pc, #360]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007916:	4313      	orrs	r3, r2
 8007918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800791c:	4b58      	ldr	r3, [pc, #352]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a57      	ldr	r2, [pc, #348]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007928:	f7fd f800 	bl	800492c <HAL_GetTick>
 800792c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007930:	f7fc fffc 	bl	800492c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b64      	cmp	r3, #100	; 0x64
 800793c:	d901      	bls.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e0a8      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007942:	4b4f      	ldr	r3, [pc, #316]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b01      	cmp	r3, #1
 8007952:	f040 809e 	bne.w	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007956:	4b4a      	ldr	r3, [pc, #296]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a49      	ldr	r2, [pc, #292]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800795c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007962:	f7fc ffe3 	bl	800492c <HAL_GetTick>
 8007966:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007968:	e008      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800796a:	f7fc ffdf 	bl	800492c <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b64      	cmp	r3, #100	; 0x64
 8007976:	d901      	bls.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e08b      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800797c:	4b40      	ldr	r3, [pc, #256]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007988:	d0ef      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d009      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d02e      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d12a      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079b2:	4b33      	ldr	r3, [pc, #204]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079c0:	4b2f      	ldr	r3, [pc, #188]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80079c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c6:	0f1b      	lsrs	r3, r3, #28
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	019a      	lsls	r2, r3, #6
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	061b      	lsls	r3, r3, #24
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	071b      	lsls	r3, r3, #28
 80079e6:	4926      	ldr	r1, [pc, #152]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079ee:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	3b01      	subs	r3, #1
 80079fe:	021b      	lsls	r3, r3, #8
 8007a00:	491f      	ldr	r1, [pc, #124]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d022      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a1c:	d11d      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a1e:	4b18      	ldr	r3, [pc, #96]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a24:	0e1b      	lsrs	r3, r3, #24
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a2c:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a32:	0f1b      	lsrs	r3, r3, #28
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	019a      	lsls	r2, r3, #6
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	431a      	orrs	r2, r3
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	061b      	lsls	r3, r3, #24
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	071b      	lsls	r3, r3, #28
 8007a52:	490b      	ldr	r1, [pc, #44]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a66:	f7fc ff61 	bl	800492c <HAL_GetTick>
 8007a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a6e:	f7fc ff5d 	bl	800492c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b64      	cmp	r3, #100	; 0x64
 8007a7a:	d903      	bls.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e009      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8007a80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a90:	d1ed      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40023800 	.word	0x40023800

08007aa0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e022      	b.n	8007af8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d105      	bne.n	8007aca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7fa ff11 	bl	80028ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2203      	movs	r2, #3
 8007ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f814 	bl	8007b00 <HAL_SD_InitCard>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e00a      	b.n	8007af8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b00:	b5b0      	push	{r4, r5, r7, lr}
 8007b02:	b08e      	sub	sp, #56	; 0x38
 8007b04:	af04      	add	r7, sp, #16
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007b1c:	2376      	movs	r3, #118	; 0x76
 8007b1e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681d      	ldr	r5, [r3, #0]
 8007b24:	466c      	mov	r4, sp
 8007b26:	f107 0314 	add.w	r3, r7, #20
 8007b2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b32:	f107 0308 	add.w	r3, r7, #8
 8007b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f003 f97d 	bl	800ae38 <SDMMC_Init>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e03b      	b.n	8007bc8 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f003 f9b1 	bl	800aecc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 ffca 	bl	8008b14 <SD_PowerON>
 8007b80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e013      	b.n	8007bc8 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fee9 	bl	8008978 <SD_InitCard>
 8007ba6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3728      	adds	r7, #40	; 0x28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bdb0      	pop	{r4, r5, r7, pc}

08007bd0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08c      	sub	sp, #48	; 0x30
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d107      	bne.n	8007bf8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0cc      	b.n	8007d92 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	f040 80c5 	bne.w	8007d90 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	441a      	add	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d907      	bls.n	8007c2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e0b3      	b.n	8007d92 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	4a53      	ldr	r2, [pc, #332]	; (8007d9c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	4a52      	ldr	r2, [pc, #328]	; (8007da0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007c58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	2200      	movs	r2, #0
 8007c60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3380      	adds	r3, #128	; 0x80
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	025b      	lsls	r3, r3, #9
 8007c74:	089b      	lsrs	r3, r3, #2
 8007c76:	f7fd f817 	bl	8004ca8 <HAL_DMA_Start_IT>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d017      	beq.n	8007cb0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a43      	ldr	r2, [pc, #268]	; (8007da4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e070      	b.n	8007d92 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0208 	orr.w	r2, r2, #8
 8007cbe:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d002      	beq.n	8007cce <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	025b      	lsls	r3, r3, #9
 8007ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f003 f98c 	bl	800aff4 <SDMMC_CmdBlockLength>
 8007cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00f      	beq.n	8007d04 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a2e      	ldr	r2, [pc, #184]	; (8007da4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e046      	b.n	8007d92 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d04:	f04f 33ff 	mov.w	r3, #4294967295
 8007d08:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	025b      	lsls	r3, r3, #9
 8007d0e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d10:	2390      	movs	r3, #144	; 0x90
 8007d12:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d14:	2302      	movs	r3, #2
 8007d16:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f107 0210 	add.w	r2, r7, #16
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f003 f936 	bl	800af9c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d90a      	bls.n	8007d4c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2282      	movs	r2, #130	; 0x82
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d42:	4618      	mov	r0, r3
 8007d44:	f003 f99a 	bl	800b07c <SDMMC_CmdReadMultiBlock>
 8007d48:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d4a:	e009      	b.n	8007d60 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2281      	movs	r2, #129	; 0x81
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f003 f96d 	bl	800b038 <SDMMC_CmdReadSingleBlock>
 8007d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d012      	beq.n	8007d8c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a0e      	ldr	r2, [pc, #56]	; (8007da4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	431a      	orrs	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e002      	b.n	8007d92 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e000      	b.n	8007d92 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8007d90:	2302      	movs	r3, #2
  }
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3730      	adds	r7, #48	; 0x30
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	08008787 	.word	0x08008787
 8007da0:	080087f9 	.word	0x080087f9
 8007da4:	004005ff 	.word	0x004005ff

08007da8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08c      	sub	sp, #48	; 0x30
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d107      	bne.n	8007dd0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0cf      	b.n	8007f70 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	f040 80c8 	bne.w	8007f6e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	441a      	add	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d907      	bls.n	8007e02 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e0b6      	b.n	8007f70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2203      	movs	r2, #3
 8007e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 021a 	orr.w	r2, r2, #26
 8007e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e26:	4a54      	ldr	r2, [pc, #336]	; (8007f78 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	4a53      	ldr	r2, [pc, #332]	; (8007f7c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007e30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	2200      	movs	r2, #0
 8007e38:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d002      	beq.n	8007e48 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	025b      	lsls	r3, r3, #9
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e50:	4618      	mov	r0, r3
 8007e52:	f003 f8cf 	bl	800aff4 <SDMMC_CmdBlockLength>
 8007e56:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00f      	beq.n	8007e7e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a47      	ldr	r2, [pc, #284]	; (8007f80 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e078      	b.n	8007f70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d90a      	bls.n	8007e9a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	22a0      	movs	r2, #160	; 0xa0
 8007e88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e90:	4618      	mov	r0, r3
 8007e92:	f003 f937 	bl	800b104 <SDMMC_CmdWriteMultiBlock>
 8007e96:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007e98:	e009      	b.n	8007eae <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2290      	movs	r2, #144	; 0x90
 8007e9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f003 f90a 	bl	800b0c0 <SDMMC_CmdWriteSingleBlock>
 8007eac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d012      	beq.n	8007eda <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a31      	ldr	r2, [pc, #196]	; (8007f80 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007eba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e04a      	b.n	8007f70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0208 	orr.w	r2, r2, #8
 8007ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3380      	adds	r3, #128	; 0x80
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	025b      	lsls	r3, r3, #9
 8007efc:	089b      	lsrs	r3, r3, #2
 8007efe:	f7fc fed3 	bl	8004ca8 <HAL_DMA_Start_IT>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01a      	beq.n	8007f3e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 021a 	bic.w	r2, r2, #26
 8007f16:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a18      	ldr	r2, [pc, #96]	; (8007f80 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e018      	b.n	8007f70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	025b      	lsls	r3, r3, #9
 8007f48:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f4a:	2390      	movs	r3, #144	; 0x90
 8007f4c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f107 0210 	add.w	r2, r7, #16
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f003 f819 	bl	800af9c <SDMMC_ConfigData>

      return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e000      	b.n	8007f70 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f6e:	2302      	movs	r3, #2
  }
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3730      	adds	r7, #48	; 0x30
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	0800875d 	.word	0x0800875d
 8007f7c:	080087f9 	.word	0x080087f9
 8007f80:	004005ff 	.word	0x004005ff

08007f84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_SD_IRQHandler+0x2e>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 ffc8 	bl	8008f40 <SD_Read_IT>
 8007fb0:	e153      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 808d 	beq.w	80080dc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4ba3      	ldr	r3, [pc, #652]	; (8008264 <HAL_SD_IRQHandler+0x2e0>)
 8007fd8:	400b      	ands	r3, r1
 8007fda:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0201 	bic.w	r2, r2, #1
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d039      	beq.n	800806a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <HAL_SD_IRQHandler+0x86>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d011      	beq.n	800802e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f003 f89a 	bl	800b148 <SDMMC_CmdStopTransfer>
 8008014:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d008      	beq.n	800802e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f921 	bl	8008270 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f240 523a 	movw	r2, #1338	; 0x53a
 8008036:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <HAL_SD_IRQHandler+0xd6>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f005 f81c 	bl	800d098 <HAL_SD_RxCpltCallback>
 8008060:	e0fb      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f005 f80e 	bl	800d084 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008068:	e0f7      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80f2 	beq.w	800825a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d011      	beq.n	80080a4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f003 f85f 	bl	800b148 <SDMMC_CmdStopTransfer>
 800808a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f8e6 	bl	8008270 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f040 80d5 	bne.w	800825a <HAL_SD_IRQHandler+0x2d6>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f040 80cf 	bne.w	800825a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0208 	bic.w	r2, r2, #8
 80080ca:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f004 ffd5 	bl	800d084 <HAL_SD_TxCpltCallback>
}
 80080da:	e0be      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d008      	beq.n	80080fc <HAL_SD_IRQHandler+0x178>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 ff74 	bl	8008fe2 <SD_Write_IT>
 80080fa:	e0ae      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008102:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80a7 	beq.w	800825a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	f043 0202 	orr.w	r2, r3, #2
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	f043 0208 	orr.w	r2, r3, #8
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	f043 0220 	orr.w	r2, r3, #32
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	f043 0210 	orr.w	r2, r3, #16
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f240 523a 	movw	r2, #1338	; 0x53a
 800817c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800818c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	f002 ffd8 	bl	800b148 <SDMMC_CmdStopTransfer>
 8008198:	4602      	mov	r2, r0
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f857 	bl	8008270 <HAL_SD_ErrorCallback>
}
 80081c2:	e04a      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d045      	beq.n	800825a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <HAL_SD_IRQHandler+0x25e>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d011      	beq.n	8008206 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	4a20      	ldr	r2, [pc, #128]	; (8008268 <HAL_SD_IRQHandler+0x2e4>)
 80081e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fc fdba 	bl	8004d68 <HAL_DMA_Abort_IT>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d02f      	beq.n	800825a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fb4c 	bl	800889c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008204:	e029      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <HAL_SD_IRQHandler+0x296>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d011      	beq.n	800823e <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	4a13      	ldr	r2, [pc, #76]	; (800826c <HAL_SD_IRQHandler+0x2e8>)
 8008220:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	4618      	mov	r0, r3
 8008228:	f7fc fd9e 	bl	8004d68 <HAL_DMA_Abort_IT>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fb67 	bl	800890a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800823c:	e00d      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f004 ff0c 	bl	800d070 <HAL_SD_AbortCallback>
}
 8008258:	e7ff      	b.n	800825a <HAL_SD_IRQHandler+0x2d6>
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	ffff3ec5 	.word	0xffff3ec5
 8008268:	0800889d 	.word	0x0800889d
 800826c:	0800890b 	.word	0x0800890b

08008270 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008292:	0f9b      	lsrs	r3, r3, #30
 8008294:	b2da      	uxtb	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800829e:	0e9b      	lsrs	r3, r3, #26
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b0:	0e1b      	lsrs	r3, r3, #24
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c2:	0c1b      	lsrs	r3, r3, #16
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ce:	0a1b      	lsrs	r3, r3, #8
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e4:	0d1b      	lsrs	r3, r3, #20
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082f0:	0c1b      	lsrs	r3, r3, #16
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008302:	0bdb      	lsrs	r3, r3, #15
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	b2da      	uxtb	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008314:	0b9b      	lsrs	r3, r3, #14
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	b2da      	uxtb	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008326:	0b5b      	lsrs	r3, r3, #13
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	b2da      	uxtb	r2, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008338:	0b1b      	lsrs	r3, r3, #12
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2200      	movs	r2, #0
 800834a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008350:	2b00      	cmp	r3, #0
 8008352:	d163      	bne.n	800841c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008358:	009a      	lsls	r2, r3, #2
 800835a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800835e:	4013      	ands	r3, r2
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008364:	0f92      	lsrs	r2, r2, #30
 8008366:	431a      	orrs	r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008370:	0edb      	lsrs	r3, r3, #27
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	b2da      	uxtb	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008382:	0e1b      	lsrs	r3, r3, #24
 8008384:	b2db      	uxtb	r3, r3
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	b2da      	uxtb	r2, r3
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008394:	0d5b      	lsrs	r3, r3, #21
 8008396:	b2db      	uxtb	r3, r3
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	b2da      	uxtb	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a6:	0c9b      	lsrs	r3, r3, #18
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b8:	0bdb      	lsrs	r3, r3, #15
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	7e1b      	ldrb	r3, [r3, #24]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	3302      	adds	r3, #2
 80083dc:	2201      	movs	r2, #1
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80083e6:	fb02 f203 	mul.w	r2, r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	7a1b      	ldrb	r3, [r3, #8]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	2201      	movs	r2, #1
 80083fa:	409a      	lsls	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008408:	0a52      	lsrs	r2, r2, #9
 800840a:	fb02 f203 	mul.w	r2, r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008418:	661a      	str	r2, [r3, #96]	; 0x60
 800841a:	e031      	b.n	8008480 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008420:	2b01      	cmp	r3, #1
 8008422:	d11d      	bne.n	8008460 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008428:	041b      	lsls	r3, r3, #16
 800842a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008432:	0c1b      	lsrs	r3, r3, #16
 8008434:	431a      	orrs	r2, r3
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	3301      	adds	r3, #1
 8008440:	029a      	lsls	r2, r3, #10
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008454:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	661a      	str	r2, [r3, #96]	; 0x60
 800845e:	e00f      	b.n	8008480 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a58      	ldr	r2, [pc, #352]	; (80085c8 <HAL_SD_GetCardCSD+0x344>)
 8008466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e09d      	b.n	80085bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008484:	0b9b      	lsrs	r3, r3, #14
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	b2da      	uxtb	r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008496:	09db      	lsrs	r3, r3, #7
 8008498:	b2db      	uxtb	r3, r3
 800849a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	0fdb      	lsrs	r3, r3, #31
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c4:	0f5b      	lsrs	r3, r3, #29
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 0303 	and.w	r3, r3, #3
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	0e9b      	lsrs	r3, r3, #26
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e8:	0d9b      	lsrs	r3, r3, #22
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fa:	0d5b      	lsrs	r3, r3, #21
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008516:	0c1b      	lsrs	r3, r3, #16
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852a:	0bdb      	lsrs	r3, r3, #15
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853e:	0b9b      	lsrs	r3, r3, #14
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	0b5b      	lsrs	r3, r3, #13
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	0b1b      	lsrs	r3, r3, #12
 8008568:	b2db      	uxtb	r3, r3
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	b2da      	uxtb	r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857a:	0a9b      	lsrs	r3, r3, #10
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	0a1b      	lsrs	r3, r3, #8
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	b2da      	uxtb	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	004005ff 	.word	0x004005ff

080085cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008624:	b5b0      	push	{r4, r5, r7, lr}
 8008626:	b08e      	sub	sp, #56	; 0x38
 8008628:	af04      	add	r7, sp, #16
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2203      	movs	r2, #3
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	2b03      	cmp	r3, #3
 800863c:	d02e      	beq.n	800869c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008644:	d106      	bne.n	8008654 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	639a      	str	r2, [r3, #56]	; 0x38
 8008652:	e029      	b.n	80086a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865a:	d10a      	bne.n	8008672 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fb0f 	bl	8008c80 <SD_WideBus_Enable>
 8008662:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	431a      	orrs	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
 8008670:	e01a      	b.n	80086a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fb4c 	bl	8008d16 <SD_WideBus_Disable>
 800867e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	639a      	str	r2, [r3, #56]	; 0x38
 800868c:	e00c      	b.n	80086a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	639a      	str	r2, [r3, #56]	; 0x38
 800869a:	e005      	b.n	80086a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d009      	beq.n	80086c4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a18      	ldr	r2, [pc, #96]	; (8008718 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e024      	b.n	800870e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681d      	ldr	r5, [r3, #0]
 80086ea:	466c      	mov	r4, sp
 80086ec:	f107 0318 	add.w	r3, r7, #24
 80086f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086fe:	4628      	mov	r0, r5
 8008700:	f002 fb9a 	bl	800ae38 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3728      	adds	r7, #40	; 0x28
 8008712:	46bd      	mov	sp, r7
 8008714:	bdb0      	pop	{r4, r5, r7, pc}
 8008716:	bf00      	nop
 8008718:	004005ff 	.word	0x004005ff

0800871c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008728:	f107 030c 	add.w	r3, r7, #12
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa7e 	bl	8008c30 <SD_SendStatus>
 8008734:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	0a5b      	lsrs	r3, r3, #9
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008752:	693b      	ldr	r3, [r7, #16]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008778:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800877a:	bf00      	nop
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	2b82      	cmp	r3, #130	; 0x82
 800879a:	d111      	bne.n	80087c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 fcd1 	bl	800b148 <SDMMC_CmdStopTransfer>
 80087a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d008      	beq.n	80087c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	431a      	orrs	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff fd58 	bl	8008270 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0208 	bic.w	r2, r2, #8
 80087ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f004 fc55 	bl	800d098 <HAL_SD_RxCpltCallback>
#endif
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fc fc5a 	bl	80050c0 <HAL_DMA_GetError>
 800880c:	4603      	mov	r3, r0
 800880e:	2b02      	cmp	r3, #2
 8008810:	d03e      	beq.n	8008890 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008818:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008820:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d002      	beq.n	800882e <SD_DMAError+0x36>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d12d      	bne.n	800888a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a19      	ldr	r2, [pc, #100]	; (8008898 <SD_DMAError+0xa0>)
 8008834:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008844:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008852:	6978      	ldr	r0, [r7, #20]
 8008854:	f7ff ff62 	bl	800871c <HAL_SD_GetCardState>
 8008858:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b06      	cmp	r3, #6
 800885e:	d002      	beq.n	8008866 <SD_DMAError+0x6e>
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2b05      	cmp	r3, #5
 8008864:	d10a      	bne.n	800887c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f002 fc6c 	bl	800b148 <SDMMC_CmdStopTransfer>
 8008870:	4602      	mov	r2, r0
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	431a      	orrs	r2, r3
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2200      	movs	r2, #0
 8008888:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800888a:	6978      	ldr	r0, [r7, #20]
 800888c:	f7ff fcf0 	bl	8008270 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008890:	bf00      	nop
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	004005ff 	.word	0x004005ff

0800889c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7ff ff31 	bl	800871c <HAL_SD_GetCardState>
 80088ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b06      	cmp	r3, #6
 80088ce:	d002      	beq.n	80088d6 <SD_DMATxAbort+0x3a>
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b05      	cmp	r3, #5
 80088d4:	d10a      	bne.n	80088ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f002 fc34 	bl	800b148 <SDMMC_CmdStopTransfer>
 80088e0:	4602      	mov	r2, r0
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	431a      	orrs	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d103      	bne.n	80088fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f004 fbbb 	bl	800d070 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80088fa:	e002      	b.n	8008902 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7ff fcb7 	bl	8008270 <HAL_SD_ErrorCallback>
}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008920:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fefa 	bl	800871c <HAL_SD_GetCardState>
 8008928:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b06      	cmp	r3, #6
 800893c:	d002      	beq.n	8008944 <SD_DMARxAbort+0x3a>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b05      	cmp	r3, #5
 8008942:	d10a      	bne.n	800895a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f002 fbfd 	bl	800b148 <SDMMC_CmdStopTransfer>
 800894e:	4602      	mov	r2, r0
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	431a      	orrs	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f004 fb84 	bl	800d070 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008968:	e002      	b.n	8008970 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff fc80 	bl	8008270 <HAL_SD_ErrorCallback>
}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008978:	b5b0      	push	{r4, r5, r7, lr}
 800897a:	b094      	sub	sp, #80	; 0x50
 800897c:	af04      	add	r7, sp, #16
 800897e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008980:	2301      	movs	r3, #1
 8008982:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f002 faae 	bl	800aeea <SDMMC_GetPowerState>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d102      	bne.n	800899a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008994:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008998:	e0b7      	b.n	8008b0a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d02f      	beq.n	8008a02 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f002 fcd9 	bl	800b35e <SDMMC_CmdSendCID>
 80089ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80089b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b6:	e0a8      	b.n	8008b0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2100      	movs	r1, #0
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 fad9 	bl	800af76 <SDMMC_GetResponse>
 80089c4:	4602      	mov	r2, r0
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2104      	movs	r1, #4
 80089d0:	4618      	mov	r0, r3
 80089d2:	f002 fad0 	bl	800af76 <SDMMC_GetResponse>
 80089d6:	4602      	mov	r2, r0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2108      	movs	r1, #8
 80089e2:	4618      	mov	r0, r3
 80089e4:	f002 fac7 	bl	800af76 <SDMMC_GetResponse>
 80089e8:	4602      	mov	r2, r0
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	210c      	movs	r1, #12
 80089f4:	4618      	mov	r0, r3
 80089f6:	f002 fabe 	bl	800af76 <SDMMC_GetResponse>
 80089fa:	4602      	mov	r2, r0
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d00d      	beq.n	8008a26 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f107 020e 	add.w	r2, r7, #14
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f002 fcdf 	bl	800b3d8 <SDMMC_CmdSetRelAdd>
 8008a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <SD_InitCard+0xae>
    {
      return errorstate;
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	e071      	b.n	8008b0a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d036      	beq.n	8008a9c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008a2e:	89fb      	ldrh	r3, [r7, #14]
 8008a30:	461a      	mov	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3e:	041b      	lsls	r3, r3, #16
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f002 fca9 	bl	800b39a <SDMMC_CmdSendCSD>
 8008a48:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a52:	e05a      	b.n	8008b0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f002 fa8b 	bl	800af76 <SDMMC_GetResponse>
 8008a60:	4602      	mov	r2, r0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f002 fa82 	bl	800af76 <SDMMC_GetResponse>
 8008a72:	4602      	mov	r2, r0
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2108      	movs	r1, #8
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f002 fa79 	bl	800af76 <SDMMC_GetResponse>
 8008a84:	4602      	mov	r2, r0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	210c      	movs	r1, #12
 8008a90:	4618      	mov	r0, r3
 8008a92:	f002 fa70 	bl	800af76 <SDMMC_GetResponse>
 8008a96:	4602      	mov	r2, r0
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2104      	movs	r1, #4
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f002 fa67 	bl	800af76 <SDMMC_GetResponse>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	0d1a      	lsrs	r2, r3, #20
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008ab0:	f107 0310 	add.w	r3, r7, #16
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fbe4 	bl	8008284 <HAL_SD_GetCardCSD>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ac2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ac6:	e020      	b.n	8008b0a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6819      	ldr	r1, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad0:	041b      	lsls	r3, r3, #16
 8008ad2:	f04f 0400 	mov.w	r4, #0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4623      	mov	r3, r4
 8008ada:	4608      	mov	r0, r1
 8008adc:	f002 fb56 	bl	800b18c <SDMMC_CmdSelDesel>
 8008ae0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <SD_InitCard+0x174>
  {
    return errorstate;
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aea:	e00e      	b.n	8008b0a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681d      	ldr	r5, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	466c      	mov	r4, sp
 8008af4:	f103 0210 	add.w	r2, r3, #16
 8008af8:	ca07      	ldmia	r2, {r0, r1, r2}
 8008afa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008afe:	3304      	adds	r3, #4
 8008b00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b02:	4628      	mov	r0, r5
 8008b04:	f002 f998 	bl	800ae38 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3740      	adds	r7, #64	; 0x40
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008b14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	2300      	movs	r3, #0
 8008b26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f002 fb50 	bl	800b1d2 <SDMMC_CmdGoIdleState>
 8008b32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	e072      	b.n	8008c24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f002 fb63 	bl	800b20e <SDMMC_CmdOperCond>
 8008b48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00d      	beq.n	8008b6c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f002 fb39 	bl	800b1d2 <SDMMC_CmdGoIdleState>
 8008b60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d004      	beq.n	8008b72 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	e05b      	b.n	8008c24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d137      	bne.n	8008bea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f002 fb63 	bl	800b24c <SDMMC_CmdAppCommand>
 8008b86:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d02d      	beq.n	8008bea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b92:	e047      	b.n	8008c24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f002 fb56 	bl	800b24c <SDMMC_CmdAppCommand>
 8008ba0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <SD_PowerON+0x98>
    {
      return errorstate;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	e03b      	b.n	8008c24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	491e      	ldr	r1, [pc, #120]	; (8008c2c <SD_PowerON+0x118>)
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f002 fb6c 	bl	800b290 <SDMMC_CmdAppOperCommand>
 8008bb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bc4:	e02e      	b.n	8008c24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f002 f9d2 	bl	800af76 <SDMMC_GetResponse>
 8008bd2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	0fdb      	lsrs	r3, r3, #31
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <SD_PowerON+0xcc>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <SD_PowerON+0xce>
 8008be0:	2300      	movs	r3, #0
 8008be2:	613b      	str	r3, [r7, #16]

    count++;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d802      	bhi.n	8008bfa <SD_PowerON+0xe6>
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0cc      	beq.n	8008b94 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d902      	bls.n	8008c0a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c08:	e00c      	b.n	8008c24 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	645a      	str	r2, [r3, #68]	; 0x44
 8008c1a:	e002      	b.n	8008c22 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	c1100000 	.word	0xc1100000

08008c30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c44:	e018      	b.n	8008c78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4e:	041b      	lsls	r3, r3, #16
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f002 fbe1 	bl	800b41a <SDMMC_CmdSendStatus>
 8008c58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	e009      	b.n	8008c78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f002 f983 	bl	800af76 <SDMMC_GetResponse>
 8008c70:	4602      	mov	r2, r0
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f002 f96d 	bl	800af76 <SDMMC_GetResponse>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ca6:	d102      	bne.n	8008cae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cac:	e02f      	b.n	8008d0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008cae:	f107 030c 	add.w	r3, r7, #12
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f879 	bl	8008dac <SD_FindSCR>
 8008cba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	e023      	b.n	8008d0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01c      	beq.n	8008d0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f002 fab5 	bl	800b24c <SDMMC_CmdAppCommand>
 8008ce2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	e00f      	b.n	8008d0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f002 faef 	bl	800b2d8 <SDMMC_CmdBusWidth>
 8008cfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	e003      	b.n	8008d0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e001      	b.n	8008d0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	2300      	movs	r3, #0
 8008d24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f002 f922 	bl	800af76 <SDMMC_GetResponse>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d3c:	d102      	bne.n	8008d44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d42:	e02f      	b.n	8008da4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008d44:	f107 030c 	add.w	r3, r7, #12
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f82e 	bl	8008dac <SD_FindSCR>
 8008d50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	e023      	b.n	8008da4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01c      	beq.n	8008da0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6e:	041b      	lsls	r3, r3, #16
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f002 fa6a 	bl	800b24c <SDMMC_CmdAppCommand>
 8008d78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	e00f      	b.n	8008da4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 faa4 	bl	800b2d8 <SDMMC_CmdBusWidth>
 8008d90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	e003      	b.n	8008da4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e001      	b.n	8008da4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008da0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008dac:	b590      	push	{r4, r7, lr}
 8008dae:	b08f      	sub	sp, #60	; 0x3c
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008db6:	f7fb fdb9 	bl	800492c <HAL_GetTick>
 8008dba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60bb      	str	r3, [r7, #8]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2108      	movs	r1, #8
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f002 f90e 	bl	800aff4 <SDMMC_CmdBlockLength>
 8008dd8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	e0a9      	b.n	8008f38 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dec:	041b      	lsls	r3, r3, #16
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f002 fa2b 	bl	800b24c <SDMMC_CmdAppCommand>
 8008df6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	e09a      	b.n	8008f38 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e02:	f04f 33ff 	mov.w	r3, #4294967295
 8008e06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008e08:	2308      	movs	r3, #8
 8008e0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008e0c:	2330      	movs	r3, #48	; 0x30
 8008e0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e10:	2302      	movs	r3, #2
 8008e12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f107 0210 	add.w	r2, r7, #16
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f002 f8b8 	bl	800af9c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 fa73 	bl	800b31c <SDMMC_CmdSendSCR>
 8008e36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d022      	beq.n	8008e84 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	e07a      	b.n	8008f38 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00e      	beq.n	8008e6e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6819      	ldr	r1, [r3, #0]
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	f107 0208 	add.w	r2, r7, #8
 8008e5c:	18d4      	adds	r4, r2, r3
 8008e5e:	4608      	mov	r0, r1
 8008e60:	f002 f816 	bl	800ae90 <SDMMC_ReadFIFO>
 8008e64:	4603      	mov	r3, r0
 8008e66:	6023      	str	r3, [r4, #0]
      index++;
 8008e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e6e:	f7fb fd5d 	bl	800492c <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d102      	bne.n	8008e84 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e82:	e059      	b.n	8008f38 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e8a:	f240 432a 	movw	r3, #1066	; 0x42a
 8008e8e:	4013      	ands	r3, r2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0d6      	beq.n	8008e42 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008eaa:	2308      	movs	r3, #8
 8008eac:	e044      	b.n	8008f38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d005      	beq.n	8008ec8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e037      	b.n	8008f38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2220      	movs	r2, #32
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008ede:	2320      	movs	r3, #32
 8008ee0:	e02a      	b.n	8008f38 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f240 523a 	movw	r2, #1338	; 0x53a
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	061a      	lsls	r2, r3, #24
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	021b      	lsls	r3, r3, #8
 8008ef4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ef8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	0a1b      	lsrs	r3, r3, #8
 8008efe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	0e1b      	lsrs	r3, r3, #24
 8008f08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	601a      	str	r2, [r3, #0]
    scr++;
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	3304      	adds	r3, #4
 8008f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	061a      	lsls	r2, r3, #24
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	0a1b      	lsrs	r3, r3, #8
 8008f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	0e1b      	lsrs	r3, r3, #24
 8008f30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	373c      	adds	r7, #60	; 0x3c
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd90      	pop	{r4, r7, pc}

08008f40 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d03f      	beq.n	8008fda <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e033      	b.n	8008fc8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 ff93 	bl	800ae90 <SDMMC_ReadFIFO>
 8008f6a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3301      	adds	r3, #1
 8008f78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	0c1b      	lsrs	r3, r3, #16
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	0e1b      	lsrs	r3, r3, #24
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b07      	cmp	r3, #7
 8008fcc:	d9c8      	bls.n	8008f60 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008fda:	bf00      	nop
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d043      	beq.n	8009084 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	617b      	str	r3, [r7, #20]
 8009000:	e037      	b.n	8009072 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3b01      	subs	r3, #1
 8009012:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	021a      	lsls	r2, r3, #8
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	4313      	orrs	r3, r2
 800901e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	3b01      	subs	r3, #1
 800902a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	041a      	lsls	r2, r3, #16
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4313      	orrs	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3b01      	subs	r3, #1
 8009042:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	061a      	lsls	r2, r3, #24
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4313      	orrs	r3, r2
 800904e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3b01      	subs	r3, #1
 800905a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f107 0208 	add.w	r2, r7, #8
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f001 ff1f 	bl	800aeaa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	3301      	adds	r3, #1
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b07      	cmp	r3, #7
 8009076:	d9c4      	bls.n	8009002 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009084:	bf00      	nop
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e084      	b.n	80091a8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7f9 fd01 	bl	8002ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2202      	movs	r2, #2
 80090c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090de:	d902      	bls.n	80090e6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e002      	b.n	80090ec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80090f4:	d007      	beq.n	8009106 <HAL_SPI_Init+0x7a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090fe:	d002      	beq.n	8009106 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10b      	bne.n	8009126 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009116:	d903      	bls.n	8009120 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	631a      	str	r2, [r3, #48]	; 0x30
 800911e:	e002      	b.n	8009126 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009144:	431a      	orrs	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	431a      	orrs	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	ea42 0103 	orr.w	r1, r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	0c1b      	lsrs	r3, r3, #16
 8009166:	f003 0204 	and.w	r2, r3, #4
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009174:	431a      	orrs	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	ea42 0103 	orr.w	r1, r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	430a      	orrs	r2, r1
 8009186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69da      	ldr	r2, [r3, #28]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d110      	bne.n	80091ec <HAL_SPI_Receive_IT+0x3c>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091d2:	d10b      	bne.n	80091ec <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2204      	movs	r2, #4
 80091d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f88c 	bl	8009300 <HAL_SPI_TransmitReceive_IT>
 80091e8:	4603      	mov	r3, r0
 80091ea:	e081      	b.n	80092f0 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <HAL_SPI_Receive_IT+0x4a>
 80091f6:	2302      	movs	r3, #2
 80091f8:	e07a      	b.n	80092f0 <HAL_SPI_Receive_IT+0x140>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b01      	cmp	r3, #1
 800920c:	d002      	beq.n	8009214 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800920e:	2302      	movs	r3, #2
 8009210:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009212:	e068      	b.n	80092e6 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_SPI_Receive_IT+0x70>
 800921a:	88fb      	ldrh	r3, [r7, #6]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009224:	e05f      	b.n	80092e6 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2204      	movs	r2, #4
 800922a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	88fa      	ldrh	r2, [r7, #6]
 800923e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	88fa      	ldrh	r2, [r7, #6]
 8009246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800926a:	d90b      	bls.n	8009284 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800927a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4a1e      	ldr	r2, [pc, #120]	; (80092f8 <HAL_SPI_Receive_IT+0x148>)
 8009280:	64da      	str	r2, [r3, #76]	; 0x4c
 8009282:	e00a      	b.n	800929a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009292:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4a19      	ldr	r2, [pc, #100]	; (80092fc <HAL_SPI_Receive_IT+0x14c>)
 8009298:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a2:	d107      	bne.n	80092b4 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092b2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80092c2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ce:	2b40      	cmp	r3, #64	; 0x40
 80092d0:	d008      	beq.n	80092e4 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	e000      	b.n	80092e6 <HAL_SPI_Receive_IT+0x136>
  }

error :
 80092e4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	08009919 	.word	0x08009919
 80092fc:	080098c9 	.word	0x080098c9

08009300 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_SPI_TransmitReceive_IT+0x20>
 800931c:	2302      	movs	r3, #2
 800931e:	e091      	b.n	8009444 <HAL_SPI_TransmitReceive_IT+0x144>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800932e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009336:	7dbb      	ldrb	r3, [r7, #22]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d00d      	beq.n	8009358 <HAL_SPI_TransmitReceive_IT+0x58>
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009342:	d106      	bne.n	8009352 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <HAL_SPI_TransmitReceive_IT+0x52>
 800934c:	7dbb      	ldrb	r3, [r7, #22]
 800934e:	2b04      	cmp	r3, #4
 8009350:	d002      	beq.n	8009358 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009352:	2302      	movs	r3, #2
 8009354:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009356:	e070      	b.n	800943a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d005      	beq.n	800936a <HAL_SPI_TransmitReceive_IT+0x6a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <HAL_SPI_TransmitReceive_IT+0x6a>
 8009364:	887b      	ldrh	r3, [r7, #2]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800936e:	e064      	b.n	800943a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b04      	cmp	r3, #4
 800937a:	d003      	beq.n	8009384 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2205      	movs	r2, #5
 8009380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	887a      	ldrh	r2, [r7, #2]
 8009394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	887a      	ldrh	r2, [r7, #2]
 800939a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	887a      	ldrh	r2, [r7, #2]
 80093a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	887a      	ldrh	r2, [r7, #2]
 80093ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093ba:	d906      	bls.n	80093ca <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4a24      	ldr	r2, [pc, #144]	; (8009450 <HAL_SPI_TransmitReceive_IT+0x150>)
 80093c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4a23      	ldr	r2, [pc, #140]	; (8009454 <HAL_SPI_TransmitReceive_IT+0x154>)
 80093c6:	651a      	str	r2, [r3, #80]	; 0x50
 80093c8:	e005      	b.n	80093d6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4a22      	ldr	r2, [pc, #136]	; (8009458 <HAL_SPI_TransmitReceive_IT+0x158>)
 80093ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4a22      	ldr	r2, [pc, #136]	; (800945c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80093d4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093de:	d802      	bhi.n	80093e6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80093e0:	887b      	ldrh	r3, [r7, #2]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d908      	bls.n	80093f8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093f4:	605a      	str	r2, [r3, #4]
 80093f6:	e007      	b.n	8009408 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009406:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009416:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b40      	cmp	r3, #64	; 0x40
 8009424:	d008      	beq.n	8009438 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	e000      	b.n	800943a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009438:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
}
 8009444:	4618      	mov	r0, r3
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	08009803 	.word	0x08009803
 8009454:	08009869 	.word	0x08009869
 8009458:	080096b3 	.word	0x080096b3
 800945c:	08009771 	.word	0x08009771

08009460 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b088      	sub	sp, #32
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	099b      	lsrs	r3, r3, #6
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10f      	bne.n	80094a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	099b      	lsrs	r3, r3, #6
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d004      	beq.n	80094a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
    return;
 80094a2:	e0d8      	b.n	8009656 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	085b      	lsrs	r3, r3, #1
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00a      	beq.n	80094c6 <HAL_SPI_IRQHandler+0x66>
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	09db      	lsrs	r3, r3, #7
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3
    return;
 80094c4:	e0c7      	b.n	8009656 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10c      	bne.n	80094ec <HAL_SPI_IRQHandler+0x8c>
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	099b      	lsrs	r3, r3, #6
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_SPI_IRQHandler+0x8c>
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 80b5 	beq.w	8009656 <HAL_SPI_IRQHandler+0x1f6>
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80ae 	beq.w	8009656 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	099b      	lsrs	r3, r3, #6
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d023      	beq.n	800954e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d011      	beq.n	8009536 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009516:	f043 0204 	orr.w	r2, r3, #4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	e00b      	b.n	800954e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009536:	2300      	movs	r3, #0
 8009538:	613b      	str	r3, [r7, #16]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	693b      	ldr	r3, [r7, #16]
        return;
 800954c:	e083      	b.n	8009656 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d014      	beq.n	8009584 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800955e:	f043 0201 	orr.w	r2, r3, #1
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	0a1b      	lsrs	r3, r3, #8
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00c      	beq.n	80095aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009594:	f043 0208 	orr.w	r2, r3, #8
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800959c:	2300      	movs	r3, #0
 800959e:	60bb      	str	r3, [r7, #8]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	60bb      	str	r3, [r7, #8]
 80095a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d050      	beq.n	8009654 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d104      	bne.n	80095de <HAL_SPI_IRQHandler+0x17e>
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d034      	beq.n	8009648 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0203 	bic.w	r2, r2, #3
 80095ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d011      	beq.n	800961a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fa:	4a18      	ldr	r2, [pc, #96]	; (800965c <HAL_SPI_IRQHandler+0x1fc>)
 80095fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009602:	4618      	mov	r0, r3
 8009604:	f7fb fbb0 	bl	8004d68 <HAL_DMA_Abort_IT>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d005      	beq.n	800961a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961e:	2b00      	cmp	r3, #0
 8009620:	d016      	beq.n	8009650 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009626:	4a0d      	ldr	r2, [pc, #52]	; (800965c <HAL_SPI_IRQHandler+0x1fc>)
 8009628:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962e:	4618      	mov	r0, r3
 8009630:	f7fb fb9a 	bl	8004d68 <HAL_DMA_Abort_IT>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800963e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009646:	e003      	b.n	8009650 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f813 	bl	8009674 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800964e:	e000      	b.n	8009652 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009650:	bf00      	nop
    return;
 8009652:	bf00      	nop
 8009654:	bf00      	nop
  }
}
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	08009689 	.word	0x08009689

08009660 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7ff ffe5 	bl	8009674 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d923      	bls.n	800970e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	b292      	uxth	r2, r2
 80096d2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d8:	1c9a      	adds	r2, r3, #2
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3b02      	subs	r3, #2
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d11f      	bne.n	800973c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800970a:	605a      	str	r2, [r3, #4]
 800970c:	e016      	b.n	800973c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f103 020c 	add.w	r2, r3, #12
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009730:	b29b      	uxth	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009742:	b29b      	uxth	r3, r3
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10f      	bne.n	8009768 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009756:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800975c:	b29b      	uxth	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d102      	bne.n	8009768 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa73 	bl	8009c4e <SPI_CloseRxTx_ISR>
    }
  }
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800977c:	b29b      	uxth	r3, r3
 800977e:	2b01      	cmp	r3, #1
 8009780:	d912      	bls.n	80097a8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	881a      	ldrh	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	1c9a      	adds	r2, r3, #2
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b02      	subs	r3, #2
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097a6:	e012      	b.n	80097ce <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	330c      	adds	r3, #12
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d110      	bne.n	80097fa <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097e6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d102      	bne.n	80097fa <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa2a 	bl	8009c4e <SPI_CloseRxTx_ISR>
    }
  }
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009814:	b292      	uxth	r2, r2
 8009816:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981c:	1c9a      	adds	r2, r3, #2
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009828:	b29b      	uxth	r3, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	b29a      	uxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800983a:	b29b      	uxth	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10f      	bne.n	8009860 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800984e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009854:	b29b      	uxth	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f9f7 	bl	8009c4e <SPI_CloseRxTx_ISR>
    }
  }
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	881a      	ldrh	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	1c9a      	adds	r2, r3, #2
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009898:	b29b      	uxth	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d110      	bne.n	80098c0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f9c7 	bl	8009c4e <SPI_CloseRxTx_ISR>
    }
  }
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f103 020c 	add.w	r2, r3, #12
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098dc:	7812      	ldrb	r2, [r2, #0]
 80098de:	b2d2      	uxtb	r2, r2
 80098e0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f9e1 	bl	8009cd2 <SPI_CloseRx_ISR>
  }
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	b292      	uxth	r2, r2
 800992c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	1c9a      	adds	r2, r3, #2
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d102      	bne.n	800995c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f9bb 	bl	8009cd2 <SPI_CloseRx_ISR>
  }
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	4613      	mov	r3, r2
 8009972:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009974:	e04c      	b.n	8009a10 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997c:	d048      	beq.n	8009a10 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800997e:	f7fa ffd5 	bl	800492c <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d902      	bls.n	8009994 <SPI_WaitFlagStateUntilTimeout+0x30>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d13d      	bne.n	8009a10 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ac:	d111      	bne.n	80099d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b6:	d004      	beq.n	80099c2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c0:	d107      	bne.n	80099d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099da:	d10f      	bne.n	80099fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e00f      	b.n	8009a30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	bf0c      	ite	eq
 8009a20:	2301      	moveq	r3, #1
 8009a22:	2300      	movne	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d1a3      	bne.n	8009976 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a46:	e057      	b.n	8009af8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a4e:	d106      	bne.n	8009a5e <SPI_WaitFifoStateUntilTimeout+0x26>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	330c      	adds	r3, #12
 8009a5c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d048      	beq.n	8009af8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009a66:	f7fa ff61 	bl	800492c <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d902      	bls.n	8009a7c <SPI_WaitFifoStateUntilTimeout+0x44>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d13d      	bne.n	8009af8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a94:	d111      	bne.n	8009aba <SPI_WaitFifoStateUntilTimeout+0x82>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a9e:	d004      	beq.n	8009aaa <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aa8:	d107      	bne.n	8009aba <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ab8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ac2:	d10f      	bne.n	8009ae4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ae2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e008      	b.n	8009b0a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689a      	ldr	r2, [r3, #8]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4013      	ands	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d19f      	bne.n	8009a48 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af02      	add	r7, sp, #8
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b26:	d111      	bne.n	8009b4c <SPI_EndRxTransaction+0x3a>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b30:	d004      	beq.n	8009b3c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b3a:	d107      	bne.n	8009b4c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b4a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2200      	movs	r2, #0
 8009b54:	2180      	movs	r1, #128	; 0x80
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff ff04 	bl	8009964 <SPI_WaitFlagStateUntilTimeout>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d007      	beq.n	8009b72 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b66:	f043 0220 	orr.w	r2, r3, #32
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e023      	b.n	8009bba <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b7a:	d11d      	bne.n	8009bb8 <SPI_EndRxTransaction+0xa6>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b84:	d004      	beq.n	8009b90 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b8e:	d113      	bne.n	8009bb8 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff ff4b 	bl	8009a38 <SPI_WaitFifoStateUntilTimeout>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d007      	beq.n	8009bb8 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bac:	f043 0220 	orr.w	r2, r3, #32
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e000      	b.n	8009bba <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	af02      	add	r7, sp, #8
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff ff2c 	bl	8009a38 <SPI_WaitFifoStateUntilTimeout>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bea:	f043 0220 	orr.w	r2, r3, #32
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e027      	b.n	8009c46 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2180      	movs	r1, #128	; 0x80
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff feaf 	bl	8009964 <SPI_WaitFlagStateUntilTimeout>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d007      	beq.n	8009c1c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c10:	f043 0220 	orr.w	r2, r3, #32
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e014      	b.n	8009c46 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7ff ff05 	bl	8009a38 <SPI_WaitFifoStateUntilTimeout>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d007      	beq.n	8009c44 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c38:	f043 0220 	orr.w	r2, r3, #32
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e000      	b.n	8009c46 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009c56:	f7fa fe69 	bl	800492c <HAL_GetTick>
 8009c5a:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0220 	bic.w	r2, r2, #32
 8009c6a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	2164      	movs	r1, #100	; 0x64
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff ffa6 	bl	8009bc2 <SPI_EndRxTxTransaction>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c80:	f043 0220 	orr.w	r2, r3, #32
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d115      	bne.n	8009cbc <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d107      	bne.n	8009cac <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7fa f9a5 	bl	8003ff4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009caa:	e00e      	b.n	8009cca <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7ff fcd3 	bl	8009660 <HAL_SPI_TxRxCpltCallback>
}
 8009cba:	e006      	b.n	8009cca <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff fcd5 	bl	8009674 <HAL_SPI_ErrorCallback>
}
 8009cca:	bf00      	nop
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009ce8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009cea:	f7fa fe1f 	bl	800492c <HAL_GetTick>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	2164      	movs	r1, #100	; 0x64
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff ff0c 	bl	8009b12 <SPI_EndRxTransaction>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d04:	f043 0220 	orr.w	r2, r3, #32
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d103      	bne.n	8009d24 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7fa f969 	bl	8003ff4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009d22:	e002      	b.n	8009d2a <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fca5 	bl	8009674 <HAL_SPI_ErrorCallback>
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e01d      	b.n	8009d80 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d106      	bne.n	8009d5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f815 	bl	8009d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2202      	movs	r2, #2
 8009d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f000 f985 	bl	800a080 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f042 0201 	orr.w	r2, r2, #1
 8009db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <HAL_TIM_Base_Start_IT+0x50>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b06      	cmp	r3, #6
 8009dc4:	d00b      	beq.n	8009dde <HAL_TIM_Base_Start_IT+0x42>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dcc:	d007      	beq.n	8009dde <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0201 	orr.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	00010007 	.word	0x00010007

08009df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d122      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d11b      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f06f 0202 	mvn.w	r2, #2
 8009e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	f003 0303 	and.w	r3, r3, #3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f905 	bl	800a042 <HAL_TIM_IC_CaptureCallback>
 8009e38:	e005      	b.n	8009e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f8f7 	bl	800a02e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f908 	bl	800a056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f003 0304 	and.w	r3, r3, #4
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d122      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d11b      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f06f 0204 	mvn.w	r2, #4
 8009e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f8db 	bl	800a042 <HAL_TIM_IC_CaptureCallback>
 8009e8c:	e005      	b.n	8009e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8cd 	bl	800a02e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f8de 	bl	800a056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0308 	and.w	r3, r3, #8
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	d122      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d11b      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f06f 0208 	mvn.w	r2, #8
 8009ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2204      	movs	r2, #4
 8009eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f8b1 	bl	800a042 <HAL_TIM_IC_CaptureCallback>
 8009ee0:	e005      	b.n	8009eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f8a3 	bl	800a02e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f8b4 	bl	800a056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0310 	and.w	r3, r3, #16
 8009efe:	2b10      	cmp	r3, #16
 8009f00:	d122      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0310 	and.w	r3, r3, #16
 8009f0c:	2b10      	cmp	r3, #16
 8009f0e:	d11b      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f06f 0210 	mvn.w	r2, #16
 8009f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f887 	bl	800a042 <HAL_TIM_IC_CaptureCallback>
 8009f34:	e005      	b.n	8009f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f879 	bl	800a02e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f88a 	bl	800a056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d10e      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d107      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0201 	mvn.w	r2, #1
 8009f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7f7 fb76 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7e:	2b80      	cmp	r3, #128	; 0x80
 8009f80:	d10e      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8c:	2b80      	cmp	r3, #128	; 0x80
 8009f8e:	d107      	bne.n	8009fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f91a 	bl	800a1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fae:	d10e      	bne.n	8009fce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fba:	2b80      	cmp	r3, #128	; 0x80
 8009fbc:	d107      	bne.n	8009fce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f90d 	bl	800a1e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd8:	2b40      	cmp	r3, #64	; 0x40
 8009fda:	d10e      	bne.n	8009ffa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe6:	2b40      	cmp	r3, #64	; 0x40
 8009fe8:	d107      	bne.n	8009ffa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f838 	bl	800a06a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b20      	cmp	r3, #32
 800a006:	d10e      	bne.n	800a026 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b20      	cmp	r3, #32
 800a014:	d107      	bne.n	800a026 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f06f 0220 	mvn.w	r2, #32
 800a01e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f8cd 	bl	800a1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
	...

0800a080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a40      	ldr	r2, [pc, #256]	; (800a194 <TIM_Base_SetConfig+0x114>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d013      	beq.n	800a0c0 <TIM_Base_SetConfig+0x40>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a09e:	d00f      	beq.n	800a0c0 <TIM_Base_SetConfig+0x40>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a3d      	ldr	r2, [pc, #244]	; (800a198 <TIM_Base_SetConfig+0x118>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00b      	beq.n	800a0c0 <TIM_Base_SetConfig+0x40>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a3c      	ldr	r2, [pc, #240]	; (800a19c <TIM_Base_SetConfig+0x11c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d007      	beq.n	800a0c0 <TIM_Base_SetConfig+0x40>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a3b      	ldr	r2, [pc, #236]	; (800a1a0 <TIM_Base_SetConfig+0x120>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d003      	beq.n	800a0c0 <TIM_Base_SetConfig+0x40>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a3a      	ldr	r2, [pc, #232]	; (800a1a4 <TIM_Base_SetConfig+0x124>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d108      	bne.n	800a0d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a2f      	ldr	r2, [pc, #188]	; (800a194 <TIM_Base_SetConfig+0x114>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d02b      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e0:	d027      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a2c      	ldr	r2, [pc, #176]	; (800a198 <TIM_Base_SetConfig+0x118>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d023      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a2b      	ldr	r2, [pc, #172]	; (800a19c <TIM_Base_SetConfig+0x11c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d01f      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a2a      	ldr	r2, [pc, #168]	; (800a1a0 <TIM_Base_SetConfig+0x120>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d01b      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a29      	ldr	r2, [pc, #164]	; (800a1a4 <TIM_Base_SetConfig+0x124>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d017      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a28      	ldr	r2, [pc, #160]	; (800a1a8 <TIM_Base_SetConfig+0x128>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d013      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a27      	ldr	r2, [pc, #156]	; (800a1ac <TIM_Base_SetConfig+0x12c>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d00f      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a26      	ldr	r2, [pc, #152]	; (800a1b0 <TIM_Base_SetConfig+0x130>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00b      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a25      	ldr	r2, [pc, #148]	; (800a1b4 <TIM_Base_SetConfig+0x134>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d007      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a24      	ldr	r2, [pc, #144]	; (800a1b8 <TIM_Base_SetConfig+0x138>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_Base_SetConfig+0xb2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a23      	ldr	r2, [pc, #140]	; (800a1bc <TIM_Base_SetConfig+0x13c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d108      	bne.n	800a144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a0a      	ldr	r2, [pc, #40]	; (800a194 <TIM_Base_SetConfig+0x114>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d003      	beq.n	800a178 <TIM_Base_SetConfig+0xf8>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a0c      	ldr	r2, [pc, #48]	; (800a1a4 <TIM_Base_SetConfig+0x124>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d103      	bne.n	800a180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	691a      	ldr	r2, [r3, #16]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	615a      	str	r2, [r3, #20]
}
 800a186:	bf00      	nop
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	40010000 	.word	0x40010000
 800a198:	40000400 	.word	0x40000400
 800a19c:	40000800 	.word	0x40000800
 800a1a0:	40000c00 	.word	0x40000c00
 800a1a4:	40010400 	.word	0x40010400
 800a1a8:	40014000 	.word	0x40014000
 800a1ac:	40014400 	.word	0x40014400
 800a1b0:	40014800 	.word	0x40014800
 800a1b4:	40001800 	.word	0x40001800
 800a1b8:	40001c00 	.word	0x40001c00
 800a1bc:	40002000 	.word	0x40002000

0800a1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e040      	b.n	800a290 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7f8 fd3a 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2224      	movs	r2, #36	; 0x24
 800a228:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 0201 	bic.w	r2, r2, #1
 800a238:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f960 	bl	800a500 <UART_SetConfig>
 800a240:	4603      	mov	r3, r0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e022      	b.n	800a290 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fbfe 	bl	800aa54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f042 0201 	orr.w	r2, r2, #1
 800a286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fc85 	bl	800ab98 <UART_CheckIdleState>
 800a28e:	4603      	mov	r3, r0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08a      	sub	sp, #40	; 0x28
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	d17f      	bne.n	800a3b0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <HAL_UART_Transmit+0x24>
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e078      	b.n	800a3b2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d101      	bne.n	800a2ce <HAL_UART_Transmit+0x36>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	e071      	b.n	800a3b2 <HAL_UART_Transmit+0x11a>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2221      	movs	r2, #33	; 0x21
 800a2e0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a2e2:	f7fa fb23 	bl	800492c <HAL_GetTick>
 800a2e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	88fa      	ldrh	r2, [r7, #6]
 800a2ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	88fa      	ldrh	r2, [r7, #6]
 800a2f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a300:	d108      	bne.n	800a314 <HAL_UART_Transmit+0x7c>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d104      	bne.n	800a314 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	61bb      	str	r3, [r7, #24]
 800a312:	e003      	b.n	800a31c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a324:	e02c      	b.n	800a380 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2200      	movs	r2, #0
 800a32e:	2180      	movs	r1, #128	; 0x80
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 fc60 	bl	800abf6 <UART_WaitOnFlagUntilTimeout>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d001      	beq.n	800a340 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e038      	b.n	800a3b2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10b      	bne.n	800a35e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a354:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	3302      	adds	r3, #2
 800a35a:	61bb      	str	r3, [r7, #24]
 800a35c:	e007      	b.n	800a36e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	3301      	adds	r3, #1
 800a36c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a374:	b29b      	uxth	r3, r3
 800a376:	3b01      	subs	r3, #1
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a386:	b29b      	uxth	r3, r3
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1cc      	bne.n	800a326 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2200      	movs	r2, #0
 800a394:	2140      	movs	r1, #64	; 0x40
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fc2d 	bl	800abf6 <UART_WaitOnFlagUntilTimeout>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e005      	b.n	800a3b2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e000      	b.n	800a3b2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a3b0:	2302      	movs	r3, #2
  }
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3720      	adds	r7, #32
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	f040 808a 	bne.w	800a4e8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_UART_Receive_IT+0x24>
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e082      	b.n	800a4ea <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <HAL_UART_Receive_IT+0x36>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e07b      	b.n	800a4ea <HAL_UART_Receive_IT+0x12e>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	88fa      	ldrh	r2, [r7, #6]
 800a404:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	88fa      	ldrh	r2, [r7, #6]
 800a40c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a41e:	d10e      	bne.n	800a43e <HAL_UART_Receive_IT+0x82>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d105      	bne.n	800a434 <HAL_UART_Receive_IT+0x78>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a42e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a432:	e02d      	b.n	800a490 <HAL_UART_Receive_IT+0xd4>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	22ff      	movs	r2, #255	; 0xff
 800a438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a43c:	e028      	b.n	800a490 <HAL_UART_Receive_IT+0xd4>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10d      	bne.n	800a462 <HAL_UART_Receive_IT+0xa6>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d104      	bne.n	800a458 <HAL_UART_Receive_IT+0x9c>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	22ff      	movs	r2, #255	; 0xff
 800a452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a456:	e01b      	b.n	800a490 <HAL_UART_Receive_IT+0xd4>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	227f      	movs	r2, #127	; 0x7f
 800a45c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a460:	e016      	b.n	800a490 <HAL_UART_Receive_IT+0xd4>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a46a:	d10d      	bne.n	800a488 <HAL_UART_Receive_IT+0xcc>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <HAL_UART_Receive_IT+0xc2>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	227f      	movs	r2, #127	; 0x7f
 800a478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a47c:	e008      	b.n	800a490 <HAL_UART_Receive_IT+0xd4>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	223f      	movs	r2, #63	; 0x3f
 800a482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a486:	e003      	b.n	800a490 <HAL_UART_Receive_IT+0xd4>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2222      	movs	r2, #34	; 0x22
 800a49a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0201 	orr.w	r2, r2, #1
 800a4aa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b4:	d107      	bne.n	800a4c6 <HAL_UART_Receive_IT+0x10a>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d103      	bne.n	800a4c6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4a0d      	ldr	r2, [pc, #52]	; (800a4f8 <HAL_UART_Receive_IT+0x13c>)
 800a4c2:	661a      	str	r2, [r3, #96]	; 0x60
 800a4c4:	e002      	b.n	800a4cc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4a0c      	ldr	r2, [pc, #48]	; (800a4fc <HAL_UART_Receive_IT+0x140>)
 800a4ca:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a4e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e000      	b.n	800a4ea <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a4e8:	2302      	movs	r3, #2
  }
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	0800ad93 	.word	0x0800ad93
 800a4fc:	0800aced 	.word	0x0800aced

0800a500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a508:	2300      	movs	r3, #0
 800a50a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	431a      	orrs	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	4313      	orrs	r3, r2
 800a526:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4bb1      	ldr	r3, [pc, #708]	; (800a7f4 <UART_SetConfig+0x2f4>)
 800a530:	4013      	ands	r3, r2
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6812      	ldr	r2, [r2, #0]
 800a536:	6939      	ldr	r1, [r7, #16]
 800a538:	430b      	orrs	r3, r1
 800a53a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	430a      	orrs	r2, r1
 800a574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a9f      	ldr	r2, [pc, #636]	; (800a7f8 <UART_SetConfig+0x2f8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d121      	bne.n	800a5c4 <UART_SetConfig+0xc4>
 800a580:	4b9e      	ldr	r3, [pc, #632]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a586:	f003 0303 	and.w	r3, r3, #3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d816      	bhi.n	800a5bc <UART_SetConfig+0xbc>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <UART_SetConfig+0x94>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5a5 	.word	0x0800a5a5
 800a598:	0800a5b1 	.word	0x0800a5b1
 800a59c:	0800a5ab 	.word	0x0800a5ab
 800a5a0:	0800a5b7 	.word	0x0800a5b7
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	77fb      	strb	r3, [r7, #31]
 800a5a8:	e151      	b.n	800a84e <UART_SetConfig+0x34e>
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	77fb      	strb	r3, [r7, #31]
 800a5ae:	e14e      	b.n	800a84e <UART_SetConfig+0x34e>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	e14b      	b.n	800a84e <UART_SetConfig+0x34e>
 800a5b6:	2308      	movs	r3, #8
 800a5b8:	77fb      	strb	r3, [r7, #31]
 800a5ba:	e148      	b.n	800a84e <UART_SetConfig+0x34e>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	77fb      	strb	r3, [r7, #31]
 800a5c0:	bf00      	nop
 800a5c2:	e144      	b.n	800a84e <UART_SetConfig+0x34e>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a8d      	ldr	r2, [pc, #564]	; (800a800 <UART_SetConfig+0x300>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d134      	bne.n	800a638 <UART_SetConfig+0x138>
 800a5ce:	4b8b      	ldr	r3, [pc, #556]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d4:	f003 030c 	and.w	r3, r3, #12
 800a5d8:	2b0c      	cmp	r3, #12
 800a5da:	d829      	bhi.n	800a630 <UART_SetConfig+0x130>
 800a5dc:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <UART_SetConfig+0xe4>)
 800a5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e2:	bf00      	nop
 800a5e4:	0800a619 	.word	0x0800a619
 800a5e8:	0800a631 	.word	0x0800a631
 800a5ec:	0800a631 	.word	0x0800a631
 800a5f0:	0800a631 	.word	0x0800a631
 800a5f4:	0800a625 	.word	0x0800a625
 800a5f8:	0800a631 	.word	0x0800a631
 800a5fc:	0800a631 	.word	0x0800a631
 800a600:	0800a631 	.word	0x0800a631
 800a604:	0800a61f 	.word	0x0800a61f
 800a608:	0800a631 	.word	0x0800a631
 800a60c:	0800a631 	.word	0x0800a631
 800a610:	0800a631 	.word	0x0800a631
 800a614:	0800a62b 	.word	0x0800a62b
 800a618:	2300      	movs	r3, #0
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e117      	b.n	800a84e <UART_SetConfig+0x34e>
 800a61e:	2302      	movs	r3, #2
 800a620:	77fb      	strb	r3, [r7, #31]
 800a622:	e114      	b.n	800a84e <UART_SetConfig+0x34e>
 800a624:	2304      	movs	r3, #4
 800a626:	77fb      	strb	r3, [r7, #31]
 800a628:	e111      	b.n	800a84e <UART_SetConfig+0x34e>
 800a62a:	2308      	movs	r3, #8
 800a62c:	77fb      	strb	r3, [r7, #31]
 800a62e:	e10e      	b.n	800a84e <UART_SetConfig+0x34e>
 800a630:	2310      	movs	r3, #16
 800a632:	77fb      	strb	r3, [r7, #31]
 800a634:	bf00      	nop
 800a636:	e10a      	b.n	800a84e <UART_SetConfig+0x34e>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a71      	ldr	r2, [pc, #452]	; (800a804 <UART_SetConfig+0x304>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d120      	bne.n	800a684 <UART_SetConfig+0x184>
 800a642:	4b6e      	ldr	r3, [pc, #440]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d00f      	beq.n	800a670 <UART_SetConfig+0x170>
 800a650:	2b10      	cmp	r3, #16
 800a652:	d802      	bhi.n	800a65a <UART_SetConfig+0x15a>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <UART_SetConfig+0x164>
 800a658:	e010      	b.n	800a67c <UART_SetConfig+0x17c>
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	d005      	beq.n	800a66a <UART_SetConfig+0x16a>
 800a65e:	2b30      	cmp	r3, #48	; 0x30
 800a660:	d009      	beq.n	800a676 <UART_SetConfig+0x176>
 800a662:	e00b      	b.n	800a67c <UART_SetConfig+0x17c>
 800a664:	2300      	movs	r3, #0
 800a666:	77fb      	strb	r3, [r7, #31]
 800a668:	e0f1      	b.n	800a84e <UART_SetConfig+0x34e>
 800a66a:	2302      	movs	r3, #2
 800a66c:	77fb      	strb	r3, [r7, #31]
 800a66e:	e0ee      	b.n	800a84e <UART_SetConfig+0x34e>
 800a670:	2304      	movs	r3, #4
 800a672:	77fb      	strb	r3, [r7, #31]
 800a674:	e0eb      	b.n	800a84e <UART_SetConfig+0x34e>
 800a676:	2308      	movs	r3, #8
 800a678:	77fb      	strb	r3, [r7, #31]
 800a67a:	e0e8      	b.n	800a84e <UART_SetConfig+0x34e>
 800a67c:	2310      	movs	r3, #16
 800a67e:	77fb      	strb	r3, [r7, #31]
 800a680:	bf00      	nop
 800a682:	e0e4      	b.n	800a84e <UART_SetConfig+0x34e>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a5f      	ldr	r2, [pc, #380]	; (800a808 <UART_SetConfig+0x308>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d120      	bne.n	800a6d0 <UART_SetConfig+0x1d0>
 800a68e:	4b5b      	ldr	r3, [pc, #364]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a694:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a698:	2b40      	cmp	r3, #64	; 0x40
 800a69a:	d00f      	beq.n	800a6bc <UART_SetConfig+0x1bc>
 800a69c:	2b40      	cmp	r3, #64	; 0x40
 800a69e:	d802      	bhi.n	800a6a6 <UART_SetConfig+0x1a6>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <UART_SetConfig+0x1b0>
 800a6a4:	e010      	b.n	800a6c8 <UART_SetConfig+0x1c8>
 800a6a6:	2b80      	cmp	r3, #128	; 0x80
 800a6a8:	d005      	beq.n	800a6b6 <UART_SetConfig+0x1b6>
 800a6aa:	2bc0      	cmp	r3, #192	; 0xc0
 800a6ac:	d009      	beq.n	800a6c2 <UART_SetConfig+0x1c2>
 800a6ae:	e00b      	b.n	800a6c8 <UART_SetConfig+0x1c8>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	77fb      	strb	r3, [r7, #31]
 800a6b4:	e0cb      	b.n	800a84e <UART_SetConfig+0x34e>
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	77fb      	strb	r3, [r7, #31]
 800a6ba:	e0c8      	b.n	800a84e <UART_SetConfig+0x34e>
 800a6bc:	2304      	movs	r3, #4
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	e0c5      	b.n	800a84e <UART_SetConfig+0x34e>
 800a6c2:	2308      	movs	r3, #8
 800a6c4:	77fb      	strb	r3, [r7, #31]
 800a6c6:	e0c2      	b.n	800a84e <UART_SetConfig+0x34e>
 800a6c8:	2310      	movs	r3, #16
 800a6ca:	77fb      	strb	r3, [r7, #31]
 800a6cc:	bf00      	nop
 800a6ce:	e0be      	b.n	800a84e <UART_SetConfig+0x34e>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a4d      	ldr	r2, [pc, #308]	; (800a80c <UART_SetConfig+0x30c>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d124      	bne.n	800a724 <UART_SetConfig+0x224>
 800a6da:	4b48      	ldr	r3, [pc, #288]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6e8:	d012      	beq.n	800a710 <UART_SetConfig+0x210>
 800a6ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ee:	d802      	bhi.n	800a6f6 <UART_SetConfig+0x1f6>
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d007      	beq.n	800a704 <UART_SetConfig+0x204>
 800a6f4:	e012      	b.n	800a71c <UART_SetConfig+0x21c>
 800a6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fa:	d006      	beq.n	800a70a <UART_SetConfig+0x20a>
 800a6fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a700:	d009      	beq.n	800a716 <UART_SetConfig+0x216>
 800a702:	e00b      	b.n	800a71c <UART_SetConfig+0x21c>
 800a704:	2300      	movs	r3, #0
 800a706:	77fb      	strb	r3, [r7, #31]
 800a708:	e0a1      	b.n	800a84e <UART_SetConfig+0x34e>
 800a70a:	2302      	movs	r3, #2
 800a70c:	77fb      	strb	r3, [r7, #31]
 800a70e:	e09e      	b.n	800a84e <UART_SetConfig+0x34e>
 800a710:	2304      	movs	r3, #4
 800a712:	77fb      	strb	r3, [r7, #31]
 800a714:	e09b      	b.n	800a84e <UART_SetConfig+0x34e>
 800a716:	2308      	movs	r3, #8
 800a718:	77fb      	strb	r3, [r7, #31]
 800a71a:	e098      	b.n	800a84e <UART_SetConfig+0x34e>
 800a71c:	2310      	movs	r3, #16
 800a71e:	77fb      	strb	r3, [r7, #31]
 800a720:	bf00      	nop
 800a722:	e094      	b.n	800a84e <UART_SetConfig+0x34e>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a39      	ldr	r2, [pc, #228]	; (800a810 <UART_SetConfig+0x310>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d124      	bne.n	800a778 <UART_SetConfig+0x278>
 800a72e:	4b33      	ldr	r3, [pc, #204]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a73c:	d012      	beq.n	800a764 <UART_SetConfig+0x264>
 800a73e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a742:	d802      	bhi.n	800a74a <UART_SetConfig+0x24a>
 800a744:	2b00      	cmp	r3, #0
 800a746:	d007      	beq.n	800a758 <UART_SetConfig+0x258>
 800a748:	e012      	b.n	800a770 <UART_SetConfig+0x270>
 800a74a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a74e:	d006      	beq.n	800a75e <UART_SetConfig+0x25e>
 800a750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a754:	d009      	beq.n	800a76a <UART_SetConfig+0x26a>
 800a756:	e00b      	b.n	800a770 <UART_SetConfig+0x270>
 800a758:	2301      	movs	r3, #1
 800a75a:	77fb      	strb	r3, [r7, #31]
 800a75c:	e077      	b.n	800a84e <UART_SetConfig+0x34e>
 800a75e:	2302      	movs	r3, #2
 800a760:	77fb      	strb	r3, [r7, #31]
 800a762:	e074      	b.n	800a84e <UART_SetConfig+0x34e>
 800a764:	2304      	movs	r3, #4
 800a766:	77fb      	strb	r3, [r7, #31]
 800a768:	e071      	b.n	800a84e <UART_SetConfig+0x34e>
 800a76a:	2308      	movs	r3, #8
 800a76c:	77fb      	strb	r3, [r7, #31]
 800a76e:	e06e      	b.n	800a84e <UART_SetConfig+0x34e>
 800a770:	2310      	movs	r3, #16
 800a772:	77fb      	strb	r3, [r7, #31]
 800a774:	bf00      	nop
 800a776:	e06a      	b.n	800a84e <UART_SetConfig+0x34e>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a25      	ldr	r2, [pc, #148]	; (800a814 <UART_SetConfig+0x314>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d124      	bne.n	800a7cc <UART_SetConfig+0x2cc>
 800a782:	4b1e      	ldr	r3, [pc, #120]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a788:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a78c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a790:	d012      	beq.n	800a7b8 <UART_SetConfig+0x2b8>
 800a792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a796:	d802      	bhi.n	800a79e <UART_SetConfig+0x29e>
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d007      	beq.n	800a7ac <UART_SetConfig+0x2ac>
 800a79c:	e012      	b.n	800a7c4 <UART_SetConfig+0x2c4>
 800a79e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7a2:	d006      	beq.n	800a7b2 <UART_SetConfig+0x2b2>
 800a7a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7a8:	d009      	beq.n	800a7be <UART_SetConfig+0x2be>
 800a7aa:	e00b      	b.n	800a7c4 <UART_SetConfig+0x2c4>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	77fb      	strb	r3, [r7, #31]
 800a7b0:	e04d      	b.n	800a84e <UART_SetConfig+0x34e>
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	77fb      	strb	r3, [r7, #31]
 800a7b6:	e04a      	b.n	800a84e <UART_SetConfig+0x34e>
 800a7b8:	2304      	movs	r3, #4
 800a7ba:	77fb      	strb	r3, [r7, #31]
 800a7bc:	e047      	b.n	800a84e <UART_SetConfig+0x34e>
 800a7be:	2308      	movs	r3, #8
 800a7c0:	77fb      	strb	r3, [r7, #31]
 800a7c2:	e044      	b.n	800a84e <UART_SetConfig+0x34e>
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	77fb      	strb	r3, [r7, #31]
 800a7c8:	bf00      	nop
 800a7ca:	e040      	b.n	800a84e <UART_SetConfig+0x34e>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a11      	ldr	r2, [pc, #68]	; (800a818 <UART_SetConfig+0x318>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d139      	bne.n	800a84a <UART_SetConfig+0x34a>
 800a7d6:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <UART_SetConfig+0x2fc>)
 800a7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7e4:	d027      	beq.n	800a836 <UART_SetConfig+0x336>
 800a7e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7ea:	d817      	bhi.n	800a81c <UART_SetConfig+0x31c>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d01c      	beq.n	800a82a <UART_SetConfig+0x32a>
 800a7f0:	e027      	b.n	800a842 <UART_SetConfig+0x342>
 800a7f2:	bf00      	nop
 800a7f4:	efff69f3 	.word	0xefff69f3
 800a7f8:	40011000 	.word	0x40011000
 800a7fc:	40023800 	.word	0x40023800
 800a800:	40004400 	.word	0x40004400
 800a804:	40004800 	.word	0x40004800
 800a808:	40004c00 	.word	0x40004c00
 800a80c:	40005000 	.word	0x40005000
 800a810:	40011400 	.word	0x40011400
 800a814:	40007800 	.word	0x40007800
 800a818:	40007c00 	.word	0x40007c00
 800a81c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a820:	d006      	beq.n	800a830 <UART_SetConfig+0x330>
 800a822:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a826:	d009      	beq.n	800a83c <UART_SetConfig+0x33c>
 800a828:	e00b      	b.n	800a842 <UART_SetConfig+0x342>
 800a82a:	2300      	movs	r3, #0
 800a82c:	77fb      	strb	r3, [r7, #31]
 800a82e:	e00e      	b.n	800a84e <UART_SetConfig+0x34e>
 800a830:	2302      	movs	r3, #2
 800a832:	77fb      	strb	r3, [r7, #31]
 800a834:	e00b      	b.n	800a84e <UART_SetConfig+0x34e>
 800a836:	2304      	movs	r3, #4
 800a838:	77fb      	strb	r3, [r7, #31]
 800a83a:	e008      	b.n	800a84e <UART_SetConfig+0x34e>
 800a83c:	2308      	movs	r3, #8
 800a83e:	77fb      	strb	r3, [r7, #31]
 800a840:	e005      	b.n	800a84e <UART_SetConfig+0x34e>
 800a842:	2310      	movs	r3, #16
 800a844:	77fb      	strb	r3, [r7, #31]
 800a846:	bf00      	nop
 800a848:	e001      	b.n	800a84e <UART_SetConfig+0x34e>
 800a84a:	2310      	movs	r3, #16
 800a84c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a856:	d17f      	bne.n	800a958 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a858:	7ffb      	ldrb	r3, [r7, #31]
 800a85a:	2b08      	cmp	r3, #8
 800a85c:	d85c      	bhi.n	800a918 <UART_SetConfig+0x418>
 800a85e:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <UART_SetConfig+0x364>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a889 	.word	0x0800a889
 800a868:	0800a8a9 	.word	0x0800a8a9
 800a86c:	0800a8c9 	.word	0x0800a8c9
 800a870:	0800a919 	.word	0x0800a919
 800a874:	0800a8e1 	.word	0x0800a8e1
 800a878:	0800a919 	.word	0x0800a919
 800a87c:	0800a919 	.word	0x0800a919
 800a880:	0800a919 	.word	0x0800a919
 800a884:	0800a901 	.word	0x0800a901
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a888:	f7fc fcfa 	bl	8007280 <HAL_RCC_GetPCLK1Freq>
 800a88c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	005a      	lsls	r2, r3, #1
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	085b      	lsrs	r3, r3, #1
 800a898:	441a      	add	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	61bb      	str	r3, [r7, #24]
        break;
 800a8a6:	e03a      	b.n	800a91e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8a8:	f7fc fcfe 	bl	80072a8 <HAL_RCC_GetPCLK2Freq>
 800a8ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	005a      	lsls	r2, r3, #1
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	085b      	lsrs	r3, r3, #1
 800a8b8:	441a      	add	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	61bb      	str	r3, [r7, #24]
        break;
 800a8c6:	e02a      	b.n	800a91e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	085a      	lsrs	r2, r3, #1
 800a8ce:	4b5f      	ldr	r3, [pc, #380]	; (800aa4c <UART_SetConfig+0x54c>)
 800a8d0:	4413      	add	r3, r2
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	6852      	ldr	r2, [r2, #4]
 800a8d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	61bb      	str	r3, [r7, #24]
        break;
 800a8de:	e01e      	b.n	800a91e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8e0:	f7fc fbea 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 800a8e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	005a      	lsls	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	085b      	lsrs	r3, r3, #1
 800a8f0:	441a      	add	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	61bb      	str	r3, [r7, #24]
        break;
 800a8fe:	e00e      	b.n	800a91e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	085b      	lsrs	r3, r3, #1
 800a906:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a912:	b29b      	uxth	r3, r3
 800a914:	61bb      	str	r3, [r7, #24]
        break;
 800a916:	e002      	b.n	800a91e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	75fb      	strb	r3, [r7, #23]
        break;
 800a91c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2b0f      	cmp	r3, #15
 800a922:	d916      	bls.n	800a952 <UART_SetConfig+0x452>
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a92a:	d212      	bcs.n	800a952 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	f023 030f 	bic.w	r3, r3, #15
 800a934:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	085b      	lsrs	r3, r3, #1
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	f003 0307 	and.w	r3, r3, #7
 800a940:	b29a      	uxth	r2, r3
 800a942:	897b      	ldrh	r3, [r7, #10]
 800a944:	4313      	orrs	r3, r2
 800a946:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	897a      	ldrh	r2, [r7, #10]
 800a94e:	60da      	str	r2, [r3, #12]
 800a950:	e070      	b.n	800aa34 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	75fb      	strb	r3, [r7, #23]
 800a956:	e06d      	b.n	800aa34 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a958:	7ffb      	ldrb	r3, [r7, #31]
 800a95a:	2b08      	cmp	r3, #8
 800a95c:	d859      	bhi.n	800aa12 <UART_SetConfig+0x512>
 800a95e:	a201      	add	r2, pc, #4	; (adr r2, 800a964 <UART_SetConfig+0x464>)
 800a960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a964:	0800a989 	.word	0x0800a989
 800a968:	0800a9a7 	.word	0x0800a9a7
 800a96c:	0800a9c5 	.word	0x0800a9c5
 800a970:	0800aa13 	.word	0x0800aa13
 800a974:	0800a9dd 	.word	0x0800a9dd
 800a978:	0800aa13 	.word	0x0800aa13
 800a97c:	0800aa13 	.word	0x0800aa13
 800a980:	0800aa13 	.word	0x0800aa13
 800a984:	0800a9fb 	.word	0x0800a9fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a988:	f7fc fc7a 	bl	8007280 <HAL_RCC_GetPCLK1Freq>
 800a98c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	085a      	lsrs	r2, r3, #1
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	441a      	add	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	61bb      	str	r3, [r7, #24]
        break;
 800a9a4:	e038      	b.n	800aa18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9a6:	f7fc fc7f 	bl	80072a8 <HAL_RCC_GetPCLK2Freq>
 800a9aa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	085a      	lsrs	r2, r3, #1
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	441a      	add	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	61bb      	str	r3, [r7, #24]
        break;
 800a9c2:	e029      	b.n	800aa18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	085a      	lsrs	r2, r3, #1
 800a9ca:	4b21      	ldr	r3, [pc, #132]	; (800aa50 <UART_SetConfig+0x550>)
 800a9cc:	4413      	add	r3, r2
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6852      	ldr	r2, [r2, #4]
 800a9d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	61bb      	str	r3, [r7, #24]
        break;
 800a9da:	e01d      	b.n	800aa18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9dc:	f7fc fb6c 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 800a9e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	085a      	lsrs	r2, r3, #1
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	441a      	add	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	61bb      	str	r3, [r7, #24]
        break;
 800a9f8:	e00e      	b.n	800aa18 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	61bb      	str	r3, [r7, #24]
        break;
 800aa10:	e002      	b.n	800aa18 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	75fb      	strb	r3, [r7, #23]
        break;
 800aa16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	2b0f      	cmp	r3, #15
 800aa1c:	d908      	bls.n	800aa30 <UART_SetConfig+0x530>
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa24:	d204      	bcs.n	800aa30 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	60da      	str	r2, [r3, #12]
 800aa2e:	e001      	b.n	800aa34 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3720      	adds	r7, #32
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	01e84800 	.word	0x01e84800
 800aa50:	00f42400 	.word	0x00f42400

0800aa54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00a      	beq.n	800aa7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa82:	f003 0302 	and.w	r3, r3, #2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	f003 0304 	and.w	r3, r3, #4
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00a      	beq.n	800aac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	430a      	orrs	r2, r1
 800aac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	f003 0308 	and.w	r3, r3, #8
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00a      	beq.n	800aae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	f003 0310 	and.w	r3, r3, #16
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00a      	beq.n	800ab06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	430a      	orrs	r2, r1
 800ab04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0a:	f003 0320 	and.w	r3, r3, #32
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	430a      	orrs	r2, r1
 800ab26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d01a      	beq.n	800ab6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab52:	d10a      	bne.n	800ab6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	605a      	str	r2, [r3, #4]
  }
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af02      	add	r7, sp, #8
 800ab9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aba6:	f7f9 fec1 	bl	800492c <HAL_GetTick>
 800abaa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0308 	and.w	r3, r3, #8
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	d10e      	bne.n	800abd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f814 	bl	800abf6 <UART_WaitOnFlagUntilTimeout>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abd4:	2303      	movs	r3, #3
 800abd6:	e00a      	b.n	800abee <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2220      	movs	r2, #32
 800abdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2220      	movs	r2, #32
 800abe2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	4613      	mov	r3, r2
 800ac04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac06:	e05d      	b.n	800acc4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d059      	beq.n	800acc4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac10:	f7f9 fe8c 	bl	800492c <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d302      	bcc.n	800ac26 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d11b      	bne.n	800ac5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0201 	bic.w	r2, r2, #1
 800ac44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e042      	b.n	800ace4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 0304 	and.w	r3, r3, #4
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d02b      	beq.n	800acc4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac7a:	d123      	bne.n	800acc4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac84:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0201 	bic.w	r2, r2, #1
 800aca4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2220      	movs	r2, #32
 800acaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2220      	movs	r2, #32
 800acb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2220      	movs	r2, #32
 800acb6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e00f      	b.n	800ace4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	69da      	ldr	r2, [r3, #28]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4013      	ands	r3, r2
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	bf0c      	ite	eq
 800acd4:	2301      	moveq	r3, #1
 800acd6:	2300      	movne	r3, #0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d092      	beq.n	800ac08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acfa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad00:	2b22      	cmp	r3, #34	; 0x22
 800ad02:	d13a      	bne.n	800ad7a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad0c:	89bb      	ldrh	r3, [r7, #12]
 800ad0e:	b2d9      	uxtb	r1, r3
 800ad10:	89fb      	ldrh	r3, [r7, #14]
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad18:	400a      	ands	r2, r1
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	3b01      	subs	r3, #1
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d121      	bne.n	800ad8a <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad54:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f022 0201 	bic.w	r2, r2, #1
 800ad64:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f8 fe42 	bl	80039fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad78:	e007      	b.n	800ad8a <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	699a      	ldr	r2, [r3, #24]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f042 0208 	orr.w	r2, r2, #8
 800ad88:	619a      	str	r2, [r3, #24]
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ada0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ada6:	2b22      	cmp	r3, #34	; 0x22
 800ada8:	d13a      	bne.n	800ae20 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800adb8:	89ba      	ldrh	r2, [r7, #12]
 800adba:	89fb      	ldrh	r3, [r7, #14]
 800adbc:	4013      	ands	r3, r2
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc8:	1c9a      	adds	r2, r3, #2
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800add4:	b29b      	uxth	r3, r3
 800add6:	3b01      	subs	r3, #1
 800add8:	b29a      	uxth	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d121      	bne.n	800ae30 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800adfa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689a      	ldr	r2, [r3, #8]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0201 	bic.w	r2, r2, #1
 800ae0a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7f8 fdef 	bl	80039fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae1e:	e007      	b.n	800ae30 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0208 	orr.w	r2, r2, #8
 800ae2e:	619a      	str	r2, [r3, #24]
}
 800ae30:	bf00      	nop
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ae38:	b084      	sub	sp, #16
 800ae3a:	b480      	push	{r7}
 800ae3c:	b085      	sub	sp, #20
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	f107 001c 	add.w	r0, r7, #28
 800ae46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ae4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ae50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ae52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ae56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ae5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ae5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ae5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ae62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <SDMMC_Init+0x54>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	431a      	orrs	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	b004      	add	sp, #16
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	ffff8100 	.word	0xffff8100

0800ae90 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2203      	movs	r2, #3
 800aed8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800aeda:	2002      	movs	r0, #2
 800aedc:	f7f9 fd32 	bl	8004944 <HAL_Delay>
  
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0303 	and.w	r3, r3, #3
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
	...

0800af08 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800af2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800af32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	4b06      	ldr	r3, [pc, #24]	; (800af58 <SDMMC_SendCommand+0x50>)
 800af40:	4013      	ands	r3, r2
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	431a      	orrs	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	fffff000 	.word	0xfffff000

0800af5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	b2db      	uxtb	r3, r3
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3314      	adds	r3, #20
 800af84:	461a      	mov	r2, r3
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	4413      	add	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
}  
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afc2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800afc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800afce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afda:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	431a      	orrs	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800afe6:	2300      	movs	r3, #0

}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b002:	2310      	movs	r3, #16
 800b004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b006:	2340      	movs	r3, #64	; 0x40
 800b008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b00a:	2300      	movs	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b012:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b014:	f107 0308 	add.w	r3, r7, #8
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff ff74 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b020:	f241 3288 	movw	r2, #5000	; 0x1388
 800b024:	2110      	movs	r1, #16
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fa42 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b02e:	69fb      	ldr	r3, [r7, #28]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3720      	adds	r7, #32
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b046:	2311      	movs	r3, #17
 800b048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b04a:	2340      	movs	r3, #64	; 0x40
 800b04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b058:	f107 0308 	add.w	r3, r7, #8
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff ff52 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b064:	f241 3288 	movw	r2, #5000	; 0x1388
 800b068:	2111      	movs	r1, #17
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa20 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b072:	69fb      	ldr	r3, [r7, #28]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b088      	sub	sp, #32
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b08a:	2312      	movs	r3, #18
 800b08c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b08e:	2340      	movs	r3, #64	; 0x40
 800b090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b092:	2300      	movs	r3, #0
 800b094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b09a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b09c:	f107 0308 	add.w	r3, r7, #8
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff ff30 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ac:	2112      	movs	r1, #18
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f9fe 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3720      	adds	r7, #32
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b0ce:	2318      	movs	r3, #24
 800b0d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0d2:	2340      	movs	r3, #64	; 0x40
 800b0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0e0:	f107 0308 	add.w	r3, r7, #8
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff ff0e 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f0:	2118      	movs	r1, #24
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f9dc 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0fa:	69fb      	ldr	r3, [r7, #28]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3720      	adds	r7, #32
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b112:	2319      	movs	r3, #25
 800b114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b116:	2340      	movs	r3, #64	; 0x40
 800b118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b124:	f107 0308 	add.w	r3, r7, #8
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff feec 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b130:	f241 3288 	movw	r2, #5000	; 0x1388
 800b134:	2119      	movs	r1, #25
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f9ba 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b13c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b13e:	69fb      	ldr	r3, [r7, #28]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3720      	adds	r7, #32
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b088      	sub	sp, #32
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b154:	230c      	movs	r3, #12
 800b156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b158:	2340      	movs	r3, #64	; 0x40
 800b15a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b15c:	2300      	movs	r3, #0
 800b15e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b164:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b166:	f107 0308 	add.w	r3, r7, #8
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7ff fecb 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b172:	4a05      	ldr	r2, [pc, #20]	; (800b188 <SDMMC_CmdStopTransfer+0x40>)
 800b174:	210c      	movs	r1, #12
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f99a 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b17e:	69fb      	ldr	r3, [r7, #28]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	05f5e100 	.word	0x05f5e100

0800b18c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08a      	sub	sp, #40	; 0x28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b19c:	2307      	movs	r3, #7
 800b19e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1a0:	2340      	movs	r3, #64	; 0x40
 800b1a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ac:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1ae:	f107 0310 	add.w	r3, r7, #16
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f7ff fea7 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b1ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1be:	2107      	movs	r1, #7
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f975 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b1c6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3728      	adds	r7, #40	; 0x28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b088      	sub	sp, #32
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1f0:	f107 0308 	add.w	r3, r7, #8
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff fe86 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f92f 	bl	800b460 <SDMMC_GetCmdError>
 800b202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b204:	69fb      	ldr	r3, [r7, #28]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3720      	adds	r7, #32
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b088      	sub	sp, #32
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b216:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b21a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b21c:	2308      	movs	r3, #8
 800b21e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b220:	2340      	movs	r3, #64	; 0x40
 800b222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b224:	2300      	movs	r3, #0
 800b226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b22c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b22e:	f107 0308 	add.w	r3, r7, #8
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff fe67 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fb18 	bl	800b870 <SDMMC_GetCmdResp7>
 800b240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b242:	69fb      	ldr	r3, [r7, #28]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3720      	adds	r7, #32
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b25a:	2337      	movs	r3, #55	; 0x37
 800b25c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b25e:	2340      	movs	r3, #64	; 0x40
 800b260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b262:	2300      	movs	r3, #0
 800b264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b26a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b26c:	f107 0308 	add.w	r3, r7, #8
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff fe48 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b278:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27c:	2137      	movs	r1, #55	; 0x37
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f916 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b286:	69fb      	ldr	r3, [r7, #28]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3720      	adds	r7, #32
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <SDMMC_CmdAppOperCommand+0x44>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b2a2:	2329      	movs	r3, #41	; 0x29
 800b2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2a6:	2340      	movs	r3, #64	; 0x40
 800b2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2b4:	f107 0308 	add.w	r3, r7, #8
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff fe24 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fa27 	bl	800b714 <SDMMC_GetCmdResp3>
 800b2c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2c8:	69fb      	ldr	r3, [r7, #28]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3720      	adds	r7, #32
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	80100000 	.word	0x80100000

0800b2d8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b088      	sub	sp, #32
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b2e6:	2306      	movs	r3, #6
 800b2e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2f8:	f107 0308 	add.w	r3, r7, #8
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff fe02 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b304:	f241 3288 	movw	r2, #5000	; 0x1388
 800b308:	2106      	movs	r1, #6
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f8d0 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b312:	69fb      	ldr	r3, [r7, #28]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b324:	2300      	movs	r3, #0
 800b326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b328:	2333      	movs	r3, #51	; 0x33
 800b32a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b32c:	2340      	movs	r3, #64	; 0x40
 800b32e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b338:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff fde1 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b346:	f241 3288 	movw	r2, #5000	; 0x1388
 800b34a:	2133      	movs	r1, #51	; 0x33
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f8af 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b354:	69fb      	ldr	r3, [r7, #28]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b088      	sub	sp, #32
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b366:	2300      	movs	r3, #0
 800b368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b36a:	2302      	movs	r3, #2
 800b36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b36e:	23c0      	movs	r3, #192	; 0xc0
 800b370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b37a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b37c:	f107 0308 	add.w	r3, r7, #8
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff fdc0 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f97d 	bl	800b688 <SDMMC_GetCmdResp2>
 800b38e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b390:	69fb      	ldr	r3, [r7, #28]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3720      	adds	r7, #32
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b088      	sub	sp, #32
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b3a8:	2309      	movs	r3, #9
 800b3aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3ac:	23c0      	movs	r3, #192	; 0xc0
 800b3ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ba:	f107 0308 	add.w	r3, r7, #8
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff fda1 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f95e 	bl	800b688 <SDMMC_GetCmdResp2>
 800b3cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ce:	69fb      	ldr	r3, [r7, #28]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3720      	adds	r7, #32
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3ea:	2340      	movs	r3, #64	; 0x40
 800b3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f8:	f107 0308 	add.w	r3, r7, #8
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff fd82 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	2103      	movs	r1, #3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f9bd 	bl	800b788 <SDMMC_GetCmdResp6>
 800b40e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b410:	69fb      	ldr	r3, [r7, #28]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b088      	sub	sp, #32
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b428:	230d      	movs	r3, #13
 800b42a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b42c:	2340      	movs	r3, #64	; 0x40
 800b42e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b430:	2300      	movs	r3, #0
 800b432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b438:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b43a:	f107 0308 	add.w	r3, r7, #8
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff fd61 	bl	800af08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b446:	f241 3288 	movw	r2, #5000	; 0x1388
 800b44a:	210d      	movs	r1, #13
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f82f 	bl	800b4b0 <SDMMC_GetCmdResp1>
 800b452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b454:	69fb      	ldr	r3, [r7, #28]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b460:	b490      	push	{r4, r7}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b468:	4b0f      	ldr	r3, [pc, #60]	; (800b4a8 <SDMMC_GetCmdError+0x48>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a0f      	ldr	r2, [pc, #60]	; (800b4ac <SDMMC_GetCmdError+0x4c>)
 800b46e:	fba2 2303 	umull	r2, r3, r2, r3
 800b472:	0a5b      	lsrs	r3, r3, #9
 800b474:	f241 3288 	movw	r2, #5000	; 0x1388
 800b478:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b47c:	4623      	mov	r3, r4
 800b47e:	1e5c      	subs	r4, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b488:	e009      	b.n	800b49e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0f2      	beq.n	800b47c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	22c5      	movs	r2, #197	; 0xc5
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bc90      	pop	{r4, r7}
 800b4a6:	4770      	bx	lr
 800b4a8:	20000000 	.word	0x20000000
 800b4ac:	10624dd3 	.word	0x10624dd3

0800b4b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b4b0:	b590      	push	{r4, r7, lr}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b4be:	4b6f      	ldr	r3, [pc, #444]	; (800b67c <SDMMC_GetCmdResp1+0x1cc>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a6f      	ldr	r2, [pc, #444]	; (800b680 <SDMMC_GetCmdResp1+0x1d0>)
 800b4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c8:	0a5b      	lsrs	r3, r3, #9
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4d0:	4623      	mov	r3, r4
 800b4d2:	1e5c      	subs	r4, r3, #1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4dc:	e0c9      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0f0      	beq.n	800b4d0 <SDMMC_GetCmdResp1+0x20>
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1eb      	bne.n	800b4d0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2204      	movs	r2, #4
 800b508:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b50a:	2304      	movs	r3, #4
 800b50c:	e0b1      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2201      	movs	r2, #1
 800b51e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b520:	2301      	movs	r3, #1
 800b522:	e0a6      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	22c5      	movs	r2, #197	; 0xc5
 800b528:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7ff fd16 	bl	800af5c <SDMMC_GetCommandResponse>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	7afb      	ldrb	r3, [r7, #11]
 800b536:	4293      	cmp	r3, r2
 800b538:	d001      	beq.n	800b53e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e099      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b53e:	2100      	movs	r1, #0
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f7ff fd18 	bl	800af76 <SDMMC_GetResponse>
 800b546:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	4b4e      	ldr	r3, [pc, #312]	; (800b684 <SDMMC_GetCmdResp1+0x1d4>)
 800b54c:	4013      	ands	r3, r2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b552:	2300      	movs	r3, #0
 800b554:	e08d      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	da02      	bge.n	800b562 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b55c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b560:	e087      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	e080      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b57a:	2380      	movs	r3, #128	; 0x80
 800b57c:	e079      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b58c:	e071      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b59c:	e069      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ac:	e061      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b5b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5bc:	e059      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5cc:	e051      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b5d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5dc:	e049      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b5e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5ec:	e041      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b5f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5fc:	e039      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b60c:	e031      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b618:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b61c:	e029      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b628:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b62c:	e021      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b63c:	e019      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b64c:	e011      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b65c:	e009      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b668:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b66c:	e001      	b.n	800b672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b66e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b672:	4618      	mov	r0, r3
 800b674:	371c      	adds	r7, #28
 800b676:	46bd      	mov	sp, r7
 800b678:	bd90      	pop	{r4, r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000000 	.word	0x20000000
 800b680:	10624dd3 	.word	0x10624dd3
 800b684:	fdffe008 	.word	0xfdffe008

0800b688 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b688:	b490      	push	{r4, r7}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b690:	4b1e      	ldr	r3, [pc, #120]	; (800b70c <SDMMC_GetCmdResp2+0x84>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a1e      	ldr	r2, [pc, #120]	; (800b710 <SDMMC_GetCmdResp2+0x88>)
 800b696:	fba2 2303 	umull	r2, r3, r2, r3
 800b69a:	0a5b      	lsrs	r3, r3, #9
 800b69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b6a4:	4623      	mov	r3, r4
 800b6a6:	1e5c      	subs	r4, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6b0:	e026      	b.n	800b700 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0f0      	beq.n	800b6a4 <SDMMC_GetCmdResp2+0x1c>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1eb      	bne.n	800b6a4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d0:	f003 0304 	and.w	r3, r3, #4
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d004      	beq.n	800b6e2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2204      	movs	r2, #4
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6de:	2304      	movs	r3, #4
 800b6e0:	e00e      	b.n	800b700 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e003      	b.n	800b700 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	22c5      	movs	r2, #197	; 0xc5
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bc90      	pop	{r4, r7}
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	20000000 	.word	0x20000000
 800b710:	10624dd3 	.word	0x10624dd3

0800b714 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b714:	b490      	push	{r4, r7}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b71c:	4b18      	ldr	r3, [pc, #96]	; (800b780 <SDMMC_GetCmdResp3+0x6c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a18      	ldr	r2, [pc, #96]	; (800b784 <SDMMC_GetCmdResp3+0x70>)
 800b722:	fba2 2303 	umull	r2, r3, r2, r3
 800b726:	0a5b      	lsrs	r3, r3, #9
 800b728:	f241 3288 	movw	r2, #5000	; 0x1388
 800b72c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b730:	4623      	mov	r3, r4
 800b732:	1e5c      	subs	r4, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	d102      	bne.n	800b73e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b73c:	e01b      	b.n	800b776 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b742:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0f0      	beq.n	800b730 <SDMMC_GetCmdResp3+0x1c>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1eb      	bne.n	800b730 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75c:	f003 0304 	and.w	r3, r3, #4
 800b760:	2b00      	cmp	r3, #0
 800b762:	d004      	beq.n	800b76e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2204      	movs	r2, #4
 800b768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b76a:	2304      	movs	r3, #4
 800b76c:	e003      	b.n	800b776 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	22c5      	movs	r2, #197	; 0xc5
 800b772:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc90      	pop	{r4, r7}
 800b77e:	4770      	bx	lr
 800b780:	20000000 	.word	0x20000000
 800b784:	10624dd3 	.word	0x10624dd3

0800b788 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	460b      	mov	r3, r1
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b796:	4b34      	ldr	r3, [pc, #208]	; (800b868 <SDMMC_GetCmdResp6+0xe0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a34      	ldr	r2, [pc, #208]	; (800b86c <SDMMC_GetCmdResp6+0xe4>)
 800b79c:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a0:	0a5b      	lsrs	r3, r3, #9
 800b7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	1e5c      	subs	r4, r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d102      	bne.n	800b7b8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7b6:	e052      	b.n	800b85e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7bc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d0f0      	beq.n	800b7aa <SDMMC_GetCmdResp6+0x22>
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1eb      	bne.n	800b7aa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d6:	f003 0304 	and.w	r3, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2204      	movs	r2, #4
 800b7e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7e4:	2304      	movs	r3, #4
 800b7e6:	e03a      	b.n	800b85e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ec:	f003 0301 	and.w	r3, r3, #1
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d004      	beq.n	800b7fe <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e02f      	b.n	800b85e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff fbac 	bl	800af5c <SDMMC_GetCommandResponse>
 800b804:	4603      	mov	r3, r0
 800b806:	461a      	mov	r2, r3
 800b808:	7afb      	ldrb	r3, [r7, #11]
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d001      	beq.n	800b812 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b80e:	2301      	movs	r3, #1
 800b810:	e025      	b.n	800b85e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	22c5      	movs	r2, #197	; 0xc5
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b818:	2100      	movs	r1, #0
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f7ff fbab 	bl	800af76 <SDMMC_GetResponse>
 800b820:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	0c1b      	lsrs	r3, r3, #16
 800b830:	b29a      	uxth	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b836:	2300      	movs	r3, #0
 800b838:	e011      	b.n	800b85e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b848:	e009      	b.n	800b85e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b858:	e001      	b.n	800b85e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b85a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b85e:	4618      	mov	r0, r3
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	bd90      	pop	{r4, r7, pc}
 800b866:	bf00      	nop
 800b868:	20000000 	.word	0x20000000
 800b86c:	10624dd3 	.word	0x10624dd3

0800b870 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b870:	b490      	push	{r4, r7}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b878:	4b21      	ldr	r3, [pc, #132]	; (800b900 <SDMMC_GetCmdResp7+0x90>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a21      	ldr	r2, [pc, #132]	; (800b904 <SDMMC_GetCmdResp7+0x94>)
 800b87e:	fba2 2303 	umull	r2, r3, r2, r3
 800b882:	0a5b      	lsrs	r3, r3, #9
 800b884:	f241 3288 	movw	r2, #5000	; 0x1388
 800b888:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b88c:	4623      	mov	r3, r4
 800b88e:	1e5c      	subs	r4, r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b898:	e02c      	b.n	800b8f4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0f0      	beq.n	800b88c <SDMMC_GetCmdResp7+0x1c>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1eb      	bne.n	800b88c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2204      	movs	r2, #4
 800b8c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8c6:	2304      	movs	r3, #4
 800b8c8:	e014      	b.n	800b8f4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d004      	beq.n	800b8e0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e009      	b.n	800b8f4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2240      	movs	r2, #64	; 0x40
 800b8f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b8f2:	2300      	movs	r3, #0
  
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bc90      	pop	{r4, r7}
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20000000 	.word	0x20000000
 800b904:	10624dd3 	.word	0x10624dd3

0800b908 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b908:	b084      	sub	sp, #16
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	f107 001c 	add.w	r0, r7, #28
 800b916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d120      	bne.n	800b962 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68da      	ldr	r2, [r3, #12]
 800b930:	4b20      	ldr	r3, [pc, #128]	; (800b9b4 <USB_CoreInit+0xac>)
 800b932:	4013      	ands	r3, r2
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b946:	2b01      	cmp	r3, #1
 800b948:	d105      	bne.n	800b956 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f001 fac4 	bl	800cee4 <USB_CoreReset>
 800b95c:	4603      	mov	r3, r0
 800b95e:	73fb      	strb	r3, [r7, #15]
 800b960:	e010      	b.n	800b984 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f001 fab8 	bl	800cee4 <USB_CoreReset>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	2b01      	cmp	r3, #1
 800b988:	d10b      	bne.n	800b9a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	f043 0206 	orr.w	r2, r3, #6
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	f043 0220 	orr.w	r2, r3, #32
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9ae:	b004      	add	sp, #16
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	ffbdffbf 	.word	0xffbdffbf

0800b9b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d165      	bne.n	800ba98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4a41      	ldr	r2, [pc, #260]	; (800bad4 <USB_SetTurnaroundTime+0x11c>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d906      	bls.n	800b9e2 <USB_SetTurnaroundTime+0x2a>
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	4a40      	ldr	r2, [pc, #256]	; (800bad8 <USB_SetTurnaroundTime+0x120>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d802      	bhi.n	800b9e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b9dc:	230f      	movs	r3, #15
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	e062      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	4a3c      	ldr	r2, [pc, #240]	; (800bad8 <USB_SetTurnaroundTime+0x120>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d906      	bls.n	800b9f8 <USB_SetTurnaroundTime+0x40>
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	4a3b      	ldr	r2, [pc, #236]	; (800badc <USB_SetTurnaroundTime+0x124>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d802      	bhi.n	800b9f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b9f2:	230e      	movs	r3, #14
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e057      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	4a38      	ldr	r2, [pc, #224]	; (800badc <USB_SetTurnaroundTime+0x124>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d906      	bls.n	800ba0e <USB_SetTurnaroundTime+0x56>
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	4a37      	ldr	r2, [pc, #220]	; (800bae0 <USB_SetTurnaroundTime+0x128>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d802      	bhi.n	800ba0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ba08:	230d      	movs	r3, #13
 800ba0a:	617b      	str	r3, [r7, #20]
 800ba0c:	e04c      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4a33      	ldr	r2, [pc, #204]	; (800bae0 <USB_SetTurnaroundTime+0x128>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d906      	bls.n	800ba24 <USB_SetTurnaroundTime+0x6c>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	4a32      	ldr	r2, [pc, #200]	; (800bae4 <USB_SetTurnaroundTime+0x12c>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d802      	bhi.n	800ba24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ba1e:	230c      	movs	r3, #12
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	e041      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	4a2f      	ldr	r2, [pc, #188]	; (800bae4 <USB_SetTurnaroundTime+0x12c>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d906      	bls.n	800ba3a <USB_SetTurnaroundTime+0x82>
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	4a2e      	ldr	r2, [pc, #184]	; (800bae8 <USB_SetTurnaroundTime+0x130>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d802      	bhi.n	800ba3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ba34:	230b      	movs	r3, #11
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	e036      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	4a2a      	ldr	r2, [pc, #168]	; (800bae8 <USB_SetTurnaroundTime+0x130>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d906      	bls.n	800ba50 <USB_SetTurnaroundTime+0x98>
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	4a29      	ldr	r2, [pc, #164]	; (800baec <USB_SetTurnaroundTime+0x134>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d802      	bhi.n	800ba50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ba4a:	230a      	movs	r3, #10
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	e02b      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	4a26      	ldr	r2, [pc, #152]	; (800baec <USB_SetTurnaroundTime+0x134>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d906      	bls.n	800ba66 <USB_SetTurnaroundTime+0xae>
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4a25      	ldr	r2, [pc, #148]	; (800baf0 <USB_SetTurnaroundTime+0x138>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d802      	bhi.n	800ba66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ba60:	2309      	movs	r3, #9
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	e020      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	4a21      	ldr	r2, [pc, #132]	; (800baf0 <USB_SetTurnaroundTime+0x138>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d906      	bls.n	800ba7c <USB_SetTurnaroundTime+0xc4>
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	4a20      	ldr	r2, [pc, #128]	; (800baf4 <USB_SetTurnaroundTime+0x13c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d802      	bhi.n	800ba7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ba76:	2308      	movs	r3, #8
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	e015      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	4a1d      	ldr	r2, [pc, #116]	; (800baf4 <USB_SetTurnaroundTime+0x13c>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d906      	bls.n	800ba92 <USB_SetTurnaroundTime+0xda>
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	4a1c      	ldr	r2, [pc, #112]	; (800baf8 <USB_SetTurnaroundTime+0x140>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d802      	bhi.n	800ba92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ba8c:	2307      	movs	r3, #7
 800ba8e:	617b      	str	r3, [r7, #20]
 800ba90:	e00a      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ba92:	2306      	movs	r3, #6
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	e007      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ba98:	79fb      	ldrb	r3, [r7, #7]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d102      	bne.n	800baa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ba9e:	2309      	movs	r3, #9
 800baa0:	617b      	str	r3, [r7, #20]
 800baa2:	e001      	b.n	800baa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800baa4:	2309      	movs	r3, #9
 800baa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	68da      	ldr	r2, [r3, #12]
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	029b      	lsls	r3, r3, #10
 800babc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bac0:	431a      	orrs	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	371c      	adds	r7, #28
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	00d8acbf 	.word	0x00d8acbf
 800bad8:	00e4e1bf 	.word	0x00e4e1bf
 800badc:	00f423ff 	.word	0x00f423ff
 800bae0:	0106737f 	.word	0x0106737f
 800bae4:	011a499f 	.word	0x011a499f
 800bae8:	01312cff 	.word	0x01312cff
 800baec:	014ca43f 	.word	0x014ca43f
 800baf0:	016e35ff 	.word	0x016e35ff
 800baf4:	01a6ab1f 	.word	0x01a6ab1f
 800baf8:	01e847ff 	.word	0x01e847ff

0800bafc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f043 0201 	orr.w	r2, r3, #1
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f023 0201 	bic.w	r2, r3, #1
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb58:	78fb      	ldrb	r3, [r7, #3]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d106      	bne.n	800bb6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	60da      	str	r2, [r3, #12]
 800bb6a:	e00b      	b.n	800bb84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb6c:	78fb      	ldrb	r3, [r7, #3]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60da      	str	r2, [r3, #12]
 800bb7e:	e001      	b.n	800bb84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e003      	b.n	800bb8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bb84:	2032      	movs	r0, #50	; 0x32
 800bb86:	f7f8 fedd 	bl	8004944 <HAL_Delay>

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb94:	b084      	sub	sp, #16
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b086      	sub	sp, #24
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bbae:	2300      	movs	r3, #0
 800bbb0:	613b      	str	r3, [r7, #16]
 800bbb2:	e009      	b.n	800bbc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3340      	adds	r3, #64	; 0x40
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	613b      	str	r3, [r7, #16]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	2b0e      	cmp	r3, #14
 800bbcc:	d9f2      	bls.n	800bbb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bbce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d11c      	bne.n	800bc0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbe2:	f043 0302 	orr.w	r3, r3, #2
 800bbe6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	e005      	b.n	800bc1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc20:	461a      	mov	r2, r3
 800bc22:	2300      	movs	r3, #0
 800bc24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc34:	461a      	mov	r2, r3
 800bc36:	680b      	ldr	r3, [r1, #0]
 800bc38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d10c      	bne.n	800bc5a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d104      	bne.n	800bc50 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc46:	2100      	movs	r1, #0
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f959 	bl	800bf00 <USB_SetDevSpeed>
 800bc4e:	e018      	b.n	800bc82 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc50:	2101      	movs	r1, #1
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f954 	bl	800bf00 <USB_SetDevSpeed>
 800bc58:	e013      	b.n	800bc82 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d10c      	bne.n	800bc7a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d104      	bne.n	800bc70 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc66:	2100      	movs	r1, #0
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f949 	bl	800bf00 <USB_SetDevSpeed>
 800bc6e:	e008      	b.n	800bc82 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc70:	2101      	movs	r1, #1
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f944 	bl	800bf00 <USB_SetDevSpeed>
 800bc78:	e003      	b.n	800bc82 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc7a:	2103      	movs	r1, #3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f93f 	bl	800bf00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc82:	2110      	movs	r1, #16
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f8f3 	bl	800be70 <USB_FlushTxFifo>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f911 	bl	800bebc <USB_FlushRxFifo>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcaa:	461a      	mov	r2, r3
 800bcac:	2300      	movs	r3, #0
 800bcae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	2300      	movs	r3, #0
 800bcba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	e043      	b.n	800bd56 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bce4:	d118      	bne.n	800bd18 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	015a      	lsls	r2, r3, #5
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	e013      	b.n	800bd2a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0e:	461a      	mov	r2, r3
 800bd10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	e008      	b.n	800bd2a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	461a      	mov	r2, r3
 800bd26:	2300      	movs	r3, #0
 800bd28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	015a      	lsls	r2, r3, #5
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	4413      	add	r3, r2
 800bd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd36:	461a      	mov	r2, r3
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	461a      	mov	r2, r3
 800bd4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	3301      	adds	r3, #1
 800bd54:	613b      	str	r3, [r7, #16]
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d3b7      	bcc.n	800bcce <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	613b      	str	r3, [r7, #16]
 800bd62:	e043      	b.n	800bdec <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd7a:	d118      	bne.n	800bdae <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	015a      	lsls	r2, r3, #5
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4413      	add	r3, r2
 800bd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8e:	461a      	mov	r2, r3
 800bd90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd94:	6013      	str	r3, [r2, #0]
 800bd96:	e013      	b.n	800bdc0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda4:	461a      	mov	r2, r3
 800bda6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	e008      	b.n	800bdc0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdba:	461a      	mov	r2, r3
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdcc:	461a      	mov	r2, r3
 800bdce:	2300      	movs	r3, #0
 800bdd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	015a      	lsls	r2, r3, #5
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4413      	add	r3, r2
 800bdda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdde:	461a      	mov	r2, r3
 800bde0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bde4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	3301      	adds	r3, #1
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	693a      	ldr	r2, [r7, #16]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d3b7      	bcc.n	800bd64 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800be14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d105      	bne.n	800be28 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	f043 0210 	orr.w	r2, r3, #16
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	699a      	ldr	r2, [r3, #24]
 800be2c:	4b0e      	ldr	r3, [pc, #56]	; (800be68 <USB_DevInit+0x2d4>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be36:	2b00      	cmp	r3, #0
 800be38:	d005      	beq.n	800be46 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	f043 0208 	orr.w	r2, r3, #8
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d105      	bne.n	800be58 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	699a      	ldr	r2, [r3, #24]
 800be50:	4b06      	ldr	r3, [pc, #24]	; (800be6c <USB_DevInit+0x2d8>)
 800be52:	4313      	orrs	r3, r2
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be58:	7dfb      	ldrb	r3, [r7, #23]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be64:	b004      	add	sp, #16
 800be66:	4770      	bx	lr
 800be68:	803c3800 	.word	0x803c3800
 800be6c:	40000004 	.word	0x40000004

0800be70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	019b      	lsls	r3, r3, #6
 800be82:	f043 0220 	orr.w	r2, r3, #32
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3301      	adds	r3, #1
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	4a09      	ldr	r2, [pc, #36]	; (800beb8 <USB_FlushTxFifo+0x48>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d901      	bls.n	800be9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800be98:	2303      	movs	r3, #3
 800be9a:	e006      	b.n	800beaa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	f003 0320 	and.w	r3, r3, #32
 800bea4:	2b20      	cmp	r3, #32
 800bea6:	d0f0      	beq.n	800be8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3714      	adds	r7, #20
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	00030d40 	.word	0x00030d40

0800bebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2210      	movs	r2, #16
 800becc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3301      	adds	r3, #1
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4a09      	ldr	r2, [pc, #36]	; (800befc <USB_FlushRxFifo+0x40>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d901      	bls.n	800bee0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bedc:	2303      	movs	r3, #3
 800bede:	e006      	b.n	800beee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b10      	cmp	r3, #16
 800beea:	d0f0      	beq.n	800bece <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	00030d40 	.word	0x00030d40

0800bf00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	78fb      	ldrb	r3, [r7, #3]
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf20:	4313      	orrs	r3, r2
 800bf22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b087      	sub	sp, #28
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	f003 0306 	and.w	r3, r3, #6
 800bf4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d102      	bne.n	800bf58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bf52:	2300      	movs	r3, #0
 800bf54:	75fb      	strb	r3, [r7, #23]
 800bf56:	e00a      	b.n	800bf6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d002      	beq.n	800bf64 <USB_GetDevSpeed+0x32>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b06      	cmp	r3, #6
 800bf62:	d102      	bne.n	800bf6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bf64:	2302      	movs	r3, #2
 800bf66:	75fb      	strb	r3, [r7, #23]
 800bf68:	e001      	b.n	800bf6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bf6a:	230f      	movs	r3, #15
 800bf6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	371c      	adds	r7, #28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	785b      	ldrb	r3, [r3, #1]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d139      	bne.n	800c00c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf9e:	69da      	ldr	r2, [r3, #28]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	f003 030f 	and.w	r3, r3, #15
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	fa01 f303 	lsl.w	r3, r1, r3
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	68f9      	ldr	r1, [r7, #12]
 800bfb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	015a      	lsls	r2, r3, #5
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d153      	bne.n	800c078 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	015a      	lsls	r2, r3, #5
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	78db      	ldrb	r3, [r3, #3]
 800bfea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	059b      	lsls	r3, r3, #22
 800bff2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bff4:	431a      	orrs	r2, r3
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	0159      	lsls	r1, r3, #5
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	440b      	add	r3, r1
 800bffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c002:	4619      	mov	r1, r3
 800c004:	4b20      	ldr	r3, [pc, #128]	; (800c088 <USB_ActivateEndpoint+0x10c>)
 800c006:	4313      	orrs	r3, r2
 800c008:	600b      	str	r3, [r1, #0]
 800c00a:	e035      	b.n	800c078 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c012:	69da      	ldr	r2, [r3, #28]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	f003 030f 	and.w	r3, r3, #15
 800c01c:	2101      	movs	r1, #1
 800c01e:	fa01 f303 	lsl.w	r3, r1, r3
 800c022:	041b      	lsls	r3, r3, #16
 800c024:	68f9      	ldr	r1, [r7, #12]
 800c026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c02a:	4313      	orrs	r3, r2
 800c02c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	4413      	add	r3, r2
 800c036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c040:	2b00      	cmp	r3, #0
 800c042:	d119      	bne.n	800c078 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	78db      	ldrb	r3, [r3, #3]
 800c05e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c060:	430b      	orrs	r3, r1
 800c062:	431a      	orrs	r2, r3
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	0159      	lsls	r1, r3, #5
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	440b      	add	r3, r1
 800c06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c070:	4619      	mov	r1, r3
 800c072:	4b05      	ldr	r3, [pc, #20]	; (800c088 <USB_ActivateEndpoint+0x10c>)
 800c074:	4313      	orrs	r3, r2
 800c076:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	10008000 	.word	0x10008000

0800c08c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	785b      	ldrb	r3, [r3, #1]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d161      	bne.n	800c16c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0be:	d11f      	bne.n	800c100 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	0151      	lsls	r1, r2, #5
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	440a      	add	r2, r1
 800c0d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	0151      	lsls	r1, r2, #5
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	440a      	add	r2, r1
 800c0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	f003 030f 	and.w	r3, r3, #15
 800c110:	2101      	movs	r1, #1
 800c112:	fa01 f303 	lsl.w	r3, r1, r3
 800c116:	b29b      	uxth	r3, r3
 800c118:	43db      	mvns	r3, r3
 800c11a:	68f9      	ldr	r1, [r7, #12]
 800c11c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c120:	4013      	ands	r3, r2
 800c122:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12a:	69da      	ldr	r2, [r3, #28]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	f003 030f 	and.w	r3, r3, #15
 800c134:	2101      	movs	r1, #1
 800c136:	fa01 f303 	lsl.w	r3, r1, r3
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	43db      	mvns	r3, r3
 800c13e:	68f9      	ldr	r1, [r7, #12]
 800c140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c144:	4013      	ands	r3, r2
 800c146:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	0159      	lsls	r1, r3, #5
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	440b      	add	r3, r1
 800c15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c162:	4619      	mov	r1, r3
 800c164:	4b35      	ldr	r3, [pc, #212]	; (800c23c <USB_DeactivateEndpoint+0x1b0>)
 800c166:	4013      	ands	r3, r2
 800c168:	600b      	str	r3, [r1, #0]
 800c16a:	e060      	b.n	800c22e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c17e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c182:	d11f      	bne.n	800c1c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	0151      	lsls	r1, r2, #5
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	440a      	add	r2, r1
 800c19a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c19e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	0151      	lsls	r1, r2, #5
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	440a      	add	r2, r1
 800c1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	f003 030f 	and.w	r3, r3, #15
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1da:	041b      	lsls	r3, r3, #16
 800c1dc:	43db      	mvns	r3, r3
 800c1de:	68f9      	ldr	r1, [r7, #12]
 800c1e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ee:	69da      	ldr	r2, [r3, #28]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	f003 030f 	and.w	r3, r3, #15
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c1fe:	041b      	lsls	r3, r3, #16
 800c200:	43db      	mvns	r3, r3
 800c202:	68f9      	ldr	r1, [r7, #12]
 800c204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c208:	4013      	ands	r3, r2
 800c20a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	4413      	add	r3, r2
 800c214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	0159      	lsls	r1, r3, #5
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	440b      	add	r3, r1
 800c222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c226:	4619      	mov	r1, r3
 800c228:	4b05      	ldr	r3, [pc, #20]	; (800c240 <USB_DeactivateEndpoint+0x1b4>)
 800c22a:	4013      	ands	r3, r2
 800c22c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	ec337800 	.word	0xec337800
 800c240:	eff37800 	.word	0xeff37800

0800c244 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08a      	sub	sp, #40	; 0x28
 800c248:	af02      	add	r7, sp, #8
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	4613      	mov	r3, r2
 800c250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	785b      	ldrb	r3, [r3, #1]
 800c260:	2b01      	cmp	r3, #1
 800c262:	f040 8163 	bne.w	800c52c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d132      	bne.n	800c2d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27a:	691a      	ldr	r2, [r3, #16]
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	0159      	lsls	r1, r3, #5
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	440b      	add	r3, r1
 800c284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c288:	4619      	mov	r1, r3
 800c28a:	4ba5      	ldr	r3, [pc, #660]	; (800c520 <USB_EPStartXfer+0x2dc>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	4413      	add	r3, r2
 800c298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	0151      	lsls	r1, r2, #5
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	440a      	add	r2, r1
 800c2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2bc:	691a      	ldr	r2, [r3, #16]
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	0159      	lsls	r1, r3, #5
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	440b      	add	r3, r1
 800c2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	4b95      	ldr	r3, [pc, #596]	; (800c524 <USB_EPStartXfer+0x2e0>)
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	610b      	str	r3, [r1, #16]
 800c2d2:	e074      	b.n	800c3be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e0:	691a      	ldr	r2, [r3, #16]
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	0159      	lsls	r1, r3, #5
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	440b      	add	r3, r1
 800c2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4b8c      	ldr	r3, [pc, #560]	; (800c524 <USB_EPStartXfer+0x2e0>)
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	015a      	lsls	r2, r3, #5
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	0159      	lsls	r1, r3, #5
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	440b      	add	r3, r1
 800c30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c310:	4619      	mov	r1, r3
 800c312:	4b83      	ldr	r3, [pc, #524]	; (800c520 <USB_EPStartXfer+0x2dc>)
 800c314:	4013      	ands	r3, r2
 800c316:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c324:	691a      	ldr	r2, [r3, #16]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	6959      	ldr	r1, [r3, #20]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	440b      	add	r3, r1
 800c330:	1e59      	subs	r1, r3, #1
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	fbb1 f3f3 	udiv	r3, r1, r3
 800c33a:	04d9      	lsls	r1, r3, #19
 800c33c:	4b7a      	ldr	r3, [pc, #488]	; (800c528 <USB_EPStartXfer+0x2e4>)
 800c33e:	400b      	ands	r3, r1
 800c340:	69b9      	ldr	r1, [r7, #24]
 800c342:	0148      	lsls	r0, r1, #5
 800c344:	69f9      	ldr	r1, [r7, #28]
 800c346:	4401      	add	r1, r0
 800c348:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c34c:	4313      	orrs	r3, r2
 800c34e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	015a      	lsls	r2, r3, #5
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	4413      	add	r3, r2
 800c358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35c:	691a      	ldr	r2, [r3, #16]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c366:	69b9      	ldr	r1, [r7, #24]
 800c368:	0148      	lsls	r0, r1, #5
 800c36a:	69f9      	ldr	r1, [r7, #28]
 800c36c:	4401      	add	r1, r0
 800c36e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c372:	4313      	orrs	r3, r2
 800c374:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	78db      	ldrb	r3, [r3, #3]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d11f      	bne.n	800c3be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	0151      	lsls	r1, r2, #5
 800c390:	69fa      	ldr	r2, [r7, #28]
 800c392:	440a      	add	r2, r1
 800c394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c398:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c39c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	015a      	lsls	r2, r3, #5
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	69ba      	ldr	r2, [r7, #24]
 800c3ae:	0151      	lsls	r1, r2, #5
 800c3b0:	69fa      	ldr	r2, [r7, #28]
 800c3b2:	440a      	add	r2, r1
 800c3b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d14b      	bne.n	800c45c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d009      	beq.n	800c3e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d8:	461a      	mov	r2, r3
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	78db      	ldrb	r3, [r3, #3]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d128      	bne.n	800c43a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d110      	bne.n	800c41a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	0151      	lsls	r1, r2, #5
 800c40a:	69fa      	ldr	r2, [r7, #28]
 800c40c:	440a      	add	r2, r1
 800c40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	e00f      	b.n	800c43a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	0151      	lsls	r1, r2, #5
 800c42c:	69fa      	ldr	r2, [r7, #28]
 800c42e:	440a      	add	r2, r1
 800c430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c438:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	69ba      	ldr	r2, [r7, #24]
 800c44a:	0151      	lsls	r1, r2, #5
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	440a      	add	r2, r1
 800c450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c454:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	e133      	b.n	800c6c4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	69ba      	ldr	r2, [r7, #24]
 800c46c:	0151      	lsls	r1, r2, #5
 800c46e:	69fa      	ldr	r2, [r7, #28]
 800c470:	440a      	add	r2, r1
 800c472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c476:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c47a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	78db      	ldrb	r3, [r3, #3]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d015      	beq.n	800c4b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 811b 	beq.w	800c6c4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	f003 030f 	and.w	r3, r3, #15
 800c49e:	2101      	movs	r1, #1
 800c4a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c4a4:	69f9      	ldr	r1, [r7, #28]
 800c4a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	634b      	str	r3, [r1, #52]	; 0x34
 800c4ae:	e109      	b.n	800c6c4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d110      	bne.n	800c4e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	015a      	lsls	r2, r3, #5
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	69ba      	ldr	r2, [r7, #24]
 800c4d0:	0151      	lsls	r1, r2, #5
 800c4d2:	69fa      	ldr	r2, [r7, #28]
 800c4d4:	440a      	add	r2, r1
 800c4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	e00f      	b.n	800c502 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	015a      	lsls	r2, r3, #5
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	69ba      	ldr	r2, [r7, #24]
 800c4f2:	0151      	lsls	r1, r2, #5
 800c4f4:	69fa      	ldr	r2, [r7, #28]
 800c4f6:	440a      	add	r2, r1
 800c4f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c500:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	68d9      	ldr	r1, [r3, #12]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	781a      	ldrb	r2, [r3, #0]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	b298      	uxth	r0, r3
 800c510:	79fb      	ldrb	r3, [r7, #7]
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	4603      	mov	r3, r0
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 fa38 	bl	800c98c <USB_WritePacket>
 800c51c:	e0d2      	b.n	800c6c4 <USB_EPStartXfer+0x480>
 800c51e:	bf00      	nop
 800c520:	e007ffff 	.word	0xe007ffff
 800c524:	fff80000 	.word	0xfff80000
 800c528:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c538:	691a      	ldr	r2, [r3, #16]
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	0159      	lsls	r1, r3, #5
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	440b      	add	r3, r1
 800c542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c546:	4619      	mov	r1, r3
 800c548:	4b61      	ldr	r3, [pc, #388]	; (800c6d0 <USB_EPStartXfer+0x48c>)
 800c54a:	4013      	ands	r3, r2
 800c54c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	015a      	lsls	r2, r3, #5
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	4413      	add	r3, r2
 800c556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c55a:	691a      	ldr	r2, [r3, #16]
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	0159      	lsls	r1, r3, #5
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	440b      	add	r3, r1
 800c564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c568:	4619      	mov	r1, r3
 800c56a:	4b5a      	ldr	r3, [pc, #360]	; (800c6d4 <USB_EPStartXfer+0x490>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d123      	bne.n	800c5c0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	015a      	lsls	r2, r3, #5
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	4413      	add	r3, r2
 800c580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c584:	691a      	ldr	r2, [r3, #16]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c58e:	69b9      	ldr	r1, [r7, #24]
 800c590:	0148      	lsls	r0, r1, #5
 800c592:	69f9      	ldr	r1, [r7, #28]
 800c594:	4401      	add	r1, r0
 800c596:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c59a:	4313      	orrs	r3, r2
 800c59c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	015a      	lsls	r2, r3, #5
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	0151      	lsls	r1, r2, #5
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	440a      	add	r2, r1
 800c5b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5bc:	6113      	str	r3, [r2, #16]
 800c5be:	e033      	b.n	800c628 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	695a      	ldr	r2, [r3, #20]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	1e5a      	subs	r2, r3, #1
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	015a      	lsls	r2, r3, #5
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	4413      	add	r3, r2
 800c5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e2:	691a      	ldr	r2, [r3, #16]
 800c5e4:	8afb      	ldrh	r3, [r7, #22]
 800c5e6:	04d9      	lsls	r1, r3, #19
 800c5e8:	4b3b      	ldr	r3, [pc, #236]	; (800c6d8 <USB_EPStartXfer+0x494>)
 800c5ea:	400b      	ands	r3, r1
 800c5ec:	69b9      	ldr	r1, [r7, #24]
 800c5ee:	0148      	lsls	r0, r1, #5
 800c5f0:	69f9      	ldr	r1, [r7, #28]
 800c5f2:	4401      	add	r1, r0
 800c5f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	015a      	lsls	r2, r3, #5
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	4413      	add	r3, r2
 800c604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c608:	691a      	ldr	r2, [r3, #16]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	8af9      	ldrh	r1, [r7, #22]
 800c610:	fb01 f303 	mul.w	r3, r1, r3
 800c614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c618:	69b9      	ldr	r1, [r7, #24]
 800c61a:	0148      	lsls	r0, r1, #5
 800c61c:	69f9      	ldr	r1, [r7, #28]
 800c61e:	4401      	add	r1, r0
 800c620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c624:	4313      	orrs	r3, r2
 800c626:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d10d      	bne.n	800c64a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68d9      	ldr	r1, [r3, #12]
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	015a      	lsls	r2, r3, #5
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4413      	add	r3, r2
 800c642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c646:	460a      	mov	r2, r1
 800c648:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	78db      	ldrb	r3, [r3, #3]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d128      	bne.n	800c6a4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d110      	bne.n	800c684 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	015a      	lsls	r2, r3, #5
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	4413      	add	r3, r2
 800c66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	69ba      	ldr	r2, [r7, #24]
 800c672:	0151      	lsls	r1, r2, #5
 800c674:	69fa      	ldr	r2, [r7, #28]
 800c676:	440a      	add	r2, r1
 800c678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c67c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c680:	6013      	str	r3, [r2, #0]
 800c682:	e00f      	b.n	800c6a4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	69ba      	ldr	r2, [r7, #24]
 800c694:	0151      	lsls	r1, r2, #5
 800c696:	69fa      	ldr	r2, [r7, #28]
 800c698:	440a      	add	r2, r1
 800c69a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c69e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	015a      	lsls	r2, r3, #5
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	0151      	lsls	r1, r2, #5
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	440a      	add	r2, r1
 800c6ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3720      	adds	r7, #32
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	fff80000 	.word	0xfff80000
 800c6d4:	e007ffff 	.word	0xe007ffff
 800c6d8:	1ff80000 	.word	0x1ff80000

0800c6dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	f040 80cd 	bne.w	800c898 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d132      	bne.n	800c76c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c712:	691a      	ldr	r2, [r3, #16]
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	0159      	lsls	r1, r3, #5
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	440b      	add	r3, r1
 800c71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c720:	4619      	mov	r1, r3
 800c722:	4b98      	ldr	r3, [pc, #608]	; (800c984 <USB_EP0StartXfer+0x2a8>)
 800c724:	4013      	ands	r3, r2
 800c726:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	015a      	lsls	r2, r3, #5
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	4413      	add	r3, r2
 800c730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	693a      	ldr	r2, [r7, #16]
 800c738:	0151      	lsls	r1, r2, #5
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	440a      	add	r2, r1
 800c73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	015a      	lsls	r2, r3, #5
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	4413      	add	r3, r2
 800c750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c754:	691a      	ldr	r2, [r3, #16]
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	0159      	lsls	r1, r3, #5
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	440b      	add	r3, r1
 800c75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c762:	4619      	mov	r1, r3
 800c764:	4b88      	ldr	r3, [pc, #544]	; (800c988 <USB_EP0StartXfer+0x2ac>)
 800c766:	4013      	ands	r3, r2
 800c768:	610b      	str	r3, [r1, #16]
 800c76a:	e04e      	b.n	800c80a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	015a      	lsls	r2, r3, #5
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	4413      	add	r3, r2
 800c774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c778:	691a      	ldr	r2, [r3, #16]
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	0159      	lsls	r1, r3, #5
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	440b      	add	r3, r1
 800c782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c786:	4619      	mov	r1, r3
 800c788:	4b7f      	ldr	r3, [pc, #508]	; (800c988 <USB_EP0StartXfer+0x2ac>)
 800c78a:	4013      	ands	r3, r2
 800c78c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79a:	691a      	ldr	r2, [r3, #16]
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	0159      	lsls	r1, r3, #5
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	440b      	add	r3, r1
 800c7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4b76      	ldr	r3, [pc, #472]	; (800c984 <USB_EP0StartXfer+0x2a8>)
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	695a      	ldr	r2, [r3, #20]
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d903      	bls.n	800c7c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	689a      	ldr	r2, [r3, #8]
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	0151      	lsls	r1, r2, #5
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	440a      	add	r2, r1
 800c7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	015a      	lsls	r2, r3, #5
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f0:	691a      	ldr	r2, [r3, #16]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7fa:	6939      	ldr	r1, [r7, #16]
 800c7fc:	0148      	lsls	r0, r1, #5
 800c7fe:	6979      	ldr	r1, [r7, #20]
 800c800:	4401      	add	r1, r0
 800c802:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c806:	4313      	orrs	r3, r2
 800c808:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d11e      	bne.n	800c84e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d009      	beq.n	800c82c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	015a      	lsls	r2, r3, #5
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	4413      	add	r3, r2
 800c820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c824:	461a      	mov	r2, r3
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	4413      	add	r3, r2
 800c834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	0151      	lsls	r1, r2, #5
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	440a      	add	r2, r1
 800c842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	e092      	b.n	800c974 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	015a      	lsls	r2, r3, #5
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	4413      	add	r3, r2
 800c856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	0151      	lsls	r1, r2, #5
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	440a      	add	r2, r1
 800c864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c86c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d07e      	beq.n	800c974 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	f003 030f 	and.w	r3, r3, #15
 800c886:	2101      	movs	r1, #1
 800c888:	fa01 f303 	lsl.w	r3, r1, r3
 800c88c:	6979      	ldr	r1, [r7, #20]
 800c88e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c892:	4313      	orrs	r3, r2
 800c894:	634b      	str	r3, [r1, #52]	; 0x34
 800c896:	e06d      	b.n	800c974 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	015a      	lsls	r2, r3, #5
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8a4:	691a      	ldr	r2, [r3, #16]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	0159      	lsls	r1, r3, #5
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	440b      	add	r3, r1
 800c8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4b34      	ldr	r3, [pc, #208]	; (800c988 <USB_EP0StartXfer+0x2ac>)
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	015a      	lsls	r2, r3, #5
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c6:	691a      	ldr	r2, [r3, #16]
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	0159      	lsls	r1, r3, #5
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	440b      	add	r3, r1
 800c8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4b2b      	ldr	r3, [pc, #172]	; (800c984 <USB_EP0StartXfer+0x2a8>)
 800c8d8:	4013      	ands	r3, r2
 800c8da:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	689a      	ldr	r2, [r3, #8]
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	015a      	lsls	r2, r3, #5
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	0151      	lsls	r1, r2, #5
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	440a      	add	r2, r1
 800c902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c90a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	4413      	add	r3, r2
 800c914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c918:	691a      	ldr	r2, [r3, #16]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c922:	6939      	ldr	r1, [r7, #16]
 800c924:	0148      	lsls	r0, r1, #5
 800c926:	6979      	ldr	r1, [r7, #20]
 800c928:	4401      	add	r1, r0
 800c92a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c92e:	4313      	orrs	r3, r2
 800c930:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d10d      	bne.n	800c954 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d009      	beq.n	800c954 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	68d9      	ldr	r1, [r3, #12]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	015a      	lsls	r2, r3, #5
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c950:	460a      	mov	r2, r1
 800c952:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	015a      	lsls	r2, r3, #5
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	4413      	add	r3, r2
 800c95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	693a      	ldr	r2, [r7, #16]
 800c964:	0151      	lsls	r1, r2, #5
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	440a      	add	r2, r1
 800c96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c96e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	371c      	adds	r7, #28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	e007ffff 	.word	0xe007ffff
 800c988:	fff80000 	.word	0xfff80000

0800c98c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b089      	sub	sp, #36	; 0x24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	4611      	mov	r1, r2
 800c998:	461a      	mov	r2, r3
 800c99a:	460b      	mov	r3, r1
 800c99c:	71fb      	strb	r3, [r7, #7]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c9aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d11a      	bne.n	800c9e8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c9b2:	88bb      	ldrh	r3, [r7, #4]
 800c9b4:	3303      	adds	r3, #3
 800c9b6:	089b      	lsrs	r3, r3, #2
 800c9b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	61bb      	str	r3, [r7, #24]
 800c9be:	e00f      	b.n	800c9e0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	031a      	lsls	r2, r3, #12
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	61bb      	str	r3, [r7, #24]
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d3eb      	bcc.n	800c9c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3724      	adds	r7, #36	; 0x24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b089      	sub	sp, #36	; 0x24
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	60f8      	str	r0, [r7, #12]
 800c9fe:	60b9      	str	r1, [r7, #8]
 800ca00:	4613      	mov	r3, r2
 800ca02:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ca0c:	88fb      	ldrh	r3, [r7, #6]
 800ca0e:	3303      	adds	r3, #3
 800ca10:	089b      	lsrs	r3, r3, #2
 800ca12:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ca14:	2300      	movs	r3, #0
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	e00b      	b.n	800ca32 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	69fb      	ldr	r3, [r7, #28]
 800ca24:	601a      	str	r2, [r3, #0]
    pDest++;
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	61bb      	str	r3, [r7, #24]
 800ca32:	69ba      	ldr	r2, [r7, #24]
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d3ef      	bcc.n	800ca1a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ca3a:	69fb      	ldr	r3, [r7, #28]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3724      	adds	r7, #36	; 0x24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	785b      	ldrb	r3, [r3, #1]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d12c      	bne.n	800cabe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	db12      	blt.n	800ca9c <USB_EPSetStall+0x54>
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00f      	beq.n	800ca9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	0151      	lsls	r1, r2, #5
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	440a      	add	r2, r1
 800ca92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	015a      	lsls	r2, r3, #5
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4413      	add	r3, r2
 800caa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	0151      	lsls	r1, r2, #5
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	440a      	add	r2, r1
 800cab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	e02b      	b.n	800cb16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	db12      	blt.n	800caf6 <USB_EPSetStall+0xae>
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00f      	beq.n	800caf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	015a      	lsls	r2, r3, #5
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	4413      	add	r3, r2
 800cade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	0151      	lsls	r1, r2, #5
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	440a      	add	r2, r1
 800caec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800caf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	015a      	lsls	r2, r3, #5
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	4413      	add	r3, r2
 800cafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	0151      	lsls	r1, r2, #5
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	440a      	add	r2, r1
 800cb0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cb14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	785b      	ldrb	r3, [r3, #1]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d128      	bne.n	800cb92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	0151      	lsls	r1, r2, #5
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	440a      	add	r2, r1
 800cb56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	78db      	ldrb	r3, [r3, #3]
 800cb64:	2b03      	cmp	r3, #3
 800cb66:	d003      	beq.n	800cb70 <USB_EPClearStall+0x4c>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	78db      	ldrb	r3, [r3, #3]
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d138      	bne.n	800cbe2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	015a      	lsls	r2, r3, #5
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	4413      	add	r3, r2
 800cb78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	0151      	lsls	r1, r2, #5
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	440a      	add	r2, r1
 800cb86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	e027      	b.n	800cbe2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	015a      	lsls	r2, r3, #5
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	4413      	add	r3, r2
 800cb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	0151      	lsls	r1, r2, #5
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	440a      	add	r2, r1
 800cba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cbb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	78db      	ldrb	r3, [r3, #3]
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	d003      	beq.n	800cbc2 <USB_EPClearStall+0x9e>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	78db      	ldrb	r3, [r3, #3]
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d10f      	bne.n	800cbe2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	0151      	lsls	r1, r2, #5
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	440a      	add	r2, r1
 800cbd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbe0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3714      	adds	r7, #20
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	78fb      	ldrb	r3, [r7, #3]
 800cc1e:	011b      	lsls	r3, r3, #4
 800cc20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cc24:	68f9      	ldr	r1, [r7, #12]
 800cc26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc56:	f023 0302 	bic.w	r3, r3, #2
 800cc5a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cc5c:	2003      	movs	r0, #3
 800cc5e:	f7f7 fe71 	bl	8004944 <HAL_Delay>

  return HAL_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc86:	f043 0302 	orr.w	r3, r3, #2
 800cc8a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cc8c:	2003      	movs	r0, #3
 800cc8e:	f7f7 fe59 	bl	8004944 <HAL_Delay>

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b085      	sub	sp, #20
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	68ba      	ldr	r2, [r7, #8]
 800cce2:	4013      	ands	r3, r2
 800cce4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	0c1b      	lsrs	r3, r3, #16
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b085      	sub	sp, #20
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	4013      	ands	r3, r2
 800cd18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	b29b      	uxth	r3, r3
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	460b      	mov	r3, r1
 800cd34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cd3a:	78fb      	ldrb	r3, [r7, #3]
 800cd3c:	015a      	lsls	r2, r3, #5
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	4413      	add	r3, r2
 800cd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	4013      	ands	r3, r2
 800cd56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd58:	68bb      	ldr	r3, [r7, #8]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b087      	sub	sp, #28
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cd8a:	78fb      	ldrb	r3, [r7, #3]
 800cd8c:	f003 030f 	and.w	r3, r3, #15
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	fa22 f303 	lsr.w	r3, r2, r3
 800cd96:	01db      	lsls	r3, r3, #7
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cda0:	78fb      	ldrb	r3, [r7, #3]
 800cda2:	015a      	lsls	r2, r3, #5
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	4413      	add	r3, r2
 800cda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cdb4:	68bb      	ldr	r3, [r7, #8]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	f003 0301 	and.w	r3, r3, #1
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
	...

0800cde0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <USB_ActivateSetup+0x44>)
 800cdfe:	4013      	ands	r3, r2
 800ce00:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	fffff800 	.word	0xfffff800

0800ce28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b087      	sub	sp, #28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	460b      	mov	r3, r1
 800ce32:	607a      	str	r2, [r7, #4]
 800ce34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	333c      	adds	r3, #60	; 0x3c
 800ce3e:	3304      	adds	r3, #4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	4a26      	ldr	r2, [pc, #152]	; (800cee0 <USB_EP0_OutStart+0xb8>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d90a      	bls.n	800ce62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce5c:	d101      	bne.n	800ce62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e037      	b.n	800ced2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce68:	461a      	mov	r2, r3
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce90:	f043 0318 	orr.w	r3, r3, #24
 800ce94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cea4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cea8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ceaa:	7afb      	ldrb	r3, [r7, #11]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d10f      	bne.n	800ced0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cece:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	371c      	adds	r7, #28
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	4f54300a 	.word	0x4f54300a

0800cee4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ceec:	2300      	movs	r3, #0
 800ceee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	3301      	adds	r3, #1
 800cef4:	60fb      	str	r3, [r7, #12]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	4a13      	ldr	r2, [pc, #76]	; (800cf48 <USB_CoreReset+0x64>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d901      	bls.n	800cf02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cefe:	2303      	movs	r3, #3
 800cf00:	e01b      	b.n	800cf3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	daf2      	bge.n	800cef0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	691b      	ldr	r3, [r3, #16]
 800cf12:	f043 0201 	orr.w	r2, r3, #1
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4a09      	ldr	r2, [pc, #36]	; (800cf48 <USB_CoreReset+0x64>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d901      	bls.n	800cf2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e006      	b.n	800cf3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	f003 0301 	and.w	r3, r3, #1
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d0f0      	beq.n	800cf1a <USB_CoreReset+0x36>

  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	00030d40 	.word	0x00030d40

0800cf4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cf50:	4904      	ldr	r1, [pc, #16]	; (800cf64 <MX_FATFS_Init+0x18>)
 800cf52:	4805      	ldr	r0, [pc, #20]	; (800cf68 <MX_FATFS_Init+0x1c>)
 800cf54:	f004 fd8e 	bl	8011a74 <FATFS_LinkDriver>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	4b03      	ldr	r3, [pc, #12]	; (800cf6c <MX_FATFS_Init+0x20>)
 800cf5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800cf60:	bf00      	nop
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	20015340 	.word	0x20015340
 800cf68:	08018828 	.word	0x08018828
 800cf6c:	2001533c 	.word	0x2001533c

0800cf70 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cf74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cf8a:	f000 f896 	bl	800d0ba <BSP_SD_IsDetected>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d001      	beq.n	800cf98 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cf94:	2302      	movs	r3, #2
 800cf96:	e012      	b.n	800cfbe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cf98:	480b      	ldr	r0, [pc, #44]	; (800cfc8 <BSP_SD_Init+0x48>)
 800cf9a:	f7fa fd81 	bl	8007aa0 <HAL_SD_Init>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cfa2:	79fb      	ldrb	r3, [r7, #7]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d109      	bne.n	800cfbc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cfa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cfac:	4806      	ldr	r0, [pc, #24]	; (800cfc8 <BSP_SD_Init+0x48>)
 800cfae:	f7fb fb39 	bl	8008624 <HAL_SD_ConfigWideBusOperation>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	200089c4 	.word	0x200089c4

0800cfcc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	68f9      	ldr	r1, [r7, #12]
 800cfe2:	4806      	ldr	r0, [pc, #24]	; (800cffc <BSP_SD_ReadBlocks_DMA+0x30>)
 800cfe4:	f7fa fdf4 	bl	8007bd0 <HAL_SD_ReadBlocks_DMA>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	200089c4 	.word	0x200089c4

0800d000 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	68f9      	ldr	r1, [r7, #12]
 800d016:	4806      	ldr	r0, [pc, #24]	; (800d030 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d018:	f7fa fec6 	bl	8007da8 <HAL_SD_WriteBlocks_DMA>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d026:	7dfb      	ldrb	r3, [r7, #23]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3718      	adds	r7, #24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	200089c4 	.word	0x200089c4

0800d034 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d038:	4805      	ldr	r0, [pc, #20]	; (800d050 <BSP_SD_GetCardState+0x1c>)
 800d03a:	f7fb fb6f 	bl	800871c <HAL_SD_GetCardState>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b04      	cmp	r3, #4
 800d042:	bf14      	ite	ne
 800d044:	2301      	movne	r3, #1
 800d046:	2300      	moveq	r3, #0
 800d048:	b2db      	uxtb	r3, r3
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	200089c4 	.word	0x200089c4

0800d054 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d05c:	6879      	ldr	r1, [r7, #4]
 800d05e:	4803      	ldr	r0, [pc, #12]	; (800d06c <BSP_SD_GetCardInfo+0x18>)
 800d060:	f7fb fab4 	bl	80085cc <HAL_SD_GetCardInfo>
}
 800d064:	bf00      	nop
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	200089c4 	.word	0x200089c4

0800d070 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d078:	f000 f818 	bl	800d0ac <BSP_SD_AbortCallback>
}
 800d07c:	bf00      	nop
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d08c:	f000 f998 	bl	800d3c0 <BSP_SD_WriteCpltCallback>
}
 800d090:	bf00      	nop
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d0a0:	f000 f9a0 	bl	800d3e4 <BSP_SD_ReadCpltCallback>
}
 800d0a4:	bf00      	nop
 800d0a6:	3708      	adds	r7, #8
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0

}
 800d0b0:	bf00      	nop
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	b2db      	uxtb	r3, r3
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800d0dc:	f004 fdb4 	bl	8011c48 <osKernelGetTickCount>
 800d0e0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800d0e2:	e006      	b.n	800d0f2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d0e4:	f7ff ffa6 	bl	800d034 <BSP_SD_GetCardState>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	e009      	b.n	800d106 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800d0f2:	f004 fda9 	bl	8011c48 <osKernelGetTickCount>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d8f0      	bhi.n	800d0e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d102:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
	...

0800d110 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d11a:	4b0b      	ldr	r3, [pc, #44]	; (800d148 <SD_CheckStatus+0x38>)
 800d11c:	2201      	movs	r2, #1
 800d11e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d120:	f7ff ff88 	bl	800d034 <BSP_SD_GetCardState>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d107      	bne.n	800d13a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d12a:	4b07      	ldr	r3, [pc, #28]	; (800d148 <SD_CheckStatus+0x38>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	f023 0301 	bic.w	r3, r3, #1
 800d134:	b2da      	uxtb	r2, r3
 800d136:	4b04      	ldr	r3, [pc, #16]	; (800d148 <SD_CheckStatus+0x38>)
 800d138:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d13a:	4b03      	ldr	r3, [pc, #12]	; (800d148 <SD_CheckStatus+0x38>)
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	b2db      	uxtb	r3, r3
}
 800d140:	4618      	mov	r0, r3
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	20000009 	.word	0x20000009

0800d14c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	4603      	mov	r3, r0
 800d154:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800d156:	4b1c      	ldr	r3, [pc, #112]	; (800d1c8 <SD_initialize+0x7c>)
 800d158:	2201      	movs	r2, #1
 800d15a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800d15c:	f004 fd1c 	bl	8011b98 <osKernelGetState>
 800d160:	4603      	mov	r3, r0
 800d162:	2b02      	cmp	r3, #2
 800d164:	d129      	bne.n	800d1ba <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d166:	f7ff ff0b 	bl	800cf80 <BSP_SD_Init>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d107      	bne.n	800d180 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d170:	79fb      	ldrb	r3, [r7, #7]
 800d172:	4618      	mov	r0, r3
 800d174:	f7ff ffcc 	bl	800d110 <SD_CheckStatus>
 800d178:	4603      	mov	r3, r0
 800d17a:	461a      	mov	r2, r3
 800d17c:	4b12      	ldr	r3, [pc, #72]	; (800d1c8 <SD_initialize+0x7c>)
 800d17e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d180:	4b11      	ldr	r3, [pc, #68]	; (800d1c8 <SD_initialize+0x7c>)
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b01      	cmp	r3, #1
 800d188:	d017      	beq.n	800d1ba <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800d18a:	4b10      	ldr	r3, [pc, #64]	; (800d1cc <SD_initialize+0x80>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d107      	bne.n	800d1a2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800d192:	2200      	movs	r2, #0
 800d194:	2102      	movs	r1, #2
 800d196:	200a      	movs	r0, #10
 800d198:	f005 f9a6 	bl	80124e8 <osMessageQueueNew>
 800d19c:	4602      	mov	r2, r0
 800d19e:	4b0b      	ldr	r3, [pc, #44]	; (800d1cc <SD_initialize+0x80>)
 800d1a0:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800d1a2:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <SD_initialize+0x80>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d107      	bne.n	800d1ba <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <SD_initialize+0x7c>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	f043 0301 	orr.w	r3, r3, #1
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	4b04      	ldr	r3, [pc, #16]	; (800d1c8 <SD_initialize+0x7c>)
 800d1b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d1ba:	4b03      	ldr	r3, [pc, #12]	; (800d1c8 <SD_initialize+0x7c>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	b2db      	uxtb	r3, r3
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	20000009 	.word	0x20000009
 800d1cc:	20000328 	.word	0x20000328

0800d1d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7ff ff97 	bl	800d110 <SD_CheckStatus>
 800d1e2:	4603      	mov	r3, r0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	607a      	str	r2, [r7, #4]
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d200:	f247 5030 	movw	r0, #30000	; 0x7530
 800d204:	f7ff ff66 	bl	800d0d4 <SD_CheckStatusWithTimeout>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	da01      	bge.n	800d212 <SD_read+0x26>
  {
    return res;
 800d20e:	7ffb      	ldrb	r3, [r7, #31]
 800d210:	e02f      	b.n	800d272 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	68b8      	ldr	r0, [r7, #8]
 800d218:	f7ff fed8 	bl	800cfcc <BSP_SD_ReadBlocks_DMA>
 800d21c:	4603      	mov	r3, r0
 800d21e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800d220:	7fbb      	ldrb	r3, [r7, #30]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d124      	bne.n	800d270 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d226:	4b15      	ldr	r3, [pc, #84]	; (800d27c <SD_read+0x90>)
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	f107 0112 	add.w	r1, r7, #18
 800d22e:	f247 5330 	movw	r3, #30000	; 0x7530
 800d232:	2200      	movs	r2, #0
 800d234:	f005 fa52 	bl	80126dc <osMessageQueueGet>
 800d238:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d117      	bne.n	800d270 <SD_read+0x84>
 800d240:	8a7b      	ldrh	r3, [r7, #18]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d114      	bne.n	800d270 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800d246:	f004 fcff 	bl	8011c48 <osKernelGetTickCount>
 800d24a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d24c:	e007      	b.n	800d25e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d24e:	f7ff fef1 	bl	800d034 <BSP_SD_GetCardState>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d102      	bne.n	800d25e <SD_read+0x72>
              {
                res = RES_OK;
 800d258:	2300      	movs	r3, #0
 800d25a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d25c:	e008      	b.n	800d270 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d25e:	f004 fcf3 	bl	8011c48 <osKernelGetTickCount>
 800d262:	4602      	mov	r2, r0
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	f247 522f 	movw	r2, #29999	; 0x752f
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d9ee      	bls.n	800d24e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d270:	7ffb      	ldrb	r3, [r7, #31]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3720      	adds	r7, #32
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20000328 	.word	0x20000328

0800d280 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b088      	sub	sp, #32
 800d284:	af00      	add	r7, sp, #0
 800d286:	60b9      	str	r1, [r7, #8]
 800d288:	607a      	str	r2, [r7, #4]
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	4603      	mov	r3, r0
 800d28e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d294:	f247 5030 	movw	r0, #30000	; 0x7530
 800d298:	f7ff ff1c 	bl	800d0d4 <SD_CheckStatusWithTimeout>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	da01      	bge.n	800d2a6 <SD_write+0x26>
  {
    return res;
 800d2a2:	7ffb      	ldrb	r3, [r7, #31]
 800d2a4:	e02d      	b.n	800d302 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	6879      	ldr	r1, [r7, #4]
 800d2aa:	68b8      	ldr	r0, [r7, #8]
 800d2ac:	f7ff fea8 	bl	800d000 <BSP_SD_WriteBlocks_DMA>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d124      	bne.n	800d300 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d2b6:	4b15      	ldr	r3, [pc, #84]	; (800d30c <SD_write+0x8c>)
 800d2b8:	6818      	ldr	r0, [r3, #0]
 800d2ba:	f107 0112 	add.w	r1, r7, #18
 800d2be:	f247 5330 	movw	r3, #30000	; 0x7530
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f005 fa0a 	bl	80126dc <osMessageQueueGet>
 800d2c8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d117      	bne.n	800d300 <SD_write+0x80>
 800d2d0:	8a7b      	ldrh	r3, [r7, #18]
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	d114      	bne.n	800d300 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800d2d6:	f004 fcb7 	bl	8011c48 <osKernelGetTickCount>
 800d2da:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800d2dc:	e007      	b.n	800d2ee <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d2de:	f7ff fea9 	bl	800d034 <BSP_SD_GetCardState>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <SD_write+0x6e>
          {
            res = RES_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	77fb      	strb	r3, [r7, #31]
            break;
 800d2ec:	e008      	b.n	800d300 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800d2ee:	f004 fcab 	bl	8011c48 <osKernelGetTickCount>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	f247 522f 	movw	r2, #29999	; 0x752f
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d9ee      	bls.n	800d2de <SD_write+0x5e>
    }

  }
#endif

  return res;
 800d300:	7ffb      	ldrb	r3, [r7, #31]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	20000328 	.word	0x20000328

0800d310 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b08c      	sub	sp, #48	; 0x30
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	603a      	str	r2, [r7, #0]
 800d31a:	71fb      	strb	r3, [r7, #7]
 800d31c:	460b      	mov	r3, r1
 800d31e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d326:	4b25      	ldr	r3, [pc, #148]	; (800d3bc <SD_ioctl+0xac>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <SD_ioctl+0x28>
 800d334:	2303      	movs	r3, #3
 800d336:	e03c      	b.n	800d3b2 <SD_ioctl+0xa2>

  switch (cmd)
 800d338:	79bb      	ldrb	r3, [r7, #6]
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d834      	bhi.n	800d3a8 <SD_ioctl+0x98>
 800d33e:	a201      	add	r2, pc, #4	; (adr r2, 800d344 <SD_ioctl+0x34>)
 800d340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d344:	0800d355 	.word	0x0800d355
 800d348:	0800d35d 	.word	0x0800d35d
 800d34c:	0800d375 	.word	0x0800d375
 800d350:	0800d38f 	.word	0x0800d38f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d35a:	e028      	b.n	800d3ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d35c:	f107 030c 	add.w	r3, r7, #12
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff fe77 	bl	800d054 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d372:	e01c      	b.n	800d3ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d374:	f107 030c 	add.w	r3, r7, #12
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff fe6b 	bl	800d054 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	b29a      	uxth	r2, r3
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d38c:	e00f      	b.n	800d3ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d38e:	f107 030c 	add.w	r3, r7, #12
 800d392:	4618      	mov	r0, r3
 800d394:	f7ff fe5e 	bl	800d054 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	0a5a      	lsrs	r2, r3, #9
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d3a6:	e002      	b.n	800d3ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d3a8:	2304      	movs	r3, #4
 800d3aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d3ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3730      	adds	r7, #48	; 0x30
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20000009 	.word	0x20000009

0800d3c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d3ca:	4b05      	ldr	r3, [pc, #20]	; (800d3e0 <BSP_SD_WriteCpltCallback+0x20>)
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	1db9      	adds	r1, r7, #6
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f005 f90e 	bl	80125f4 <osMessageQueuePut>
#endif
}
 800d3d8:	bf00      	nop
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20000328 	.word	0x20000328

0800d3e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d3ee:	4b05      	ldr	r3, [pc, #20]	; (800d404 <BSP_SD_ReadCpltCallback+0x20>)
 800d3f0:	6818      	ldr	r0, [r3, #0]
 800d3f2:	1db9      	adds	r1, r7, #6
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f005 f8fc 	bl	80125f4 <osMessageQueuePut>
#endif
}
 800d3fc:	bf00      	nop
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	20000328 	.word	0x20000328

0800d408 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d414:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d418:	f009 f95a 	bl	80166d0 <malloc>
 800d41c:	4603      	mov	r3, r0
 800d41e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d105      	bne.n	800d432 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d42e:	2302      	movs	r3, #2
 800d430:	e066      	b.n	800d500 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7c1b      	ldrb	r3, [r3, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d119      	bne.n	800d476 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d442:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d446:	2202      	movs	r2, #2
 800d448:	2181      	movs	r1, #129	; 0x81
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f008 ff73 	bl	8016336 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2201      	movs	r2, #1
 800d454:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d45a:	2202      	movs	r2, #2
 800d45c:	2101      	movs	r1, #1
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f008 ff69 	bl	8016336 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2210      	movs	r2, #16
 800d470:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d474:	e016      	b.n	800d4a4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d476:	2340      	movs	r3, #64	; 0x40
 800d478:	2202      	movs	r2, #2
 800d47a:	2181      	movs	r1, #129	; 0x81
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f008 ff5a 	bl	8016336 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d488:	2340      	movs	r3, #64	; 0x40
 800d48a:	2202      	movs	r2, #2
 800d48c:	2101      	movs	r1, #1
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f008 ff51 	bl	8016336 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2210      	movs	r2, #16
 800d4a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	2203      	movs	r2, #3
 800d4a8:	2182      	movs	r1, #130	; 0x82
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f008 ff43 	bl	8016336 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	7c1b      	ldrb	r3, [r3, #16]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d109      	bne.n	800d4ee <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f009 f814 	bl	8016514 <USBD_LL_PrepareReceive>
 800d4ec:	e007      	b.n	800d4fe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4f4:	2340      	movs	r3, #64	; 0x40
 800d4f6:	2101      	movs	r1, #1
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f009 f80b 	bl	8016514 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800d514:	2300      	movs	r3, #0
 800d516:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d518:	2181      	movs	r1, #129	; 0x81
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f008 ff31 	bl	8016382 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d526:	2101      	movs	r1, #1
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f008 ff2a 	bl	8016382 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d536:	2182      	movs	r1, #130	; 0x82
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f008 ff22 	bl	8016382 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00e      	beq.n	800d576 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d568:	4618      	mov	r0, r3
 800d56a:	f009 f8b9 	bl	80166e0 <free>
    pdev->pClassData = NULL;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800d576:	7bfb      	ldrb	r3, [r7, #15]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d590:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d592:	2300      	movs	r3, #0
 800d594:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d596:	2300      	movs	r3, #0
 800d598:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d03a      	beq.n	800d620 <USBD_CDC_Setup+0xa0>
 800d5aa:	2b20      	cmp	r3, #32
 800d5ac:	f040 8097 	bne.w	800d6de <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	88db      	ldrh	r3, [r3, #6]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d029      	beq.n	800d60c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	da11      	bge.n	800d5e6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800d5ce:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	88d2      	ldrh	r2, [r2, #6]
 800d5d4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d5d6:	6939      	ldr	r1, [r7, #16]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	88db      	ldrh	r3, [r3, #6]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f001 fac7 	bl	800eb72 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800d5e4:	e082      	b.n	800d6ec <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	785a      	ldrb	r2, [r3, #1]
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	88db      	ldrh	r3, [r3, #6]
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d5fc:	6939      	ldr	r1, [r7, #16]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	88db      	ldrh	r3, [r3, #6]
 800d602:	461a      	mov	r2, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f001 fae0 	bl	800ebca <USBD_CtlPrepareRx>
    break;
 800d60a:	e06f      	b.n	800d6ec <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	7850      	ldrb	r0, [r2, #1]
 800d618:	2200      	movs	r2, #0
 800d61a:	6839      	ldr	r1, [r7, #0]
 800d61c:	4798      	blx	r3
    break;
 800d61e:	e065      	b.n	800d6ec <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	785b      	ldrb	r3, [r3, #1]
 800d624:	2b0b      	cmp	r3, #11
 800d626:	d84f      	bhi.n	800d6c8 <USBD_CDC_Setup+0x148>
 800d628:	a201      	add	r2, pc, #4	; (adr r2, 800d630 <USBD_CDC_Setup+0xb0>)
 800d62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62e:	bf00      	nop
 800d630:	0800d661 	.word	0x0800d661
 800d634:	0800d6d7 	.word	0x0800d6d7
 800d638:	0800d6c9 	.word	0x0800d6c9
 800d63c:	0800d6c9 	.word	0x0800d6c9
 800d640:	0800d6c9 	.word	0x0800d6c9
 800d644:	0800d6c9 	.word	0x0800d6c9
 800d648:	0800d6c9 	.word	0x0800d6c9
 800d64c:	0800d6c9 	.word	0x0800d6c9
 800d650:	0800d6c9 	.word	0x0800d6c9
 800d654:	0800d6c9 	.word	0x0800d6c9
 800d658:	0800d689 	.word	0x0800d689
 800d65c:	0800d6b1 	.word	0x0800d6b1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d666:	2b03      	cmp	r3, #3
 800d668:	d107      	bne.n	800d67a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d66a:	f107 030c 	add.w	r3, r7, #12
 800d66e:	2202      	movs	r2, #2
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f001 fa7d 	bl	800eb72 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d678:	e030      	b.n	800d6dc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f001 fa07 	bl	800ea90 <USBD_CtlError>
        ret = USBD_FAIL;
 800d682:	2303      	movs	r3, #3
 800d684:	75fb      	strb	r3, [r7, #23]
      break;
 800d686:	e029      	b.n	800d6dc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d68e:	2b03      	cmp	r3, #3
 800d690:	d107      	bne.n	800d6a2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d692:	f107 030f 	add.w	r3, r7, #15
 800d696:	2201      	movs	r2, #1
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f001 fa69 	bl	800eb72 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d6a0:	e01c      	b.n	800d6dc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d6a2:	6839      	ldr	r1, [r7, #0]
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f001 f9f3 	bl	800ea90 <USBD_CtlError>
        ret = USBD_FAIL;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800d6ae:	e015      	b.n	800d6dc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	d00f      	beq.n	800d6da <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f001 f9e7 	bl	800ea90 <USBD_CtlError>
        ret = USBD_FAIL;
 800d6c2:	2303      	movs	r3, #3
 800d6c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d6c6:	e008      	b.n	800d6da <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f001 f9e0 	bl	800ea90 <USBD_CtlError>
      ret = USBD_FAIL;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	75fb      	strb	r3, [r7, #23]
      break;
 800d6d4:	e002      	b.n	800d6dc <USBD_CDC_Setup+0x15c>
      break;
 800d6d6:	bf00      	nop
 800d6d8:	e008      	b.n	800d6ec <USBD_CDC_Setup+0x16c>
      break;
 800d6da:	bf00      	nop
    }
    break;
 800d6dc:	e006      	b.n	800d6ec <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f001 f9d5 	bl	800ea90 <USBD_CtlError>
    ret = USBD_FAIL;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	75fb      	strb	r3, [r7, #23]
    break;
 800d6ea:	bf00      	nop
  }

  return (uint8_t)ret;
 800d6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3718      	adds	r7, #24
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop

0800d6f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d70a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d712:	2b00      	cmp	r3, #0
 800d714:	d101      	bne.n	800d71a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d716:	2303      	movs	r3, #3
 800d718:	e049      	b.n	800d7ae <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d720:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d722:	78fa      	ldrb	r2, [r7, #3]
 800d724:	6879      	ldr	r1, [r7, #4]
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	440b      	add	r3, r1
 800d730:	3318      	adds	r3, #24
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d029      	beq.n	800d78c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d738:	78fa      	ldrb	r2, [r7, #3]
 800d73a:	6879      	ldr	r1, [r7, #4]
 800d73c:	4613      	mov	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	440b      	add	r3, r1
 800d746:	3318      	adds	r3, #24
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	78f9      	ldrb	r1, [r7, #3]
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	460b      	mov	r3, r1
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	1a5b      	subs	r3, r3, r1
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4403      	add	r3, r0
 800d758:	3344      	adds	r3, #68	; 0x44
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d760:	fb03 f301 	mul.w	r3, r3, r1
 800d764:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d766:	2b00      	cmp	r3, #0
 800d768:	d110      	bne.n	800d78c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d76a:	78fa      	ldrb	r2, [r7, #3]
 800d76c:	6879      	ldr	r1, [r7, #4]
 800d76e:	4613      	mov	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4413      	add	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	440b      	add	r3, r1
 800d778:	3318      	adds	r3, #24
 800d77a:	2200      	movs	r2, #0
 800d77c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d77e:	78f9      	ldrb	r1, [r7, #3]
 800d780:	2300      	movs	r3, #0
 800d782:	2200      	movs	r2, #0
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f008 fea4 	bl	80164d2 <USBD_LL_Transmit>
 800d78a:	e00f      	b.n	800d7ac <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	2200      	movs	r2, #0
 800d790:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d7a8:	78fa      	ldrb	r2, [r7, #3]
 800d7aa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	460b      	mov	r3, r1
 800d7c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d101      	bne.n	800d7d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e015      	b.n	800d804 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f008 feba 	bl	8016556 <USBD_LL_GetRxDataSize>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d7fe:	4611      	mov	r1, r2
 800d800:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d81a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d015      	beq.n	800d852 <USBD_CDC_EP0_RxReady+0x46>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d82c:	2bff      	cmp	r3, #255	; 0xff
 800d82e:	d010      	beq.n	800d852 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d83e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d846:	b292      	uxth	r2, r2
 800d848:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	22ff      	movs	r2, #255	; 0xff
 800d84e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2243      	movs	r2, #67	; 0x43
 800d868:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d86a:	4b03      	ldr	r3, [pc, #12]	; (800d878 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	20000094 	.word	0x20000094

0800d87c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2243      	movs	r2, #67	; 0x43
 800d888:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d88a:	4b03      	ldr	r3, [pc, #12]	; (800d898 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	20000050 	.word	0x20000050

0800d89c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2243      	movs	r2, #67	; 0x43
 800d8a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d8aa:	4b03      	ldr	r3, [pc, #12]	; (800d8b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	200000d8 	.word	0x200000d8

0800d8bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	220a      	movs	r2, #10
 800d8c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d8ca:	4b03      	ldr	r3, [pc, #12]	; (800d8d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	2000000c 	.word	0x2000000c

0800d8dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d101      	bne.n	800d8f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	e004      	b.n	800d8fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d906:	b480      	push	{r7}
 800d908:	b087      	sub	sp, #28
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	60b9      	str	r1, [r7, #8]
 800d910:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d918:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d92a:	2300      	movs	r3, #0
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	371c      	adds	r7, #28
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d948:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d96e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d970:	2301      	movs	r3, #1
 800d972:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d97e:	2303      	movs	r3, #3
 800d980:	e01a      	b.n	800d9b8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d114      	bne.n	800d9b6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2201      	movs	r2, #1
 800d990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d9aa:	2181      	movs	r1, #129	; 0x81
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f008 fd90 	bl	80164d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d9da:	2303      	movs	r3, #3
 800d9dc:	e016      	b.n	800da0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	7c1b      	ldrb	r3, [r3, #16]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d109      	bne.n	800d9fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f008 fd8e 	bl	8016514 <USBD_LL_PrepareReceive>
 800d9f8:	e007      	b.n	800da0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da00:	2340      	movs	r3, #64	; 0x40
 800da02:	2101      	movs	r1, #1
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f008 fd85 	bl	8016514 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	4613      	mov	r3, r2
 800da20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d101      	bne.n	800da2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800da28:	2303      	movs	r3, #3
 800da2a:	e025      	b.n	800da78 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d003      	beq.n	800da5e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	79fa      	ldrb	r2, [r7, #7]
 800da6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f008 fbfb 	bl	8016268 <USBD_LL_Init>
 800da72:	4603      	mov	r3, r0
 800da74:	75fb      	strb	r3, [r7, #23]

  return ret;
 800da76:	7dfb      	ldrb	r3, [r7, #23]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3718      	adds	r7, #24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da8a:	2300      	movs	r3, #0
 800da8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d101      	bne.n	800da98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800da94:	2303      	movs	r3, #3
 800da96:	e010      	b.n	800daba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	683a      	ldr	r2, [r7, #0]
 800da9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa8:	f107 020e 	add.w	r2, r7, #14
 800daac:	4610      	mov	r0, r2
 800daae:	4798      	blx	r3
 800dab0:	4602      	mov	r2, r0
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800dab8:	2300      	movs	r3, #0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b082      	sub	sp, #8
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f008 fc18 	bl	8016300 <USBD_LL_Start>
 800dad0:	4603      	mov	r3, r0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dada:	b480      	push	{r7}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	460b      	mov	r3, r1
 800dafa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dafc:	2303      	movs	r3, #3
 800dafe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db06:	2b00      	cmp	r3, #0
 800db08:	d009      	beq.n	800db1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	78fa      	ldrb	r2, [r7, #3]
 800db14:	4611      	mov	r1, r2
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	4798      	blx	r3
 800db1a:	4603      	mov	r3, r0
 800db1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d007      	beq.n	800db4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	78fa      	ldrb	r2, [r7, #3]
 800db48:	4611      	mov	r1, r2
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	4798      	blx	r3
  }

  return USBD_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f000 ff56 	bl	800ea1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800db7e:	461a      	mov	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db8c:	f003 031f 	and.w	r3, r3, #31
 800db90:	2b01      	cmp	r3, #1
 800db92:	d00e      	beq.n	800dbb2 <USBD_LL_SetupStage+0x5a>
 800db94:	2b01      	cmp	r3, #1
 800db96:	d302      	bcc.n	800db9e <USBD_LL_SetupStage+0x46>
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d014      	beq.n	800dbc6 <USBD_LL_SetupStage+0x6e>
 800db9c:	e01d      	b.n	800dbda <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fa18 	bl	800dfdc <USBD_StdDevReq>
 800dbac:	4603      	mov	r3, r0
 800dbae:	73fb      	strb	r3, [r7, #15]
      break;
 800dbb0:	e020      	b.n	800dbf4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fa7c 	bl	800e0b8 <USBD_StdItfReq>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc4:	e016      	b.n	800dbf4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 fab8 	bl	800e144 <USBD_StdEPReq>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	73fb      	strb	r3, [r7, #15]
      break;
 800dbd8:	e00c      	b.n	800dbf4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbe0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f008 fbe9 	bl	80163c0 <USBD_LL_StallEP>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf2:	bf00      	nop
  }

  return ret;
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b086      	sub	sp, #24
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	460b      	mov	r3, r1
 800dc08:	607a      	str	r2, [r7, #4]
 800dc0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc0c:	7afb      	ldrb	r3, [r7, #11]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d137      	bne.n	800dc82 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d14a      	bne.n	800dcba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	689a      	ldr	r2, [r3, #8]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d913      	bls.n	800dc58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	689a      	ldr	r2, [r3, #8]
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	1ad2      	subs	r2, r2, r3
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	68da      	ldr	r2, [r3, #12]
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	4293      	cmp	r3, r2
 800dc48:	bf28      	it	cs
 800dc4a:	4613      	movcs	r3, r2
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	6879      	ldr	r1, [r7, #4]
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f000 ffd7 	bl	800ec04 <USBD_CtlContinueRx>
 800dc56:	e030      	b.n	800dcba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00a      	beq.n	800dc7a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d105      	bne.n	800dc7a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 ffd3 	bl	800ec26 <USBD_CtlSendStatus>
 800dc80:	e01b      	b.n	800dcba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d013      	beq.n	800dcb6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	d10e      	bne.n	800dcb6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	7afa      	ldrb	r2, [r7, #11]
 800dca2:	4611      	mov	r1, r2
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	4798      	blx	r3
 800dca8:	4603      	mov	r3, r0
 800dcaa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800dcac:	7dfb      	ldrb	r3, [r7, #23]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800dcb2:	7dfb      	ldrb	r3, [r7, #23]
 800dcb4:	e002      	b.n	800dcbc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800dcb6:	2303      	movs	r3, #3
 800dcb8:	e000      	b.n	800dcbc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800dcba:	2300      	movs	r3, #0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3718      	adds	r7, #24
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	460b      	mov	r3, r1
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dcd2:	7afb      	ldrb	r3, [r7, #11]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d16a      	bne.n	800ddae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3314      	adds	r3, #20
 800dcdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dce4:	2b02      	cmp	r3, #2
 800dce6:	d155      	bne.n	800dd94 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	689a      	ldr	r2, [r3, #8]
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d914      	bls.n	800dd1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	689a      	ldr	r2, [r3, #8]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	1ad2      	subs	r2, r2, r3
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	461a      	mov	r2, r3
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f000 ff4c 	bl	800eba8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd10:	2300      	movs	r3, #0
 800dd12:	2200      	movs	r2, #0
 800dd14:	2100      	movs	r1, #0
 800dd16:	68f8      	ldr	r0, [r7, #12]
 800dd18:	f008 fbfc 	bl	8016514 <USBD_LL_PrepareReceive>
 800dd1c:	e03a      	b.n	800dd94 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	68da      	ldr	r2, [r3, #12]
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d11c      	bne.n	800dd64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	685a      	ldr	r2, [r3, #4]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d316      	bcc.n	800dd64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d20f      	bcs.n	800dd64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd44:	2200      	movs	r2, #0
 800dd46:	2100      	movs	r1, #0
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f000 ff2d 	bl	800eba8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2200      	movs	r2, #0
 800dd52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd56:	2300      	movs	r3, #0
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f008 fbd9 	bl	8016514 <USBD_LL_PrepareReceive>
 800dd62:	e017      	b.n	800dd94 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00a      	beq.n	800dd86 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dd76:	2b03      	cmp	r3, #3
 800dd78:	d105      	bne.n	800dd86 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd86:	2180      	movs	r1, #128	; 0x80
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f008 fb19 	bl	80163c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f000 ff5c 	bl	800ec4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d123      	bne.n	800dde6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff fe9b 	bl	800dada <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ddac:	e01b      	b.n	800dde6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d013      	beq.n	800dde2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d10e      	bne.n	800dde2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddca:	695b      	ldr	r3, [r3, #20]
 800ddcc:	7afa      	ldrb	r2, [r7, #11]
 800ddce:	4611      	mov	r1, r2
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	4798      	blx	r3
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ddd8:	7dfb      	ldrb	r3, [r7, #23]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	e002      	b.n	800dde8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800dde2:	2303      	movs	r3, #3
 800dde4:	e000      	b.n	800dde8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d009      	beq.n	800de34 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	6852      	ldr	r2, [r2, #4]
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	4611      	mov	r1, r2
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de34:	2340      	movs	r3, #64	; 0x40
 800de36:	2200      	movs	r2, #0
 800de38:	2100      	movs	r1, #0
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f008 fa7b 	bl	8016336 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2240      	movs	r2, #64	; 0x40
 800de4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de50:	2340      	movs	r3, #64	; 0x40
 800de52:	2200      	movs	r2, #0
 800de54:	2180      	movs	r1, #128	; 0x80
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f008 fa6d 	bl	8016336 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2240      	movs	r2, #64	; 0x40
 800de66:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800de72:	b480      	push	{r7}
 800de74:	b083      	sub	sp, #12
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	460b      	mov	r3, r1
 800de7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	78fa      	ldrb	r2, [r7, #3]
 800de82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800de92:	b480      	push	{r7}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2204      	movs	r2, #4
 800deaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deca:	2b04      	cmp	r3, #4
 800decc:	d105      	bne.n	800deda <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def6:	2b03      	cmp	r3, #3
 800def8:	d10b      	bne.n	800df12 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df00:	69db      	ldr	r3, [r3, #28]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d005      	beq.n	800df12 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df0c:	69db      	ldr	r3, [r3, #28]
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800df36:	b480      	push	{r7}
 800df38:	b083      	sub	sp, #12
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
 800df3e:	460b      	mov	r3, r1
 800df40:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b082      	sub	sp, #8
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d009      	beq.n	800df94 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	6852      	ldr	r2, [r2, #4]
 800df8c:	b2d2      	uxtb	r2, r2
 800df8e:	4611      	mov	r1, r2
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	4798      	blx	r3
  }

  return USBD_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	b087      	sub	sp, #28
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfbc:	8a3b      	ldrh	r3, [r7, #16]
 800dfbe:	021b      	lsls	r3, r3, #8
 800dfc0:	b21a      	sxth	r2, r3
 800dfc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	b21b      	sxth	r3, r3
 800dfca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfcc:	89fb      	ldrh	r3, [r7, #14]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	371c      	adds	r7, #28
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
	...

0800dfdc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dff2:	2b20      	cmp	r3, #32
 800dff4:	d004      	beq.n	800e000 <USBD_StdDevReq+0x24>
 800dff6:	2b40      	cmp	r3, #64	; 0x40
 800dff8:	d002      	beq.n	800e000 <USBD_StdDevReq+0x24>
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00a      	beq.n	800e014 <USBD_StdDevReq+0x38>
 800dffe:	e050      	b.n	800e0a2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	4798      	blx	r3
 800e00e:	4603      	mov	r3, r0
 800e010:	73fb      	strb	r3, [r7, #15]
    break;
 800e012:	e04b      	b.n	800e0ac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	785b      	ldrb	r3, [r3, #1]
 800e018:	2b09      	cmp	r3, #9
 800e01a:	d83c      	bhi.n	800e096 <USBD_StdDevReq+0xba>
 800e01c:	a201      	add	r2, pc, #4	; (adr r2, 800e024 <USBD_StdDevReq+0x48>)
 800e01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e022:	bf00      	nop
 800e024:	0800e079 	.word	0x0800e079
 800e028:	0800e08d 	.word	0x0800e08d
 800e02c:	0800e097 	.word	0x0800e097
 800e030:	0800e083 	.word	0x0800e083
 800e034:	0800e097 	.word	0x0800e097
 800e038:	0800e057 	.word	0x0800e057
 800e03c:	0800e04d 	.word	0x0800e04d
 800e040:	0800e097 	.word	0x0800e097
 800e044:	0800e06f 	.word	0x0800e06f
 800e048:	0800e061 	.word	0x0800e061
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 f9ce 	bl	800e3f0 <USBD_GetDescriptor>
      break;
 800e054:	e024      	b.n	800e0a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fb5d 	bl	800e718 <USBD_SetAddress>
      break;
 800e05e:	e01f      	b.n	800e0a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 fb9a 	bl	800e79c <USBD_SetConfig>
 800e068:	4603      	mov	r3, r0
 800e06a:	73fb      	strb	r3, [r7, #15]
      break;
 800e06c:	e018      	b.n	800e0a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fc37 	bl	800e8e4 <USBD_GetConfig>
      break;
 800e076:	e013      	b.n	800e0a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fc66 	bl	800e94c <USBD_GetStatus>
      break;
 800e080:	e00e      	b.n	800e0a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800e082:	6839      	ldr	r1, [r7, #0]
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 fc94 	bl	800e9b2 <USBD_SetFeature>
      break;
 800e08a:	e009      	b.n	800e0a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800e08c:	6839      	ldr	r1, [r7, #0]
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 fca3 	bl	800e9da <USBD_ClrFeature>
      break;
 800e094:	e004      	b.n	800e0a0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fcf9 	bl	800ea90 <USBD_CtlError>
      break;
 800e09e:	bf00      	nop
    }
    break;
 800e0a0:	e004      	b.n	800e0ac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fcf3 	bl	800ea90 <USBD_CtlError>
    break;
 800e0aa:	bf00      	nop
  }

  return ret;
 800e0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop

0800e0b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0ce:	2b20      	cmp	r3, #32
 800e0d0:	d003      	beq.n	800e0da <USBD_StdItfReq+0x22>
 800e0d2:	2b40      	cmp	r3, #64	; 0x40
 800e0d4:	d001      	beq.n	800e0da <USBD_StdItfReq+0x22>
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d12a      	bne.n	800e130 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d81d      	bhi.n	800e122 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	889b      	ldrh	r3, [r3, #4]
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d813      	bhi.n	800e118 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	6839      	ldr	r1, [r7, #0]
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	4798      	blx	r3
 800e0fe:	4603      	mov	r3, r0
 800e100:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	88db      	ldrh	r3, [r3, #6]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d110      	bne.n	800e12c <USBD_StdItfReq+0x74>
 800e10a:	7bfb      	ldrb	r3, [r7, #15]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d10d      	bne.n	800e12c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 fd88 	bl	800ec26 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e116:	e009      	b.n	800e12c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 fcb8 	bl	800ea90 <USBD_CtlError>
      break;
 800e120:	e004      	b.n	800e12c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fcb3 	bl	800ea90 <USBD_CtlError>
      break;
 800e12a:	e000      	b.n	800e12e <USBD_StdItfReq+0x76>
      break;
 800e12c:	bf00      	nop
    }
    break;
 800e12e:	e004      	b.n	800e13a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fcac 	bl	800ea90 <USBD_CtlError>
    break;
 800e138:	bf00      	nop
  }

  return ret;
 800e13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e14e:	2300      	movs	r3, #0
 800e150:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	889b      	ldrh	r3, [r3, #4]
 800e156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e160:	2b20      	cmp	r3, #32
 800e162:	d004      	beq.n	800e16e <USBD_StdEPReq+0x2a>
 800e164:	2b40      	cmp	r3, #64	; 0x40
 800e166:	d002      	beq.n	800e16e <USBD_StdEPReq+0x2a>
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00a      	beq.n	800e182 <USBD_StdEPReq+0x3e>
 800e16c:	e135      	b.n	800e3da <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	6839      	ldr	r1, [r7, #0]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	4798      	blx	r3
 800e17c:	4603      	mov	r3, r0
 800e17e:	73fb      	strb	r3, [r7, #15]
    break;
 800e180:	e130      	b.n	800e3e4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	785b      	ldrb	r3, [r3, #1]
 800e186:	2b01      	cmp	r3, #1
 800e188:	d03e      	beq.n	800e208 <USBD_StdEPReq+0xc4>
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	d002      	beq.n	800e194 <USBD_StdEPReq+0x50>
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d077      	beq.n	800e282 <USBD_StdEPReq+0x13e>
 800e192:	e11c      	b.n	800e3ce <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e19a:	2b02      	cmp	r3, #2
 800e19c:	d002      	beq.n	800e1a4 <USBD_StdEPReq+0x60>
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d015      	beq.n	800e1ce <USBD_StdEPReq+0x8a>
 800e1a2:	e02b      	b.n	800e1fc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1a4:	7bbb      	ldrb	r3, [r7, #14]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00c      	beq.n	800e1c4 <USBD_StdEPReq+0x80>
 800e1aa:	7bbb      	ldrb	r3, [r7, #14]
 800e1ac:	2b80      	cmp	r3, #128	; 0x80
 800e1ae:	d009      	beq.n	800e1c4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1b0:	7bbb      	ldrb	r3, [r7, #14]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f008 f903 	bl	80163c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1ba:	2180      	movs	r1, #128	; 0x80
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f008 f8ff 	bl	80163c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e1c2:	e020      	b.n	800e206 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 fc62 	bl	800ea90 <USBD_CtlError>
        break;
 800e1cc:	e01b      	b.n	800e206 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	885b      	ldrh	r3, [r3, #2]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10e      	bne.n	800e1f4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1d6:	7bbb      	ldrb	r3, [r7, #14]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00b      	beq.n	800e1f4 <USBD_StdEPReq+0xb0>
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
 800e1de:	2b80      	cmp	r3, #128	; 0x80
 800e1e0:	d008      	beq.n	800e1f4 <USBD_StdEPReq+0xb0>
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	88db      	ldrh	r3, [r3, #6]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d104      	bne.n	800e1f4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1ea:	7bbb      	ldrb	r3, [r7, #14]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f008 f8e6 	bl	80163c0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 fd16 	bl	800ec26 <USBD_CtlSendStatus>

        break;
 800e1fa:	e004      	b.n	800e206 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fc46 	bl	800ea90 <USBD_CtlError>
        break;
 800e204:	bf00      	nop
      }
      break;
 800e206:	e0e7      	b.n	800e3d8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e20e:	2b02      	cmp	r3, #2
 800e210:	d002      	beq.n	800e218 <USBD_StdEPReq+0xd4>
 800e212:	2b03      	cmp	r3, #3
 800e214:	d015      	beq.n	800e242 <USBD_StdEPReq+0xfe>
 800e216:	e02d      	b.n	800e274 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e218:	7bbb      	ldrb	r3, [r7, #14]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00c      	beq.n	800e238 <USBD_StdEPReq+0xf4>
 800e21e:	7bbb      	ldrb	r3, [r7, #14]
 800e220:	2b80      	cmp	r3, #128	; 0x80
 800e222:	d009      	beq.n	800e238 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e224:	7bbb      	ldrb	r3, [r7, #14]
 800e226:	4619      	mov	r1, r3
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f008 f8c9 	bl	80163c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e22e:	2180      	movs	r1, #128	; 0x80
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f008 f8c5 	bl	80163c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e236:	e023      	b.n	800e280 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800e238:	6839      	ldr	r1, [r7, #0]
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 fc28 	bl	800ea90 <USBD_CtlError>
        break;
 800e240:	e01e      	b.n	800e280 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	885b      	ldrh	r3, [r3, #2]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d119      	bne.n	800e27e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e24a:	7bbb      	ldrb	r3, [r7, #14]
 800e24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e250:	2b00      	cmp	r3, #0
 800e252:	d004      	beq.n	800e25e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e254:	7bbb      	ldrb	r3, [r7, #14]
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f008 f8d0 	bl	80163fe <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 fce1 	bl	800ec26 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	4798      	blx	r3
        }
        break;
 800e272:	e004      	b.n	800e27e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fc0a 	bl	800ea90 <USBD_CtlError>
        break;
 800e27c:	e000      	b.n	800e280 <USBD_StdEPReq+0x13c>
        break;
 800e27e:	bf00      	nop
      }
      break;
 800e280:	e0aa      	b.n	800e3d8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d002      	beq.n	800e292 <USBD_StdEPReq+0x14e>
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d032      	beq.n	800e2f6 <USBD_StdEPReq+0x1b2>
 800e290:	e097      	b.n	800e3c2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e292:	7bbb      	ldrb	r3, [r7, #14]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d007      	beq.n	800e2a8 <USBD_StdEPReq+0x164>
 800e298:	7bbb      	ldrb	r3, [r7, #14]
 800e29a:	2b80      	cmp	r3, #128	; 0x80
 800e29c:	d004      	beq.n	800e2a8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800e29e:	6839      	ldr	r1, [r7, #0]
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 fbf5 	bl	800ea90 <USBD_CtlError>
          break;
 800e2a6:	e091      	b.n	800e3cc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	da0b      	bge.n	800e2c8 <USBD_StdEPReq+0x184>
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	4413      	add	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	3310      	adds	r3, #16
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	e00b      	b.n	800e2e0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e2c8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	4413      	add	r3, r2
 800e2de:	3304      	adds	r3, #4
 800e2e0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	2202      	movs	r2, #2
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fc3f 	bl	800eb72 <USBD_CtlSendData>
        break;
 800e2f4:	e06a      	b.n	800e3cc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e2f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	da11      	bge.n	800e322 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	f003 020f 	and.w	r2, r3, #15
 800e304:	6879      	ldr	r1, [r7, #4]
 800e306:	4613      	mov	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4413      	add	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	440b      	add	r3, r1
 800e310:	3324      	adds	r3, #36	; 0x24
 800e312:	881b      	ldrh	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d117      	bne.n	800e348 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 fbb8 	bl	800ea90 <USBD_CtlError>
            break;
 800e320:	e054      	b.n	800e3cc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	f003 020f 	and.w	r2, r3, #15
 800e328:	6879      	ldr	r1, [r7, #4]
 800e32a:	4613      	mov	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	440b      	add	r3, r1
 800e334:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d104      	bne.n	800e348 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fba5 	bl	800ea90 <USBD_CtlError>
            break;
 800e346:	e041      	b.n	800e3cc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	da0b      	bge.n	800e368 <USBD_StdEPReq+0x224>
 800e350:	7bbb      	ldrb	r3, [r7, #14]
 800e352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e356:	4613      	mov	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	3310      	adds	r3, #16
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	4413      	add	r3, r2
 800e364:	3304      	adds	r3, #4
 800e366:	e00b      	b.n	800e380 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e368:	7bbb      	ldrb	r3, [r7, #14]
 800e36a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e36e:	4613      	mov	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	4413      	add	r3, r2
 800e37e:	3304      	adds	r3, #4
 800e380:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e382:	7bbb      	ldrb	r3, [r7, #14]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <USBD_StdEPReq+0x24a>
 800e388:	7bbb      	ldrb	r3, [r7, #14]
 800e38a:	2b80      	cmp	r3, #128	; 0x80
 800e38c:	d103      	bne.n	800e396 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	2200      	movs	r2, #0
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	e00e      	b.n	800e3b4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f008 f84e 	bl	801643c <USBD_LL_IsStallEP>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d003      	beq.n	800e3ae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e002      	b.n	800e3b4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2202      	movs	r2, #2
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fbd9 	bl	800eb72 <USBD_CtlSendData>
          break;
 800e3c0:	e004      	b.n	800e3cc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800e3c2:	6839      	ldr	r1, [r7, #0]
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 fb63 	bl	800ea90 <USBD_CtlError>
        break;
 800e3ca:	bf00      	nop
      }
      break;
 800e3cc:	e004      	b.n	800e3d8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800e3ce:	6839      	ldr	r1, [r7, #0]
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fb5d 	bl	800ea90 <USBD_CtlError>
      break;
 800e3d6:	bf00      	nop
    }
    break;
 800e3d8:	e004      	b.n	800e3e4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fb57 	bl	800ea90 <USBD_CtlError>
    break;
 800e3e2:	bf00      	nop
  }

  return ret;
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
	...

0800e3f0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e3fe:	2300      	movs	r3, #0
 800e400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e402:	2300      	movs	r3, #0
 800e404:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	885b      	ldrh	r3, [r3, #2]
 800e40a:	0a1b      	lsrs	r3, r3, #8
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3b01      	subs	r3, #1
 800e410:	2b0e      	cmp	r3, #14
 800e412:	f200 8152 	bhi.w	800e6ba <USBD_GetDescriptor+0x2ca>
 800e416:	a201      	add	r2, pc, #4	; (adr r2, 800e41c <USBD_GetDescriptor+0x2c>)
 800e418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41c:	0800e48d 	.word	0x0800e48d
 800e420:	0800e4a5 	.word	0x0800e4a5
 800e424:	0800e4e5 	.word	0x0800e4e5
 800e428:	0800e6bb 	.word	0x0800e6bb
 800e42c:	0800e6bb 	.word	0x0800e6bb
 800e430:	0800e65b 	.word	0x0800e65b
 800e434:	0800e687 	.word	0x0800e687
 800e438:	0800e6bb 	.word	0x0800e6bb
 800e43c:	0800e6bb 	.word	0x0800e6bb
 800e440:	0800e6bb 	.word	0x0800e6bb
 800e444:	0800e6bb 	.word	0x0800e6bb
 800e448:	0800e6bb 	.word	0x0800e6bb
 800e44c:	0800e6bb 	.word	0x0800e6bb
 800e450:	0800e6bb 	.word	0x0800e6bb
 800e454:	0800e459 	.word	0x0800e459
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	7c12      	ldrb	r2, [r2, #16]
 800e470:	f107 0108 	add.w	r1, r7, #8
 800e474:	4610      	mov	r0, r2
 800e476:	4798      	blx	r3
 800e478:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e47a:	e126      	b.n	800e6ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 fb06 	bl	800ea90 <USBD_CtlError>
      err++;
 800e484:	7afb      	ldrb	r3, [r7, #11]
 800e486:	3301      	adds	r3, #1
 800e488:	72fb      	strb	r3, [r7, #11]
    break;
 800e48a:	e11e      	b.n	800e6ca <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	7c12      	ldrb	r2, [r2, #16]
 800e498:	f107 0108 	add.w	r1, r7, #8
 800e49c:	4610      	mov	r0, r2
 800e49e:	4798      	blx	r3
 800e4a0:	60f8      	str	r0, [r7, #12]
    break;
 800e4a2:	e112      	b.n	800e6ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	7c1b      	ldrb	r3, [r3, #16]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10d      	bne.n	800e4c8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b4:	f107 0208 	add.w	r2, r7, #8
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	4798      	blx	r3
 800e4bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e4c6:	e100      	b.n	800e6ca <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d0:	f107 0208 	add.w	r2, r7, #8
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	4798      	blx	r3
 800e4d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	2202      	movs	r2, #2
 800e4e0:	701a      	strb	r2, [r3, #0]
    break;
 800e4e2:	e0f2      	b.n	800e6ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	885b      	ldrh	r3, [r3, #2]
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b05      	cmp	r3, #5
 800e4ec:	f200 80ac 	bhi.w	800e648 <USBD_GetDescriptor+0x258>
 800e4f0:	a201      	add	r2, pc, #4	; (adr r2, 800e4f8 <USBD_GetDescriptor+0x108>)
 800e4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f6:	bf00      	nop
 800e4f8:	0800e511 	.word	0x0800e511
 800e4fc:	0800e545 	.word	0x0800e545
 800e500:	0800e579 	.word	0x0800e579
 800e504:	0800e5ad 	.word	0x0800e5ad
 800e508:	0800e5e1 	.word	0x0800e5e1
 800e50c:	0800e615 	.word	0x0800e615
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00b      	beq.n	800e534 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	7c12      	ldrb	r2, [r2, #16]
 800e528:	f107 0108 	add.w	r1, r7, #8
 800e52c:	4610      	mov	r0, r2
 800e52e:	4798      	blx	r3
 800e530:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e532:	e091      	b.n	800e658 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 faaa 	bl	800ea90 <USBD_CtlError>
        err++;
 800e53c:	7afb      	ldrb	r3, [r7, #11]
 800e53e:	3301      	adds	r3, #1
 800e540:	72fb      	strb	r3, [r7, #11]
      break;
 800e542:	e089      	b.n	800e658 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00b      	beq.n	800e568 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	7c12      	ldrb	r2, [r2, #16]
 800e55c:	f107 0108 	add.w	r1, r7, #8
 800e560:	4610      	mov	r0, r2
 800e562:	4798      	blx	r3
 800e564:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e566:	e077      	b.n	800e658 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fa90 	bl	800ea90 <USBD_CtlError>
        err++;
 800e570:	7afb      	ldrb	r3, [r7, #11]
 800e572:	3301      	adds	r3, #1
 800e574:	72fb      	strb	r3, [r7, #11]
      break;
 800e576:	e06f      	b.n	800e658 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00b      	beq.n	800e59c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	7c12      	ldrb	r2, [r2, #16]
 800e590:	f107 0108 	add.w	r1, r7, #8
 800e594:	4610      	mov	r0, r2
 800e596:	4798      	blx	r3
 800e598:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e59a:	e05d      	b.n	800e658 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fa76 	bl	800ea90 <USBD_CtlError>
        err++;
 800e5a4:	7afb      	ldrb	r3, [r7, #11]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	72fb      	strb	r3, [r7, #11]
      break;
 800e5aa:	e055      	b.n	800e658 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5be:	691b      	ldr	r3, [r3, #16]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	7c12      	ldrb	r2, [r2, #16]
 800e5c4:	f107 0108 	add.w	r1, r7, #8
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	4798      	blx	r3
 800e5cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5ce:	e043      	b.n	800e658 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e5d0:	6839      	ldr	r1, [r7, #0]
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 fa5c 	bl	800ea90 <USBD_CtlError>
        err++;
 800e5d8:	7afb      	ldrb	r3, [r7, #11]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	72fb      	strb	r3, [r7, #11]
      break;
 800e5de:	e03b      	b.n	800e658 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5f2:	695b      	ldr	r3, [r3, #20]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	7c12      	ldrb	r2, [r2, #16]
 800e5f8:	f107 0108 	add.w	r1, r7, #8
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	4798      	blx	r3
 800e600:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e602:	e029      	b.n	800e658 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 fa42 	bl	800ea90 <USBD_CtlError>
        err++;
 800e60c:	7afb      	ldrb	r3, [r7, #11]
 800e60e:	3301      	adds	r3, #1
 800e610:	72fb      	strb	r3, [r7, #11]
      break;
 800e612:	e021      	b.n	800e658 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e61a:	699b      	ldr	r3, [r3, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00b      	beq.n	800e638 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e626:	699b      	ldr	r3, [r3, #24]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	7c12      	ldrb	r2, [r2, #16]
 800e62c:	f107 0108 	add.w	r1, r7, #8
 800e630:	4610      	mov	r0, r2
 800e632:	4798      	blx	r3
 800e634:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e636:	e00f      	b.n	800e658 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fa28 	bl	800ea90 <USBD_CtlError>
        err++;
 800e640:	7afb      	ldrb	r3, [r7, #11]
 800e642:	3301      	adds	r3, #1
 800e644:	72fb      	strb	r3, [r7, #11]
      break;
 800e646:	e007      	b.n	800e658 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fa20 	bl	800ea90 <USBD_CtlError>
      err++;
 800e650:	7afb      	ldrb	r3, [r7, #11]
 800e652:	3301      	adds	r3, #1
 800e654:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e656:	bf00      	nop
    }
    break;
 800e658:	e037      	b.n	800e6ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	7c1b      	ldrb	r3, [r3, #16]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d109      	bne.n	800e676 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66a:	f107 0208 	add.w	r2, r7, #8
 800e66e:	4610      	mov	r0, r2
 800e670:	4798      	blx	r3
 800e672:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e674:	e029      	b.n	800e6ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 fa09 	bl	800ea90 <USBD_CtlError>
      err++;
 800e67e:	7afb      	ldrb	r3, [r7, #11]
 800e680:	3301      	adds	r3, #1
 800e682:	72fb      	strb	r3, [r7, #11]
    break;
 800e684:	e021      	b.n	800e6ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	7c1b      	ldrb	r3, [r3, #16]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10d      	bne.n	800e6aa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e696:	f107 0208 	add.w	r2, r7, #8
 800e69a:	4610      	mov	r0, r2
 800e69c:	4798      	blx	r3
 800e69e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	2207      	movs	r2, #7
 800e6a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e6a8:	e00f      	b.n	800e6ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 f9ef 	bl	800ea90 <USBD_CtlError>
      err++;
 800e6b2:	7afb      	ldrb	r3, [r7, #11]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	72fb      	strb	r3, [r7, #11]
    break;
 800e6b8:	e007      	b.n	800e6ca <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 f9e7 	bl	800ea90 <USBD_CtlError>
    err++;
 800e6c2:	7afb      	ldrb	r3, [r7, #11]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	72fb      	strb	r3, [r7, #11]
    break;
 800e6c8:	bf00      	nop
  }

  if (err != 0U)
 800e6ca:	7afb      	ldrb	r3, [r7, #11]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d11e      	bne.n	800e70e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	88db      	ldrh	r3, [r3, #6]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d016      	beq.n	800e706 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800e6d8:	893b      	ldrh	r3, [r7, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00e      	beq.n	800e6fc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	88da      	ldrh	r2, [r3, #6]
 800e6e2:	893b      	ldrh	r3, [r7, #8]
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	bf28      	it	cs
 800e6e8:	4613      	movcs	r3, r2
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e6ee:	893b      	ldrh	r3, [r7, #8]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	68f9      	ldr	r1, [r7, #12]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 fa3c 	bl	800eb72 <USBD_CtlSendData>
 800e6fa:	e009      	b.n	800e710 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e6fc:	6839      	ldr	r1, [r7, #0]
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f9c6 	bl	800ea90 <USBD_CtlError>
 800e704:	e004      	b.n	800e710 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fa8d 	bl	800ec26 <USBD_CtlSendStatus>
 800e70c:	e000      	b.n	800e710 <USBD_GetDescriptor+0x320>
    return;
 800e70e:	bf00      	nop
    }
  }
}
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop

0800e718 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	889b      	ldrh	r3, [r3, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d130      	bne.n	800e78c <USBD_SetAddress+0x74>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	88db      	ldrh	r3, [r3, #6]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d12c      	bne.n	800e78c <USBD_SetAddress+0x74>
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	885b      	ldrh	r3, [r3, #2]
 800e736:	2b7f      	cmp	r3, #127	; 0x7f
 800e738:	d828      	bhi.n	800e78c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	885b      	ldrh	r3, [r3, #2]
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e744:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e74c:	2b03      	cmp	r3, #3
 800e74e:	d104      	bne.n	800e75a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f99c 	bl	800ea90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e758:	e01c      	b.n	800e794 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	7bfa      	ldrb	r2, [r7, #15]
 800e75e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	4619      	mov	r1, r3
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f007 fe94 	bl	8016494 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 fa5a 	bl	800ec26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e772:	7bfb      	ldrb	r3, [r7, #15]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2202      	movs	r2, #2
 800e77c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e780:	e008      	b.n	800e794 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2201      	movs	r2, #1
 800e786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78a:	e003      	b.n	800e794 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f97e 	bl	800ea90 <USBD_CtlError>
  }
}
 800e794:	bf00      	nop
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	885b      	ldrh	r3, [r3, #2]
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	4b4b      	ldr	r3, [pc, #300]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e7b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7b4:	4b4a      	ldr	r3, [pc, #296]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d905      	bls.n	800e7c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f966 	bl	800ea90 <USBD_CtlError>
    return USBD_FAIL;
 800e7c4:	2303      	movs	r3, #3
 800e7c6:	e087      	b.n	800e8d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	d002      	beq.n	800e7d8 <USBD_SetConfig+0x3c>
 800e7d2:	2b03      	cmp	r3, #3
 800e7d4:	d025      	beq.n	800e822 <USBD_SetConfig+0x86>
 800e7d6:	e071      	b.n	800e8bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e7d8:	4b41      	ldr	r3, [pc, #260]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d01c      	beq.n	800e81a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e7e0:	4b3f      	ldr	r3, [pc, #252]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e7ea:	4b3d      	ldr	r3, [pc, #244]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f7ff f97d 	bl	800daf0 <USBD_SetClassConfig>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e7fa:	7bfb      	ldrb	r3, [r7, #15]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d004      	beq.n	800e80a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 f944 	bl	800ea90 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e808:	e065      	b.n	800e8d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fa0b 	bl	800ec26 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2203      	movs	r2, #3
 800e814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e818:	e05d      	b.n	800e8d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fa03 	bl	800ec26 <USBD_CtlSendStatus>
    break;
 800e820:	e059      	b.n	800e8d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e822:	4b2f      	ldr	r3, [pc, #188]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d112      	bne.n	800e850 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2202      	movs	r2, #2
 800e82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800e832:	4b2b      	ldr	r3, [pc, #172]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e83c:	4b28      	ldr	r3, [pc, #160]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff f970 	bl	800db28 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f9ec 	bl	800ec26 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e84e:	e042      	b.n	800e8d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e850:	4b23      	ldr	r3, [pc, #140]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	461a      	mov	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d02a      	beq.n	800e8b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	4619      	mov	r1, r3
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7ff f95e 	bl	800db28 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e86c:	4b1c      	ldr	r3, [pc, #112]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	461a      	mov	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e876:	4b1a      	ldr	r3, [pc, #104]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7ff f937 	bl	800daf0 <USBD_SetClassConfig>
 800e882:	4603      	mov	r3, r0
 800e884:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00f      	beq.n	800e8ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e88c:	6839      	ldr	r1, [r7, #0]
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f8fe 	bl	800ea90 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7ff f943 	bl	800db28 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2202      	movs	r2, #2
 800e8a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e8aa:	e014      	b.n	800e8d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f9ba 	bl	800ec26 <USBD_CtlSendStatus>
    break;
 800e8b2:	e010      	b.n	800e8d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f9b6 	bl	800ec26 <USBD_CtlSendStatus>
    break;
 800e8ba:	e00c      	b.n	800e8d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 f8e6 	bl	800ea90 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8c4:	4b06      	ldr	r3, [pc, #24]	; (800e8e0 <USBD_SetConfig+0x144>)
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7ff f92c 	bl	800db28 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e8d4:	bf00      	nop
  }

  return ret;
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	2000032c 	.word	0x2000032c

0800e8e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	88db      	ldrh	r3, [r3, #6]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d004      	beq.n	800e900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f8c9 	bl	800ea90 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e8fe:	e021      	b.n	800e944 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e906:	2b01      	cmp	r3, #1
 800e908:	db17      	blt.n	800e93a <USBD_GetConfig+0x56>
 800e90a:	2b02      	cmp	r3, #2
 800e90c:	dd02      	ble.n	800e914 <USBD_GetConfig+0x30>
 800e90e:	2b03      	cmp	r3, #3
 800e910:	d00b      	beq.n	800e92a <USBD_GetConfig+0x46>
 800e912:	e012      	b.n	800e93a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	3308      	adds	r3, #8
 800e91e:	2201      	movs	r2, #1
 800e920:	4619      	mov	r1, r3
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 f925 	bl	800eb72 <USBD_CtlSendData>
      break;
 800e928:	e00c      	b.n	800e944 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3304      	adds	r3, #4
 800e92e:	2201      	movs	r2, #1
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 f91d 	bl	800eb72 <USBD_CtlSendData>
      break;
 800e938:	e004      	b.n	800e944 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800e93a:	6839      	ldr	r1, [r7, #0]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f8a7 	bl	800ea90 <USBD_CtlError>
      break;
 800e942:	bf00      	nop
}
 800e944:	bf00      	nop
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e95c:	3b01      	subs	r3, #1
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d81e      	bhi.n	800e9a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	88db      	ldrh	r3, [r3, #6]
 800e966:	2b02      	cmp	r3, #2
 800e968:	d004      	beq.n	800e974 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e96a:	6839      	ldr	r1, [r7, #0]
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f88f 	bl	800ea90 <USBD_CtlError>
      break;
 800e972:	e01a      	b.n	800e9aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e980:	2b00      	cmp	r3, #0
 800e982:	d005      	beq.n	800e990 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	f043 0202 	orr.w	r2, r3, #2
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	330c      	adds	r3, #12
 800e994:	2202      	movs	r2, #2
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f8ea 	bl	800eb72 <USBD_CtlSendData>
    break;
 800e99e:	e004      	b.n	800e9aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e9a0:	6839      	ldr	r1, [r7, #0]
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f874 	bl	800ea90 <USBD_CtlError>
    break;
 800e9a8:	bf00      	nop
  }
}
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	885b      	ldrh	r3, [r3, #2]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d106      	bne.n	800e9d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f92a 	bl	800ec26 <USBD_CtlSendStatus>
  }
}
 800e9d2:	bf00      	nop
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b082      	sub	sp, #8
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d80b      	bhi.n	800ea08 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	885b      	ldrh	r3, [r3, #2]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d10c      	bne.n	800ea12 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 f910 	bl	800ec26 <USBD_CtlSendStatus>
      }
      break;
 800ea06:	e004      	b.n	800ea12 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 f840 	bl	800ea90 <USBD_CtlError>
      break;
 800ea10:	e000      	b.n	800ea14 <USBD_ClrFeature+0x3a>
      break;
 800ea12:	bf00      	nop
  }
}
 800ea14:	bf00      	nop
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	781a      	ldrb	r2, [r3, #0]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3301      	adds	r3, #1
 800ea36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	781a      	ldrb	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	3301      	adds	r3, #1
 800ea44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f7ff faa9 	bl	800df9e <SWAPBYTE>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	461a      	mov	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	3301      	adds	r3, #1
 800ea58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7ff fa9c 	bl	800df9e <SWAPBYTE>
 800ea66:	4603      	mov	r3, r0
 800ea68:	461a      	mov	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	3301      	adds	r3, #1
 800ea72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3301      	adds	r3, #1
 800ea78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7ff fa8f 	bl	800df9e <SWAPBYTE>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	80da      	strh	r2, [r3, #6]
}
 800ea88:	bf00      	nop
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea9a:	2180      	movs	r1, #128	; 0x80
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f007 fc8f 	bl	80163c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f007 fc8b 	bl	80163c0 <USBD_LL_StallEP>
}
 800eaaa:	bf00      	nop
 800eaac:	3708      	adds	r7, #8
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b086      	sub	sp, #24
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	60f8      	str	r0, [r7, #12]
 800eaba:	60b9      	str	r1, [r7, #8]
 800eabc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eabe:	2300      	movs	r3, #0
 800eac0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d036      	beq.n	800eb36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eacc:	6938      	ldr	r0, [r7, #16]
 800eace:	f000 f836 	bl	800eb3e <USBD_GetLen>
 800ead2:	4603      	mov	r3, r0
 800ead4:	3301      	adds	r3, #1
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	005b      	lsls	r3, r3, #1
 800eada:	b29a      	uxth	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	4413      	add	r3, r2
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	7812      	ldrb	r2, [r2, #0]
 800eaea:	701a      	strb	r2, [r3, #0]
  idx++;
 800eaec:	7dfb      	ldrb	r3, [r7, #23]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	2203      	movs	r2, #3
 800eafa:	701a      	strb	r2, [r3, #0]
  idx++;
 800eafc:	7dfb      	ldrb	r3, [r7, #23]
 800eafe:	3301      	adds	r3, #1
 800eb00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb02:	e013      	b.n	800eb2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	4413      	add	r3, r2
 800eb0a:	693a      	ldr	r2, [r7, #16]
 800eb0c:	7812      	ldrb	r2, [r2, #0]
 800eb0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	3301      	adds	r3, #1
 800eb14:	613b      	str	r3, [r7, #16]
    idx++;
 800eb16:	7dfb      	ldrb	r3, [r7, #23]
 800eb18:	3301      	adds	r3, #1
 800eb1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb1c:	7dfb      	ldrb	r3, [r7, #23]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	4413      	add	r3, r2
 800eb22:	2200      	movs	r2, #0
 800eb24:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1e7      	bne.n	800eb04 <USBD_GetString+0x52>
 800eb34:	e000      	b.n	800eb38 <USBD_GetString+0x86>
    return;
 800eb36:	bf00      	nop
  }
}
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b085      	sub	sp, #20
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb46:	2300      	movs	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb4e:	e005      	b.n	800eb5c <USBD_GetLen+0x1e>
  {
    len++;
 800eb50:	7bfb      	ldrb	r3, [r7, #15]
 800eb52:	3301      	adds	r3, #1
 800eb54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1f5      	bne.n	800eb50 <USBD_GetLen+0x12>
  }

  return len;
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b084      	sub	sp, #16
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	60f8      	str	r0, [r7, #12]
 800eb7a:	60b9      	str	r1, [r7, #8]
 800eb7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2202      	movs	r2, #2
 800eb82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	2100      	movs	r1, #0
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f007 fc9a 	bl	80164d2 <USBD_LL_Transmit>

  return USBD_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	2100      	movs	r1, #0
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f007 fc89 	bl	80164d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	60f8      	str	r0, [r7, #12]
 800ebd2:	60b9      	str	r1, [r7, #8]
 800ebd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2203      	movs	r2, #3
 800ebda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f007 fc8d 	bl	8016514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	68ba      	ldr	r2, [r7, #8]
 800ec14:	2100      	movs	r1, #0
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f007 fc7c 	bl	8016514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b082      	sub	sp, #8
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2204      	movs	r2, #4
 800ec32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec36:	2300      	movs	r3, #0
 800ec38:	2200      	movs	r2, #0
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f007 fc48 	bl	80164d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2205      	movs	r2, #5
 800ec58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	2200      	movs	r2, #0
 800ec60:	2100      	movs	r1, #0
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f007 fc56 	bl	8016514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ec7e:	79fb      	ldrb	r3, [r7, #7]
 800ec80:	4a08      	ldr	r2, [pc, #32]	; (800eca4 <disk_status+0x30>)
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4413      	add	r3, r2
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	79fa      	ldrb	r2, [r7, #7]
 800ec8c:	4905      	ldr	r1, [pc, #20]	; (800eca4 <disk_status+0x30>)
 800ec8e:	440a      	add	r2, r1
 800ec90:	7a12      	ldrb	r2, [r2, #8]
 800ec92:	4610      	mov	r0, r2
 800ec94:	4798      	blx	r3
 800ec96:	4603      	mov	r3, r0
 800ec98:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	20000358 	.word	0x20000358

0800eca8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	4603      	mov	r3, r0
 800ecb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	4a0d      	ldr	r2, [pc, #52]	; (800ecf0 <disk_initialize+0x48>)
 800ecba:	5cd3      	ldrb	r3, [r2, r3]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d111      	bne.n	800ece4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	4a0b      	ldr	r2, [pc, #44]	; (800ecf0 <disk_initialize+0x48>)
 800ecc4:	2101      	movs	r1, #1
 800ecc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ecc8:	79fb      	ldrb	r3, [r7, #7]
 800ecca:	4a09      	ldr	r2, [pc, #36]	; (800ecf0 <disk_initialize+0x48>)
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	79fa      	ldrb	r2, [r7, #7]
 800ecd6:	4906      	ldr	r1, [pc, #24]	; (800ecf0 <disk_initialize+0x48>)
 800ecd8:	440a      	add	r2, r1
 800ecda:	7a12      	ldrb	r2, [r2, #8]
 800ecdc:	4610      	mov	r0, r2
 800ecde:	4798      	blx	r3
 800ece0:	4603      	mov	r3, r0
 800ece2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	20000358 	.word	0x20000358

0800ecf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ecf4:	b590      	push	{r4, r7, lr}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	603b      	str	r3, [r7, #0]
 800ed00:	4603      	mov	r3, r0
 800ed02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ed04:	7bfb      	ldrb	r3, [r7, #15]
 800ed06:	4a0a      	ldr	r2, [pc, #40]	; (800ed30 <disk_read+0x3c>)
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	689c      	ldr	r4, [r3, #8]
 800ed10:	7bfb      	ldrb	r3, [r7, #15]
 800ed12:	4a07      	ldr	r2, [pc, #28]	; (800ed30 <disk_read+0x3c>)
 800ed14:	4413      	add	r3, r2
 800ed16:	7a18      	ldrb	r0, [r3, #8]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	68b9      	ldr	r1, [r7, #8]
 800ed1e:	47a0      	blx	r4
 800ed20:	4603      	mov	r3, r0
 800ed22:	75fb      	strb	r3, [r7, #23]
  return res;
 800ed24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	371c      	adds	r7, #28
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd90      	pop	{r4, r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20000358 	.word	0x20000358

0800ed34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ed34:	b590      	push	{r4, r7, lr}
 800ed36:	b087      	sub	sp, #28
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60b9      	str	r1, [r7, #8]
 800ed3c:	607a      	str	r2, [r7, #4]
 800ed3e:	603b      	str	r3, [r7, #0]
 800ed40:	4603      	mov	r3, r0
 800ed42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
 800ed46:	4a0a      	ldr	r2, [pc, #40]	; (800ed70 <disk_write+0x3c>)
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	4413      	add	r3, r2
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	68dc      	ldr	r4, [r3, #12]
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
 800ed52:	4a07      	ldr	r2, [pc, #28]	; (800ed70 <disk_write+0x3c>)
 800ed54:	4413      	add	r3, r2
 800ed56:	7a18      	ldrb	r0, [r3, #8]
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	47a0      	blx	r4
 800ed60:	4603      	mov	r3, r0
 800ed62:	75fb      	strb	r3, [r7, #23]
  return res;
 800ed64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	371c      	adds	r7, #28
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd90      	pop	{r4, r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	20000358 	.word	0x20000358

0800ed74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	603a      	str	r2, [r7, #0]
 800ed7e:	71fb      	strb	r3, [r7, #7]
 800ed80:	460b      	mov	r3, r1
 800ed82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ed84:	79fb      	ldrb	r3, [r7, #7]
 800ed86:	4a09      	ldr	r2, [pc, #36]	; (800edac <disk_ioctl+0x38>)
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	79fa      	ldrb	r2, [r7, #7]
 800ed92:	4906      	ldr	r1, [pc, #24]	; (800edac <disk_ioctl+0x38>)
 800ed94:	440a      	add	r2, r1
 800ed96:	7a10      	ldrb	r0, [r2, #8]
 800ed98:	79b9      	ldrb	r1, [r7, #6]
 800ed9a:	683a      	ldr	r2, [r7, #0]
 800ed9c:	4798      	blx	r3
 800ed9e:	4603      	mov	r3, r0
 800eda0:	73fb      	strb	r3, [r7, #15]
  return res;
 800eda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	20000358 	.word	0x20000358

0800edb0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	3301      	adds	r3, #1
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800edc0:	89fb      	ldrh	r3, [r7, #14]
 800edc2:	021b      	lsls	r3, r3, #8
 800edc4:	b21a      	sxth	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	b21b      	sxth	r3, r3
 800edcc:	4313      	orrs	r3, r2
 800edce:	b21b      	sxth	r3, r3
 800edd0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800edd2:	89fb      	ldrh	r3, [r7, #14]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3714      	adds	r7, #20
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	3303      	adds	r3, #3
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	021b      	lsls	r3, r3, #8
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	3202      	adds	r2, #2
 800edf8:	7812      	ldrb	r2, [r2, #0]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	021b      	lsls	r3, r3, #8
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	3201      	adds	r2, #1
 800ee06:	7812      	ldrb	r2, [r2, #0]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	021b      	lsls	r3, r3, #8
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	7812      	ldrb	r2, [r2, #0]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	60fb      	str	r3, [r7, #12]
	return rv;
 800ee18:	68fb      	ldr	r3, [r7, #12]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3714      	adds	r7, #20
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ee26:	b480      	push	{r7}
 800ee28:	b083      	sub	sp, #12
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	460b      	mov	r3, r1
 800ee30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	607a      	str	r2, [r7, #4]
 800ee38:	887a      	ldrh	r2, [r7, #2]
 800ee3a:	b2d2      	uxtb	r2, r2
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	887b      	ldrh	r3, [r7, #2]
 800ee40:	0a1b      	lsrs	r3, r3, #8
 800ee42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	1c5a      	adds	r2, r3, #1
 800ee48:	607a      	str	r2, [r7, #4]
 800ee4a:	887a      	ldrh	r2, [r7, #2]
 800ee4c:	b2d2      	uxtb	r2, r2
 800ee4e:	701a      	strb	r2, [r3, #0]
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr

0800ee5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	607a      	str	r2, [r7, #4]
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	b2d2      	uxtb	r2, r2
 800ee70:	701a      	strb	r2, [r3, #0]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	0a1b      	lsrs	r3, r3, #8
 800ee76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	607a      	str	r2, [r7, #4]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	b2d2      	uxtb	r2, r2
 800ee82:	701a      	strb	r2, [r3, #0]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	0a1b      	lsrs	r3, r3, #8
 800ee88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	b2d2      	uxtb	r2, r2
 800ee94:	701a      	strb	r2, [r3, #0]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	0a1b      	lsrs	r3, r3, #8
 800ee9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	1c5a      	adds	r2, r3, #1
 800eea0:	607a      	str	r2, [r7, #4]
 800eea2:	683a      	ldr	r2, [r7, #0]
 800eea4:	b2d2      	uxtb	r2, r2
 800eea6:	701a      	strb	r2, [r3, #0]
}
 800eea8:	bf00      	nop
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eeb4:	b480      	push	{r7}
 800eeb6:	b087      	sub	sp, #28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00d      	beq.n	800eeea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eece:	693a      	ldr	r2, [r7, #16]
 800eed0:	1c53      	adds	r3, r2, #1
 800eed2:	613b      	str	r3, [r7, #16]
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	1c59      	adds	r1, r3, #1
 800eed8:	6179      	str	r1, [r7, #20]
 800eeda:	7812      	ldrb	r2, [r2, #0]
 800eedc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	3b01      	subs	r3, #1
 800eee2:	607b      	str	r3, [r7, #4]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d1f1      	bne.n	800eece <mem_cpy+0x1a>
	}
}
 800eeea:	bf00      	nop
 800eeec:	371c      	adds	r7, #28
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr

0800eef6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eef6:	b480      	push	{r7}
 800eef8:	b087      	sub	sp, #28
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	60f8      	str	r0, [r7, #12]
 800eefe:	60b9      	str	r1, [r7, #8]
 800ef00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	1c5a      	adds	r2, r3, #1
 800ef0a:	617a      	str	r2, [r7, #20]
 800ef0c:	68ba      	ldr	r2, [r7, #8]
 800ef0e:	b2d2      	uxtb	r2, r2
 800ef10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	3b01      	subs	r3, #1
 800ef16:	607b      	str	r3, [r7, #4]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1f3      	bne.n	800ef06 <mem_set+0x10>
}
 800ef1e:	bf00      	nop
 800ef20:	371c      	adds	r7, #28
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ef2a:	b480      	push	{r7}
 800ef2c:	b089      	sub	sp, #36	; 0x24
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	60f8      	str	r0, [r7, #12]
 800ef32:	60b9      	str	r1, [r7, #8]
 800ef34:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	61fb      	str	r3, [r7, #28]
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	1c5a      	adds	r2, r3, #1
 800ef46:	61fa      	str	r2, [r7, #28]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	1c5a      	adds	r2, r3, #1
 800ef50:	61ba      	str	r2, [r7, #24]
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	1acb      	subs	r3, r1, r3
 800ef56:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	607b      	str	r3, [r7, #4]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d002      	beq.n	800ef6a <mem_cmp+0x40>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d0eb      	beq.n	800ef42 <mem_cmp+0x18>

	return r;
 800ef6a:	697b      	ldr	r3, [r7, #20]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3724      	adds	r7, #36	; 0x24
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ef82:	e002      	b.n	800ef8a <chk_chr+0x12>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	3301      	adds	r3, #1
 800ef88:	607b      	str	r3, [r7, #4]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d005      	beq.n	800ef9e <chk_chr+0x26>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	461a      	mov	r2, r3
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d1f2      	bne.n	800ef84 <chk_chr+0xc>
	return *str;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	781b      	ldrb	r3, [r3, #0]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	370c      	adds	r7, #12
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr

0800efae <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b082      	sub	sp, #8
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d009      	beq.n	800efd0 <lock_fs+0x22>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f002 fd8d 	bl	8011ae0 <ff_req_grant>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d001      	beq.n	800efd0 <lock_fs+0x22>
 800efcc:	2301      	movs	r3, #1
 800efce:	e000      	b.n	800efd2 <lock_fs+0x24>
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	460b      	mov	r3, r1
 800efe4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00d      	beq.n	800f008 <unlock_fs+0x2e>
 800efec:	78fb      	ldrb	r3, [r7, #3]
 800efee:	2b0c      	cmp	r3, #12
 800eff0:	d00a      	beq.n	800f008 <unlock_fs+0x2e>
 800eff2:	78fb      	ldrb	r3, [r7, #3]
 800eff4:	2b0b      	cmp	r3, #11
 800eff6:	d007      	beq.n	800f008 <unlock_fs+0x2e>
 800eff8:	78fb      	ldrb	r3, [r7, #3]
 800effa:	2b0f      	cmp	r3, #15
 800effc:	d004      	beq.n	800f008 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	4618      	mov	r0, r3
 800f004:	f002 fd81 	bl	8011b0a <ff_rel_grant>
	}
}
 800f008:	bf00      	nop
 800f00a:	3708      	adds	r7, #8
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f01a:	2300      	movs	r3, #0
 800f01c:	60bb      	str	r3, [r7, #8]
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	e029      	b.n	800f078 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f024:	4a27      	ldr	r2, [pc, #156]	; (800f0c4 <chk_lock+0xb4>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	4413      	add	r3, r2
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d01d      	beq.n	800f06e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f032:	4a24      	ldr	r2, [pc, #144]	; (800f0c4 <chk_lock+0xb4>)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	011b      	lsls	r3, r3, #4
 800f038:	4413      	add	r3, r2
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	429a      	cmp	r2, r3
 800f042:	d116      	bne.n	800f072 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f044:	4a1f      	ldr	r2, [pc, #124]	; (800f0c4 <chk_lock+0xb4>)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	011b      	lsls	r3, r3, #4
 800f04a:	4413      	add	r3, r2
 800f04c:	3304      	adds	r3, #4
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f054:	429a      	cmp	r2, r3
 800f056:	d10c      	bne.n	800f072 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f058:	4a1a      	ldr	r2, [pc, #104]	; (800f0c4 <chk_lock+0xb4>)
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	011b      	lsls	r3, r3, #4
 800f05e:	4413      	add	r3, r2
 800f060:	3308      	adds	r3, #8
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f068:	429a      	cmp	r2, r3
 800f06a:	d102      	bne.n	800f072 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f06c:	e007      	b.n	800f07e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f06e:	2301      	movs	r3, #1
 800f070:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3301      	adds	r3, #1
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d9d2      	bls.n	800f024 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2b02      	cmp	r3, #2
 800f082:	d109      	bne.n	800f098 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d102      	bne.n	800f090 <chk_lock+0x80>
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b02      	cmp	r3, #2
 800f08e:	d101      	bne.n	800f094 <chk_lock+0x84>
 800f090:	2300      	movs	r3, #0
 800f092:	e010      	b.n	800f0b6 <chk_lock+0xa6>
 800f094:	2312      	movs	r3, #18
 800f096:	e00e      	b.n	800f0b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d108      	bne.n	800f0b0 <chk_lock+0xa0>
 800f09e:	4a09      	ldr	r2, [pc, #36]	; (800f0c4 <chk_lock+0xb4>)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	011b      	lsls	r3, r3, #4
 800f0a4:	4413      	add	r3, r2
 800f0a6:	330c      	adds	r3, #12
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0ae:	d101      	bne.n	800f0b4 <chk_lock+0xa4>
 800f0b0:	2310      	movs	r3, #16
 800f0b2:	e000      	b.n	800f0b6 <chk_lock+0xa6>
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3714      	adds	r7, #20
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	20000338 	.word	0x20000338

0800f0c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	607b      	str	r3, [r7, #4]
 800f0d2:	e002      	b.n	800f0da <enq_lock+0x12>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	607b      	str	r3, [r7, #4]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d806      	bhi.n	800f0ee <enq_lock+0x26>
 800f0e0:	4a09      	ldr	r2, [pc, #36]	; (800f108 <enq_lock+0x40>)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	011b      	lsls	r3, r3, #4
 800f0e6:	4413      	add	r3, r2
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1f2      	bne.n	800f0d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	bf14      	ite	ne
 800f0f4:	2301      	movne	r3, #1
 800f0f6:	2300      	moveq	r3, #0
 800f0f8:	b2db      	uxtb	r3, r3
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	370c      	adds	r7, #12
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	20000338 	.word	0x20000338

0800f10c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f116:	2300      	movs	r3, #0
 800f118:	60fb      	str	r3, [r7, #12]
 800f11a:	e01f      	b.n	800f15c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f11c:	4a41      	ldr	r2, [pc, #260]	; (800f224 <inc_lock+0x118>)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	011b      	lsls	r3, r3, #4
 800f122:	4413      	add	r3, r2
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d113      	bne.n	800f156 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f12e:	4a3d      	ldr	r2, [pc, #244]	; (800f224 <inc_lock+0x118>)
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	011b      	lsls	r3, r3, #4
 800f134:	4413      	add	r3, r2
 800f136:	3304      	adds	r3, #4
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f13e:	429a      	cmp	r2, r3
 800f140:	d109      	bne.n	800f156 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f142:	4a38      	ldr	r2, [pc, #224]	; (800f224 <inc_lock+0x118>)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	011b      	lsls	r3, r3, #4
 800f148:	4413      	add	r3, r2
 800f14a:	3308      	adds	r3, #8
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f152:	429a      	cmp	r2, r3
 800f154:	d006      	beq.n	800f164 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3301      	adds	r3, #1
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d9dc      	bls.n	800f11c <inc_lock+0x10>
 800f162:	e000      	b.n	800f166 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f164:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2b02      	cmp	r3, #2
 800f16a:	d132      	bne.n	800f1d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f16c:	2300      	movs	r3, #0
 800f16e:	60fb      	str	r3, [r7, #12]
 800f170:	e002      	b.n	800f178 <inc_lock+0x6c>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	3301      	adds	r3, #1
 800f176:	60fb      	str	r3, [r7, #12]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d806      	bhi.n	800f18c <inc_lock+0x80>
 800f17e:	4a29      	ldr	r2, [pc, #164]	; (800f224 <inc_lock+0x118>)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	011b      	lsls	r3, r3, #4
 800f184:	4413      	add	r3, r2
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1f2      	bne.n	800f172 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d101      	bne.n	800f196 <inc_lock+0x8a>
 800f192:	2300      	movs	r3, #0
 800f194:	e040      	b.n	800f218 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	4922      	ldr	r1, [pc, #136]	; (800f224 <inc_lock+0x118>)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	011b      	lsls	r3, r3, #4
 800f1a0:	440b      	add	r3, r1
 800f1a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689a      	ldr	r2, [r3, #8]
 800f1a8:	491e      	ldr	r1, [pc, #120]	; (800f224 <inc_lock+0x118>)
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	011b      	lsls	r3, r3, #4
 800f1ae:	440b      	add	r3, r1
 800f1b0:	3304      	adds	r3, #4
 800f1b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	695a      	ldr	r2, [r3, #20]
 800f1b8:	491a      	ldr	r1, [pc, #104]	; (800f224 <inc_lock+0x118>)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	011b      	lsls	r3, r3, #4
 800f1be:	440b      	add	r3, r1
 800f1c0:	3308      	adds	r3, #8
 800f1c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f1c4:	4a17      	ldr	r2, [pc, #92]	; (800f224 <inc_lock+0x118>)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	011b      	lsls	r3, r3, #4
 800f1ca:	4413      	add	r3, r2
 800f1cc:	330c      	adds	r3, #12
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d009      	beq.n	800f1ec <inc_lock+0xe0>
 800f1d8:	4a12      	ldr	r2, [pc, #72]	; (800f224 <inc_lock+0x118>)
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	011b      	lsls	r3, r3, #4
 800f1de:	4413      	add	r3, r2
 800f1e0:	330c      	adds	r3, #12
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <inc_lock+0xe0>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	e015      	b.n	800f218 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d108      	bne.n	800f204 <inc_lock+0xf8>
 800f1f2:	4a0c      	ldr	r2, [pc, #48]	; (800f224 <inc_lock+0x118>)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	011b      	lsls	r3, r3, #4
 800f1f8:	4413      	add	r3, r2
 800f1fa:	330c      	adds	r3, #12
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	3301      	adds	r3, #1
 800f200:	b29a      	uxth	r2, r3
 800f202:	e001      	b.n	800f208 <inc_lock+0xfc>
 800f204:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f208:	4906      	ldr	r1, [pc, #24]	; (800f224 <inc_lock+0x118>)
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	011b      	lsls	r3, r3, #4
 800f20e:	440b      	add	r3, r1
 800f210:	330c      	adds	r3, #12
 800f212:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	3301      	adds	r3, #1
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3714      	adds	r7, #20
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr
 800f224:	20000338 	.word	0x20000338

0800f228 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	3b01      	subs	r3, #1
 800f234:	607b      	str	r3, [r7, #4]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d825      	bhi.n	800f288 <dec_lock+0x60>
		n = Files[i].ctr;
 800f23c:	4a17      	ldr	r2, [pc, #92]	; (800f29c <dec_lock+0x74>)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	011b      	lsls	r3, r3, #4
 800f242:	4413      	add	r3, r2
 800f244:	330c      	adds	r3, #12
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f24a:	89fb      	ldrh	r3, [r7, #14]
 800f24c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f250:	d101      	bne.n	800f256 <dec_lock+0x2e>
 800f252:	2300      	movs	r3, #0
 800f254:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f256:	89fb      	ldrh	r3, [r7, #14]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <dec_lock+0x3a>
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	3b01      	subs	r3, #1
 800f260:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f262:	4a0e      	ldr	r2, [pc, #56]	; (800f29c <dec_lock+0x74>)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	011b      	lsls	r3, r3, #4
 800f268:	4413      	add	r3, r2
 800f26a:	330c      	adds	r3, #12
 800f26c:	89fa      	ldrh	r2, [r7, #14]
 800f26e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f270:	89fb      	ldrh	r3, [r7, #14]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d105      	bne.n	800f282 <dec_lock+0x5a>
 800f276:	4a09      	ldr	r2, [pc, #36]	; (800f29c <dec_lock+0x74>)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	011b      	lsls	r3, r3, #4
 800f27c:	4413      	add	r3, r2
 800f27e:	2200      	movs	r2, #0
 800f280:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	737b      	strb	r3, [r7, #13]
 800f286:	e001      	b.n	800f28c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f288:	2302      	movs	r3, #2
 800f28a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f28c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	20000338 	.word	0x20000338

0800f2a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60fb      	str	r3, [r7, #12]
 800f2ac:	e010      	b.n	800f2d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f2ae:	4a0d      	ldr	r2, [pc, #52]	; (800f2e4 <clear_lock+0x44>)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	011b      	lsls	r3, r3, #4
 800f2b4:	4413      	add	r3, r2
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d105      	bne.n	800f2ca <clear_lock+0x2a>
 800f2be:	4a09      	ldr	r2, [pc, #36]	; (800f2e4 <clear_lock+0x44>)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	011b      	lsls	r3, r3, #4
 800f2c4:	4413      	add	r3, r2
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d9eb      	bls.n	800f2ae <clear_lock+0xe>
	}
}
 800f2d6:	bf00      	nop
 800f2d8:	3714      	adds	r7, #20
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	20000338 	.word	0x20000338

0800f2e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b086      	sub	sp, #24
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	78db      	ldrb	r3, [r3, #3]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d034      	beq.n	800f366 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f300:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	7858      	ldrb	r0, [r3, #1]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f30c:	2301      	movs	r3, #1
 800f30e:	697a      	ldr	r2, [r7, #20]
 800f310:	f7ff fd10 	bl	800ed34 <disk_write>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d002      	beq.n	800f320 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	73fb      	strb	r3, [r7, #15]
 800f31e:	e022      	b.n	800f366 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32a:	697a      	ldr	r2, [r7, #20]
 800f32c:	1ad2      	subs	r2, r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	69db      	ldr	r3, [r3, #28]
 800f332:	429a      	cmp	r2, r3
 800f334:	d217      	bcs.n	800f366 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	789b      	ldrb	r3, [r3, #2]
 800f33a:	613b      	str	r3, [r7, #16]
 800f33c:	e010      	b.n	800f360 <sync_window+0x78>
					wsect += fs->fsize;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	69db      	ldr	r3, [r3, #28]
 800f342:	697a      	ldr	r2, [r7, #20]
 800f344:	4413      	add	r3, r2
 800f346:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	7858      	ldrb	r0, [r3, #1]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f352:	2301      	movs	r3, #1
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	f7ff fced 	bl	800ed34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	613b      	str	r3, [r7, #16]
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d8eb      	bhi.n	800f33e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f366:	7bfb      	ldrb	r3, [r7, #15]
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	429a      	cmp	r2, r3
 800f386:	d01b      	beq.n	800f3c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff ffad 	bl	800f2e8 <sync_window>
 800f38e:	4603      	mov	r3, r0
 800f390:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f392:	7bfb      	ldrb	r3, [r7, #15]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d113      	bne.n	800f3c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	7858      	ldrb	r0, [r3, #1]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	683a      	ldr	r2, [r7, #0]
 800f3a6:	f7ff fca5 	bl	800ecf4 <disk_read>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d004      	beq.n	800f3ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
	...

0800f3cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff ff87 	bl	800f2e8 <sync_window>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f3de:	7bfb      	ldrb	r3, [r7, #15]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d158      	bne.n	800f496 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	2b03      	cmp	r3, #3
 800f3ea:	d148      	bne.n	800f47e <sync_fs+0xb2>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	791b      	ldrb	r3, [r3, #4]
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d144      	bne.n	800f47e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	3334      	adds	r3, #52	; 0x34
 800f3f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7ff fd79 	bl	800eef6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	3334      	adds	r3, #52	; 0x34
 800f408:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f40c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff fd08 	bl	800ee26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	3334      	adds	r3, #52	; 0x34
 800f41a:	4921      	ldr	r1, [pc, #132]	; (800f4a0 <sync_fs+0xd4>)
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff fd1d 	bl	800ee5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3334      	adds	r3, #52	; 0x34
 800f426:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f42a:	491e      	ldr	r1, [pc, #120]	; (800f4a4 <sync_fs+0xd8>)
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7ff fd15 	bl	800ee5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3334      	adds	r3, #52	; 0x34
 800f436:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	695b      	ldr	r3, [r3, #20]
 800f43e:	4619      	mov	r1, r3
 800f440:	4610      	mov	r0, r2
 800f442:	f7ff fd0b 	bl	800ee5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3334      	adds	r3, #52	; 0x34
 800f44a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f7ff fd01 	bl	800ee5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	7858      	ldrb	r0, [r3, #1]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f472:	2301      	movs	r3, #1
 800f474:	f7ff fc5e 	bl	800ed34 <disk_write>
			fs->fsi_flag = 0;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	785b      	ldrb	r3, [r3, #1]
 800f482:	2200      	movs	r2, #0
 800f484:	2100      	movs	r1, #0
 800f486:	4618      	mov	r0, r3
 800f488:	f7ff fc74 	bl	800ed74 <disk_ioctl>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <sync_fs+0xca>
 800f492:	2301      	movs	r3, #1
 800f494:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f496:	7bfb      	ldrb	r3, [r7, #15]
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	41615252 	.word	0x41615252
 800f4a4:	61417272 	.word	0x61417272

0800f4a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	3b02      	subs	r3, #2
 800f4b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	699b      	ldr	r3, [r3, #24]
 800f4bc:	3b02      	subs	r3, #2
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d301      	bcc.n	800f4c8 <clust2sect+0x20>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	e008      	b.n	800f4da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	895b      	ldrh	r3, [r3, #10]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	fb03 f202 	mul.w	r2, r3, r2
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d8:	4413      	add	r3, r2
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	370c      	adds	r7, #12
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b086      	sub	sp, #24
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
 800f4ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d904      	bls.n	800f506 <get_fat+0x20>
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	699b      	ldr	r3, [r3, #24]
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	429a      	cmp	r2, r3
 800f504:	d302      	bcc.n	800f50c <get_fat+0x26>
		val = 1;	/* Internal error */
 800f506:	2301      	movs	r3, #1
 800f508:	617b      	str	r3, [r7, #20]
 800f50a:	e08c      	b.n	800f626 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295
 800f510:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	2b02      	cmp	r3, #2
 800f518:	d045      	beq.n	800f5a6 <get_fat+0xc0>
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	d05d      	beq.n	800f5da <get_fat+0xf4>
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d177      	bne.n	800f612 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	60fb      	str	r3, [r7, #12]
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	085b      	lsrs	r3, r3, #1
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	4413      	add	r3, r2
 800f52e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	0a5b      	lsrs	r3, r3, #9
 800f538:	4413      	add	r3, r2
 800f53a:	4619      	mov	r1, r3
 800f53c:	6938      	ldr	r0, [r7, #16]
 800f53e:	f7ff ff17 	bl	800f370 <move_window>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d167      	bne.n	800f618 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	1c5a      	adds	r2, r3, #1
 800f54c:	60fa      	str	r2, [r7, #12]
 800f54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f552:	693a      	ldr	r2, [r7, #16]
 800f554:	4413      	add	r3, r2
 800f556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f55a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	0a5b      	lsrs	r3, r3, #9
 800f564:	4413      	add	r3, r2
 800f566:	4619      	mov	r1, r3
 800f568:	6938      	ldr	r0, [r7, #16]
 800f56a:	f7ff ff01 	bl	800f370 <move_window>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	d153      	bne.n	800f61c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	4413      	add	r3, r2
 800f57e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f582:	021b      	lsls	r3, r3, #8
 800f584:	461a      	mov	r2, r3
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	4313      	orrs	r3, r2
 800f58a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d002      	beq.n	800f59c <get_fat+0xb6>
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	091b      	lsrs	r3, r3, #4
 800f59a:	e002      	b.n	800f5a2 <get_fat+0xbc>
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5a2:	617b      	str	r3, [r7, #20]
			break;
 800f5a4:	e03f      	b.n	800f626 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	0a1b      	lsrs	r3, r3, #8
 800f5ae:	4413      	add	r3, r2
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6938      	ldr	r0, [r7, #16]
 800f5b4:	f7ff fedc 	bl	800f370 <move_window>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d130      	bne.n	800f620 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	005b      	lsls	r3, r3, #1
 800f5c8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f5cc:	4413      	add	r3, r2
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7ff fbee 	bl	800edb0 <ld_word>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	617b      	str	r3, [r7, #20]
			break;
 800f5d8:	e025      	b.n	800f626 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	09db      	lsrs	r3, r3, #7
 800f5e2:	4413      	add	r3, r2
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	6938      	ldr	r0, [r7, #16]
 800f5e8:	f7ff fec2 	bl	800f370 <move_window>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d118      	bne.n	800f624 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f600:	4413      	add	r3, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f7ff fbec 	bl	800ede0 <ld_dword>
 800f608:	4603      	mov	r3, r0
 800f60a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f60e:	617b      	str	r3, [r7, #20]
			break;
 800f610:	e009      	b.n	800f626 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f612:	2301      	movs	r3, #1
 800f614:	617b      	str	r3, [r7, #20]
 800f616:	e006      	b.n	800f626 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f618:	bf00      	nop
 800f61a:	e004      	b.n	800f626 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f61c:	bf00      	nop
 800f61e:	e002      	b.n	800f626 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f620:	bf00      	nop
 800f622:	e000      	b.n	800f626 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f624:	bf00      	nop
		}
	}

	return val;
 800f626:	697b      	ldr	r3, [r7, #20]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3718      	adds	r7, #24
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f630:	b590      	push	{r4, r7, lr}
 800f632:	b089      	sub	sp, #36	; 0x24
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f63c:	2302      	movs	r3, #2
 800f63e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	2b01      	cmp	r3, #1
 800f644:	f240 80d6 	bls.w	800f7f4 <put_fat+0x1c4>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	699b      	ldr	r3, [r3, #24]
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	429a      	cmp	r2, r3
 800f650:	f080 80d0 	bcs.w	800f7f4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d073      	beq.n	800f744 <put_fat+0x114>
 800f65c:	2b03      	cmp	r3, #3
 800f65e:	f000 8091 	beq.w	800f784 <put_fat+0x154>
 800f662:	2b01      	cmp	r3, #1
 800f664:	f040 80c6 	bne.w	800f7f4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	61bb      	str	r3, [r7, #24]
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	085b      	lsrs	r3, r3, #1
 800f670:	69ba      	ldr	r2, [r7, #24]
 800f672:	4413      	add	r3, r2
 800f674:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	0a5b      	lsrs	r3, r3, #9
 800f67e:	4413      	add	r3, r2
 800f680:	4619      	mov	r1, r3
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f7ff fe74 	bl	800f370 <move_window>
 800f688:	4603      	mov	r3, r0
 800f68a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f68c:	7ffb      	ldrb	r3, [r7, #31]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f040 80a9 	bne.w	800f7e6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	1c59      	adds	r1, r3, #1
 800f69e:	61b9      	str	r1, [r7, #24]
 800f6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6a4:	4413      	add	r3, r2
 800f6a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00d      	beq.n	800f6ce <put_fat+0x9e>
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	b25b      	sxtb	r3, r3
 800f6b8:	f003 030f 	and.w	r3, r3, #15
 800f6bc:	b25a      	sxtb	r2, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	b25b      	sxtb	r3, r3
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	b25b      	sxtb	r3, r3
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	e001      	b.n	800f6d2 <put_fat+0xa2>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	0a5b      	lsrs	r3, r3, #9
 800f6e4:	4413      	add	r3, r2
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f7ff fe41 	bl	800f370 <move_window>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f6f2:	7ffb      	ldrb	r3, [r7, #31]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d178      	bne.n	800f7ea <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f704:	4413      	add	r3, r2
 800f706:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d003      	beq.n	800f71a <put_fat+0xea>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	091b      	lsrs	r3, r3, #4
 800f716:	b2db      	uxtb	r3, r3
 800f718:	e00e      	b.n	800f738 <put_fat+0x108>
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	b25b      	sxtb	r3, r3
 800f720:	f023 030f 	bic.w	r3, r3, #15
 800f724:	b25a      	sxtb	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	0a1b      	lsrs	r3, r3, #8
 800f72a:	b25b      	sxtb	r3, r3
 800f72c:	f003 030f 	and.w	r3, r3, #15
 800f730:	b25b      	sxtb	r3, r3
 800f732:	4313      	orrs	r3, r2
 800f734:	b25b      	sxtb	r3, r3
 800f736:	b2db      	uxtb	r3, r3
 800f738:	697a      	ldr	r2, [r7, #20]
 800f73a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2201      	movs	r2, #1
 800f740:	70da      	strb	r2, [r3, #3]
			break;
 800f742:	e057      	b.n	800f7f4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	0a1b      	lsrs	r3, r3, #8
 800f74c:	4413      	add	r3, r2
 800f74e:	4619      	mov	r1, r3
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7ff fe0d 	bl	800f370 <move_window>
 800f756:	4603      	mov	r3, r0
 800f758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f75a:	7ffb      	ldrb	r3, [r7, #31]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d146      	bne.n	800f7ee <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f76e:	4413      	add	r3, r2
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	b292      	uxth	r2, r2
 800f774:	4611      	mov	r1, r2
 800f776:	4618      	mov	r0, r3
 800f778:	f7ff fb55 	bl	800ee26 <st_word>
			fs->wflag = 1;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2201      	movs	r2, #1
 800f780:	70da      	strb	r2, [r3, #3]
			break;
 800f782:	e037      	b.n	800f7f4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	09db      	lsrs	r3, r3, #7
 800f78c:	4413      	add	r3, r2
 800f78e:	4619      	mov	r1, r3
 800f790:	68f8      	ldr	r0, [r7, #12]
 800f792:	f7ff fded 	bl	800f370 <move_window>
 800f796:	4603      	mov	r3, r0
 800f798:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f79a:	7ffb      	ldrb	r3, [r7, #31]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d128      	bne.n	800f7f2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f7b4:	4413      	add	r3, r2
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7ff fb12 	bl	800ede0 <ld_dword>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f7c2:	4323      	orrs	r3, r4
 800f7c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f7d4:	4413      	add	r3, r2
 800f7d6:	6879      	ldr	r1, [r7, #4]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff fb3f 	bl	800ee5c <st_dword>
			fs->wflag = 1;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	70da      	strb	r2, [r3, #3]
			break;
 800f7e4:	e006      	b.n	800f7f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f7e6:	bf00      	nop
 800f7e8:	e004      	b.n	800f7f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f7ea:	bf00      	nop
 800f7ec:	e002      	b.n	800f7f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f7ee:	bf00      	nop
 800f7f0:	e000      	b.n	800f7f4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800f7f2:	bf00      	nop
		}
	}
	return res;
 800f7f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3724      	adds	r7, #36	; 0x24
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd90      	pop	{r4, r7, pc}

0800f7fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b088      	sub	sp, #32
 800f802:	af00      	add	r7, sp, #0
 800f804:	60f8      	str	r0, [r7, #12]
 800f806:	60b9      	str	r1, [r7, #8]
 800f808:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	2b01      	cmp	r3, #1
 800f818:	d904      	bls.n	800f824 <remove_chain+0x26>
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	699b      	ldr	r3, [r3, #24]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	429a      	cmp	r2, r3
 800f822:	d301      	bcc.n	800f828 <remove_chain+0x2a>
 800f824:	2302      	movs	r3, #2
 800f826:	e04b      	b.n	800f8c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00c      	beq.n	800f848 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f82e:	f04f 32ff 	mov.w	r2, #4294967295
 800f832:	6879      	ldr	r1, [r7, #4]
 800f834:	69b8      	ldr	r0, [r7, #24]
 800f836:	f7ff fefb 	bl	800f630 <put_fat>
 800f83a:	4603      	mov	r3, r0
 800f83c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f83e:	7ffb      	ldrb	r3, [r7, #31]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <remove_chain+0x4a>
 800f844:	7ffb      	ldrb	r3, [r7, #31]
 800f846:	e03b      	b.n	800f8c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f848:	68b9      	ldr	r1, [r7, #8]
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	f7ff fe4b 	bl	800f4e6 <get_fat>
 800f850:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d031      	beq.n	800f8bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d101      	bne.n	800f862 <remove_chain+0x64>
 800f85e:	2302      	movs	r3, #2
 800f860:	e02e      	b.n	800f8c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f868:	d101      	bne.n	800f86e <remove_chain+0x70>
 800f86a:	2301      	movs	r3, #1
 800f86c:	e028      	b.n	800f8c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f86e:	2200      	movs	r2, #0
 800f870:	68b9      	ldr	r1, [r7, #8]
 800f872:	69b8      	ldr	r0, [r7, #24]
 800f874:	f7ff fedc 	bl	800f630 <put_fat>
 800f878:	4603      	mov	r3, r0
 800f87a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f87c:	7ffb      	ldrb	r3, [r7, #31]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d001      	beq.n	800f886 <remove_chain+0x88>
 800f882:	7ffb      	ldrb	r3, [r7, #31]
 800f884:	e01c      	b.n	800f8c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	695a      	ldr	r2, [r3, #20]
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	699b      	ldr	r3, [r3, #24]
 800f88e:	3b02      	subs	r3, #2
 800f890:	429a      	cmp	r2, r3
 800f892:	d20b      	bcs.n	800f8ac <remove_chain+0xae>
			fs->free_clst++;
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	695b      	ldr	r3, [r3, #20]
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	791b      	ldrb	r3, [r3, #4]
 800f8a2:	f043 0301 	orr.w	r3, r3, #1
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	699b      	ldr	r3, [r3, #24]
 800f8b4:	68ba      	ldr	r2, [r7, #8]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d3c6      	bcc.n	800f848 <remove_chain+0x4a>
 800f8ba:	e000      	b.n	800f8be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f8bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f8be:	2300      	movs	r3, #0
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3720      	adds	r7, #32
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b088      	sub	sp, #32
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10d      	bne.n	800f8fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	691b      	ldr	r3, [r3, #16]
 800f8e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d004      	beq.n	800f8f4 <create_chain+0x2c>
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	69ba      	ldr	r2, [r7, #24]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d31b      	bcc.n	800f92c <create_chain+0x64>
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	61bb      	str	r3, [r7, #24]
 800f8f8:	e018      	b.n	800f92c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f8fa:	6839      	ldr	r1, [r7, #0]
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f7ff fdf2 	bl	800f4e6 <get_fat>
 800f902:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d801      	bhi.n	800f90e <create_chain+0x46>
 800f90a:	2301      	movs	r3, #1
 800f90c:	e070      	b.n	800f9f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f914:	d101      	bne.n	800f91a <create_chain+0x52>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	e06a      	b.n	800f9f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	429a      	cmp	r2, r3
 800f922:	d201      	bcs.n	800f928 <create_chain+0x60>
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	e063      	b.n	800f9f0 <create_chain+0x128>
		scl = clst;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	3301      	adds	r3, #1
 800f934:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	699b      	ldr	r3, [r3, #24]
 800f93a:	69fa      	ldr	r2, [r7, #28]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d307      	bcc.n	800f950 <create_chain+0x88>
				ncl = 2;
 800f940:	2302      	movs	r3, #2
 800f942:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f944:	69fa      	ldr	r2, [r7, #28]
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d901      	bls.n	800f950 <create_chain+0x88>
 800f94c:	2300      	movs	r3, #0
 800f94e:	e04f      	b.n	800f9f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f950:	69f9      	ldr	r1, [r7, #28]
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff fdc7 	bl	800f4e6 <get_fat>
 800f958:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00e      	beq.n	800f97e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d003      	beq.n	800f96e <create_chain+0xa6>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f96c:	d101      	bne.n	800f972 <create_chain+0xaa>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	e03e      	b.n	800f9f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f972:	69fa      	ldr	r2, [r7, #28]
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	429a      	cmp	r2, r3
 800f978:	d1da      	bne.n	800f930 <create_chain+0x68>
 800f97a:	2300      	movs	r3, #0
 800f97c:	e038      	b.n	800f9f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f97e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f980:	f04f 32ff 	mov.w	r2, #4294967295
 800f984:	69f9      	ldr	r1, [r7, #28]
 800f986:	6938      	ldr	r0, [r7, #16]
 800f988:	f7ff fe52 	bl	800f630 <put_fat>
 800f98c:	4603      	mov	r3, r0
 800f98e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f990:	7dfb      	ldrb	r3, [r7, #23]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d109      	bne.n	800f9aa <create_chain+0xe2>
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d006      	beq.n	800f9aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f99c:	69fa      	ldr	r2, [r7, #28]
 800f99e:	6839      	ldr	r1, [r7, #0]
 800f9a0:	6938      	ldr	r0, [r7, #16]
 800f9a2:	f7ff fe45 	bl	800f630 <put_fat>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d116      	bne.n	800f9de <create_chain+0x116>
		fs->last_clst = ncl;
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	69fa      	ldr	r2, [r7, #28]
 800f9b4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	695a      	ldr	r2, [r3, #20]
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	699b      	ldr	r3, [r3, #24]
 800f9be:	3b02      	subs	r3, #2
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d804      	bhi.n	800f9ce <create_chain+0x106>
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	695b      	ldr	r3, [r3, #20]
 800f9c8:	1e5a      	subs	r2, r3, #1
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	791b      	ldrb	r3, [r3, #4]
 800f9d2:	f043 0301 	orr.w	r3, r3, #1
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	711a      	strb	r2, [r3, #4]
 800f9dc:	e007      	b.n	800f9ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f9de:	7dfb      	ldrb	r3, [r7, #23]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d102      	bne.n	800f9ea <create_chain+0x122>
 800f9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e8:	e000      	b.n	800f9ec <create_chain+0x124>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f9ee:	69fb      	ldr	r3, [r7, #28]
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3720      	adds	r7, #32
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b087      	sub	sp, #28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0c:	3304      	adds	r3, #4
 800fa0e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	0a5b      	lsrs	r3, r3, #9
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	8952      	ldrh	r2, [r2, #10]
 800fa18:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	1d1a      	adds	r2, r3, #4
 800fa22:	613a      	str	r2, [r7, #16]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <clmt_clust+0x3a>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	e010      	b.n	800fa54 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d307      	bcc.n	800fa4a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	617b      	str	r3, [r7, #20]
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	3304      	adds	r3, #4
 800fa46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fa48:	e7e9      	b.n	800fa1e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800fa4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	4413      	add	r3, r2
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	371c      	adds	r7, #28
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa76:	d204      	bcs.n	800fa82 <dir_sdi+0x22>
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	f003 031f 	and.w	r3, r3, #31
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d001      	beq.n	800fa86 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fa82:	2302      	movs	r3, #2
 800fa84:	e063      	b.n	800fb4e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d106      	bne.n	800faa6 <dir_sdi+0x46>
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d902      	bls.n	800faa6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d10c      	bne.n	800fac6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	095b      	lsrs	r3, r3, #5
 800fab0:	693a      	ldr	r2, [r7, #16]
 800fab2:	8912      	ldrh	r2, [r2, #8]
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d301      	bcc.n	800fabc <dir_sdi+0x5c>
 800fab8:	2302      	movs	r3, #2
 800faba:	e048      	b.n	800fb4e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	61da      	str	r2, [r3, #28]
 800fac4:	e029      	b.n	800fb1a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	895b      	ldrh	r3, [r3, #10]
 800faca:	025b      	lsls	r3, r3, #9
 800facc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800face:	e019      	b.n	800fb04 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6979      	ldr	r1, [r7, #20]
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7ff fd06 	bl	800f4e6 <get_fat>
 800fada:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae2:	d101      	bne.n	800fae8 <dir_sdi+0x88>
 800fae4:	2301      	movs	r3, #1
 800fae6:	e032      	b.n	800fb4e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	2b01      	cmp	r3, #1
 800faec:	d904      	bls.n	800faf8 <dir_sdi+0x98>
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	699b      	ldr	r3, [r3, #24]
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d301      	bcc.n	800fafc <dir_sdi+0x9c>
 800faf8:	2302      	movs	r3, #2
 800fafa:	e028      	b.n	800fb4e <dir_sdi+0xee>
			ofs -= csz;
 800fafc:	683a      	ldr	r2, [r7, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d2e1      	bcs.n	800fad0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800fb0c:	6979      	ldr	r1, [r7, #20]
 800fb0e:	6938      	ldr	r0, [r7, #16]
 800fb10:	f7ff fcca 	bl	800f4a8 <clust2sect>
 800fb14:	4602      	mov	r2, r0
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	697a      	ldr	r2, [r7, #20]
 800fb1e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	69db      	ldr	r3, [r3, #28]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d101      	bne.n	800fb2c <dir_sdi+0xcc>
 800fb28:	2302      	movs	r3, #2
 800fb2a:	e010      	b.n	800fb4e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	69da      	ldr	r2, [r3, #28]
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	0a5b      	lsrs	r3, r3, #9
 800fb34:	441a      	add	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb46:	441a      	add	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3718      	adds	r7, #24
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}

0800fb56 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b086      	sub	sp, #24
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	695b      	ldr	r3, [r3, #20]
 800fb6a:	3320      	adds	r3, #32
 800fb6c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	69db      	ldr	r3, [r3, #28]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d003      	beq.n	800fb7e <dir_next+0x28>
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb7c:	d301      	bcc.n	800fb82 <dir_next+0x2c>
 800fb7e:	2304      	movs	r3, #4
 800fb80:	e0aa      	b.n	800fcd8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f040 8098 	bne.w	800fcbe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	69db      	ldr	r3, [r3, #28]
 800fb92:	1c5a      	adds	r2, r3, #1
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	699b      	ldr	r3, [r3, #24]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10b      	bne.n	800fbb8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	095b      	lsrs	r3, r3, #5
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	8912      	ldrh	r2, [r2, #8]
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	f0c0 8088 	bcc.w	800fcbe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	61da      	str	r2, [r3, #28]
 800fbb4:	2304      	movs	r3, #4
 800fbb6:	e08f      	b.n	800fcd8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	0a5b      	lsrs	r3, r3, #9
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	8952      	ldrh	r2, [r2, #10]
 800fbc0:	3a01      	subs	r2, #1
 800fbc2:	4013      	ands	r3, r2
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d17a      	bne.n	800fcbe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	4619      	mov	r1, r3
 800fbd0:	4610      	mov	r0, r2
 800fbd2:	f7ff fc88 	bl	800f4e6 <get_fat>
 800fbd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d801      	bhi.n	800fbe2 <dir_next+0x8c>
 800fbde:	2302      	movs	r3, #2
 800fbe0:	e07a      	b.n	800fcd8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe8:	d101      	bne.n	800fbee <dir_next+0x98>
 800fbea:	2301      	movs	r3, #1
 800fbec:	e074      	b.n	800fcd8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	697a      	ldr	r2, [r7, #20]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d358      	bcc.n	800fcaa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d104      	bne.n	800fc08 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	61da      	str	r2, [r3, #28]
 800fc04:	2304      	movs	r3, #4
 800fc06:	e067      	b.n	800fcd8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	699b      	ldr	r3, [r3, #24]
 800fc0e:	4619      	mov	r1, r3
 800fc10:	4610      	mov	r0, r2
 800fc12:	f7ff fe59 	bl	800f8c8 <create_chain>
 800fc16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d101      	bne.n	800fc22 <dir_next+0xcc>
 800fc1e:	2307      	movs	r3, #7
 800fc20:	e05a      	b.n	800fcd8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d101      	bne.n	800fc2c <dir_next+0xd6>
 800fc28:	2302      	movs	r3, #2
 800fc2a:	e055      	b.n	800fcd8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc32:	d101      	bne.n	800fc38 <dir_next+0xe2>
 800fc34:	2301      	movs	r3, #1
 800fc36:	e04f      	b.n	800fcd8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f7ff fb55 	bl	800f2e8 <sync_window>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d001      	beq.n	800fc48 <dir_next+0xf2>
 800fc44:	2301      	movs	r3, #1
 800fc46:	e047      	b.n	800fcd8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	3334      	adds	r3, #52	; 0x34
 800fc4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc50:	2100      	movs	r1, #0
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff f94f 	bl	800eef6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fc58:	2300      	movs	r3, #0
 800fc5a:	613b      	str	r3, [r7, #16]
 800fc5c:	6979      	ldr	r1, [r7, #20]
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	f7ff fc22 	bl	800f4a8 <clust2sect>
 800fc64:	4602      	mov	r2, r0
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	631a      	str	r2, [r3, #48]	; 0x30
 800fc6a:	e012      	b.n	800fc92 <dir_next+0x13c>
						fs->wflag = 1;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f7ff fb38 	bl	800f2e8 <sync_window>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <dir_next+0x12c>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e02a      	b.n	800fcd8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	3301      	adds	r3, #1
 800fc86:	613b      	str	r3, [r7, #16]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc8c:	1c5a      	adds	r2, r3, #1
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	631a      	str	r2, [r3, #48]	; 0x30
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	895b      	ldrh	r3, [r3, #10]
 800fc96:	461a      	mov	r2, r3
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d3e6      	bcc.n	800fc6c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	1ad2      	subs	r2, r2, r3
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fcb0:	6979      	ldr	r1, [r7, #20]
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f7ff fbf8 	bl	800f4a8 <clust2sect>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcd0:	441a      	add	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fcd6:	2300      	movs	r3, #0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3718      	adds	r7, #24
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7ff feb4 	bl	800fa60 <dir_sdi>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fcfc:	7dfb      	ldrb	r3, [r7, #23]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d12b      	bne.n	800fd5a <dir_alloc+0x7a>
		n = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	69db      	ldr	r3, [r3, #28]
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f7ff fb2f 	bl	800f370 <move_window>
 800fd12:	4603      	mov	r3, r0
 800fd14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fd16:	7dfb      	ldrb	r3, [r7, #23]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d11d      	bne.n	800fd58 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6a1b      	ldr	r3, [r3, #32]
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	2be5      	cmp	r3, #229	; 0xe5
 800fd24:	d004      	beq.n	800fd30 <dir_alloc+0x50>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a1b      	ldr	r3, [r3, #32]
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d107      	bne.n	800fd40 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	3301      	adds	r3, #1
 800fd34:	613b      	str	r3, [r7, #16]
 800fd36:	693a      	ldr	r2, [r7, #16]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d102      	bne.n	800fd44 <dir_alloc+0x64>
 800fd3e:	e00c      	b.n	800fd5a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fd40:	2300      	movs	r3, #0
 800fd42:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fd44:	2101      	movs	r1, #1
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7ff ff05 	bl	800fb56 <dir_next>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fd50:	7dfb      	ldrb	r3, [r7, #23]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d0d7      	beq.n	800fd06 <dir_alloc+0x26>
 800fd56:	e000      	b.n	800fd5a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fd58:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fd5a:	7dfb      	ldrb	r3, [r7, #23]
 800fd5c:	2b04      	cmp	r3, #4
 800fd5e:	d101      	bne.n	800fd64 <dir_alloc+0x84>
 800fd60:	2307      	movs	r3, #7
 800fd62:	75fb      	strb	r3, [r7, #23]
	return res;
 800fd64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3718      	adds	r7, #24
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b084      	sub	sp, #16
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	331a      	adds	r3, #26
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff f817 	bl	800edb0 <ld_word>
 800fd82:	4603      	mov	r3, r0
 800fd84:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	d109      	bne.n	800fda2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	3314      	adds	r3, #20
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff f80c 	bl	800edb0 <ld_word>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	041b      	lsls	r3, r3, #16
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fda2:	68fb      	ldr	r3, [r7, #12]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	331a      	adds	r3, #26
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	b292      	uxth	r2, r2
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff f82f 	bl	800ee26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	2b03      	cmp	r3, #3
 800fdce:	d109      	bne.n	800fde4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	f103 0214 	add.w	r2, r3, #20
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	0c1b      	lsrs	r3, r3, #16
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	4619      	mov	r1, r3
 800fdde:	4610      	mov	r0, r2
 800fde0:	f7ff f821 	bl	800ee26 <st_word>
	}
}
 800fde4:	bf00      	nop
 800fde6:	3710      	adds	r7, #16
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b086      	sub	sp, #24
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fdf6:	2304      	movs	r3, #4
 800fdf8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fe00:	e03c      	b.n	800fe7c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	69db      	ldr	r3, [r3, #28]
 800fe06:	4619      	mov	r1, r3
 800fe08:	6938      	ldr	r0, [r7, #16]
 800fe0a:	f7ff fab1 	bl	800f370 <move_window>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d136      	bne.n	800fe86 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a1b      	ldr	r3, [r3, #32]
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800fe20:	7bfb      	ldrb	r3, [r7, #15]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d102      	bne.n	800fe2c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fe26:	2304      	movs	r3, #4
 800fe28:	75fb      	strb	r3, [r7, #23]
 800fe2a:	e031      	b.n	800fe90 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6a1b      	ldr	r3, [r3, #32]
 800fe30:	330b      	adds	r3, #11
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe38:	73bb      	strb	r3, [r7, #14]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	7bba      	ldrb	r2, [r7, #14]
 800fe3e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fe40:	7bfb      	ldrb	r3, [r7, #15]
 800fe42:	2be5      	cmp	r3, #229	; 0xe5
 800fe44:	d011      	beq.n	800fe6a <dir_read+0x7e>
 800fe46:	7bfb      	ldrb	r3, [r7, #15]
 800fe48:	2b2e      	cmp	r3, #46	; 0x2e
 800fe4a:	d00e      	beq.n	800fe6a <dir_read+0x7e>
 800fe4c:	7bbb      	ldrb	r3, [r7, #14]
 800fe4e:	2b0f      	cmp	r3, #15
 800fe50:	d00b      	beq.n	800fe6a <dir_read+0x7e>
 800fe52:	7bbb      	ldrb	r3, [r7, #14]
 800fe54:	f023 0320 	bic.w	r3, r3, #32
 800fe58:	2b08      	cmp	r3, #8
 800fe5a:	bf0c      	ite	eq
 800fe5c:	2301      	moveq	r3, #1
 800fe5e:	2300      	movne	r3, #0
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	461a      	mov	r2, r3
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d00f      	beq.n	800fe8a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7ff fe72 	bl	800fb56 <dir_next>
 800fe72:	4603      	mov	r3, r0
 800fe74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fe76:	7dfb      	ldrb	r3, [r7, #23]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d108      	bne.n	800fe8e <dir_read+0xa2>
	while (dp->sect) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	69db      	ldr	r3, [r3, #28]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d1be      	bne.n	800fe02 <dir_read+0x16>
 800fe84:	e004      	b.n	800fe90 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fe86:	bf00      	nop
 800fe88:	e002      	b.n	800fe90 <dir_read+0xa4>
				break;
 800fe8a:	bf00      	nop
 800fe8c:	e000      	b.n	800fe90 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fe8e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d002      	beq.n	800fe9c <dir_read+0xb0>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	61da      	str	r2, [r3, #28]
	return res;
 800fe9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3718      	adds	r7, #24
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b086      	sub	sp, #24
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800feb4:	2100      	movs	r1, #0
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f7ff fdd2 	bl	800fa60 <dir_sdi>
 800febc:	4603      	mov	r3, r0
 800febe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fec0:	7dfb      	ldrb	r3, [r7, #23]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d001      	beq.n	800feca <dir_find+0x24>
 800fec6:	7dfb      	ldrb	r3, [r7, #23]
 800fec8:	e03e      	b.n	800ff48 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	69db      	ldr	r3, [r3, #28]
 800fece:	4619      	mov	r1, r3
 800fed0:	6938      	ldr	r0, [r7, #16]
 800fed2:	f7ff fa4d 	bl	800f370 <move_window>
 800fed6:	4603      	mov	r3, r0
 800fed8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800feda:	7dfb      	ldrb	r3, [r7, #23]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d12f      	bne.n	800ff40 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a1b      	ldr	r3, [r3, #32]
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d102      	bne.n	800fef4 <dir_find+0x4e>
 800feee:	2304      	movs	r3, #4
 800fef0:	75fb      	strb	r3, [r7, #23]
 800fef2:	e028      	b.n	800ff46 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
 800fef8:	330b      	adds	r3, #11
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a1b      	ldr	r3, [r3, #32]
 800ff0a:	330b      	adds	r3, #11
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	f003 0308 	and.w	r3, r3, #8
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10a      	bne.n	800ff2c <dir_find+0x86>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a18      	ldr	r0, [r3, #32]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	3324      	adds	r3, #36	; 0x24
 800ff1e:	220b      	movs	r2, #11
 800ff20:	4619      	mov	r1, r3
 800ff22:	f7ff f802 	bl	800ef2a <mem_cmp>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00b      	beq.n	800ff44 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f7ff fe11 	bl	800fb56 <dir_next>
 800ff34:	4603      	mov	r3, r0
 800ff36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ff38:	7dfb      	ldrb	r3, [r7, #23]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d0c5      	beq.n	800feca <dir_find+0x24>
 800ff3e:	e002      	b.n	800ff46 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ff40:	bf00      	nop
 800ff42:	e000      	b.n	800ff46 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ff44:	bf00      	nop

	return res;
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ff5e:	2101      	movs	r1, #1
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7ff febd 	bl	800fce0 <dir_alloc>
 800ff66:	4603      	mov	r3, r0
 800ff68:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ff6a:	7bfb      	ldrb	r3, [r7, #15]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d11c      	bne.n	800ffaa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	69db      	ldr	r3, [r3, #28]
 800ff74:	4619      	mov	r1, r3
 800ff76:	68b8      	ldr	r0, [r7, #8]
 800ff78:	f7ff f9fa 	bl	800f370 <move_window>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ff80:	7bfb      	ldrb	r3, [r7, #15]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d111      	bne.n	800ffaa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6a1b      	ldr	r3, [r3, #32]
 800ff8a:	2220      	movs	r2, #32
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fe ffb1 	bl	800eef6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6a18      	ldr	r0, [r3, #32]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	3324      	adds	r3, #36	; 0x24
 800ff9c:	220b      	movs	r2, #11
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	f7fe ff88 	bl	800eeb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ffaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3710      	adds	r7, #16
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b086      	sub	sp, #24
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	69db      	ldr	r3, [r3, #28]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d04e      	beq.n	801006a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	613b      	str	r3, [r7, #16]
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ffd4:	e021      	b.n	801001a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6a1a      	ldr	r2, [r3, #32]
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	1c59      	adds	r1, r3, #1
 800ffde:	6179      	str	r1, [r7, #20]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ffe6:	7bfb      	ldrb	r3, [r7, #15]
 800ffe8:	2b20      	cmp	r3, #32
 800ffea:	d100      	bne.n	800ffee <get_fileinfo+0x3a>
 800ffec:	e015      	b.n	801001a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ffee:	7bfb      	ldrb	r3, [r7, #15]
 800fff0:	2b05      	cmp	r3, #5
 800fff2:	d101      	bne.n	800fff8 <get_fileinfo+0x44>
 800fff4:	23e5      	movs	r3, #229	; 0xe5
 800fff6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	2b09      	cmp	r3, #9
 800fffc:	d106      	bne.n	801000c <get_fileinfo+0x58>
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	1c5a      	adds	r2, r3, #1
 8010002:	613a      	str	r2, [r7, #16]
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	4413      	add	r3, r2
 8010008:	222e      	movs	r2, #46	; 0x2e
 801000a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	1c5a      	adds	r2, r3, #1
 8010010:	613a      	str	r2, [r7, #16]
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	4413      	add	r3, r2
 8010016:	7bfa      	ldrb	r2, [r7, #15]
 8010018:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	2b0a      	cmp	r3, #10
 801001e:	d9da      	bls.n	800ffd6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010020:	683a      	ldr	r2, [r7, #0]
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	4413      	add	r3, r2
 8010026:	3309      	adds	r3, #9
 8010028:	2200      	movs	r2, #0
 801002a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6a1b      	ldr	r3, [r3, #32]
 8010030:	7ada      	ldrb	r2, [r3, #11]
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a1b      	ldr	r3, [r3, #32]
 801003a:	331c      	adds	r3, #28
 801003c:	4618      	mov	r0, r3
 801003e:	f7fe fecf 	bl	800ede0 <ld_dword>
 8010042:	4602      	mov	r2, r0
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6a1b      	ldr	r3, [r3, #32]
 801004c:	3316      	adds	r3, #22
 801004e:	4618      	mov	r0, r3
 8010050:	f7fe fec6 	bl	800ede0 <ld_dword>
 8010054:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	b29a      	uxth	r2, r3
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	80da      	strh	r2, [r3, #6]
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	0c1b      	lsrs	r3, r3, #16
 8010062:	b29a      	uxth	r2, r3
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	809a      	strh	r2, [r3, #4]
 8010068:	e000      	b.n	801006c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801006a:	bf00      	nop
}
 801006c:	3718      	adds	r7, #24
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
	...

08010074 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	1c59      	adds	r1, r3, #1
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	6011      	str	r1, [r2, #0]
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801008a:	89fb      	ldrh	r3, [r7, #14]
 801008c:	2b60      	cmp	r3, #96	; 0x60
 801008e:	d905      	bls.n	801009c <get_achar+0x28>
 8010090:	89fb      	ldrh	r3, [r7, #14]
 8010092:	2b7a      	cmp	r3, #122	; 0x7a
 8010094:	d802      	bhi.n	801009c <get_achar+0x28>
 8010096:	89fb      	ldrh	r3, [r7, #14]
 8010098:	3b20      	subs	r3, #32
 801009a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801009c:	89fb      	ldrh	r3, [r7, #14]
 801009e:	2b7f      	cmp	r3, #127	; 0x7f
 80100a0:	d904      	bls.n	80100ac <get_achar+0x38>
 80100a2:	89fb      	ldrh	r3, [r7, #14]
 80100a4:	3b80      	subs	r3, #128	; 0x80
 80100a6:	4a05      	ldr	r2, [pc, #20]	; (80100bc <get_achar+0x48>)
 80100a8:	5cd3      	ldrb	r3, [r2, r3]
 80100aa:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80100ac:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3714      	adds	r7, #20
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	0801883c 	.word	0x0801883c

080100c0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b08a      	sub	sp, #40	; 0x28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	607a      	str	r2, [r7, #4]
 80100cc:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 80100ce:	e009      	b.n	80100e4 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80100d0:	f107 0308 	add.w	r3, r7, #8
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7ff ffcd 	bl	8010074 <get_achar>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d101      	bne.n	80100e4 <pattern_matching+0x24>
 80100e0:	2300      	movs	r3, #0
 80100e2:	e064      	b.n	80101ae <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	1e5a      	subs	r2, r3, #1
 80100e8:	607a      	str	r2, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1f0      	bne.n	80100d0 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d104      	bne.n	8010100 <pattern_matching+0x40>
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d001      	beq.n	8010100 <pattern_matching+0x40>
 80100fc:	2301      	movs	r3, #1
 80100fe:	e056      	b.n	80101ae <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	617b      	str	r3, [r7, #20]
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	2b3f      	cmp	r3, #63	; 0x3f
 801010e:	d003      	beq.n	8010118 <pattern_matching+0x58>
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	2b2a      	cmp	r3, #42	; 0x2a
 8010116:	d126      	bne.n	8010166 <pattern_matching+0xa6>
				nm = nx = 0;
 8010118:	2300      	movs	r3, #0
 801011a:	61fb      	str	r3, [r7, #28]
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	1c5a      	adds	r2, r3, #1
 8010124:	617a      	str	r2, [r7, #20]
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	2b3f      	cmp	r3, #63	; 0x3f
 801012a:	d103      	bne.n	8010134 <pattern_matching+0x74>
 801012c:	6a3b      	ldr	r3, [r7, #32]
 801012e:	3301      	adds	r3, #1
 8010130:	623b      	str	r3, [r7, #32]
 8010132:	e001      	b.n	8010138 <pattern_matching+0x78>
 8010134:	2301      	movs	r3, #1
 8010136:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2b3f      	cmp	r3, #63	; 0x3f
 801013e:	d0ef      	beq.n	8010120 <pattern_matching+0x60>
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b2a      	cmp	r3, #42	; 0x2a
 8010146:	d0eb      	beq.n	8010120 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8010148:	6978      	ldr	r0, [r7, #20]
 801014a:	6939      	ldr	r1, [r7, #16]
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	6a3a      	ldr	r2, [r7, #32]
 8010150:	f7ff ffb6 	bl	80100c0 <pattern_matching>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d001      	beq.n	801015e <pattern_matching+0x9e>
 801015a:	2301      	movs	r3, #1
 801015c:	e027      	b.n	80101ae <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010164:	e017      	b.n	8010196 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8010166:	f107 0314 	add.w	r3, r7, #20
 801016a:	4618      	mov	r0, r3
 801016c:	f7ff ff82 	bl	8010074 <get_achar>
 8010170:	4603      	mov	r3, r0
 8010172:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8010174:	f107 0310 	add.w	r3, r7, #16
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff ff7b 	bl	8010074 <get_achar>
 801017e:	4603      	mov	r3, r0
 8010180:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8010182:	8b7a      	ldrh	r2, [r7, #26]
 8010184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010186:	429a      	cmp	r2, r3
 8010188:	d104      	bne.n	8010194 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801018a:	8b7b      	ldrh	r3, [r7, #26]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1bb      	bne.n	8010108 <pattern_matching+0x48>
 8010190:	2301      	movs	r3, #1
 8010192:	e00c      	b.n	80101ae <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8010194:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8010196:	f107 0308 	add.w	r3, r7, #8
 801019a:	4618      	mov	r0, r3
 801019c:	f7ff ff6a 	bl	8010074 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <pattern_matching+0xec>
 80101a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1a9      	bne.n	8010100 <pattern_matching+0x40>

	return 0;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3728      	adds	r7, #40	; 0x28
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
	...

080101b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b088      	sub	sp, #32
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	60fb      	str	r3, [r7, #12]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	3324      	adds	r3, #36	; 0x24
 80101cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80101ce:	220b      	movs	r2, #11
 80101d0:	2120      	movs	r1, #32
 80101d2:	68b8      	ldr	r0, [r7, #8]
 80101d4:	f7fe fe8f 	bl	800eef6 <mem_set>
	si = i = 0; ni = 8;
 80101d8:	2300      	movs	r3, #0
 80101da:	613b      	str	r3, [r7, #16]
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	617b      	str	r3, [r7, #20]
 80101e0:	2308      	movs	r3, #8
 80101e2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	1c5a      	adds	r2, r3, #1
 80101e8:	617a      	str	r2, [r7, #20]
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	4413      	add	r3, r2
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80101f2:	7ffb      	ldrb	r3, [r7, #31]
 80101f4:	2b20      	cmp	r3, #32
 80101f6:	d94e      	bls.n	8010296 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80101f8:	7ffb      	ldrb	r3, [r7, #31]
 80101fa:	2b2f      	cmp	r3, #47	; 0x2f
 80101fc:	d006      	beq.n	801020c <create_name+0x54>
 80101fe:	7ffb      	ldrb	r3, [r7, #31]
 8010200:	2b5c      	cmp	r3, #92	; 0x5c
 8010202:	d110      	bne.n	8010226 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010204:	e002      	b.n	801020c <create_name+0x54>
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	3301      	adds	r3, #1
 801020a:	617b      	str	r3, [r7, #20]
 801020c:	68fa      	ldr	r2, [r7, #12]
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	4413      	add	r3, r2
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	2b2f      	cmp	r3, #47	; 0x2f
 8010216:	d0f6      	beq.n	8010206 <create_name+0x4e>
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	4413      	add	r3, r2
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b5c      	cmp	r3, #92	; 0x5c
 8010222:	d0f0      	beq.n	8010206 <create_name+0x4e>
			break;
 8010224:	e038      	b.n	8010298 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010226:	7ffb      	ldrb	r3, [r7, #31]
 8010228:	2b2e      	cmp	r3, #46	; 0x2e
 801022a:	d003      	beq.n	8010234 <create_name+0x7c>
 801022c:	693a      	ldr	r2, [r7, #16]
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	429a      	cmp	r2, r3
 8010232:	d30c      	bcc.n	801024e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	2b0b      	cmp	r3, #11
 8010238:	d002      	beq.n	8010240 <create_name+0x88>
 801023a:	7ffb      	ldrb	r3, [r7, #31]
 801023c:	2b2e      	cmp	r3, #46	; 0x2e
 801023e:	d001      	beq.n	8010244 <create_name+0x8c>
 8010240:	2306      	movs	r3, #6
 8010242:	e044      	b.n	80102ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010244:	2308      	movs	r3, #8
 8010246:	613b      	str	r3, [r7, #16]
 8010248:	230b      	movs	r3, #11
 801024a:	61bb      	str	r3, [r7, #24]
			continue;
 801024c:	e022      	b.n	8010294 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801024e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010252:	2b00      	cmp	r3, #0
 8010254:	da04      	bge.n	8010260 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010256:	7ffb      	ldrb	r3, [r7, #31]
 8010258:	3b80      	subs	r3, #128	; 0x80
 801025a:	4a1f      	ldr	r2, [pc, #124]	; (80102d8 <create_name+0x120>)
 801025c:	5cd3      	ldrb	r3, [r2, r3]
 801025e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010260:	7ffb      	ldrb	r3, [r7, #31]
 8010262:	4619      	mov	r1, r3
 8010264:	481d      	ldr	r0, [pc, #116]	; (80102dc <create_name+0x124>)
 8010266:	f7fe fe87 	bl	800ef78 <chk_chr>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d001      	beq.n	8010274 <create_name+0xbc>
 8010270:	2306      	movs	r3, #6
 8010272:	e02c      	b.n	80102ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010274:	7ffb      	ldrb	r3, [r7, #31]
 8010276:	2b60      	cmp	r3, #96	; 0x60
 8010278:	d905      	bls.n	8010286 <create_name+0xce>
 801027a:	7ffb      	ldrb	r3, [r7, #31]
 801027c:	2b7a      	cmp	r3, #122	; 0x7a
 801027e:	d802      	bhi.n	8010286 <create_name+0xce>
 8010280:	7ffb      	ldrb	r3, [r7, #31]
 8010282:	3b20      	subs	r3, #32
 8010284:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	613a      	str	r2, [r7, #16]
 801028c:	68ba      	ldr	r2, [r7, #8]
 801028e:	4413      	add	r3, r2
 8010290:	7ffa      	ldrb	r2, [r7, #31]
 8010292:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010294:	e7a6      	b.n	80101e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010296:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	441a      	add	r2, r3
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d101      	bne.n	80102ac <create_name+0xf4>
 80102a8:	2306      	movs	r3, #6
 80102aa:	e010      	b.n	80102ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	2be5      	cmp	r3, #229	; 0xe5
 80102b2:	d102      	bne.n	80102ba <create_name+0x102>
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	2205      	movs	r2, #5
 80102b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80102ba:	7ffb      	ldrb	r3, [r7, #31]
 80102bc:	2b20      	cmp	r3, #32
 80102be:	d801      	bhi.n	80102c4 <create_name+0x10c>
 80102c0:	2204      	movs	r2, #4
 80102c2:	e000      	b.n	80102c6 <create_name+0x10e>
 80102c4:	2200      	movs	r2, #0
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	330b      	adds	r3, #11
 80102ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80102cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3720      	adds	r7, #32
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	0801883c 	.word	0x0801883c
 80102dc:	08018668 	.word	0x08018668

080102e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b086      	sub	sp, #24
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80102f4:	e002      	b.n	80102fc <follow_path+0x1c>
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	3301      	adds	r3, #1
 80102fa:	603b      	str	r3, [r7, #0]
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	2b2f      	cmp	r3, #47	; 0x2f
 8010302:	d0f8      	beq.n	80102f6 <follow_path+0x16>
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b5c      	cmp	r3, #92	; 0x5c
 801030a:	d0f4      	beq.n	80102f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2200      	movs	r2, #0
 8010310:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	2b1f      	cmp	r3, #31
 8010318:	d80a      	bhi.n	8010330 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2280      	movs	r2, #128	; 0x80
 801031e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010322:	2100      	movs	r1, #0
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7ff fb9b 	bl	800fa60 <dir_sdi>
 801032a:	4603      	mov	r3, r0
 801032c:	75fb      	strb	r3, [r7, #23]
 801032e:	e043      	b.n	80103b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010330:	463b      	mov	r3, r7
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff ff3f 	bl	80101b8 <create_name>
 801033a:	4603      	mov	r3, r0
 801033c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801033e:	7dfb      	ldrb	r3, [r7, #23]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d134      	bne.n	80103ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f7ff fdae 	bl	800fea6 <dir_find>
 801034a:	4603      	mov	r3, r0
 801034c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010354:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010356:	7dfb      	ldrb	r3, [r7, #23]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d00a      	beq.n	8010372 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801035c:	7dfb      	ldrb	r3, [r7, #23]
 801035e:	2b04      	cmp	r3, #4
 8010360:	d127      	bne.n	80103b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010362:	7afb      	ldrb	r3, [r7, #11]
 8010364:	f003 0304 	and.w	r3, r3, #4
 8010368:	2b00      	cmp	r3, #0
 801036a:	d122      	bne.n	80103b2 <follow_path+0xd2>
 801036c:	2305      	movs	r3, #5
 801036e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010370:	e01f      	b.n	80103b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010372:	7afb      	ldrb	r3, [r7, #11]
 8010374:	f003 0304 	and.w	r3, r3, #4
 8010378:	2b00      	cmp	r3, #0
 801037a:	d11c      	bne.n	80103b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	799b      	ldrb	r3, [r3, #6]
 8010380:	f003 0310 	and.w	r3, r3, #16
 8010384:	2b00      	cmp	r3, #0
 8010386:	d102      	bne.n	801038e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010388:	2305      	movs	r3, #5
 801038a:	75fb      	strb	r3, [r7, #23]
 801038c:	e014      	b.n	80103b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	695b      	ldr	r3, [r3, #20]
 8010398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801039c:	4413      	add	r3, r2
 801039e:	4619      	mov	r1, r3
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f7ff fce4 	bl	800fd6e <ld_clust>
 80103a6:	4602      	mov	r2, r0
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80103ac:	e7c0      	b.n	8010330 <follow_path+0x50>
			if (res != FR_OK) break;
 80103ae:	bf00      	nop
 80103b0:	e002      	b.n	80103b8 <follow_path+0xd8>
				break;
 80103b2:	bf00      	nop
 80103b4:	e000      	b.n	80103b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80103b6:	bf00      	nop
			}
		}
	}

	return res;
 80103b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3718      	adds	r7, #24
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80103c2:	b480      	push	{r7}
 80103c4:	b087      	sub	sp, #28
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80103ca:	f04f 33ff 	mov.w	r3, #4294967295
 80103ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d031      	beq.n	801043c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	617b      	str	r3, [r7, #20]
 80103de:	e002      	b.n	80103e6 <get_ldnumber+0x24>
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	3301      	adds	r3, #1
 80103e4:	617b      	str	r3, [r7, #20]
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	2b20      	cmp	r3, #32
 80103ec:	d903      	bls.n	80103f6 <get_ldnumber+0x34>
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	2b3a      	cmp	r3, #58	; 0x3a
 80103f4:	d1f4      	bne.n	80103e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	2b3a      	cmp	r3, #58	; 0x3a
 80103fc:	d11c      	bne.n	8010438 <get_ldnumber+0x76>
			tp = *path;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	1c5a      	adds	r2, r3, #1
 8010408:	60fa      	str	r2, [r7, #12]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	3b30      	subs	r3, #48	; 0x30
 801040e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	2b09      	cmp	r3, #9
 8010414:	d80e      	bhi.n	8010434 <get_ldnumber+0x72>
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	429a      	cmp	r2, r3
 801041c:	d10a      	bne.n	8010434 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d107      	bne.n	8010434 <get_ldnumber+0x72>
					vol = (int)i;
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	3301      	adds	r3, #1
 801042c:	617b      	str	r3, [r7, #20]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	697a      	ldr	r2, [r7, #20]
 8010432:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	e002      	b.n	801043e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010438:	2300      	movs	r3, #0
 801043a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801043c:	693b      	ldr	r3, [r7, #16]
}
 801043e:	4618      	mov	r0, r3
 8010440:	371c      	adds	r7, #28
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
	...

0801044c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	70da      	strb	r2, [r3, #3]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f04f 32ff 	mov.w	r2, #4294967295
 8010462:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010464:	6839      	ldr	r1, [r7, #0]
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f7fe ff82 	bl	800f370 <move_window>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <check_fs+0x2a>
 8010472:	2304      	movs	r3, #4
 8010474:	e038      	b.n	80104e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	3334      	adds	r3, #52	; 0x34
 801047a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801047e:	4618      	mov	r0, r3
 8010480:	f7fe fc96 	bl	800edb0 <ld_word>
 8010484:	4603      	mov	r3, r0
 8010486:	461a      	mov	r2, r3
 8010488:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801048c:	429a      	cmp	r2, r3
 801048e:	d001      	beq.n	8010494 <check_fs+0x48>
 8010490:	2303      	movs	r3, #3
 8010492:	e029      	b.n	80104e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801049a:	2be9      	cmp	r3, #233	; 0xe9
 801049c:	d009      	beq.n	80104b2 <check_fs+0x66>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104a4:	2beb      	cmp	r3, #235	; 0xeb
 80104a6:	d11e      	bne.n	80104e6 <check_fs+0x9a>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80104ae:	2b90      	cmp	r3, #144	; 0x90
 80104b0:	d119      	bne.n	80104e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	3334      	adds	r3, #52	; 0x34
 80104b6:	3336      	adds	r3, #54	; 0x36
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7fe fc91 	bl	800ede0 <ld_dword>
 80104be:	4603      	mov	r3, r0
 80104c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80104c4:	4a0a      	ldr	r2, [pc, #40]	; (80104f0 <check_fs+0xa4>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d101      	bne.n	80104ce <check_fs+0x82>
 80104ca:	2300      	movs	r3, #0
 80104cc:	e00c      	b.n	80104e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	3334      	adds	r3, #52	; 0x34
 80104d2:	3352      	adds	r3, #82	; 0x52
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7fe fc83 	bl	800ede0 <ld_dword>
 80104da:	4602      	mov	r2, r0
 80104dc:	4b05      	ldr	r3, [pc, #20]	; (80104f4 <check_fs+0xa8>)
 80104de:	429a      	cmp	r2, r3
 80104e0:	d101      	bne.n	80104e6 <check_fs+0x9a>
 80104e2:	2300      	movs	r3, #0
 80104e4:	e000      	b.n	80104e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80104e6:	2302      	movs	r3, #2
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	00544146 	.word	0x00544146
 80104f4:	33544146 	.word	0x33544146

080104f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b096      	sub	sp, #88	; 0x58
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	4613      	mov	r3, r2
 8010504:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	2200      	movs	r2, #0
 801050a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f7ff ff58 	bl	80103c2 <get_ldnumber>
 8010512:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010516:	2b00      	cmp	r3, #0
 8010518:	da01      	bge.n	801051e <find_volume+0x26>
 801051a:	230b      	movs	r3, #11
 801051c:	e236      	b.n	801098c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801051e:	4aac      	ldr	r2, [pc, #688]	; (80107d0 <find_volume+0x2d8>)
 8010520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010526:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <find_volume+0x3a>
 801052e:	230c      	movs	r3, #12
 8010530:	e22c      	b.n	801098c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010532:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010534:	f7fe fd3b 	bl	800efae <lock_fs>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d101      	bne.n	8010542 <find_volume+0x4a>
 801053e:	230f      	movs	r3, #15
 8010540:	e224      	b.n	801098c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010546:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010548:	79fb      	ldrb	r3, [r7, #7]
 801054a:	f023 0301 	bic.w	r3, r3, #1
 801054e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d01a      	beq.n	801058e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	785b      	ldrb	r3, [r3, #1]
 801055c:	4618      	mov	r0, r3
 801055e:	f7fe fb89 	bl	800ec74 <disk_status>
 8010562:	4603      	mov	r3, r0
 8010564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801056c:	f003 0301 	and.w	r3, r3, #1
 8010570:	2b00      	cmp	r3, #0
 8010572:	d10c      	bne.n	801058e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010574:	79fb      	ldrb	r3, [r7, #7]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d007      	beq.n	801058a <find_volume+0x92>
 801057a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801057e:	f003 0304 	and.w	r3, r3, #4
 8010582:	2b00      	cmp	r3, #0
 8010584:	d001      	beq.n	801058a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010586:	230a      	movs	r3, #10
 8010588:	e200      	b.n	801098c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801058a:	2300      	movs	r3, #0
 801058c:	e1fe      	b.n	801098c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801058e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010590:	2200      	movs	r2, #0
 8010592:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010596:	b2da      	uxtb	r2, r3
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059e:	785b      	ldrb	r3, [r3, #1]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fe fb81 	bl	800eca8 <disk_initialize>
 80105a6:	4603      	mov	r3, r0
 80105a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80105ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105b0:	f003 0301 	and.w	r3, r3, #1
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d001      	beq.n	80105bc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80105b8:	2303      	movs	r3, #3
 80105ba:	e1e7      	b.n	801098c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d007      	beq.n	80105d2 <find_volume+0xda>
 80105c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105c6:	f003 0304 	and.w	r3, r3, #4
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d001      	beq.n	80105d2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80105ce:	230a      	movs	r3, #10
 80105d0:	e1dc      	b.n	801098c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80105d2:	2300      	movs	r3, #0
 80105d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80105d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105da:	f7ff ff37 	bl	801044c <check_fs>
 80105de:	4603      	mov	r3, r0
 80105e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80105e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105e8:	2b02      	cmp	r3, #2
 80105ea:	d14b      	bne.n	8010684 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80105ec:	2300      	movs	r3, #0
 80105ee:	643b      	str	r3, [r7, #64]	; 0x40
 80105f0:	e01f      	b.n	8010632 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80105f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80105f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105fa:	011b      	lsls	r3, r3, #4
 80105fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010600:	4413      	add	r3, r2
 8010602:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010606:	3304      	adds	r3, #4
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d006      	beq.n	801061c <find_volume+0x124>
 801060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010610:	3308      	adds	r3, #8
 8010612:	4618      	mov	r0, r3
 8010614:	f7fe fbe4 	bl	800ede0 <ld_dword>
 8010618:	4602      	mov	r2, r0
 801061a:	e000      	b.n	801061e <find_volume+0x126>
 801061c:	2200      	movs	r2, #0
 801061e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010626:	440b      	add	r3, r1
 8010628:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801062c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801062e:	3301      	adds	r3, #1
 8010630:	643b      	str	r3, [r7, #64]	; 0x40
 8010632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010634:	2b03      	cmp	r3, #3
 8010636:	d9dc      	bls.n	80105f2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010638:	2300      	movs	r3, #0
 801063a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801063c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801063e:	2b00      	cmp	r3, #0
 8010640:	d002      	beq.n	8010648 <find_volume+0x150>
 8010642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010644:	3b01      	subs	r3, #1
 8010646:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010650:	4413      	add	r3, r2
 8010652:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010656:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801065a:	2b00      	cmp	r3, #0
 801065c:	d005      	beq.n	801066a <find_volume+0x172>
 801065e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010662:	f7ff fef3 	bl	801044c <check_fs>
 8010666:	4603      	mov	r3, r0
 8010668:	e000      	b.n	801066c <find_volume+0x174>
 801066a:	2303      	movs	r3, #3
 801066c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010674:	2b01      	cmp	r3, #1
 8010676:	d905      	bls.n	8010684 <find_volume+0x18c>
 8010678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801067a:	3301      	adds	r3, #1
 801067c:	643b      	str	r3, [r7, #64]	; 0x40
 801067e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010680:	2b03      	cmp	r3, #3
 8010682:	d9e1      	bls.n	8010648 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010688:	2b04      	cmp	r3, #4
 801068a:	d101      	bne.n	8010690 <find_volume+0x198>
 801068c:	2301      	movs	r3, #1
 801068e:	e17d      	b.n	801098c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010694:	2b01      	cmp	r3, #1
 8010696:	d901      	bls.n	801069c <find_volume+0x1a4>
 8010698:	230d      	movs	r3, #13
 801069a:	e177      	b.n	801098c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	3334      	adds	r3, #52	; 0x34
 80106a0:	330b      	adds	r3, #11
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fe fb84 	bl	800edb0 <ld_word>
 80106a8:	4603      	mov	r3, r0
 80106aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106ae:	d001      	beq.n	80106b4 <find_volume+0x1bc>
 80106b0:	230d      	movs	r3, #13
 80106b2:	e16b      	b.n	801098c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80106b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b6:	3334      	adds	r3, #52	; 0x34
 80106b8:	3316      	adds	r3, #22
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fe fb78 	bl	800edb0 <ld_word>
 80106c0:	4603      	mov	r3, r0
 80106c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80106c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d106      	bne.n	80106d8 <find_volume+0x1e0>
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	3334      	adds	r3, #52	; 0x34
 80106ce:	3324      	adds	r3, #36	; 0x24
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fe fb85 	bl	800ede0 <ld_dword>
 80106d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80106d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80106de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80106e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80106e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ea:	789b      	ldrb	r3, [r3, #2]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d005      	beq.n	80106fc <find_volume+0x204>
 80106f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f2:	789b      	ldrb	r3, [r3, #2]
 80106f4:	2b02      	cmp	r3, #2
 80106f6:	d001      	beq.n	80106fc <find_volume+0x204>
 80106f8:	230d      	movs	r3, #13
 80106fa:	e147      	b.n	801098c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80106fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fe:	789b      	ldrb	r3, [r3, #2]
 8010700:	461a      	mov	r2, r3
 8010702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010704:	fb02 f303 	mul.w	r3, r2, r3
 8010708:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801070a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010710:	b29a      	uxth	r2, r3
 8010712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010714:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	895b      	ldrh	r3, [r3, #10]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d008      	beq.n	8010730 <find_volume+0x238>
 801071e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010720:	895b      	ldrh	r3, [r3, #10]
 8010722:	461a      	mov	r2, r3
 8010724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010726:	895b      	ldrh	r3, [r3, #10]
 8010728:	3b01      	subs	r3, #1
 801072a:	4013      	ands	r3, r2
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <find_volume+0x23c>
 8010730:	230d      	movs	r3, #13
 8010732:	e12b      	b.n	801098c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010736:	3334      	adds	r3, #52	; 0x34
 8010738:	3311      	adds	r3, #17
 801073a:	4618      	mov	r0, r3
 801073c:	f7fe fb38 	bl	800edb0 <ld_word>
 8010740:	4603      	mov	r3, r0
 8010742:	461a      	mov	r2, r3
 8010744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010746:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074a:	891b      	ldrh	r3, [r3, #8]
 801074c:	f003 030f 	and.w	r3, r3, #15
 8010750:	b29b      	uxth	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <find_volume+0x262>
 8010756:	230d      	movs	r3, #13
 8010758:	e118      	b.n	801098c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801075a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075c:	3334      	adds	r3, #52	; 0x34
 801075e:	3313      	adds	r3, #19
 8010760:	4618      	mov	r0, r3
 8010762:	f7fe fb25 	bl	800edb0 <ld_word>
 8010766:	4603      	mov	r3, r0
 8010768:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801076a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801076c:	2b00      	cmp	r3, #0
 801076e:	d106      	bne.n	801077e <find_volume+0x286>
 8010770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010772:	3334      	adds	r3, #52	; 0x34
 8010774:	3320      	adds	r3, #32
 8010776:	4618      	mov	r0, r3
 8010778:	f7fe fb32 	bl	800ede0 <ld_dword>
 801077c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801077e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010780:	3334      	adds	r3, #52	; 0x34
 8010782:	330e      	adds	r3, #14
 8010784:	4618      	mov	r0, r3
 8010786:	f7fe fb13 	bl	800edb0 <ld_word>
 801078a:	4603      	mov	r3, r0
 801078c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801078e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010790:	2b00      	cmp	r3, #0
 8010792:	d101      	bne.n	8010798 <find_volume+0x2a0>
 8010794:	230d      	movs	r3, #13
 8010796:	e0f9      	b.n	801098c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010798:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801079a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079c:	4413      	add	r3, r2
 801079e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107a0:	8912      	ldrh	r2, [r2, #8]
 80107a2:	0912      	lsrs	r2, r2, #4
 80107a4:	b292      	uxth	r2, r2
 80107a6:	4413      	add	r3, r2
 80107a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80107aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d201      	bcs.n	80107b6 <find_volume+0x2be>
 80107b2:	230d      	movs	r3, #13
 80107b4:	e0ea      	b.n	801098c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80107b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ba:	1ad3      	subs	r3, r2, r3
 80107bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107be:	8952      	ldrh	r2, [r2, #10]
 80107c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80107c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80107c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d103      	bne.n	80107d4 <find_volume+0x2dc>
 80107cc:	230d      	movs	r3, #13
 80107ce:	e0dd      	b.n	801098c <find_volume+0x494>
 80107d0:	20000330 	.word	0x20000330
		fmt = FS_FAT32;
 80107d4:	2303      	movs	r3, #3
 80107d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80107da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d802      	bhi.n	80107ea <find_volume+0x2f2>
 80107e4:	2302      	movs	r3, #2
 80107e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d802      	bhi.n	80107fa <find_volume+0x302>
 80107f4:	2301      	movs	r3, #1
 80107f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80107fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fc:	1c9a      	adds	r2, r3, #2
 80107fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010800:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010804:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010806:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010808:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801080a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801080c:	441a      	add	r2, r3
 801080e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010810:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010816:	441a      	add	r2, r3
 8010818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801081c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010820:	2b03      	cmp	r3, #3
 8010822:	d11e      	bne.n	8010862 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010826:	3334      	adds	r3, #52	; 0x34
 8010828:	332a      	adds	r3, #42	; 0x2a
 801082a:	4618      	mov	r0, r3
 801082c:	f7fe fac0 	bl	800edb0 <ld_word>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d001      	beq.n	801083a <find_volume+0x342>
 8010836:	230d      	movs	r3, #13
 8010838:	e0a8      	b.n	801098c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801083a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801083c:	891b      	ldrh	r3, [r3, #8]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <find_volume+0x34e>
 8010842:	230d      	movs	r3, #13
 8010844:	e0a2      	b.n	801098c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010848:	3334      	adds	r3, #52	; 0x34
 801084a:	332c      	adds	r3, #44	; 0x2c
 801084c:	4618      	mov	r0, r3
 801084e:	f7fe fac7 	bl	800ede0 <ld_dword>
 8010852:	4602      	mov	r2, r0
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	699b      	ldr	r3, [r3, #24]
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	647b      	str	r3, [r7, #68]	; 0x44
 8010860:	e01f      	b.n	80108a2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010864:	891b      	ldrh	r3, [r3, #8]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d101      	bne.n	801086e <find_volume+0x376>
 801086a:	230d      	movs	r3, #13
 801086c:	e08e      	b.n	801098c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010874:	441a      	add	r2, r3
 8010876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010878:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801087a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801087e:	2b02      	cmp	r3, #2
 8010880:	d103      	bne.n	801088a <find_volume+0x392>
 8010882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	e00a      	b.n	80108a0 <find_volume+0x3a8>
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	699a      	ldr	r2, [r3, #24]
 801088e:	4613      	mov	r3, r2
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	4413      	add	r3, r2
 8010894:	085a      	lsrs	r2, r3, #1
 8010896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010898:	699b      	ldr	r3, [r3, #24]
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80108a0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80108a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a4:	69da      	ldr	r2, [r3, #28]
 80108a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80108ac:	0a5b      	lsrs	r3, r3, #9
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d201      	bcs.n	80108b6 <find_volume+0x3be>
 80108b2:	230d      	movs	r3, #13
 80108b4:	e06a      	b.n	801098c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80108b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b8:	f04f 32ff 	mov.w	r2, #4294967295
 80108bc:	615a      	str	r2, [r3, #20]
 80108be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c0:	695a      	ldr	r2, [r3, #20]
 80108c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80108c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c8:	2280      	movs	r2, #128	; 0x80
 80108ca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80108cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108d0:	2b03      	cmp	r3, #3
 80108d2:	d149      	bne.n	8010968 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80108d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d6:	3334      	adds	r3, #52	; 0x34
 80108d8:	3330      	adds	r3, #48	; 0x30
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fe fa68 	bl	800edb0 <ld_word>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d140      	bne.n	8010968 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80108e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108e8:	3301      	adds	r3, #1
 80108ea:	4619      	mov	r1, r3
 80108ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108ee:	f7fe fd3f 	bl	800f370 <move_window>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d137      	bne.n	8010968 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80108f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fa:	2200      	movs	r2, #0
 80108fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80108fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010900:	3334      	adds	r3, #52	; 0x34
 8010902:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010906:	4618      	mov	r0, r3
 8010908:	f7fe fa52 	bl	800edb0 <ld_word>
 801090c:	4603      	mov	r3, r0
 801090e:	461a      	mov	r2, r3
 8010910:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010914:	429a      	cmp	r2, r3
 8010916:	d127      	bne.n	8010968 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091a:	3334      	adds	r3, #52	; 0x34
 801091c:	4618      	mov	r0, r3
 801091e:	f7fe fa5f 	bl	800ede0 <ld_dword>
 8010922:	4602      	mov	r2, r0
 8010924:	4b1b      	ldr	r3, [pc, #108]	; (8010994 <find_volume+0x49c>)
 8010926:	429a      	cmp	r2, r3
 8010928:	d11e      	bne.n	8010968 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801092a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092c:	3334      	adds	r3, #52	; 0x34
 801092e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe fa54 	bl	800ede0 <ld_dword>
 8010938:	4602      	mov	r2, r0
 801093a:	4b17      	ldr	r3, [pc, #92]	; (8010998 <find_volume+0x4a0>)
 801093c:	429a      	cmp	r2, r3
 801093e:	d113      	bne.n	8010968 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010942:	3334      	adds	r3, #52	; 0x34
 8010944:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe fa49 	bl	800ede0 <ld_dword>
 801094e:	4602      	mov	r2, r0
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010956:	3334      	adds	r3, #52	; 0x34
 8010958:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801095c:	4618      	mov	r0, r3
 801095e:	f7fe fa3f 	bl	800ede0 <ld_dword>
 8010962:	4602      	mov	r2, r0
 8010964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010966:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801096e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010970:	4b0a      	ldr	r3, [pc, #40]	; (801099c <find_volume+0x4a4>)
 8010972:	881b      	ldrh	r3, [r3, #0]
 8010974:	3301      	adds	r3, #1
 8010976:	b29a      	uxth	r2, r3
 8010978:	4b08      	ldr	r3, [pc, #32]	; (801099c <find_volume+0x4a4>)
 801097a:	801a      	strh	r2, [r3, #0]
 801097c:	4b07      	ldr	r3, [pc, #28]	; (801099c <find_volume+0x4a4>)
 801097e:	881a      	ldrh	r2, [r3, #0]
 8010980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010982:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010984:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010986:	f7fe fc8b 	bl	800f2a0 <clear_lock>
#endif
	return FR_OK;
 801098a:	2300      	movs	r3, #0
}
 801098c:	4618      	mov	r0, r3
 801098e:	3758      	adds	r7, #88	; 0x58
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	41615252 	.word	0x41615252
 8010998:	61417272 	.word	0x61417272
 801099c:	20000334 	.word	0x20000334

080109a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80109aa:	2309      	movs	r3, #9
 80109ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d02e      	beq.n	8010a12 <validate+0x72>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d02a      	beq.n	8010a12 <validate+0x72>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d025      	beq.n	8010a12 <validate+0x72>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	889a      	ldrh	r2, [r3, #4]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	88db      	ldrh	r3, [r3, #6]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d11e      	bne.n	8010a12 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe fae8 	bl	800efae <lock_fs>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d014      	beq.n	8010a0e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	785b      	ldrb	r3, [r3, #1]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe f942 	bl	800ec74 <disk_status>
 80109f0:	4603      	mov	r3, r0
 80109f2:	f003 0301 	and.w	r3, r3, #1
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d102      	bne.n	8010a00 <validate+0x60>
				res = FR_OK;
 80109fa:	2300      	movs	r3, #0
 80109fc:	73fb      	strb	r3, [r7, #15]
 80109fe:	e008      	b.n	8010a12 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2100      	movs	r1, #0
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fe fae7 	bl	800efda <unlock_fs>
 8010a0c:	e001      	b.n	8010a12 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010a0e:	230f      	movs	r3, #15
 8010a10:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010a12:	7bfb      	ldrb	r3, [r7, #15]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d102      	bne.n	8010a1e <validate+0x7e>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	e000      	b.n	8010a20 <validate+0x80>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	6013      	str	r3, [r2, #0]
	return res;
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3710      	adds	r7, #16
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
	...

08010a30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010a42:	f107 0310 	add.w	r3, r7, #16
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff fcbb 	bl	80103c2 <get_ldnumber>
 8010a4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	da01      	bge.n	8010a58 <f_mount+0x28>
 8010a54:	230b      	movs	r3, #11
 8010a56:	e048      	b.n	8010aea <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010a58:	4a26      	ldr	r2, [pc, #152]	; (8010af4 <f_mount+0xc4>)
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00f      	beq.n	8010a88 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010a68:	69b8      	ldr	r0, [r7, #24]
 8010a6a:	f7fe fc19 	bl	800f2a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010a6e:	69bb      	ldr	r3, [r7, #24]
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f001 f828 	bl	8011ac8 <ff_del_syncobj>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d101      	bne.n	8010a82 <f_mount+0x52>
 8010a7e:	2302      	movs	r3, #2
 8010a80:	e033      	b.n	8010aea <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	2200      	movs	r2, #0
 8010a86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00f      	beq.n	8010aae <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2200      	movs	r2, #0
 8010a92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	330c      	adds	r3, #12
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	4610      	mov	r0, r2
 8010aa0:	f000 fff7 	bl	8011a92 <ff_cre_syncobj>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d101      	bne.n	8010aae <f_mount+0x7e>
 8010aaa:	2302      	movs	r3, #2
 8010aac:	e01d      	b.n	8010aea <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	4910      	ldr	r1, [pc, #64]	; (8010af4 <f_mount+0xc4>)
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d002      	beq.n	8010ac4 <f_mount+0x94>
 8010abe:	79fb      	ldrb	r3, [r7, #7]
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d001      	beq.n	8010ac8 <f_mount+0x98>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	e010      	b.n	8010aea <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010ac8:	f107 010c 	add.w	r1, r7, #12
 8010acc:	f107 0308 	add.w	r3, r7, #8
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7ff fd10 	bl	80104f8 <find_volume>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	7dfa      	ldrb	r2, [r7, #23]
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fe fa79 	bl	800efda <unlock_fs>
 8010ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3720      	adds	r7, #32
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	20000330 	.word	0x20000330

08010af8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b09a      	sub	sp, #104	; 0x68
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	4613      	mov	r3, r2
 8010b04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d101      	bne.n	8010b10 <f_open+0x18>
 8010b0c:	2309      	movs	r3, #9
 8010b0e:	e1b4      	b.n	8010e7a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010b10:	79fb      	ldrb	r3, [r7, #7]
 8010b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010b18:	79fa      	ldrb	r2, [r7, #7]
 8010b1a:	f107 0114 	add.w	r1, r7, #20
 8010b1e:	f107 0308 	add.w	r3, r7, #8
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff fce8 	bl	80104f8 <find_volume>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010b2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	f040 8191 	bne.w	8010e5a <f_open+0x362>
		dj.obj.fs = fs;
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010b3c:	68ba      	ldr	r2, [r7, #8]
 8010b3e:	f107 0318 	add.w	r3, r7, #24
 8010b42:	4611      	mov	r1, r2
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff fbcb 	bl	80102e0 <follow_path>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010b50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d11a      	bne.n	8010b8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010b58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010b5c:	b25b      	sxtb	r3, r3
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	da03      	bge.n	8010b6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010b62:	2306      	movs	r3, #6
 8010b64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010b68:	e011      	b.n	8010b8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b6a:	79fb      	ldrb	r3, [r7, #7]
 8010b6c:	f023 0301 	bic.w	r3, r3, #1
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	bf14      	ite	ne
 8010b74:	2301      	movne	r3, #1
 8010b76:	2300      	moveq	r3, #0
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	f107 0318 	add.w	r3, r7, #24
 8010b80:	4611      	mov	r1, r2
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fe fa44 	bl	800f010 <chk_lock>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010b8e:	79fb      	ldrb	r3, [r7, #7]
 8010b90:	f003 031c 	and.w	r3, r3, #28
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d07f      	beq.n	8010c98 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010b98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d017      	beq.n	8010bd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ba4:	2b04      	cmp	r3, #4
 8010ba6:	d10e      	bne.n	8010bc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010ba8:	f7fe fa8e 	bl	800f0c8 <enq_lock>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d006      	beq.n	8010bc0 <f_open+0xc8>
 8010bb2:	f107 0318 	add.w	r3, r7, #24
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7ff f9ca 	bl	800ff50 <dir_register>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	e000      	b.n	8010bc2 <f_open+0xca>
 8010bc0:	2312      	movs	r3, #18
 8010bc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010bc6:	79fb      	ldrb	r3, [r7, #7]
 8010bc8:	f043 0308 	orr.w	r3, r3, #8
 8010bcc:	71fb      	strb	r3, [r7, #7]
 8010bce:	e010      	b.n	8010bf2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010bd0:	7fbb      	ldrb	r3, [r7, #30]
 8010bd2:	f003 0311 	and.w	r3, r3, #17
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d003      	beq.n	8010be2 <f_open+0xea>
					res = FR_DENIED;
 8010bda:	2307      	movs	r3, #7
 8010bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010be0:	e007      	b.n	8010bf2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010be2:	79fb      	ldrb	r3, [r7, #7]
 8010be4:	f003 0304 	and.w	r3, r3, #4
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <f_open+0xfa>
 8010bec:	2308      	movs	r3, #8
 8010bee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d168      	bne.n	8010ccc <f_open+0x1d4>
 8010bfa:	79fb      	ldrb	r3, [r7, #7]
 8010bfc:	f003 0308 	and.w	r3, r3, #8
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d063      	beq.n	8010ccc <f_open+0x1d4>
				dw = GET_FATTIME();
 8010c04:	f7fc f9b4 	bl	800cf70 <get_fattime>
 8010c08:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0c:	330e      	adds	r3, #14
 8010c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe f923 	bl	800ee5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c18:	3316      	adds	r3, #22
 8010c1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fe f91d 	bl	800ee5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c24:	330b      	adds	r3, #11
 8010c26:	2220      	movs	r2, #32
 8010c28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c2e:	4611      	mov	r1, r2
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff f89c 	bl	800fd6e <ld_clust>
 8010c36:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff f8b4 	bl	800fdac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c46:	331c      	adds	r3, #28
 8010c48:	2100      	movs	r1, #0
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fe f906 	bl	800ee5c <st_dword>
					fs->wflag = 1;
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	2201      	movs	r2, #1
 8010c54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d037      	beq.n	8010ccc <f_open+0x1d4>
						dw = fs->winsect;
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c60:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010c62:	f107 0318 	add.w	r3, r7, #24
 8010c66:	2200      	movs	r2, #0
 8010c68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fe fdc7 	bl	800f7fe <remove_chain>
 8010c70:	4603      	mov	r3, r0
 8010c72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010c76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d126      	bne.n	8010ccc <f_open+0x1d4>
							res = move_window(fs, dw);
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fe fb74 	bl	800f370 <move_window>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c92:	3a01      	subs	r2, #1
 8010c94:	611a      	str	r2, [r3, #16]
 8010c96:	e019      	b.n	8010ccc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d115      	bne.n	8010ccc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010ca0:	7fbb      	ldrb	r3, [r7, #30]
 8010ca2:	f003 0310 	and.w	r3, r3, #16
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d003      	beq.n	8010cb2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8010caa:	2304      	movs	r3, #4
 8010cac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010cb0:	e00c      	b.n	8010ccc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010cb2:	79fb      	ldrb	r3, [r7, #7]
 8010cb4:	f003 0302 	and.w	r3, r3, #2
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d007      	beq.n	8010ccc <f_open+0x1d4>
 8010cbc:	7fbb      	ldrb	r3, [r7, #30]
 8010cbe:	f003 0301 	and.w	r3, r3, #1
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d002      	beq.n	8010ccc <f_open+0x1d4>
						res = FR_DENIED;
 8010cc6:	2307      	movs	r3, #7
 8010cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010ccc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d128      	bne.n	8010d26 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010cd4:	79fb      	ldrb	r3, [r7, #7]
 8010cd6:	f003 0308 	and.w	r3, r3, #8
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d003      	beq.n	8010ce6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010cde:	79fb      	ldrb	r3, [r7, #7]
 8010ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
 8010cf6:	f023 0301 	bic.w	r3, r3, #1
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	bf14      	ite	ne
 8010cfe:	2301      	movne	r3, #1
 8010d00:	2300      	moveq	r3, #0
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	461a      	mov	r2, r3
 8010d06:	f107 0318 	add.w	r3, r7, #24
 8010d0a:	4611      	mov	r1, r2
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7fe f9fd 	bl	800f10c <inc_lock>
 8010d12:	4602      	mov	r2, r0
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d102      	bne.n	8010d26 <f_open+0x22e>
 8010d20:	2302      	movs	r3, #2
 8010d22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010d26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f040 8095 	bne.w	8010e5a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d34:	4611      	mov	r1, r2
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7ff f819 	bl	800fd6e <ld_clust>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	331c      	adds	r3, #28
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fe f84a 	bl	800ede0 <ld_dword>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2200      	movs	r2, #0
 8010d56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010d58:	697a      	ldr	r2, [r7, #20]
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	88da      	ldrh	r2, [r3, #6]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	79fa      	ldrb	r2, [r7, #7]
 8010d6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2200      	movs	r2, #0
 8010d76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	3330      	adds	r3, #48	; 0x30
 8010d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d86:	2100      	movs	r1, #0
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fe f8b4 	bl	800eef6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
 8010d90:	f003 0320 	and.w	r3, r3, #32
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d060      	beq.n	8010e5a <f_open+0x362>
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d05c      	beq.n	8010e5a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	68da      	ldr	r2, [r3, #12]
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	895b      	ldrh	r3, [r3, #10]
 8010dac:	025b      	lsls	r3, r3, #9
 8010dae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	689b      	ldr	r3, [r3, #8]
 8010db4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	68db      	ldr	r3, [r3, #12]
 8010dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010dbc:	e016      	b.n	8010dec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fe fb8f 	bl	800f4e6 <get_fat>
 8010dc8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d802      	bhi.n	8010dd6 <f_open+0x2de>
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ddc:	d102      	bne.n	8010de4 <f_open+0x2ec>
 8010dde:	2301      	movs	r3, #1
 8010de0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010de4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010dec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d103      	bne.n	8010dfc <f_open+0x304>
 8010df4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d8e0      	bhi.n	8010dbe <f_open+0x2c6>
				}
				fp->clust = clst;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010e00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010e02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d127      	bne.n	8010e5a <f_open+0x362>
 8010e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d022      	beq.n	8010e5a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe fb45 	bl	800f4a8 <clust2sect>
 8010e1e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d103      	bne.n	8010e2e <f_open+0x336>
						res = FR_INT_ERR;
 8010e26:	2302      	movs	r3, #2
 8010e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010e2c:	e015      	b.n	8010e5a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e30:	0a5a      	lsrs	r2, r3, #9
 8010e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e34:	441a      	add	r2, r3
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	7858      	ldrb	r0, [r3, #1]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	6a1a      	ldr	r2, [r3, #32]
 8010e48:	2301      	movs	r3, #1
 8010e4a:	f7fd ff53 	bl	800ecf4 <disk_read>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <f_open+0x362>
 8010e54:	2301      	movs	r3, #1
 8010e56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010e5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d002      	beq.n	8010e68 <f_open+0x370>
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8010e6e:	4611      	mov	r1, r2
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fe f8b2 	bl	800efda <unlock_fs>
 8010e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3768      	adds	r7, #104	; 0x68
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010e82:	b580      	push	{r7, lr}
 8010e84:	b08c      	sub	sp, #48	; 0x30
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	60f8      	str	r0, [r7, #12]
 8010e8a:	60b9      	str	r1, [r7, #8]
 8010e8c:	607a      	str	r2, [r7, #4]
 8010e8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	2200      	movs	r2, #0
 8010e98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f107 0210 	add.w	r2, r7, #16
 8010ea0:	4611      	mov	r1, r2
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7ff fd7c 	bl	80109a0 <validate>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d107      	bne.n	8010ec6 <f_write+0x44>
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	7d5b      	ldrb	r3, [r3, #21]
 8010eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d009      	beq.n	8010eda <f_write+0x58>
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010ecc:	4611      	mov	r1, r2
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe f883 	bl	800efda <unlock_fs>
 8010ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ed8:	e173      	b.n	80111c2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	7d1b      	ldrb	r3, [r3, #20]
 8010ede:	f003 0302 	and.w	r3, r3, #2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d106      	bne.n	8010ef4 <f_write+0x72>
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	2107      	movs	r1, #7
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fe f875 	bl	800efda <unlock_fs>
 8010ef0:	2307      	movs	r3, #7
 8010ef2:	e166      	b.n	80111c2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	699a      	ldr	r2, [r3, #24]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	441a      	add	r2, r3
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	f080 814b 	bcs.w	801119c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	699b      	ldr	r3, [r3, #24]
 8010f0a:	43db      	mvns	r3, r3
 8010f0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010f0e:	e145      	b.n	801119c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	699b      	ldr	r3, [r3, #24]
 8010f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f040 8101 	bne.w	8011120 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	699b      	ldr	r3, [r3, #24]
 8010f22:	0a5b      	lsrs	r3, r3, #9
 8010f24:	693a      	ldr	r2, [r7, #16]
 8010f26:	8952      	ldrh	r2, [r2, #10]
 8010f28:	3a01      	subs	r2, #1
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d14d      	bne.n	8010fd0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	699b      	ldr	r3, [r3, #24]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10c      	bne.n	8010f56 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d11a      	bne.n	8010f7e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fe fcbb 	bl	800f8c8 <create_chain>
 8010f52:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f54:	e013      	b.n	8010f7e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d007      	beq.n	8010f6e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	4619      	mov	r1, r3
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f7fe fd47 	bl	800f9f8 <clmt_clust>
 8010f6a:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f6c:	e007      	b.n	8010f7e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	69db      	ldr	r3, [r3, #28]
 8010f74:	4619      	mov	r1, r3
 8010f76:	4610      	mov	r0, r2
 8010f78:	f7fe fca6 	bl	800f8c8 <create_chain>
 8010f7c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f000 8110 	beq.w	80111a6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d109      	bne.n	8010fa0 <f_write+0x11e>
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2202      	movs	r2, #2
 8010f90:	755a      	strb	r2, [r3, #21]
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	2102      	movs	r1, #2
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fe f81f 	bl	800efda <unlock_fs>
 8010f9c:	2302      	movs	r3, #2
 8010f9e:	e110      	b.n	80111c2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa6:	d109      	bne.n	8010fbc <f_write+0x13a>
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2201      	movs	r2, #1
 8010fac:	755a      	strb	r2, [r3, #21]
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	2101      	movs	r1, #1
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fe f811 	bl	800efda <unlock_fs>
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e102      	b.n	80111c2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fc0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d102      	bne.n	8010fd0 <f_write+0x14e>
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	7d1b      	ldrb	r3, [r3, #20]
 8010fd4:	b25b      	sxtb	r3, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	da1d      	bge.n	8011016 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	7858      	ldrb	r0, [r3, #1]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6a1a      	ldr	r2, [r3, #32]
 8010fe8:	2301      	movs	r3, #1
 8010fea:	f7fd fea3 	bl	800ed34 <disk_write>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d009      	beq.n	8011008 <f_write+0x186>
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	755a      	strb	r2, [r3, #21]
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fd ffeb 	bl	800efda <unlock_fs>
 8011004:	2301      	movs	r3, #1
 8011006:	e0dc      	b.n	80111c2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	7d1b      	ldrb	r3, [r3, #20]
 801100c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011010:	b2da      	uxtb	r2, r3
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011016:	693a      	ldr	r2, [r7, #16]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	69db      	ldr	r3, [r3, #28]
 801101c:	4619      	mov	r1, r3
 801101e:	4610      	mov	r0, r2
 8011020:	f7fe fa42 	bl	800f4a8 <clust2sect>
 8011024:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d109      	bne.n	8011040 <f_write+0x1be>
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2202      	movs	r2, #2
 8011030:	755a      	strb	r2, [r3, #21]
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	2102      	movs	r1, #2
 8011036:	4618      	mov	r0, r3
 8011038:	f7fd ffcf 	bl	800efda <unlock_fs>
 801103c:	2302      	movs	r3, #2
 801103e:	e0c0      	b.n	80111c2 <f_write+0x340>
			sect += csect;
 8011040:	697a      	ldr	r2, [r7, #20]
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	4413      	add	r3, r2
 8011046:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	0a5b      	lsrs	r3, r3, #9
 801104c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801104e:	6a3b      	ldr	r3, [r7, #32]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d041      	beq.n	80110d8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011054:	69ba      	ldr	r2, [r7, #24]
 8011056:	6a3b      	ldr	r3, [r7, #32]
 8011058:	4413      	add	r3, r2
 801105a:	693a      	ldr	r2, [r7, #16]
 801105c:	8952      	ldrh	r2, [r2, #10]
 801105e:	4293      	cmp	r3, r2
 8011060:	d905      	bls.n	801106e <f_write+0x1ec>
					cc = fs->csize - csect;
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	895b      	ldrh	r3, [r3, #10]
 8011066:	461a      	mov	r2, r3
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	7858      	ldrb	r0, [r3, #1]
 8011072:	6a3b      	ldr	r3, [r7, #32]
 8011074:	697a      	ldr	r2, [r7, #20]
 8011076:	69f9      	ldr	r1, [r7, #28]
 8011078:	f7fd fe5c 	bl	800ed34 <disk_write>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d009      	beq.n	8011096 <f_write+0x214>
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2201      	movs	r2, #1
 8011086:	755a      	strb	r2, [r3, #21]
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	2101      	movs	r1, #1
 801108c:	4618      	mov	r0, r3
 801108e:	f7fd ffa4 	bl	800efda <unlock_fs>
 8011092:	2301      	movs	r3, #1
 8011094:	e095      	b.n	80111c2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6a1a      	ldr	r2, [r3, #32]
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	1ad3      	subs	r3, r2, r3
 801109e:	6a3a      	ldr	r2, [r7, #32]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d915      	bls.n	80110d0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6a1a      	ldr	r2, [r3, #32]
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	1ad3      	subs	r3, r2, r3
 80110b2:	025b      	lsls	r3, r3, #9
 80110b4:	69fa      	ldr	r2, [r7, #28]
 80110b6:	4413      	add	r3, r2
 80110b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80110bc:	4619      	mov	r1, r3
 80110be:	f7fd fef9 	bl	800eeb4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	7d1b      	ldrb	r3, [r3, #20]
 80110c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110ca:	b2da      	uxtb	r2, r3
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80110d0:	6a3b      	ldr	r3, [r7, #32]
 80110d2:	025b      	lsls	r3, r3, #9
 80110d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80110d6:	e044      	b.n	8011162 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6a1b      	ldr	r3, [r3, #32]
 80110dc:	697a      	ldr	r2, [r7, #20]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d01b      	beq.n	801111a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	699a      	ldr	r2, [r3, #24]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d215      	bcs.n	801111a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	7858      	ldrb	r0, [r3, #1]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110f8:	2301      	movs	r3, #1
 80110fa:	697a      	ldr	r2, [r7, #20]
 80110fc:	f7fd fdfa 	bl	800ecf4 <disk_read>
 8011100:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011102:	2b00      	cmp	r3, #0
 8011104:	d009      	beq.n	801111a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2201      	movs	r2, #1
 801110a:	755a      	strb	r2, [r3, #21]
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	2101      	movs	r1, #1
 8011110:	4618      	mov	r0, r3
 8011112:	f7fd ff62 	bl	800efda <unlock_fs>
 8011116:	2301      	movs	r3, #1
 8011118:	e053      	b.n	80111c2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	699b      	ldr	r3, [r3, #24]
 8011124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011128:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801112c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801112e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	429a      	cmp	r2, r3
 8011134:	d901      	bls.n	801113a <f_write+0x2b8>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	699b      	ldr	r3, [r3, #24]
 8011144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011148:	4413      	add	r3, r2
 801114a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801114c:	69f9      	ldr	r1, [r7, #28]
 801114e:	4618      	mov	r0, r3
 8011150:	f7fd feb0 	bl	800eeb4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	7d1b      	ldrb	r3, [r3, #20]
 8011158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801115c:	b2da      	uxtb	r2, r3
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011162:	69fa      	ldr	r2, [r7, #28]
 8011164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011166:	4413      	add	r3, r2
 8011168:	61fb      	str	r3, [r7, #28]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	699a      	ldr	r2, [r3, #24]
 801116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011170:	441a      	add	r2, r3
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	619a      	str	r2, [r3, #24]
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	68da      	ldr	r2, [r3, #12]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	699b      	ldr	r3, [r3, #24]
 801117e:	429a      	cmp	r2, r3
 8011180:	bf38      	it	cc
 8011182:	461a      	movcc	r2, r3
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	60da      	str	r2, [r3, #12]
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	441a      	add	r2, r3
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011198:	1ad3      	subs	r3, r2, r3
 801119a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f47f aeb6 	bne.w	8010f10 <f_write+0x8e>
 80111a4:	e000      	b.n	80111a8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80111a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	7d1b      	ldrb	r3, [r3, #20]
 80111ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	2100      	movs	r1, #0
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7fd ff0d 	bl	800efda <unlock_fs>
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3730      	adds	r7, #48	; 0x30
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b086      	sub	sp, #24
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f107 0208 	add.w	r2, r7, #8
 80111d8:	4611      	mov	r1, r2
 80111da:	4618      	mov	r0, r3
 80111dc:	f7ff fbe0 	bl	80109a0 <validate>
 80111e0:	4603      	mov	r3, r0
 80111e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80111e4:	7dfb      	ldrb	r3, [r7, #23]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d16d      	bne.n	80112c6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	7d1b      	ldrb	r3, [r3, #20]
 80111ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d067      	beq.n	80112c6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	7d1b      	ldrb	r3, [r3, #20]
 80111fa:	b25b      	sxtb	r3, r3
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	da1a      	bge.n	8011236 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	7858      	ldrb	r0, [r3, #1]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6a1a      	ldr	r2, [r3, #32]
 801120e:	2301      	movs	r3, #1
 8011210:	f7fd fd90 	bl	800ed34 <disk_write>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d006      	beq.n	8011228 <f_sync+0x5e>
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2101      	movs	r1, #1
 801121e:	4618      	mov	r0, r3
 8011220:	f7fd fedb 	bl	800efda <unlock_fs>
 8011224:	2301      	movs	r3, #1
 8011226:	e055      	b.n	80112d4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7d1b      	ldrb	r3, [r3, #20]
 801122c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011230:	b2da      	uxtb	r2, r3
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011236:	f7fb fe9b 	bl	800cf70 <get_fattime>
 801123a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801123c:	68ba      	ldr	r2, [r7, #8]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011242:	4619      	mov	r1, r3
 8011244:	4610      	mov	r0, r2
 8011246:	f7fe f893 	bl	800f370 <move_window>
 801124a:	4603      	mov	r3, r0
 801124c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801124e:	7dfb      	ldrb	r3, [r7, #23]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d138      	bne.n	80112c6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011258:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	330b      	adds	r3, #11
 801125e:	781a      	ldrb	r2, [r3, #0]
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	330b      	adds	r3, #11
 8011264:	f042 0220 	orr.w	r2, r2, #32
 8011268:	b2d2      	uxtb	r2, r2
 801126a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6818      	ldr	r0, [r3, #0]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	689b      	ldr	r3, [r3, #8]
 8011274:	461a      	mov	r2, r3
 8011276:	68f9      	ldr	r1, [r7, #12]
 8011278:	f7fe fd98 	bl	800fdac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f103 021c 	add.w	r2, r3, #28
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	4619      	mov	r1, r3
 8011288:	4610      	mov	r0, r2
 801128a:	f7fd fde7 	bl	800ee5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	3316      	adds	r3, #22
 8011292:	6939      	ldr	r1, [r7, #16]
 8011294:	4618      	mov	r0, r3
 8011296:	f7fd fde1 	bl	800ee5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	3312      	adds	r3, #18
 801129e:	2100      	movs	r1, #0
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fd fdc0 	bl	800ee26 <st_word>
					fs->wflag = 1;
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2201      	movs	r2, #1
 80112aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fe f88c 	bl	800f3cc <sync_fs>
 80112b4:	4603      	mov	r3, r0
 80112b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	7d1b      	ldrb	r3, [r3, #20]
 80112bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112c0:	b2da      	uxtb	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	7dfa      	ldrb	r2, [r7, #23]
 80112ca:	4611      	mov	r1, r2
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fd fe84 	bl	800efda <unlock_fs>
 80112d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3718      	adds	r7, #24
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b090      	sub	sp, #64	; 0x40
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f107 0208 	add.w	r2, r7, #8
 80112ec:	4611      	mov	r1, r2
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7ff fb56 	bl	80109a0 <validate>
 80112f4:	4603      	mov	r3, r0
 80112f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80112fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d103      	bne.n	801130a <f_lseek+0x2e>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	7d5b      	ldrb	r3, [r3, #21]
 8011306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801130a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801130e:	2b00      	cmp	r3, #0
 8011310:	d009      	beq.n	8011326 <f_lseek+0x4a>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011318:	4611      	mov	r1, r2
 801131a:	4618      	mov	r0, r3
 801131c:	f7fd fe5d 	bl	800efda <unlock_fs>
 8011320:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011324:	e229      	b.n	801177a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132a:	2b00      	cmp	r3, #0
 801132c:	f000 80ea 	beq.w	8011504 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011336:	d164      	bne.n	8011402 <f_lseek+0x126>
			tbl = fp->cltbl;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	1d1a      	adds	r2, r3, #4
 8011342:	627a      	str	r2, [r7, #36]	; 0x24
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	2302      	movs	r3, #2
 801134a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	689b      	ldr	r3, [r3, #8]
 8011350:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011354:	2b00      	cmp	r3, #0
 8011356:	d044      	beq.n	80113e2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135a:	613b      	str	r3, [r7, #16]
 801135c:	2300      	movs	r3, #0
 801135e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011362:	3302      	adds	r3, #2
 8011364:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	60fb      	str	r3, [r7, #12]
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	3301      	adds	r3, #1
 801136e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011374:	4618      	mov	r0, r3
 8011376:	f7fe f8b6 	bl	800f4e6 <get_fat>
 801137a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137e:	2b01      	cmp	r3, #1
 8011380:	d809      	bhi.n	8011396 <f_lseek+0xba>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2202      	movs	r2, #2
 8011386:	755a      	strb	r2, [r3, #21]
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	2102      	movs	r1, #2
 801138c:	4618      	mov	r0, r3
 801138e:	f7fd fe24 	bl	800efda <unlock_fs>
 8011392:	2302      	movs	r3, #2
 8011394:	e1f1      	b.n	801177a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801139c:	d109      	bne.n	80113b2 <f_lseek+0xd6>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2201      	movs	r2, #1
 80113a2:	755a      	strb	r2, [r3, #21]
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	2101      	movs	r1, #1
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fd fe16 	bl	800efda <unlock_fs>
 80113ae:	2301      	movs	r3, #1
 80113b0:	e1e3      	b.n	801177a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3301      	adds	r3, #1
 80113b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d0d4      	beq.n	8011366 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80113bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d809      	bhi.n	80113d8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80113c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c6:	1d1a      	adds	r2, r3, #4
 80113c8:	627a      	str	r2, [r7, #36]	; 0x24
 80113ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113cc:	601a      	str	r2, [r3, #0]
 80113ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d0:	1d1a      	adds	r2, r3, #4
 80113d2:	627a      	str	r2, [r7, #36]	; 0x24
 80113d4:	693a      	ldr	r2, [r7, #16]
 80113d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	699b      	ldr	r3, [r3, #24]
 80113dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113de:	429a      	cmp	r2, r3
 80113e0:	d3ba      	bcc.n	8011358 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80113ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d803      	bhi.n	80113fa <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	2200      	movs	r2, #0
 80113f6:	601a      	str	r2, [r3, #0]
 80113f8:	e1b6      	b.n	8011768 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80113fa:	2311      	movs	r3, #17
 80113fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011400:	e1b2      	b.n	8011768 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	429a      	cmp	r2, r3
 801140a:	d902      	bls.n	8011412 <f_lseek+0x136>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	683a      	ldr	r2, [r7, #0]
 8011416:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	f000 81a4 	beq.w	8011768 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	3b01      	subs	r3, #1
 8011424:	4619      	mov	r1, r3
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f7fe fae6 	bl	800f9f8 <clmt_clust>
 801142c:	4602      	mov	r2, r0
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011432:	68ba      	ldr	r2, [r7, #8]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	69db      	ldr	r3, [r3, #28]
 8011438:	4619      	mov	r1, r3
 801143a:	4610      	mov	r0, r2
 801143c:	f7fe f834 	bl	800f4a8 <clust2sect>
 8011440:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d109      	bne.n	801145c <f_lseek+0x180>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2202      	movs	r2, #2
 801144c:	755a      	strb	r2, [r3, #21]
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	2102      	movs	r1, #2
 8011452:	4618      	mov	r0, r3
 8011454:	f7fd fdc1 	bl	800efda <unlock_fs>
 8011458:	2302      	movs	r3, #2
 801145a:	e18e      	b.n	801177a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	3b01      	subs	r3, #1
 8011460:	0a5b      	lsrs	r3, r3, #9
 8011462:	68ba      	ldr	r2, [r7, #8]
 8011464:	8952      	ldrh	r2, [r2, #10]
 8011466:	3a01      	subs	r2, #1
 8011468:	4013      	ands	r3, r2
 801146a:	69ba      	ldr	r2, [r7, #24]
 801146c:	4413      	add	r3, r2
 801146e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011478:	2b00      	cmp	r3, #0
 801147a:	f000 8175 	beq.w	8011768 <f_lseek+0x48c>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	69ba      	ldr	r2, [r7, #24]
 8011484:	429a      	cmp	r2, r3
 8011486:	f000 816f 	beq.w	8011768 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	7d1b      	ldrb	r3, [r3, #20]
 801148e:	b25b      	sxtb	r3, r3
 8011490:	2b00      	cmp	r3, #0
 8011492:	da1d      	bge.n	80114d0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	7858      	ldrb	r0, [r3, #1]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a1a      	ldr	r2, [r3, #32]
 80114a2:	2301      	movs	r3, #1
 80114a4:	f7fd fc46 	bl	800ed34 <disk_write>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d009      	beq.n	80114c2 <f_lseek+0x1e6>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2201      	movs	r2, #1
 80114b2:	755a      	strb	r2, [r3, #21]
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	2101      	movs	r1, #1
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fd fd8e 	bl	800efda <unlock_fs>
 80114be:	2301      	movs	r3, #1
 80114c0:	e15b      	b.n	801177a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7d1b      	ldrb	r3, [r3, #20]
 80114c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114ca:	b2da      	uxtb	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	7858      	ldrb	r0, [r3, #1]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114da:	2301      	movs	r3, #1
 80114dc:	69ba      	ldr	r2, [r7, #24]
 80114de:	f7fd fc09 	bl	800ecf4 <disk_read>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d009      	beq.n	80114fc <f_lseek+0x220>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2201      	movs	r2, #1
 80114ec:	755a      	strb	r2, [r3, #21]
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	2101      	movs	r1, #1
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fd fd71 	bl	800efda <unlock_fs>
 80114f8:	2301      	movs	r3, #1
 80114fa:	e13e      	b.n	801177a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	69ba      	ldr	r2, [r7, #24]
 8011500:	621a      	str	r2, [r3, #32]
 8011502:	e131      	b.n	8011768 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	683a      	ldr	r2, [r7, #0]
 801150a:	429a      	cmp	r2, r3
 801150c:	d908      	bls.n	8011520 <f_lseek+0x244>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	7d1b      	ldrb	r3, [r3, #20]
 8011512:	f003 0302 	and.w	r3, r3, #2
 8011516:	2b00      	cmp	r3, #0
 8011518:	d102      	bne.n	8011520 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	699b      	ldr	r3, [r3, #24]
 8011524:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011526:	2300      	movs	r3, #0
 8011528:	637b      	str	r3, [r7, #52]	; 0x34
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801152e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	f000 80c0 	beq.w	80116b8 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	895b      	ldrh	r3, [r3, #10]
 801153c:	025b      	lsls	r3, r3, #9
 801153e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011540:	6a3b      	ldr	r3, [r7, #32]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d01b      	beq.n	801157e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	1e5a      	subs	r2, r3, #1
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011550:	6a3b      	ldr	r3, [r7, #32]
 8011552:	1e59      	subs	r1, r3, #1
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801155a:	429a      	cmp	r2, r3
 801155c:	d30f      	bcc.n	801157e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801155e:	6a3b      	ldr	r3, [r7, #32]
 8011560:	1e5a      	subs	r2, r3, #1
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	425b      	negs	r3, r3
 8011566:	401a      	ands	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	699b      	ldr	r3, [r3, #24]
 8011570:	683a      	ldr	r2, [r7, #0]
 8011572:	1ad3      	subs	r3, r2, r3
 8011574:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	69db      	ldr	r3, [r3, #28]
 801157a:	63bb      	str	r3, [r7, #56]	; 0x38
 801157c:	e02c      	b.n	80115d8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011586:	2b00      	cmp	r3, #0
 8011588:	d123      	bne.n	80115d2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2100      	movs	r1, #0
 801158e:	4618      	mov	r0, r3
 8011590:	f7fe f99a 	bl	800f8c8 <create_chain>
 8011594:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011598:	2b01      	cmp	r3, #1
 801159a:	d109      	bne.n	80115b0 <f_lseek+0x2d4>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2202      	movs	r2, #2
 80115a0:	755a      	strb	r2, [r3, #21]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2102      	movs	r1, #2
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fd fd17 	bl	800efda <unlock_fs>
 80115ac:	2302      	movs	r3, #2
 80115ae:	e0e4      	b.n	801177a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80115b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b6:	d109      	bne.n	80115cc <f_lseek+0x2f0>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2201      	movs	r2, #1
 80115bc:	755a      	strb	r2, [r3, #21]
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2101      	movs	r1, #1
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7fd fd09 	bl	800efda <unlock_fs>
 80115c8:	2301      	movs	r3, #1
 80115ca:	e0d6      	b.n	801177a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115d0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115d6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80115d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d06c      	beq.n	80116b8 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80115de:	e044      	b.n	801166a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80115e0:	683a      	ldr	r2, [r7, #0]
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	1ad3      	subs	r3, r2, r3
 80115e6:	603b      	str	r3, [r7, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	699a      	ldr	r2, [r3, #24]
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	441a      	add	r2, r3
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	7d1b      	ldrb	r3, [r3, #20]
 80115f8:	f003 0302 	and.w	r3, r3, #2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00b      	beq.n	8011618 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011604:	4618      	mov	r0, r3
 8011606:	f7fe f95f 	bl	800f8c8 <create_chain>
 801160a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801160c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160e:	2b00      	cmp	r3, #0
 8011610:	d108      	bne.n	8011624 <f_lseek+0x348>
							ofs = 0; break;
 8011612:	2300      	movs	r3, #0
 8011614:	603b      	str	r3, [r7, #0]
 8011616:	e02c      	b.n	8011672 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801161c:	4618      	mov	r0, r3
 801161e:	f7fd ff62 	bl	800f4e6 <get_fat>
 8011622:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801162a:	d109      	bne.n	8011640 <f_lseek+0x364>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2201      	movs	r2, #1
 8011630:	755a      	strb	r2, [r3, #21]
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	2101      	movs	r1, #1
 8011636:	4618      	mov	r0, r3
 8011638:	f7fd fccf 	bl	800efda <unlock_fs>
 801163c:	2301      	movs	r3, #1
 801163e:	e09c      	b.n	801177a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	2b01      	cmp	r3, #1
 8011644:	d904      	bls.n	8011650 <f_lseek+0x374>
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	699b      	ldr	r3, [r3, #24]
 801164a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801164c:	429a      	cmp	r2, r3
 801164e:	d309      	bcc.n	8011664 <f_lseek+0x388>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2202      	movs	r2, #2
 8011654:	755a      	strb	r2, [r3, #21]
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	2102      	movs	r1, #2
 801165a:	4618      	mov	r0, r3
 801165c:	f7fd fcbd 	bl	800efda <unlock_fs>
 8011660:	2302      	movs	r3, #2
 8011662:	e08a      	b.n	801177a <f_lseek+0x49e>
					fp->clust = clst;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011668:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801166a:	683a      	ldr	r2, [r7, #0]
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	429a      	cmp	r2, r3
 8011670:	d8b6      	bhi.n	80115e0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	699a      	ldr	r2, [r3, #24]
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	441a      	add	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011684:	2b00      	cmp	r3, #0
 8011686:	d017      	beq.n	80116b8 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801168c:	4618      	mov	r0, r3
 801168e:	f7fd ff0b 	bl	800f4a8 <clust2sect>
 8011692:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011696:	2b00      	cmp	r3, #0
 8011698:	d109      	bne.n	80116ae <f_lseek+0x3d2>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2202      	movs	r2, #2
 801169e:	755a      	strb	r2, [r3, #21]
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	2102      	movs	r1, #2
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7fd fc98 	bl	800efda <unlock_fs>
 80116aa:	2302      	movs	r3, #2
 80116ac:	e065      	b.n	801177a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	0a5b      	lsrs	r3, r3, #9
 80116b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116b4:	4413      	add	r3, r2
 80116b6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	699a      	ldr	r2, [r3, #24]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d90a      	bls.n	80116da <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	699a      	ldr	r2, [r3, #24]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	7d1b      	ldrb	r3, [r3, #20]
 80116d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	699b      	ldr	r3, [r3, #24]
 80116de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d040      	beq.n	8011768 <f_lseek+0x48c>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6a1b      	ldr	r3, [r3, #32]
 80116ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d03b      	beq.n	8011768 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	7d1b      	ldrb	r3, [r3, #20]
 80116f4:	b25b      	sxtb	r3, r3
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	da1d      	bge.n	8011736 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	7858      	ldrb	r0, [r3, #1]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a1a      	ldr	r2, [r3, #32]
 8011708:	2301      	movs	r3, #1
 801170a:	f7fd fb13 	bl	800ed34 <disk_write>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d009      	beq.n	8011728 <f_lseek+0x44c>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2201      	movs	r2, #1
 8011718:	755a      	strb	r2, [r3, #21]
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	2101      	movs	r1, #1
 801171e:	4618      	mov	r0, r3
 8011720:	f7fd fc5b 	bl	800efda <unlock_fs>
 8011724:	2301      	movs	r3, #1
 8011726:	e028      	b.n	801177a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	7d1b      	ldrb	r3, [r3, #20]
 801172c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011730:	b2da      	uxtb	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	7858      	ldrb	r0, [r3, #1]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011740:	2301      	movs	r3, #1
 8011742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011744:	f7fd fad6 	bl	800ecf4 <disk_read>
 8011748:	4603      	mov	r3, r0
 801174a:	2b00      	cmp	r3, #0
 801174c:	d009      	beq.n	8011762 <f_lseek+0x486>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2201      	movs	r2, #1
 8011752:	755a      	strb	r2, [r3, #21]
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	2101      	movs	r1, #1
 8011758:	4618      	mov	r0, r3
 801175a:	f7fd fc3e 	bl	800efda <unlock_fs>
 801175e:	2301      	movs	r3, #1
 8011760:	e00b      	b.n	801177a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011766:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801176e:	4611      	mov	r1, r2
 8011770:	4618      	mov	r0, r3
 8011772:	f7fd fc32 	bl	800efda <unlock_fs>
 8011776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801177a:	4618      	mov	r0, r3
 801177c:	3740      	adds	r7, #64	; 0x40
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}

08011782 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b086      	sub	sp, #24
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
 801178a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d101      	bne.n	8011796 <f_opendir+0x14>
 8011792:	2309      	movs	r3, #9
 8011794:	e06a      	b.n	801186c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801179a:	f107 010c 	add.w	r1, r7, #12
 801179e:	463b      	mov	r3, r7
 80117a0:	2200      	movs	r2, #0
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fe fea8 	bl	80104f8 <find_volume>
 80117a8:	4603      	mov	r3, r0
 80117aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d14f      	bne.n	8011852 <f_opendir+0xd0>
		obj->fs = fs;
 80117b2:	68fa      	ldr	r2, [r7, #12]
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	4619      	mov	r1, r3
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f7fe fd8f 	bl	80102e0 <follow_path>
 80117c2:	4603      	mov	r3, r0
 80117c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80117c6:	7dfb      	ldrb	r3, [r7, #23]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d13d      	bne.n	8011848 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80117d2:	b25b      	sxtb	r3, r3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	db12      	blt.n	80117fe <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	799b      	ldrb	r3, [r3, #6]
 80117dc:	f003 0310 	and.w	r3, r3, #16
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00a      	beq.n	80117fa <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80117e4:	68fa      	ldr	r2, [r7, #12]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a1b      	ldr	r3, [r3, #32]
 80117ea:	4619      	mov	r1, r3
 80117ec:	4610      	mov	r0, r2
 80117ee:	f7fe fabe 	bl	800fd6e <ld_clust>
 80117f2:	4602      	mov	r2, r0
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	609a      	str	r2, [r3, #8]
 80117f8:	e001      	b.n	80117fe <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80117fa:	2305      	movs	r3, #5
 80117fc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80117fe:	7dfb      	ldrb	r3, [r7, #23]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d121      	bne.n	8011848 <f_opendir+0xc6>
				obj->id = fs->id;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	88da      	ldrh	r2, [r3, #6]
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801180c:	2100      	movs	r1, #0
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7fe f926 	bl	800fa60 <dir_sdi>
 8011814:	4603      	mov	r3, r0
 8011816:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011818:	7dfb      	ldrb	r3, [r7, #23]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d114      	bne.n	8011848 <f_opendir+0xc6>
					if (obj->sclust) {
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00d      	beq.n	8011842 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011826:	2100      	movs	r1, #0
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7fd fc6f 	bl	800f10c <inc_lock>
 801182e:	4602      	mov	r2, r0
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	691b      	ldr	r3, [r3, #16]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d105      	bne.n	8011848 <f_opendir+0xc6>
 801183c:	2312      	movs	r3, #18
 801183e:	75fb      	strb	r3, [r7, #23]
 8011840:	e002      	b.n	8011848 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	2200      	movs	r2, #0
 8011846:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011848:	7dfb      	ldrb	r3, [r7, #23]
 801184a:	2b04      	cmp	r3, #4
 801184c:	d101      	bne.n	8011852 <f_opendir+0xd0>
 801184e:	2305      	movs	r3, #5
 8011850:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011852:	7dfb      	ldrb	r3, [r7, #23]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d002      	beq.n	801185e <f_opendir+0xdc>
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	2200      	movs	r2, #0
 801185c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	7dfa      	ldrb	r2, [r7, #23]
 8011862:	4611      	mov	r1, r2
 8011864:	4618      	mov	r0, r3
 8011866:	f7fd fbb8 	bl	800efda <unlock_fs>
 801186a:	7dfb      	ldrb	r3, [r7, #23]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3718      	adds	r7, #24
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f107 0208 	add.w	r2, r7, #8
 8011882:	4611      	mov	r1, r2
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff f88b 	bl	80109a0 <validate>
 801188a:	4603      	mov	r3, r0
 801188c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801188e:	7bfb      	ldrb	r3, [r7, #15]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d115      	bne.n	80118c0 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	691b      	ldr	r3, [r3, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d006      	beq.n	80118aa <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	691b      	ldr	r3, [r3, #16]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fd fcc1 	bl	800f228 <dec_lock>
 80118a6:	4603      	mov	r3, r0
 80118a8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80118aa:	7bfb      	ldrb	r3, [r7, #15]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d102      	bne.n	80118b6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2100      	movs	r1, #0
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fd fb8d 	bl	800efda <unlock_fs>
#endif
	}
	return res;
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b084      	sub	sp, #16
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f107 0208 	add.w	r2, r7, #8
 80118da:	4611      	mov	r1, r2
 80118dc:	4618      	mov	r0, r3
 80118de:	f7ff f85f 	bl	80109a0 <validate>
 80118e2:	4603      	mov	r3, r0
 80118e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80118e6:	7bfb      	ldrb	r3, [r7, #15]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d126      	bne.n	801193a <f_readdir+0x70>
		if (!fno) {
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d106      	bne.n	8011900 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80118f2:	2100      	movs	r1, #0
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7fe f8b3 	bl	800fa60 <dir_sdi>
 80118fa:	4603      	mov	r3, r0
 80118fc:	73fb      	strb	r3, [r7, #15]
 80118fe:	e01c      	b.n	801193a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011900:	2100      	movs	r1, #0
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7fe fa72 	bl	800fdec <dir_read>
 8011908:	4603      	mov	r3, r0
 801190a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801190c:	7bfb      	ldrb	r3, [r7, #15]
 801190e:	2b04      	cmp	r3, #4
 8011910:	d101      	bne.n	8011916 <f_readdir+0x4c>
 8011912:	2300      	movs	r3, #0
 8011914:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011916:	7bfb      	ldrb	r3, [r7, #15]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10e      	bne.n	801193a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801191c:	6839      	ldr	r1, [r7, #0]
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7fe fb48 	bl	800ffb4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011924:	2100      	movs	r1, #0
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7fe f915 	bl	800fb56 <dir_next>
 801192c:	4603      	mov	r3, r0
 801192e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011930:	7bfb      	ldrb	r3, [r7, #15]
 8011932:	2b04      	cmp	r3, #4
 8011934:	d101      	bne.n	801193a <f_readdir+0x70>
 8011936:	2300      	movs	r3, #0
 8011938:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	7bfa      	ldrb	r2, [r7, #15]
 801193e:	4611      	mov	r1, r2
 8011940:	4618      	mov	r0, r3
 8011942:	f7fd fb4a 	bl	800efda <unlock_fs>
 8011946:	7bfb      	ldrb	r3, [r7, #15]
}
 8011948:	4618      	mov	r0, r3
 801194a:	3710      	adds	r7, #16
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801195a:	6839      	ldr	r1, [r7, #0]
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7ff ffb4 	bl	80118ca <f_readdir>
 8011962:	4603      	mov	r3, r0
 8011964:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8011966:	7bfb      	ldrb	r3, [r7, #15]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d114      	bne.n	8011996 <f_findnext+0x46>
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d011      	beq.n	8011996 <f_findnext+0x46>
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	7a5b      	ldrb	r3, [r3, #9]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d00d      	beq.n	8011996 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	f103 0109 	add.w	r1, r3, #9
 8011984:	2300      	movs	r3, #0
 8011986:	2200      	movs	r2, #0
 8011988:	f7fe fb9a 	bl	80100c0 <pattern_matching>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d100      	bne.n	8011994 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8011992:	e7e2      	b.n	801195a <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8011994:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8011996:	7bfb      	ldrb	r3, [r7, #15]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b086      	sub	sp, #24
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	607a      	str	r2, [r7, #4]
 80119ac:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	683a      	ldr	r2, [r7, #0]
 80119b2:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80119b4:	6879      	ldr	r1, [r7, #4]
 80119b6:	68f8      	ldr	r0, [r7, #12]
 80119b8:	f7ff fee3 	bl	8011782 <f_opendir>
 80119bc:	4603      	mov	r3, r0
 80119be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80119c0:	7dfb      	ldrb	r3, [r7, #23]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d105      	bne.n	80119d2 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 80119c6:	68b9      	ldr	r1, [r7, #8]
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	f7ff ffc1 	bl	8011950 <f_findnext>
 80119ce:	4603      	mov	r3, r0
 80119d0:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80119d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80119dc:	b480      	push	{r7}
 80119de:	b087      	sub	sp, #28
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	60f8      	str	r0, [r7, #12]
 80119e4:	60b9      	str	r1, [r7, #8]
 80119e6:	4613      	mov	r3, r2
 80119e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80119ea:	2301      	movs	r3, #1
 80119ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80119f2:	4b1f      	ldr	r3, [pc, #124]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 80119f4:	7a5b      	ldrb	r3, [r3, #9]
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d131      	bne.n	8011a60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80119fc:	4b1c      	ldr	r3, [pc, #112]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 80119fe:	7a5b      	ldrb	r3, [r3, #9]
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	461a      	mov	r2, r3
 8011a04:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 8011a06:	2100      	movs	r1, #0
 8011a08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a0a:	4b19      	ldr	r3, [pc, #100]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 8011a0c:	7a5b      	ldrb	r3, [r3, #9]
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	4a17      	ldr	r2, [pc, #92]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	4413      	add	r3, r2
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a1a:	4b15      	ldr	r3, [pc, #84]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 8011a1c:	7a5b      	ldrb	r3, [r3, #9]
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	461a      	mov	r2, r3
 8011a22:	4b13      	ldr	r3, [pc, #76]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 8011a24:	4413      	add	r3, r2
 8011a26:	79fa      	ldrb	r2, [r7, #7]
 8011a28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a2a:	4b11      	ldr	r3, [pc, #68]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 8011a2c:	7a5b      	ldrb	r3, [r3, #9]
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	1c5a      	adds	r2, r3, #1
 8011a32:	b2d1      	uxtb	r1, r2
 8011a34:	4a0e      	ldr	r2, [pc, #56]	; (8011a70 <FATFS_LinkDriverEx+0x94>)
 8011a36:	7251      	strb	r1, [r2, #9]
 8011a38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a3a:	7dbb      	ldrb	r3, [r7, #22]
 8011a3c:	3330      	adds	r3, #48	; 0x30
 8011a3e:	b2da      	uxtb	r2, r3
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	3301      	adds	r3, #1
 8011a48:	223a      	movs	r2, #58	; 0x3a
 8011a4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	3302      	adds	r3, #2
 8011a50:	222f      	movs	r2, #47	; 0x2f
 8011a52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	3303      	adds	r3, #3
 8011a58:	2200      	movs	r2, #0
 8011a5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	371c      	adds	r7, #28
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop
 8011a70:	20000358 	.word	0x20000358

08011a74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a7e:	2200      	movs	r2, #0
 8011a80:	6839      	ldr	r1, [r7, #0]
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f7ff ffaa 	bl	80119dc <FATFS_LinkDriverEx>
 8011a88:	4603      	mov	r3, r0
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b084      	sub	sp, #16
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	4603      	mov	r3, r0
 8011a9a:	6039      	str	r1, [r7, #0]
 8011a9c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	2001      	movs	r0, #1
 8011aa4:	f000 fb8e 	bl	80121c4 <osSemaphoreNew>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	bf14      	ite	ne
 8011ab6:	2301      	movne	r3, #1
 8011ab8:	2300      	moveq	r3, #0
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	60fb      	str	r3, [r7, #12]

    return ret;
 8011abe:	68fb      	ldr	r3, [r7, #12]
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fcd3 	bl	801247c <osSemaphoreDelete>
#endif
    return 1;
 8011ad6:	2301      	movs	r3, #1
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3708      	adds	r7, #8
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}

08011ae0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b084      	sub	sp, #16
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011aec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 fc05 	bl	8012300 <osSemaphoreAcquire>
 8011af6:	4603      	mov	r3, r0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d101      	bne.n	8011b00 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8011afc:	2301      	movs	r3, #1
 8011afe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011b00:	68fb      	ldr	r3, [r7, #12]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011b0a:	b580      	push	{r7, lr}
 8011b0c:	b082      	sub	sp, #8
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 fc5a 	bl	80123cc <osSemaphoreRelease>
#endif
}
 8011b18:	bf00      	nop
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011b20:	b480      	push	{r7}
 8011b22:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011b24:	bf00      	nop
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
	...

08011b30 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b36:	f3ef 8305 	mrs	r3, IPSR
 8011b3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d10f      	bne.n	8011b62 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b42:	f3ef 8310 	mrs	r3, PRIMASK
 8011b46:	607b      	str	r3, [r7, #4]
  return(result);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d105      	bne.n	8011b5a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8011b52:	603b      	str	r3, [r7, #0]
  return(result);
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d007      	beq.n	8011b6a <osKernelInitialize+0x3a>
 8011b5a:	4b0e      	ldr	r3, [pc, #56]	; (8011b94 <osKernelInitialize+0x64>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	d103      	bne.n	8011b6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011b62:	f06f 0305 	mvn.w	r3, #5
 8011b66:	60fb      	str	r3, [r7, #12]
 8011b68:	e00c      	b.n	8011b84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011b6a:	4b0a      	ldr	r3, [pc, #40]	; (8011b94 <osKernelInitialize+0x64>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d105      	bne.n	8011b7e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011b72:	4b08      	ldr	r3, [pc, #32]	; (8011b94 <osKernelInitialize+0x64>)
 8011b74:	2201      	movs	r2, #1
 8011b76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	60fb      	str	r3, [r7, #12]
 8011b7c:	e002      	b.n	8011b84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011b84:	68fb      	ldr	r3, [r7, #12]
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3714      	adds	r7, #20
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	20000364 	.word	0x20000364

08011b98 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011b9e:	f002 fec5 	bl	801492c <xTaskGetSchedulerState>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d004      	beq.n	8011bb2 <osKernelGetState+0x1a>
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	d105      	bne.n	8011bb8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011bac:	2302      	movs	r3, #2
 8011bae:	607b      	str	r3, [r7, #4]
      break;
 8011bb0:	e00c      	b.n	8011bcc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011bb2:	2303      	movs	r3, #3
 8011bb4:	607b      	str	r3, [r7, #4]
      break;
 8011bb6:	e009      	b.n	8011bcc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011bb8:	4b07      	ldr	r3, [pc, #28]	; (8011bd8 <osKernelGetState+0x40>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d102      	bne.n	8011bc6 <osKernelGetState+0x2e>
        state = osKernelReady;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011bc4:	e001      	b.n	8011bca <osKernelGetState+0x32>
        state = osKernelInactive;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	607b      	str	r3, [r7, #4]
      break;
 8011bca:	bf00      	nop
  }

  return (state);
 8011bcc:	687b      	ldr	r3, [r7, #4]
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3708      	adds	r7, #8
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	20000364 	.word	0x20000364

08011bdc <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011be2:	f3ef 8305 	mrs	r3, IPSR
 8011be6:	60bb      	str	r3, [r7, #8]
  return(result);
 8011be8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d10f      	bne.n	8011c0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bee:	f3ef 8310 	mrs	r3, PRIMASK
 8011bf2:	607b      	str	r3, [r7, #4]
  return(result);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d105      	bne.n	8011c06 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8011bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d007      	beq.n	8011c16 <osKernelStart+0x3a>
 8011c06:	4b0f      	ldr	r3, [pc, #60]	; (8011c44 <osKernelStart+0x68>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b02      	cmp	r3, #2
 8011c0c:	d103      	bne.n	8011c16 <osKernelStart+0x3a>
    stat = osErrorISR;
 8011c0e:	f06f 0305 	mvn.w	r3, #5
 8011c12:	60fb      	str	r3, [r7, #12]
 8011c14:	e010      	b.n	8011c38 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011c16:	4b0b      	ldr	r3, [pc, #44]	; (8011c44 <osKernelStart+0x68>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d109      	bne.n	8011c32 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011c1e:	f7ff ff7f 	bl	8011b20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011c22:	4b08      	ldr	r3, [pc, #32]	; (8011c44 <osKernelStart+0x68>)
 8011c24:	2202      	movs	r2, #2
 8011c26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011c28:	f002 fa12 	bl	8014050 <vTaskStartScheduler>
      stat = osOK;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	60fb      	str	r3, [r7, #12]
 8011c30:	e002      	b.n	8011c38 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011c32:	f04f 33ff 	mov.w	r3, #4294967295
 8011c36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011c38:	68fb      	ldr	r3, [r7, #12]
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	20000364 	.word	0x20000364

08011c48 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c4e:	f3ef 8305 	mrs	r3, IPSR
 8011c52:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c54:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d10f      	bne.n	8011c7a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c5e:	607b      	str	r3, [r7, #4]
  return(result);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d105      	bne.n	8011c72 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011c66:	f3ef 8311 	mrs	r3, BASEPRI
 8011c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d007      	beq.n	8011c82 <osKernelGetTickCount+0x3a>
 8011c72:	4b08      	ldr	r3, [pc, #32]	; (8011c94 <osKernelGetTickCount+0x4c>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	2b02      	cmp	r3, #2
 8011c78:	d103      	bne.n	8011c82 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8011c7a:	f002 fb0d 	bl	8014298 <xTaskGetTickCountFromISR>
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	e002      	b.n	8011c88 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011c82:	f002 faf9 	bl	8014278 <xTaskGetTickCount>
 8011c86:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8011c88:	68fb      	ldr	r3, [r7, #12]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	20000364 	.word	0x20000364

08011c98 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8011c98:	b480      	push	{r7}
 8011c9a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8011c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
	...

08011cac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b090      	sub	sp, #64	; 0x40
 8011cb0:	af04      	add	r7, sp, #16
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	60b9      	str	r1, [r7, #8]
 8011cb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cbc:	f3ef 8305 	mrs	r3, IPSR
 8011cc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8011cc2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f040 808f 	bne.w	8011de8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cca:	f3ef 8310 	mrs	r3, PRIMASK
 8011cce:	61bb      	str	r3, [r7, #24]
  return(result);
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d105      	bne.n	8011ce2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8011cda:	617b      	str	r3, [r7, #20]
  return(result);
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d003      	beq.n	8011cea <osThreadNew+0x3e>
 8011ce2:	4b44      	ldr	r3, [pc, #272]	; (8011df4 <osThreadNew+0x148>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2b02      	cmp	r3, #2
 8011ce8:	d07e      	beq.n	8011de8 <osThreadNew+0x13c>
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d07b      	beq.n	8011de8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011cf0:	2380      	movs	r3, #128	; 0x80
 8011cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011cf4:	2318      	movs	r3, #24
 8011cf6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011d00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d045      	beq.n	8011d94 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <osThreadNew+0x6a>
        name = attr->name;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	699b      	ldr	r3, [r3, #24]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d002      	beq.n	8011d24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	699b      	ldr	r3, [r3, #24]
 8011d22:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d008      	beq.n	8011d3c <osThreadNew+0x90>
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	2b38      	cmp	r3, #56	; 0x38
 8011d2e:	d805      	bhi.n	8011d3c <osThreadNew+0x90>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	f003 0301 	and.w	r3, r3, #1
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <osThreadNew+0x94>
        return (NULL);
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	e054      	b.n	8011dea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	695b      	ldr	r3, [r3, #20]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d003      	beq.n	8011d50 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	695b      	ldr	r3, [r3, #20]
 8011d4c:	089b      	lsrs	r3, r3, #2
 8011d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d00e      	beq.n	8011d76 <osThreadNew+0xca>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	2b5b      	cmp	r3, #91	; 0x5b
 8011d5e:	d90a      	bls.n	8011d76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d006      	beq.n	8011d76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	695b      	ldr	r3, [r3, #20]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <osThreadNew+0xca>
        mem = 1;
 8011d70:	2301      	movs	r3, #1
 8011d72:	623b      	str	r3, [r7, #32]
 8011d74:	e010      	b.n	8011d98 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	689b      	ldr	r3, [r3, #8]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10c      	bne.n	8011d98 <osThreadNew+0xec>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d108      	bne.n	8011d98 <osThreadNew+0xec>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	691b      	ldr	r3, [r3, #16]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d104      	bne.n	8011d98 <osThreadNew+0xec>
          mem = 0;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	623b      	str	r3, [r7, #32]
 8011d92:	e001      	b.n	8011d98 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011d94:	2300      	movs	r3, #0
 8011d96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011d98:	6a3b      	ldr	r3, [r7, #32]
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d110      	bne.n	8011dc0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011da6:	9202      	str	r2, [sp, #8]
 8011da8:	9301      	str	r3, [sp, #4]
 8011daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f001 feef 	bl	8013b98 <xTaskCreateStatic>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	613b      	str	r3, [r7, #16]
 8011dbe:	e013      	b.n	8011de8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011dc0:	6a3b      	ldr	r3, [r7, #32]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d110      	bne.n	8011de8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	f107 0310 	add.w	r3, r7, #16
 8011dce:	9301      	str	r3, [sp, #4]
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	f001 ff3d 	bl	8013c58 <xTaskCreate>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d001      	beq.n	8011de8 <osThreadNew+0x13c>
          hTask = NULL;
 8011de4:	2300      	movs	r3, #0
 8011de6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011de8:	693b      	ldr	r3, [r7, #16]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3730      	adds	r7, #48	; 0x30
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	20000364 	.word	0x20000364

08011df8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b086      	sub	sp, #24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e00:	f3ef 8305 	mrs	r3, IPSR
 8011e04:	613b      	str	r3, [r7, #16]
  return(result);
 8011e06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d10f      	bne.n	8011e2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8011e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d105      	bne.n	8011e24 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e18:	f3ef 8311 	mrs	r3, BASEPRI
 8011e1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d007      	beq.n	8011e34 <osDelay+0x3c>
 8011e24:	4b0a      	ldr	r3, [pc, #40]	; (8011e50 <osDelay+0x58>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b02      	cmp	r3, #2
 8011e2a:	d103      	bne.n	8011e34 <osDelay+0x3c>
    stat = osErrorISR;
 8011e2c:	f06f 0305 	mvn.w	r3, #5
 8011e30:	617b      	str	r3, [r7, #20]
 8011e32:	e007      	b.n	8011e44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011e34:	2300      	movs	r3, #0
 8011e36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d002      	beq.n	8011e44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f002 f8d0 	bl	8013fe4 <vTaskDelay>
    }
  }

  return (stat);
 8011e44:	697b      	ldr	r3, [r7, #20]
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3718      	adds	r7, #24
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	20000364 	.word	0x20000364

08011e54 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b088      	sub	sp, #32
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e5c:	f3ef 8305 	mrs	r3, IPSR
 8011e60:	617b      	str	r3, [r7, #20]
  return(result);
 8011e62:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d10f      	bne.n	8011e88 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e68:	f3ef 8310 	mrs	r3, PRIMASK
 8011e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d105      	bne.n	8011e80 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e74:	f3ef 8311 	mrs	r3, BASEPRI
 8011e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d007      	beq.n	8011e90 <osDelayUntil+0x3c>
 8011e80:	4b13      	ldr	r3, [pc, #76]	; (8011ed0 <osDelayUntil+0x7c>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	d103      	bne.n	8011e90 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8011e88:	f06f 0305 	mvn.w	r3, #5
 8011e8c:	61fb      	str	r3, [r7, #28]
 8011e8e:	e019      	b.n	8011ec4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8011e90:	2300      	movs	r3, #0
 8011e92:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8011e94:	f002 f9f0 	bl	8014278 <xTaskGetTickCount>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	1ad3      	subs	r3, r2, r3
 8011ea2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8011ea4:	69bb      	ldr	r3, [r7, #24]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d009      	beq.n	8011ebe <osDelayUntil+0x6a>
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	db06      	blt.n	8011ebe <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8011eb0:	f107 0308 	add.w	r3, r7, #8
 8011eb4:	69b9      	ldr	r1, [r7, #24]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f002 f814 	bl	8013ee4 <vTaskDelayUntil>
 8011ebc:	e002      	b.n	8011ec4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8011ebe:	f06f 0303 	mvn.w	r3, #3
 8011ec2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8011ec4:	69fb      	ldr	r3, [r7, #28]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3720      	adds	r7, #32
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	20000364 	.word	0x20000364

08011ed4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b08a      	sub	sp, #40	; 0x28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8011edc:	2300      	movs	r3, #0
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ee0:	f3ef 8305 	mrs	r3, IPSR
 8011ee4:	613b      	str	r3, [r7, #16]
  return(result);
 8011ee6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f040 8085 	bne.w	8011ff8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eee:	f3ef 8310 	mrs	r3, PRIMASK
 8011ef2:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d105      	bne.n	8011f06 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011efa:	f3ef 8311 	mrs	r3, BASEPRI
 8011efe:	60bb      	str	r3, [r7, #8]
  return(result);
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d003      	beq.n	8011f0e <osMutexNew+0x3a>
 8011f06:	4b3f      	ldr	r3, [pc, #252]	; (8012004 <osMutexNew+0x130>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	d074      	beq.n	8011ff8 <osMutexNew+0x124>
    if (attr != NULL) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d003      	beq.n	8011f1c <osMutexNew+0x48>
      type = attr->attr_bits;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	623b      	str	r3, [r7, #32]
 8011f1a:	e001      	b.n	8011f20 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011f20:	6a3b      	ldr	r3, [r7, #32]
 8011f22:	f003 0301 	and.w	r3, r3, #1
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d002      	beq.n	8011f30 <osMutexNew+0x5c>
      rmtx = 1U;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	61fb      	str	r3, [r7, #28]
 8011f2e:	e001      	b.n	8011f34 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8011f30:	2300      	movs	r3, #0
 8011f32:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011f34:	6a3b      	ldr	r3, [r7, #32]
 8011f36:	f003 0308 	and.w	r3, r3, #8
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d15c      	bne.n	8011ff8 <osMutexNew+0x124>
      mem = -1;
 8011f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f42:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d015      	beq.n	8011f76 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d006      	beq.n	8011f60 <osMutexNew+0x8c>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	2b4f      	cmp	r3, #79	; 0x4f
 8011f58:	d902      	bls.n	8011f60 <osMutexNew+0x8c>
          mem = 1;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	61bb      	str	r3, [r7, #24]
 8011f5e:	e00c      	b.n	8011f7a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d108      	bne.n	8011f7a <osMutexNew+0xa6>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d104      	bne.n	8011f7a <osMutexNew+0xa6>
            mem = 0;
 8011f70:	2300      	movs	r3, #0
 8011f72:	61bb      	str	r3, [r7, #24]
 8011f74:	e001      	b.n	8011f7a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8011f76:	2300      	movs	r3, #0
 8011f78:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	2b01      	cmp	r3, #1
 8011f7e:	d112      	bne.n	8011fa6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d007      	beq.n	8011f96 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	2004      	movs	r0, #4
 8011f8e:	f000 fe7c 	bl	8012c8a <xQueueCreateMutexStatic>
 8011f92:	6278      	str	r0, [r7, #36]	; 0x24
 8011f94:	e016      	b.n	8011fc4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	689b      	ldr	r3, [r3, #8]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	2001      	movs	r0, #1
 8011f9e:	f000 fe74 	bl	8012c8a <xQueueCreateMutexStatic>
 8011fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8011fa4:	e00e      	b.n	8011fc4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d10b      	bne.n	8011fc4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d004      	beq.n	8011fbc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8011fb2:	2004      	movs	r0, #4
 8011fb4:	f000 fe51 	bl	8012c5a <xQueueCreateMutex>
 8011fb8:	6278      	str	r0, [r7, #36]	; 0x24
 8011fba:	e003      	b.n	8011fc4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8011fbc:	2001      	movs	r0, #1
 8011fbe:	f000 fe4c 	bl	8012c5a <xQueueCreateMutex>
 8011fc2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d00c      	beq.n	8011fe4 <osMutexNew+0x110>
        if (attr != NULL) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d003      	beq.n	8011fd8 <osMutexNew+0x104>
          name = attr->name;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	617b      	str	r3, [r7, #20]
 8011fd6:	e001      	b.n	8011fdc <osMutexNew+0x108>
        } else {
          name = NULL;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8011fdc:	6979      	ldr	r1, [r7, #20]
 8011fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fe0:	f001 fd54 	bl	8013a8c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d006      	beq.n	8011ff8 <osMutexNew+0x124>
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d003      	beq.n	8011ff8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff2:	f043 0301 	orr.w	r3, r3, #1
 8011ff6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3728      	adds	r7, #40	; 0x28
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	20000364 	.word	0x20000364

08012008 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012008:	b580      	push	{r7, lr}
 801200a:	b088      	sub	sp, #32
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f023 0301 	bic.w	r3, r3, #1
 8012018:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f003 0301 	and.w	r3, r3, #1
 8012020:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012022:	2300      	movs	r3, #0
 8012024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012026:	f3ef 8305 	mrs	r3, IPSR
 801202a:	613b      	str	r3, [r7, #16]
  return(result);
 801202c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10f      	bne.n	8012052 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012032:	f3ef 8310 	mrs	r3, PRIMASK
 8012036:	60fb      	str	r3, [r7, #12]
  return(result);
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d105      	bne.n	801204a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801203e:	f3ef 8311 	mrs	r3, BASEPRI
 8012042:	60bb      	str	r3, [r7, #8]
  return(result);
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d007      	beq.n	801205a <osMutexAcquire+0x52>
 801204a:	4b1d      	ldr	r3, [pc, #116]	; (80120c0 <osMutexAcquire+0xb8>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b02      	cmp	r3, #2
 8012050:	d103      	bne.n	801205a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8012052:	f06f 0305 	mvn.w	r3, #5
 8012056:	61fb      	str	r3, [r7, #28]
 8012058:	e02c      	b.n	80120b4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d103      	bne.n	8012068 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8012060:	f06f 0303 	mvn.w	r3, #3
 8012064:	61fb      	str	r3, [r7, #28]
 8012066:	e025      	b.n	80120b4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d011      	beq.n	8012092 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	69b8      	ldr	r0, [r7, #24]
 8012072:	f000 fe73 	bl	8012d5c <xQueueTakeMutexRecursive>
 8012076:	4603      	mov	r3, r0
 8012078:	2b01      	cmp	r3, #1
 801207a:	d01b      	beq.n	80120b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d003      	beq.n	801208a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8012082:	f06f 0301 	mvn.w	r3, #1
 8012086:	61fb      	str	r3, [r7, #28]
 8012088:	e014      	b.n	80120b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801208a:	f06f 0302 	mvn.w	r3, #2
 801208e:	61fb      	str	r3, [r7, #28]
 8012090:	e010      	b.n	80120b4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	69b8      	ldr	r0, [r7, #24]
 8012096:	f001 fa19 	bl	80134cc <xQueueSemaphoreTake>
 801209a:	4603      	mov	r3, r0
 801209c:	2b01      	cmp	r3, #1
 801209e:	d009      	beq.n	80120b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d003      	beq.n	80120ae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80120a6:	f06f 0301 	mvn.w	r3, #1
 80120aa:	61fb      	str	r3, [r7, #28]
 80120ac:	e002      	b.n	80120b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80120ae:	f06f 0302 	mvn.w	r3, #2
 80120b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80120b4:	69fb      	ldr	r3, [r7, #28]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3720      	adds	r7, #32
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	20000364 	.word	0x20000364

080120c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b088      	sub	sp, #32
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f023 0301 	bic.w	r3, r3, #1
 80120d2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f003 0301 	and.w	r3, r3, #1
 80120da:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80120dc:	2300      	movs	r3, #0
 80120de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120e0:	f3ef 8305 	mrs	r3, IPSR
 80120e4:	613b      	str	r3, [r7, #16]
  return(result);
 80120e6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d10f      	bne.n	801210c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120ec:	f3ef 8310 	mrs	r3, PRIMASK
 80120f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d105      	bne.n	8012104 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120f8:	f3ef 8311 	mrs	r3, BASEPRI
 80120fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d007      	beq.n	8012114 <osMutexRelease+0x50>
 8012104:	4b16      	ldr	r3, [pc, #88]	; (8012160 <osMutexRelease+0x9c>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b02      	cmp	r3, #2
 801210a:	d103      	bne.n	8012114 <osMutexRelease+0x50>
    stat = osErrorISR;
 801210c:	f06f 0305 	mvn.w	r3, #5
 8012110:	61fb      	str	r3, [r7, #28]
 8012112:	e01f      	b.n	8012154 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d103      	bne.n	8012122 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801211a:	f06f 0303 	mvn.w	r3, #3
 801211e:	61fb      	str	r3, [r7, #28]
 8012120:	e018      	b.n	8012154 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d009      	beq.n	801213c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012128:	69b8      	ldr	r0, [r7, #24]
 801212a:	f000 fde2 	bl	8012cf2 <xQueueGiveMutexRecursive>
 801212e:	4603      	mov	r3, r0
 8012130:	2b01      	cmp	r3, #1
 8012132:	d00f      	beq.n	8012154 <osMutexRelease+0x90>
        stat = osErrorResource;
 8012134:	f06f 0302 	mvn.w	r3, #2
 8012138:	61fb      	str	r3, [r7, #28]
 801213a:	e00b      	b.n	8012154 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801213c:	2300      	movs	r3, #0
 801213e:	2200      	movs	r2, #0
 8012140:	2100      	movs	r1, #0
 8012142:	69b8      	ldr	r0, [r7, #24]
 8012144:	f000 feb0 	bl	8012ea8 <xQueueGenericSend>
 8012148:	4603      	mov	r3, r0
 801214a:	2b01      	cmp	r3, #1
 801214c:	d002      	beq.n	8012154 <osMutexRelease+0x90>
        stat = osErrorResource;
 801214e:	f06f 0302 	mvn.w	r3, #2
 8012152:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8012154:	69fb      	ldr	r3, [r7, #28]
}
 8012156:	4618      	mov	r0, r3
 8012158:	3720      	adds	r7, #32
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	20000364 	.word	0x20000364

08012164 <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 8012164:	b580      	push	{r7, lr}
 8012166:	b088      	sub	sp, #32
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f023 0301 	bic.w	r3, r3, #1
 8012172:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012174:	f3ef 8305 	mrs	r3, IPSR
 8012178:	617b      	str	r3, [r7, #20]
  return(result);
 801217a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 801217c:	2b00      	cmp	r3, #0
 801217e:	d112      	bne.n	80121a6 <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012180:	f3ef 8310 	mrs	r3, PRIMASK
 8012184:	613b      	str	r3, [r7, #16]
  return(result);
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d105      	bne.n	8012198 <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801218c:	f3ef 8311 	mrs	r3, BASEPRI
 8012190:	60fb      	str	r3, [r7, #12]
  return(result);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d003      	beq.n	80121a0 <osMutexGetOwner+0x3c>
 8012198:	4b09      	ldr	r3, [pc, #36]	; (80121c0 <osMutexGetOwner+0x5c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b02      	cmp	r3, #2
 801219e:	d002      	beq.n	80121a6 <osMutexGetOwner+0x42>
 80121a0:	69bb      	ldr	r3, [r7, #24]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d102      	bne.n	80121ac <osMutexGetOwner+0x48>
    owner = NULL;
 80121a6:	2300      	movs	r3, #0
 80121a8:	61fb      	str	r3, [r7, #28]
 80121aa:	e003      	b.n	80121b4 <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 80121ac:	69b8      	ldr	r0, [r7, #24]
 80121ae:	f000 fd87 	bl	8012cc0 <xQueueGetMutexHolder>
 80121b2:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 80121b4:	69fb      	ldr	r3, [r7, #28]
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	20000364 	.word	0x20000364

080121c4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b08c      	sub	sp, #48	; 0x30
 80121c8:	af02      	add	r7, sp, #8
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80121d0:	2300      	movs	r3, #0
 80121d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121d4:	f3ef 8305 	mrs	r3, IPSR
 80121d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80121da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80121dc:	2b00      	cmp	r3, #0
 80121de:	f040 8087 	bne.w	80122f0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121e2:	f3ef 8310 	mrs	r3, PRIMASK
 80121e6:	617b      	str	r3, [r7, #20]
  return(result);
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d105      	bne.n	80121fa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80121ee:	f3ef 8311 	mrs	r3, BASEPRI
 80121f2:	613b      	str	r3, [r7, #16]
  return(result);
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d003      	beq.n	8012202 <osSemaphoreNew+0x3e>
 80121fa:	4b40      	ldr	r3, [pc, #256]	; (80122fc <osSemaphoreNew+0x138>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b02      	cmp	r3, #2
 8012200:	d076      	beq.n	80122f0 <osSemaphoreNew+0x12c>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d073      	beq.n	80122f0 <osSemaphoreNew+0x12c>
 8012208:	68ba      	ldr	r2, [r7, #8]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	429a      	cmp	r2, r3
 801220e:	d86f      	bhi.n	80122f0 <osSemaphoreNew+0x12c>
    mem = -1;
 8012210:	f04f 33ff 	mov.w	r3, #4294967295
 8012214:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d015      	beq.n	8012248 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d006      	beq.n	8012232 <osSemaphoreNew+0x6e>
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	2b4f      	cmp	r3, #79	; 0x4f
 801222a:	d902      	bls.n	8012232 <osSemaphoreNew+0x6e>
        mem = 1;
 801222c:	2301      	movs	r3, #1
 801222e:	623b      	str	r3, [r7, #32]
 8012230:	e00c      	b.n	801224c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	689b      	ldr	r3, [r3, #8]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d108      	bne.n	801224c <osSemaphoreNew+0x88>
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	68db      	ldr	r3, [r3, #12]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d104      	bne.n	801224c <osSemaphoreNew+0x88>
          mem = 0;
 8012242:	2300      	movs	r3, #0
 8012244:	623b      	str	r3, [r7, #32]
 8012246:	e001      	b.n	801224c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8012248:	2300      	movs	r3, #0
 801224a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801224c:	6a3b      	ldr	r3, [r7, #32]
 801224e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012252:	d04d      	beq.n	80122f0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2b01      	cmp	r3, #1
 8012258:	d129      	bne.n	80122ae <osSemaphoreNew+0xea>
        if (mem == 1) {
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d10b      	bne.n	8012278 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	689a      	ldr	r2, [r3, #8]
 8012264:	2303      	movs	r3, #3
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	4613      	mov	r3, r2
 801226a:	2200      	movs	r2, #0
 801226c:	2100      	movs	r1, #0
 801226e:	2001      	movs	r0, #1
 8012270:	f000 fbf8 	bl	8012a64 <xQueueGenericCreateStatic>
 8012274:	6278      	str	r0, [r7, #36]	; 0x24
 8012276:	e005      	b.n	8012284 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8012278:	2203      	movs	r2, #3
 801227a:	2100      	movs	r1, #0
 801227c:	2001      	movs	r0, #1
 801227e:	f000 fc6e 	bl	8012b5e <xQueueGenericCreate>
 8012282:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012286:	2b00      	cmp	r3, #0
 8012288:	d022      	beq.n	80122d0 <osSemaphoreNew+0x10c>
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d01f      	beq.n	80122d0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012290:	2300      	movs	r3, #0
 8012292:	2200      	movs	r2, #0
 8012294:	2100      	movs	r1, #0
 8012296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012298:	f000 fe06 	bl	8012ea8 <xQueueGenericSend>
 801229c:	4603      	mov	r3, r0
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d016      	beq.n	80122d0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80122a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122a4:	f001 faa5 	bl	80137f2 <vQueueDelete>
            hSemaphore = NULL;
 80122a8:	2300      	movs	r3, #0
 80122aa:	627b      	str	r3, [r7, #36]	; 0x24
 80122ac:	e010      	b.n	80122d0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80122ae:	6a3b      	ldr	r3, [r7, #32]
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	d108      	bne.n	80122c6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	689b      	ldr	r3, [r3, #8]
 80122b8:	461a      	mov	r2, r3
 80122ba:	68b9      	ldr	r1, [r7, #8]
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f000 fd84 	bl	8012dca <xQueueCreateCountingSemaphoreStatic>
 80122c2:	6278      	str	r0, [r7, #36]	; 0x24
 80122c4:	e004      	b.n	80122d0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80122c6:	68b9      	ldr	r1, [r7, #8]
 80122c8:	68f8      	ldr	r0, [r7, #12]
 80122ca:	f000 fdb7 	bl	8012e3c <xQueueCreateCountingSemaphore>
 80122ce:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80122d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00c      	beq.n	80122f0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d003      	beq.n	80122e4 <osSemaphoreNew+0x120>
          name = attr->name;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	61fb      	str	r3, [r7, #28]
 80122e2:	e001      	b.n	80122e8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80122e4:	2300      	movs	r3, #0
 80122e6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80122e8:	69f9      	ldr	r1, [r7, #28]
 80122ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122ec:	f001 fbce 	bl	8013a8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3728      	adds	r7, #40	; 0x28
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	20000364 	.word	0x20000364

08012300 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b088      	sub	sp, #32
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801230e:	2300      	movs	r3, #0
 8012310:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012312:	69bb      	ldr	r3, [r7, #24]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d103      	bne.n	8012320 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012318:	f06f 0303 	mvn.w	r3, #3
 801231c:	61fb      	str	r3, [r7, #28]
 801231e:	e04b      	b.n	80123b8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012320:	f3ef 8305 	mrs	r3, IPSR
 8012324:	617b      	str	r3, [r7, #20]
  return(result);
 8012326:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10f      	bne.n	801234c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801232c:	f3ef 8310 	mrs	r3, PRIMASK
 8012330:	613b      	str	r3, [r7, #16]
  return(result);
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d105      	bne.n	8012344 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012338:	f3ef 8311 	mrs	r3, BASEPRI
 801233c:	60fb      	str	r3, [r7, #12]
  return(result);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d026      	beq.n	8012392 <osSemaphoreAcquire+0x92>
 8012344:	4b1f      	ldr	r3, [pc, #124]	; (80123c4 <osSemaphoreAcquire+0xc4>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b02      	cmp	r3, #2
 801234a:	d122      	bne.n	8012392 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d003      	beq.n	801235a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8012352:	f06f 0303 	mvn.w	r3, #3
 8012356:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012358:	e02d      	b.n	80123b6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801235a:	2300      	movs	r3, #0
 801235c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801235e:	f107 0308 	add.w	r3, r7, #8
 8012362:	461a      	mov	r2, r3
 8012364:	2100      	movs	r1, #0
 8012366:	69b8      	ldr	r0, [r7, #24]
 8012368:	f001 f9c0 	bl	80136ec <xQueueReceiveFromISR>
 801236c:	4603      	mov	r3, r0
 801236e:	2b01      	cmp	r3, #1
 8012370:	d003      	beq.n	801237a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8012372:	f06f 0302 	mvn.w	r3, #2
 8012376:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012378:	e01d      	b.n	80123b6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d01a      	beq.n	80123b6 <osSemaphoreAcquire+0xb6>
 8012380:	4b11      	ldr	r3, [pc, #68]	; (80123c8 <osSemaphoreAcquire+0xc8>)
 8012382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012386:	601a      	str	r2, [r3, #0]
 8012388:	f3bf 8f4f 	dsb	sy
 801238c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8012390:	e011      	b.n	80123b6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	69b8      	ldr	r0, [r7, #24]
 8012396:	f001 f899 	bl	80134cc <xQueueSemaphoreTake>
 801239a:	4603      	mov	r3, r0
 801239c:	2b01      	cmp	r3, #1
 801239e:	d00b      	beq.n	80123b8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d003      	beq.n	80123ae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80123a6:	f06f 0301 	mvn.w	r3, #1
 80123aa:	61fb      	str	r3, [r7, #28]
 80123ac:	e004      	b.n	80123b8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80123ae:	f06f 0302 	mvn.w	r3, #2
 80123b2:	61fb      	str	r3, [r7, #28]
 80123b4:	e000      	b.n	80123b8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80123b6:	bf00      	nop
      }
    }
  }

  return (stat);
 80123b8:	69fb      	ldr	r3, [r7, #28]
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3720      	adds	r7, #32
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	20000364 	.word	0x20000364
 80123c8:	e000ed04 	.word	0xe000ed04

080123cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b088      	sub	sp, #32
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80123d8:	2300      	movs	r3, #0
 80123da:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80123dc:	69bb      	ldr	r3, [r7, #24]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d103      	bne.n	80123ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80123e2:	f06f 0303 	mvn.w	r3, #3
 80123e6:	61fb      	str	r3, [r7, #28]
 80123e8:	e03e      	b.n	8012468 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123ea:	f3ef 8305 	mrs	r3, IPSR
 80123ee:	617b      	str	r3, [r7, #20]
  return(result);
 80123f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d10f      	bne.n	8012416 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123f6:	f3ef 8310 	mrs	r3, PRIMASK
 80123fa:	613b      	str	r3, [r7, #16]
  return(result);
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d105      	bne.n	801240e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012402:	f3ef 8311 	mrs	r3, BASEPRI
 8012406:	60fb      	str	r3, [r7, #12]
  return(result);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d01e      	beq.n	801244c <osSemaphoreRelease+0x80>
 801240e:	4b19      	ldr	r3, [pc, #100]	; (8012474 <osSemaphoreRelease+0xa8>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	2b02      	cmp	r3, #2
 8012414:	d11a      	bne.n	801244c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8012416:	2300      	movs	r3, #0
 8012418:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801241a:	f107 0308 	add.w	r3, r7, #8
 801241e:	4619      	mov	r1, r3
 8012420:	69b8      	ldr	r0, [r7, #24]
 8012422:	f000 fedf 	bl	80131e4 <xQueueGiveFromISR>
 8012426:	4603      	mov	r3, r0
 8012428:	2b01      	cmp	r3, #1
 801242a:	d003      	beq.n	8012434 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801242c:	f06f 0302 	mvn.w	r3, #2
 8012430:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012432:	e018      	b.n	8012466 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d015      	beq.n	8012466 <osSemaphoreRelease+0x9a>
 801243a:	4b0f      	ldr	r3, [pc, #60]	; (8012478 <osSemaphoreRelease+0xac>)
 801243c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	f3bf 8f4f 	dsb	sy
 8012446:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801244a:	e00c      	b.n	8012466 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801244c:	2300      	movs	r3, #0
 801244e:	2200      	movs	r2, #0
 8012450:	2100      	movs	r1, #0
 8012452:	69b8      	ldr	r0, [r7, #24]
 8012454:	f000 fd28 	bl	8012ea8 <xQueueGenericSend>
 8012458:	4603      	mov	r3, r0
 801245a:	2b01      	cmp	r3, #1
 801245c:	d004      	beq.n	8012468 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801245e:	f06f 0302 	mvn.w	r3, #2
 8012462:	61fb      	str	r3, [r7, #28]
 8012464:	e000      	b.n	8012468 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012466:	bf00      	nop
    }
  }

  return (stat);
 8012468:	69fb      	ldr	r3, [r7, #28]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3720      	adds	r7, #32
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	20000364 	.word	0x20000364
 8012478:	e000ed04 	.word	0xe000ed04

0801247c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801247c:	b580      	push	{r7, lr}
 801247e:	b088      	sub	sp, #32
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012488:	f3ef 8305 	mrs	r3, IPSR
 801248c:	617b      	str	r3, [r7, #20]
  return(result);
 801248e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012490:	2b00      	cmp	r3, #0
 8012492:	d10f      	bne.n	80124b4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012494:	f3ef 8310 	mrs	r3, PRIMASK
 8012498:	613b      	str	r3, [r7, #16]
  return(result);
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d105      	bne.n	80124ac <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80124a0:	f3ef 8311 	mrs	r3, BASEPRI
 80124a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d007      	beq.n	80124bc <osSemaphoreDelete+0x40>
 80124ac:	4b0d      	ldr	r3, [pc, #52]	; (80124e4 <osSemaphoreDelete+0x68>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2b02      	cmp	r3, #2
 80124b2:	d103      	bne.n	80124bc <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80124b4:	f06f 0305 	mvn.w	r3, #5
 80124b8:	61fb      	str	r3, [r7, #28]
 80124ba:	e00e      	b.n	80124da <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d103      	bne.n	80124ca <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80124c2:	f06f 0303 	mvn.w	r3, #3
 80124c6:	61fb      	str	r3, [r7, #28]
 80124c8:	e007      	b.n	80124da <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80124ca:	69b8      	ldr	r0, [r7, #24]
 80124cc:	f001 fb06 	bl	8013adc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80124d0:	2300      	movs	r3, #0
 80124d2:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80124d4:	69b8      	ldr	r0, [r7, #24]
 80124d6:	f001 f98c 	bl	80137f2 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80124da:	69fb      	ldr	r3, [r7, #28]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3720      	adds	r7, #32
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	20000364 	.word	0x20000364

080124e8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b08c      	sub	sp, #48	; 0x30
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80124f4:	2300      	movs	r3, #0
 80124f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124f8:	f3ef 8305 	mrs	r3, IPSR
 80124fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80124fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012500:	2b00      	cmp	r3, #0
 8012502:	d170      	bne.n	80125e6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012504:	f3ef 8310 	mrs	r3, PRIMASK
 8012508:	617b      	str	r3, [r7, #20]
  return(result);
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d105      	bne.n	801251c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012510:	f3ef 8311 	mrs	r3, BASEPRI
 8012514:	613b      	str	r3, [r7, #16]
  return(result);
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d003      	beq.n	8012524 <osMessageQueueNew+0x3c>
 801251c:	4b34      	ldr	r3, [pc, #208]	; (80125f0 <osMessageQueueNew+0x108>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d060      	beq.n	80125e6 <osMessageQueueNew+0xfe>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d05d      	beq.n	80125e6 <osMessageQueueNew+0xfe>
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d05a      	beq.n	80125e6 <osMessageQueueNew+0xfe>
    mem = -1;
 8012530:	f04f 33ff 	mov.w	r3, #4294967295
 8012534:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d029      	beq.n	8012590 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d012      	beq.n	801256a <osMessageQueueNew+0x82>
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	2b4f      	cmp	r3, #79	; 0x4f
 801254a:	d90e      	bls.n	801256a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012550:	2b00      	cmp	r3, #0
 8012552:	d00a      	beq.n	801256a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	695a      	ldr	r2, [r3, #20]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	68b9      	ldr	r1, [r7, #8]
 801255c:	fb01 f303 	mul.w	r3, r1, r3
 8012560:	429a      	cmp	r2, r3
 8012562:	d302      	bcc.n	801256a <osMessageQueueNew+0x82>
        mem = 1;
 8012564:	2301      	movs	r3, #1
 8012566:	623b      	str	r3, [r7, #32]
 8012568:	e014      	b.n	8012594 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	689b      	ldr	r3, [r3, #8]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d110      	bne.n	8012594 <osMessageQueueNew+0xac>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d10c      	bne.n	8012594 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801257e:	2b00      	cmp	r3, #0
 8012580:	d108      	bne.n	8012594 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	695b      	ldr	r3, [r3, #20]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d104      	bne.n	8012594 <osMessageQueueNew+0xac>
          mem = 0;
 801258a:	2300      	movs	r3, #0
 801258c:	623b      	str	r3, [r7, #32]
 801258e:	e001      	b.n	8012594 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012590:	2300      	movs	r3, #0
 8012592:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	2b01      	cmp	r3, #1
 8012598:	d10c      	bne.n	80125b4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	691a      	ldr	r2, [r3, #16]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6899      	ldr	r1, [r3, #8]
 80125a2:	2300      	movs	r3, #0
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	460b      	mov	r3, r1
 80125a8:	68b9      	ldr	r1, [r7, #8]
 80125aa:	68f8      	ldr	r0, [r7, #12]
 80125ac:	f000 fa5a 	bl	8012a64 <xQueueGenericCreateStatic>
 80125b0:	6278      	str	r0, [r7, #36]	; 0x24
 80125b2:	e008      	b.n	80125c6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d105      	bne.n	80125c6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80125ba:	2200      	movs	r2, #0
 80125bc:	68b9      	ldr	r1, [r7, #8]
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f000 facd 	bl	8012b5e <xQueueGenericCreate>
 80125c4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80125c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d00c      	beq.n	80125e6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d003      	beq.n	80125da <osMessageQueueNew+0xf2>
        name = attr->name;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	61fb      	str	r3, [r7, #28]
 80125d8:	e001      	b.n	80125de <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80125de:	69f9      	ldr	r1, [r7, #28]
 80125e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125e2:	f001 fa53 	bl	8013a8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80125e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3728      	adds	r7, #40	; 0x28
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}
 80125f0:	20000364 	.word	0x20000364

080125f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b08a      	sub	sp, #40	; 0x28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	603b      	str	r3, [r7, #0]
 8012600:	4613      	mov	r3, r2
 8012602:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012608:	2300      	movs	r3, #0
 801260a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801260c:	f3ef 8305 	mrs	r3, IPSR
 8012610:	61fb      	str	r3, [r7, #28]
  return(result);
 8012612:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012614:	2b00      	cmp	r3, #0
 8012616:	d10f      	bne.n	8012638 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012618:	f3ef 8310 	mrs	r3, PRIMASK
 801261c:	61bb      	str	r3, [r7, #24]
  return(result);
 801261e:	69bb      	ldr	r3, [r7, #24]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d105      	bne.n	8012630 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012624:	f3ef 8311 	mrs	r3, BASEPRI
 8012628:	617b      	str	r3, [r7, #20]
  return(result);
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d02c      	beq.n	801268a <osMessageQueuePut+0x96>
 8012630:	4b28      	ldr	r3, [pc, #160]	; (80126d4 <osMessageQueuePut+0xe0>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b02      	cmp	r3, #2
 8012636:	d128      	bne.n	801268a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012638:	6a3b      	ldr	r3, [r7, #32]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d005      	beq.n	801264a <osMessageQueuePut+0x56>
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d002      	beq.n	801264a <osMessageQueuePut+0x56>
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d003      	beq.n	8012652 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801264a:	f06f 0303 	mvn.w	r3, #3
 801264e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012650:	e039      	b.n	80126c6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012652:	2300      	movs	r3, #0
 8012654:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012656:	f107 0210 	add.w	r2, r7, #16
 801265a:	2300      	movs	r3, #0
 801265c:	68b9      	ldr	r1, [r7, #8]
 801265e:	6a38      	ldr	r0, [r7, #32]
 8012660:	f000 fd24 	bl	80130ac <xQueueGenericSendFromISR>
 8012664:	4603      	mov	r3, r0
 8012666:	2b01      	cmp	r3, #1
 8012668:	d003      	beq.n	8012672 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801266a:	f06f 0302 	mvn.w	r3, #2
 801266e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012670:	e029      	b.n	80126c6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d026      	beq.n	80126c6 <osMessageQueuePut+0xd2>
 8012678:	4b17      	ldr	r3, [pc, #92]	; (80126d8 <osMessageQueuePut+0xe4>)
 801267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012688:	e01d      	b.n	80126c6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801268a:	6a3b      	ldr	r3, [r7, #32]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <osMessageQueuePut+0xa2>
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d103      	bne.n	801269e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012696:	f06f 0303 	mvn.w	r3, #3
 801269a:	627b      	str	r3, [r7, #36]	; 0x24
 801269c:	e014      	b.n	80126c8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801269e:	2300      	movs	r3, #0
 80126a0:	683a      	ldr	r2, [r7, #0]
 80126a2:	68b9      	ldr	r1, [r7, #8]
 80126a4:	6a38      	ldr	r0, [r7, #32]
 80126a6:	f000 fbff 	bl	8012ea8 <xQueueGenericSend>
 80126aa:	4603      	mov	r3, r0
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d00b      	beq.n	80126c8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d003      	beq.n	80126be <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80126b6:	f06f 0301 	mvn.w	r3, #1
 80126ba:	627b      	str	r3, [r7, #36]	; 0x24
 80126bc:	e004      	b.n	80126c8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80126be:	f06f 0302 	mvn.w	r3, #2
 80126c2:	627b      	str	r3, [r7, #36]	; 0x24
 80126c4:	e000      	b.n	80126c8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80126c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80126c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3728      	adds	r7, #40	; 0x28
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
 80126d2:	bf00      	nop
 80126d4:	20000364 	.word	0x20000364
 80126d8:	e000ed04 	.word	0xe000ed04

080126dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80126dc:	b580      	push	{r7, lr}
 80126de:	b08a      	sub	sp, #40	; 0x28
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
 80126e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80126ee:	2300      	movs	r3, #0
 80126f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126f2:	f3ef 8305 	mrs	r3, IPSR
 80126f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80126f8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d10f      	bne.n	801271e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012702:	61bb      	str	r3, [r7, #24]
  return(result);
 8012704:	69bb      	ldr	r3, [r7, #24]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d105      	bne.n	8012716 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801270a:	f3ef 8311 	mrs	r3, BASEPRI
 801270e:	617b      	str	r3, [r7, #20]
  return(result);
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d02c      	beq.n	8012770 <osMessageQueueGet+0x94>
 8012716:	4b28      	ldr	r3, [pc, #160]	; (80127b8 <osMessageQueueGet+0xdc>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2b02      	cmp	r3, #2
 801271c:	d128      	bne.n	8012770 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801271e:	6a3b      	ldr	r3, [r7, #32]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d005      	beq.n	8012730 <osMessageQueueGet+0x54>
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d002      	beq.n	8012730 <osMessageQueueGet+0x54>
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d003      	beq.n	8012738 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012730:	f06f 0303 	mvn.w	r3, #3
 8012734:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012736:	e038      	b.n	80127aa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012738:	2300      	movs	r3, #0
 801273a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801273c:	f107 0310 	add.w	r3, r7, #16
 8012740:	461a      	mov	r2, r3
 8012742:	68b9      	ldr	r1, [r7, #8]
 8012744:	6a38      	ldr	r0, [r7, #32]
 8012746:	f000 ffd1 	bl	80136ec <xQueueReceiveFromISR>
 801274a:	4603      	mov	r3, r0
 801274c:	2b01      	cmp	r3, #1
 801274e:	d003      	beq.n	8012758 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012750:	f06f 0302 	mvn.w	r3, #2
 8012754:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012756:	e028      	b.n	80127aa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d025      	beq.n	80127aa <osMessageQueueGet+0xce>
 801275e:	4b17      	ldr	r3, [pc, #92]	; (80127bc <osMessageQueueGet+0xe0>)
 8012760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012764:	601a      	str	r2, [r3, #0]
 8012766:	f3bf 8f4f 	dsb	sy
 801276a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801276e:	e01c      	b.n	80127aa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012770:	6a3b      	ldr	r3, [r7, #32]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d002      	beq.n	801277c <osMessageQueueGet+0xa0>
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d103      	bne.n	8012784 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801277c:	f06f 0303 	mvn.w	r3, #3
 8012780:	627b      	str	r3, [r7, #36]	; 0x24
 8012782:	e013      	b.n	80127ac <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012784:	683a      	ldr	r2, [r7, #0]
 8012786:	68b9      	ldr	r1, [r7, #8]
 8012788:	6a38      	ldr	r0, [r7, #32]
 801278a:	f000 fdbd 	bl	8013308 <xQueueReceive>
 801278e:	4603      	mov	r3, r0
 8012790:	2b01      	cmp	r3, #1
 8012792:	d00b      	beq.n	80127ac <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d003      	beq.n	80127a2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801279a:	f06f 0301 	mvn.w	r3, #1
 801279e:	627b      	str	r3, [r7, #36]	; 0x24
 80127a0:	e004      	b.n	80127ac <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80127a2:	f06f 0302 	mvn.w	r3, #2
 80127a6:	627b      	str	r3, [r7, #36]	; 0x24
 80127a8:	e000      	b.n	80127ac <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80127aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80127ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3728      	adds	r7, #40	; 0x28
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	20000364 	.word	0x20000364
 80127bc:	e000ed04 	.word	0xe000ed04

080127c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80127c0:	b480      	push	{r7}
 80127c2:	b085      	sub	sp, #20
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	60f8      	str	r0, [r7, #12]
 80127c8:	60b9      	str	r1, [r7, #8]
 80127ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	4a07      	ldr	r2, [pc, #28]	; (80127ec <vApplicationGetIdleTaskMemory+0x2c>)
 80127d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	4a06      	ldr	r2, [pc, #24]	; (80127f0 <vApplicationGetIdleTaskMemory+0x30>)
 80127d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2280      	movs	r2, #128	; 0x80
 80127dc:	601a      	str	r2, [r3, #0]
}
 80127de:	bf00      	nop
 80127e0:	3714      	adds	r7, #20
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop
 80127ec:	20000368 	.word	0x20000368
 80127f0:	200003c4 	.word	0x200003c4

080127f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80127f4:	b480      	push	{r7}
 80127f6:	b085      	sub	sp, #20
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	4a07      	ldr	r2, [pc, #28]	; (8012820 <vApplicationGetTimerTaskMemory+0x2c>)
 8012804:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	4a06      	ldr	r2, [pc, #24]	; (8012824 <vApplicationGetTimerTaskMemory+0x30>)
 801280a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012812:	601a      	str	r2, [r3, #0]
}
 8012814:	bf00      	nop
 8012816:	3714      	adds	r7, #20
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr
 8012820:	200005c4 	.word	0x200005c4
 8012824:	20000620 	.word	0x20000620

08012828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f103 0208 	add.w	r2, r3, #8
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f04f 32ff 	mov.w	r2, #4294967295
 8012840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f103 0208 	add.w	r2, r3, #8
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f103 0208 	add.w	r2, r3, #8
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2200      	movs	r2, #0
 801285a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801285c:	bf00      	nop
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012868:	b480      	push	{r7}
 801286a:	b083      	sub	sp, #12
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2200      	movs	r2, #0
 8012874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012876:	bf00      	nop
 8012878:	370c      	adds	r7, #12
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr

08012882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012882:	b480      	push	{r7}
 8012884:	b085      	sub	sp, #20
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
 801288a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	68fa      	ldr	r2, [r7, #12]
 8012896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	689a      	ldr	r2, [r3, #8]
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	689b      	ldr	r3, [r3, #8]
 80128a4:	683a      	ldr	r2, [r7, #0]
 80128a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	683a      	ldr	r2, [r7, #0]
 80128ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	601a      	str	r2, [r3, #0]
}
 80128be:	bf00      	nop
 80128c0:	3714      	adds	r7, #20
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr

080128ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80128ca:	b480      	push	{r7}
 80128cc:	b085      	sub	sp, #20
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	6078      	str	r0, [r7, #4]
 80128d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128e0:	d103      	bne.n	80128ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	691b      	ldr	r3, [r3, #16]
 80128e6:	60fb      	str	r3, [r7, #12]
 80128e8:	e00c      	b.n	8012904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	3308      	adds	r3, #8
 80128ee:	60fb      	str	r3, [r7, #12]
 80128f0:	e002      	b.n	80128f8 <vListInsert+0x2e>
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	60fb      	str	r3, [r7, #12]
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	429a      	cmp	r2, r3
 8012902:	d2f6      	bcs.n	80128f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	685a      	ldr	r2, [r3, #4]
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	683a      	ldr	r2, [r7, #0]
 8012912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	68fa      	ldr	r2, [r7, #12]
 8012918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	683a      	ldr	r2, [r7, #0]
 801291e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	1c5a      	adds	r2, r3, #1
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	601a      	str	r2, [r3, #0]
}
 8012930:	bf00      	nop
 8012932:	3714      	adds	r7, #20
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801293c:	b480      	push	{r7}
 801293e:	b085      	sub	sp, #20
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	691b      	ldr	r3, [r3, #16]
 8012948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	6892      	ldr	r2, [r2, #8]
 8012952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	6852      	ldr	r2, [r2, #4]
 801295c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	429a      	cmp	r2, r3
 8012966:	d103      	bne.n	8012970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	689a      	ldr	r2, [r3, #8]
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2200      	movs	r2, #0
 8012974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	1e5a      	subs	r2, r3, #1
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3714      	adds	r7, #20
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d10b      	bne.n	80129bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80129a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a8:	b672      	cpsid	i
 80129aa:	f383 8811 	msr	BASEPRI, r3
 80129ae:	f3bf 8f6f 	isb	sy
 80129b2:	f3bf 8f4f 	dsb	sy
 80129b6:	b662      	cpsie	i
 80129b8:	60bb      	str	r3, [r7, #8]
 80129ba:	e7fe      	b.n	80129ba <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80129bc:	f002 fdf4 	bl	80155a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129c8:	68f9      	ldr	r1, [r7, #12]
 80129ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80129cc:	fb01 f303 	mul.w	r3, r1, r3
 80129d0:	441a      	add	r2, r3
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	2200      	movs	r2, #0
 80129da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129ec:	3b01      	subs	r3, #1
 80129ee:	68f9      	ldr	r1, [r7, #12]
 80129f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80129f2:	fb01 f303 	mul.w	r3, r1, r3
 80129f6:	441a      	add	r2, r3
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	22ff      	movs	r2, #255	; 0xff
 8012a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	22ff      	movs	r2, #255	; 0xff
 8012a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d114      	bne.n	8012a3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	691b      	ldr	r3, [r3, #16]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d01a      	beq.n	8012a50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	3310      	adds	r3, #16
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f001 fdb6 	bl	8014590 <xTaskRemoveFromEventList>
 8012a24:	4603      	mov	r3, r0
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d012      	beq.n	8012a50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012a2a:	4b0d      	ldr	r3, [pc, #52]	; (8012a60 <xQueueGenericReset+0xd0>)
 8012a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a30:	601a      	str	r2, [r3, #0]
 8012a32:	f3bf 8f4f 	dsb	sy
 8012a36:	f3bf 8f6f 	isb	sy
 8012a3a:	e009      	b.n	8012a50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	3310      	adds	r3, #16
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7ff fef1 	bl	8012828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	3324      	adds	r3, #36	; 0x24
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff feec 	bl	8012828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012a50:	f002 fddc 	bl	801560c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012a54:	2301      	movs	r3, #1
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3710      	adds	r7, #16
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	e000ed04 	.word	0xe000ed04

08012a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b08e      	sub	sp, #56	; 0x38
 8012a68:	af02      	add	r7, sp, #8
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
 8012a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d10b      	bne.n	8012a90 <xQueueGenericCreateStatic+0x2c>
 8012a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7c:	b672      	cpsid	i
 8012a7e:	f383 8811 	msr	BASEPRI, r3
 8012a82:	f3bf 8f6f 	isb	sy
 8012a86:	f3bf 8f4f 	dsb	sy
 8012a8a:	b662      	cpsie	i
 8012a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a8e:	e7fe      	b.n	8012a8e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d10b      	bne.n	8012aae <xQueueGenericCreateStatic+0x4a>
 8012a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9a:	b672      	cpsid	i
 8012a9c:	f383 8811 	msr	BASEPRI, r3
 8012aa0:	f3bf 8f6f 	isb	sy
 8012aa4:	f3bf 8f4f 	dsb	sy
 8012aa8:	b662      	cpsie	i
 8012aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8012aac:	e7fe      	b.n	8012aac <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d002      	beq.n	8012aba <xQueueGenericCreateStatic+0x56>
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d001      	beq.n	8012abe <xQueueGenericCreateStatic+0x5a>
 8012aba:	2301      	movs	r3, #1
 8012abc:	e000      	b.n	8012ac0 <xQueueGenericCreateStatic+0x5c>
 8012abe:	2300      	movs	r3, #0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d10b      	bne.n	8012adc <xQueueGenericCreateStatic+0x78>
 8012ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac8:	b672      	cpsid	i
 8012aca:	f383 8811 	msr	BASEPRI, r3
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f3bf 8f4f 	dsb	sy
 8012ad6:	b662      	cpsie	i
 8012ad8:	623b      	str	r3, [r7, #32]
 8012ada:	e7fe      	b.n	8012ada <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d102      	bne.n	8012ae8 <xQueueGenericCreateStatic+0x84>
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <xQueueGenericCreateStatic+0x88>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e000      	b.n	8012aee <xQueueGenericCreateStatic+0x8a>
 8012aec:	2300      	movs	r3, #0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d10b      	bne.n	8012b0a <xQueueGenericCreateStatic+0xa6>
 8012af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af6:	b672      	cpsid	i
 8012af8:	f383 8811 	msr	BASEPRI, r3
 8012afc:	f3bf 8f6f 	isb	sy
 8012b00:	f3bf 8f4f 	dsb	sy
 8012b04:	b662      	cpsie	i
 8012b06:	61fb      	str	r3, [r7, #28]
 8012b08:	e7fe      	b.n	8012b08 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012b0a:	2350      	movs	r3, #80	; 0x50
 8012b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	2b50      	cmp	r3, #80	; 0x50
 8012b12:	d00b      	beq.n	8012b2c <xQueueGenericCreateStatic+0xc8>
 8012b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b18:	b672      	cpsid	i
 8012b1a:	f383 8811 	msr	BASEPRI, r3
 8012b1e:	f3bf 8f6f 	isb	sy
 8012b22:	f3bf 8f4f 	dsb	sy
 8012b26:	b662      	cpsie	i
 8012b28:	61bb      	str	r3, [r7, #24]
 8012b2a:	e7fe      	b.n	8012b2a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012b2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00d      	beq.n	8012b54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012b40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b46:	9300      	str	r3, [sp, #0]
 8012b48:	4613      	mov	r3, r2
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	68b9      	ldr	r1, [r7, #8]
 8012b4e:	68f8      	ldr	r0, [r7, #12]
 8012b50:	f000 f846 	bl	8012be0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3730      	adds	r7, #48	; 0x30
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b08a      	sub	sp, #40	; 0x28
 8012b62:	af02      	add	r7, sp, #8
 8012b64:	60f8      	str	r0, [r7, #12]
 8012b66:	60b9      	str	r1, [r7, #8]
 8012b68:	4613      	mov	r3, r2
 8012b6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d10b      	bne.n	8012b8a <xQueueGenericCreate+0x2c>
 8012b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b76:	b672      	cpsid	i
 8012b78:	f383 8811 	msr	BASEPRI, r3
 8012b7c:	f3bf 8f6f 	isb	sy
 8012b80:	f3bf 8f4f 	dsb	sy
 8012b84:	b662      	cpsie	i
 8012b86:	613b      	str	r3, [r7, #16]
 8012b88:	e7fe      	b.n	8012b88 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d102      	bne.n	8012b96 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012b90:	2300      	movs	r3, #0
 8012b92:	61fb      	str	r3, [r7, #28]
 8012b94:	e004      	b.n	8012ba0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	fb02 f303 	mul.w	r3, r2, r3
 8012b9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	3350      	adds	r3, #80	; 0x50
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f002 fe21 	bl	80157ec <pvPortMalloc>
 8012baa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d011      	beq.n	8012bd6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	3350      	adds	r3, #80	; 0x50
 8012bba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012bc4:	79fa      	ldrb	r2, [r7, #7]
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	697a      	ldr	r2, [r7, #20]
 8012bce:	68b9      	ldr	r1, [r7, #8]
 8012bd0:	68f8      	ldr	r0, [r7, #12]
 8012bd2:	f000 f805 	bl	8012be0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012bd6:	69bb      	ldr	r3, [r7, #24]
	}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3720      	adds	r7, #32
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
 8012bec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d103      	bne.n	8012bfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012bf4:	69bb      	ldr	r3, [r7, #24]
 8012bf6:	69ba      	ldr	r2, [r7, #24]
 8012bf8:	601a      	str	r2, [r3, #0]
 8012bfa:	e002      	b.n	8012c02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012c0e:	2101      	movs	r1, #1
 8012c10:	69b8      	ldr	r0, [r7, #24]
 8012c12:	f7ff febd 	bl	8012990 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	78fa      	ldrb	r2, [r7, #3]
 8012c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012c1e:	bf00      	nop
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b082      	sub	sp, #8
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00e      	beq.n	8012c52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2200      	movs	r2, #0
 8012c44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012c46:	2300      	movs	r3, #0
 8012c48:	2200      	movs	r2, #0
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f000 f92b 	bl	8012ea8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012c52:	bf00      	nop
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012c5a:	b580      	push	{r7, lr}
 8012c5c:	b086      	sub	sp, #24
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	4603      	mov	r3, r0
 8012c62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012c64:	2301      	movs	r3, #1
 8012c66:	617b      	str	r3, [r7, #20]
 8012c68:	2300      	movs	r3, #0
 8012c6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012c6c:	79fb      	ldrb	r3, [r7, #7]
 8012c6e:	461a      	mov	r2, r3
 8012c70:	6939      	ldr	r1, [r7, #16]
 8012c72:	6978      	ldr	r0, [r7, #20]
 8012c74:	f7ff ff73 	bl	8012b5e <xQueueGenericCreate>
 8012c78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012c7a:	68f8      	ldr	r0, [r7, #12]
 8012c7c:	f7ff ffd3 	bl	8012c26 <prvInitialiseMutex>

		return xNewQueue;
 8012c80:	68fb      	ldr	r3, [r7, #12]
	}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3718      	adds	r7, #24
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b088      	sub	sp, #32
 8012c8e:	af02      	add	r7, sp, #8
 8012c90:	4603      	mov	r3, r0
 8012c92:	6039      	str	r1, [r7, #0]
 8012c94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012c96:	2301      	movs	r3, #1
 8012c98:	617b      	str	r3, [r7, #20]
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012c9e:	79fb      	ldrb	r3, [r7, #7]
 8012ca0:	9300      	str	r3, [sp, #0]
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	6939      	ldr	r1, [r7, #16]
 8012ca8:	6978      	ldr	r0, [r7, #20]
 8012caa:	f7ff fedb 	bl	8012a64 <xQueueGenericCreateStatic>
 8012cae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f7ff ffb8 	bl	8012c26 <prvInitialiseMutex>

		return xNewQueue;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
	}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3718      	adds	r7, #24
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8012ccc:	f002 fc6c 	bl	80155a8 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d103      	bne.n	8012ce0 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	60fb      	str	r3, [r7, #12]
 8012cde:	e001      	b.n	8012ce4 <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8012ce4:	f002 fc92 	bl	801560c <vPortExitCritical>

		return pxReturn;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8012cea:	4618      	mov	r0, r3
 8012cec:	3710      	adds	r7, #16
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8012cf2:	b590      	push	{r4, r7, lr}
 8012cf4:	b087      	sub	sp, #28
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d10b      	bne.n	8012d1c <xQueueGiveMutexRecursive+0x2a>
 8012d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d08:	b672      	cpsid	i
 8012d0a:	f383 8811 	msr	BASEPRI, r3
 8012d0e:	f3bf 8f6f 	isb	sy
 8012d12:	f3bf 8f4f 	dsb	sy
 8012d16:	b662      	cpsie	i
 8012d18:	60fb      	str	r3, [r7, #12]
 8012d1a:	e7fe      	b.n	8012d1a <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	689c      	ldr	r4, [r3, #8]
 8012d20:	f001 fdf4 	bl	801490c <xTaskGetCurrentTaskHandle>
 8012d24:	4603      	mov	r3, r0
 8012d26:	429c      	cmp	r4, r3
 8012d28:	d111      	bne.n	8012d4e <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	1e5a      	subs	r2, r3, #1
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d105      	bne.n	8012d48 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	2200      	movs	r2, #0
 8012d40:	2100      	movs	r1, #0
 8012d42:	6938      	ldr	r0, [r7, #16]
 8012d44:	f000 f8b0 	bl	8012ea8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	617b      	str	r3, [r7, #20]
 8012d4c:	e001      	b.n	8012d52 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8012d52:	697b      	ldr	r3, [r7, #20]
	}
 8012d54:	4618      	mov	r0, r3
 8012d56:	371c      	adds	r7, #28
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd90      	pop	{r4, r7, pc}

08012d5c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8012d5c:	b590      	push	{r4, r7, lr}
 8012d5e:	b087      	sub	sp, #28
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d10b      	bne.n	8012d88 <xQueueTakeMutexRecursive+0x2c>
 8012d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d74:	b672      	cpsid	i
 8012d76:	f383 8811 	msr	BASEPRI, r3
 8012d7a:	f3bf 8f6f 	isb	sy
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	b662      	cpsie	i
 8012d84:	60fb      	str	r3, [r7, #12]
 8012d86:	e7fe      	b.n	8012d86 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	689c      	ldr	r4, [r3, #8]
 8012d8c:	f001 fdbe 	bl	801490c <xTaskGetCurrentTaskHandle>
 8012d90:	4603      	mov	r3, r0
 8012d92:	429c      	cmp	r4, r3
 8012d94:	d107      	bne.n	8012da6 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	1c5a      	adds	r2, r3, #1
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8012da0:	2301      	movs	r3, #1
 8012da2:	617b      	str	r3, [r7, #20]
 8012da4:	e00c      	b.n	8012dc0 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8012da6:	6839      	ldr	r1, [r7, #0]
 8012da8:	6938      	ldr	r0, [r7, #16]
 8012daa:	f000 fb8f 	bl	80134cc <xQueueSemaphoreTake>
 8012dae:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d004      	beq.n	8012dc0 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	1c5a      	adds	r2, r3, #1
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8012dc0:	697b      	ldr	r3, [r7, #20]
	}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	371c      	adds	r7, #28
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd90      	pop	{r4, r7, pc}

08012dca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b08a      	sub	sp, #40	; 0x28
 8012dce:	af02      	add	r7, sp, #8
 8012dd0:	60f8      	str	r0, [r7, #12]
 8012dd2:	60b9      	str	r1, [r7, #8]
 8012dd4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d10b      	bne.n	8012df4 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8012ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de0:	b672      	cpsid	i
 8012de2:	f383 8811 	msr	BASEPRI, r3
 8012de6:	f3bf 8f6f 	isb	sy
 8012dea:	f3bf 8f4f 	dsb	sy
 8012dee:	b662      	cpsie	i
 8012df0:	61bb      	str	r3, [r7, #24]
 8012df2:	e7fe      	b.n	8012df2 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012df4:	68ba      	ldr	r2, [r7, #8]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d90b      	bls.n	8012e14 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8012dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e00:	b672      	cpsid	i
 8012e02:	f383 8811 	msr	BASEPRI, r3
 8012e06:	f3bf 8f6f 	isb	sy
 8012e0a:	f3bf 8f4f 	dsb	sy
 8012e0e:	b662      	cpsie	i
 8012e10:	617b      	str	r3, [r7, #20]
 8012e12:	e7fe      	b.n	8012e12 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012e14:	2302      	movs	r3, #2
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	68f8      	ldr	r0, [r7, #12]
 8012e20:	f7ff fe20 	bl	8012a64 <xQueueGenericCreateStatic>
 8012e24:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d002      	beq.n	8012e32 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012e2c:	69fb      	ldr	r3, [r7, #28]
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012e32:	69fb      	ldr	r3, [r7, #28]
	}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3720      	adds	r7, #32
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d10b      	bne.n	8012e64 <xQueueCreateCountingSemaphore+0x28>
 8012e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e50:	b672      	cpsid	i
 8012e52:	f383 8811 	msr	BASEPRI, r3
 8012e56:	f3bf 8f6f 	isb	sy
 8012e5a:	f3bf 8f4f 	dsb	sy
 8012e5e:	b662      	cpsie	i
 8012e60:	613b      	str	r3, [r7, #16]
 8012e62:	e7fe      	b.n	8012e62 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012e64:	683a      	ldr	r2, [r7, #0]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d90b      	bls.n	8012e84 <xQueueCreateCountingSemaphore+0x48>
 8012e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e70:	b672      	cpsid	i
 8012e72:	f383 8811 	msr	BASEPRI, r3
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	b662      	cpsie	i
 8012e80:	60fb      	str	r3, [r7, #12]
 8012e82:	e7fe      	b.n	8012e82 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012e84:	2202      	movs	r2, #2
 8012e86:	2100      	movs	r1, #0
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f7ff fe68 	bl	8012b5e <xQueueGenericCreate>
 8012e8e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d002      	beq.n	8012e9c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	683a      	ldr	r2, [r7, #0]
 8012e9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012e9c:	697b      	ldr	r3, [r7, #20]
	}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3718      	adds	r7, #24
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
	...

08012ea8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b08e      	sub	sp, #56	; 0x38
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
 8012eb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d10b      	bne.n	8012edc <xQueueGenericSend+0x34>
 8012ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec8:	b672      	cpsid	i
 8012eca:	f383 8811 	msr	BASEPRI, r3
 8012ece:	f3bf 8f6f 	isb	sy
 8012ed2:	f3bf 8f4f 	dsb	sy
 8012ed6:	b662      	cpsie	i
 8012ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012eda:	e7fe      	b.n	8012eda <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d103      	bne.n	8012eea <xQueueGenericSend+0x42>
 8012ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d101      	bne.n	8012eee <xQueueGenericSend+0x46>
 8012eea:	2301      	movs	r3, #1
 8012eec:	e000      	b.n	8012ef0 <xQueueGenericSend+0x48>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d10b      	bne.n	8012f0c <xQueueGenericSend+0x64>
 8012ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef8:	b672      	cpsid	i
 8012efa:	f383 8811 	msr	BASEPRI, r3
 8012efe:	f3bf 8f6f 	isb	sy
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	b662      	cpsie	i
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
 8012f0a:	e7fe      	b.n	8012f0a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	2b02      	cmp	r3, #2
 8012f10:	d103      	bne.n	8012f1a <xQueueGenericSend+0x72>
 8012f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d101      	bne.n	8012f1e <xQueueGenericSend+0x76>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e000      	b.n	8012f20 <xQueueGenericSend+0x78>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10b      	bne.n	8012f3c <xQueueGenericSend+0x94>
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	b672      	cpsid	i
 8012f2a:	f383 8811 	msr	BASEPRI, r3
 8012f2e:	f3bf 8f6f 	isb	sy
 8012f32:	f3bf 8f4f 	dsb	sy
 8012f36:	b662      	cpsie	i
 8012f38:	623b      	str	r3, [r7, #32]
 8012f3a:	e7fe      	b.n	8012f3a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f3c:	f001 fcf6 	bl	801492c <xTaskGetSchedulerState>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d102      	bne.n	8012f4c <xQueueGenericSend+0xa4>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d101      	bne.n	8012f50 <xQueueGenericSend+0xa8>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e000      	b.n	8012f52 <xQueueGenericSend+0xaa>
 8012f50:	2300      	movs	r3, #0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d10b      	bne.n	8012f6e <xQueueGenericSend+0xc6>
 8012f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5a:	b672      	cpsid	i
 8012f5c:	f383 8811 	msr	BASEPRI, r3
 8012f60:	f3bf 8f6f 	isb	sy
 8012f64:	f3bf 8f4f 	dsb	sy
 8012f68:	b662      	cpsie	i
 8012f6a:	61fb      	str	r3, [r7, #28]
 8012f6c:	e7fe      	b.n	8012f6c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f6e:	f002 fb1b 	bl	80155a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d302      	bcc.n	8012f84 <xQueueGenericSend+0xdc>
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d129      	bne.n	8012fd8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012f84:	683a      	ldr	r2, [r7, #0]
 8012f86:	68b9      	ldr	r1, [r7, #8]
 8012f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f8a:	f000 fc6e 	bl	801386a <prvCopyDataToQueue>
 8012f8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d010      	beq.n	8012fba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9a:	3324      	adds	r3, #36	; 0x24
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f001 faf7 	bl	8014590 <xTaskRemoveFromEventList>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d013      	beq.n	8012fd0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012fa8:	4b3f      	ldr	r3, [pc, #252]	; (80130a8 <xQueueGenericSend+0x200>)
 8012faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fae:	601a      	str	r2, [r3, #0]
 8012fb0:	f3bf 8f4f 	dsb	sy
 8012fb4:	f3bf 8f6f 	isb	sy
 8012fb8:	e00a      	b.n	8012fd0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d007      	beq.n	8012fd0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012fc0:	4b39      	ldr	r3, [pc, #228]	; (80130a8 <xQueueGenericSend+0x200>)
 8012fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fc6:	601a      	str	r2, [r3, #0]
 8012fc8:	f3bf 8f4f 	dsb	sy
 8012fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012fd0:	f002 fb1c 	bl	801560c <vPortExitCritical>
				return pdPASS;
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e063      	b.n	80130a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d103      	bne.n	8012fe6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012fde:	f002 fb15 	bl	801560c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	e05c      	b.n	80130a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d106      	bne.n	8012ffa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012fec:	f107 0314 	add.w	r3, r7, #20
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f001 fb31 	bl	8014658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012ffa:	f002 fb07 	bl	801560c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012ffe:	f001 f88f 	bl	8014120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013002:	f002 fad1 	bl	80155a8 <vPortEnterCritical>
 8013006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801300c:	b25b      	sxtb	r3, r3
 801300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013012:	d103      	bne.n	801301c <xQueueGenericSend+0x174>
 8013014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013016:	2200      	movs	r2, #0
 8013018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801301e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013022:	b25b      	sxtb	r3, r3
 8013024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013028:	d103      	bne.n	8013032 <xQueueGenericSend+0x18a>
 801302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302c:	2200      	movs	r2, #0
 801302e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013032:	f002 faeb 	bl	801560c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013036:	1d3a      	adds	r2, r7, #4
 8013038:	f107 0314 	add.w	r3, r7, #20
 801303c:	4611      	mov	r1, r2
 801303e:	4618      	mov	r0, r3
 8013040:	f001 fb20 	bl	8014684 <xTaskCheckForTimeOut>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d124      	bne.n	8013094 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801304a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801304c:	f000 fd05 	bl	8013a5a <prvIsQueueFull>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d018      	beq.n	8013088 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013058:	3310      	adds	r3, #16
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	4611      	mov	r1, r2
 801305e:	4618      	mov	r0, r3
 8013060:	f001 fa44 	bl	80144ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013066:	f000 fc90 	bl	801398a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801306a:	f001 f867 	bl	801413c <xTaskResumeAll>
 801306e:	4603      	mov	r3, r0
 8013070:	2b00      	cmp	r3, #0
 8013072:	f47f af7c 	bne.w	8012f6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013076:	4b0c      	ldr	r3, [pc, #48]	; (80130a8 <xQueueGenericSend+0x200>)
 8013078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801307c:	601a      	str	r2, [r3, #0]
 801307e:	f3bf 8f4f 	dsb	sy
 8013082:	f3bf 8f6f 	isb	sy
 8013086:	e772      	b.n	8012f6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801308a:	f000 fc7e 	bl	801398a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801308e:	f001 f855 	bl	801413c <xTaskResumeAll>
 8013092:	e76c      	b.n	8012f6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013096:	f000 fc78 	bl	801398a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801309a:	f001 f84f 	bl	801413c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801309e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3738      	adds	r7, #56	; 0x38
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	e000ed04 	.word	0xe000ed04

080130ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b08e      	sub	sp, #56	; 0x38
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	607a      	str	r2, [r7, #4]
 80130b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d10b      	bne.n	80130dc <xQueueGenericSendFromISR+0x30>
 80130c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c8:	b672      	cpsid	i
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	b662      	cpsie	i
 80130d8:	627b      	str	r3, [r7, #36]	; 0x24
 80130da:	e7fe      	b.n	80130da <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d103      	bne.n	80130ea <xQueueGenericSendFromISR+0x3e>
 80130e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <xQueueGenericSendFromISR+0x42>
 80130ea:	2301      	movs	r3, #1
 80130ec:	e000      	b.n	80130f0 <xQueueGenericSendFromISR+0x44>
 80130ee:	2300      	movs	r3, #0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d10b      	bne.n	801310c <xQueueGenericSendFromISR+0x60>
 80130f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f8:	b672      	cpsid	i
 80130fa:	f383 8811 	msr	BASEPRI, r3
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	f3bf 8f4f 	dsb	sy
 8013106:	b662      	cpsie	i
 8013108:	623b      	str	r3, [r7, #32]
 801310a:	e7fe      	b.n	801310a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	2b02      	cmp	r3, #2
 8013110:	d103      	bne.n	801311a <xQueueGenericSendFromISR+0x6e>
 8013112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013116:	2b01      	cmp	r3, #1
 8013118:	d101      	bne.n	801311e <xQueueGenericSendFromISR+0x72>
 801311a:	2301      	movs	r3, #1
 801311c:	e000      	b.n	8013120 <xQueueGenericSendFromISR+0x74>
 801311e:	2300      	movs	r3, #0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10b      	bne.n	801313c <xQueueGenericSendFromISR+0x90>
 8013124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013128:	b672      	cpsid	i
 801312a:	f383 8811 	msr	BASEPRI, r3
 801312e:	f3bf 8f6f 	isb	sy
 8013132:	f3bf 8f4f 	dsb	sy
 8013136:	b662      	cpsie	i
 8013138:	61fb      	str	r3, [r7, #28]
 801313a:	e7fe      	b.n	801313a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801313c:	f002 fb14 	bl	8015768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013140:	f3ef 8211 	mrs	r2, BASEPRI
 8013144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013148:	b672      	cpsid	i
 801314a:	f383 8811 	msr	BASEPRI, r3
 801314e:	f3bf 8f6f 	isb	sy
 8013152:	f3bf 8f4f 	dsb	sy
 8013156:	b662      	cpsie	i
 8013158:	61ba      	str	r2, [r7, #24]
 801315a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801315c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801315e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013168:	429a      	cmp	r2, r3
 801316a:	d302      	bcc.n	8013172 <xQueueGenericSendFromISR+0xc6>
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	2b02      	cmp	r3, #2
 8013170:	d12c      	bne.n	80131cc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801317c:	683a      	ldr	r2, [r7, #0]
 801317e:	68b9      	ldr	r1, [r7, #8]
 8013180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013182:	f000 fb72 	bl	801386a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013186:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318e:	d112      	bne.n	80131b6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013194:	2b00      	cmp	r3, #0
 8013196:	d016      	beq.n	80131c6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319a:	3324      	adds	r3, #36	; 0x24
 801319c:	4618      	mov	r0, r3
 801319e:	f001 f9f7 	bl	8014590 <xTaskRemoveFromEventList>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d00e      	beq.n	80131c6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00b      	beq.n	80131c6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2201      	movs	r2, #1
 80131b2:	601a      	str	r2, [r3, #0]
 80131b4:	e007      	b.n	80131c6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80131b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80131ba:	3301      	adds	r3, #1
 80131bc:	b2db      	uxtb	r3, r3
 80131be:	b25a      	sxtb	r2, r3
 80131c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80131c6:	2301      	movs	r3, #1
 80131c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80131ca:	e001      	b.n	80131d0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80131cc:	2300      	movs	r3, #0
 80131ce:	637b      	str	r3, [r7, #52]	; 0x34
 80131d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80131da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3738      	adds	r7, #56	; 0x38
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b08e      	sub	sp, #56	; 0x38
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80131f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d10b      	bne.n	8013210 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80131f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fc:	b672      	cpsid	i
 80131fe:	f383 8811 	msr	BASEPRI, r3
 8013202:	f3bf 8f6f 	isb	sy
 8013206:	f3bf 8f4f 	dsb	sy
 801320a:	b662      	cpsie	i
 801320c:	623b      	str	r3, [r7, #32]
 801320e:	e7fe      	b.n	801320e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013214:	2b00      	cmp	r3, #0
 8013216:	d00b      	beq.n	8013230 <xQueueGiveFromISR+0x4c>
 8013218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321c:	b672      	cpsid	i
 801321e:	f383 8811 	msr	BASEPRI, r3
 8013222:	f3bf 8f6f 	isb	sy
 8013226:	f3bf 8f4f 	dsb	sy
 801322a:	b662      	cpsie	i
 801322c:	61fb      	str	r3, [r7, #28]
 801322e:	e7fe      	b.n	801322e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d103      	bne.n	8013240 <xQueueGiveFromISR+0x5c>
 8013238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323a:	689b      	ldr	r3, [r3, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d101      	bne.n	8013244 <xQueueGiveFromISR+0x60>
 8013240:	2301      	movs	r3, #1
 8013242:	e000      	b.n	8013246 <xQueueGiveFromISR+0x62>
 8013244:	2300      	movs	r3, #0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d10b      	bne.n	8013262 <xQueueGiveFromISR+0x7e>
 801324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324e:	b672      	cpsid	i
 8013250:	f383 8811 	msr	BASEPRI, r3
 8013254:	f3bf 8f6f 	isb	sy
 8013258:	f3bf 8f4f 	dsb	sy
 801325c:	b662      	cpsie	i
 801325e:	61bb      	str	r3, [r7, #24]
 8013260:	e7fe      	b.n	8013260 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013262:	f002 fa81 	bl	8015768 <vPortValidateInterruptPriority>
	__asm volatile
 8013266:	f3ef 8211 	mrs	r2, BASEPRI
 801326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801326e:	b672      	cpsid	i
 8013270:	f383 8811 	msr	BASEPRI, r3
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	b662      	cpsie	i
 801327e:	617a      	str	r2, [r7, #20]
 8013280:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013282:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013284:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801328a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013292:	429a      	cmp	r2, r3
 8013294:	d22b      	bcs.n	80132ee <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801329c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80132a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a2:	1c5a      	adds	r2, r3, #1
 80132a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80132ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132b0:	d112      	bne.n	80132d8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d016      	beq.n	80132e8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132bc:	3324      	adds	r3, #36	; 0x24
 80132be:	4618      	mov	r0, r3
 80132c0:	f001 f966 	bl	8014590 <xTaskRemoveFromEventList>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d00e      	beq.n	80132e8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00b      	beq.n	80132e8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	2201      	movs	r2, #1
 80132d4:	601a      	str	r2, [r3, #0]
 80132d6:	e007      	b.n	80132e8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132dc:	3301      	adds	r3, #1
 80132de:	b2db      	uxtb	r3, r3
 80132e0:	b25a      	sxtb	r2, r3
 80132e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80132e8:	2301      	movs	r3, #1
 80132ea:	637b      	str	r3, [r7, #52]	; 0x34
 80132ec:	e001      	b.n	80132f2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80132ee:	2300      	movs	r3, #0
 80132f0:	637b      	str	r3, [r7, #52]	; 0x34
 80132f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80132fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3738      	adds	r7, #56	; 0x38
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
	...

08013308 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b08c      	sub	sp, #48	; 0x30
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013314:	2300      	movs	r3, #0
 8013316:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10b      	bne.n	801333a <xQueueReceive+0x32>
	__asm volatile
 8013322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013326:	b672      	cpsid	i
 8013328:	f383 8811 	msr	BASEPRI, r3
 801332c:	f3bf 8f6f 	isb	sy
 8013330:	f3bf 8f4f 	dsb	sy
 8013334:	b662      	cpsie	i
 8013336:	623b      	str	r3, [r7, #32]
 8013338:	e7fe      	b.n	8013338 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d103      	bne.n	8013348 <xQueueReceive+0x40>
 8013340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013344:	2b00      	cmp	r3, #0
 8013346:	d101      	bne.n	801334c <xQueueReceive+0x44>
 8013348:	2301      	movs	r3, #1
 801334a:	e000      	b.n	801334e <xQueueReceive+0x46>
 801334c:	2300      	movs	r3, #0
 801334e:	2b00      	cmp	r3, #0
 8013350:	d10b      	bne.n	801336a <xQueueReceive+0x62>
 8013352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013356:	b672      	cpsid	i
 8013358:	f383 8811 	msr	BASEPRI, r3
 801335c:	f3bf 8f6f 	isb	sy
 8013360:	f3bf 8f4f 	dsb	sy
 8013364:	b662      	cpsie	i
 8013366:	61fb      	str	r3, [r7, #28]
 8013368:	e7fe      	b.n	8013368 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801336a:	f001 fadf 	bl	801492c <xTaskGetSchedulerState>
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d102      	bne.n	801337a <xQueueReceive+0x72>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d101      	bne.n	801337e <xQueueReceive+0x76>
 801337a:	2301      	movs	r3, #1
 801337c:	e000      	b.n	8013380 <xQueueReceive+0x78>
 801337e:	2300      	movs	r3, #0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10b      	bne.n	801339c <xQueueReceive+0x94>
 8013384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013388:	b672      	cpsid	i
 801338a:	f383 8811 	msr	BASEPRI, r3
 801338e:	f3bf 8f6f 	isb	sy
 8013392:	f3bf 8f4f 	dsb	sy
 8013396:	b662      	cpsie	i
 8013398:	61bb      	str	r3, [r7, #24]
 801339a:	e7fe      	b.n	801339a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801339c:	f002 f904 	bl	80155a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d01f      	beq.n	80133ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133ac:	68b9      	ldr	r1, [r7, #8]
 80133ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133b0:	f000 fac5 	bl	801393e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b6:	1e5a      	subs	r2, r3, #1
 80133b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133be:	691b      	ldr	r3, [r3, #16]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d00f      	beq.n	80133e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c6:	3310      	adds	r3, #16
 80133c8:	4618      	mov	r0, r3
 80133ca:	f001 f8e1 	bl	8014590 <xTaskRemoveFromEventList>
 80133ce:	4603      	mov	r3, r0
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d007      	beq.n	80133e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80133d4:	4b3c      	ldr	r3, [pc, #240]	; (80134c8 <xQueueReceive+0x1c0>)
 80133d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133da:	601a      	str	r2, [r3, #0]
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80133e4:	f002 f912 	bl	801560c <vPortExitCritical>
				return pdPASS;
 80133e8:	2301      	movs	r3, #1
 80133ea:	e069      	b.n	80134c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d103      	bne.n	80133fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133f2:	f002 f90b 	bl	801560c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80133f6:	2300      	movs	r3, #0
 80133f8:	e062      	b.n	80134c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d106      	bne.n	801340e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013400:	f107 0310 	add.w	r3, r7, #16
 8013404:	4618      	mov	r0, r3
 8013406:	f001 f927 	bl	8014658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801340a:	2301      	movs	r3, #1
 801340c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801340e:	f002 f8fd 	bl	801560c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013412:	f000 fe85 	bl	8014120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013416:	f002 f8c7 	bl	80155a8 <vPortEnterCritical>
 801341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013420:	b25b      	sxtb	r3, r3
 8013422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013426:	d103      	bne.n	8013430 <xQueueReceive+0x128>
 8013428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342a:	2200      	movs	r2, #0
 801342c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013436:	b25b      	sxtb	r3, r3
 8013438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801343c:	d103      	bne.n	8013446 <xQueueReceive+0x13e>
 801343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013440:	2200      	movs	r2, #0
 8013442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013446:	f002 f8e1 	bl	801560c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801344a:	1d3a      	adds	r2, r7, #4
 801344c:	f107 0310 	add.w	r3, r7, #16
 8013450:	4611      	mov	r1, r2
 8013452:	4618      	mov	r0, r3
 8013454:	f001 f916 	bl	8014684 <xTaskCheckForTimeOut>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d123      	bne.n	80134a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801345e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013460:	f000 fae5 	bl	8013a2e <prvIsQueueEmpty>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d017      	beq.n	801349a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346c:	3324      	adds	r3, #36	; 0x24
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	4611      	mov	r1, r2
 8013472:	4618      	mov	r0, r3
 8013474:	f001 f83a 	bl	80144ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801347a:	f000 fa86 	bl	801398a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801347e:	f000 fe5d 	bl	801413c <xTaskResumeAll>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d189      	bne.n	801339c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013488:	4b0f      	ldr	r3, [pc, #60]	; (80134c8 <xQueueReceive+0x1c0>)
 801348a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801348e:	601a      	str	r2, [r3, #0]
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	f3bf 8f6f 	isb	sy
 8013498:	e780      	b.n	801339c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801349a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801349c:	f000 fa75 	bl	801398a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134a0:	f000 fe4c 	bl	801413c <xTaskResumeAll>
 80134a4:	e77a      	b.n	801339c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80134a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a8:	f000 fa6f 	bl	801398a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134ac:	f000 fe46 	bl	801413c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134b2:	f000 fabc 	bl	8013a2e <prvIsQueueEmpty>
 80134b6:	4603      	mov	r3, r0
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	f43f af6f 	beq.w	801339c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3730      	adds	r7, #48	; 0x30
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	e000ed04 	.word	0xe000ed04

080134cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b08e      	sub	sp, #56	; 0x38
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80134d6:	2300      	movs	r3, #0
 80134d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80134de:	2300      	movs	r3, #0
 80134e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80134e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d10b      	bne.n	8013500 <xQueueSemaphoreTake+0x34>
 80134e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ec:	b672      	cpsid	i
 80134ee:	f383 8811 	msr	BASEPRI, r3
 80134f2:	f3bf 8f6f 	isb	sy
 80134f6:	f3bf 8f4f 	dsb	sy
 80134fa:	b662      	cpsie	i
 80134fc:	623b      	str	r3, [r7, #32]
 80134fe:	e7fe      	b.n	80134fe <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013504:	2b00      	cmp	r3, #0
 8013506:	d00b      	beq.n	8013520 <xQueueSemaphoreTake+0x54>
 8013508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350c:	b672      	cpsid	i
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	b662      	cpsie	i
 801351c:	61fb      	str	r3, [r7, #28]
 801351e:	e7fe      	b.n	801351e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013520:	f001 fa04 	bl	801492c <xTaskGetSchedulerState>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d102      	bne.n	8013530 <xQueueSemaphoreTake+0x64>
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d101      	bne.n	8013534 <xQueueSemaphoreTake+0x68>
 8013530:	2301      	movs	r3, #1
 8013532:	e000      	b.n	8013536 <xQueueSemaphoreTake+0x6a>
 8013534:	2300      	movs	r3, #0
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10b      	bne.n	8013552 <xQueueSemaphoreTake+0x86>
 801353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353e:	b672      	cpsid	i
 8013540:	f383 8811 	msr	BASEPRI, r3
 8013544:	f3bf 8f6f 	isb	sy
 8013548:	f3bf 8f4f 	dsb	sy
 801354c:	b662      	cpsie	i
 801354e:	61bb      	str	r3, [r7, #24]
 8013550:	e7fe      	b.n	8013550 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013552:	f002 f829 	bl	80155a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801355a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801355e:	2b00      	cmp	r3, #0
 8013560:	d024      	beq.n	80135ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013564:	1e5a      	subs	r2, r3, #1
 8013566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013568:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d104      	bne.n	801357c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013572:	f001 fb55 	bl	8014c20 <pvTaskIncrementMutexHeldCount>
 8013576:	4602      	mov	r2, r0
 8013578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801357a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801357e:	691b      	ldr	r3, [r3, #16]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d00f      	beq.n	80135a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013586:	3310      	adds	r3, #16
 8013588:	4618      	mov	r0, r3
 801358a:	f001 f801 	bl	8014590 <xTaskRemoveFromEventList>
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d007      	beq.n	80135a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013594:	4b54      	ldr	r3, [pc, #336]	; (80136e8 <xQueueSemaphoreTake+0x21c>)
 8013596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801359a:	601a      	str	r2, [r3, #0]
 801359c:	f3bf 8f4f 	dsb	sy
 80135a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80135a4:	f002 f832 	bl	801560c <vPortExitCritical>
				return pdPASS;
 80135a8:	2301      	movs	r3, #1
 80135aa:	e098      	b.n	80136de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d112      	bne.n	80135d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d00b      	beq.n	80135d0 <xQueueSemaphoreTake+0x104>
 80135b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135bc:	b672      	cpsid	i
 80135be:	f383 8811 	msr	BASEPRI, r3
 80135c2:	f3bf 8f6f 	isb	sy
 80135c6:	f3bf 8f4f 	dsb	sy
 80135ca:	b662      	cpsie	i
 80135cc:	617b      	str	r3, [r7, #20]
 80135ce:	e7fe      	b.n	80135ce <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80135d0:	f002 f81c 	bl	801560c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80135d4:	2300      	movs	r3, #0
 80135d6:	e082      	b.n	80136de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80135d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d106      	bne.n	80135ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80135de:	f107 030c 	add.w	r3, r7, #12
 80135e2:	4618      	mov	r0, r3
 80135e4:	f001 f838 	bl	8014658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80135e8:	2301      	movs	r3, #1
 80135ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80135ec:	f002 f80e 	bl	801560c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80135f0:	f000 fd96 	bl	8014120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80135f4:	f001 ffd8 	bl	80155a8 <vPortEnterCritical>
 80135f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135fe:	b25b      	sxtb	r3, r3
 8013600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013604:	d103      	bne.n	801360e <xQueueSemaphoreTake+0x142>
 8013606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013608:	2200      	movs	r2, #0
 801360a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013614:	b25b      	sxtb	r3, r3
 8013616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361a:	d103      	bne.n	8013624 <xQueueSemaphoreTake+0x158>
 801361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361e:	2200      	movs	r2, #0
 8013620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013624:	f001 fff2 	bl	801560c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013628:	463a      	mov	r2, r7
 801362a:	f107 030c 	add.w	r3, r7, #12
 801362e:	4611      	mov	r1, r2
 8013630:	4618      	mov	r0, r3
 8013632:	f001 f827 	bl	8014684 <xTaskCheckForTimeOut>
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d132      	bne.n	80136a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801363c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801363e:	f000 f9f6 	bl	8013a2e <prvIsQueueEmpty>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d026      	beq.n	8013696 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d109      	bne.n	8013664 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013650:	f001 ffaa 	bl	80155a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013656:	689b      	ldr	r3, [r3, #8]
 8013658:	4618      	mov	r0, r3
 801365a:	f001 f985 	bl	8014968 <xTaskPriorityInherit>
 801365e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013660:	f001 ffd4 	bl	801560c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013666:	3324      	adds	r3, #36	; 0x24
 8013668:	683a      	ldr	r2, [r7, #0]
 801366a:	4611      	mov	r1, r2
 801366c:	4618      	mov	r0, r3
 801366e:	f000 ff3d 	bl	80144ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013674:	f000 f989 	bl	801398a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013678:	f000 fd60 	bl	801413c <xTaskResumeAll>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	f47f af67 	bne.w	8013552 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013684:	4b18      	ldr	r3, [pc, #96]	; (80136e8 <xQueueSemaphoreTake+0x21c>)
 8013686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801368a:	601a      	str	r2, [r3, #0]
 801368c:	f3bf 8f4f 	dsb	sy
 8013690:	f3bf 8f6f 	isb	sy
 8013694:	e75d      	b.n	8013552 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013698:	f000 f977 	bl	801398a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801369c:	f000 fd4e 	bl	801413c <xTaskResumeAll>
 80136a0:	e757      	b.n	8013552 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80136a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136a4:	f000 f971 	bl	801398a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80136a8:	f000 fd48 	bl	801413c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136ae:	f000 f9be 	bl	8013a2e <prvIsQueueEmpty>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f43f af4c 	beq.w	8013552 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80136ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d00d      	beq.n	80136dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80136c0:	f001 ff72 	bl	80155a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80136c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136c6:	f000 f8b8 	bl	801383a <prvGetDisinheritPriorityAfterTimeout>
 80136ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80136cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136d2:	4618      	mov	r0, r3
 80136d4:	f001 fa20 	bl	8014b18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80136d8:	f001 ff98 	bl	801560c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80136dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3738      	adds	r7, #56	; 0x38
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	e000ed04 	.word	0xe000ed04

080136ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b08e      	sub	sp, #56	; 0x38
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80136fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d10b      	bne.n	801371a <xQueueReceiveFromISR+0x2e>
 8013702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013706:	b672      	cpsid	i
 8013708:	f383 8811 	msr	BASEPRI, r3
 801370c:	f3bf 8f6f 	isb	sy
 8013710:	f3bf 8f4f 	dsb	sy
 8013714:	b662      	cpsie	i
 8013716:	623b      	str	r3, [r7, #32]
 8013718:	e7fe      	b.n	8013718 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d103      	bne.n	8013728 <xQueueReceiveFromISR+0x3c>
 8013720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013724:	2b00      	cmp	r3, #0
 8013726:	d101      	bne.n	801372c <xQueueReceiveFromISR+0x40>
 8013728:	2301      	movs	r3, #1
 801372a:	e000      	b.n	801372e <xQueueReceiveFromISR+0x42>
 801372c:	2300      	movs	r3, #0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d10b      	bne.n	801374a <xQueueReceiveFromISR+0x5e>
 8013732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013736:	b672      	cpsid	i
 8013738:	f383 8811 	msr	BASEPRI, r3
 801373c:	f3bf 8f6f 	isb	sy
 8013740:	f3bf 8f4f 	dsb	sy
 8013744:	b662      	cpsie	i
 8013746:	61fb      	str	r3, [r7, #28]
 8013748:	e7fe      	b.n	8013748 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801374a:	f002 f80d 	bl	8015768 <vPortValidateInterruptPriority>
	__asm volatile
 801374e:	f3ef 8211 	mrs	r2, BASEPRI
 8013752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013756:	b672      	cpsid	i
 8013758:	f383 8811 	msr	BASEPRI, r3
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	f3bf 8f4f 	dsb	sy
 8013764:	b662      	cpsie	i
 8013766:	61ba      	str	r2, [r7, #24]
 8013768:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801376a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801376c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013772:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013776:	2b00      	cmp	r3, #0
 8013778:	d02f      	beq.n	80137da <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013784:	68b9      	ldr	r1, [r7, #8]
 8013786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013788:	f000 f8d9 	bl	801393e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	1e5a      	subs	r2, r3, #1
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013794:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801379c:	d112      	bne.n	80137c4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d016      	beq.n	80137d4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a8:	3310      	adds	r3, #16
 80137aa:	4618      	mov	r0, r3
 80137ac:	f000 fef0 	bl	8014590 <xTaskRemoveFromEventList>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00e      	beq.n	80137d4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d00b      	beq.n	80137d4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2201      	movs	r2, #1
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	e007      	b.n	80137d4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80137c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137c8:	3301      	adds	r3, #1
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	b25a      	sxtb	r2, r3
 80137ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80137d4:	2301      	movs	r3, #1
 80137d6:	637b      	str	r3, [r7, #52]	; 0x34
 80137d8:	e001      	b.n	80137de <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80137da:	2300      	movs	r3, #0
 80137dc:	637b      	str	r3, [r7, #52]	; 0x34
 80137de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80137e2:	693b      	ldr	r3, [r7, #16]
 80137e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80137e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3738      	adds	r7, #56	; 0x38
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b084      	sub	sp, #16
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10b      	bne.n	801381c <vQueueDelete+0x2a>
	__asm volatile
 8013804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013808:	b672      	cpsid	i
 801380a:	f383 8811 	msr	BASEPRI, r3
 801380e:	f3bf 8f6f 	isb	sy
 8013812:	f3bf 8f4f 	dsb	sy
 8013816:	b662      	cpsie	i
 8013818:	60bb      	str	r3, [r7, #8]
 801381a:	e7fe      	b.n	801381a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801381c:	68f8      	ldr	r0, [r7, #12]
 801381e:	f000 f95d 	bl	8013adc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013828:	2b00      	cmp	r3, #0
 801382a:	d102      	bne.n	8013832 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	f002 f8a5 	bl	801597c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013832:	bf00      	nop
 8013834:	3710      	adds	r7, #16
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}

0801383a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801383a:	b480      	push	{r7}
 801383c:	b085      	sub	sp, #20
 801383e:	af00      	add	r7, sp, #0
 8013840:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013846:	2b00      	cmp	r3, #0
 8013848:	d006      	beq.n	8013858 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013854:	60fb      	str	r3, [r7, #12]
 8013856:	e001      	b.n	801385c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013858:	2300      	movs	r3, #0
 801385a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801385c:	68fb      	ldr	r3, [r7, #12]
	}
 801385e:	4618      	mov	r0, r3
 8013860:	3714      	adds	r7, #20
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr

0801386a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801386a:	b580      	push	{r7, lr}
 801386c:	b086      	sub	sp, #24
 801386e:	af00      	add	r7, sp, #0
 8013870:	60f8      	str	r0, [r7, #12]
 8013872:	60b9      	str	r1, [r7, #8]
 8013874:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013876:	2300      	movs	r3, #0
 8013878:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801387e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013884:	2b00      	cmp	r3, #0
 8013886:	d10d      	bne.n	80138a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d14d      	bne.n	801392c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	689b      	ldr	r3, [r3, #8]
 8013894:	4618      	mov	r0, r3
 8013896:	f001 f8cf 	bl	8014a38 <xTaskPriorityDisinherit>
 801389a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2200      	movs	r2, #0
 80138a0:	609a      	str	r2, [r3, #8]
 80138a2:	e043      	b.n	801392c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d119      	bne.n	80138de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	6858      	ldr	r0, [r3, #4]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138b2:	461a      	mov	r2, r3
 80138b4:	68b9      	ldr	r1, [r7, #8]
 80138b6:	f002 ff1b 	bl	80166f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	685a      	ldr	r2, [r3, #4]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138c2:	441a      	add	r2, r3
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	685a      	ldr	r2, [r3, #4]
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	689b      	ldr	r3, [r3, #8]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d32b      	bcc.n	801392c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	605a      	str	r2, [r3, #4]
 80138dc:	e026      	b.n	801392c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	68d8      	ldr	r0, [r3, #12]
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e6:	461a      	mov	r2, r3
 80138e8:	68b9      	ldr	r1, [r7, #8]
 80138ea:	f002 ff01 	bl	80166f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	68da      	ldr	r2, [r3, #12]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f6:	425b      	negs	r3, r3
 80138f8:	441a      	add	r2, r3
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	68da      	ldr	r2, [r3, #12]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	429a      	cmp	r2, r3
 8013908:	d207      	bcs.n	801391a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	689a      	ldr	r2, [r3, #8]
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013912:	425b      	negs	r3, r3
 8013914:	441a      	add	r2, r3
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2b02      	cmp	r3, #2
 801391e:	d105      	bne.n	801392c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d002      	beq.n	801392c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	3b01      	subs	r3, #1
 801392a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	1c5a      	adds	r2, r3, #1
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013934:	697b      	ldr	r3, [r7, #20]
}
 8013936:	4618      	mov	r0, r3
 8013938:	3718      	adds	r7, #24
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}

0801393e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801393e:	b580      	push	{r7, lr}
 8013940:	b082      	sub	sp, #8
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
 8013946:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801394c:	2b00      	cmp	r3, #0
 801394e:	d018      	beq.n	8013982 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	68da      	ldr	r2, [r3, #12]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013958:	441a      	add	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	68da      	ldr	r2, [r3, #12]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	689b      	ldr	r3, [r3, #8]
 8013966:	429a      	cmp	r2, r3
 8013968:	d303      	bcc.n	8013972 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	68d9      	ldr	r1, [r3, #12]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801397a:	461a      	mov	r2, r3
 801397c:	6838      	ldr	r0, [r7, #0]
 801397e:	f002 feb7 	bl	80166f0 <memcpy>
	}
}
 8013982:	bf00      	nop
 8013984:	3708      	adds	r7, #8
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}

0801398a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801398a:	b580      	push	{r7, lr}
 801398c:	b084      	sub	sp, #16
 801398e:	af00      	add	r7, sp, #0
 8013990:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013992:	f001 fe09 	bl	80155a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801399c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801399e:	e011      	b.n	80139c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d012      	beq.n	80139ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	3324      	adds	r3, #36	; 0x24
 80139ac:	4618      	mov	r0, r3
 80139ae:	f000 fdef 	bl	8014590 <xTaskRemoveFromEventList>
 80139b2:	4603      	mov	r3, r0
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d001      	beq.n	80139bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80139b8:	f000 fec8 	bl	801474c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80139bc:	7bfb      	ldrb	r3, [r7, #15]
 80139be:	3b01      	subs	r3, #1
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80139c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	dce9      	bgt.n	80139a0 <prvUnlockQueue+0x16>
 80139cc:	e000      	b.n	80139d0 <prvUnlockQueue+0x46>
					break;
 80139ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	22ff      	movs	r2, #255	; 0xff
 80139d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80139d8:	f001 fe18 	bl	801560c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80139dc:	f001 fde4 	bl	80155a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80139e8:	e011      	b.n	8013a0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d012      	beq.n	8013a18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	3310      	adds	r3, #16
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 fdca 	bl	8014590 <xTaskRemoveFromEventList>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d001      	beq.n	8013a06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013a02:	f000 fea3 	bl	801474c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a06:	7bbb      	ldrb	r3, [r7, #14]
 8013a08:	3b01      	subs	r3, #1
 8013a0a:	b2db      	uxtb	r3, r3
 8013a0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	dce9      	bgt.n	80139ea <prvUnlockQueue+0x60>
 8013a16:	e000      	b.n	8013a1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	22ff      	movs	r2, #255	; 0xff
 8013a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013a22:	f001 fdf3 	bl	801560c <vPortExitCritical>
}
 8013a26:	bf00      	nop
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}

08013a2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013a2e:	b580      	push	{r7, lr}
 8013a30:	b084      	sub	sp, #16
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a36:	f001 fdb7 	bl	80155a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d102      	bne.n	8013a48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013a42:	2301      	movs	r3, #1
 8013a44:	60fb      	str	r3, [r7, #12]
 8013a46:	e001      	b.n	8013a4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a4c:	f001 fdde 	bl	801560c <vPortExitCritical>

	return xReturn;
 8013a50:	68fb      	ldr	r3, [r7, #12]
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3710      	adds	r7, #16
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}

08013a5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013a5a:	b580      	push	{r7, lr}
 8013a5c:	b084      	sub	sp, #16
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013a62:	f001 fda1 	bl	80155a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	d102      	bne.n	8013a78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013a72:	2301      	movs	r3, #1
 8013a74:	60fb      	str	r3, [r7, #12]
 8013a76:	e001      	b.n	8013a7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013a7c:	f001 fdc6 	bl	801560c <vPortExitCritical>

	return xReturn;
 8013a80:	68fb      	ldr	r3, [r7, #12]
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3710      	adds	r7, #16
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
	...

08013a8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b085      	sub	sp, #20
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013a96:	2300      	movs	r3, #0
 8013a98:	60fb      	str	r3, [r7, #12]
 8013a9a:	e014      	b.n	8013ac6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013a9c:	4a0e      	ldr	r2, [pc, #56]	; (8013ad8 <vQueueAddToRegistry+0x4c>)
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d10b      	bne.n	8013ac0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013aa8:	490b      	ldr	r1, [pc, #44]	; (8013ad8 <vQueueAddToRegistry+0x4c>)
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	683a      	ldr	r2, [r7, #0]
 8013aae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013ab2:	4a09      	ldr	r2, [pc, #36]	; (8013ad8 <vQueueAddToRegistry+0x4c>)
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	4413      	add	r3, r2
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013abe:	e005      	b.n	8013acc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	60fb      	str	r3, [r7, #12]
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b07      	cmp	r3, #7
 8013aca:	d9e7      	bls.n	8013a9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013acc:	bf00      	nop
 8013ace:	3714      	adds	r7, #20
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr
 8013ad8:	200157a8 	.word	0x200157a8

08013adc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013adc:	b480      	push	{r7}
 8013ade:	b085      	sub	sp, #20
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	60fb      	str	r3, [r7, #12]
 8013ae8:	e016      	b.n	8013b18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013aea:	4a10      	ldr	r2, [pc, #64]	; (8013b2c <vQueueUnregisterQueue+0x50>)
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	4413      	add	r3, r2
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d10b      	bne.n	8013b12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013afa:	4a0c      	ldr	r2, [pc, #48]	; (8013b2c <vQueueUnregisterQueue+0x50>)
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2100      	movs	r1, #0
 8013b00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013b04:	4a09      	ldr	r2, [pc, #36]	; (8013b2c <vQueueUnregisterQueue+0x50>)
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	00db      	lsls	r3, r3, #3
 8013b0a:	4413      	add	r3, r2
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	605a      	str	r2, [r3, #4]
				break;
 8013b10:	e005      	b.n	8013b1e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	3301      	adds	r3, #1
 8013b16:	60fb      	str	r3, [r7, #12]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2b07      	cmp	r3, #7
 8013b1c:	d9e5      	bls.n	8013aea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013b1e:	bf00      	nop
 8013b20:	3714      	adds	r7, #20
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop
 8013b2c:	200157a8 	.word	0x200157a8

08013b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b086      	sub	sp, #24
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013b40:	f001 fd32 	bl	80155a8 <vPortEnterCritical>
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b4a:	b25b      	sxtb	r3, r3
 8013b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b50:	d103      	bne.n	8013b5a <vQueueWaitForMessageRestricted+0x2a>
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	2200      	movs	r2, #0
 8013b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b60:	b25b      	sxtb	r3, r3
 8013b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b66:	d103      	bne.n	8013b70 <vQueueWaitForMessageRestricted+0x40>
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b70:	f001 fd4c 	bl	801560c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d106      	bne.n	8013b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	3324      	adds	r3, #36	; 0x24
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	68b9      	ldr	r1, [r7, #8]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f000 fcd7 	bl	8014538 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013b8a:	6978      	ldr	r0, [r7, #20]
 8013b8c:	f7ff fefd 	bl	801398a <prvUnlockQueue>
	}
 8013b90:	bf00      	nop
 8013b92:	3718      	adds	r7, #24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b08e      	sub	sp, #56	; 0x38
 8013b9c:	af04      	add	r7, sp, #16
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
 8013ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d10b      	bne.n	8013bc4 <xTaskCreateStatic+0x2c>
 8013bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bb0:	b672      	cpsid	i
 8013bb2:	f383 8811 	msr	BASEPRI, r3
 8013bb6:	f3bf 8f6f 	isb	sy
 8013bba:	f3bf 8f4f 	dsb	sy
 8013bbe:	b662      	cpsie	i
 8013bc0:	623b      	str	r3, [r7, #32]
 8013bc2:	e7fe      	b.n	8013bc2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8013bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d10b      	bne.n	8013be2 <xTaskCreateStatic+0x4a>
 8013bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bce:	b672      	cpsid	i
 8013bd0:	f383 8811 	msr	BASEPRI, r3
 8013bd4:	f3bf 8f6f 	isb	sy
 8013bd8:	f3bf 8f4f 	dsb	sy
 8013bdc:	b662      	cpsie	i
 8013bde:	61fb      	str	r3, [r7, #28]
 8013be0:	e7fe      	b.n	8013be0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013be2:	235c      	movs	r3, #92	; 0x5c
 8013be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	2b5c      	cmp	r3, #92	; 0x5c
 8013bea:	d00b      	beq.n	8013c04 <xTaskCreateStatic+0x6c>
 8013bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf0:	b672      	cpsid	i
 8013bf2:	f383 8811 	msr	BASEPRI, r3
 8013bf6:	f3bf 8f6f 	isb	sy
 8013bfa:	f3bf 8f4f 	dsb	sy
 8013bfe:	b662      	cpsie	i
 8013c00:	61bb      	str	r3, [r7, #24]
 8013c02:	e7fe      	b.n	8013c02 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013c04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d01e      	beq.n	8013c4a <xTaskCreateStatic+0xb2>
 8013c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d01b      	beq.n	8013c4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1e:	2202      	movs	r2, #2
 8013c20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013c24:	2300      	movs	r3, #0
 8013c26:	9303      	str	r3, [sp, #12]
 8013c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2a:	9302      	str	r3, [sp, #8]
 8013c2c:	f107 0314 	add.w	r3, r7, #20
 8013c30:	9301      	str	r3, [sp, #4]
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	9300      	str	r3, [sp, #0]
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	68b9      	ldr	r1, [r7, #8]
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	f000 f850 	bl	8013ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c44:	f000 f8de 	bl	8013e04 <prvAddNewTaskToReadyList>
 8013c48:	e001      	b.n	8013c4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013c4e:	697b      	ldr	r3, [r7, #20]
	}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3728      	adds	r7, #40	; 0x28
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b08c      	sub	sp, #48	; 0x30
 8013c5c:	af04      	add	r7, sp, #16
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	603b      	str	r3, [r7, #0]
 8013c64:	4613      	mov	r3, r2
 8013c66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013c68:	88fb      	ldrh	r3, [r7, #6]
 8013c6a:	009b      	lsls	r3, r3, #2
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f001 fdbd 	bl	80157ec <pvPortMalloc>
 8013c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d00e      	beq.n	8013c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013c7a:	205c      	movs	r0, #92	; 0x5c
 8013c7c:	f001 fdb6 	bl	80157ec <pvPortMalloc>
 8013c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d003      	beq.n	8013c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	697a      	ldr	r2, [r7, #20]
 8013c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8013c8e:	e005      	b.n	8013c9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013c90:	6978      	ldr	r0, [r7, #20]
 8013c92:	f001 fe73 	bl	801597c <vPortFree>
 8013c96:	e001      	b.n	8013c9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d017      	beq.n	8013cd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013ca2:	69fb      	ldr	r3, [r7, #28]
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013caa:	88fa      	ldrh	r2, [r7, #6]
 8013cac:	2300      	movs	r3, #0
 8013cae:	9303      	str	r3, [sp, #12]
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	9302      	str	r3, [sp, #8]
 8013cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb6:	9301      	str	r3, [sp, #4]
 8013cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	68b9      	ldr	r1, [r7, #8]
 8013cc0:	68f8      	ldr	r0, [r7, #12]
 8013cc2:	f000 f80e 	bl	8013ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013cc6:	69f8      	ldr	r0, [r7, #28]
 8013cc8:	f000 f89c 	bl	8013e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	61bb      	str	r3, [r7, #24]
 8013cd0:	e002      	b.n	8013cd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8013cd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013cd8:	69bb      	ldr	r3, [r7, #24]
	}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3720      	adds	r7, #32
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}

08013ce2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013ce2:	b580      	push	{r7, lr}
 8013ce4:	b088      	sub	sp, #32
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	60f8      	str	r0, [r7, #12]
 8013cea:	60b9      	str	r1, [r7, #8]
 8013cec:	607a      	str	r2, [r7, #4]
 8013cee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	009b      	lsls	r3, r3, #2
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	21a5      	movs	r1, #165	; 0xa5
 8013cfc:	f002 fd03 	bl	8016706 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d04:	6879      	ldr	r1, [r7, #4]
 8013d06:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013d0a:	440b      	add	r3, r1
 8013d0c:	009b      	lsls	r3, r3, #2
 8013d0e:	4413      	add	r3, r2
 8013d10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013d12:	69bb      	ldr	r3, [r7, #24]
 8013d14:	f023 0307 	bic.w	r3, r3, #7
 8013d18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	f003 0307 	and.w	r3, r3, #7
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d00b      	beq.n	8013d3c <prvInitialiseNewTask+0x5a>
 8013d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d28:	b672      	cpsid	i
 8013d2a:	f383 8811 	msr	BASEPRI, r3
 8013d2e:	f3bf 8f6f 	isb	sy
 8013d32:	f3bf 8f4f 	dsb	sy
 8013d36:	b662      	cpsie	i
 8013d38:	617b      	str	r3, [r7, #20]
 8013d3a:	e7fe      	b.n	8013d3a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d01f      	beq.n	8013d82 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d42:	2300      	movs	r3, #0
 8013d44:	61fb      	str	r3, [r7, #28]
 8013d46:	e012      	b.n	8013d6e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013d48:	68ba      	ldr	r2, [r7, #8]
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	7819      	ldrb	r1, [r3, #0]
 8013d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	4413      	add	r3, r2
 8013d56:	3334      	adds	r3, #52	; 0x34
 8013d58:	460a      	mov	r2, r1
 8013d5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013d5c:	68ba      	ldr	r2, [r7, #8]
 8013d5e:	69fb      	ldr	r3, [r7, #28]
 8013d60:	4413      	add	r3, r2
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d006      	beq.n	8013d76 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d68:	69fb      	ldr	r3, [r7, #28]
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	61fb      	str	r3, [r7, #28]
 8013d6e:	69fb      	ldr	r3, [r7, #28]
 8013d70:	2b0f      	cmp	r3, #15
 8013d72:	d9e9      	bls.n	8013d48 <prvInitialiseNewTask+0x66>
 8013d74:	e000      	b.n	8013d78 <prvInitialiseNewTask+0x96>
			{
				break;
 8013d76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013d80:	e003      	b.n	8013d8a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d84:	2200      	movs	r2, #0
 8013d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d8c:	2b37      	cmp	r3, #55	; 0x37
 8013d8e:	d901      	bls.n	8013d94 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013d90:	2337      	movs	r3, #55	; 0x37
 8013d92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da2:	2200      	movs	r2, #0
 8013da4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da8:	3304      	adds	r3, #4
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe fd5c 	bl	8012868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db2:	3318      	adds	r3, #24
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fe fd57 	bl	8012868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013dbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013dce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd8:	2200      	movs	r2, #0
 8013dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013dde:	683a      	ldr	r2, [r7, #0]
 8013de0:	68f9      	ldr	r1, [r7, #12]
 8013de2:	69b8      	ldr	r0, [r7, #24]
 8013de4:	f001 fad8 	bl	8015398 <pxPortInitialiseStack>
 8013de8:	4602      	mov	r2, r0
 8013dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d002      	beq.n	8013dfa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013dfa:	bf00      	nop
 8013dfc:	3720      	adds	r7, #32
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
	...

08013e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013e0c:	f001 fbcc 	bl	80155a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013e10:	4b2d      	ldr	r3, [pc, #180]	; (8013ec8 <prvAddNewTaskToReadyList+0xc4>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	3301      	adds	r3, #1
 8013e16:	4a2c      	ldr	r2, [pc, #176]	; (8013ec8 <prvAddNewTaskToReadyList+0xc4>)
 8013e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013e1a:	4b2c      	ldr	r3, [pc, #176]	; (8013ecc <prvAddNewTaskToReadyList+0xc8>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d109      	bne.n	8013e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013e22:	4a2a      	ldr	r2, [pc, #168]	; (8013ecc <prvAddNewTaskToReadyList+0xc8>)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013e28:	4b27      	ldr	r3, [pc, #156]	; (8013ec8 <prvAddNewTaskToReadyList+0xc4>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d110      	bne.n	8013e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013e30:	f000 fcb0 	bl	8014794 <prvInitialiseTaskLists>
 8013e34:	e00d      	b.n	8013e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013e36:	4b26      	ldr	r3, [pc, #152]	; (8013ed0 <prvAddNewTaskToReadyList+0xcc>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d109      	bne.n	8013e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013e3e:	4b23      	ldr	r3, [pc, #140]	; (8013ecc <prvAddNewTaskToReadyList+0xc8>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d802      	bhi.n	8013e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013e4c:	4a1f      	ldr	r2, [pc, #124]	; (8013ecc <prvAddNewTaskToReadyList+0xc8>)
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013e52:	4b20      	ldr	r3, [pc, #128]	; (8013ed4 <prvAddNewTaskToReadyList+0xd0>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	3301      	adds	r3, #1
 8013e58:	4a1e      	ldr	r2, [pc, #120]	; (8013ed4 <prvAddNewTaskToReadyList+0xd0>)
 8013e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013e5c:	4b1d      	ldr	r3, [pc, #116]	; (8013ed4 <prvAddNewTaskToReadyList+0xd0>)
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e68:	4b1b      	ldr	r3, [pc, #108]	; (8013ed8 <prvAddNewTaskToReadyList+0xd4>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d903      	bls.n	8013e78 <prvAddNewTaskToReadyList+0x74>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e74:	4a18      	ldr	r2, [pc, #96]	; (8013ed8 <prvAddNewTaskToReadyList+0xd4>)
 8013e76:	6013      	str	r3, [r2, #0]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	009b      	lsls	r3, r3, #2
 8013e80:	4413      	add	r3, r2
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4a15      	ldr	r2, [pc, #84]	; (8013edc <prvAddNewTaskToReadyList+0xd8>)
 8013e86:	441a      	add	r2, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	3304      	adds	r3, #4
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	4610      	mov	r0, r2
 8013e90:	f7fe fcf7 	bl	8012882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013e94:	f001 fbba 	bl	801560c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013e98:	4b0d      	ldr	r3, [pc, #52]	; (8013ed0 <prvAddNewTaskToReadyList+0xcc>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d00e      	beq.n	8013ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013ea0:	4b0a      	ldr	r3, [pc, #40]	; (8013ecc <prvAddNewTaskToReadyList+0xc8>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d207      	bcs.n	8013ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013eae:	4b0c      	ldr	r3, [pc, #48]	; (8013ee0 <prvAddNewTaskToReadyList+0xdc>)
 8013eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013eb4:	601a      	str	r2, [r3, #0]
 8013eb6:	f3bf 8f4f 	dsb	sy
 8013eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ebe:	bf00      	nop
 8013ec0:	3708      	adds	r7, #8
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	20000ef4 	.word	0x20000ef4
 8013ecc:	20000a20 	.word	0x20000a20
 8013ed0:	20000f00 	.word	0x20000f00
 8013ed4:	20000f10 	.word	0x20000f10
 8013ed8:	20000efc 	.word	0x20000efc
 8013edc:	20000a24 	.word	0x20000a24
 8013ee0:	e000ed04 	.word	0xe000ed04

08013ee4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08a      	sub	sp, #40	; 0x28
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d10b      	bne.n	8013f10 <vTaskDelayUntil+0x2c>
 8013ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efc:	b672      	cpsid	i
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	b662      	cpsie	i
 8013f0c:	617b      	str	r3, [r7, #20]
 8013f0e:	e7fe      	b.n	8013f0e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d10b      	bne.n	8013f2e <vTaskDelayUntil+0x4a>
 8013f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1a:	b672      	cpsid	i
 8013f1c:	f383 8811 	msr	BASEPRI, r3
 8013f20:	f3bf 8f6f 	isb	sy
 8013f24:	f3bf 8f4f 	dsb	sy
 8013f28:	b662      	cpsie	i
 8013f2a:	613b      	str	r3, [r7, #16]
 8013f2c:	e7fe      	b.n	8013f2c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8013f2e:	4b2a      	ldr	r3, [pc, #168]	; (8013fd8 <vTaskDelayUntil+0xf4>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d00b      	beq.n	8013f4e <vTaskDelayUntil+0x6a>
 8013f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3a:	b672      	cpsid	i
 8013f3c:	f383 8811 	msr	BASEPRI, r3
 8013f40:	f3bf 8f6f 	isb	sy
 8013f44:	f3bf 8f4f 	dsb	sy
 8013f48:	b662      	cpsie	i
 8013f4a:	60fb      	str	r3, [r7, #12]
 8013f4c:	e7fe      	b.n	8013f4c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8013f4e:	f000 f8e7 	bl	8014120 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013f52:	4b22      	ldr	r3, [pc, #136]	; (8013fdc <vTaskDelayUntil+0xf8>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	4413      	add	r3, r2
 8013f60:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	6a3a      	ldr	r2, [r7, #32]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d20b      	bcs.n	8013f84 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	69fa      	ldr	r2, [r7, #28]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d211      	bcs.n	8013f9a <vTaskDelayUntil+0xb6>
 8013f76:	69fa      	ldr	r2, [r7, #28]
 8013f78:	6a3b      	ldr	r3, [r7, #32]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d90d      	bls.n	8013f9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	627b      	str	r3, [r7, #36]	; 0x24
 8013f82:	e00a      	b.n	8013f9a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	69fa      	ldr	r2, [r7, #28]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d303      	bcc.n	8013f96 <vTaskDelayUntil+0xb2>
 8013f8e:	69fa      	ldr	r2, [r7, #28]
 8013f90:	6a3b      	ldr	r3, [r7, #32]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d901      	bls.n	8013f9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8013f96:	2301      	movs	r3, #1
 8013f98:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	69fa      	ldr	r2, [r7, #28]
 8013f9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d006      	beq.n	8013fb4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8013fa6:	69fa      	ldr	r2, [r7, #28]
 8013fa8:	6a3b      	ldr	r3, [r7, #32]
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	2100      	movs	r1, #0
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f000 fe4a 	bl	8014c48 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013fb4:	f000 f8c2 	bl	801413c <xTaskResumeAll>
 8013fb8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013fba:	69bb      	ldr	r3, [r7, #24]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d107      	bne.n	8013fd0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8013fc0:	4b07      	ldr	r3, [pc, #28]	; (8013fe0 <vTaskDelayUntil+0xfc>)
 8013fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fc6:	601a      	str	r2, [r3, #0]
 8013fc8:	f3bf 8f4f 	dsb	sy
 8013fcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013fd0:	bf00      	nop
 8013fd2:	3728      	adds	r7, #40	; 0x28
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	20000f1c 	.word	0x20000f1c
 8013fdc:	20000ef8 	.word	0x20000ef8
 8013fe0:	e000ed04 	.word	0xe000ed04

08013fe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013fec:	2300      	movs	r3, #0
 8013fee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d018      	beq.n	8014028 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013ff6:	4b14      	ldr	r3, [pc, #80]	; (8014048 <vTaskDelay+0x64>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d00b      	beq.n	8014016 <vTaskDelay+0x32>
 8013ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014002:	b672      	cpsid	i
 8014004:	f383 8811 	msr	BASEPRI, r3
 8014008:	f3bf 8f6f 	isb	sy
 801400c:	f3bf 8f4f 	dsb	sy
 8014010:	b662      	cpsie	i
 8014012:	60bb      	str	r3, [r7, #8]
 8014014:	e7fe      	b.n	8014014 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8014016:	f000 f883 	bl	8014120 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801401a:	2100      	movs	r1, #0
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f000 fe13 	bl	8014c48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014022:	f000 f88b 	bl	801413c <xTaskResumeAll>
 8014026:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d107      	bne.n	801403e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801402e:	4b07      	ldr	r3, [pc, #28]	; (801404c <vTaskDelay+0x68>)
 8014030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014034:	601a      	str	r2, [r3, #0]
 8014036:	f3bf 8f4f 	dsb	sy
 801403a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801403e:	bf00      	nop
 8014040:	3710      	adds	r7, #16
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	20000f1c 	.word	0x20000f1c
 801404c:	e000ed04 	.word	0xe000ed04

08014050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b08a      	sub	sp, #40	; 0x28
 8014054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014056:	2300      	movs	r3, #0
 8014058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801405a:	2300      	movs	r3, #0
 801405c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801405e:	463a      	mov	r2, r7
 8014060:	1d39      	adds	r1, r7, #4
 8014062:	f107 0308 	add.w	r3, r7, #8
 8014066:	4618      	mov	r0, r3
 8014068:	f7fe fbaa 	bl	80127c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801406c:	6839      	ldr	r1, [r7, #0]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	68ba      	ldr	r2, [r7, #8]
 8014072:	9202      	str	r2, [sp, #8]
 8014074:	9301      	str	r3, [sp, #4]
 8014076:	2300      	movs	r3, #0
 8014078:	9300      	str	r3, [sp, #0]
 801407a:	2300      	movs	r3, #0
 801407c:	460a      	mov	r2, r1
 801407e:	4922      	ldr	r1, [pc, #136]	; (8014108 <vTaskStartScheduler+0xb8>)
 8014080:	4822      	ldr	r0, [pc, #136]	; (801410c <vTaskStartScheduler+0xbc>)
 8014082:	f7ff fd89 	bl	8013b98 <xTaskCreateStatic>
 8014086:	4602      	mov	r2, r0
 8014088:	4b21      	ldr	r3, [pc, #132]	; (8014110 <vTaskStartScheduler+0xc0>)
 801408a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801408c:	4b20      	ldr	r3, [pc, #128]	; (8014110 <vTaskStartScheduler+0xc0>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d002      	beq.n	801409a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014094:	2301      	movs	r3, #1
 8014096:	617b      	str	r3, [r7, #20]
 8014098:	e001      	b.n	801409e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801409a:	2300      	movs	r3, #0
 801409c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	2b01      	cmp	r3, #1
 80140a2:	d102      	bne.n	80140aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80140a4:	f000 fe24 	bl	8014cf0 <xTimerCreateTimerTask>
 80140a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d117      	bne.n	80140e0 <vTaskStartScheduler+0x90>
 80140b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b4:	b672      	cpsid	i
 80140b6:	f383 8811 	msr	BASEPRI, r3
 80140ba:	f3bf 8f6f 	isb	sy
 80140be:	f3bf 8f4f 	dsb	sy
 80140c2:	b662      	cpsie	i
 80140c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80140c6:	4b13      	ldr	r3, [pc, #76]	; (8014114 <vTaskStartScheduler+0xc4>)
 80140c8:	f04f 32ff 	mov.w	r2, #4294967295
 80140cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80140ce:	4b12      	ldr	r3, [pc, #72]	; (8014118 <vTaskStartScheduler+0xc8>)
 80140d0:	2201      	movs	r2, #1
 80140d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80140d4:	4b11      	ldr	r3, [pc, #68]	; (801411c <vTaskStartScheduler+0xcc>)
 80140d6:	2200      	movs	r2, #0
 80140d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80140da:	f001 f9e9 	bl	80154b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80140de:	e00f      	b.n	8014100 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140e6:	d10b      	bne.n	8014100 <vTaskStartScheduler+0xb0>
 80140e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ec:	b672      	cpsid	i
 80140ee:	f383 8811 	msr	BASEPRI, r3
 80140f2:	f3bf 8f6f 	isb	sy
 80140f6:	f3bf 8f4f 	dsb	sy
 80140fa:	b662      	cpsie	i
 80140fc:	60fb      	str	r3, [r7, #12]
 80140fe:	e7fe      	b.n	80140fe <vTaskStartScheduler+0xae>
}
 8014100:	bf00      	nop
 8014102:	3718      	adds	r7, #24
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}
 8014108:	080186ac 	.word	0x080186ac
 801410c:	08014765 	.word	0x08014765
 8014110:	20000f18 	.word	0x20000f18
 8014114:	20000f14 	.word	0x20000f14
 8014118:	20000f00 	.word	0x20000f00
 801411c:	20000ef8 	.word	0x20000ef8

08014120 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014120:	b480      	push	{r7}
 8014122:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014124:	4b04      	ldr	r3, [pc, #16]	; (8014138 <vTaskSuspendAll+0x18>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	3301      	adds	r3, #1
 801412a:	4a03      	ldr	r2, [pc, #12]	; (8014138 <vTaskSuspendAll+0x18>)
 801412c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801412e:	bf00      	nop
 8014130:	46bd      	mov	sp, r7
 8014132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014136:	4770      	bx	lr
 8014138:	20000f1c 	.word	0x20000f1c

0801413c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014142:	2300      	movs	r3, #0
 8014144:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014146:	2300      	movs	r3, #0
 8014148:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801414a:	4b42      	ldr	r3, [pc, #264]	; (8014254 <xTaskResumeAll+0x118>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d10b      	bne.n	801416a <xTaskResumeAll+0x2e>
 8014152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014156:	b672      	cpsid	i
 8014158:	f383 8811 	msr	BASEPRI, r3
 801415c:	f3bf 8f6f 	isb	sy
 8014160:	f3bf 8f4f 	dsb	sy
 8014164:	b662      	cpsie	i
 8014166:	603b      	str	r3, [r7, #0]
 8014168:	e7fe      	b.n	8014168 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801416a:	f001 fa1d 	bl	80155a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801416e:	4b39      	ldr	r3, [pc, #228]	; (8014254 <xTaskResumeAll+0x118>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	3b01      	subs	r3, #1
 8014174:	4a37      	ldr	r2, [pc, #220]	; (8014254 <xTaskResumeAll+0x118>)
 8014176:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014178:	4b36      	ldr	r3, [pc, #216]	; (8014254 <xTaskResumeAll+0x118>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d162      	bne.n	8014246 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014180:	4b35      	ldr	r3, [pc, #212]	; (8014258 <xTaskResumeAll+0x11c>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d05e      	beq.n	8014246 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014188:	e02f      	b.n	80141ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801418a:	4b34      	ldr	r3, [pc, #208]	; (801425c <xTaskResumeAll+0x120>)
 801418c:	68db      	ldr	r3, [r3, #12]
 801418e:	68db      	ldr	r3, [r3, #12]
 8014190:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	3318      	adds	r3, #24
 8014196:	4618      	mov	r0, r3
 8014198:	f7fe fbd0 	bl	801293c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	3304      	adds	r3, #4
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7fe fbcb 	bl	801293c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141aa:	4b2d      	ldr	r3, [pc, #180]	; (8014260 <xTaskResumeAll+0x124>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d903      	bls.n	80141ba <xTaskResumeAll+0x7e>
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b6:	4a2a      	ldr	r2, [pc, #168]	; (8014260 <xTaskResumeAll+0x124>)
 80141b8:	6013      	str	r3, [r2, #0]
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141be:	4613      	mov	r3, r2
 80141c0:	009b      	lsls	r3, r3, #2
 80141c2:	4413      	add	r3, r2
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	4a27      	ldr	r2, [pc, #156]	; (8014264 <xTaskResumeAll+0x128>)
 80141c8:	441a      	add	r2, r3
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	3304      	adds	r3, #4
 80141ce:	4619      	mov	r1, r3
 80141d0:	4610      	mov	r0, r2
 80141d2:	f7fe fb56 	bl	8012882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141da:	4b23      	ldr	r3, [pc, #140]	; (8014268 <xTaskResumeAll+0x12c>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d302      	bcc.n	80141ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80141e4:	4b21      	ldr	r3, [pc, #132]	; (801426c <xTaskResumeAll+0x130>)
 80141e6:	2201      	movs	r2, #1
 80141e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80141ea:	4b1c      	ldr	r3, [pc, #112]	; (801425c <xTaskResumeAll+0x120>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d1cb      	bne.n	801418a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d001      	beq.n	80141fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80141f8:	f000 fb68 	bl	80148cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80141fc:	4b1c      	ldr	r3, [pc, #112]	; (8014270 <xTaskResumeAll+0x134>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d010      	beq.n	801422a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014208:	f000 f858 	bl	80142bc <xTaskIncrementTick>
 801420c:	4603      	mov	r3, r0
 801420e:	2b00      	cmp	r3, #0
 8014210:	d002      	beq.n	8014218 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8014212:	4b16      	ldr	r3, [pc, #88]	; (801426c <xTaskResumeAll+0x130>)
 8014214:	2201      	movs	r2, #1
 8014216:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	3b01      	subs	r3, #1
 801421c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d1f1      	bne.n	8014208 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8014224:	4b12      	ldr	r3, [pc, #72]	; (8014270 <xTaskResumeAll+0x134>)
 8014226:	2200      	movs	r2, #0
 8014228:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801422a:	4b10      	ldr	r3, [pc, #64]	; (801426c <xTaskResumeAll+0x130>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d009      	beq.n	8014246 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014232:	2301      	movs	r3, #1
 8014234:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014236:	4b0f      	ldr	r3, [pc, #60]	; (8014274 <xTaskResumeAll+0x138>)
 8014238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801423c:	601a      	str	r2, [r3, #0]
 801423e:	f3bf 8f4f 	dsb	sy
 8014242:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014246:	f001 f9e1 	bl	801560c <vPortExitCritical>

	return xAlreadyYielded;
 801424a:	68bb      	ldr	r3, [r7, #8]
}
 801424c:	4618      	mov	r0, r3
 801424e:	3710      	adds	r7, #16
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}
 8014254:	20000f1c 	.word	0x20000f1c
 8014258:	20000ef4 	.word	0x20000ef4
 801425c:	20000eb4 	.word	0x20000eb4
 8014260:	20000efc 	.word	0x20000efc
 8014264:	20000a24 	.word	0x20000a24
 8014268:	20000a20 	.word	0x20000a20
 801426c:	20000f08 	.word	0x20000f08
 8014270:	20000f04 	.word	0x20000f04
 8014274:	e000ed04 	.word	0xe000ed04

08014278 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801427e:	4b05      	ldr	r3, [pc, #20]	; (8014294 <xTaskGetTickCount+0x1c>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014284:	687b      	ldr	r3, [r7, #4]
}
 8014286:	4618      	mov	r0, r3
 8014288:	370c      	adds	r7, #12
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop
 8014294:	20000ef8 	.word	0x20000ef8

08014298 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801429e:	f001 fa63 	bl	8015768 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80142a2:	2300      	movs	r3, #0
 80142a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80142a6:	4b04      	ldr	r3, [pc, #16]	; (80142b8 <xTaskGetTickCountFromISR+0x20>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80142ac:	683b      	ldr	r3, [r7, #0]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	20000ef8 	.word	0x20000ef8

080142bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b086      	sub	sp, #24
 80142c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80142c2:	2300      	movs	r3, #0
 80142c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142c6:	4b4f      	ldr	r3, [pc, #316]	; (8014404 <xTaskIncrementTick+0x148>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f040 808a 	bne.w	80143e4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80142d0:	4b4d      	ldr	r3, [pc, #308]	; (8014408 <xTaskIncrementTick+0x14c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	3301      	adds	r3, #1
 80142d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80142d8:	4a4b      	ldr	r2, [pc, #300]	; (8014408 <xTaskIncrementTick+0x14c>)
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d121      	bne.n	8014328 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80142e4:	4b49      	ldr	r3, [pc, #292]	; (801440c <xTaskIncrementTick+0x150>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d00b      	beq.n	8014306 <xTaskIncrementTick+0x4a>
 80142ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f2:	b672      	cpsid	i
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	b662      	cpsie	i
 8014302:	603b      	str	r3, [r7, #0]
 8014304:	e7fe      	b.n	8014304 <xTaskIncrementTick+0x48>
 8014306:	4b41      	ldr	r3, [pc, #260]	; (801440c <xTaskIncrementTick+0x150>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	4b40      	ldr	r3, [pc, #256]	; (8014410 <xTaskIncrementTick+0x154>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4a3e      	ldr	r2, [pc, #248]	; (801440c <xTaskIncrementTick+0x150>)
 8014312:	6013      	str	r3, [r2, #0]
 8014314:	4a3e      	ldr	r2, [pc, #248]	; (8014410 <xTaskIncrementTick+0x154>)
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	6013      	str	r3, [r2, #0]
 801431a:	4b3e      	ldr	r3, [pc, #248]	; (8014414 <xTaskIncrementTick+0x158>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	3301      	adds	r3, #1
 8014320:	4a3c      	ldr	r2, [pc, #240]	; (8014414 <xTaskIncrementTick+0x158>)
 8014322:	6013      	str	r3, [r2, #0]
 8014324:	f000 fad2 	bl	80148cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014328:	4b3b      	ldr	r3, [pc, #236]	; (8014418 <xTaskIncrementTick+0x15c>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	693a      	ldr	r2, [r7, #16]
 801432e:	429a      	cmp	r2, r3
 8014330:	d349      	bcc.n	80143c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014332:	4b36      	ldr	r3, [pc, #216]	; (801440c <xTaskIncrementTick+0x150>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d104      	bne.n	8014346 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801433c:	4b36      	ldr	r3, [pc, #216]	; (8014418 <xTaskIncrementTick+0x15c>)
 801433e:	f04f 32ff 	mov.w	r2, #4294967295
 8014342:	601a      	str	r2, [r3, #0]
					break;
 8014344:	e03f      	b.n	80143c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014346:	4b31      	ldr	r3, [pc, #196]	; (801440c <xTaskIncrementTick+0x150>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	68db      	ldr	r3, [r3, #12]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	685b      	ldr	r3, [r3, #4]
 8014354:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014356:	693a      	ldr	r2, [r7, #16]
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	429a      	cmp	r2, r3
 801435c:	d203      	bcs.n	8014366 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801435e:	4a2e      	ldr	r2, [pc, #184]	; (8014418 <xTaskIncrementTick+0x15c>)
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014364:	e02f      	b.n	80143c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	3304      	adds	r3, #4
 801436a:	4618      	mov	r0, r3
 801436c:	f7fe fae6 	bl	801293c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014374:	2b00      	cmp	r3, #0
 8014376:	d004      	beq.n	8014382 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	3318      	adds	r3, #24
 801437c:	4618      	mov	r0, r3
 801437e:	f7fe fadd 	bl	801293c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014386:	4b25      	ldr	r3, [pc, #148]	; (801441c <xTaskIncrementTick+0x160>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	429a      	cmp	r2, r3
 801438c:	d903      	bls.n	8014396 <xTaskIncrementTick+0xda>
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014392:	4a22      	ldr	r2, [pc, #136]	; (801441c <xTaskIncrementTick+0x160>)
 8014394:	6013      	str	r3, [r2, #0]
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801439a:	4613      	mov	r3, r2
 801439c:	009b      	lsls	r3, r3, #2
 801439e:	4413      	add	r3, r2
 80143a0:	009b      	lsls	r3, r3, #2
 80143a2:	4a1f      	ldr	r2, [pc, #124]	; (8014420 <xTaskIncrementTick+0x164>)
 80143a4:	441a      	add	r2, r3
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	3304      	adds	r3, #4
 80143aa:	4619      	mov	r1, r3
 80143ac:	4610      	mov	r0, r2
 80143ae:	f7fe fa68 	bl	8012882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143b6:	4b1b      	ldr	r3, [pc, #108]	; (8014424 <xTaskIncrementTick+0x168>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143bc:	429a      	cmp	r2, r3
 80143be:	d3b8      	bcc.n	8014332 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80143c0:	2301      	movs	r3, #1
 80143c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143c4:	e7b5      	b.n	8014332 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80143c6:	4b17      	ldr	r3, [pc, #92]	; (8014424 <xTaskIncrementTick+0x168>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143cc:	4914      	ldr	r1, [pc, #80]	; (8014420 <xTaskIncrementTick+0x164>)
 80143ce:	4613      	mov	r3, r2
 80143d0:	009b      	lsls	r3, r3, #2
 80143d2:	4413      	add	r3, r2
 80143d4:	009b      	lsls	r3, r3, #2
 80143d6:	440b      	add	r3, r1
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d907      	bls.n	80143ee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80143de:	2301      	movs	r3, #1
 80143e0:	617b      	str	r3, [r7, #20]
 80143e2:	e004      	b.n	80143ee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80143e4:	4b10      	ldr	r3, [pc, #64]	; (8014428 <xTaskIncrementTick+0x16c>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	3301      	adds	r3, #1
 80143ea:	4a0f      	ldr	r2, [pc, #60]	; (8014428 <xTaskIncrementTick+0x16c>)
 80143ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80143ee:	4b0f      	ldr	r3, [pc, #60]	; (801442c <xTaskIncrementTick+0x170>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d001      	beq.n	80143fa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80143f6:	2301      	movs	r3, #1
 80143f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80143fa:	697b      	ldr	r3, [r7, #20]
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	20000f1c 	.word	0x20000f1c
 8014408:	20000ef8 	.word	0x20000ef8
 801440c:	20000eac 	.word	0x20000eac
 8014410:	20000eb0 	.word	0x20000eb0
 8014414:	20000f0c 	.word	0x20000f0c
 8014418:	20000f14 	.word	0x20000f14
 801441c:	20000efc 	.word	0x20000efc
 8014420:	20000a24 	.word	0x20000a24
 8014424:	20000a20 	.word	0x20000a20
 8014428:	20000f04 	.word	0x20000f04
 801442c:	20000f08 	.word	0x20000f08

08014430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014430:	b480      	push	{r7}
 8014432:	b085      	sub	sp, #20
 8014434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014436:	4b28      	ldr	r3, [pc, #160]	; (80144d8 <vTaskSwitchContext+0xa8>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d003      	beq.n	8014446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801443e:	4b27      	ldr	r3, [pc, #156]	; (80144dc <vTaskSwitchContext+0xac>)
 8014440:	2201      	movs	r2, #1
 8014442:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014444:	e042      	b.n	80144cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8014446:	4b25      	ldr	r3, [pc, #148]	; (80144dc <vTaskSwitchContext+0xac>)
 8014448:	2200      	movs	r2, #0
 801444a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801444c:	4b24      	ldr	r3, [pc, #144]	; (80144e0 <vTaskSwitchContext+0xb0>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	60fb      	str	r3, [r7, #12]
 8014452:	e011      	b.n	8014478 <vTaskSwitchContext+0x48>
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d10b      	bne.n	8014472 <vTaskSwitchContext+0x42>
 801445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801445e:	b672      	cpsid	i
 8014460:	f383 8811 	msr	BASEPRI, r3
 8014464:	f3bf 8f6f 	isb	sy
 8014468:	f3bf 8f4f 	dsb	sy
 801446c:	b662      	cpsie	i
 801446e:	607b      	str	r3, [r7, #4]
 8014470:	e7fe      	b.n	8014470 <vTaskSwitchContext+0x40>
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	3b01      	subs	r3, #1
 8014476:	60fb      	str	r3, [r7, #12]
 8014478:	491a      	ldr	r1, [pc, #104]	; (80144e4 <vTaskSwitchContext+0xb4>)
 801447a:	68fa      	ldr	r2, [r7, #12]
 801447c:	4613      	mov	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	4413      	add	r3, r2
 8014482:	009b      	lsls	r3, r3, #2
 8014484:	440b      	add	r3, r1
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d0e3      	beq.n	8014454 <vTaskSwitchContext+0x24>
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	4613      	mov	r3, r2
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	4413      	add	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	4a13      	ldr	r2, [pc, #76]	; (80144e4 <vTaskSwitchContext+0xb4>)
 8014498:	4413      	add	r3, r2
 801449a:	60bb      	str	r3, [r7, #8]
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	685a      	ldr	r2, [r3, #4]
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	605a      	str	r2, [r3, #4]
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	685a      	ldr	r2, [r3, #4]
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	3308      	adds	r3, #8
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d104      	bne.n	80144bc <vTaskSwitchContext+0x8c>
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	685a      	ldr	r2, [r3, #4]
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	605a      	str	r2, [r3, #4]
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	68db      	ldr	r3, [r3, #12]
 80144c2:	4a09      	ldr	r2, [pc, #36]	; (80144e8 <vTaskSwitchContext+0xb8>)
 80144c4:	6013      	str	r3, [r2, #0]
 80144c6:	4a06      	ldr	r2, [pc, #24]	; (80144e0 <vTaskSwitchContext+0xb0>)
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	6013      	str	r3, [r2, #0]
}
 80144cc:	bf00      	nop
 80144ce:	3714      	adds	r7, #20
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr
 80144d8:	20000f1c 	.word	0x20000f1c
 80144dc:	20000f08 	.word	0x20000f08
 80144e0:	20000efc 	.word	0x20000efc
 80144e4:	20000a24 	.word	0x20000a24
 80144e8:	20000a20 	.word	0x20000a20

080144ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d10b      	bne.n	8014514 <vTaskPlaceOnEventList+0x28>
 80144fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014500:	b672      	cpsid	i
 8014502:	f383 8811 	msr	BASEPRI, r3
 8014506:	f3bf 8f6f 	isb	sy
 801450a:	f3bf 8f4f 	dsb	sy
 801450e:	b662      	cpsie	i
 8014510:	60fb      	str	r3, [r7, #12]
 8014512:	e7fe      	b.n	8014512 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014514:	4b07      	ldr	r3, [pc, #28]	; (8014534 <vTaskPlaceOnEventList+0x48>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	3318      	adds	r3, #24
 801451a:	4619      	mov	r1, r3
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f7fe f9d4 	bl	80128ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014522:	2101      	movs	r1, #1
 8014524:	6838      	ldr	r0, [r7, #0]
 8014526:	f000 fb8f 	bl	8014c48 <prvAddCurrentTaskToDelayedList>
}
 801452a:	bf00      	nop
 801452c:	3710      	adds	r7, #16
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}
 8014532:	bf00      	nop
 8014534:	20000a20 	.word	0x20000a20

08014538 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014538:	b580      	push	{r7, lr}
 801453a:	b086      	sub	sp, #24
 801453c:	af00      	add	r7, sp, #0
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d10b      	bne.n	8014562 <vTaskPlaceOnEventListRestricted+0x2a>
 801454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801454e:	b672      	cpsid	i
 8014550:	f383 8811 	msr	BASEPRI, r3
 8014554:	f3bf 8f6f 	isb	sy
 8014558:	f3bf 8f4f 	dsb	sy
 801455c:	b662      	cpsie	i
 801455e:	617b      	str	r3, [r7, #20]
 8014560:	e7fe      	b.n	8014560 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014562:	4b0a      	ldr	r3, [pc, #40]	; (801458c <vTaskPlaceOnEventListRestricted+0x54>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	3318      	adds	r3, #24
 8014568:	4619      	mov	r1, r3
 801456a:	68f8      	ldr	r0, [r7, #12]
 801456c:	f7fe f989 	bl	8012882 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d002      	beq.n	801457c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8014576:	f04f 33ff 	mov.w	r3, #4294967295
 801457a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801457c:	6879      	ldr	r1, [r7, #4]
 801457e:	68b8      	ldr	r0, [r7, #8]
 8014580:	f000 fb62 	bl	8014c48 <prvAddCurrentTaskToDelayedList>
	}
 8014584:	bf00      	nop
 8014586:	3718      	adds	r7, #24
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	20000a20 	.word	0x20000a20

08014590 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	68db      	ldr	r3, [r3, #12]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d10b      	bne.n	80145be <xTaskRemoveFromEventList+0x2e>
 80145a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145aa:	b672      	cpsid	i
 80145ac:	f383 8811 	msr	BASEPRI, r3
 80145b0:	f3bf 8f6f 	isb	sy
 80145b4:	f3bf 8f4f 	dsb	sy
 80145b8:	b662      	cpsie	i
 80145ba:	60fb      	str	r3, [r7, #12]
 80145bc:	e7fe      	b.n	80145bc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	3318      	adds	r3, #24
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fe f9ba 	bl	801293c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145c8:	4b1d      	ldr	r3, [pc, #116]	; (8014640 <xTaskRemoveFromEventList+0xb0>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d11d      	bne.n	801460c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	3304      	adds	r3, #4
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7fe f9b1 	bl	801293c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145de:	4b19      	ldr	r3, [pc, #100]	; (8014644 <xTaskRemoveFromEventList+0xb4>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d903      	bls.n	80145ee <xTaskRemoveFromEventList+0x5e>
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ea:	4a16      	ldr	r2, [pc, #88]	; (8014644 <xTaskRemoveFromEventList+0xb4>)
 80145ec:	6013      	str	r3, [r2, #0]
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145f2:	4613      	mov	r3, r2
 80145f4:	009b      	lsls	r3, r3, #2
 80145f6:	4413      	add	r3, r2
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	4a13      	ldr	r2, [pc, #76]	; (8014648 <xTaskRemoveFromEventList+0xb8>)
 80145fc:	441a      	add	r2, r3
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	3304      	adds	r3, #4
 8014602:	4619      	mov	r1, r3
 8014604:	4610      	mov	r0, r2
 8014606:	f7fe f93c 	bl	8012882 <vListInsertEnd>
 801460a:	e005      	b.n	8014618 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	3318      	adds	r3, #24
 8014610:	4619      	mov	r1, r3
 8014612:	480e      	ldr	r0, [pc, #56]	; (801464c <xTaskRemoveFromEventList+0xbc>)
 8014614:	f7fe f935 	bl	8012882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801461c:	4b0c      	ldr	r3, [pc, #48]	; (8014650 <xTaskRemoveFromEventList+0xc0>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014622:	429a      	cmp	r2, r3
 8014624:	d905      	bls.n	8014632 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014626:	2301      	movs	r3, #1
 8014628:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801462a:	4b0a      	ldr	r3, [pc, #40]	; (8014654 <xTaskRemoveFromEventList+0xc4>)
 801462c:	2201      	movs	r2, #1
 801462e:	601a      	str	r2, [r3, #0]
 8014630:	e001      	b.n	8014636 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014632:	2300      	movs	r3, #0
 8014634:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014636:	697b      	ldr	r3, [r7, #20]
}
 8014638:	4618      	mov	r0, r3
 801463a:	3718      	adds	r7, #24
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	20000f1c 	.word	0x20000f1c
 8014644:	20000efc 	.word	0x20000efc
 8014648:	20000a24 	.word	0x20000a24
 801464c:	20000eb4 	.word	0x20000eb4
 8014650:	20000a20 	.word	0x20000a20
 8014654:	20000f08 	.word	0x20000f08

08014658 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014658:	b480      	push	{r7}
 801465a:	b083      	sub	sp, #12
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014660:	4b06      	ldr	r3, [pc, #24]	; (801467c <vTaskInternalSetTimeOutState+0x24>)
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014668:	4b05      	ldr	r3, [pc, #20]	; (8014680 <vTaskInternalSetTimeOutState+0x28>)
 801466a:	681a      	ldr	r2, [r3, #0]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	605a      	str	r2, [r3, #4]
}
 8014670:	bf00      	nop
 8014672:	370c      	adds	r7, #12
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr
 801467c:	20000f0c 	.word	0x20000f0c
 8014680:	20000ef8 	.word	0x20000ef8

08014684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b088      	sub	sp, #32
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d10b      	bne.n	80146ac <xTaskCheckForTimeOut+0x28>
 8014694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014698:	b672      	cpsid	i
 801469a:	f383 8811 	msr	BASEPRI, r3
 801469e:	f3bf 8f6f 	isb	sy
 80146a2:	f3bf 8f4f 	dsb	sy
 80146a6:	b662      	cpsie	i
 80146a8:	613b      	str	r3, [r7, #16]
 80146aa:	e7fe      	b.n	80146aa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d10b      	bne.n	80146ca <xTaskCheckForTimeOut+0x46>
 80146b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b6:	b672      	cpsid	i
 80146b8:	f383 8811 	msr	BASEPRI, r3
 80146bc:	f3bf 8f6f 	isb	sy
 80146c0:	f3bf 8f4f 	dsb	sy
 80146c4:	b662      	cpsie	i
 80146c6:	60fb      	str	r3, [r7, #12]
 80146c8:	e7fe      	b.n	80146c8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80146ca:	f000 ff6d 	bl	80155a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80146ce:	4b1d      	ldr	r3, [pc, #116]	; (8014744 <xTaskCheckForTimeOut+0xc0>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	69ba      	ldr	r2, [r7, #24]
 80146da:	1ad3      	subs	r3, r2, r3
 80146dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146e6:	d102      	bne.n	80146ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80146e8:	2300      	movs	r3, #0
 80146ea:	61fb      	str	r3, [r7, #28]
 80146ec:	e023      	b.n	8014736 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681a      	ldr	r2, [r3, #0]
 80146f2:	4b15      	ldr	r3, [pc, #84]	; (8014748 <xTaskCheckForTimeOut+0xc4>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d007      	beq.n	801470a <xTaskCheckForTimeOut+0x86>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	69ba      	ldr	r2, [r7, #24]
 8014700:	429a      	cmp	r2, r3
 8014702:	d302      	bcc.n	801470a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014704:	2301      	movs	r3, #1
 8014706:	61fb      	str	r3, [r7, #28]
 8014708:	e015      	b.n	8014736 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	697a      	ldr	r2, [r7, #20]
 8014710:	429a      	cmp	r2, r3
 8014712:	d20b      	bcs.n	801472c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	1ad2      	subs	r2, r2, r3
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7ff ff99 	bl	8014658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014726:	2300      	movs	r3, #0
 8014728:	61fb      	str	r3, [r7, #28]
 801472a:	e004      	b.n	8014736 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	2200      	movs	r2, #0
 8014730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014732:	2301      	movs	r3, #1
 8014734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014736:	f000 ff69 	bl	801560c <vPortExitCritical>

	return xReturn;
 801473a:	69fb      	ldr	r3, [r7, #28]
}
 801473c:	4618      	mov	r0, r3
 801473e:	3720      	adds	r7, #32
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	20000ef8 	.word	0x20000ef8
 8014748:	20000f0c 	.word	0x20000f0c

0801474c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801474c:	b480      	push	{r7}
 801474e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014750:	4b03      	ldr	r3, [pc, #12]	; (8014760 <vTaskMissedYield+0x14>)
 8014752:	2201      	movs	r2, #1
 8014754:	601a      	str	r2, [r3, #0]
}
 8014756:	bf00      	nop
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr
 8014760:	20000f08 	.word	0x20000f08

08014764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801476c:	f000 f852 	bl	8014814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014770:	4b06      	ldr	r3, [pc, #24]	; (801478c <prvIdleTask+0x28>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b01      	cmp	r3, #1
 8014776:	d9f9      	bls.n	801476c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014778:	4b05      	ldr	r3, [pc, #20]	; (8014790 <prvIdleTask+0x2c>)
 801477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801477e:	601a      	str	r2, [r3, #0]
 8014780:	f3bf 8f4f 	dsb	sy
 8014784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014788:	e7f0      	b.n	801476c <prvIdleTask+0x8>
 801478a:	bf00      	nop
 801478c:	20000a24 	.word	0x20000a24
 8014790:	e000ed04 	.word	0xe000ed04

08014794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801479a:	2300      	movs	r3, #0
 801479c:	607b      	str	r3, [r7, #4]
 801479e:	e00c      	b.n	80147ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	4613      	mov	r3, r2
 80147a4:	009b      	lsls	r3, r3, #2
 80147a6:	4413      	add	r3, r2
 80147a8:	009b      	lsls	r3, r3, #2
 80147aa:	4a12      	ldr	r2, [pc, #72]	; (80147f4 <prvInitialiseTaskLists+0x60>)
 80147ac:	4413      	add	r3, r2
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fe f83a 	bl	8012828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3301      	adds	r3, #1
 80147b8:	607b      	str	r3, [r7, #4]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2b37      	cmp	r3, #55	; 0x37
 80147be:	d9ef      	bls.n	80147a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80147c0:	480d      	ldr	r0, [pc, #52]	; (80147f8 <prvInitialiseTaskLists+0x64>)
 80147c2:	f7fe f831 	bl	8012828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80147c6:	480d      	ldr	r0, [pc, #52]	; (80147fc <prvInitialiseTaskLists+0x68>)
 80147c8:	f7fe f82e 	bl	8012828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80147cc:	480c      	ldr	r0, [pc, #48]	; (8014800 <prvInitialiseTaskLists+0x6c>)
 80147ce:	f7fe f82b 	bl	8012828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80147d2:	480c      	ldr	r0, [pc, #48]	; (8014804 <prvInitialiseTaskLists+0x70>)
 80147d4:	f7fe f828 	bl	8012828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80147d8:	480b      	ldr	r0, [pc, #44]	; (8014808 <prvInitialiseTaskLists+0x74>)
 80147da:	f7fe f825 	bl	8012828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80147de:	4b0b      	ldr	r3, [pc, #44]	; (801480c <prvInitialiseTaskLists+0x78>)
 80147e0:	4a05      	ldr	r2, [pc, #20]	; (80147f8 <prvInitialiseTaskLists+0x64>)
 80147e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80147e4:	4b0a      	ldr	r3, [pc, #40]	; (8014810 <prvInitialiseTaskLists+0x7c>)
 80147e6:	4a05      	ldr	r2, [pc, #20]	; (80147fc <prvInitialiseTaskLists+0x68>)
 80147e8:	601a      	str	r2, [r3, #0]
}
 80147ea:	bf00      	nop
 80147ec:	3708      	adds	r7, #8
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	20000a24 	.word	0x20000a24
 80147f8:	20000e84 	.word	0x20000e84
 80147fc:	20000e98 	.word	0x20000e98
 8014800:	20000eb4 	.word	0x20000eb4
 8014804:	20000ec8 	.word	0x20000ec8
 8014808:	20000ee0 	.word	0x20000ee0
 801480c:	20000eac 	.word	0x20000eac
 8014810:	20000eb0 	.word	0x20000eb0

08014814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801481a:	e019      	b.n	8014850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801481c:	f000 fec4 	bl	80155a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014820:	4b0f      	ldr	r3, [pc, #60]	; (8014860 <prvCheckTasksWaitingTermination+0x4c>)
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	3304      	adds	r3, #4
 801482c:	4618      	mov	r0, r3
 801482e:	f7fe f885 	bl	801293c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014832:	4b0c      	ldr	r3, [pc, #48]	; (8014864 <prvCheckTasksWaitingTermination+0x50>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	3b01      	subs	r3, #1
 8014838:	4a0a      	ldr	r2, [pc, #40]	; (8014864 <prvCheckTasksWaitingTermination+0x50>)
 801483a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801483c:	4b0a      	ldr	r3, [pc, #40]	; (8014868 <prvCheckTasksWaitingTermination+0x54>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	3b01      	subs	r3, #1
 8014842:	4a09      	ldr	r2, [pc, #36]	; (8014868 <prvCheckTasksWaitingTermination+0x54>)
 8014844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014846:	f000 fee1 	bl	801560c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f000 f80e 	bl	801486c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014850:	4b05      	ldr	r3, [pc, #20]	; (8014868 <prvCheckTasksWaitingTermination+0x54>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d1e1      	bne.n	801481c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014858:	bf00      	nop
 801485a:	3708      	adds	r7, #8
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	20000ec8 	.word	0x20000ec8
 8014864:	20000ef4 	.word	0x20000ef4
 8014868:	20000edc 	.word	0x20000edc

0801486c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801486c:	b580      	push	{r7, lr}
 801486e:	b084      	sub	sp, #16
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801487a:	2b00      	cmp	r3, #0
 801487c:	d108      	bne.n	8014890 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014882:	4618      	mov	r0, r3
 8014884:	f001 f87a 	bl	801597c <vPortFree>
				vPortFree( pxTCB );
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f001 f877 	bl	801597c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801488e:	e019      	b.n	80148c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014896:	2b01      	cmp	r3, #1
 8014898:	d103      	bne.n	80148a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f001 f86e 	bl	801597c <vPortFree>
	}
 80148a0:	e010      	b.n	80148c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80148a8:	2b02      	cmp	r3, #2
 80148aa:	d00b      	beq.n	80148c4 <prvDeleteTCB+0x58>
 80148ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148b0:	b672      	cpsid	i
 80148b2:	f383 8811 	msr	BASEPRI, r3
 80148b6:	f3bf 8f6f 	isb	sy
 80148ba:	f3bf 8f4f 	dsb	sy
 80148be:	b662      	cpsie	i
 80148c0:	60fb      	str	r3, [r7, #12]
 80148c2:	e7fe      	b.n	80148c2 <prvDeleteTCB+0x56>
	}
 80148c4:	bf00      	nop
 80148c6:	3710      	adds	r7, #16
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80148cc:	b480      	push	{r7}
 80148ce:	b083      	sub	sp, #12
 80148d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80148d2:	4b0c      	ldr	r3, [pc, #48]	; (8014904 <prvResetNextTaskUnblockTime+0x38>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d104      	bne.n	80148e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80148dc:	4b0a      	ldr	r3, [pc, #40]	; (8014908 <prvResetNextTaskUnblockTime+0x3c>)
 80148de:	f04f 32ff 	mov.w	r2, #4294967295
 80148e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80148e4:	e008      	b.n	80148f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148e6:	4b07      	ldr	r3, [pc, #28]	; (8014904 <prvResetNextTaskUnblockTime+0x38>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	4a04      	ldr	r2, [pc, #16]	; (8014908 <prvResetNextTaskUnblockTime+0x3c>)
 80148f6:	6013      	str	r3, [r2, #0]
}
 80148f8:	bf00      	nop
 80148fa:	370c      	adds	r7, #12
 80148fc:	46bd      	mov	sp, r7
 80148fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014902:	4770      	bx	lr
 8014904:	20000eac 	.word	0x20000eac
 8014908:	20000f14 	.word	0x20000f14

0801490c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801490c:	b480      	push	{r7}
 801490e:	b083      	sub	sp, #12
 8014910:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014912:	4b05      	ldr	r3, [pc, #20]	; (8014928 <xTaskGetCurrentTaskHandle+0x1c>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014918:	687b      	ldr	r3, [r7, #4]
	}
 801491a:	4618      	mov	r0, r3
 801491c:	370c      	adds	r7, #12
 801491e:	46bd      	mov	sp, r7
 8014920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop
 8014928:	20000a20 	.word	0x20000a20

0801492c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801492c:	b480      	push	{r7}
 801492e:	b083      	sub	sp, #12
 8014930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014932:	4b0b      	ldr	r3, [pc, #44]	; (8014960 <xTaskGetSchedulerState+0x34>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d102      	bne.n	8014940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801493a:	2301      	movs	r3, #1
 801493c:	607b      	str	r3, [r7, #4]
 801493e:	e008      	b.n	8014952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014940:	4b08      	ldr	r3, [pc, #32]	; (8014964 <xTaskGetSchedulerState+0x38>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d102      	bne.n	801494e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014948:	2302      	movs	r3, #2
 801494a:	607b      	str	r3, [r7, #4]
 801494c:	e001      	b.n	8014952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801494e:	2300      	movs	r3, #0
 8014950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014952:	687b      	ldr	r3, [r7, #4]
	}
 8014954:	4618      	mov	r0, r3
 8014956:	370c      	adds	r7, #12
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr
 8014960:	20000f00 	.word	0x20000f00
 8014964:	20000f1c 	.word	0x20000f1c

08014968 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014974:	2300      	movs	r3, #0
 8014976:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d051      	beq.n	8014a22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014982:	4b2a      	ldr	r3, [pc, #168]	; (8014a2c <xTaskPriorityInherit+0xc4>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014988:	429a      	cmp	r2, r3
 801498a:	d241      	bcs.n	8014a10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	699b      	ldr	r3, [r3, #24]
 8014990:	2b00      	cmp	r3, #0
 8014992:	db06      	blt.n	80149a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014994:	4b25      	ldr	r3, [pc, #148]	; (8014a2c <xTaskPriorityInherit+0xc4>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801499a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	6959      	ldr	r1, [r3, #20]
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149aa:	4613      	mov	r3, r2
 80149ac:	009b      	lsls	r3, r3, #2
 80149ae:	4413      	add	r3, r2
 80149b0:	009b      	lsls	r3, r3, #2
 80149b2:	4a1f      	ldr	r2, [pc, #124]	; (8014a30 <xTaskPriorityInherit+0xc8>)
 80149b4:	4413      	add	r3, r2
 80149b6:	4299      	cmp	r1, r3
 80149b8:	d122      	bne.n	8014a00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	3304      	adds	r3, #4
 80149be:	4618      	mov	r0, r3
 80149c0:	f7fd ffbc 	bl	801293c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80149c4:	4b19      	ldr	r3, [pc, #100]	; (8014a2c <xTaskPriorityInherit+0xc4>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149d2:	4b18      	ldr	r3, [pc, #96]	; (8014a34 <xTaskPriorityInherit+0xcc>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d903      	bls.n	80149e2 <xTaskPriorityInherit+0x7a>
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149de:	4a15      	ldr	r2, [pc, #84]	; (8014a34 <xTaskPriorityInherit+0xcc>)
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e6:	4613      	mov	r3, r2
 80149e8:	009b      	lsls	r3, r3, #2
 80149ea:	4413      	add	r3, r2
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	4a10      	ldr	r2, [pc, #64]	; (8014a30 <xTaskPriorityInherit+0xc8>)
 80149f0:	441a      	add	r2, r3
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	3304      	adds	r3, #4
 80149f6:	4619      	mov	r1, r3
 80149f8:	4610      	mov	r0, r2
 80149fa:	f7fd ff42 	bl	8012882 <vListInsertEnd>
 80149fe:	e004      	b.n	8014a0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014a00:	4b0a      	ldr	r3, [pc, #40]	; (8014a2c <xTaskPriorityInherit+0xc4>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	60fb      	str	r3, [r7, #12]
 8014a0e:	e008      	b.n	8014a22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a14:	4b05      	ldr	r3, [pc, #20]	; (8014a2c <xTaskPriorityInherit+0xc4>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d201      	bcs.n	8014a22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a22:	68fb      	ldr	r3, [r7, #12]
	}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3710      	adds	r7, #16
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	20000a20 	.word	0x20000a20
 8014a30:	20000a24 	.word	0x20000a24
 8014a34:	20000efc 	.word	0x20000efc

08014a38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014a44:	2300      	movs	r3, #0
 8014a46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d058      	beq.n	8014b00 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014a4e:	4b2f      	ldr	r3, [pc, #188]	; (8014b0c <xTaskPriorityDisinherit+0xd4>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	693a      	ldr	r2, [r7, #16]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d00b      	beq.n	8014a70 <xTaskPriorityDisinherit+0x38>
 8014a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5c:	b672      	cpsid	i
 8014a5e:	f383 8811 	msr	BASEPRI, r3
 8014a62:	f3bf 8f6f 	isb	sy
 8014a66:	f3bf 8f4f 	dsb	sy
 8014a6a:	b662      	cpsie	i
 8014a6c:	60fb      	str	r3, [r7, #12]
 8014a6e:	e7fe      	b.n	8014a6e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8014a70:	693b      	ldr	r3, [r7, #16]
 8014a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d10b      	bne.n	8014a90 <xTaskPriorityDisinherit+0x58>
 8014a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7c:	b672      	cpsid	i
 8014a7e:	f383 8811 	msr	BASEPRI, r3
 8014a82:	f3bf 8f6f 	isb	sy
 8014a86:	f3bf 8f4f 	dsb	sy
 8014a8a:	b662      	cpsie	i
 8014a8c:	60bb      	str	r3, [r7, #8]
 8014a8e:	e7fe      	b.n	8014a8e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a94:	1e5a      	subs	r2, r3, #1
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014a9a:	693b      	ldr	r3, [r7, #16]
 8014a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a9e:	693b      	ldr	r3, [r7, #16]
 8014aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d02c      	beq.n	8014b00 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d128      	bne.n	8014b00 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	3304      	adds	r3, #4
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fd ff42 	bl	801293c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014acc:	693b      	ldr	r3, [r7, #16]
 8014ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ad0:	4b0f      	ldr	r3, [pc, #60]	; (8014b10 <xTaskPriorityDisinherit+0xd8>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d903      	bls.n	8014ae0 <xTaskPriorityDisinherit+0xa8>
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014adc:	4a0c      	ldr	r2, [pc, #48]	; (8014b10 <xTaskPriorityDisinherit+0xd8>)
 8014ade:	6013      	str	r3, [r2, #0]
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ae4:	4613      	mov	r3, r2
 8014ae6:	009b      	lsls	r3, r3, #2
 8014ae8:	4413      	add	r3, r2
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	4a09      	ldr	r2, [pc, #36]	; (8014b14 <xTaskPriorityDisinherit+0xdc>)
 8014aee:	441a      	add	r2, r3
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	3304      	adds	r3, #4
 8014af4:	4619      	mov	r1, r3
 8014af6:	4610      	mov	r0, r2
 8014af8:	f7fd fec3 	bl	8012882 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014afc:	2301      	movs	r3, #1
 8014afe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014b00:	697b      	ldr	r3, [r7, #20]
	}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3718      	adds	r7, #24
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	20000a20 	.word	0x20000a20
 8014b10:	20000efc 	.word	0x20000efc
 8014b14:	20000a24 	.word	0x20000a24

08014b18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b088      	sub	sp, #32
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014b26:	2301      	movs	r3, #1
 8014b28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d06c      	beq.n	8014c0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014b30:	69bb      	ldr	r3, [r7, #24]
 8014b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d10b      	bne.n	8014b50 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8014b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b3c:	b672      	cpsid	i
 8014b3e:	f383 8811 	msr	BASEPRI, r3
 8014b42:	f3bf 8f6f 	isb	sy
 8014b46:	f3bf 8f4f 	dsb	sy
 8014b4a:	b662      	cpsie	i
 8014b4c:	60fb      	str	r3, [r7, #12]
 8014b4e:	e7fe      	b.n	8014b4e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014b50:	69bb      	ldr	r3, [r7, #24]
 8014b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b54:	683a      	ldr	r2, [r7, #0]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d902      	bls.n	8014b60 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	61fb      	str	r3, [r7, #28]
 8014b5e:	e002      	b.n	8014b66 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014b60:	69bb      	ldr	r3, [r7, #24]
 8014b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b64:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014b66:	69bb      	ldr	r3, [r7, #24]
 8014b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b6a:	69fa      	ldr	r2, [r7, #28]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d04c      	beq.n	8014c0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014b70:	69bb      	ldr	r3, [r7, #24]
 8014b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b74:	697a      	ldr	r2, [r7, #20]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d147      	bne.n	8014c0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014b7a:	4b26      	ldr	r3, [pc, #152]	; (8014c14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	69ba      	ldr	r2, [r7, #24]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d10b      	bne.n	8014b9c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8014b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b88:	b672      	cpsid	i
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	b662      	cpsie	i
 8014b98:	60bb      	str	r3, [r7, #8]
 8014b9a:	e7fe      	b.n	8014b9a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ba0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	69fa      	ldr	r2, [r7, #28]
 8014ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ba8:	69bb      	ldr	r3, [r7, #24]
 8014baa:	699b      	ldr	r3, [r3, #24]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	db04      	blt.n	8014bba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014bba:	69bb      	ldr	r3, [r7, #24]
 8014bbc:	6959      	ldr	r1, [r3, #20]
 8014bbe:	693a      	ldr	r2, [r7, #16]
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	4413      	add	r3, r2
 8014bc6:	009b      	lsls	r3, r3, #2
 8014bc8:	4a13      	ldr	r2, [pc, #76]	; (8014c18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014bca:	4413      	add	r3, r2
 8014bcc:	4299      	cmp	r1, r3
 8014bce:	d11c      	bne.n	8014c0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	3304      	adds	r3, #4
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7fd feb1 	bl	801293c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014bda:	69bb      	ldr	r3, [r7, #24]
 8014bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bde:	4b0f      	ldr	r3, [pc, #60]	; (8014c1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d903      	bls.n	8014bee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bea:	4a0c      	ldr	r2, [pc, #48]	; (8014c1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014bec:	6013      	str	r3, [r2, #0]
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bf2:	4613      	mov	r3, r2
 8014bf4:	009b      	lsls	r3, r3, #2
 8014bf6:	4413      	add	r3, r2
 8014bf8:	009b      	lsls	r3, r3, #2
 8014bfa:	4a07      	ldr	r2, [pc, #28]	; (8014c18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014bfc:	441a      	add	r2, r3
 8014bfe:	69bb      	ldr	r3, [r7, #24]
 8014c00:	3304      	adds	r3, #4
 8014c02:	4619      	mov	r1, r3
 8014c04:	4610      	mov	r0, r2
 8014c06:	f7fd fe3c 	bl	8012882 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014c0a:	bf00      	nop
 8014c0c:	3720      	adds	r7, #32
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	bf00      	nop
 8014c14:	20000a20 	.word	0x20000a20
 8014c18:	20000a24 	.word	0x20000a24
 8014c1c:	20000efc 	.word	0x20000efc

08014c20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014c20:	b480      	push	{r7}
 8014c22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014c24:	4b07      	ldr	r3, [pc, #28]	; (8014c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d004      	beq.n	8014c36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014c2c:	4b05      	ldr	r3, [pc, #20]	; (8014c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c32:	3201      	adds	r2, #1
 8014c34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014c36:	4b03      	ldr	r3, [pc, #12]	; (8014c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8014c38:	681b      	ldr	r3, [r3, #0]
	}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr
 8014c44:	20000a20 	.word	0x20000a20

08014c48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b084      	sub	sp, #16
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014c52:	4b21      	ldr	r3, [pc, #132]	; (8014cd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c58:	4b20      	ldr	r3, [pc, #128]	; (8014cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	3304      	adds	r3, #4
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7fd fe6c 	bl	801293c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c6a:	d10a      	bne.n	8014c82 <prvAddCurrentTaskToDelayedList+0x3a>
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d007      	beq.n	8014c82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c72:	4b1a      	ldr	r3, [pc, #104]	; (8014cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	3304      	adds	r3, #4
 8014c78:	4619      	mov	r1, r3
 8014c7a:	4819      	ldr	r0, [pc, #100]	; (8014ce0 <prvAddCurrentTaskToDelayedList+0x98>)
 8014c7c:	f7fd fe01 	bl	8012882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014c80:	e026      	b.n	8014cd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014c82:	68fa      	ldr	r2, [r7, #12]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	4413      	add	r3, r2
 8014c88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014c8a:	4b14      	ldr	r3, [pc, #80]	; (8014cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	68ba      	ldr	r2, [r7, #8]
 8014c90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014c92:	68ba      	ldr	r2, [r7, #8]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d209      	bcs.n	8014cae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c9a:	4b12      	ldr	r3, [pc, #72]	; (8014ce4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014c9c:	681a      	ldr	r2, [r3, #0]
 8014c9e:	4b0f      	ldr	r3, [pc, #60]	; (8014cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	3304      	adds	r3, #4
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	4610      	mov	r0, r2
 8014ca8:	f7fd fe0f 	bl	80128ca <vListInsert>
}
 8014cac:	e010      	b.n	8014cd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cae:	4b0e      	ldr	r3, [pc, #56]	; (8014ce8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	4b0a      	ldr	r3, [pc, #40]	; (8014cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	3304      	adds	r3, #4
 8014cb8:	4619      	mov	r1, r3
 8014cba:	4610      	mov	r0, r2
 8014cbc:	f7fd fe05 	bl	80128ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014cc0:	4b0a      	ldr	r3, [pc, #40]	; (8014cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	68ba      	ldr	r2, [r7, #8]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d202      	bcs.n	8014cd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014cca:	4a08      	ldr	r2, [pc, #32]	; (8014cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	6013      	str	r3, [r2, #0]
}
 8014cd0:	bf00      	nop
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	20000ef8 	.word	0x20000ef8
 8014cdc:	20000a20 	.word	0x20000a20
 8014ce0:	20000ee0 	.word	0x20000ee0
 8014ce4:	20000eb0 	.word	0x20000eb0
 8014ce8:	20000eac 	.word	0x20000eac
 8014cec:	20000f14 	.word	0x20000f14

08014cf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b08a      	sub	sp, #40	; 0x28
 8014cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014cfa:	f000 fb0d 	bl	8015318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014cfe:	4b1d      	ldr	r3, [pc, #116]	; (8014d74 <xTimerCreateTimerTask+0x84>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d021      	beq.n	8014d4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014d06:	2300      	movs	r3, #0
 8014d08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014d0e:	1d3a      	adds	r2, r7, #4
 8014d10:	f107 0108 	add.w	r1, r7, #8
 8014d14:	f107 030c 	add.w	r3, r7, #12
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f7fd fd6b 	bl	80127f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	68fa      	ldr	r2, [r7, #12]
 8014d24:	9202      	str	r2, [sp, #8]
 8014d26:	9301      	str	r3, [sp, #4]
 8014d28:	2302      	movs	r3, #2
 8014d2a:	9300      	str	r3, [sp, #0]
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	460a      	mov	r2, r1
 8014d30:	4911      	ldr	r1, [pc, #68]	; (8014d78 <xTimerCreateTimerTask+0x88>)
 8014d32:	4812      	ldr	r0, [pc, #72]	; (8014d7c <xTimerCreateTimerTask+0x8c>)
 8014d34:	f7fe ff30 	bl	8013b98 <xTaskCreateStatic>
 8014d38:	4602      	mov	r2, r0
 8014d3a:	4b11      	ldr	r3, [pc, #68]	; (8014d80 <xTimerCreateTimerTask+0x90>)
 8014d3c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014d3e:	4b10      	ldr	r3, [pc, #64]	; (8014d80 <xTimerCreateTimerTask+0x90>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d001      	beq.n	8014d4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014d46:	2301      	movs	r3, #1
 8014d48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014d4a:	697b      	ldr	r3, [r7, #20]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d10b      	bne.n	8014d68 <xTimerCreateTimerTask+0x78>
 8014d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d54:	b672      	cpsid	i
 8014d56:	f383 8811 	msr	BASEPRI, r3
 8014d5a:	f3bf 8f6f 	isb	sy
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	b662      	cpsie	i
 8014d64:	613b      	str	r3, [r7, #16]
 8014d66:	e7fe      	b.n	8014d66 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8014d68:	697b      	ldr	r3, [r7, #20]
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3718      	adds	r7, #24
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	20000f50 	.word	0x20000f50
 8014d78:	080186b4 	.word	0x080186b4
 8014d7c:	08014ebd 	.word	0x08014ebd
 8014d80:	20000f54 	.word	0x20000f54

08014d84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b08a      	sub	sp, #40	; 0x28
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
 8014d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014d92:	2300      	movs	r3, #0
 8014d94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d10b      	bne.n	8014db4 <xTimerGenericCommand+0x30>
 8014d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da0:	b672      	cpsid	i
 8014da2:	f383 8811 	msr	BASEPRI, r3
 8014da6:	f3bf 8f6f 	isb	sy
 8014daa:	f3bf 8f4f 	dsb	sy
 8014dae:	b662      	cpsie	i
 8014db0:	623b      	str	r3, [r7, #32]
 8014db2:	e7fe      	b.n	8014db2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014db4:	4b19      	ldr	r3, [pc, #100]	; (8014e1c <xTimerGenericCommand+0x98>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d02a      	beq.n	8014e12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	2b05      	cmp	r3, #5
 8014dcc:	dc18      	bgt.n	8014e00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014dce:	f7ff fdad 	bl	801492c <xTaskGetSchedulerState>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b02      	cmp	r3, #2
 8014dd6:	d109      	bne.n	8014dec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014dd8:	4b10      	ldr	r3, [pc, #64]	; (8014e1c <xTimerGenericCommand+0x98>)
 8014dda:	6818      	ldr	r0, [r3, #0]
 8014ddc:	f107 0110 	add.w	r1, r7, #16
 8014de0:	2300      	movs	r3, #0
 8014de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014de4:	f7fe f860 	bl	8012ea8 <xQueueGenericSend>
 8014de8:	6278      	str	r0, [r7, #36]	; 0x24
 8014dea:	e012      	b.n	8014e12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014dec:	4b0b      	ldr	r3, [pc, #44]	; (8014e1c <xTimerGenericCommand+0x98>)
 8014dee:	6818      	ldr	r0, [r3, #0]
 8014df0:	f107 0110 	add.w	r1, r7, #16
 8014df4:	2300      	movs	r3, #0
 8014df6:	2200      	movs	r2, #0
 8014df8:	f7fe f856 	bl	8012ea8 <xQueueGenericSend>
 8014dfc:	6278      	str	r0, [r7, #36]	; 0x24
 8014dfe:	e008      	b.n	8014e12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014e00:	4b06      	ldr	r3, [pc, #24]	; (8014e1c <xTimerGenericCommand+0x98>)
 8014e02:	6818      	ldr	r0, [r3, #0]
 8014e04:	f107 0110 	add.w	r1, r7, #16
 8014e08:	2300      	movs	r3, #0
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	f7fe f94e 	bl	80130ac <xQueueGenericSendFromISR>
 8014e10:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	3728      	adds	r7, #40	; 0x28
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}
 8014e1c:	20000f50 	.word	0x20000f50

08014e20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b088      	sub	sp, #32
 8014e24:	af02      	add	r7, sp, #8
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e2a:	4b23      	ldr	r3, [pc, #140]	; (8014eb8 <prvProcessExpiredTimer+0x98>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	3304      	adds	r3, #4
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fd fd7f 	bl	801293c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e44:	f003 0304 	and.w	r3, r3, #4
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d023      	beq.n	8014e94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	699a      	ldr	r2, [r3, #24]
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	18d1      	adds	r1, r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	683a      	ldr	r2, [r7, #0]
 8014e58:	6978      	ldr	r0, [r7, #20]
 8014e5a:	f000 f8d3 	bl	8015004 <prvInsertTimerInActiveList>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d020      	beq.n	8014ea6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014e64:	2300      	movs	r3, #0
 8014e66:	9300      	str	r3, [sp, #0]
 8014e68:	2300      	movs	r3, #0
 8014e6a:	687a      	ldr	r2, [r7, #4]
 8014e6c:	2100      	movs	r1, #0
 8014e6e:	6978      	ldr	r0, [r7, #20]
 8014e70:	f7ff ff88 	bl	8014d84 <xTimerGenericCommand>
 8014e74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d114      	bne.n	8014ea6 <prvProcessExpiredTimer+0x86>
 8014e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e80:	b672      	cpsid	i
 8014e82:	f383 8811 	msr	BASEPRI, r3
 8014e86:	f3bf 8f6f 	isb	sy
 8014e8a:	f3bf 8f4f 	dsb	sy
 8014e8e:	b662      	cpsie	i
 8014e90:	60fb      	str	r3, [r7, #12]
 8014e92:	e7fe      	b.n	8014e92 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e9a:	f023 0301 	bic.w	r3, r3, #1
 8014e9e:	b2da      	uxtb	r2, r3
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	6a1b      	ldr	r3, [r3, #32]
 8014eaa:	6978      	ldr	r0, [r7, #20]
 8014eac:	4798      	blx	r3
}
 8014eae:	bf00      	nop
 8014eb0:	3718      	adds	r7, #24
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	20000f48 	.word	0x20000f48

08014ebc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b084      	sub	sp, #16
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014ec4:	f107 0308 	add.w	r3, r7, #8
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f000 f857 	bl	8014f7c <prvGetNextExpireTime>
 8014ece:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	f000 f803 	bl	8014ee0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014eda:	f000 f8d5 	bl	8015088 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014ede:	e7f1      	b.n	8014ec4 <prvTimerTask+0x8>

08014ee0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b084      	sub	sp, #16
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014eea:	f7ff f919 	bl	8014120 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014eee:	f107 0308 	add.w	r3, r7, #8
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f000 f866 	bl	8014fc4 <prvSampleTimeNow>
 8014ef8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d130      	bne.n	8014f62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d10a      	bne.n	8014f1c <prvProcessTimerOrBlockTask+0x3c>
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d806      	bhi.n	8014f1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014f0e:	f7ff f915 	bl	801413c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014f12:	68f9      	ldr	r1, [r7, #12]
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f7ff ff83 	bl	8014e20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014f1a:	e024      	b.n	8014f66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d008      	beq.n	8014f34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014f22:	4b13      	ldr	r3, [pc, #76]	; (8014f70 <prvProcessTimerOrBlockTask+0x90>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d101      	bne.n	8014f30 <prvProcessTimerOrBlockTask+0x50>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e000      	b.n	8014f32 <prvProcessTimerOrBlockTask+0x52>
 8014f30:	2300      	movs	r3, #0
 8014f32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014f34:	4b0f      	ldr	r3, [pc, #60]	; (8014f74 <prvProcessTimerOrBlockTask+0x94>)
 8014f36:	6818      	ldr	r0, [r3, #0]
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	1ad3      	subs	r3, r2, r3
 8014f3e:	683a      	ldr	r2, [r7, #0]
 8014f40:	4619      	mov	r1, r3
 8014f42:	f7fe fdf5 	bl	8013b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014f46:	f7ff f8f9 	bl	801413c <xTaskResumeAll>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d10a      	bne.n	8014f66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014f50:	4b09      	ldr	r3, [pc, #36]	; (8014f78 <prvProcessTimerOrBlockTask+0x98>)
 8014f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f56:	601a      	str	r2, [r3, #0]
 8014f58:	f3bf 8f4f 	dsb	sy
 8014f5c:	f3bf 8f6f 	isb	sy
}
 8014f60:	e001      	b.n	8014f66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014f62:	f7ff f8eb 	bl	801413c <xTaskResumeAll>
}
 8014f66:	bf00      	nop
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	20000f4c 	.word	0x20000f4c
 8014f74:	20000f50 	.word	0x20000f50
 8014f78:	e000ed04 	.word	0xe000ed04

08014f7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b085      	sub	sp, #20
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014f84:	4b0e      	ldr	r3, [pc, #56]	; (8014fc0 <prvGetNextExpireTime+0x44>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d101      	bne.n	8014f92 <prvGetNextExpireTime+0x16>
 8014f8e:	2201      	movs	r2, #1
 8014f90:	e000      	b.n	8014f94 <prvGetNextExpireTime+0x18>
 8014f92:	2200      	movs	r2, #0
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d105      	bne.n	8014fac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014fa0:	4b07      	ldr	r3, [pc, #28]	; (8014fc0 <prvGetNextExpireTime+0x44>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	68db      	ldr	r3, [r3, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	60fb      	str	r3, [r7, #12]
 8014faa:	e001      	b.n	8014fb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014fac:	2300      	movs	r3, #0
 8014fae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3714      	adds	r7, #20
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbc:	4770      	bx	lr
 8014fbe:	bf00      	nop
 8014fc0:	20000f48 	.word	0x20000f48

08014fc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014fcc:	f7ff f954 	bl	8014278 <xTaskGetTickCount>
 8014fd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014fd2:	4b0b      	ldr	r3, [pc, #44]	; (8015000 <prvSampleTimeNow+0x3c>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	68fa      	ldr	r2, [r7, #12]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d205      	bcs.n	8014fe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014fdc:	f000 f936 	bl	801524c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2201      	movs	r2, #1
 8014fe4:	601a      	str	r2, [r3, #0]
 8014fe6:	e002      	b.n	8014fee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014fee:	4a04      	ldr	r2, [pc, #16]	; (8015000 <prvSampleTimeNow+0x3c>)
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014ff4:	68fb      	ldr	r3, [r7, #12]
}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3710      	adds	r7, #16
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
 8014ffe:	bf00      	nop
 8015000:	20000f58 	.word	0x20000f58

08015004 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b086      	sub	sp, #24
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	607a      	str	r2, [r7, #4]
 8015010:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015012:	2300      	movs	r3, #0
 8015014:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	68ba      	ldr	r2, [r7, #8]
 801501a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	68fa      	ldr	r2, [r7, #12]
 8015020:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015022:	68ba      	ldr	r2, [r7, #8]
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	429a      	cmp	r2, r3
 8015028:	d812      	bhi.n	8015050 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801502a:	687a      	ldr	r2, [r7, #4]
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	1ad2      	subs	r2, r2, r3
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	699b      	ldr	r3, [r3, #24]
 8015034:	429a      	cmp	r2, r3
 8015036:	d302      	bcc.n	801503e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015038:	2301      	movs	r3, #1
 801503a:	617b      	str	r3, [r7, #20]
 801503c:	e01b      	b.n	8015076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801503e:	4b10      	ldr	r3, [pc, #64]	; (8015080 <prvInsertTimerInActiveList+0x7c>)
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	3304      	adds	r3, #4
 8015046:	4619      	mov	r1, r3
 8015048:	4610      	mov	r0, r2
 801504a:	f7fd fc3e 	bl	80128ca <vListInsert>
 801504e:	e012      	b.n	8015076 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015050:	687a      	ldr	r2, [r7, #4]
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	429a      	cmp	r2, r3
 8015056:	d206      	bcs.n	8015066 <prvInsertTimerInActiveList+0x62>
 8015058:	68ba      	ldr	r2, [r7, #8]
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	429a      	cmp	r2, r3
 801505e:	d302      	bcc.n	8015066 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015060:	2301      	movs	r3, #1
 8015062:	617b      	str	r3, [r7, #20]
 8015064:	e007      	b.n	8015076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015066:	4b07      	ldr	r3, [pc, #28]	; (8015084 <prvInsertTimerInActiveList+0x80>)
 8015068:	681a      	ldr	r2, [r3, #0]
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	3304      	adds	r3, #4
 801506e:	4619      	mov	r1, r3
 8015070:	4610      	mov	r0, r2
 8015072:	f7fd fc2a 	bl	80128ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015076:	697b      	ldr	r3, [r7, #20]
}
 8015078:	4618      	mov	r0, r3
 801507a:	3718      	adds	r7, #24
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	20000f4c 	.word	0x20000f4c
 8015084:	20000f48 	.word	0x20000f48

08015088 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b08e      	sub	sp, #56	; 0x38
 801508c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801508e:	e0cc      	b.n	801522a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	da19      	bge.n	80150ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015096:	1d3b      	adds	r3, r7, #4
 8015098:	3304      	adds	r3, #4
 801509a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d10b      	bne.n	80150ba <prvProcessReceivedCommands+0x32>
 80150a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a6:	b672      	cpsid	i
 80150a8:	f383 8811 	msr	BASEPRI, r3
 80150ac:	f3bf 8f6f 	isb	sy
 80150b0:	f3bf 8f4f 	dsb	sy
 80150b4:	b662      	cpsie	i
 80150b6:	61fb      	str	r3, [r7, #28]
 80150b8:	e7fe      	b.n	80150b8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80150ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150c0:	6850      	ldr	r0, [r2, #4]
 80150c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150c4:	6892      	ldr	r2, [r2, #8]
 80150c6:	4611      	mov	r1, r2
 80150c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f2c0 80ab 	blt.w	8015228 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80150d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d8:	695b      	ldr	r3, [r3, #20]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d004      	beq.n	80150e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80150de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e0:	3304      	adds	r3, #4
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7fd fc2a 	bl	801293c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80150e8:	463b      	mov	r3, r7
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7ff ff6a 	bl	8014fc4 <prvSampleTimeNow>
 80150f0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2b09      	cmp	r3, #9
 80150f6:	f200 8098 	bhi.w	801522a <prvProcessReceivedCommands+0x1a2>
 80150fa:	a201      	add	r2, pc, #4	; (adr r2, 8015100 <prvProcessReceivedCommands+0x78>)
 80150fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015100:	08015129 	.word	0x08015129
 8015104:	08015129 	.word	0x08015129
 8015108:	08015129 	.word	0x08015129
 801510c:	0801519f 	.word	0x0801519f
 8015110:	080151b3 	.word	0x080151b3
 8015114:	080151ff 	.word	0x080151ff
 8015118:	08015129 	.word	0x08015129
 801511c:	08015129 	.word	0x08015129
 8015120:	0801519f 	.word	0x0801519f
 8015124:	080151b3 	.word	0x080151b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801512e:	f043 0301 	orr.w	r3, r3, #1
 8015132:	b2da      	uxtb	r2, r3
 8015134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513e:	699b      	ldr	r3, [r3, #24]
 8015140:	18d1      	adds	r1, r2, r3
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015148:	f7ff ff5c 	bl	8015004 <prvInsertTimerInActiveList>
 801514c:	4603      	mov	r3, r0
 801514e:	2b00      	cmp	r3, #0
 8015150:	d06b      	beq.n	801522a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015154:	6a1b      	ldr	r3, [r3, #32]
 8015156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015158:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015160:	f003 0304 	and.w	r3, r3, #4
 8015164:	2b00      	cmp	r3, #0
 8015166:	d060      	beq.n	801522a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015168:	68ba      	ldr	r2, [r7, #8]
 801516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801516c:	699b      	ldr	r3, [r3, #24]
 801516e:	441a      	add	r2, r3
 8015170:	2300      	movs	r3, #0
 8015172:	9300      	str	r3, [sp, #0]
 8015174:	2300      	movs	r3, #0
 8015176:	2100      	movs	r1, #0
 8015178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801517a:	f7ff fe03 	bl	8014d84 <xTimerGenericCommand>
 801517e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015180:	6a3b      	ldr	r3, [r7, #32]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d151      	bne.n	801522a <prvProcessReceivedCommands+0x1a2>
 8015186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801518a:	b672      	cpsid	i
 801518c:	f383 8811 	msr	BASEPRI, r3
 8015190:	f3bf 8f6f 	isb	sy
 8015194:	f3bf 8f4f 	dsb	sy
 8015198:	b662      	cpsie	i
 801519a:	61bb      	str	r3, [r7, #24]
 801519c:	e7fe      	b.n	801519c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151a4:	f023 0301 	bic.w	r3, r3, #1
 80151a8:	b2da      	uxtb	r2, r3
 80151aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80151b0:	e03b      	b.n	801522a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80151b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151b8:	f043 0301 	orr.w	r3, r3, #1
 80151bc:	b2da      	uxtb	r2, r3
 80151be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80151c4:	68ba      	ldr	r2, [r7, #8]
 80151c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80151ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151cc:	699b      	ldr	r3, [r3, #24]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d10b      	bne.n	80151ea <prvProcessReceivedCommands+0x162>
 80151d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d6:	b672      	cpsid	i
 80151d8:	f383 8811 	msr	BASEPRI, r3
 80151dc:	f3bf 8f6f 	isb	sy
 80151e0:	f3bf 8f4f 	dsb	sy
 80151e4:	b662      	cpsie	i
 80151e6:	617b      	str	r3, [r7, #20]
 80151e8:	e7fe      	b.n	80151e8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80151ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ec:	699a      	ldr	r2, [r3, #24]
 80151ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f0:	18d1      	adds	r1, r2, r3
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151f8:	f7ff ff04 	bl	8015004 <prvInsertTimerInActiveList>
					break;
 80151fc:	e015      	b.n	801522a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80151fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015204:	f003 0302 	and.w	r3, r3, #2
 8015208:	2b00      	cmp	r3, #0
 801520a:	d103      	bne.n	8015214 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801520c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801520e:	f000 fbb5 	bl	801597c <vPortFree>
 8015212:	e00a      	b.n	801522a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801521a:	f023 0301 	bic.w	r3, r3, #1
 801521e:	b2da      	uxtb	r2, r3
 8015220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015226:	e000      	b.n	801522a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015228:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801522a:	4b07      	ldr	r3, [pc, #28]	; (8015248 <prvProcessReceivedCommands+0x1c0>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	1d39      	adds	r1, r7, #4
 8015230:	2200      	movs	r2, #0
 8015232:	4618      	mov	r0, r3
 8015234:	f7fe f868 	bl	8013308 <xQueueReceive>
 8015238:	4603      	mov	r3, r0
 801523a:	2b00      	cmp	r3, #0
 801523c:	f47f af28 	bne.w	8015090 <prvProcessReceivedCommands+0x8>
	}
}
 8015240:	bf00      	nop
 8015242:	3730      	adds	r7, #48	; 0x30
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	20000f50 	.word	0x20000f50

0801524c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b088      	sub	sp, #32
 8015250:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015252:	e049      	b.n	80152e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015254:	4b2e      	ldr	r3, [pc, #184]	; (8015310 <prvSwitchTimerLists+0xc4>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	68db      	ldr	r3, [r3, #12]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801525e:	4b2c      	ldr	r3, [pc, #176]	; (8015310 <prvSwitchTimerLists+0xc4>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	68db      	ldr	r3, [r3, #12]
 8015264:	68db      	ldr	r3, [r3, #12]
 8015266:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	3304      	adds	r3, #4
 801526c:	4618      	mov	r0, r3
 801526e:	f7fd fb65 	bl	801293c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	6a1b      	ldr	r3, [r3, #32]
 8015276:	68f8      	ldr	r0, [r7, #12]
 8015278:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015280:	f003 0304 	and.w	r3, r3, #4
 8015284:	2b00      	cmp	r3, #0
 8015286:	d02f      	beq.n	80152e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	699b      	ldr	r3, [r3, #24]
 801528c:	693a      	ldr	r2, [r7, #16]
 801528e:	4413      	add	r3, r2
 8015290:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015292:	68ba      	ldr	r2, [r7, #8]
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	429a      	cmp	r2, r3
 8015298:	d90e      	bls.n	80152b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	68ba      	ldr	r2, [r7, #8]
 801529e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	68fa      	ldr	r2, [r7, #12]
 80152a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80152a6:	4b1a      	ldr	r3, [pc, #104]	; (8015310 <prvSwitchTimerLists+0xc4>)
 80152a8:	681a      	ldr	r2, [r3, #0]
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	3304      	adds	r3, #4
 80152ae:	4619      	mov	r1, r3
 80152b0:	4610      	mov	r0, r2
 80152b2:	f7fd fb0a 	bl	80128ca <vListInsert>
 80152b6:	e017      	b.n	80152e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80152b8:	2300      	movs	r3, #0
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	2300      	movs	r3, #0
 80152be:	693a      	ldr	r2, [r7, #16]
 80152c0:	2100      	movs	r1, #0
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f7ff fd5e 	bl	8014d84 <xTimerGenericCommand>
 80152c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d10b      	bne.n	80152e8 <prvSwitchTimerLists+0x9c>
 80152d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152d4:	b672      	cpsid	i
 80152d6:	f383 8811 	msr	BASEPRI, r3
 80152da:	f3bf 8f6f 	isb	sy
 80152de:	f3bf 8f4f 	dsb	sy
 80152e2:	b662      	cpsie	i
 80152e4:	603b      	str	r3, [r7, #0]
 80152e6:	e7fe      	b.n	80152e6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80152e8:	4b09      	ldr	r3, [pc, #36]	; (8015310 <prvSwitchTimerLists+0xc4>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d1b0      	bne.n	8015254 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80152f2:	4b07      	ldr	r3, [pc, #28]	; (8015310 <prvSwitchTimerLists+0xc4>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80152f8:	4b06      	ldr	r3, [pc, #24]	; (8015314 <prvSwitchTimerLists+0xc8>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	4a04      	ldr	r2, [pc, #16]	; (8015310 <prvSwitchTimerLists+0xc4>)
 80152fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015300:	4a04      	ldr	r2, [pc, #16]	; (8015314 <prvSwitchTimerLists+0xc8>)
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	6013      	str	r3, [r2, #0]
}
 8015306:	bf00      	nop
 8015308:	3718      	adds	r7, #24
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	20000f48 	.word	0x20000f48
 8015314:	20000f4c 	.word	0x20000f4c

08015318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801531e:	f000 f943 	bl	80155a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015322:	4b15      	ldr	r3, [pc, #84]	; (8015378 <prvCheckForValidListAndQueue+0x60>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d120      	bne.n	801536c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801532a:	4814      	ldr	r0, [pc, #80]	; (801537c <prvCheckForValidListAndQueue+0x64>)
 801532c:	f7fd fa7c 	bl	8012828 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015330:	4813      	ldr	r0, [pc, #76]	; (8015380 <prvCheckForValidListAndQueue+0x68>)
 8015332:	f7fd fa79 	bl	8012828 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015336:	4b13      	ldr	r3, [pc, #76]	; (8015384 <prvCheckForValidListAndQueue+0x6c>)
 8015338:	4a10      	ldr	r2, [pc, #64]	; (801537c <prvCheckForValidListAndQueue+0x64>)
 801533a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801533c:	4b12      	ldr	r3, [pc, #72]	; (8015388 <prvCheckForValidListAndQueue+0x70>)
 801533e:	4a10      	ldr	r2, [pc, #64]	; (8015380 <prvCheckForValidListAndQueue+0x68>)
 8015340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015342:	2300      	movs	r3, #0
 8015344:	9300      	str	r3, [sp, #0]
 8015346:	4b11      	ldr	r3, [pc, #68]	; (801538c <prvCheckForValidListAndQueue+0x74>)
 8015348:	4a11      	ldr	r2, [pc, #68]	; (8015390 <prvCheckForValidListAndQueue+0x78>)
 801534a:	2110      	movs	r1, #16
 801534c:	200a      	movs	r0, #10
 801534e:	f7fd fb89 	bl	8012a64 <xQueueGenericCreateStatic>
 8015352:	4602      	mov	r2, r0
 8015354:	4b08      	ldr	r3, [pc, #32]	; (8015378 <prvCheckForValidListAndQueue+0x60>)
 8015356:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015358:	4b07      	ldr	r3, [pc, #28]	; (8015378 <prvCheckForValidListAndQueue+0x60>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d005      	beq.n	801536c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015360:	4b05      	ldr	r3, [pc, #20]	; (8015378 <prvCheckForValidListAndQueue+0x60>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	490b      	ldr	r1, [pc, #44]	; (8015394 <prvCheckForValidListAndQueue+0x7c>)
 8015366:	4618      	mov	r0, r3
 8015368:	f7fe fb90 	bl	8013a8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801536c:	f000 f94e 	bl	801560c <vPortExitCritical>
}
 8015370:	bf00      	nop
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	20000f50 	.word	0x20000f50
 801537c:	20000f20 	.word	0x20000f20
 8015380:	20000f34 	.word	0x20000f34
 8015384:	20000f48 	.word	0x20000f48
 8015388:	20000f4c 	.word	0x20000f4c
 801538c:	20000ffc 	.word	0x20000ffc
 8015390:	20000f5c 	.word	0x20000f5c
 8015394:	080186bc 	.word	0x080186bc

08015398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015398:	b480      	push	{r7}
 801539a:	b085      	sub	sp, #20
 801539c:	af00      	add	r7, sp, #0
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	3b04      	subs	r3, #4
 80153a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80153b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	3b04      	subs	r3, #4
 80153b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	f023 0201 	bic.w	r2, r3, #1
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	3b04      	subs	r3, #4
 80153c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80153c8:	4a0c      	ldr	r2, [pc, #48]	; (80153fc <pxPortInitialiseStack+0x64>)
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	3b14      	subs	r3, #20
 80153d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	3b04      	subs	r3, #4
 80153de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	f06f 0202 	mvn.w	r2, #2
 80153e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	3b20      	subs	r3, #32
 80153ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80153ee:	68fb      	ldr	r3, [r7, #12]
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3714      	adds	r7, #20
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr
 80153fc:	08015401 	.word	0x08015401

08015400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015400:	b480      	push	{r7}
 8015402:	b085      	sub	sp, #20
 8015404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015406:	2300      	movs	r3, #0
 8015408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801540a:	4b13      	ldr	r3, [pc, #76]	; (8015458 <prvTaskExitError+0x58>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015412:	d00b      	beq.n	801542c <prvTaskExitError+0x2c>
 8015414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015418:	b672      	cpsid	i
 801541a:	f383 8811 	msr	BASEPRI, r3
 801541e:	f3bf 8f6f 	isb	sy
 8015422:	f3bf 8f4f 	dsb	sy
 8015426:	b662      	cpsie	i
 8015428:	60fb      	str	r3, [r7, #12]
 801542a:	e7fe      	b.n	801542a <prvTaskExitError+0x2a>
 801542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015430:	b672      	cpsid	i
 8015432:	f383 8811 	msr	BASEPRI, r3
 8015436:	f3bf 8f6f 	isb	sy
 801543a:	f3bf 8f4f 	dsb	sy
 801543e:	b662      	cpsie	i
 8015440:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015442:	bf00      	nop
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d0fc      	beq.n	8015444 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801544a:	bf00      	nop
 801544c:	3714      	adds	r7, #20
 801544e:	46bd      	mov	sp, r7
 8015450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015454:	4770      	bx	lr
 8015456:	bf00      	nop
 8015458:	2000011c 	.word	0x2000011c
 801545c:	00000000 	.word	0x00000000

08015460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015460:	4b07      	ldr	r3, [pc, #28]	; (8015480 <pxCurrentTCBConst2>)
 8015462:	6819      	ldr	r1, [r3, #0]
 8015464:	6808      	ldr	r0, [r1, #0]
 8015466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546a:	f380 8809 	msr	PSP, r0
 801546e:	f3bf 8f6f 	isb	sy
 8015472:	f04f 0000 	mov.w	r0, #0
 8015476:	f380 8811 	msr	BASEPRI, r0
 801547a:	4770      	bx	lr
 801547c:	f3af 8000 	nop.w

08015480 <pxCurrentTCBConst2>:
 8015480:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015484:	bf00      	nop
 8015486:	bf00      	nop

08015488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015488:	4808      	ldr	r0, [pc, #32]	; (80154ac <prvPortStartFirstTask+0x24>)
 801548a:	6800      	ldr	r0, [r0, #0]
 801548c:	6800      	ldr	r0, [r0, #0]
 801548e:	f380 8808 	msr	MSP, r0
 8015492:	f04f 0000 	mov.w	r0, #0
 8015496:	f380 8814 	msr	CONTROL, r0
 801549a:	b662      	cpsie	i
 801549c:	b661      	cpsie	f
 801549e:	f3bf 8f4f 	dsb	sy
 80154a2:	f3bf 8f6f 	isb	sy
 80154a6:	df00      	svc	0
 80154a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80154aa:	bf00      	nop
 80154ac:	e000ed08 	.word	0xe000ed08

080154b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80154b6:	4b36      	ldr	r3, [pc, #216]	; (8015590 <xPortStartScheduler+0xe0>)
 80154b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	22ff      	movs	r2, #255	; 0xff
 80154c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80154d0:	78fb      	ldrb	r3, [r7, #3]
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80154d8:	b2da      	uxtb	r2, r3
 80154da:	4b2e      	ldr	r3, [pc, #184]	; (8015594 <xPortStartScheduler+0xe4>)
 80154dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80154de:	4b2e      	ldr	r3, [pc, #184]	; (8015598 <xPortStartScheduler+0xe8>)
 80154e0:	2207      	movs	r2, #7
 80154e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80154e4:	e009      	b.n	80154fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80154e6:	4b2c      	ldr	r3, [pc, #176]	; (8015598 <xPortStartScheduler+0xe8>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	3b01      	subs	r3, #1
 80154ec:	4a2a      	ldr	r2, [pc, #168]	; (8015598 <xPortStartScheduler+0xe8>)
 80154ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80154f0:	78fb      	ldrb	r3, [r7, #3]
 80154f2:	b2db      	uxtb	r3, r3
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	b2db      	uxtb	r3, r3
 80154f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80154fa:	78fb      	ldrb	r3, [r7, #3]
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015502:	2b80      	cmp	r3, #128	; 0x80
 8015504:	d0ef      	beq.n	80154e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015506:	4b24      	ldr	r3, [pc, #144]	; (8015598 <xPortStartScheduler+0xe8>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	f1c3 0307 	rsb	r3, r3, #7
 801550e:	2b04      	cmp	r3, #4
 8015510:	d00b      	beq.n	801552a <xPortStartScheduler+0x7a>
 8015512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015516:	b672      	cpsid	i
 8015518:	f383 8811 	msr	BASEPRI, r3
 801551c:	f3bf 8f6f 	isb	sy
 8015520:	f3bf 8f4f 	dsb	sy
 8015524:	b662      	cpsie	i
 8015526:	60bb      	str	r3, [r7, #8]
 8015528:	e7fe      	b.n	8015528 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801552a:	4b1b      	ldr	r3, [pc, #108]	; (8015598 <xPortStartScheduler+0xe8>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	021b      	lsls	r3, r3, #8
 8015530:	4a19      	ldr	r2, [pc, #100]	; (8015598 <xPortStartScheduler+0xe8>)
 8015532:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015534:	4b18      	ldr	r3, [pc, #96]	; (8015598 <xPortStartScheduler+0xe8>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801553c:	4a16      	ldr	r2, [pc, #88]	; (8015598 <xPortStartScheduler+0xe8>)
 801553e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	b2da      	uxtb	r2, r3
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015548:	4b14      	ldr	r3, [pc, #80]	; (801559c <xPortStartScheduler+0xec>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	4a13      	ldr	r2, [pc, #76]	; (801559c <xPortStartScheduler+0xec>)
 801554e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015552:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015554:	4b11      	ldr	r3, [pc, #68]	; (801559c <xPortStartScheduler+0xec>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	4a10      	ldr	r2, [pc, #64]	; (801559c <xPortStartScheduler+0xec>)
 801555a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801555e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015560:	f000 f8d4 	bl	801570c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015564:	4b0e      	ldr	r3, [pc, #56]	; (80155a0 <xPortStartScheduler+0xf0>)
 8015566:	2200      	movs	r2, #0
 8015568:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801556a:	f000 f8f3 	bl	8015754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801556e:	4b0d      	ldr	r3, [pc, #52]	; (80155a4 <xPortStartScheduler+0xf4>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	4a0c      	ldr	r2, [pc, #48]	; (80155a4 <xPortStartScheduler+0xf4>)
 8015574:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015578:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801557a:	f7ff ff85 	bl	8015488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801557e:	f7fe ff57 	bl	8014430 <vTaskSwitchContext>
	prvTaskExitError();
 8015582:	f7ff ff3d 	bl	8015400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015586:	2300      	movs	r3, #0
}
 8015588:	4618      	mov	r0, r3
 801558a:	3710      	adds	r7, #16
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	e000e400 	.word	0xe000e400
 8015594:	2000104c 	.word	0x2000104c
 8015598:	20001050 	.word	0x20001050
 801559c:	e000ed20 	.word	0xe000ed20
 80155a0:	2000011c 	.word	0x2000011c
 80155a4:	e000ef34 	.word	0xe000ef34

080155a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80155a8:	b480      	push	{r7}
 80155aa:	b083      	sub	sp, #12
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b2:	b672      	cpsid	i
 80155b4:	f383 8811 	msr	BASEPRI, r3
 80155b8:	f3bf 8f6f 	isb	sy
 80155bc:	f3bf 8f4f 	dsb	sy
 80155c0:	b662      	cpsie	i
 80155c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80155c4:	4b0f      	ldr	r3, [pc, #60]	; (8015604 <vPortEnterCritical+0x5c>)
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	3301      	adds	r3, #1
 80155ca:	4a0e      	ldr	r2, [pc, #56]	; (8015604 <vPortEnterCritical+0x5c>)
 80155cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80155ce:	4b0d      	ldr	r3, [pc, #52]	; (8015604 <vPortEnterCritical+0x5c>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	d110      	bne.n	80155f8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80155d6:	4b0c      	ldr	r3, [pc, #48]	; (8015608 <vPortEnterCritical+0x60>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d00b      	beq.n	80155f8 <vPortEnterCritical+0x50>
 80155e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e4:	b672      	cpsid	i
 80155e6:	f383 8811 	msr	BASEPRI, r3
 80155ea:	f3bf 8f6f 	isb	sy
 80155ee:	f3bf 8f4f 	dsb	sy
 80155f2:	b662      	cpsie	i
 80155f4:	603b      	str	r3, [r7, #0]
 80155f6:	e7fe      	b.n	80155f6 <vPortEnterCritical+0x4e>
	}
}
 80155f8:	bf00      	nop
 80155fa:	370c      	adds	r7, #12
 80155fc:	46bd      	mov	sp, r7
 80155fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015602:	4770      	bx	lr
 8015604:	2000011c 	.word	0x2000011c
 8015608:	e000ed04 	.word	0xe000ed04

0801560c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015612:	4b12      	ldr	r3, [pc, #72]	; (801565c <vPortExitCritical+0x50>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d10b      	bne.n	8015632 <vPortExitCritical+0x26>
 801561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801561e:	b672      	cpsid	i
 8015620:	f383 8811 	msr	BASEPRI, r3
 8015624:	f3bf 8f6f 	isb	sy
 8015628:	f3bf 8f4f 	dsb	sy
 801562c:	b662      	cpsie	i
 801562e:	607b      	str	r3, [r7, #4]
 8015630:	e7fe      	b.n	8015630 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015632:	4b0a      	ldr	r3, [pc, #40]	; (801565c <vPortExitCritical+0x50>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	3b01      	subs	r3, #1
 8015638:	4a08      	ldr	r2, [pc, #32]	; (801565c <vPortExitCritical+0x50>)
 801563a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801563c:	4b07      	ldr	r3, [pc, #28]	; (801565c <vPortExitCritical+0x50>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d104      	bne.n	801564e <vPortExitCritical+0x42>
 8015644:	2300      	movs	r3, #0
 8015646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801564e:	bf00      	nop
 8015650:	370c      	adds	r7, #12
 8015652:	46bd      	mov	sp, r7
 8015654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015658:	4770      	bx	lr
 801565a:	bf00      	nop
 801565c:	2000011c 	.word	0x2000011c

08015660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015660:	f3ef 8009 	mrs	r0, PSP
 8015664:	f3bf 8f6f 	isb	sy
 8015668:	4b15      	ldr	r3, [pc, #84]	; (80156c0 <pxCurrentTCBConst>)
 801566a:	681a      	ldr	r2, [r3, #0]
 801566c:	f01e 0f10 	tst.w	lr, #16
 8015670:	bf08      	it	eq
 8015672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801567a:	6010      	str	r0, [r2, #0]
 801567c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015684:	b672      	cpsid	i
 8015686:	f380 8811 	msr	BASEPRI, r0
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	f3bf 8f6f 	isb	sy
 8015692:	b662      	cpsie	i
 8015694:	f7fe fecc 	bl	8014430 <vTaskSwitchContext>
 8015698:	f04f 0000 	mov.w	r0, #0
 801569c:	f380 8811 	msr	BASEPRI, r0
 80156a0:	bc09      	pop	{r0, r3}
 80156a2:	6819      	ldr	r1, [r3, #0]
 80156a4:	6808      	ldr	r0, [r1, #0]
 80156a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156aa:	f01e 0f10 	tst.w	lr, #16
 80156ae:	bf08      	it	eq
 80156b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80156b4:	f380 8809 	msr	PSP, r0
 80156b8:	f3bf 8f6f 	isb	sy
 80156bc:	4770      	bx	lr
 80156be:	bf00      	nop

080156c0 <pxCurrentTCBConst>:
 80156c0:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80156c4:	bf00      	nop
 80156c6:	bf00      	nop

080156c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
	__asm volatile
 80156ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d2:	b672      	cpsid	i
 80156d4:	f383 8811 	msr	BASEPRI, r3
 80156d8:	f3bf 8f6f 	isb	sy
 80156dc:	f3bf 8f4f 	dsb	sy
 80156e0:	b662      	cpsie	i
 80156e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80156e4:	f7fe fdea 	bl	80142bc <xTaskIncrementTick>
 80156e8:	4603      	mov	r3, r0
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d003      	beq.n	80156f6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80156ee:	4b06      	ldr	r3, [pc, #24]	; (8015708 <SysTick_Handler+0x40>)
 80156f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	2300      	movs	r3, #0
 80156f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015700:	bf00      	nop
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	e000ed04 	.word	0xe000ed04

0801570c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801570c:	b480      	push	{r7}
 801570e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015710:	4b0b      	ldr	r3, [pc, #44]	; (8015740 <vPortSetupTimerInterrupt+0x34>)
 8015712:	2200      	movs	r2, #0
 8015714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015716:	4b0b      	ldr	r3, [pc, #44]	; (8015744 <vPortSetupTimerInterrupt+0x38>)
 8015718:	2200      	movs	r2, #0
 801571a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801571c:	4b0a      	ldr	r3, [pc, #40]	; (8015748 <vPortSetupTimerInterrupt+0x3c>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	4a0a      	ldr	r2, [pc, #40]	; (801574c <vPortSetupTimerInterrupt+0x40>)
 8015722:	fba2 2303 	umull	r2, r3, r2, r3
 8015726:	099b      	lsrs	r3, r3, #6
 8015728:	4a09      	ldr	r2, [pc, #36]	; (8015750 <vPortSetupTimerInterrupt+0x44>)
 801572a:	3b01      	subs	r3, #1
 801572c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801572e:	4b04      	ldr	r3, [pc, #16]	; (8015740 <vPortSetupTimerInterrupt+0x34>)
 8015730:	2207      	movs	r2, #7
 8015732:	601a      	str	r2, [r3, #0]
}
 8015734:	bf00      	nop
 8015736:	46bd      	mov	sp, r7
 8015738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573c:	4770      	bx	lr
 801573e:	bf00      	nop
 8015740:	e000e010 	.word	0xe000e010
 8015744:	e000e018 	.word	0xe000e018
 8015748:	20000000 	.word	0x20000000
 801574c:	10624dd3 	.word	0x10624dd3
 8015750:	e000e014 	.word	0xe000e014

08015754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015764 <vPortEnableVFP+0x10>
 8015758:	6801      	ldr	r1, [r0, #0]
 801575a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801575e:	6001      	str	r1, [r0, #0]
 8015760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015762:	bf00      	nop
 8015764:	e000ed88 	.word	0xe000ed88

08015768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015768:	b480      	push	{r7}
 801576a:	b085      	sub	sp, #20
 801576c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801576e:	f3ef 8305 	mrs	r3, IPSR
 8015772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2b0f      	cmp	r3, #15
 8015778:	d915      	bls.n	80157a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801577a:	4a18      	ldr	r2, [pc, #96]	; (80157dc <vPortValidateInterruptPriority+0x74>)
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	4413      	add	r3, r2
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015784:	4b16      	ldr	r3, [pc, #88]	; (80157e0 <vPortValidateInterruptPriority+0x78>)
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	7afa      	ldrb	r2, [r7, #11]
 801578a:	429a      	cmp	r2, r3
 801578c:	d20b      	bcs.n	80157a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015792:	b672      	cpsid	i
 8015794:	f383 8811 	msr	BASEPRI, r3
 8015798:	f3bf 8f6f 	isb	sy
 801579c:	f3bf 8f4f 	dsb	sy
 80157a0:	b662      	cpsie	i
 80157a2:	607b      	str	r3, [r7, #4]
 80157a4:	e7fe      	b.n	80157a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80157a6:	4b0f      	ldr	r3, [pc, #60]	; (80157e4 <vPortValidateInterruptPriority+0x7c>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80157ae:	4b0e      	ldr	r3, [pc, #56]	; (80157e8 <vPortValidateInterruptPriority+0x80>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d90b      	bls.n	80157ce <vPortValidateInterruptPriority+0x66>
 80157b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ba:	b672      	cpsid	i
 80157bc:	f383 8811 	msr	BASEPRI, r3
 80157c0:	f3bf 8f6f 	isb	sy
 80157c4:	f3bf 8f4f 	dsb	sy
 80157c8:	b662      	cpsie	i
 80157ca:	603b      	str	r3, [r7, #0]
 80157cc:	e7fe      	b.n	80157cc <vPortValidateInterruptPriority+0x64>
	}
 80157ce:	bf00      	nop
 80157d0:	3714      	adds	r7, #20
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr
 80157da:	bf00      	nop
 80157dc:	e000e3f0 	.word	0xe000e3f0
 80157e0:	2000104c 	.word	0x2000104c
 80157e4:	e000ed0c 	.word	0xe000ed0c
 80157e8:	20001050 	.word	0x20001050

080157ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b08a      	sub	sp, #40	; 0x28
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80157f4:	2300      	movs	r3, #0
 80157f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80157f8:	f7fe fc92 	bl	8014120 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80157fc:	4b5a      	ldr	r3, [pc, #360]	; (8015968 <pvPortMalloc+0x17c>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d101      	bne.n	8015808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015804:	f000 f916 	bl	8015a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015808:	4b58      	ldr	r3, [pc, #352]	; (801596c <pvPortMalloc+0x180>)
 801580a:	681a      	ldr	r2, [r3, #0]
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	4013      	ands	r3, r2
 8015810:	2b00      	cmp	r3, #0
 8015812:	f040 8090 	bne.w	8015936 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d01e      	beq.n	801585a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801581c:	2208      	movs	r2, #8
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	4413      	add	r3, r2
 8015822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f003 0307 	and.w	r3, r3, #7
 801582a:	2b00      	cmp	r3, #0
 801582c:	d015      	beq.n	801585a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f023 0307 	bic.w	r3, r3, #7
 8015834:	3308      	adds	r3, #8
 8015836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f003 0307 	and.w	r3, r3, #7
 801583e:	2b00      	cmp	r3, #0
 8015840:	d00b      	beq.n	801585a <pvPortMalloc+0x6e>
 8015842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015846:	b672      	cpsid	i
 8015848:	f383 8811 	msr	BASEPRI, r3
 801584c:	f3bf 8f6f 	isb	sy
 8015850:	f3bf 8f4f 	dsb	sy
 8015854:	b662      	cpsie	i
 8015856:	617b      	str	r3, [r7, #20]
 8015858:	e7fe      	b.n	8015858 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d06a      	beq.n	8015936 <pvPortMalloc+0x14a>
 8015860:	4b43      	ldr	r3, [pc, #268]	; (8015970 <pvPortMalloc+0x184>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	687a      	ldr	r2, [r7, #4]
 8015866:	429a      	cmp	r2, r3
 8015868:	d865      	bhi.n	8015936 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801586a:	4b42      	ldr	r3, [pc, #264]	; (8015974 <pvPortMalloc+0x188>)
 801586c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801586e:	4b41      	ldr	r3, [pc, #260]	; (8015974 <pvPortMalloc+0x188>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015874:	e004      	b.n	8015880 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015878:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	687a      	ldr	r2, [r7, #4]
 8015886:	429a      	cmp	r2, r3
 8015888:	d903      	bls.n	8015892 <pvPortMalloc+0xa6>
 801588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d1f1      	bne.n	8015876 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015892:	4b35      	ldr	r3, [pc, #212]	; (8015968 <pvPortMalloc+0x17c>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015898:	429a      	cmp	r2, r3
 801589a:	d04c      	beq.n	8015936 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801589c:	6a3b      	ldr	r3, [r7, #32]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	2208      	movs	r2, #8
 80158a2:	4413      	add	r3, r2
 80158a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80158a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	6a3b      	ldr	r3, [r7, #32]
 80158ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80158ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b0:	685a      	ldr	r2, [r3, #4]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	1ad2      	subs	r2, r2, r3
 80158b6:	2308      	movs	r3, #8
 80158b8:	005b      	lsls	r3, r3, #1
 80158ba:	429a      	cmp	r2, r3
 80158bc:	d920      	bls.n	8015900 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80158be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	4413      	add	r3, r2
 80158c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80158c6:	69bb      	ldr	r3, [r7, #24]
 80158c8:	f003 0307 	and.w	r3, r3, #7
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d00b      	beq.n	80158e8 <pvPortMalloc+0xfc>
 80158d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d4:	b672      	cpsid	i
 80158d6:	f383 8811 	msr	BASEPRI, r3
 80158da:	f3bf 8f6f 	isb	sy
 80158de:	f3bf 8f4f 	dsb	sy
 80158e2:	b662      	cpsie	i
 80158e4:	613b      	str	r3, [r7, #16]
 80158e6:	e7fe      	b.n	80158e6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80158e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ea:	685a      	ldr	r2, [r3, #4]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	1ad2      	subs	r2, r2, r3
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80158f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f6:	687a      	ldr	r2, [r7, #4]
 80158f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80158fa:	69b8      	ldr	r0, [r7, #24]
 80158fc:	f000 f8fc 	bl	8015af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015900:	4b1b      	ldr	r3, [pc, #108]	; (8015970 <pvPortMalloc+0x184>)
 8015902:	681a      	ldr	r2, [r3, #0]
 8015904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	1ad3      	subs	r3, r2, r3
 801590a:	4a19      	ldr	r2, [pc, #100]	; (8015970 <pvPortMalloc+0x184>)
 801590c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801590e:	4b18      	ldr	r3, [pc, #96]	; (8015970 <pvPortMalloc+0x184>)
 8015910:	681a      	ldr	r2, [r3, #0]
 8015912:	4b19      	ldr	r3, [pc, #100]	; (8015978 <pvPortMalloc+0x18c>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	429a      	cmp	r2, r3
 8015918:	d203      	bcs.n	8015922 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801591a:	4b15      	ldr	r3, [pc, #84]	; (8015970 <pvPortMalloc+0x184>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	4a16      	ldr	r2, [pc, #88]	; (8015978 <pvPortMalloc+0x18c>)
 8015920:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015924:	685a      	ldr	r2, [r3, #4]
 8015926:	4b11      	ldr	r3, [pc, #68]	; (801596c <pvPortMalloc+0x180>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	431a      	orrs	r2, r3
 801592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015932:	2200      	movs	r2, #0
 8015934:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015936:	f7fe fc01 	bl	801413c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	f003 0307 	and.w	r3, r3, #7
 8015940:	2b00      	cmp	r3, #0
 8015942:	d00b      	beq.n	801595c <pvPortMalloc+0x170>
 8015944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015948:	b672      	cpsid	i
 801594a:	f383 8811 	msr	BASEPRI, r3
 801594e:	f3bf 8f6f 	isb	sy
 8015952:	f3bf 8f4f 	dsb	sy
 8015956:	b662      	cpsie	i
 8015958:	60fb      	str	r3, [r7, #12]
 801595a:	e7fe      	b.n	801595a <pvPortMalloc+0x16e>
	return pvReturn;
 801595c:	69fb      	ldr	r3, [r7, #28]
}
 801595e:	4618      	mov	r0, r3
 8015960:	3728      	adds	r7, #40	; 0x28
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	2000885c 	.word	0x2000885c
 801596c:	20008868 	.word	0x20008868
 8015970:	20008860 	.word	0x20008860
 8015974:	20008854 	.word	0x20008854
 8015978:	20008864 	.word	0x20008864

0801597c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b086      	sub	sp, #24
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d04a      	beq.n	8015a24 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801598e:	2308      	movs	r3, #8
 8015990:	425b      	negs	r3, r3
 8015992:	697a      	ldr	r2, [r7, #20]
 8015994:	4413      	add	r3, r2
 8015996:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	685a      	ldr	r2, [r3, #4]
 80159a0:	4b22      	ldr	r3, [pc, #136]	; (8015a2c <vPortFree+0xb0>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	4013      	ands	r3, r2
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d10b      	bne.n	80159c2 <vPortFree+0x46>
 80159aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ae:	b672      	cpsid	i
 80159b0:	f383 8811 	msr	BASEPRI, r3
 80159b4:	f3bf 8f6f 	isb	sy
 80159b8:	f3bf 8f4f 	dsb	sy
 80159bc:	b662      	cpsie	i
 80159be:	60fb      	str	r3, [r7, #12]
 80159c0:	e7fe      	b.n	80159c0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00b      	beq.n	80159e2 <vPortFree+0x66>
 80159ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ce:	b672      	cpsid	i
 80159d0:	f383 8811 	msr	BASEPRI, r3
 80159d4:	f3bf 8f6f 	isb	sy
 80159d8:	f3bf 8f4f 	dsb	sy
 80159dc:	b662      	cpsie	i
 80159de:	60bb      	str	r3, [r7, #8]
 80159e0:	e7fe      	b.n	80159e0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	685a      	ldr	r2, [r3, #4]
 80159e6:	4b11      	ldr	r3, [pc, #68]	; (8015a2c <vPortFree+0xb0>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4013      	ands	r3, r2
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d019      	beq.n	8015a24 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80159f0:	693b      	ldr	r3, [r7, #16]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d115      	bne.n	8015a24 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	685a      	ldr	r2, [r3, #4]
 80159fc:	4b0b      	ldr	r3, [pc, #44]	; (8015a2c <vPortFree+0xb0>)
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	43db      	mvns	r3, r3
 8015a02:	401a      	ands	r2, r3
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015a08:	f7fe fb8a 	bl	8014120 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	685a      	ldr	r2, [r3, #4]
 8015a10:	4b07      	ldr	r3, [pc, #28]	; (8015a30 <vPortFree+0xb4>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	4413      	add	r3, r2
 8015a16:	4a06      	ldr	r2, [pc, #24]	; (8015a30 <vPortFree+0xb4>)
 8015a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015a1a:	6938      	ldr	r0, [r7, #16]
 8015a1c:	f000 f86c 	bl	8015af8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015a20:	f7fe fb8c 	bl	801413c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015a24:	bf00      	nop
 8015a26:	3718      	adds	r7, #24
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}
 8015a2c:	20008868 	.word	0x20008868
 8015a30:	20008860 	.word	0x20008860

08015a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015a34:	b480      	push	{r7}
 8015a36:	b085      	sub	sp, #20
 8015a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015a3a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8015a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015a40:	4b27      	ldr	r3, [pc, #156]	; (8015ae0 <prvHeapInit+0xac>)
 8015a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	f003 0307 	and.w	r3, r3, #7
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d00c      	beq.n	8015a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	3307      	adds	r3, #7
 8015a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	f023 0307 	bic.w	r3, r3, #7
 8015a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015a5c:	68ba      	ldr	r2, [r7, #8]
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	1ad3      	subs	r3, r2, r3
 8015a62:	4a1f      	ldr	r2, [pc, #124]	; (8015ae0 <prvHeapInit+0xac>)
 8015a64:	4413      	add	r3, r2
 8015a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015a6c:	4a1d      	ldr	r2, [pc, #116]	; (8015ae4 <prvHeapInit+0xb0>)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015a72:	4b1c      	ldr	r3, [pc, #112]	; (8015ae4 <prvHeapInit+0xb0>)
 8015a74:	2200      	movs	r2, #0
 8015a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	68ba      	ldr	r2, [r7, #8]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015a80:	2208      	movs	r2, #8
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	1a9b      	subs	r3, r3, r2
 8015a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	f023 0307 	bic.w	r3, r3, #7
 8015a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	4a15      	ldr	r2, [pc, #84]	; (8015ae8 <prvHeapInit+0xb4>)
 8015a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015a96:	4b14      	ldr	r3, [pc, #80]	; (8015ae8 <prvHeapInit+0xb4>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015a9e:	4b12      	ldr	r3, [pc, #72]	; (8015ae8 <prvHeapInit+0xb4>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	68fa      	ldr	r2, [r7, #12]
 8015aae:	1ad2      	subs	r2, r2, r3
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015ab4:	4b0c      	ldr	r3, [pc, #48]	; (8015ae8 <prvHeapInit+0xb4>)
 8015ab6:	681a      	ldr	r2, [r3, #0]
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	685b      	ldr	r3, [r3, #4]
 8015ac0:	4a0a      	ldr	r2, [pc, #40]	; (8015aec <prvHeapInit+0xb8>)
 8015ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	4a09      	ldr	r2, [pc, #36]	; (8015af0 <prvHeapInit+0xbc>)
 8015aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015acc:	4b09      	ldr	r3, [pc, #36]	; (8015af4 <prvHeapInit+0xc0>)
 8015ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015ad2:	601a      	str	r2, [r3, #0]
}
 8015ad4:	bf00      	nop
 8015ad6:	3714      	adds	r7, #20
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ade:	4770      	bx	lr
 8015ae0:	20001054 	.word	0x20001054
 8015ae4:	20008854 	.word	0x20008854
 8015ae8:	2000885c 	.word	0x2000885c
 8015aec:	20008864 	.word	0x20008864
 8015af0:	20008860 	.word	0x20008860
 8015af4:	20008868 	.word	0x20008868

08015af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015af8:	b480      	push	{r7}
 8015afa:	b085      	sub	sp, #20
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015b00:	4b28      	ldr	r3, [pc, #160]	; (8015ba4 <prvInsertBlockIntoFreeList+0xac>)
 8015b02:	60fb      	str	r3, [r7, #12]
 8015b04:	e002      	b.n	8015b0c <prvInsertBlockIntoFreeList+0x14>
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	60fb      	str	r3, [r7, #12]
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	687a      	ldr	r2, [r7, #4]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d8f7      	bhi.n	8015b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	68ba      	ldr	r2, [r7, #8]
 8015b20:	4413      	add	r3, r2
 8015b22:	687a      	ldr	r2, [r7, #4]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d108      	bne.n	8015b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	685a      	ldr	r2, [r3, #4]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	441a      	add	r2, r3
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	68ba      	ldr	r2, [r7, #8]
 8015b44:	441a      	add	r2, r3
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d118      	bne.n	8015b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	4b15      	ldr	r3, [pc, #84]	; (8015ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d00d      	beq.n	8015b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	685a      	ldr	r2, [r3, #4]
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	441a      	add	r2, r3
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	601a      	str	r2, [r3, #0]
 8015b74:	e008      	b.n	8015b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015b76:	4b0c      	ldr	r3, [pc, #48]	; (8015ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8015b78:	681a      	ldr	r2, [r3, #0]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	601a      	str	r2, [r3, #0]
 8015b7e:	e003      	b.n	8015b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	681a      	ldr	r2, [r3, #0]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015b88:	68fa      	ldr	r2, [r7, #12]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d002      	beq.n	8015b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	687a      	ldr	r2, [r7, #4]
 8015b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b96:	bf00      	nop
 8015b98:	3714      	adds	r7, #20
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba0:	4770      	bx	lr
 8015ba2:	bf00      	nop
 8015ba4:	20008854 	.word	0x20008854
 8015ba8:	2000885c 	.word	0x2000885c

08015bac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	4912      	ldr	r1, [pc, #72]	; (8015bfc <MX_USB_DEVICE_Init+0x50>)
 8015bb4:	4812      	ldr	r0, [pc, #72]	; (8015c00 <MX_USB_DEVICE_Init+0x54>)
 8015bb6:	f7f7 ff2d 	bl	800da14 <USBD_Init>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d001      	beq.n	8015bc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015bc0:	f7eb fd60 	bl	8001684 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015bc4:	490f      	ldr	r1, [pc, #60]	; (8015c04 <MX_USB_DEVICE_Init+0x58>)
 8015bc6:	480e      	ldr	r0, [pc, #56]	; (8015c00 <MX_USB_DEVICE_Init+0x54>)
 8015bc8:	f7f7 ff5a 	bl	800da80 <USBD_RegisterClass>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d001      	beq.n	8015bd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015bd2:	f7eb fd57 	bl	8001684 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015bd6:	490c      	ldr	r1, [pc, #48]	; (8015c08 <MX_USB_DEVICE_Init+0x5c>)
 8015bd8:	4809      	ldr	r0, [pc, #36]	; (8015c00 <MX_USB_DEVICE_Init+0x54>)
 8015bda:	f7f7 fe7f 	bl	800d8dc <USBD_CDC_RegisterInterface>
 8015bde:	4603      	mov	r3, r0
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d001      	beq.n	8015be8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015be4:	f7eb fd4e 	bl	8001684 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015be8:	4805      	ldr	r0, [pc, #20]	; (8015c00 <MX_USB_DEVICE_Init+0x54>)
 8015bea:	f7f7 ff6a 	bl	800dac2 <USBD_Start>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d001      	beq.n	8015bf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015bf4:	f7eb fd46 	bl	8001684 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015bf8:	bf00      	nop
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	20000134 	.word	0x20000134
 8015c00:	200157e8 	.word	0x200157e8
 8015c04:	20000018 	.word	0x20000018
 8015c08:	20000120 	.word	0x20000120

08015c0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015c10:	2200      	movs	r2, #0
 8015c12:	4905      	ldr	r1, [pc, #20]	; (8015c28 <CDC_Init_FS+0x1c>)
 8015c14:	4805      	ldr	r0, [pc, #20]	; (8015c2c <CDC_Init_FS+0x20>)
 8015c16:	f7f7 fe76 	bl	800d906 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015c1a:	4905      	ldr	r1, [pc, #20]	; (8015c30 <CDC_Init_FS+0x24>)
 8015c1c:	4803      	ldr	r0, [pc, #12]	; (8015c2c <CDC_Init_FS+0x20>)
 8015c1e:	f7f7 fe8b 	bl	800d938 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015c22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015c24:	4618      	mov	r0, r3
 8015c26:	bd80      	pop	{r7, pc}
 8015c28:	200162b8 	.word	0x200162b8
 8015c2c:	200157e8 	.word	0x200157e8
 8015c30:	20015ab8 	.word	0x20015ab8

08015c34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015c34:	b480      	push	{r7}
 8015c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015c38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr

08015c44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015c44:	b480      	push	{r7}
 8015c46:	b083      	sub	sp, #12
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	6039      	str	r1, [r7, #0]
 8015c4e:	71fb      	strb	r3, [r7, #7]
 8015c50:	4613      	mov	r3, r2
 8015c52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015c54:	79fb      	ldrb	r3, [r7, #7]
 8015c56:	2b23      	cmp	r3, #35	; 0x23
 8015c58:	d84a      	bhi.n	8015cf0 <CDC_Control_FS+0xac>
 8015c5a:	a201      	add	r2, pc, #4	; (adr r2, 8015c60 <CDC_Control_FS+0x1c>)
 8015c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c60:	08015cf1 	.word	0x08015cf1
 8015c64:	08015cf1 	.word	0x08015cf1
 8015c68:	08015cf1 	.word	0x08015cf1
 8015c6c:	08015cf1 	.word	0x08015cf1
 8015c70:	08015cf1 	.word	0x08015cf1
 8015c74:	08015cf1 	.word	0x08015cf1
 8015c78:	08015cf1 	.word	0x08015cf1
 8015c7c:	08015cf1 	.word	0x08015cf1
 8015c80:	08015cf1 	.word	0x08015cf1
 8015c84:	08015cf1 	.word	0x08015cf1
 8015c88:	08015cf1 	.word	0x08015cf1
 8015c8c:	08015cf1 	.word	0x08015cf1
 8015c90:	08015cf1 	.word	0x08015cf1
 8015c94:	08015cf1 	.word	0x08015cf1
 8015c98:	08015cf1 	.word	0x08015cf1
 8015c9c:	08015cf1 	.word	0x08015cf1
 8015ca0:	08015cf1 	.word	0x08015cf1
 8015ca4:	08015cf1 	.word	0x08015cf1
 8015ca8:	08015cf1 	.word	0x08015cf1
 8015cac:	08015cf1 	.word	0x08015cf1
 8015cb0:	08015cf1 	.word	0x08015cf1
 8015cb4:	08015cf1 	.word	0x08015cf1
 8015cb8:	08015cf1 	.word	0x08015cf1
 8015cbc:	08015cf1 	.word	0x08015cf1
 8015cc0:	08015cf1 	.word	0x08015cf1
 8015cc4:	08015cf1 	.word	0x08015cf1
 8015cc8:	08015cf1 	.word	0x08015cf1
 8015ccc:	08015cf1 	.word	0x08015cf1
 8015cd0:	08015cf1 	.word	0x08015cf1
 8015cd4:	08015cf1 	.word	0x08015cf1
 8015cd8:	08015cf1 	.word	0x08015cf1
 8015cdc:	08015cf1 	.word	0x08015cf1
 8015ce0:	08015cf1 	.word	0x08015cf1
 8015ce4:	08015cf1 	.word	0x08015cf1
 8015ce8:	08015cf1 	.word	0x08015cf1
 8015cec:	08015cf1 	.word	0x08015cf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015cf0:	bf00      	nop
  }

  return (USBD_OK);
 8015cf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	370c      	adds	r7, #12
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfe:	4770      	bx	lr

08015d00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015d0a:	6879      	ldr	r1, [r7, #4]
 8015d0c:	4805      	ldr	r0, [pc, #20]	; (8015d24 <CDC_Receive_FS+0x24>)
 8015d0e:	f7f7 fe13 	bl	800d938 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015d12:	4804      	ldr	r0, [pc, #16]	; (8015d24 <CDC_Receive_FS+0x24>)
 8015d14:	f7f7 fe54 	bl	800d9c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015d18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	200157e8 	.word	0x200157e8

08015d28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b084      	sub	sp, #16
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
 8015d30:	460b      	mov	r3, r1
 8015d32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015d34:	2300      	movs	r3, #0
 8015d36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015d38:	4b0d      	ldr	r3, [pc, #52]	; (8015d70 <CDC_Transmit_FS+0x48>)
 8015d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015d3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d001      	beq.n	8015d4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	e00b      	b.n	8015d66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015d4e:	887b      	ldrh	r3, [r7, #2]
 8015d50:	461a      	mov	r2, r3
 8015d52:	6879      	ldr	r1, [r7, #4]
 8015d54:	4806      	ldr	r0, [pc, #24]	; (8015d70 <CDC_Transmit_FS+0x48>)
 8015d56:	f7f7 fdd6 	bl	800d906 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015d5a:	4805      	ldr	r0, [pc, #20]	; (8015d70 <CDC_Transmit_FS+0x48>)
 8015d5c:	f7f7 fe00 	bl	800d960 <USBD_CDC_TransmitPacket>
 8015d60:	4603      	mov	r3, r0
 8015d62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3710      	adds	r7, #16
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	bf00      	nop
 8015d70:	200157e8 	.word	0x200157e8

08015d74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015d74:	b480      	push	{r7}
 8015d76:	b087      	sub	sp, #28
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	4613      	mov	r3, r2
 8015d80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015d82:	2300      	movs	r3, #0
 8015d84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	371c      	adds	r7, #28
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d94:	4770      	bx	lr
	...

08015d98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d98:	b480      	push	{r7}
 8015d9a:	b083      	sub	sp, #12
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	4603      	mov	r3, r0
 8015da0:	6039      	str	r1, [r7, #0]
 8015da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	2212      	movs	r2, #18
 8015da8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015daa:	4b03      	ldr	r3, [pc, #12]	; (8015db8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	370c      	adds	r7, #12
 8015db0:	46bd      	mov	sp, r7
 8015db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db6:	4770      	bx	lr
 8015db8:	20000154 	.word	0x20000154

08015dbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b083      	sub	sp, #12
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	6039      	str	r1, [r7, #0]
 8015dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	2204      	movs	r2, #4
 8015dcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015dce:	4b03      	ldr	r3, [pc, #12]	; (8015ddc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	370c      	adds	r7, #12
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr
 8015ddc:	20000174 	.word	0x20000174

08015de0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	4603      	mov	r3, r0
 8015de8:	6039      	str	r1, [r7, #0]
 8015dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015dec:	79fb      	ldrb	r3, [r7, #7]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d105      	bne.n	8015dfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015df2:	683a      	ldr	r2, [r7, #0]
 8015df4:	4907      	ldr	r1, [pc, #28]	; (8015e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8015df6:	4808      	ldr	r0, [pc, #32]	; (8015e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8015df8:	f7f8 fe5b 	bl	800eab2 <USBD_GetString>
 8015dfc:	e004      	b.n	8015e08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015dfe:	683a      	ldr	r2, [r7, #0]
 8015e00:	4904      	ldr	r1, [pc, #16]	; (8015e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8015e02:	4805      	ldr	r0, [pc, #20]	; (8015e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8015e04:	f7f8 fe55 	bl	800eab2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015e08:	4b02      	ldr	r3, [pc, #8]	; (8015e14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3708      	adds	r7, #8
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	20016ab8 	.word	0x20016ab8
 8015e18:	080186c4 	.word	0x080186c4

08015e1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	4603      	mov	r3, r0
 8015e24:	6039      	str	r1, [r7, #0]
 8015e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015e28:	683a      	ldr	r2, [r7, #0]
 8015e2a:	4904      	ldr	r1, [pc, #16]	; (8015e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015e2c:	4804      	ldr	r0, [pc, #16]	; (8015e40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015e2e:	f7f8 fe40 	bl	800eab2 <USBD_GetString>
  return USBD_StrDesc;
 8015e32:	4b02      	ldr	r3, [pc, #8]	; (8015e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3708      	adds	r7, #8
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	20016ab8 	.word	0x20016ab8
 8015e40:	080186dc 	.word	0x080186dc

08015e44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	6039      	str	r1, [r7, #0]
 8015e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	221a      	movs	r2, #26
 8015e54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015e56:	f000 f855 	bl	8015f04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015e5a:	4b02      	ldr	r3, [pc, #8]	; (8015e64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3708      	adds	r7, #8
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}
 8015e64:	20000178 	.word	0x20000178

08015e68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	4603      	mov	r3, r0
 8015e70:	6039      	str	r1, [r7, #0]
 8015e72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015e74:	79fb      	ldrb	r3, [r7, #7]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d105      	bne.n	8015e86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015e7a:	683a      	ldr	r2, [r7, #0]
 8015e7c:	4907      	ldr	r1, [pc, #28]	; (8015e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8015e7e:	4808      	ldr	r0, [pc, #32]	; (8015ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015e80:	f7f8 fe17 	bl	800eab2 <USBD_GetString>
 8015e84:	e004      	b.n	8015e90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015e86:	683a      	ldr	r2, [r7, #0]
 8015e88:	4904      	ldr	r1, [pc, #16]	; (8015e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8015e8a:	4805      	ldr	r0, [pc, #20]	; (8015ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015e8c:	f7f8 fe11 	bl	800eab2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015e90:	4b02      	ldr	r3, [pc, #8]	; (8015e9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3708      	adds	r7, #8
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop
 8015e9c:	20016ab8 	.word	0x20016ab8
 8015ea0:	080186f0 	.word	0x080186f0

08015ea4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	4603      	mov	r3, r0
 8015eac:	6039      	str	r1, [r7, #0]
 8015eae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015eb0:	79fb      	ldrb	r3, [r7, #7]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d105      	bne.n	8015ec2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015eb6:	683a      	ldr	r2, [r7, #0]
 8015eb8:	4907      	ldr	r1, [pc, #28]	; (8015ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015eba:	4808      	ldr	r0, [pc, #32]	; (8015edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015ebc:	f7f8 fdf9 	bl	800eab2 <USBD_GetString>
 8015ec0:	e004      	b.n	8015ecc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015ec2:	683a      	ldr	r2, [r7, #0]
 8015ec4:	4904      	ldr	r1, [pc, #16]	; (8015ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015ec6:	4805      	ldr	r0, [pc, #20]	; (8015edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015ec8:	f7f8 fdf3 	bl	800eab2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015ecc:	4b02      	ldr	r3, [pc, #8]	; (8015ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3708      	adds	r7, #8
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	20016ab8 	.word	0x20016ab8
 8015edc:	080186fc 	.word	0x080186fc

08015ee0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b083      	sub	sp, #12
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	6039      	str	r1, [r7, #0]
 8015eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	220c      	movs	r2, #12
 8015ef0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015ef2:	4b03      	ldr	r3, [pc, #12]	; (8015f00 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	370c      	adds	r7, #12
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efe:	4770      	bx	lr
 8015f00:	20000168 	.word	0x20000168

08015f04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b084      	sub	sp, #16
 8015f08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015f0a:	4b0f      	ldr	r3, [pc, #60]	; (8015f48 <Get_SerialNum+0x44>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015f10:	4b0e      	ldr	r3, [pc, #56]	; (8015f4c <Get_SerialNum+0x48>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015f16:	4b0e      	ldr	r3, [pc, #56]	; (8015f50 <Get_SerialNum+0x4c>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015f1c:	68fa      	ldr	r2, [r7, #12]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	4413      	add	r3, r2
 8015f22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d009      	beq.n	8015f3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015f2a:	2208      	movs	r2, #8
 8015f2c:	4909      	ldr	r1, [pc, #36]	; (8015f54 <Get_SerialNum+0x50>)
 8015f2e:	68f8      	ldr	r0, [r7, #12]
 8015f30:	f000 f814 	bl	8015f5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015f34:	2204      	movs	r2, #4
 8015f36:	4908      	ldr	r1, [pc, #32]	; (8015f58 <Get_SerialNum+0x54>)
 8015f38:	68b8      	ldr	r0, [r7, #8]
 8015f3a:	f000 f80f 	bl	8015f5c <IntToUnicode>
  }
}
 8015f3e:	bf00      	nop
 8015f40:	3710      	adds	r7, #16
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}
 8015f46:	bf00      	nop
 8015f48:	1ff0f420 	.word	0x1ff0f420
 8015f4c:	1ff0f424 	.word	0x1ff0f424
 8015f50:	1ff0f428 	.word	0x1ff0f428
 8015f54:	2000017a 	.word	0x2000017a
 8015f58:	2000018a 	.word	0x2000018a

08015f5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b087      	sub	sp, #28
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	4613      	mov	r3, r2
 8015f68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015f6e:	2300      	movs	r3, #0
 8015f70:	75fb      	strb	r3, [r7, #23]
 8015f72:	e027      	b.n	8015fc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	0f1b      	lsrs	r3, r3, #28
 8015f78:	2b09      	cmp	r3, #9
 8015f7a:	d80b      	bhi.n	8015f94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	0f1b      	lsrs	r3, r3, #28
 8015f80:	b2da      	uxtb	r2, r3
 8015f82:	7dfb      	ldrb	r3, [r7, #23]
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	4619      	mov	r1, r3
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	440b      	add	r3, r1
 8015f8c:	3230      	adds	r2, #48	; 0x30
 8015f8e:	b2d2      	uxtb	r2, r2
 8015f90:	701a      	strb	r2, [r3, #0]
 8015f92:	e00a      	b.n	8015faa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	0f1b      	lsrs	r3, r3, #28
 8015f98:	b2da      	uxtb	r2, r3
 8015f9a:	7dfb      	ldrb	r3, [r7, #23]
 8015f9c:	005b      	lsls	r3, r3, #1
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	440b      	add	r3, r1
 8015fa4:	3237      	adds	r2, #55	; 0x37
 8015fa6:	b2d2      	uxtb	r2, r2
 8015fa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	011b      	lsls	r3, r3, #4
 8015fae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015fb0:	7dfb      	ldrb	r3, [r7, #23]
 8015fb2:	005b      	lsls	r3, r3, #1
 8015fb4:	3301      	adds	r3, #1
 8015fb6:	68ba      	ldr	r2, [r7, #8]
 8015fb8:	4413      	add	r3, r2
 8015fba:	2200      	movs	r2, #0
 8015fbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015fbe:	7dfb      	ldrb	r3, [r7, #23]
 8015fc0:	3301      	adds	r3, #1
 8015fc2:	75fb      	strb	r3, [r7, #23]
 8015fc4:	7dfa      	ldrb	r2, [r7, #23]
 8015fc6:	79fb      	ldrb	r3, [r7, #7]
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d3d3      	bcc.n	8015f74 <IntToUnicode+0x18>
  }
}
 8015fcc:	bf00      	nop
 8015fce:	371c      	adds	r7, #28
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd6:	4770      	bx	lr

08015fd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b08a      	sub	sp, #40	; 0x28
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015fe0:	f107 0314 	add.w	r3, r7, #20
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	601a      	str	r2, [r3, #0]
 8015fe8:	605a      	str	r2, [r3, #4]
 8015fea:	609a      	str	r2, [r3, #8]
 8015fec:	60da      	str	r2, [r3, #12]
 8015fee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015ff8:	d13c      	bne.n	8016074 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015ffa:	4b20      	ldr	r3, [pc, #128]	; (801607c <HAL_PCD_MspInit+0xa4>)
 8015ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ffe:	4a1f      	ldr	r2, [pc, #124]	; (801607c <HAL_PCD_MspInit+0xa4>)
 8016000:	f043 0301 	orr.w	r3, r3, #1
 8016004:	6313      	str	r3, [r2, #48]	; 0x30
 8016006:	4b1d      	ldr	r3, [pc, #116]	; (801607c <HAL_PCD_MspInit+0xa4>)
 8016008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801600a:	f003 0301 	and.w	r3, r3, #1
 801600e:	613b      	str	r3, [r7, #16]
 8016010:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016012:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016018:	2302      	movs	r3, #2
 801601a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801601c:	2300      	movs	r3, #0
 801601e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016020:	2303      	movs	r3, #3
 8016022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016024:	230a      	movs	r3, #10
 8016026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016028:	f107 0314 	add.w	r3, r7, #20
 801602c:	4619      	mov	r1, r3
 801602e:	4814      	ldr	r0, [pc, #80]	; (8016080 <HAL_PCD_MspInit+0xa8>)
 8016030:	f7ef f930 	bl	8005294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016034:	4b11      	ldr	r3, [pc, #68]	; (801607c <HAL_PCD_MspInit+0xa4>)
 8016036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016038:	4a10      	ldr	r2, [pc, #64]	; (801607c <HAL_PCD_MspInit+0xa4>)
 801603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801603e:	6353      	str	r3, [r2, #52]	; 0x34
 8016040:	4b0e      	ldr	r3, [pc, #56]	; (801607c <HAL_PCD_MspInit+0xa4>)
 8016042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016048:	60fb      	str	r3, [r7, #12]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	4b0b      	ldr	r3, [pc, #44]	; (801607c <HAL_PCD_MspInit+0xa4>)
 801604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016050:	4a0a      	ldr	r2, [pc, #40]	; (801607c <HAL_PCD_MspInit+0xa4>)
 8016052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016056:	6453      	str	r3, [r2, #68]	; 0x44
 8016058:	4b08      	ldr	r3, [pc, #32]	; (801607c <HAL_PCD_MspInit+0xa4>)
 801605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801605c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016060:	60bb      	str	r3, [r7, #8]
 8016062:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016064:	2200      	movs	r2, #0
 8016066:	2105      	movs	r1, #5
 8016068:	2043      	movs	r0, #67	; 0x43
 801606a:	f7ee fd45 	bl	8004af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801606e:	2043      	movs	r0, #67	; 0x43
 8016070:	f7ee fd5e 	bl	8004b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016074:	bf00      	nop
 8016076:	3728      	adds	r7, #40	; 0x28
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	40023800 	.word	0x40023800
 8016080:	40020000 	.word	0x40020000

08016084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016098:	4619      	mov	r1, r3
 801609a:	4610      	mov	r0, r2
 801609c:	f7f7 fd5c 	bl	800db58 <USBD_LL_SetupStage>
}
 80160a0:	bf00      	nop
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	460b      	mov	r3, r1
 80160b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80160ba:	78fa      	ldrb	r2, [r7, #3]
 80160bc:	6879      	ldr	r1, [r7, #4]
 80160be:	4613      	mov	r3, r2
 80160c0:	00db      	lsls	r3, r3, #3
 80160c2:	1a9b      	subs	r3, r3, r2
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	440b      	add	r3, r1
 80160c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80160cc:	681a      	ldr	r2, [r3, #0]
 80160ce:	78fb      	ldrb	r3, [r7, #3]
 80160d0:	4619      	mov	r1, r3
 80160d2:	f7f7 fd94 	bl	800dbfe <USBD_LL_DataOutStage>
}
 80160d6:	bf00      	nop
 80160d8:	3708      	adds	r7, #8
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160de:	b580      	push	{r7, lr}
 80160e0:	b082      	sub	sp, #8
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	6078      	str	r0, [r7, #4]
 80160e6:	460b      	mov	r3, r1
 80160e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80160f0:	78fa      	ldrb	r2, [r7, #3]
 80160f2:	6879      	ldr	r1, [r7, #4]
 80160f4:	4613      	mov	r3, r2
 80160f6:	00db      	lsls	r3, r3, #3
 80160f8:	1a9b      	subs	r3, r3, r2
 80160fa:	009b      	lsls	r3, r3, #2
 80160fc:	440b      	add	r3, r1
 80160fe:	3348      	adds	r3, #72	; 0x48
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	78fb      	ldrb	r3, [r7, #3]
 8016104:	4619      	mov	r1, r3
 8016106:	f7f7 fddd 	bl	800dcc4 <USBD_LL_DataInStage>
}
 801610a:	bf00      	nop
 801610c:	3708      	adds	r7, #8
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}

08016112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016112:	b580      	push	{r7, lr}
 8016114:	b082      	sub	sp, #8
 8016116:	af00      	add	r7, sp, #0
 8016118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016120:	4618      	mov	r0, r3
 8016122:	f7f7 fee1 	bl	800dee8 <USBD_LL_SOF>
}
 8016126:	bf00      	nop
 8016128:	3708      	adds	r7, #8
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}

0801612e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801612e:	b580      	push	{r7, lr}
 8016130:	b084      	sub	sp, #16
 8016132:	af00      	add	r7, sp, #0
 8016134:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016136:	2301      	movs	r3, #1
 8016138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	68db      	ldr	r3, [r3, #12]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d102      	bne.n	8016148 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016142:	2300      	movs	r3, #0
 8016144:	73fb      	strb	r3, [r7, #15]
 8016146:	e008      	b.n	801615a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	68db      	ldr	r3, [r3, #12]
 801614c:	2b02      	cmp	r3, #2
 801614e:	d102      	bne.n	8016156 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016150:	2301      	movs	r3, #1
 8016152:	73fb      	strb	r3, [r7, #15]
 8016154:	e001      	b.n	801615a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016156:	f7eb fa95 	bl	8001684 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016160:	7bfa      	ldrb	r2, [r7, #15]
 8016162:	4611      	mov	r1, r2
 8016164:	4618      	mov	r0, r3
 8016166:	f7f7 fe84 	bl	800de72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016170:	4618      	mov	r0, r3
 8016172:	f7f7 fe3d 	bl	800ddf0 <USBD_LL_Reset>
}
 8016176:	bf00      	nop
 8016178:	3710      	adds	r7, #16
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}
	...

08016180 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801618e:	4618      	mov	r0, r3
 8016190:	f7f7 fe7f 	bl	800de92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	687a      	ldr	r2, [r7, #4]
 80161a0:	6812      	ldr	r2, [r2, #0]
 80161a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80161a6:	f043 0301 	orr.w	r3, r3, #1
 80161aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	6a1b      	ldr	r3, [r3, #32]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d005      	beq.n	80161c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80161b4:	4b04      	ldr	r3, [pc, #16]	; (80161c8 <HAL_PCD_SuspendCallback+0x48>)
 80161b6:	691b      	ldr	r3, [r3, #16]
 80161b8:	4a03      	ldr	r2, [pc, #12]	; (80161c8 <HAL_PCD_SuspendCallback+0x48>)
 80161ba:	f043 0306 	orr.w	r3, r3, #6
 80161be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80161c0:	bf00      	nop
 80161c2:	3708      	adds	r7, #8
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	e000ed00 	.word	0xe000ed00

080161cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80161da:	4618      	mov	r0, r3
 80161dc:	f7f7 fe6e 	bl	800debc <USBD_LL_Resume>
}
 80161e0:	bf00      	nop
 80161e2:	3708      	adds	r7, #8
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	460b      	mov	r3, r1
 80161f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80161fa:	78fa      	ldrb	r2, [r7, #3]
 80161fc:	4611      	mov	r1, r2
 80161fe:	4618      	mov	r0, r3
 8016200:	f7f7 fe99 	bl	800df36 <USBD_LL_IsoOUTIncomplete>
}
 8016204:	bf00      	nop
 8016206:	3708      	adds	r7, #8
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	460b      	mov	r3, r1
 8016216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801621e:	78fa      	ldrb	r2, [r7, #3]
 8016220:	4611      	mov	r1, r2
 8016222:	4618      	mov	r0, r3
 8016224:	f7f7 fe7a 	bl	800df1c <USBD_LL_IsoINIncomplete>
}
 8016228:	bf00      	nop
 801622a:	3708      	adds	r7, #8
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}

08016230 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801623e:	4618      	mov	r0, r3
 8016240:	f7f7 fe86 	bl	800df50 <USBD_LL_DevConnected>
}
 8016244:	bf00      	nop
 8016246:	3708      	adds	r7, #8
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}

0801624c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801625a:	4618      	mov	r0, r3
 801625c:	f7f7 fe83 	bl	800df66 <USBD_LL_DevDisconnected>
}
 8016260:	bf00      	nop
 8016262:	3708      	adds	r7, #8
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d13c      	bne.n	80162f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016278:	4a20      	ldr	r2, [pc, #128]	; (80162fc <USBD_LL_Init+0x94>)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	4a1e      	ldr	r2, [pc, #120]	; (80162fc <USBD_LL_Init+0x94>)
 8016284:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016288:	4b1c      	ldr	r3, [pc, #112]	; (80162fc <USBD_LL_Init+0x94>)
 801628a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801628e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016290:	4b1a      	ldr	r3, [pc, #104]	; (80162fc <USBD_LL_Init+0x94>)
 8016292:	2206      	movs	r2, #6
 8016294:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016296:	4b19      	ldr	r3, [pc, #100]	; (80162fc <USBD_LL_Init+0x94>)
 8016298:	2202      	movs	r2, #2
 801629a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801629c:	4b17      	ldr	r3, [pc, #92]	; (80162fc <USBD_LL_Init+0x94>)
 801629e:	2200      	movs	r2, #0
 80162a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80162a2:	4b16      	ldr	r3, [pc, #88]	; (80162fc <USBD_LL_Init+0x94>)
 80162a4:	2202      	movs	r2, #2
 80162a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80162a8:	4b14      	ldr	r3, [pc, #80]	; (80162fc <USBD_LL_Init+0x94>)
 80162aa:	2200      	movs	r2, #0
 80162ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80162ae:	4b13      	ldr	r3, [pc, #76]	; (80162fc <USBD_LL_Init+0x94>)
 80162b0:	2200      	movs	r2, #0
 80162b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80162b4:	4b11      	ldr	r3, [pc, #68]	; (80162fc <USBD_LL_Init+0x94>)
 80162b6:	2200      	movs	r2, #0
 80162b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80162ba:	4b10      	ldr	r3, [pc, #64]	; (80162fc <USBD_LL_Init+0x94>)
 80162bc:	2200      	movs	r2, #0
 80162be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80162c0:	4b0e      	ldr	r3, [pc, #56]	; (80162fc <USBD_LL_Init+0x94>)
 80162c2:	2200      	movs	r2, #0
 80162c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80162c6:	480d      	ldr	r0, [pc, #52]	; (80162fc <USBD_LL_Init+0x94>)
 80162c8:	f7ef f9a7 	bl	800561a <HAL_PCD_Init>
 80162cc:	4603      	mov	r3, r0
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d001      	beq.n	80162d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80162d2:	f7eb f9d7 	bl	8001684 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80162d6:	2180      	movs	r1, #128	; 0x80
 80162d8:	4808      	ldr	r0, [pc, #32]	; (80162fc <USBD_LL_Init+0x94>)
 80162da:	f7f0 fb28 	bl	800692e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80162de:	2240      	movs	r2, #64	; 0x40
 80162e0:	2100      	movs	r1, #0
 80162e2:	4806      	ldr	r0, [pc, #24]	; (80162fc <USBD_LL_Init+0x94>)
 80162e4:	f7f0 fadc 	bl	80068a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80162e8:	2280      	movs	r2, #128	; 0x80
 80162ea:	2101      	movs	r1, #1
 80162ec:	4803      	ldr	r0, [pc, #12]	; (80162fc <USBD_LL_Init+0x94>)
 80162ee:	f7f0 fad7 	bl	80068a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80162f2:	2300      	movs	r3, #0
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3708      	adds	r7, #8
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	20016cb8 	.word	0x20016cb8

08016300 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016308:	2300      	movs	r3, #0
 801630a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801630c:	2300      	movs	r3, #0
 801630e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016316:	4618      	mov	r0, r3
 8016318:	f7ef faa3 	bl	8005862 <HAL_PCD_Start>
 801631c:	4603      	mov	r3, r0
 801631e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016320:	7bfb      	ldrb	r3, [r7, #15]
 8016322:	4618      	mov	r0, r3
 8016324:	f000 f97e 	bl	8016624 <USBD_Get_USB_Status>
 8016328:	4603      	mov	r3, r0
 801632a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801632c:	7bbb      	ldrb	r3, [r7, #14]
}
 801632e:	4618      	mov	r0, r3
 8016330:	3710      	adds	r7, #16
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}

08016336 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016336:	b580      	push	{r7, lr}
 8016338:	b084      	sub	sp, #16
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
 801633e:	4608      	mov	r0, r1
 8016340:	4611      	mov	r1, r2
 8016342:	461a      	mov	r2, r3
 8016344:	4603      	mov	r3, r0
 8016346:	70fb      	strb	r3, [r7, #3]
 8016348:	460b      	mov	r3, r1
 801634a:	70bb      	strb	r3, [r7, #2]
 801634c:	4613      	mov	r3, r2
 801634e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016350:	2300      	movs	r3, #0
 8016352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016354:	2300      	movs	r3, #0
 8016356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801635e:	78bb      	ldrb	r3, [r7, #2]
 8016360:	883a      	ldrh	r2, [r7, #0]
 8016362:	78f9      	ldrb	r1, [r7, #3]
 8016364:	f7ef fea3 	bl	80060ae <HAL_PCD_EP_Open>
 8016368:	4603      	mov	r3, r0
 801636a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801636c:	7bfb      	ldrb	r3, [r7, #15]
 801636e:	4618      	mov	r0, r3
 8016370:	f000 f958 	bl	8016624 <USBD_Get_USB_Status>
 8016374:	4603      	mov	r3, r0
 8016376:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016378:	7bbb      	ldrb	r3, [r7, #14]
}
 801637a:	4618      	mov	r0, r3
 801637c:	3710      	adds	r7, #16
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}

08016382 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016382:	b580      	push	{r7, lr}
 8016384:	b084      	sub	sp, #16
 8016386:	af00      	add	r7, sp, #0
 8016388:	6078      	str	r0, [r7, #4]
 801638a:	460b      	mov	r3, r1
 801638c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801638e:	2300      	movs	r3, #0
 8016390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016392:	2300      	movs	r3, #0
 8016394:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801639c:	78fa      	ldrb	r2, [r7, #3]
 801639e:	4611      	mov	r1, r2
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7ef feec 	bl	800617e <HAL_PCD_EP_Close>
 80163a6:	4603      	mov	r3, r0
 80163a8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80163aa:	7bfb      	ldrb	r3, [r7, #15]
 80163ac:	4618      	mov	r0, r3
 80163ae:	f000 f939 	bl	8016624 <USBD_Get_USB_Status>
 80163b2:	4603      	mov	r3, r0
 80163b4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80163b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	3710      	adds	r7, #16
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}

080163c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	460b      	mov	r3, r1
 80163ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163cc:	2300      	movs	r3, #0
 80163ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163d0:	2300      	movs	r3, #0
 80163d2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80163da:	78fa      	ldrb	r2, [r7, #3]
 80163dc:	4611      	mov	r1, r2
 80163de:	4618      	mov	r0, r3
 80163e0:	f7ef ffc4 	bl	800636c <HAL_PCD_EP_SetStall>
 80163e4:	4603      	mov	r3, r0
 80163e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80163e8:	7bfb      	ldrb	r3, [r7, #15]
 80163ea:	4618      	mov	r0, r3
 80163ec:	f000 f91a 	bl	8016624 <USBD_Get_USB_Status>
 80163f0:	4603      	mov	r3, r0
 80163f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80163f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3710      	adds	r7, #16
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}

080163fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80163fe:	b580      	push	{r7, lr}
 8016400:	b084      	sub	sp, #16
 8016402:	af00      	add	r7, sp, #0
 8016404:	6078      	str	r0, [r7, #4]
 8016406:	460b      	mov	r3, r1
 8016408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801640a:	2300      	movs	r3, #0
 801640c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801640e:	2300      	movs	r3, #0
 8016410:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016418:	78fa      	ldrb	r2, [r7, #3]
 801641a:	4611      	mov	r1, r2
 801641c:	4618      	mov	r0, r3
 801641e:	f7f0 f809 	bl	8006434 <HAL_PCD_EP_ClrStall>
 8016422:	4603      	mov	r3, r0
 8016424:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016426:	7bfb      	ldrb	r3, [r7, #15]
 8016428:	4618      	mov	r0, r3
 801642a:	f000 f8fb 	bl	8016624 <USBD_Get_USB_Status>
 801642e:	4603      	mov	r3, r0
 8016430:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016432:	7bbb      	ldrb	r3, [r7, #14]
}
 8016434:	4618      	mov	r0, r3
 8016436:	3710      	adds	r7, #16
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801643c:	b480      	push	{r7}
 801643e:	b085      	sub	sp, #20
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	460b      	mov	r3, r1
 8016446:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801644e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016454:	2b00      	cmp	r3, #0
 8016456:	da0b      	bge.n	8016470 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016458:	78fb      	ldrb	r3, [r7, #3]
 801645a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801645e:	68f9      	ldr	r1, [r7, #12]
 8016460:	4613      	mov	r3, r2
 8016462:	00db      	lsls	r3, r3, #3
 8016464:	1a9b      	subs	r3, r3, r2
 8016466:	009b      	lsls	r3, r3, #2
 8016468:	440b      	add	r3, r1
 801646a:	333e      	adds	r3, #62	; 0x3e
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	e00b      	b.n	8016488 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016470:	78fb      	ldrb	r3, [r7, #3]
 8016472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016476:	68f9      	ldr	r1, [r7, #12]
 8016478:	4613      	mov	r3, r2
 801647a:	00db      	lsls	r3, r3, #3
 801647c:	1a9b      	subs	r3, r3, r2
 801647e:	009b      	lsls	r3, r3, #2
 8016480:	440b      	add	r3, r1
 8016482:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016486:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016488:	4618      	mov	r0, r3
 801648a:	3714      	adds	r7, #20
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr

08016494 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	460b      	mov	r3, r1
 801649e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164a0:	2300      	movs	r3, #0
 80164a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164a4:	2300      	movs	r3, #0
 80164a6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80164ae:	78fa      	ldrb	r2, [r7, #3]
 80164b0:	4611      	mov	r1, r2
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7ef fdd6 	bl	8006064 <HAL_PCD_SetAddress>
 80164b8:	4603      	mov	r3, r0
 80164ba:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80164bc:	7bfb      	ldrb	r3, [r7, #15]
 80164be:	4618      	mov	r0, r3
 80164c0:	f000 f8b0 	bl	8016624 <USBD_Get_USB_Status>
 80164c4:	4603      	mov	r3, r0
 80164c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80164c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3710      	adds	r7, #16
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}

080164d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80164d2:	b580      	push	{r7, lr}
 80164d4:	b086      	sub	sp, #24
 80164d6:	af00      	add	r7, sp, #0
 80164d8:	60f8      	str	r0, [r7, #12]
 80164da:	607a      	str	r2, [r7, #4]
 80164dc:	603b      	str	r3, [r7, #0]
 80164de:	460b      	mov	r3, r1
 80164e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164e2:	2300      	movs	r3, #0
 80164e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164e6:	2300      	movs	r3, #0
 80164e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80164f0:	7af9      	ldrb	r1, [r7, #11]
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	687a      	ldr	r2, [r7, #4]
 80164f6:	f7ef feef 	bl	80062d8 <HAL_PCD_EP_Transmit>
 80164fa:	4603      	mov	r3, r0
 80164fc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80164fe:	7dfb      	ldrb	r3, [r7, #23]
 8016500:	4618      	mov	r0, r3
 8016502:	f000 f88f 	bl	8016624 <USBD_Get_USB_Status>
 8016506:	4603      	mov	r3, r0
 8016508:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801650a:	7dbb      	ldrb	r3, [r7, #22]
}
 801650c:	4618      	mov	r0, r3
 801650e:	3718      	adds	r7, #24
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}

08016514 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b086      	sub	sp, #24
 8016518:	af00      	add	r7, sp, #0
 801651a:	60f8      	str	r0, [r7, #12]
 801651c:	607a      	str	r2, [r7, #4]
 801651e:	603b      	str	r3, [r7, #0]
 8016520:	460b      	mov	r3, r1
 8016522:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016524:	2300      	movs	r3, #0
 8016526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016528:	2300      	movs	r3, #0
 801652a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016532:	7af9      	ldrb	r1, [r7, #11]
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	f7ef fe6b 	bl	8006212 <HAL_PCD_EP_Receive>
 801653c:	4603      	mov	r3, r0
 801653e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016540:	7dfb      	ldrb	r3, [r7, #23]
 8016542:	4618      	mov	r0, r3
 8016544:	f000 f86e 	bl	8016624 <USBD_Get_USB_Status>
 8016548:	4603      	mov	r3, r0
 801654a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801654c:	7dbb      	ldrb	r3, [r7, #22]
}
 801654e:	4618      	mov	r0, r3
 8016550:	3718      	adds	r7, #24
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}

08016556 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016556:	b580      	push	{r7, lr}
 8016558:	b082      	sub	sp, #8
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
 801655e:	460b      	mov	r3, r1
 8016560:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016568:	78fa      	ldrb	r2, [r7, #3]
 801656a:	4611      	mov	r1, r2
 801656c:	4618      	mov	r0, r3
 801656e:	f7ef fe9b 	bl	80062a8 <HAL_PCD_EP_GetRxCount>
 8016572:	4603      	mov	r3, r0
}
 8016574:	4618      	mov	r0, r3
 8016576:	3708      	adds	r7, #8
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b082      	sub	sp, #8
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
 8016584:	460b      	mov	r3, r1
 8016586:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016588:	78fb      	ldrb	r3, [r7, #3]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d002      	beq.n	8016594 <HAL_PCDEx_LPM_Callback+0x18>
 801658e:	2b01      	cmp	r3, #1
 8016590:	d01f      	beq.n	80165d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8016592:	e03b      	b.n	801660c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	6a1b      	ldr	r3, [r3, #32]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d007      	beq.n	80165ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801659c:	f000 f83c 	bl	8016618 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80165a0:	4b1c      	ldr	r3, [pc, #112]	; (8016614 <HAL_PCDEx_LPM_Callback+0x98>)
 80165a2:	691b      	ldr	r3, [r3, #16]
 80165a4:	4a1b      	ldr	r2, [pc, #108]	; (8016614 <HAL_PCDEx_LPM_Callback+0x98>)
 80165a6:	f023 0306 	bic.w	r3, r3, #6
 80165aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	6812      	ldr	r2, [r2, #0]
 80165ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80165be:	f023 0301 	bic.w	r3, r3, #1
 80165c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7f7 fc76 	bl	800debc <USBD_LL_Resume>
    break;
 80165d0:	e01c      	b.n	801660c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	687a      	ldr	r2, [r7, #4]
 80165de:	6812      	ldr	r2, [r2, #0]
 80165e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80165e4:	f043 0301 	orr.w	r3, r3, #1
 80165e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7f7 fc4e 	bl	800de92 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	6a1b      	ldr	r3, [r3, #32]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d005      	beq.n	801660a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80165fe:	4b05      	ldr	r3, [pc, #20]	; (8016614 <HAL_PCDEx_LPM_Callback+0x98>)
 8016600:	691b      	ldr	r3, [r3, #16]
 8016602:	4a04      	ldr	r2, [pc, #16]	; (8016614 <HAL_PCDEx_LPM_Callback+0x98>)
 8016604:	f043 0306 	orr.w	r3, r3, #6
 8016608:	6113      	str	r3, [r2, #16]
    break;   
 801660a:	bf00      	nop
}
 801660c:	bf00      	nop
 801660e:	3708      	adds	r7, #8
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}
 8016614:	e000ed00 	.word	0xe000ed00

08016618 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801661c:	f7ea fdf8 	bl	8001210 <SystemClock_Config>
}
 8016620:	bf00      	nop
 8016622:	bd80      	pop	{r7, pc}

08016624 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016624:	b480      	push	{r7}
 8016626:	b085      	sub	sp, #20
 8016628:	af00      	add	r7, sp, #0
 801662a:	4603      	mov	r3, r0
 801662c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801662e:	2300      	movs	r3, #0
 8016630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016632:	79fb      	ldrb	r3, [r7, #7]
 8016634:	2b03      	cmp	r3, #3
 8016636:	d817      	bhi.n	8016668 <USBD_Get_USB_Status+0x44>
 8016638:	a201      	add	r2, pc, #4	; (adr r2, 8016640 <USBD_Get_USB_Status+0x1c>)
 801663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801663e:	bf00      	nop
 8016640:	08016651 	.word	0x08016651
 8016644:	08016657 	.word	0x08016657
 8016648:	0801665d 	.word	0x0801665d
 801664c:	08016663 	.word	0x08016663
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016650:	2300      	movs	r3, #0
 8016652:	73fb      	strb	r3, [r7, #15]
    break;
 8016654:	e00b      	b.n	801666e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016656:	2303      	movs	r3, #3
 8016658:	73fb      	strb	r3, [r7, #15]
    break;
 801665a:	e008      	b.n	801666e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801665c:	2301      	movs	r3, #1
 801665e:	73fb      	strb	r3, [r7, #15]
    break;
 8016660:	e005      	b.n	801666e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016662:	2303      	movs	r3, #3
 8016664:	73fb      	strb	r3, [r7, #15]
    break;
 8016666:	e002      	b.n	801666e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016668:	2303      	movs	r3, #3
 801666a:	73fb      	strb	r3, [r7, #15]
    break;
 801666c:	bf00      	nop
  }
  return usb_status;
 801666e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016670:	4618      	mov	r0, r3
 8016672:	3714      	adds	r7, #20
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr

0801667c <__errno>:
 801667c:	4b01      	ldr	r3, [pc, #4]	; (8016684 <__errno+0x8>)
 801667e:	6818      	ldr	r0, [r3, #0]
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop
 8016684:	20000194 	.word	0x20000194

08016688 <__libc_init_array>:
 8016688:	b570      	push	{r4, r5, r6, lr}
 801668a:	4e0d      	ldr	r6, [pc, #52]	; (80166c0 <__libc_init_array+0x38>)
 801668c:	4c0d      	ldr	r4, [pc, #52]	; (80166c4 <__libc_init_array+0x3c>)
 801668e:	1ba4      	subs	r4, r4, r6
 8016690:	10a4      	asrs	r4, r4, #2
 8016692:	2500      	movs	r5, #0
 8016694:	42a5      	cmp	r5, r4
 8016696:	d109      	bne.n	80166ac <__libc_init_array+0x24>
 8016698:	4e0b      	ldr	r6, [pc, #44]	; (80166c8 <__libc_init_array+0x40>)
 801669a:	4c0c      	ldr	r4, [pc, #48]	; (80166cc <__libc_init_array+0x44>)
 801669c:	f001 fd56 	bl	801814c <_init>
 80166a0:	1ba4      	subs	r4, r4, r6
 80166a2:	10a4      	asrs	r4, r4, #2
 80166a4:	2500      	movs	r5, #0
 80166a6:	42a5      	cmp	r5, r4
 80166a8:	d105      	bne.n	80166b6 <__libc_init_array+0x2e>
 80166aa:	bd70      	pop	{r4, r5, r6, pc}
 80166ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80166b0:	4798      	blx	r3
 80166b2:	3501      	adds	r5, #1
 80166b4:	e7ee      	b.n	8016694 <__libc_init_array+0xc>
 80166b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80166ba:	4798      	blx	r3
 80166bc:	3501      	adds	r5, #1
 80166be:	e7f2      	b.n	80166a6 <__libc_init_array+0x1e>
 80166c0:	08018940 	.word	0x08018940
 80166c4:	08018940 	.word	0x08018940
 80166c8:	08018940 	.word	0x08018940
 80166cc:	08018944 	.word	0x08018944

080166d0 <malloc>:
 80166d0:	4b02      	ldr	r3, [pc, #8]	; (80166dc <malloc+0xc>)
 80166d2:	4601      	mov	r1, r0
 80166d4:	6818      	ldr	r0, [r3, #0]
 80166d6:	f000 b86d 	b.w	80167b4 <_malloc_r>
 80166da:	bf00      	nop
 80166dc:	20000194 	.word	0x20000194

080166e0 <free>:
 80166e0:	4b02      	ldr	r3, [pc, #8]	; (80166ec <free+0xc>)
 80166e2:	4601      	mov	r1, r0
 80166e4:	6818      	ldr	r0, [r3, #0]
 80166e6:	f000 b817 	b.w	8016718 <_free_r>
 80166ea:	bf00      	nop
 80166ec:	20000194 	.word	0x20000194

080166f0 <memcpy>:
 80166f0:	b510      	push	{r4, lr}
 80166f2:	1e43      	subs	r3, r0, #1
 80166f4:	440a      	add	r2, r1
 80166f6:	4291      	cmp	r1, r2
 80166f8:	d100      	bne.n	80166fc <memcpy+0xc>
 80166fa:	bd10      	pop	{r4, pc}
 80166fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016704:	e7f7      	b.n	80166f6 <memcpy+0x6>

08016706 <memset>:
 8016706:	4402      	add	r2, r0
 8016708:	4603      	mov	r3, r0
 801670a:	4293      	cmp	r3, r2
 801670c:	d100      	bne.n	8016710 <memset+0xa>
 801670e:	4770      	bx	lr
 8016710:	f803 1b01 	strb.w	r1, [r3], #1
 8016714:	e7f9      	b.n	801670a <memset+0x4>
	...

08016718 <_free_r>:
 8016718:	b538      	push	{r3, r4, r5, lr}
 801671a:	4605      	mov	r5, r0
 801671c:	2900      	cmp	r1, #0
 801671e:	d045      	beq.n	80167ac <_free_r+0x94>
 8016720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016724:	1f0c      	subs	r4, r1, #4
 8016726:	2b00      	cmp	r3, #0
 8016728:	bfb8      	it	lt
 801672a:	18e4      	addlt	r4, r4, r3
 801672c:	f000 f91a 	bl	8016964 <__malloc_lock>
 8016730:	4a1f      	ldr	r2, [pc, #124]	; (80167b0 <_free_r+0x98>)
 8016732:	6813      	ldr	r3, [r2, #0]
 8016734:	4610      	mov	r0, r2
 8016736:	b933      	cbnz	r3, 8016746 <_free_r+0x2e>
 8016738:	6063      	str	r3, [r4, #4]
 801673a:	6014      	str	r4, [r2, #0]
 801673c:	4628      	mov	r0, r5
 801673e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016742:	f000 b910 	b.w	8016966 <__malloc_unlock>
 8016746:	42a3      	cmp	r3, r4
 8016748:	d90c      	bls.n	8016764 <_free_r+0x4c>
 801674a:	6821      	ldr	r1, [r4, #0]
 801674c:	1862      	adds	r2, r4, r1
 801674e:	4293      	cmp	r3, r2
 8016750:	bf04      	itt	eq
 8016752:	681a      	ldreq	r2, [r3, #0]
 8016754:	685b      	ldreq	r3, [r3, #4]
 8016756:	6063      	str	r3, [r4, #4]
 8016758:	bf04      	itt	eq
 801675a:	1852      	addeq	r2, r2, r1
 801675c:	6022      	streq	r2, [r4, #0]
 801675e:	6004      	str	r4, [r0, #0]
 8016760:	e7ec      	b.n	801673c <_free_r+0x24>
 8016762:	4613      	mov	r3, r2
 8016764:	685a      	ldr	r2, [r3, #4]
 8016766:	b10a      	cbz	r2, 801676c <_free_r+0x54>
 8016768:	42a2      	cmp	r2, r4
 801676a:	d9fa      	bls.n	8016762 <_free_r+0x4a>
 801676c:	6819      	ldr	r1, [r3, #0]
 801676e:	1858      	adds	r0, r3, r1
 8016770:	42a0      	cmp	r0, r4
 8016772:	d10b      	bne.n	801678c <_free_r+0x74>
 8016774:	6820      	ldr	r0, [r4, #0]
 8016776:	4401      	add	r1, r0
 8016778:	1858      	adds	r0, r3, r1
 801677a:	4282      	cmp	r2, r0
 801677c:	6019      	str	r1, [r3, #0]
 801677e:	d1dd      	bne.n	801673c <_free_r+0x24>
 8016780:	6810      	ldr	r0, [r2, #0]
 8016782:	6852      	ldr	r2, [r2, #4]
 8016784:	605a      	str	r2, [r3, #4]
 8016786:	4401      	add	r1, r0
 8016788:	6019      	str	r1, [r3, #0]
 801678a:	e7d7      	b.n	801673c <_free_r+0x24>
 801678c:	d902      	bls.n	8016794 <_free_r+0x7c>
 801678e:	230c      	movs	r3, #12
 8016790:	602b      	str	r3, [r5, #0]
 8016792:	e7d3      	b.n	801673c <_free_r+0x24>
 8016794:	6820      	ldr	r0, [r4, #0]
 8016796:	1821      	adds	r1, r4, r0
 8016798:	428a      	cmp	r2, r1
 801679a:	bf04      	itt	eq
 801679c:	6811      	ldreq	r1, [r2, #0]
 801679e:	6852      	ldreq	r2, [r2, #4]
 80167a0:	6062      	str	r2, [r4, #4]
 80167a2:	bf04      	itt	eq
 80167a4:	1809      	addeq	r1, r1, r0
 80167a6:	6021      	streq	r1, [r4, #0]
 80167a8:	605c      	str	r4, [r3, #4]
 80167aa:	e7c7      	b.n	801673c <_free_r+0x24>
 80167ac:	bd38      	pop	{r3, r4, r5, pc}
 80167ae:	bf00      	nop
 80167b0:	2000886c 	.word	0x2000886c

080167b4 <_malloc_r>:
 80167b4:	b570      	push	{r4, r5, r6, lr}
 80167b6:	1ccd      	adds	r5, r1, #3
 80167b8:	f025 0503 	bic.w	r5, r5, #3
 80167bc:	3508      	adds	r5, #8
 80167be:	2d0c      	cmp	r5, #12
 80167c0:	bf38      	it	cc
 80167c2:	250c      	movcc	r5, #12
 80167c4:	2d00      	cmp	r5, #0
 80167c6:	4606      	mov	r6, r0
 80167c8:	db01      	blt.n	80167ce <_malloc_r+0x1a>
 80167ca:	42a9      	cmp	r1, r5
 80167cc:	d903      	bls.n	80167d6 <_malloc_r+0x22>
 80167ce:	230c      	movs	r3, #12
 80167d0:	6033      	str	r3, [r6, #0]
 80167d2:	2000      	movs	r0, #0
 80167d4:	bd70      	pop	{r4, r5, r6, pc}
 80167d6:	f000 f8c5 	bl	8016964 <__malloc_lock>
 80167da:	4a21      	ldr	r2, [pc, #132]	; (8016860 <_malloc_r+0xac>)
 80167dc:	6814      	ldr	r4, [r2, #0]
 80167de:	4621      	mov	r1, r4
 80167e0:	b991      	cbnz	r1, 8016808 <_malloc_r+0x54>
 80167e2:	4c20      	ldr	r4, [pc, #128]	; (8016864 <_malloc_r+0xb0>)
 80167e4:	6823      	ldr	r3, [r4, #0]
 80167e6:	b91b      	cbnz	r3, 80167f0 <_malloc_r+0x3c>
 80167e8:	4630      	mov	r0, r6
 80167ea:	f000 f83d 	bl	8016868 <_sbrk_r>
 80167ee:	6020      	str	r0, [r4, #0]
 80167f0:	4629      	mov	r1, r5
 80167f2:	4630      	mov	r0, r6
 80167f4:	f000 f838 	bl	8016868 <_sbrk_r>
 80167f8:	1c43      	adds	r3, r0, #1
 80167fa:	d124      	bne.n	8016846 <_malloc_r+0x92>
 80167fc:	230c      	movs	r3, #12
 80167fe:	6033      	str	r3, [r6, #0]
 8016800:	4630      	mov	r0, r6
 8016802:	f000 f8b0 	bl	8016966 <__malloc_unlock>
 8016806:	e7e4      	b.n	80167d2 <_malloc_r+0x1e>
 8016808:	680b      	ldr	r3, [r1, #0]
 801680a:	1b5b      	subs	r3, r3, r5
 801680c:	d418      	bmi.n	8016840 <_malloc_r+0x8c>
 801680e:	2b0b      	cmp	r3, #11
 8016810:	d90f      	bls.n	8016832 <_malloc_r+0x7e>
 8016812:	600b      	str	r3, [r1, #0]
 8016814:	50cd      	str	r5, [r1, r3]
 8016816:	18cc      	adds	r4, r1, r3
 8016818:	4630      	mov	r0, r6
 801681a:	f000 f8a4 	bl	8016966 <__malloc_unlock>
 801681e:	f104 000b 	add.w	r0, r4, #11
 8016822:	1d23      	adds	r3, r4, #4
 8016824:	f020 0007 	bic.w	r0, r0, #7
 8016828:	1ac3      	subs	r3, r0, r3
 801682a:	d0d3      	beq.n	80167d4 <_malloc_r+0x20>
 801682c:	425a      	negs	r2, r3
 801682e:	50e2      	str	r2, [r4, r3]
 8016830:	e7d0      	b.n	80167d4 <_malloc_r+0x20>
 8016832:	428c      	cmp	r4, r1
 8016834:	684b      	ldr	r3, [r1, #4]
 8016836:	bf16      	itet	ne
 8016838:	6063      	strne	r3, [r4, #4]
 801683a:	6013      	streq	r3, [r2, #0]
 801683c:	460c      	movne	r4, r1
 801683e:	e7eb      	b.n	8016818 <_malloc_r+0x64>
 8016840:	460c      	mov	r4, r1
 8016842:	6849      	ldr	r1, [r1, #4]
 8016844:	e7cc      	b.n	80167e0 <_malloc_r+0x2c>
 8016846:	1cc4      	adds	r4, r0, #3
 8016848:	f024 0403 	bic.w	r4, r4, #3
 801684c:	42a0      	cmp	r0, r4
 801684e:	d005      	beq.n	801685c <_malloc_r+0xa8>
 8016850:	1a21      	subs	r1, r4, r0
 8016852:	4630      	mov	r0, r6
 8016854:	f000 f808 	bl	8016868 <_sbrk_r>
 8016858:	3001      	adds	r0, #1
 801685a:	d0cf      	beq.n	80167fc <_malloc_r+0x48>
 801685c:	6025      	str	r5, [r4, #0]
 801685e:	e7db      	b.n	8016818 <_malloc_r+0x64>
 8016860:	2000886c 	.word	0x2000886c
 8016864:	20008870 	.word	0x20008870

08016868 <_sbrk_r>:
 8016868:	b538      	push	{r3, r4, r5, lr}
 801686a:	4c06      	ldr	r4, [pc, #24]	; (8016884 <_sbrk_r+0x1c>)
 801686c:	2300      	movs	r3, #0
 801686e:	4605      	mov	r5, r0
 8016870:	4608      	mov	r0, r1
 8016872:	6023      	str	r3, [r4, #0]
 8016874:	f7ec fb16 	bl	8002ea4 <_sbrk>
 8016878:	1c43      	adds	r3, r0, #1
 801687a:	d102      	bne.n	8016882 <_sbrk_r+0x1a>
 801687c:	6823      	ldr	r3, [r4, #0]
 801687e:	b103      	cbz	r3, 8016882 <_sbrk_r+0x1a>
 8016880:	602b      	str	r3, [r5, #0]
 8016882:	bd38      	pop	{r3, r4, r5, pc}
 8016884:	200170bc 	.word	0x200170bc

08016888 <sniprintf>:
 8016888:	b40c      	push	{r2, r3}
 801688a:	b530      	push	{r4, r5, lr}
 801688c:	4b17      	ldr	r3, [pc, #92]	; (80168ec <sniprintf+0x64>)
 801688e:	1e0c      	subs	r4, r1, #0
 8016890:	b09d      	sub	sp, #116	; 0x74
 8016892:	681d      	ldr	r5, [r3, #0]
 8016894:	da08      	bge.n	80168a8 <sniprintf+0x20>
 8016896:	238b      	movs	r3, #139	; 0x8b
 8016898:	602b      	str	r3, [r5, #0]
 801689a:	f04f 30ff 	mov.w	r0, #4294967295
 801689e:	b01d      	add	sp, #116	; 0x74
 80168a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80168a4:	b002      	add	sp, #8
 80168a6:	4770      	bx	lr
 80168a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80168ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80168b0:	bf14      	ite	ne
 80168b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80168b6:	4623      	moveq	r3, r4
 80168b8:	9304      	str	r3, [sp, #16]
 80168ba:	9307      	str	r3, [sp, #28]
 80168bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80168c0:	9002      	str	r0, [sp, #8]
 80168c2:	9006      	str	r0, [sp, #24]
 80168c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80168c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80168ca:	ab21      	add	r3, sp, #132	; 0x84
 80168cc:	a902      	add	r1, sp, #8
 80168ce:	4628      	mov	r0, r5
 80168d0:	9301      	str	r3, [sp, #4]
 80168d2:	f000 f8a3 	bl	8016a1c <_svfiprintf_r>
 80168d6:	1c43      	adds	r3, r0, #1
 80168d8:	bfbc      	itt	lt
 80168da:	238b      	movlt	r3, #139	; 0x8b
 80168dc:	602b      	strlt	r3, [r5, #0]
 80168de:	2c00      	cmp	r4, #0
 80168e0:	d0dd      	beq.n	801689e <sniprintf+0x16>
 80168e2:	9b02      	ldr	r3, [sp, #8]
 80168e4:	2200      	movs	r2, #0
 80168e6:	701a      	strb	r2, [r3, #0]
 80168e8:	e7d9      	b.n	801689e <sniprintf+0x16>
 80168ea:	bf00      	nop
 80168ec:	20000194 	.word	0x20000194

080168f0 <_vsniprintf_r>:
 80168f0:	b530      	push	{r4, r5, lr}
 80168f2:	1e14      	subs	r4, r2, #0
 80168f4:	4605      	mov	r5, r0
 80168f6:	b09b      	sub	sp, #108	; 0x6c
 80168f8:	4618      	mov	r0, r3
 80168fa:	da05      	bge.n	8016908 <_vsniprintf_r+0x18>
 80168fc:	238b      	movs	r3, #139	; 0x8b
 80168fe:	602b      	str	r3, [r5, #0]
 8016900:	f04f 30ff 	mov.w	r0, #4294967295
 8016904:	b01b      	add	sp, #108	; 0x6c
 8016906:	bd30      	pop	{r4, r5, pc}
 8016908:	f44f 7302 	mov.w	r3, #520	; 0x208
 801690c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016910:	bf14      	ite	ne
 8016912:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016916:	4623      	moveq	r3, r4
 8016918:	9302      	str	r3, [sp, #8]
 801691a:	9305      	str	r3, [sp, #20]
 801691c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016920:	9100      	str	r1, [sp, #0]
 8016922:	9104      	str	r1, [sp, #16]
 8016924:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016928:	4602      	mov	r2, r0
 801692a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801692c:	4669      	mov	r1, sp
 801692e:	4628      	mov	r0, r5
 8016930:	f000 f874 	bl	8016a1c <_svfiprintf_r>
 8016934:	1c43      	adds	r3, r0, #1
 8016936:	bfbc      	itt	lt
 8016938:	238b      	movlt	r3, #139	; 0x8b
 801693a:	602b      	strlt	r3, [r5, #0]
 801693c:	2c00      	cmp	r4, #0
 801693e:	d0e1      	beq.n	8016904 <_vsniprintf_r+0x14>
 8016940:	9b00      	ldr	r3, [sp, #0]
 8016942:	2200      	movs	r2, #0
 8016944:	701a      	strb	r2, [r3, #0]
 8016946:	e7dd      	b.n	8016904 <_vsniprintf_r+0x14>

08016948 <vsniprintf>:
 8016948:	b507      	push	{r0, r1, r2, lr}
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	4613      	mov	r3, r2
 801694e:	460a      	mov	r2, r1
 8016950:	4601      	mov	r1, r0
 8016952:	4803      	ldr	r0, [pc, #12]	; (8016960 <vsniprintf+0x18>)
 8016954:	6800      	ldr	r0, [r0, #0]
 8016956:	f7ff ffcb 	bl	80168f0 <_vsniprintf_r>
 801695a:	b003      	add	sp, #12
 801695c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016960:	20000194 	.word	0x20000194

08016964 <__malloc_lock>:
 8016964:	4770      	bx	lr

08016966 <__malloc_unlock>:
 8016966:	4770      	bx	lr

08016968 <__ssputs_r>:
 8016968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801696c:	688e      	ldr	r6, [r1, #8]
 801696e:	429e      	cmp	r6, r3
 8016970:	4682      	mov	sl, r0
 8016972:	460c      	mov	r4, r1
 8016974:	4690      	mov	r8, r2
 8016976:	4699      	mov	r9, r3
 8016978:	d837      	bhi.n	80169ea <__ssputs_r+0x82>
 801697a:	898a      	ldrh	r2, [r1, #12]
 801697c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016980:	d031      	beq.n	80169e6 <__ssputs_r+0x7e>
 8016982:	6825      	ldr	r5, [r4, #0]
 8016984:	6909      	ldr	r1, [r1, #16]
 8016986:	1a6f      	subs	r7, r5, r1
 8016988:	6965      	ldr	r5, [r4, #20]
 801698a:	2302      	movs	r3, #2
 801698c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016990:	fb95 f5f3 	sdiv	r5, r5, r3
 8016994:	f109 0301 	add.w	r3, r9, #1
 8016998:	443b      	add	r3, r7
 801699a:	429d      	cmp	r5, r3
 801699c:	bf38      	it	cc
 801699e:	461d      	movcc	r5, r3
 80169a0:	0553      	lsls	r3, r2, #21
 80169a2:	d530      	bpl.n	8016a06 <__ssputs_r+0x9e>
 80169a4:	4629      	mov	r1, r5
 80169a6:	f7ff ff05 	bl	80167b4 <_malloc_r>
 80169aa:	4606      	mov	r6, r0
 80169ac:	b950      	cbnz	r0, 80169c4 <__ssputs_r+0x5c>
 80169ae:	230c      	movs	r3, #12
 80169b0:	f8ca 3000 	str.w	r3, [sl]
 80169b4:	89a3      	ldrh	r3, [r4, #12]
 80169b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169ba:	81a3      	strh	r3, [r4, #12]
 80169bc:	f04f 30ff 	mov.w	r0, #4294967295
 80169c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169c4:	463a      	mov	r2, r7
 80169c6:	6921      	ldr	r1, [r4, #16]
 80169c8:	f7ff fe92 	bl	80166f0 <memcpy>
 80169cc:	89a3      	ldrh	r3, [r4, #12]
 80169ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80169d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169d6:	81a3      	strh	r3, [r4, #12]
 80169d8:	6126      	str	r6, [r4, #16]
 80169da:	6165      	str	r5, [r4, #20]
 80169dc:	443e      	add	r6, r7
 80169de:	1bed      	subs	r5, r5, r7
 80169e0:	6026      	str	r6, [r4, #0]
 80169e2:	60a5      	str	r5, [r4, #8]
 80169e4:	464e      	mov	r6, r9
 80169e6:	454e      	cmp	r6, r9
 80169e8:	d900      	bls.n	80169ec <__ssputs_r+0x84>
 80169ea:	464e      	mov	r6, r9
 80169ec:	4632      	mov	r2, r6
 80169ee:	4641      	mov	r1, r8
 80169f0:	6820      	ldr	r0, [r4, #0]
 80169f2:	f000 fa93 	bl	8016f1c <memmove>
 80169f6:	68a3      	ldr	r3, [r4, #8]
 80169f8:	1b9b      	subs	r3, r3, r6
 80169fa:	60a3      	str	r3, [r4, #8]
 80169fc:	6823      	ldr	r3, [r4, #0]
 80169fe:	441e      	add	r6, r3
 8016a00:	6026      	str	r6, [r4, #0]
 8016a02:	2000      	movs	r0, #0
 8016a04:	e7dc      	b.n	80169c0 <__ssputs_r+0x58>
 8016a06:	462a      	mov	r2, r5
 8016a08:	f000 faa1 	bl	8016f4e <_realloc_r>
 8016a0c:	4606      	mov	r6, r0
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	d1e2      	bne.n	80169d8 <__ssputs_r+0x70>
 8016a12:	6921      	ldr	r1, [r4, #16]
 8016a14:	4650      	mov	r0, sl
 8016a16:	f7ff fe7f 	bl	8016718 <_free_r>
 8016a1a:	e7c8      	b.n	80169ae <__ssputs_r+0x46>

08016a1c <_svfiprintf_r>:
 8016a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a20:	461d      	mov	r5, r3
 8016a22:	898b      	ldrh	r3, [r1, #12]
 8016a24:	061f      	lsls	r7, r3, #24
 8016a26:	b09d      	sub	sp, #116	; 0x74
 8016a28:	4680      	mov	r8, r0
 8016a2a:	460c      	mov	r4, r1
 8016a2c:	4616      	mov	r6, r2
 8016a2e:	d50f      	bpl.n	8016a50 <_svfiprintf_r+0x34>
 8016a30:	690b      	ldr	r3, [r1, #16]
 8016a32:	b96b      	cbnz	r3, 8016a50 <_svfiprintf_r+0x34>
 8016a34:	2140      	movs	r1, #64	; 0x40
 8016a36:	f7ff febd 	bl	80167b4 <_malloc_r>
 8016a3a:	6020      	str	r0, [r4, #0]
 8016a3c:	6120      	str	r0, [r4, #16]
 8016a3e:	b928      	cbnz	r0, 8016a4c <_svfiprintf_r+0x30>
 8016a40:	230c      	movs	r3, #12
 8016a42:	f8c8 3000 	str.w	r3, [r8]
 8016a46:	f04f 30ff 	mov.w	r0, #4294967295
 8016a4a:	e0c8      	b.n	8016bde <_svfiprintf_r+0x1c2>
 8016a4c:	2340      	movs	r3, #64	; 0x40
 8016a4e:	6163      	str	r3, [r4, #20]
 8016a50:	2300      	movs	r3, #0
 8016a52:	9309      	str	r3, [sp, #36]	; 0x24
 8016a54:	2320      	movs	r3, #32
 8016a56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a5a:	2330      	movs	r3, #48	; 0x30
 8016a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a60:	9503      	str	r5, [sp, #12]
 8016a62:	f04f 0b01 	mov.w	fp, #1
 8016a66:	4637      	mov	r7, r6
 8016a68:	463d      	mov	r5, r7
 8016a6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016a6e:	b10b      	cbz	r3, 8016a74 <_svfiprintf_r+0x58>
 8016a70:	2b25      	cmp	r3, #37	; 0x25
 8016a72:	d13e      	bne.n	8016af2 <_svfiprintf_r+0xd6>
 8016a74:	ebb7 0a06 	subs.w	sl, r7, r6
 8016a78:	d00b      	beq.n	8016a92 <_svfiprintf_r+0x76>
 8016a7a:	4653      	mov	r3, sl
 8016a7c:	4632      	mov	r2, r6
 8016a7e:	4621      	mov	r1, r4
 8016a80:	4640      	mov	r0, r8
 8016a82:	f7ff ff71 	bl	8016968 <__ssputs_r>
 8016a86:	3001      	adds	r0, #1
 8016a88:	f000 80a4 	beq.w	8016bd4 <_svfiprintf_r+0x1b8>
 8016a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a8e:	4453      	add	r3, sl
 8016a90:	9309      	str	r3, [sp, #36]	; 0x24
 8016a92:	783b      	ldrb	r3, [r7, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	f000 809d 	beq.w	8016bd4 <_svfiprintf_r+0x1b8>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8016aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016aa4:	9304      	str	r3, [sp, #16]
 8016aa6:	9307      	str	r3, [sp, #28]
 8016aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016aac:	931a      	str	r3, [sp, #104]	; 0x68
 8016aae:	462f      	mov	r7, r5
 8016ab0:	2205      	movs	r2, #5
 8016ab2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016ab6:	4850      	ldr	r0, [pc, #320]	; (8016bf8 <_svfiprintf_r+0x1dc>)
 8016ab8:	f7e9 fbb2 	bl	8000220 <memchr>
 8016abc:	9b04      	ldr	r3, [sp, #16]
 8016abe:	b9d0      	cbnz	r0, 8016af6 <_svfiprintf_r+0xda>
 8016ac0:	06d9      	lsls	r1, r3, #27
 8016ac2:	bf44      	itt	mi
 8016ac4:	2220      	movmi	r2, #32
 8016ac6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016aca:	071a      	lsls	r2, r3, #28
 8016acc:	bf44      	itt	mi
 8016ace:	222b      	movmi	r2, #43	; 0x2b
 8016ad0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ad4:	782a      	ldrb	r2, [r5, #0]
 8016ad6:	2a2a      	cmp	r2, #42	; 0x2a
 8016ad8:	d015      	beq.n	8016b06 <_svfiprintf_r+0xea>
 8016ada:	9a07      	ldr	r2, [sp, #28]
 8016adc:	462f      	mov	r7, r5
 8016ade:	2000      	movs	r0, #0
 8016ae0:	250a      	movs	r5, #10
 8016ae2:	4639      	mov	r1, r7
 8016ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ae8:	3b30      	subs	r3, #48	; 0x30
 8016aea:	2b09      	cmp	r3, #9
 8016aec:	d94d      	bls.n	8016b8a <_svfiprintf_r+0x16e>
 8016aee:	b1b8      	cbz	r0, 8016b20 <_svfiprintf_r+0x104>
 8016af0:	e00f      	b.n	8016b12 <_svfiprintf_r+0xf6>
 8016af2:	462f      	mov	r7, r5
 8016af4:	e7b8      	b.n	8016a68 <_svfiprintf_r+0x4c>
 8016af6:	4a40      	ldr	r2, [pc, #256]	; (8016bf8 <_svfiprintf_r+0x1dc>)
 8016af8:	1a80      	subs	r0, r0, r2
 8016afa:	fa0b f000 	lsl.w	r0, fp, r0
 8016afe:	4318      	orrs	r0, r3
 8016b00:	9004      	str	r0, [sp, #16]
 8016b02:	463d      	mov	r5, r7
 8016b04:	e7d3      	b.n	8016aae <_svfiprintf_r+0x92>
 8016b06:	9a03      	ldr	r2, [sp, #12]
 8016b08:	1d11      	adds	r1, r2, #4
 8016b0a:	6812      	ldr	r2, [r2, #0]
 8016b0c:	9103      	str	r1, [sp, #12]
 8016b0e:	2a00      	cmp	r2, #0
 8016b10:	db01      	blt.n	8016b16 <_svfiprintf_r+0xfa>
 8016b12:	9207      	str	r2, [sp, #28]
 8016b14:	e004      	b.n	8016b20 <_svfiprintf_r+0x104>
 8016b16:	4252      	negs	r2, r2
 8016b18:	f043 0302 	orr.w	r3, r3, #2
 8016b1c:	9207      	str	r2, [sp, #28]
 8016b1e:	9304      	str	r3, [sp, #16]
 8016b20:	783b      	ldrb	r3, [r7, #0]
 8016b22:	2b2e      	cmp	r3, #46	; 0x2e
 8016b24:	d10c      	bne.n	8016b40 <_svfiprintf_r+0x124>
 8016b26:	787b      	ldrb	r3, [r7, #1]
 8016b28:	2b2a      	cmp	r3, #42	; 0x2a
 8016b2a:	d133      	bne.n	8016b94 <_svfiprintf_r+0x178>
 8016b2c:	9b03      	ldr	r3, [sp, #12]
 8016b2e:	1d1a      	adds	r2, r3, #4
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	9203      	str	r2, [sp, #12]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	bfb8      	it	lt
 8016b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b3c:	3702      	adds	r7, #2
 8016b3e:	9305      	str	r3, [sp, #20]
 8016b40:	4d2e      	ldr	r5, [pc, #184]	; (8016bfc <_svfiprintf_r+0x1e0>)
 8016b42:	7839      	ldrb	r1, [r7, #0]
 8016b44:	2203      	movs	r2, #3
 8016b46:	4628      	mov	r0, r5
 8016b48:	f7e9 fb6a 	bl	8000220 <memchr>
 8016b4c:	b138      	cbz	r0, 8016b5e <_svfiprintf_r+0x142>
 8016b4e:	2340      	movs	r3, #64	; 0x40
 8016b50:	1b40      	subs	r0, r0, r5
 8016b52:	fa03 f000 	lsl.w	r0, r3, r0
 8016b56:	9b04      	ldr	r3, [sp, #16]
 8016b58:	4303      	orrs	r3, r0
 8016b5a:	3701      	adds	r7, #1
 8016b5c:	9304      	str	r3, [sp, #16]
 8016b5e:	7839      	ldrb	r1, [r7, #0]
 8016b60:	4827      	ldr	r0, [pc, #156]	; (8016c00 <_svfiprintf_r+0x1e4>)
 8016b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b66:	2206      	movs	r2, #6
 8016b68:	1c7e      	adds	r6, r7, #1
 8016b6a:	f7e9 fb59 	bl	8000220 <memchr>
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	d038      	beq.n	8016be4 <_svfiprintf_r+0x1c8>
 8016b72:	4b24      	ldr	r3, [pc, #144]	; (8016c04 <_svfiprintf_r+0x1e8>)
 8016b74:	bb13      	cbnz	r3, 8016bbc <_svfiprintf_r+0x1a0>
 8016b76:	9b03      	ldr	r3, [sp, #12]
 8016b78:	3307      	adds	r3, #7
 8016b7a:	f023 0307 	bic.w	r3, r3, #7
 8016b7e:	3308      	adds	r3, #8
 8016b80:	9303      	str	r3, [sp, #12]
 8016b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b84:	444b      	add	r3, r9
 8016b86:	9309      	str	r3, [sp, #36]	; 0x24
 8016b88:	e76d      	b.n	8016a66 <_svfiprintf_r+0x4a>
 8016b8a:	fb05 3202 	mla	r2, r5, r2, r3
 8016b8e:	2001      	movs	r0, #1
 8016b90:	460f      	mov	r7, r1
 8016b92:	e7a6      	b.n	8016ae2 <_svfiprintf_r+0xc6>
 8016b94:	2300      	movs	r3, #0
 8016b96:	3701      	adds	r7, #1
 8016b98:	9305      	str	r3, [sp, #20]
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	250a      	movs	r5, #10
 8016b9e:	4638      	mov	r0, r7
 8016ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ba4:	3a30      	subs	r2, #48	; 0x30
 8016ba6:	2a09      	cmp	r2, #9
 8016ba8:	d903      	bls.n	8016bb2 <_svfiprintf_r+0x196>
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d0c8      	beq.n	8016b40 <_svfiprintf_r+0x124>
 8016bae:	9105      	str	r1, [sp, #20]
 8016bb0:	e7c6      	b.n	8016b40 <_svfiprintf_r+0x124>
 8016bb2:	fb05 2101 	mla	r1, r5, r1, r2
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	4607      	mov	r7, r0
 8016bba:	e7f0      	b.n	8016b9e <_svfiprintf_r+0x182>
 8016bbc:	ab03      	add	r3, sp, #12
 8016bbe:	9300      	str	r3, [sp, #0]
 8016bc0:	4622      	mov	r2, r4
 8016bc2:	4b11      	ldr	r3, [pc, #68]	; (8016c08 <_svfiprintf_r+0x1ec>)
 8016bc4:	a904      	add	r1, sp, #16
 8016bc6:	4640      	mov	r0, r8
 8016bc8:	f3af 8000 	nop.w
 8016bcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016bd0:	4681      	mov	r9, r0
 8016bd2:	d1d6      	bne.n	8016b82 <_svfiprintf_r+0x166>
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	065b      	lsls	r3, r3, #25
 8016bd8:	f53f af35 	bmi.w	8016a46 <_svfiprintf_r+0x2a>
 8016bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bde:	b01d      	add	sp, #116	; 0x74
 8016be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016be4:	ab03      	add	r3, sp, #12
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	4622      	mov	r2, r4
 8016bea:	4b07      	ldr	r3, [pc, #28]	; (8016c08 <_svfiprintf_r+0x1ec>)
 8016bec:	a904      	add	r1, sp, #16
 8016bee:	4640      	mov	r0, r8
 8016bf0:	f000 f882 	bl	8016cf8 <_printf_i>
 8016bf4:	e7ea      	b.n	8016bcc <_svfiprintf_r+0x1b0>
 8016bf6:	bf00      	nop
 8016bf8:	080188bc 	.word	0x080188bc
 8016bfc:	080188c2 	.word	0x080188c2
 8016c00:	080188c6 	.word	0x080188c6
 8016c04:	00000000 	.word	0x00000000
 8016c08:	08016969 	.word	0x08016969

08016c0c <_printf_common>:
 8016c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c10:	4691      	mov	r9, r2
 8016c12:	461f      	mov	r7, r3
 8016c14:	688a      	ldr	r2, [r1, #8]
 8016c16:	690b      	ldr	r3, [r1, #16]
 8016c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c1c:	4293      	cmp	r3, r2
 8016c1e:	bfb8      	it	lt
 8016c20:	4613      	movlt	r3, r2
 8016c22:	f8c9 3000 	str.w	r3, [r9]
 8016c26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c2a:	4606      	mov	r6, r0
 8016c2c:	460c      	mov	r4, r1
 8016c2e:	b112      	cbz	r2, 8016c36 <_printf_common+0x2a>
 8016c30:	3301      	adds	r3, #1
 8016c32:	f8c9 3000 	str.w	r3, [r9]
 8016c36:	6823      	ldr	r3, [r4, #0]
 8016c38:	0699      	lsls	r1, r3, #26
 8016c3a:	bf42      	ittt	mi
 8016c3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016c40:	3302      	addmi	r3, #2
 8016c42:	f8c9 3000 	strmi.w	r3, [r9]
 8016c46:	6825      	ldr	r5, [r4, #0]
 8016c48:	f015 0506 	ands.w	r5, r5, #6
 8016c4c:	d107      	bne.n	8016c5e <_printf_common+0x52>
 8016c4e:	f104 0a19 	add.w	sl, r4, #25
 8016c52:	68e3      	ldr	r3, [r4, #12]
 8016c54:	f8d9 2000 	ldr.w	r2, [r9]
 8016c58:	1a9b      	subs	r3, r3, r2
 8016c5a:	42ab      	cmp	r3, r5
 8016c5c:	dc28      	bgt.n	8016cb0 <_printf_common+0xa4>
 8016c5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016c62:	6822      	ldr	r2, [r4, #0]
 8016c64:	3300      	adds	r3, #0
 8016c66:	bf18      	it	ne
 8016c68:	2301      	movne	r3, #1
 8016c6a:	0692      	lsls	r2, r2, #26
 8016c6c:	d42d      	bmi.n	8016cca <_printf_common+0xbe>
 8016c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c72:	4639      	mov	r1, r7
 8016c74:	4630      	mov	r0, r6
 8016c76:	47c0      	blx	r8
 8016c78:	3001      	adds	r0, #1
 8016c7a:	d020      	beq.n	8016cbe <_printf_common+0xb2>
 8016c7c:	6823      	ldr	r3, [r4, #0]
 8016c7e:	68e5      	ldr	r5, [r4, #12]
 8016c80:	f8d9 2000 	ldr.w	r2, [r9]
 8016c84:	f003 0306 	and.w	r3, r3, #6
 8016c88:	2b04      	cmp	r3, #4
 8016c8a:	bf08      	it	eq
 8016c8c:	1aad      	subeq	r5, r5, r2
 8016c8e:	68a3      	ldr	r3, [r4, #8]
 8016c90:	6922      	ldr	r2, [r4, #16]
 8016c92:	bf0c      	ite	eq
 8016c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c98:	2500      	movne	r5, #0
 8016c9a:	4293      	cmp	r3, r2
 8016c9c:	bfc4      	itt	gt
 8016c9e:	1a9b      	subgt	r3, r3, r2
 8016ca0:	18ed      	addgt	r5, r5, r3
 8016ca2:	f04f 0900 	mov.w	r9, #0
 8016ca6:	341a      	adds	r4, #26
 8016ca8:	454d      	cmp	r5, r9
 8016caa:	d11a      	bne.n	8016ce2 <_printf_common+0xd6>
 8016cac:	2000      	movs	r0, #0
 8016cae:	e008      	b.n	8016cc2 <_printf_common+0xb6>
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	4652      	mov	r2, sl
 8016cb4:	4639      	mov	r1, r7
 8016cb6:	4630      	mov	r0, r6
 8016cb8:	47c0      	blx	r8
 8016cba:	3001      	adds	r0, #1
 8016cbc:	d103      	bne.n	8016cc6 <_printf_common+0xba>
 8016cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cc6:	3501      	adds	r5, #1
 8016cc8:	e7c3      	b.n	8016c52 <_printf_common+0x46>
 8016cca:	18e1      	adds	r1, r4, r3
 8016ccc:	1c5a      	adds	r2, r3, #1
 8016cce:	2030      	movs	r0, #48	; 0x30
 8016cd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016cd4:	4422      	add	r2, r4
 8016cd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016cda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016cde:	3302      	adds	r3, #2
 8016ce0:	e7c5      	b.n	8016c6e <_printf_common+0x62>
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	4622      	mov	r2, r4
 8016ce6:	4639      	mov	r1, r7
 8016ce8:	4630      	mov	r0, r6
 8016cea:	47c0      	blx	r8
 8016cec:	3001      	adds	r0, #1
 8016cee:	d0e6      	beq.n	8016cbe <_printf_common+0xb2>
 8016cf0:	f109 0901 	add.w	r9, r9, #1
 8016cf4:	e7d8      	b.n	8016ca8 <_printf_common+0x9c>
	...

08016cf8 <_printf_i>:
 8016cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016cfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016d00:	460c      	mov	r4, r1
 8016d02:	7e09      	ldrb	r1, [r1, #24]
 8016d04:	b085      	sub	sp, #20
 8016d06:	296e      	cmp	r1, #110	; 0x6e
 8016d08:	4617      	mov	r7, r2
 8016d0a:	4606      	mov	r6, r0
 8016d0c:	4698      	mov	r8, r3
 8016d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d10:	f000 80b3 	beq.w	8016e7a <_printf_i+0x182>
 8016d14:	d822      	bhi.n	8016d5c <_printf_i+0x64>
 8016d16:	2963      	cmp	r1, #99	; 0x63
 8016d18:	d036      	beq.n	8016d88 <_printf_i+0x90>
 8016d1a:	d80a      	bhi.n	8016d32 <_printf_i+0x3a>
 8016d1c:	2900      	cmp	r1, #0
 8016d1e:	f000 80b9 	beq.w	8016e94 <_printf_i+0x19c>
 8016d22:	2958      	cmp	r1, #88	; 0x58
 8016d24:	f000 8083 	beq.w	8016e2e <_printf_i+0x136>
 8016d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016d30:	e032      	b.n	8016d98 <_printf_i+0xa0>
 8016d32:	2964      	cmp	r1, #100	; 0x64
 8016d34:	d001      	beq.n	8016d3a <_printf_i+0x42>
 8016d36:	2969      	cmp	r1, #105	; 0x69
 8016d38:	d1f6      	bne.n	8016d28 <_printf_i+0x30>
 8016d3a:	6820      	ldr	r0, [r4, #0]
 8016d3c:	6813      	ldr	r3, [r2, #0]
 8016d3e:	0605      	lsls	r5, r0, #24
 8016d40:	f103 0104 	add.w	r1, r3, #4
 8016d44:	d52a      	bpl.n	8016d9c <_printf_i+0xa4>
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	6011      	str	r1, [r2, #0]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	da03      	bge.n	8016d56 <_printf_i+0x5e>
 8016d4e:	222d      	movs	r2, #45	; 0x2d
 8016d50:	425b      	negs	r3, r3
 8016d52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016d56:	486f      	ldr	r0, [pc, #444]	; (8016f14 <_printf_i+0x21c>)
 8016d58:	220a      	movs	r2, #10
 8016d5a:	e039      	b.n	8016dd0 <_printf_i+0xd8>
 8016d5c:	2973      	cmp	r1, #115	; 0x73
 8016d5e:	f000 809d 	beq.w	8016e9c <_printf_i+0x1a4>
 8016d62:	d808      	bhi.n	8016d76 <_printf_i+0x7e>
 8016d64:	296f      	cmp	r1, #111	; 0x6f
 8016d66:	d020      	beq.n	8016daa <_printf_i+0xb2>
 8016d68:	2970      	cmp	r1, #112	; 0x70
 8016d6a:	d1dd      	bne.n	8016d28 <_printf_i+0x30>
 8016d6c:	6823      	ldr	r3, [r4, #0]
 8016d6e:	f043 0320 	orr.w	r3, r3, #32
 8016d72:	6023      	str	r3, [r4, #0]
 8016d74:	e003      	b.n	8016d7e <_printf_i+0x86>
 8016d76:	2975      	cmp	r1, #117	; 0x75
 8016d78:	d017      	beq.n	8016daa <_printf_i+0xb2>
 8016d7a:	2978      	cmp	r1, #120	; 0x78
 8016d7c:	d1d4      	bne.n	8016d28 <_printf_i+0x30>
 8016d7e:	2378      	movs	r3, #120	; 0x78
 8016d80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016d84:	4864      	ldr	r0, [pc, #400]	; (8016f18 <_printf_i+0x220>)
 8016d86:	e055      	b.n	8016e34 <_printf_i+0x13c>
 8016d88:	6813      	ldr	r3, [r2, #0]
 8016d8a:	1d19      	adds	r1, r3, #4
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	6011      	str	r1, [r2, #0]
 8016d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d98:	2301      	movs	r3, #1
 8016d9a:	e08c      	b.n	8016eb6 <_printf_i+0x1be>
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	6011      	str	r1, [r2, #0]
 8016da0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016da4:	bf18      	it	ne
 8016da6:	b21b      	sxthne	r3, r3
 8016da8:	e7cf      	b.n	8016d4a <_printf_i+0x52>
 8016daa:	6813      	ldr	r3, [r2, #0]
 8016dac:	6825      	ldr	r5, [r4, #0]
 8016dae:	1d18      	adds	r0, r3, #4
 8016db0:	6010      	str	r0, [r2, #0]
 8016db2:	0628      	lsls	r0, r5, #24
 8016db4:	d501      	bpl.n	8016dba <_printf_i+0xc2>
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	e002      	b.n	8016dc0 <_printf_i+0xc8>
 8016dba:	0668      	lsls	r0, r5, #25
 8016dbc:	d5fb      	bpl.n	8016db6 <_printf_i+0xbe>
 8016dbe:	881b      	ldrh	r3, [r3, #0]
 8016dc0:	4854      	ldr	r0, [pc, #336]	; (8016f14 <_printf_i+0x21c>)
 8016dc2:	296f      	cmp	r1, #111	; 0x6f
 8016dc4:	bf14      	ite	ne
 8016dc6:	220a      	movne	r2, #10
 8016dc8:	2208      	moveq	r2, #8
 8016dca:	2100      	movs	r1, #0
 8016dcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016dd0:	6865      	ldr	r5, [r4, #4]
 8016dd2:	60a5      	str	r5, [r4, #8]
 8016dd4:	2d00      	cmp	r5, #0
 8016dd6:	f2c0 8095 	blt.w	8016f04 <_printf_i+0x20c>
 8016dda:	6821      	ldr	r1, [r4, #0]
 8016ddc:	f021 0104 	bic.w	r1, r1, #4
 8016de0:	6021      	str	r1, [r4, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d13d      	bne.n	8016e62 <_printf_i+0x16a>
 8016de6:	2d00      	cmp	r5, #0
 8016de8:	f040 808e 	bne.w	8016f08 <_printf_i+0x210>
 8016dec:	4665      	mov	r5, ip
 8016dee:	2a08      	cmp	r2, #8
 8016df0:	d10b      	bne.n	8016e0a <_printf_i+0x112>
 8016df2:	6823      	ldr	r3, [r4, #0]
 8016df4:	07db      	lsls	r3, r3, #31
 8016df6:	d508      	bpl.n	8016e0a <_printf_i+0x112>
 8016df8:	6923      	ldr	r3, [r4, #16]
 8016dfa:	6862      	ldr	r2, [r4, #4]
 8016dfc:	429a      	cmp	r2, r3
 8016dfe:	bfde      	ittt	le
 8016e00:	2330      	movle	r3, #48	; 0x30
 8016e02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016e06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016e0a:	ebac 0305 	sub.w	r3, ip, r5
 8016e0e:	6123      	str	r3, [r4, #16]
 8016e10:	f8cd 8000 	str.w	r8, [sp]
 8016e14:	463b      	mov	r3, r7
 8016e16:	aa03      	add	r2, sp, #12
 8016e18:	4621      	mov	r1, r4
 8016e1a:	4630      	mov	r0, r6
 8016e1c:	f7ff fef6 	bl	8016c0c <_printf_common>
 8016e20:	3001      	adds	r0, #1
 8016e22:	d14d      	bne.n	8016ec0 <_printf_i+0x1c8>
 8016e24:	f04f 30ff 	mov.w	r0, #4294967295
 8016e28:	b005      	add	sp, #20
 8016e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e2e:	4839      	ldr	r0, [pc, #228]	; (8016f14 <_printf_i+0x21c>)
 8016e30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016e34:	6813      	ldr	r3, [r2, #0]
 8016e36:	6821      	ldr	r1, [r4, #0]
 8016e38:	1d1d      	adds	r5, r3, #4
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	6015      	str	r5, [r2, #0]
 8016e3e:	060a      	lsls	r2, r1, #24
 8016e40:	d50b      	bpl.n	8016e5a <_printf_i+0x162>
 8016e42:	07ca      	lsls	r2, r1, #31
 8016e44:	bf44      	itt	mi
 8016e46:	f041 0120 	orrmi.w	r1, r1, #32
 8016e4a:	6021      	strmi	r1, [r4, #0]
 8016e4c:	b91b      	cbnz	r3, 8016e56 <_printf_i+0x15e>
 8016e4e:	6822      	ldr	r2, [r4, #0]
 8016e50:	f022 0220 	bic.w	r2, r2, #32
 8016e54:	6022      	str	r2, [r4, #0]
 8016e56:	2210      	movs	r2, #16
 8016e58:	e7b7      	b.n	8016dca <_printf_i+0xd2>
 8016e5a:	064d      	lsls	r5, r1, #25
 8016e5c:	bf48      	it	mi
 8016e5e:	b29b      	uxthmi	r3, r3
 8016e60:	e7ef      	b.n	8016e42 <_printf_i+0x14a>
 8016e62:	4665      	mov	r5, ip
 8016e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8016e68:	fb02 3311 	mls	r3, r2, r1, r3
 8016e6c:	5cc3      	ldrb	r3, [r0, r3]
 8016e6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016e72:	460b      	mov	r3, r1
 8016e74:	2900      	cmp	r1, #0
 8016e76:	d1f5      	bne.n	8016e64 <_printf_i+0x16c>
 8016e78:	e7b9      	b.n	8016dee <_printf_i+0xf6>
 8016e7a:	6813      	ldr	r3, [r2, #0]
 8016e7c:	6825      	ldr	r5, [r4, #0]
 8016e7e:	6961      	ldr	r1, [r4, #20]
 8016e80:	1d18      	adds	r0, r3, #4
 8016e82:	6010      	str	r0, [r2, #0]
 8016e84:	0628      	lsls	r0, r5, #24
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	d501      	bpl.n	8016e8e <_printf_i+0x196>
 8016e8a:	6019      	str	r1, [r3, #0]
 8016e8c:	e002      	b.n	8016e94 <_printf_i+0x19c>
 8016e8e:	066a      	lsls	r2, r5, #25
 8016e90:	d5fb      	bpl.n	8016e8a <_printf_i+0x192>
 8016e92:	8019      	strh	r1, [r3, #0]
 8016e94:	2300      	movs	r3, #0
 8016e96:	6123      	str	r3, [r4, #16]
 8016e98:	4665      	mov	r5, ip
 8016e9a:	e7b9      	b.n	8016e10 <_printf_i+0x118>
 8016e9c:	6813      	ldr	r3, [r2, #0]
 8016e9e:	1d19      	adds	r1, r3, #4
 8016ea0:	6011      	str	r1, [r2, #0]
 8016ea2:	681d      	ldr	r5, [r3, #0]
 8016ea4:	6862      	ldr	r2, [r4, #4]
 8016ea6:	2100      	movs	r1, #0
 8016ea8:	4628      	mov	r0, r5
 8016eaa:	f7e9 f9b9 	bl	8000220 <memchr>
 8016eae:	b108      	cbz	r0, 8016eb4 <_printf_i+0x1bc>
 8016eb0:	1b40      	subs	r0, r0, r5
 8016eb2:	6060      	str	r0, [r4, #4]
 8016eb4:	6863      	ldr	r3, [r4, #4]
 8016eb6:	6123      	str	r3, [r4, #16]
 8016eb8:	2300      	movs	r3, #0
 8016eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ebe:	e7a7      	b.n	8016e10 <_printf_i+0x118>
 8016ec0:	6923      	ldr	r3, [r4, #16]
 8016ec2:	462a      	mov	r2, r5
 8016ec4:	4639      	mov	r1, r7
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	47c0      	blx	r8
 8016eca:	3001      	adds	r0, #1
 8016ecc:	d0aa      	beq.n	8016e24 <_printf_i+0x12c>
 8016ece:	6823      	ldr	r3, [r4, #0]
 8016ed0:	079b      	lsls	r3, r3, #30
 8016ed2:	d413      	bmi.n	8016efc <_printf_i+0x204>
 8016ed4:	68e0      	ldr	r0, [r4, #12]
 8016ed6:	9b03      	ldr	r3, [sp, #12]
 8016ed8:	4298      	cmp	r0, r3
 8016eda:	bfb8      	it	lt
 8016edc:	4618      	movlt	r0, r3
 8016ede:	e7a3      	b.n	8016e28 <_printf_i+0x130>
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	464a      	mov	r2, r9
 8016ee4:	4639      	mov	r1, r7
 8016ee6:	4630      	mov	r0, r6
 8016ee8:	47c0      	blx	r8
 8016eea:	3001      	adds	r0, #1
 8016eec:	d09a      	beq.n	8016e24 <_printf_i+0x12c>
 8016eee:	3501      	adds	r5, #1
 8016ef0:	68e3      	ldr	r3, [r4, #12]
 8016ef2:	9a03      	ldr	r2, [sp, #12]
 8016ef4:	1a9b      	subs	r3, r3, r2
 8016ef6:	42ab      	cmp	r3, r5
 8016ef8:	dcf2      	bgt.n	8016ee0 <_printf_i+0x1e8>
 8016efa:	e7eb      	b.n	8016ed4 <_printf_i+0x1dc>
 8016efc:	2500      	movs	r5, #0
 8016efe:	f104 0919 	add.w	r9, r4, #25
 8016f02:	e7f5      	b.n	8016ef0 <_printf_i+0x1f8>
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d1ac      	bne.n	8016e62 <_printf_i+0x16a>
 8016f08:	7803      	ldrb	r3, [r0, #0]
 8016f0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016f0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016f12:	e76c      	b.n	8016dee <_printf_i+0xf6>
 8016f14:	080188cd 	.word	0x080188cd
 8016f18:	080188de 	.word	0x080188de

08016f1c <memmove>:
 8016f1c:	4288      	cmp	r0, r1
 8016f1e:	b510      	push	{r4, lr}
 8016f20:	eb01 0302 	add.w	r3, r1, r2
 8016f24:	d807      	bhi.n	8016f36 <memmove+0x1a>
 8016f26:	1e42      	subs	r2, r0, #1
 8016f28:	4299      	cmp	r1, r3
 8016f2a:	d00a      	beq.n	8016f42 <memmove+0x26>
 8016f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016f34:	e7f8      	b.n	8016f28 <memmove+0xc>
 8016f36:	4283      	cmp	r3, r0
 8016f38:	d9f5      	bls.n	8016f26 <memmove+0xa>
 8016f3a:	1881      	adds	r1, r0, r2
 8016f3c:	1ad2      	subs	r2, r2, r3
 8016f3e:	42d3      	cmn	r3, r2
 8016f40:	d100      	bne.n	8016f44 <memmove+0x28>
 8016f42:	bd10      	pop	{r4, pc}
 8016f44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016f4c:	e7f7      	b.n	8016f3e <memmove+0x22>

08016f4e <_realloc_r>:
 8016f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f50:	4607      	mov	r7, r0
 8016f52:	4614      	mov	r4, r2
 8016f54:	460e      	mov	r6, r1
 8016f56:	b921      	cbnz	r1, 8016f62 <_realloc_r+0x14>
 8016f58:	4611      	mov	r1, r2
 8016f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016f5e:	f7ff bc29 	b.w	80167b4 <_malloc_r>
 8016f62:	b922      	cbnz	r2, 8016f6e <_realloc_r+0x20>
 8016f64:	f7ff fbd8 	bl	8016718 <_free_r>
 8016f68:	4625      	mov	r5, r4
 8016f6a:	4628      	mov	r0, r5
 8016f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f6e:	f000 f814 	bl	8016f9a <_malloc_usable_size_r>
 8016f72:	42a0      	cmp	r0, r4
 8016f74:	d20f      	bcs.n	8016f96 <_realloc_r+0x48>
 8016f76:	4621      	mov	r1, r4
 8016f78:	4638      	mov	r0, r7
 8016f7a:	f7ff fc1b 	bl	80167b4 <_malloc_r>
 8016f7e:	4605      	mov	r5, r0
 8016f80:	2800      	cmp	r0, #0
 8016f82:	d0f2      	beq.n	8016f6a <_realloc_r+0x1c>
 8016f84:	4631      	mov	r1, r6
 8016f86:	4622      	mov	r2, r4
 8016f88:	f7ff fbb2 	bl	80166f0 <memcpy>
 8016f8c:	4631      	mov	r1, r6
 8016f8e:	4638      	mov	r0, r7
 8016f90:	f7ff fbc2 	bl	8016718 <_free_r>
 8016f94:	e7e9      	b.n	8016f6a <_realloc_r+0x1c>
 8016f96:	4635      	mov	r5, r6
 8016f98:	e7e7      	b.n	8016f6a <_realloc_r+0x1c>

08016f9a <_malloc_usable_size_r>:
 8016f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f9e:	1f18      	subs	r0, r3, #4
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	bfbc      	itt	lt
 8016fa4:	580b      	ldrlt	r3, [r1, r0]
 8016fa6:	18c0      	addlt	r0, r0, r3
 8016fa8:	4770      	bx	lr

08016faa <fmax>:
 8016faa:	b508      	push	{r3, lr}
 8016fac:	ed2d 8b04 	vpush	{d8-d9}
 8016fb0:	eeb0 8a40 	vmov.f32	s16, s0
 8016fb4:	eef0 8a60 	vmov.f32	s17, s1
 8016fb8:	eeb0 9a41 	vmov.f32	s18, s2
 8016fbc:	eef0 9a61 	vmov.f32	s19, s3
 8016fc0:	f000 f842 	bl	8017048 <__fpclassifyd>
 8016fc4:	b168      	cbz	r0, 8016fe2 <fmax+0x38>
 8016fc6:	eeb0 0a49 	vmov.f32	s0, s18
 8016fca:	eef0 0a69 	vmov.f32	s1, s19
 8016fce:	f000 f83b 	bl	8017048 <__fpclassifyd>
 8016fd2:	b150      	cbz	r0, 8016fea <fmax+0x40>
 8016fd4:	ec53 2b19 	vmov	r2, r3, d9
 8016fd8:	ec51 0b18 	vmov	r0, r1, d8
 8016fdc:	f7e9 fdbc 	bl	8000b58 <__aeabi_dcmpgt>
 8016fe0:	b918      	cbnz	r0, 8016fea <fmax+0x40>
 8016fe2:	eeb0 8a49 	vmov.f32	s16, s18
 8016fe6:	eef0 8a69 	vmov.f32	s17, s19
 8016fea:	eeb0 0a48 	vmov.f32	s0, s16
 8016fee:	eef0 0a68 	vmov.f32	s1, s17
 8016ff2:	ecbd 8b04 	vpop	{d8-d9}
 8016ff6:	bd08      	pop	{r3, pc}

08016ff8 <fmin>:
 8016ff8:	b508      	push	{r3, lr}
 8016ffa:	ed2d 8b04 	vpush	{d8-d9}
 8016ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8017002:	eef0 8a60 	vmov.f32	s17, s1
 8017006:	eeb0 9a41 	vmov.f32	s18, s2
 801700a:	eef0 9a61 	vmov.f32	s19, s3
 801700e:	f000 f81b 	bl	8017048 <__fpclassifyd>
 8017012:	b168      	cbz	r0, 8017030 <fmin+0x38>
 8017014:	eeb0 0a49 	vmov.f32	s0, s18
 8017018:	eef0 0a69 	vmov.f32	s1, s19
 801701c:	f000 f814 	bl	8017048 <__fpclassifyd>
 8017020:	b150      	cbz	r0, 8017038 <fmin+0x40>
 8017022:	ec53 2b19 	vmov	r2, r3, d9
 8017026:	ec51 0b18 	vmov	r0, r1, d8
 801702a:	f7e9 fd77 	bl	8000b1c <__aeabi_dcmplt>
 801702e:	b918      	cbnz	r0, 8017038 <fmin+0x40>
 8017030:	eeb0 8a49 	vmov.f32	s16, s18
 8017034:	eef0 8a69 	vmov.f32	s17, s19
 8017038:	eeb0 0a48 	vmov.f32	s0, s16
 801703c:	eef0 0a68 	vmov.f32	s1, s17
 8017040:	ecbd 8b04 	vpop	{d8-d9}
 8017044:	bd08      	pop	{r3, pc}
	...

08017048 <__fpclassifyd>:
 8017048:	ec51 0b10 	vmov	r0, r1, d0
 801704c:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 8017050:	b510      	push	{r4, lr}
 8017052:	460b      	mov	r3, r1
 8017054:	d01b      	beq.n	801708e <__fpclassifyd+0x46>
 8017056:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 801705a:	490f      	ldr	r1, [pc, #60]	; (8017098 <__fpclassifyd+0x50>)
 801705c:	428c      	cmp	r4, r1
 801705e:	d910      	bls.n	8017082 <__fpclassifyd+0x3a>
 8017060:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8017064:	490c      	ldr	r1, [pc, #48]	; (8017098 <__fpclassifyd+0x50>)
 8017066:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801706a:	428b      	cmp	r3, r1
 801706c:	d909      	bls.n	8017082 <__fpclassifyd+0x3a>
 801706e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8017072:	d308      	bcc.n	8017086 <__fpclassifyd+0x3e>
 8017074:	4b09      	ldr	r3, [pc, #36]	; (801709c <__fpclassifyd+0x54>)
 8017076:	429a      	cmp	r2, r3
 8017078:	d107      	bne.n	801708a <__fpclassifyd+0x42>
 801707a:	fab0 f080 	clz	r0, r0
 801707e:	0940      	lsrs	r0, r0, #5
 8017080:	bd10      	pop	{r4, pc}
 8017082:	2004      	movs	r0, #4
 8017084:	e7fc      	b.n	8017080 <__fpclassifyd+0x38>
 8017086:	2003      	movs	r0, #3
 8017088:	e7fa      	b.n	8017080 <__fpclassifyd+0x38>
 801708a:	2000      	movs	r0, #0
 801708c:	e7f8      	b.n	8017080 <__fpclassifyd+0x38>
 801708e:	2800      	cmp	r0, #0
 8017090:	d1e6      	bne.n	8017060 <__fpclassifyd+0x18>
 8017092:	2002      	movs	r0, #2
 8017094:	e7f4      	b.n	8017080 <__fpclassifyd+0x38>
 8017096:	bf00      	nop
 8017098:	7fdfffff 	.word	0x7fdfffff
 801709c:	7ff00000 	.word	0x7ff00000

080170a0 <pow>:
 80170a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a4:	ed2d 8b04 	vpush	{d8-d9}
 80170a8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801737c <pow+0x2dc>
 80170ac:	b08d      	sub	sp, #52	; 0x34
 80170ae:	ec57 6b10 	vmov	r6, r7, d0
 80170b2:	ec55 4b11 	vmov	r4, r5, d1
 80170b6:	f000 f963 	bl	8017380 <__ieee754_pow>
 80170ba:	f999 3000 	ldrsb.w	r3, [r9]
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	3301      	adds	r3, #1
 80170c2:	eeb0 8a40 	vmov.f32	s16, s0
 80170c6:	eef0 8a60 	vmov.f32	s17, s1
 80170ca:	46c8      	mov	r8, r9
 80170cc:	d05f      	beq.n	801718e <pow+0xee>
 80170ce:	4622      	mov	r2, r4
 80170d0:	462b      	mov	r3, r5
 80170d2:	4620      	mov	r0, r4
 80170d4:	4629      	mov	r1, r5
 80170d6:	f7e9 fd49 	bl	8000b6c <__aeabi_dcmpun>
 80170da:	4683      	mov	fp, r0
 80170dc:	2800      	cmp	r0, #0
 80170de:	d156      	bne.n	801718e <pow+0xee>
 80170e0:	4632      	mov	r2, r6
 80170e2:	463b      	mov	r3, r7
 80170e4:	4630      	mov	r0, r6
 80170e6:	4639      	mov	r1, r7
 80170e8:	f7e9 fd40 	bl	8000b6c <__aeabi_dcmpun>
 80170ec:	9001      	str	r0, [sp, #4]
 80170ee:	b1e8      	cbz	r0, 801712c <pow+0x8c>
 80170f0:	2200      	movs	r2, #0
 80170f2:	2300      	movs	r3, #0
 80170f4:	4620      	mov	r0, r4
 80170f6:	4629      	mov	r1, r5
 80170f8:	f7e9 fd06 	bl	8000b08 <__aeabi_dcmpeq>
 80170fc:	2800      	cmp	r0, #0
 80170fe:	d046      	beq.n	801718e <pow+0xee>
 8017100:	2301      	movs	r3, #1
 8017102:	9302      	str	r3, [sp, #8]
 8017104:	4b96      	ldr	r3, [pc, #600]	; (8017360 <pow+0x2c0>)
 8017106:	9303      	str	r3, [sp, #12]
 8017108:	4b96      	ldr	r3, [pc, #600]	; (8017364 <pow+0x2c4>)
 801710a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801710e:	2200      	movs	r2, #0
 8017110:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017114:	9b00      	ldr	r3, [sp, #0]
 8017116:	2b02      	cmp	r3, #2
 8017118:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801711c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017120:	d033      	beq.n	801718a <pow+0xea>
 8017122:	a802      	add	r0, sp, #8
 8017124:	f000 fefb 	bl	8017f1e <matherr>
 8017128:	bb48      	cbnz	r0, 801717e <pow+0xde>
 801712a:	e05d      	b.n	80171e8 <pow+0x148>
 801712c:	f04f 0a00 	mov.w	sl, #0
 8017130:	f04f 0b00 	mov.w	fp, #0
 8017134:	4652      	mov	r2, sl
 8017136:	465b      	mov	r3, fp
 8017138:	4630      	mov	r0, r6
 801713a:	4639      	mov	r1, r7
 801713c:	f7e9 fce4 	bl	8000b08 <__aeabi_dcmpeq>
 8017140:	ec4b ab19 	vmov	d9, sl, fp
 8017144:	2800      	cmp	r0, #0
 8017146:	d054      	beq.n	80171f2 <pow+0x152>
 8017148:	4652      	mov	r2, sl
 801714a:	465b      	mov	r3, fp
 801714c:	4620      	mov	r0, r4
 801714e:	4629      	mov	r1, r5
 8017150:	f7e9 fcda 	bl	8000b08 <__aeabi_dcmpeq>
 8017154:	4680      	mov	r8, r0
 8017156:	b318      	cbz	r0, 80171a0 <pow+0x100>
 8017158:	2301      	movs	r3, #1
 801715a:	9302      	str	r3, [sp, #8]
 801715c:	4b80      	ldr	r3, [pc, #512]	; (8017360 <pow+0x2c0>)
 801715e:	9303      	str	r3, [sp, #12]
 8017160:	9b01      	ldr	r3, [sp, #4]
 8017162:	930a      	str	r3, [sp, #40]	; 0x28
 8017164:	9b00      	ldr	r3, [sp, #0]
 8017166:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801716a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801716e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d0d5      	beq.n	8017122 <pow+0x82>
 8017176:	4b7b      	ldr	r3, [pc, #492]	; (8017364 <pow+0x2c4>)
 8017178:	2200      	movs	r2, #0
 801717a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801717e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017180:	b11b      	cbz	r3, 801718a <pow+0xea>
 8017182:	f7ff fa7b 	bl	801667c <__errno>
 8017186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017188:	6003      	str	r3, [r0, #0]
 801718a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801718e:	eeb0 0a48 	vmov.f32	s0, s16
 8017192:	eef0 0a68 	vmov.f32	s1, s17
 8017196:	b00d      	add	sp, #52	; 0x34
 8017198:	ecbd 8b04 	vpop	{d8-d9}
 801719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171a0:	ec45 4b10 	vmov	d0, r4, r5
 80171a4:	f000 feb3 	bl	8017f0e <finite>
 80171a8:	2800      	cmp	r0, #0
 80171aa:	d0f0      	beq.n	801718e <pow+0xee>
 80171ac:	4652      	mov	r2, sl
 80171ae:	465b      	mov	r3, fp
 80171b0:	4620      	mov	r0, r4
 80171b2:	4629      	mov	r1, r5
 80171b4:	f7e9 fcb2 	bl	8000b1c <__aeabi_dcmplt>
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d0e8      	beq.n	801718e <pow+0xee>
 80171bc:	2301      	movs	r3, #1
 80171be:	9302      	str	r3, [sp, #8]
 80171c0:	4b67      	ldr	r3, [pc, #412]	; (8017360 <pow+0x2c0>)
 80171c2:	9303      	str	r3, [sp, #12]
 80171c4:	f999 3000 	ldrsb.w	r3, [r9]
 80171c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80171cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80171d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80171d4:	b913      	cbnz	r3, 80171dc <pow+0x13c>
 80171d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80171da:	e7a2      	b.n	8017122 <pow+0x82>
 80171dc:	4962      	ldr	r1, [pc, #392]	; (8017368 <pow+0x2c8>)
 80171de:	2000      	movs	r0, #0
 80171e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80171e4:	2b02      	cmp	r3, #2
 80171e6:	d19c      	bne.n	8017122 <pow+0x82>
 80171e8:	f7ff fa48 	bl	801667c <__errno>
 80171ec:	2321      	movs	r3, #33	; 0x21
 80171ee:	6003      	str	r3, [r0, #0]
 80171f0:	e7c5      	b.n	801717e <pow+0xde>
 80171f2:	eeb0 0a48 	vmov.f32	s0, s16
 80171f6:	eef0 0a68 	vmov.f32	s1, s17
 80171fa:	f000 fe88 	bl	8017f0e <finite>
 80171fe:	9000      	str	r0, [sp, #0]
 8017200:	2800      	cmp	r0, #0
 8017202:	f040 8081 	bne.w	8017308 <pow+0x268>
 8017206:	ec47 6b10 	vmov	d0, r6, r7
 801720a:	f000 fe80 	bl	8017f0e <finite>
 801720e:	2800      	cmp	r0, #0
 8017210:	d07a      	beq.n	8017308 <pow+0x268>
 8017212:	ec45 4b10 	vmov	d0, r4, r5
 8017216:	f000 fe7a 	bl	8017f0e <finite>
 801721a:	2800      	cmp	r0, #0
 801721c:	d074      	beq.n	8017308 <pow+0x268>
 801721e:	ec53 2b18 	vmov	r2, r3, d8
 8017222:	ee18 0a10 	vmov	r0, s16
 8017226:	4619      	mov	r1, r3
 8017228:	f7e9 fca0 	bl	8000b6c <__aeabi_dcmpun>
 801722c:	f999 9000 	ldrsb.w	r9, [r9]
 8017230:	4b4b      	ldr	r3, [pc, #300]	; (8017360 <pow+0x2c0>)
 8017232:	b1b0      	cbz	r0, 8017262 <pow+0x1c2>
 8017234:	2201      	movs	r2, #1
 8017236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801723a:	9b00      	ldr	r3, [sp, #0]
 801723c:	930a      	str	r3, [sp, #40]	; 0x28
 801723e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017242:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017246:	f1b9 0f00 	cmp.w	r9, #0
 801724a:	d0c4      	beq.n	80171d6 <pow+0x136>
 801724c:	4652      	mov	r2, sl
 801724e:	465b      	mov	r3, fp
 8017250:	4650      	mov	r0, sl
 8017252:	4659      	mov	r1, fp
 8017254:	f7e9 fb1a 	bl	800088c <__aeabi_ddiv>
 8017258:	f1b9 0f02 	cmp.w	r9, #2
 801725c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017260:	e7c1      	b.n	80171e6 <pow+0x146>
 8017262:	2203      	movs	r2, #3
 8017264:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017268:	900a      	str	r0, [sp, #40]	; 0x28
 801726a:	4629      	mov	r1, r5
 801726c:	4620      	mov	r0, r4
 801726e:	2200      	movs	r2, #0
 8017270:	4b3e      	ldr	r3, [pc, #248]	; (801736c <pow+0x2cc>)
 8017272:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017276:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801727a:	f7e9 f9dd 	bl	8000638 <__aeabi_dmul>
 801727e:	4604      	mov	r4, r0
 8017280:	460d      	mov	r5, r1
 8017282:	f1b9 0f00 	cmp.w	r9, #0
 8017286:	d124      	bne.n	80172d2 <pow+0x232>
 8017288:	4b39      	ldr	r3, [pc, #228]	; (8017370 <pow+0x2d0>)
 801728a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801728e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017292:	4630      	mov	r0, r6
 8017294:	4652      	mov	r2, sl
 8017296:	465b      	mov	r3, fp
 8017298:	4639      	mov	r1, r7
 801729a:	f7e9 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 801729e:	2800      	cmp	r0, #0
 80172a0:	d056      	beq.n	8017350 <pow+0x2b0>
 80172a2:	ec45 4b10 	vmov	d0, r4, r5
 80172a6:	f000 fe47 	bl	8017f38 <rint>
 80172aa:	4622      	mov	r2, r4
 80172ac:	462b      	mov	r3, r5
 80172ae:	ec51 0b10 	vmov	r0, r1, d0
 80172b2:	f7e9 fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80172b6:	b920      	cbnz	r0, 80172c2 <pow+0x222>
 80172b8:	4b2e      	ldr	r3, [pc, #184]	; (8017374 <pow+0x2d4>)
 80172ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80172be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80172c2:	f998 3000 	ldrsb.w	r3, [r8]
 80172c6:	2b02      	cmp	r3, #2
 80172c8:	d142      	bne.n	8017350 <pow+0x2b0>
 80172ca:	f7ff f9d7 	bl	801667c <__errno>
 80172ce:	2322      	movs	r3, #34	; 0x22
 80172d0:	e78d      	b.n	80171ee <pow+0x14e>
 80172d2:	4b29      	ldr	r3, [pc, #164]	; (8017378 <pow+0x2d8>)
 80172d4:	2200      	movs	r2, #0
 80172d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80172da:	4630      	mov	r0, r6
 80172dc:	4652      	mov	r2, sl
 80172de:	465b      	mov	r3, fp
 80172e0:	4639      	mov	r1, r7
 80172e2:	f7e9 fc1b 	bl	8000b1c <__aeabi_dcmplt>
 80172e6:	2800      	cmp	r0, #0
 80172e8:	d0eb      	beq.n	80172c2 <pow+0x222>
 80172ea:	ec45 4b10 	vmov	d0, r4, r5
 80172ee:	f000 fe23 	bl	8017f38 <rint>
 80172f2:	4622      	mov	r2, r4
 80172f4:	462b      	mov	r3, r5
 80172f6:	ec51 0b10 	vmov	r0, r1, d0
 80172fa:	f7e9 fc05 	bl	8000b08 <__aeabi_dcmpeq>
 80172fe:	2800      	cmp	r0, #0
 8017300:	d1df      	bne.n	80172c2 <pow+0x222>
 8017302:	2200      	movs	r2, #0
 8017304:	4b18      	ldr	r3, [pc, #96]	; (8017368 <pow+0x2c8>)
 8017306:	e7da      	b.n	80172be <pow+0x21e>
 8017308:	2200      	movs	r2, #0
 801730a:	2300      	movs	r3, #0
 801730c:	ec51 0b18 	vmov	r0, r1, d8
 8017310:	f7e9 fbfa 	bl	8000b08 <__aeabi_dcmpeq>
 8017314:	2800      	cmp	r0, #0
 8017316:	f43f af3a 	beq.w	801718e <pow+0xee>
 801731a:	ec47 6b10 	vmov	d0, r6, r7
 801731e:	f000 fdf6 	bl	8017f0e <finite>
 8017322:	2800      	cmp	r0, #0
 8017324:	f43f af33 	beq.w	801718e <pow+0xee>
 8017328:	ec45 4b10 	vmov	d0, r4, r5
 801732c:	f000 fdef 	bl	8017f0e <finite>
 8017330:	2800      	cmp	r0, #0
 8017332:	f43f af2c 	beq.w	801718e <pow+0xee>
 8017336:	2304      	movs	r3, #4
 8017338:	9302      	str	r3, [sp, #8]
 801733a:	4b09      	ldr	r3, [pc, #36]	; (8017360 <pow+0x2c0>)
 801733c:	9303      	str	r3, [sp, #12]
 801733e:	2300      	movs	r3, #0
 8017340:	930a      	str	r3, [sp, #40]	; 0x28
 8017342:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017346:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801734a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801734e:	e7b8      	b.n	80172c2 <pow+0x222>
 8017350:	a802      	add	r0, sp, #8
 8017352:	f000 fde4 	bl	8017f1e <matherr>
 8017356:	2800      	cmp	r0, #0
 8017358:	f47f af11 	bne.w	801717e <pow+0xde>
 801735c:	e7b5      	b.n	80172ca <pow+0x22a>
 801735e:	bf00      	nop
 8017360:	080188ef 	.word	0x080188ef
 8017364:	3ff00000 	.word	0x3ff00000
 8017368:	fff00000 	.word	0xfff00000
 801736c:	3fe00000 	.word	0x3fe00000
 8017370:	47efffff 	.word	0x47efffff
 8017374:	c7efffff 	.word	0xc7efffff
 8017378:	7ff00000 	.word	0x7ff00000
 801737c:	200001f8 	.word	0x200001f8

08017380 <__ieee754_pow>:
 8017380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017384:	b091      	sub	sp, #68	; 0x44
 8017386:	ed8d 1b00 	vstr	d1, [sp]
 801738a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801738e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017392:	ea58 0302 	orrs.w	r3, r8, r2
 8017396:	ec57 6b10 	vmov	r6, r7, d0
 801739a:	f000 84be 	beq.w	8017d1a <__ieee754_pow+0x99a>
 801739e:	4b7a      	ldr	r3, [pc, #488]	; (8017588 <__ieee754_pow+0x208>)
 80173a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80173a4:	429c      	cmp	r4, r3
 80173a6:	463d      	mov	r5, r7
 80173a8:	ee10 aa10 	vmov	sl, s0
 80173ac:	dc09      	bgt.n	80173c2 <__ieee754_pow+0x42>
 80173ae:	d103      	bne.n	80173b8 <__ieee754_pow+0x38>
 80173b0:	b93e      	cbnz	r6, 80173c2 <__ieee754_pow+0x42>
 80173b2:	45a0      	cmp	r8, r4
 80173b4:	dc0d      	bgt.n	80173d2 <__ieee754_pow+0x52>
 80173b6:	e001      	b.n	80173bc <__ieee754_pow+0x3c>
 80173b8:	4598      	cmp	r8, r3
 80173ba:	dc02      	bgt.n	80173c2 <__ieee754_pow+0x42>
 80173bc:	4598      	cmp	r8, r3
 80173be:	d10e      	bne.n	80173de <__ieee754_pow+0x5e>
 80173c0:	b16a      	cbz	r2, 80173de <__ieee754_pow+0x5e>
 80173c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80173c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80173ca:	ea54 030a 	orrs.w	r3, r4, sl
 80173ce:	f000 84a4 	beq.w	8017d1a <__ieee754_pow+0x99a>
 80173d2:	486e      	ldr	r0, [pc, #440]	; (801758c <__ieee754_pow+0x20c>)
 80173d4:	b011      	add	sp, #68	; 0x44
 80173d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173da:	f000 bda5 	b.w	8017f28 <nan>
 80173de:	2d00      	cmp	r5, #0
 80173e0:	da53      	bge.n	801748a <__ieee754_pow+0x10a>
 80173e2:	4b6b      	ldr	r3, [pc, #428]	; (8017590 <__ieee754_pow+0x210>)
 80173e4:	4598      	cmp	r8, r3
 80173e6:	dc4d      	bgt.n	8017484 <__ieee754_pow+0x104>
 80173e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80173ec:	4598      	cmp	r8, r3
 80173ee:	dd4c      	ble.n	801748a <__ieee754_pow+0x10a>
 80173f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80173f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80173f8:	2b14      	cmp	r3, #20
 80173fa:	dd26      	ble.n	801744a <__ieee754_pow+0xca>
 80173fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017400:	fa22 f103 	lsr.w	r1, r2, r3
 8017404:	fa01 f303 	lsl.w	r3, r1, r3
 8017408:	4293      	cmp	r3, r2
 801740a:	d13e      	bne.n	801748a <__ieee754_pow+0x10a>
 801740c:	f001 0101 	and.w	r1, r1, #1
 8017410:	f1c1 0b02 	rsb	fp, r1, #2
 8017414:	2a00      	cmp	r2, #0
 8017416:	d15b      	bne.n	80174d0 <__ieee754_pow+0x150>
 8017418:	4b5b      	ldr	r3, [pc, #364]	; (8017588 <__ieee754_pow+0x208>)
 801741a:	4598      	cmp	r8, r3
 801741c:	d124      	bne.n	8017468 <__ieee754_pow+0xe8>
 801741e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017422:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017426:	ea53 030a 	orrs.w	r3, r3, sl
 801742a:	f000 8476 	beq.w	8017d1a <__ieee754_pow+0x99a>
 801742e:	4b59      	ldr	r3, [pc, #356]	; (8017594 <__ieee754_pow+0x214>)
 8017430:	429c      	cmp	r4, r3
 8017432:	dd2d      	ble.n	8017490 <__ieee754_pow+0x110>
 8017434:	f1b9 0f00 	cmp.w	r9, #0
 8017438:	f280 8473 	bge.w	8017d22 <__ieee754_pow+0x9a2>
 801743c:	2000      	movs	r0, #0
 801743e:	2100      	movs	r1, #0
 8017440:	ec41 0b10 	vmov	d0, r0, r1
 8017444:	b011      	add	sp, #68	; 0x44
 8017446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801744a:	2a00      	cmp	r2, #0
 801744c:	d13e      	bne.n	80174cc <__ieee754_pow+0x14c>
 801744e:	f1c3 0314 	rsb	r3, r3, #20
 8017452:	fa48 f103 	asr.w	r1, r8, r3
 8017456:	fa01 f303 	lsl.w	r3, r1, r3
 801745a:	4543      	cmp	r3, r8
 801745c:	f040 8469 	bne.w	8017d32 <__ieee754_pow+0x9b2>
 8017460:	f001 0101 	and.w	r1, r1, #1
 8017464:	f1c1 0b02 	rsb	fp, r1, #2
 8017468:	4b4b      	ldr	r3, [pc, #300]	; (8017598 <__ieee754_pow+0x218>)
 801746a:	4598      	cmp	r8, r3
 801746c:	d118      	bne.n	80174a0 <__ieee754_pow+0x120>
 801746e:	f1b9 0f00 	cmp.w	r9, #0
 8017472:	f280 845a 	bge.w	8017d2a <__ieee754_pow+0x9aa>
 8017476:	4948      	ldr	r1, [pc, #288]	; (8017598 <__ieee754_pow+0x218>)
 8017478:	4632      	mov	r2, r6
 801747a:	463b      	mov	r3, r7
 801747c:	2000      	movs	r0, #0
 801747e:	f7e9 fa05 	bl	800088c <__aeabi_ddiv>
 8017482:	e7dd      	b.n	8017440 <__ieee754_pow+0xc0>
 8017484:	f04f 0b02 	mov.w	fp, #2
 8017488:	e7c4      	b.n	8017414 <__ieee754_pow+0x94>
 801748a:	f04f 0b00 	mov.w	fp, #0
 801748e:	e7c1      	b.n	8017414 <__ieee754_pow+0x94>
 8017490:	f1b9 0f00 	cmp.w	r9, #0
 8017494:	dad2      	bge.n	801743c <__ieee754_pow+0xbc>
 8017496:	e9dd 0300 	ldrd	r0, r3, [sp]
 801749a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801749e:	e7cf      	b.n	8017440 <__ieee754_pow+0xc0>
 80174a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80174a4:	d106      	bne.n	80174b4 <__ieee754_pow+0x134>
 80174a6:	4632      	mov	r2, r6
 80174a8:	463b      	mov	r3, r7
 80174aa:	4610      	mov	r0, r2
 80174ac:	4619      	mov	r1, r3
 80174ae:	f7e9 f8c3 	bl	8000638 <__aeabi_dmul>
 80174b2:	e7c5      	b.n	8017440 <__ieee754_pow+0xc0>
 80174b4:	4b39      	ldr	r3, [pc, #228]	; (801759c <__ieee754_pow+0x21c>)
 80174b6:	4599      	cmp	r9, r3
 80174b8:	d10a      	bne.n	80174d0 <__ieee754_pow+0x150>
 80174ba:	2d00      	cmp	r5, #0
 80174bc:	db08      	blt.n	80174d0 <__ieee754_pow+0x150>
 80174be:	ec47 6b10 	vmov	d0, r6, r7
 80174c2:	b011      	add	sp, #68	; 0x44
 80174c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c8:	f000 bc68 	b.w	8017d9c <__ieee754_sqrt>
 80174cc:	f04f 0b00 	mov.w	fp, #0
 80174d0:	ec47 6b10 	vmov	d0, r6, r7
 80174d4:	f000 fd12 	bl	8017efc <fabs>
 80174d8:	ec51 0b10 	vmov	r0, r1, d0
 80174dc:	f1ba 0f00 	cmp.w	sl, #0
 80174e0:	d127      	bne.n	8017532 <__ieee754_pow+0x1b2>
 80174e2:	b124      	cbz	r4, 80174ee <__ieee754_pow+0x16e>
 80174e4:	4b2c      	ldr	r3, [pc, #176]	; (8017598 <__ieee754_pow+0x218>)
 80174e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d121      	bne.n	8017532 <__ieee754_pow+0x1b2>
 80174ee:	f1b9 0f00 	cmp.w	r9, #0
 80174f2:	da05      	bge.n	8017500 <__ieee754_pow+0x180>
 80174f4:	4602      	mov	r2, r0
 80174f6:	460b      	mov	r3, r1
 80174f8:	2000      	movs	r0, #0
 80174fa:	4927      	ldr	r1, [pc, #156]	; (8017598 <__ieee754_pow+0x218>)
 80174fc:	f7e9 f9c6 	bl	800088c <__aeabi_ddiv>
 8017500:	2d00      	cmp	r5, #0
 8017502:	da9d      	bge.n	8017440 <__ieee754_pow+0xc0>
 8017504:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017508:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801750c:	ea54 030b 	orrs.w	r3, r4, fp
 8017510:	d108      	bne.n	8017524 <__ieee754_pow+0x1a4>
 8017512:	4602      	mov	r2, r0
 8017514:	460b      	mov	r3, r1
 8017516:	4610      	mov	r0, r2
 8017518:	4619      	mov	r1, r3
 801751a:	f7e8 fed5 	bl	80002c8 <__aeabi_dsub>
 801751e:	4602      	mov	r2, r0
 8017520:	460b      	mov	r3, r1
 8017522:	e7ac      	b.n	801747e <__ieee754_pow+0xfe>
 8017524:	f1bb 0f01 	cmp.w	fp, #1
 8017528:	d18a      	bne.n	8017440 <__ieee754_pow+0xc0>
 801752a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801752e:	4619      	mov	r1, r3
 8017530:	e786      	b.n	8017440 <__ieee754_pow+0xc0>
 8017532:	0fed      	lsrs	r5, r5, #31
 8017534:	1e6b      	subs	r3, r5, #1
 8017536:	930d      	str	r3, [sp, #52]	; 0x34
 8017538:	ea5b 0303 	orrs.w	r3, fp, r3
 801753c:	d102      	bne.n	8017544 <__ieee754_pow+0x1c4>
 801753e:	4632      	mov	r2, r6
 8017540:	463b      	mov	r3, r7
 8017542:	e7e8      	b.n	8017516 <__ieee754_pow+0x196>
 8017544:	4b16      	ldr	r3, [pc, #88]	; (80175a0 <__ieee754_pow+0x220>)
 8017546:	4598      	cmp	r8, r3
 8017548:	f340 80fe 	ble.w	8017748 <__ieee754_pow+0x3c8>
 801754c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017550:	4598      	cmp	r8, r3
 8017552:	dd0a      	ble.n	801756a <__ieee754_pow+0x1ea>
 8017554:	4b0f      	ldr	r3, [pc, #60]	; (8017594 <__ieee754_pow+0x214>)
 8017556:	429c      	cmp	r4, r3
 8017558:	dc0d      	bgt.n	8017576 <__ieee754_pow+0x1f6>
 801755a:	f1b9 0f00 	cmp.w	r9, #0
 801755e:	f6bf af6d 	bge.w	801743c <__ieee754_pow+0xbc>
 8017562:	a307      	add	r3, pc, #28	; (adr r3, 8017580 <__ieee754_pow+0x200>)
 8017564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017568:	e79f      	b.n	80174aa <__ieee754_pow+0x12a>
 801756a:	4b0e      	ldr	r3, [pc, #56]	; (80175a4 <__ieee754_pow+0x224>)
 801756c:	429c      	cmp	r4, r3
 801756e:	ddf4      	ble.n	801755a <__ieee754_pow+0x1da>
 8017570:	4b09      	ldr	r3, [pc, #36]	; (8017598 <__ieee754_pow+0x218>)
 8017572:	429c      	cmp	r4, r3
 8017574:	dd18      	ble.n	80175a8 <__ieee754_pow+0x228>
 8017576:	f1b9 0f00 	cmp.w	r9, #0
 801757a:	dcf2      	bgt.n	8017562 <__ieee754_pow+0x1e2>
 801757c:	e75e      	b.n	801743c <__ieee754_pow+0xbc>
 801757e:	bf00      	nop
 8017580:	8800759c 	.word	0x8800759c
 8017584:	7e37e43c 	.word	0x7e37e43c
 8017588:	7ff00000 	.word	0x7ff00000
 801758c:	080188c1 	.word	0x080188c1
 8017590:	433fffff 	.word	0x433fffff
 8017594:	3fefffff 	.word	0x3fefffff
 8017598:	3ff00000 	.word	0x3ff00000
 801759c:	3fe00000 	.word	0x3fe00000
 80175a0:	41e00000 	.word	0x41e00000
 80175a4:	3feffffe 	.word	0x3feffffe
 80175a8:	2200      	movs	r2, #0
 80175aa:	4b63      	ldr	r3, [pc, #396]	; (8017738 <__ieee754_pow+0x3b8>)
 80175ac:	f7e8 fe8c 	bl	80002c8 <__aeabi_dsub>
 80175b0:	a355      	add	r3, pc, #340	; (adr r3, 8017708 <__ieee754_pow+0x388>)
 80175b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b6:	4604      	mov	r4, r0
 80175b8:	460d      	mov	r5, r1
 80175ba:	f7e9 f83d 	bl	8000638 <__aeabi_dmul>
 80175be:	a354      	add	r3, pc, #336	; (adr r3, 8017710 <__ieee754_pow+0x390>)
 80175c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c4:	4606      	mov	r6, r0
 80175c6:	460f      	mov	r7, r1
 80175c8:	4620      	mov	r0, r4
 80175ca:	4629      	mov	r1, r5
 80175cc:	f7e9 f834 	bl	8000638 <__aeabi_dmul>
 80175d0:	2200      	movs	r2, #0
 80175d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175d6:	4b59      	ldr	r3, [pc, #356]	; (801773c <__ieee754_pow+0x3bc>)
 80175d8:	4620      	mov	r0, r4
 80175da:	4629      	mov	r1, r5
 80175dc:	f7e9 f82c 	bl	8000638 <__aeabi_dmul>
 80175e0:	4602      	mov	r2, r0
 80175e2:	460b      	mov	r3, r1
 80175e4:	a14c      	add	r1, pc, #304	; (adr r1, 8017718 <__ieee754_pow+0x398>)
 80175e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175ea:	f7e8 fe6d 	bl	80002c8 <__aeabi_dsub>
 80175ee:	4622      	mov	r2, r4
 80175f0:	462b      	mov	r3, r5
 80175f2:	f7e9 f821 	bl	8000638 <__aeabi_dmul>
 80175f6:	4602      	mov	r2, r0
 80175f8:	460b      	mov	r3, r1
 80175fa:	2000      	movs	r0, #0
 80175fc:	4950      	ldr	r1, [pc, #320]	; (8017740 <__ieee754_pow+0x3c0>)
 80175fe:	f7e8 fe63 	bl	80002c8 <__aeabi_dsub>
 8017602:	4622      	mov	r2, r4
 8017604:	462b      	mov	r3, r5
 8017606:	4680      	mov	r8, r0
 8017608:	4689      	mov	r9, r1
 801760a:	4620      	mov	r0, r4
 801760c:	4629      	mov	r1, r5
 801760e:	f7e9 f813 	bl	8000638 <__aeabi_dmul>
 8017612:	4602      	mov	r2, r0
 8017614:	460b      	mov	r3, r1
 8017616:	4640      	mov	r0, r8
 8017618:	4649      	mov	r1, r9
 801761a:	f7e9 f80d 	bl	8000638 <__aeabi_dmul>
 801761e:	a340      	add	r3, pc, #256	; (adr r3, 8017720 <__ieee754_pow+0x3a0>)
 8017620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017624:	f7e9 f808 	bl	8000638 <__aeabi_dmul>
 8017628:	4602      	mov	r2, r0
 801762a:	460b      	mov	r3, r1
 801762c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017630:	f7e8 fe4a 	bl	80002c8 <__aeabi_dsub>
 8017634:	4602      	mov	r2, r0
 8017636:	460b      	mov	r3, r1
 8017638:	4604      	mov	r4, r0
 801763a:	460d      	mov	r5, r1
 801763c:	4630      	mov	r0, r6
 801763e:	4639      	mov	r1, r7
 8017640:	f7e8 fe44 	bl	80002cc <__adddf3>
 8017644:	2000      	movs	r0, #0
 8017646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801764a:	4632      	mov	r2, r6
 801764c:	463b      	mov	r3, r7
 801764e:	f7e8 fe3b 	bl	80002c8 <__aeabi_dsub>
 8017652:	4602      	mov	r2, r0
 8017654:	460b      	mov	r3, r1
 8017656:	4620      	mov	r0, r4
 8017658:	4629      	mov	r1, r5
 801765a:	f7e8 fe35 	bl	80002c8 <__aeabi_dsub>
 801765e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017660:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017664:	4313      	orrs	r3, r2
 8017666:	4606      	mov	r6, r0
 8017668:	460f      	mov	r7, r1
 801766a:	f040 81eb 	bne.w	8017a44 <__ieee754_pow+0x6c4>
 801766e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017728 <__ieee754_pow+0x3a8>
 8017672:	e9dd 4500 	ldrd	r4, r5, [sp]
 8017676:	2400      	movs	r4, #0
 8017678:	4622      	mov	r2, r4
 801767a:	462b      	mov	r3, r5
 801767c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017680:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017684:	f7e8 fe20 	bl	80002c8 <__aeabi_dsub>
 8017688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801768c:	f7e8 ffd4 	bl	8000638 <__aeabi_dmul>
 8017690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017694:	4680      	mov	r8, r0
 8017696:	4689      	mov	r9, r1
 8017698:	4630      	mov	r0, r6
 801769a:	4639      	mov	r1, r7
 801769c:	f7e8 ffcc 	bl	8000638 <__aeabi_dmul>
 80176a0:	4602      	mov	r2, r0
 80176a2:	460b      	mov	r3, r1
 80176a4:	4640      	mov	r0, r8
 80176a6:	4649      	mov	r1, r9
 80176a8:	f7e8 fe10 	bl	80002cc <__adddf3>
 80176ac:	4622      	mov	r2, r4
 80176ae:	462b      	mov	r3, r5
 80176b0:	4680      	mov	r8, r0
 80176b2:	4689      	mov	r9, r1
 80176b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80176b8:	f7e8 ffbe 	bl	8000638 <__aeabi_dmul>
 80176bc:	460b      	mov	r3, r1
 80176be:	4604      	mov	r4, r0
 80176c0:	460d      	mov	r5, r1
 80176c2:	4602      	mov	r2, r0
 80176c4:	4649      	mov	r1, r9
 80176c6:	4640      	mov	r0, r8
 80176c8:	e9cd 4500 	strd	r4, r5, [sp]
 80176cc:	f7e8 fdfe 	bl	80002cc <__adddf3>
 80176d0:	4b1c      	ldr	r3, [pc, #112]	; (8017744 <__ieee754_pow+0x3c4>)
 80176d2:	4299      	cmp	r1, r3
 80176d4:	4606      	mov	r6, r0
 80176d6:	460f      	mov	r7, r1
 80176d8:	468b      	mov	fp, r1
 80176da:	f340 82f7 	ble.w	8017ccc <__ieee754_pow+0x94c>
 80176de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80176e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80176e6:	4303      	orrs	r3, r0
 80176e8:	f000 81ea 	beq.w	8017ac0 <__ieee754_pow+0x740>
 80176ec:	a310      	add	r3, pc, #64	; (adr r3, 8017730 <__ieee754_pow+0x3b0>)
 80176ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176f6:	f7e8 ff9f 	bl	8000638 <__aeabi_dmul>
 80176fa:	a30d      	add	r3, pc, #52	; (adr r3, 8017730 <__ieee754_pow+0x3b0>)
 80176fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017700:	e6d5      	b.n	80174ae <__ieee754_pow+0x12e>
 8017702:	bf00      	nop
 8017704:	f3af 8000 	nop.w
 8017708:	60000000 	.word	0x60000000
 801770c:	3ff71547 	.word	0x3ff71547
 8017710:	f85ddf44 	.word	0xf85ddf44
 8017714:	3e54ae0b 	.word	0x3e54ae0b
 8017718:	55555555 	.word	0x55555555
 801771c:	3fd55555 	.word	0x3fd55555
 8017720:	652b82fe 	.word	0x652b82fe
 8017724:	3ff71547 	.word	0x3ff71547
 8017728:	00000000 	.word	0x00000000
 801772c:	bff00000 	.word	0xbff00000
 8017730:	8800759c 	.word	0x8800759c
 8017734:	7e37e43c 	.word	0x7e37e43c
 8017738:	3ff00000 	.word	0x3ff00000
 801773c:	3fd00000 	.word	0x3fd00000
 8017740:	3fe00000 	.word	0x3fe00000
 8017744:	408fffff 	.word	0x408fffff
 8017748:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801774c:	f04f 0200 	mov.w	r2, #0
 8017750:	da05      	bge.n	801775e <__ieee754_pow+0x3de>
 8017752:	4bd3      	ldr	r3, [pc, #844]	; (8017aa0 <__ieee754_pow+0x720>)
 8017754:	f7e8 ff70 	bl	8000638 <__aeabi_dmul>
 8017758:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801775c:	460c      	mov	r4, r1
 801775e:	1523      	asrs	r3, r4, #20
 8017760:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017764:	4413      	add	r3, r2
 8017766:	9309      	str	r3, [sp, #36]	; 0x24
 8017768:	4bce      	ldr	r3, [pc, #824]	; (8017aa4 <__ieee754_pow+0x724>)
 801776a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801776e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017772:	429c      	cmp	r4, r3
 8017774:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017778:	dd08      	ble.n	801778c <__ieee754_pow+0x40c>
 801777a:	4bcb      	ldr	r3, [pc, #812]	; (8017aa8 <__ieee754_pow+0x728>)
 801777c:	429c      	cmp	r4, r3
 801777e:	f340 815e 	ble.w	8017a3e <__ieee754_pow+0x6be>
 8017782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017784:	3301      	adds	r3, #1
 8017786:	9309      	str	r3, [sp, #36]	; 0x24
 8017788:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801778c:	f04f 0a00 	mov.w	sl, #0
 8017790:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017794:	930c      	str	r3, [sp, #48]	; 0x30
 8017796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017798:	4bc4      	ldr	r3, [pc, #784]	; (8017aac <__ieee754_pow+0x72c>)
 801779a:	4413      	add	r3, r2
 801779c:	ed93 7b00 	vldr	d7, [r3]
 80177a0:	4629      	mov	r1, r5
 80177a2:	ec53 2b17 	vmov	r2, r3, d7
 80177a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80177aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80177ae:	f7e8 fd8b 	bl	80002c8 <__aeabi_dsub>
 80177b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80177b6:	4606      	mov	r6, r0
 80177b8:	460f      	mov	r7, r1
 80177ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80177be:	f7e8 fd85 	bl	80002cc <__adddf3>
 80177c2:	4602      	mov	r2, r0
 80177c4:	460b      	mov	r3, r1
 80177c6:	2000      	movs	r0, #0
 80177c8:	49b9      	ldr	r1, [pc, #740]	; (8017ab0 <__ieee754_pow+0x730>)
 80177ca:	f7e9 f85f 	bl	800088c <__aeabi_ddiv>
 80177ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80177d2:	4602      	mov	r2, r0
 80177d4:	460b      	mov	r3, r1
 80177d6:	4630      	mov	r0, r6
 80177d8:	4639      	mov	r1, r7
 80177da:	f7e8 ff2d 	bl	8000638 <__aeabi_dmul>
 80177de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80177e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80177e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80177ea:	2300      	movs	r3, #0
 80177ec:	9302      	str	r3, [sp, #8]
 80177ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80177f2:	106d      	asrs	r5, r5, #1
 80177f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80177f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80177fc:	2200      	movs	r2, #0
 80177fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8017802:	4640      	mov	r0, r8
 8017804:	4649      	mov	r1, r9
 8017806:	4614      	mov	r4, r2
 8017808:	461d      	mov	r5, r3
 801780a:	f7e8 ff15 	bl	8000638 <__aeabi_dmul>
 801780e:	4602      	mov	r2, r0
 8017810:	460b      	mov	r3, r1
 8017812:	4630      	mov	r0, r6
 8017814:	4639      	mov	r1, r7
 8017816:	f7e8 fd57 	bl	80002c8 <__aeabi_dsub>
 801781a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801781e:	4606      	mov	r6, r0
 8017820:	460f      	mov	r7, r1
 8017822:	4620      	mov	r0, r4
 8017824:	4629      	mov	r1, r5
 8017826:	f7e8 fd4f 	bl	80002c8 <__aeabi_dsub>
 801782a:	4602      	mov	r2, r0
 801782c:	460b      	mov	r3, r1
 801782e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017832:	f7e8 fd49 	bl	80002c8 <__aeabi_dsub>
 8017836:	4642      	mov	r2, r8
 8017838:	464b      	mov	r3, r9
 801783a:	f7e8 fefd 	bl	8000638 <__aeabi_dmul>
 801783e:	4602      	mov	r2, r0
 8017840:	460b      	mov	r3, r1
 8017842:	4630      	mov	r0, r6
 8017844:	4639      	mov	r1, r7
 8017846:	f7e8 fd3f 	bl	80002c8 <__aeabi_dsub>
 801784a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801784e:	f7e8 fef3 	bl	8000638 <__aeabi_dmul>
 8017852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801785a:	4610      	mov	r0, r2
 801785c:	4619      	mov	r1, r3
 801785e:	f7e8 feeb 	bl	8000638 <__aeabi_dmul>
 8017862:	a37b      	add	r3, pc, #492	; (adr r3, 8017a50 <__ieee754_pow+0x6d0>)
 8017864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017868:	4604      	mov	r4, r0
 801786a:	460d      	mov	r5, r1
 801786c:	f7e8 fee4 	bl	8000638 <__aeabi_dmul>
 8017870:	a379      	add	r3, pc, #484	; (adr r3, 8017a58 <__ieee754_pow+0x6d8>)
 8017872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017876:	f7e8 fd29 	bl	80002cc <__adddf3>
 801787a:	4622      	mov	r2, r4
 801787c:	462b      	mov	r3, r5
 801787e:	f7e8 fedb 	bl	8000638 <__aeabi_dmul>
 8017882:	a377      	add	r3, pc, #476	; (adr r3, 8017a60 <__ieee754_pow+0x6e0>)
 8017884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017888:	f7e8 fd20 	bl	80002cc <__adddf3>
 801788c:	4622      	mov	r2, r4
 801788e:	462b      	mov	r3, r5
 8017890:	f7e8 fed2 	bl	8000638 <__aeabi_dmul>
 8017894:	a374      	add	r3, pc, #464	; (adr r3, 8017a68 <__ieee754_pow+0x6e8>)
 8017896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801789a:	f7e8 fd17 	bl	80002cc <__adddf3>
 801789e:	4622      	mov	r2, r4
 80178a0:	462b      	mov	r3, r5
 80178a2:	f7e8 fec9 	bl	8000638 <__aeabi_dmul>
 80178a6:	a372      	add	r3, pc, #456	; (adr r3, 8017a70 <__ieee754_pow+0x6f0>)
 80178a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ac:	f7e8 fd0e 	bl	80002cc <__adddf3>
 80178b0:	4622      	mov	r2, r4
 80178b2:	462b      	mov	r3, r5
 80178b4:	f7e8 fec0 	bl	8000638 <__aeabi_dmul>
 80178b8:	a36f      	add	r3, pc, #444	; (adr r3, 8017a78 <__ieee754_pow+0x6f8>)
 80178ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178be:	f7e8 fd05 	bl	80002cc <__adddf3>
 80178c2:	4622      	mov	r2, r4
 80178c4:	4606      	mov	r6, r0
 80178c6:	460f      	mov	r7, r1
 80178c8:	462b      	mov	r3, r5
 80178ca:	4620      	mov	r0, r4
 80178cc:	4629      	mov	r1, r5
 80178ce:	f7e8 feb3 	bl	8000638 <__aeabi_dmul>
 80178d2:	4602      	mov	r2, r0
 80178d4:	460b      	mov	r3, r1
 80178d6:	4630      	mov	r0, r6
 80178d8:	4639      	mov	r1, r7
 80178da:	f7e8 fead 	bl	8000638 <__aeabi_dmul>
 80178de:	4642      	mov	r2, r8
 80178e0:	4604      	mov	r4, r0
 80178e2:	460d      	mov	r5, r1
 80178e4:	464b      	mov	r3, r9
 80178e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80178ea:	f7e8 fcef 	bl	80002cc <__adddf3>
 80178ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80178f2:	f7e8 fea1 	bl	8000638 <__aeabi_dmul>
 80178f6:	4622      	mov	r2, r4
 80178f8:	462b      	mov	r3, r5
 80178fa:	f7e8 fce7 	bl	80002cc <__adddf3>
 80178fe:	4642      	mov	r2, r8
 8017900:	4606      	mov	r6, r0
 8017902:	460f      	mov	r7, r1
 8017904:	464b      	mov	r3, r9
 8017906:	4640      	mov	r0, r8
 8017908:	4649      	mov	r1, r9
 801790a:	f7e8 fe95 	bl	8000638 <__aeabi_dmul>
 801790e:	2200      	movs	r2, #0
 8017910:	4b68      	ldr	r3, [pc, #416]	; (8017ab4 <__ieee754_pow+0x734>)
 8017912:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017916:	f7e8 fcd9 	bl	80002cc <__adddf3>
 801791a:	4632      	mov	r2, r6
 801791c:	463b      	mov	r3, r7
 801791e:	f7e8 fcd5 	bl	80002cc <__adddf3>
 8017922:	9802      	ldr	r0, [sp, #8]
 8017924:	460d      	mov	r5, r1
 8017926:	4604      	mov	r4, r0
 8017928:	4602      	mov	r2, r0
 801792a:	460b      	mov	r3, r1
 801792c:	4640      	mov	r0, r8
 801792e:	4649      	mov	r1, r9
 8017930:	f7e8 fe82 	bl	8000638 <__aeabi_dmul>
 8017934:	2200      	movs	r2, #0
 8017936:	4680      	mov	r8, r0
 8017938:	4689      	mov	r9, r1
 801793a:	4b5e      	ldr	r3, [pc, #376]	; (8017ab4 <__ieee754_pow+0x734>)
 801793c:	4620      	mov	r0, r4
 801793e:	4629      	mov	r1, r5
 8017940:	f7e8 fcc2 	bl	80002c8 <__aeabi_dsub>
 8017944:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017948:	f7e8 fcbe 	bl	80002c8 <__aeabi_dsub>
 801794c:	4602      	mov	r2, r0
 801794e:	460b      	mov	r3, r1
 8017950:	4630      	mov	r0, r6
 8017952:	4639      	mov	r1, r7
 8017954:	f7e8 fcb8 	bl	80002c8 <__aeabi_dsub>
 8017958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801795c:	f7e8 fe6c 	bl	8000638 <__aeabi_dmul>
 8017960:	4622      	mov	r2, r4
 8017962:	4606      	mov	r6, r0
 8017964:	460f      	mov	r7, r1
 8017966:	462b      	mov	r3, r5
 8017968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801796c:	f7e8 fe64 	bl	8000638 <__aeabi_dmul>
 8017970:	4602      	mov	r2, r0
 8017972:	460b      	mov	r3, r1
 8017974:	4630      	mov	r0, r6
 8017976:	4639      	mov	r1, r7
 8017978:	f7e8 fca8 	bl	80002cc <__adddf3>
 801797c:	4606      	mov	r6, r0
 801797e:	460f      	mov	r7, r1
 8017980:	4602      	mov	r2, r0
 8017982:	460b      	mov	r3, r1
 8017984:	4640      	mov	r0, r8
 8017986:	4649      	mov	r1, r9
 8017988:	f7e8 fca0 	bl	80002cc <__adddf3>
 801798c:	9802      	ldr	r0, [sp, #8]
 801798e:	a33c      	add	r3, pc, #240	; (adr r3, 8017a80 <__ieee754_pow+0x700>)
 8017990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017994:	4604      	mov	r4, r0
 8017996:	460d      	mov	r5, r1
 8017998:	f7e8 fe4e 	bl	8000638 <__aeabi_dmul>
 801799c:	4642      	mov	r2, r8
 801799e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80179a2:	464b      	mov	r3, r9
 80179a4:	4620      	mov	r0, r4
 80179a6:	4629      	mov	r1, r5
 80179a8:	f7e8 fc8e 	bl	80002c8 <__aeabi_dsub>
 80179ac:	4602      	mov	r2, r0
 80179ae:	460b      	mov	r3, r1
 80179b0:	4630      	mov	r0, r6
 80179b2:	4639      	mov	r1, r7
 80179b4:	f7e8 fc88 	bl	80002c8 <__aeabi_dsub>
 80179b8:	a333      	add	r3, pc, #204	; (adr r3, 8017a88 <__ieee754_pow+0x708>)
 80179ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179be:	f7e8 fe3b 	bl	8000638 <__aeabi_dmul>
 80179c2:	a333      	add	r3, pc, #204	; (adr r3, 8017a90 <__ieee754_pow+0x710>)
 80179c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c8:	4606      	mov	r6, r0
 80179ca:	460f      	mov	r7, r1
 80179cc:	4620      	mov	r0, r4
 80179ce:	4629      	mov	r1, r5
 80179d0:	f7e8 fe32 	bl	8000638 <__aeabi_dmul>
 80179d4:	4602      	mov	r2, r0
 80179d6:	460b      	mov	r3, r1
 80179d8:	4630      	mov	r0, r6
 80179da:	4639      	mov	r1, r7
 80179dc:	f7e8 fc76 	bl	80002cc <__adddf3>
 80179e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80179e2:	4b35      	ldr	r3, [pc, #212]	; (8017ab8 <__ieee754_pow+0x738>)
 80179e4:	4413      	add	r3, r2
 80179e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ea:	f7e8 fc6f 	bl	80002cc <__adddf3>
 80179ee:	4604      	mov	r4, r0
 80179f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179f2:	460d      	mov	r5, r1
 80179f4:	f7e8 fdb6 	bl	8000564 <__aeabi_i2d>
 80179f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80179fa:	4b30      	ldr	r3, [pc, #192]	; (8017abc <__ieee754_pow+0x73c>)
 80179fc:	4413      	add	r3, r2
 80179fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017a02:	4606      	mov	r6, r0
 8017a04:	460f      	mov	r7, r1
 8017a06:	4622      	mov	r2, r4
 8017a08:	462b      	mov	r3, r5
 8017a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a0e:	f7e8 fc5d 	bl	80002cc <__adddf3>
 8017a12:	4642      	mov	r2, r8
 8017a14:	464b      	mov	r3, r9
 8017a16:	f7e8 fc59 	bl	80002cc <__adddf3>
 8017a1a:	4632      	mov	r2, r6
 8017a1c:	463b      	mov	r3, r7
 8017a1e:	f7e8 fc55 	bl	80002cc <__adddf3>
 8017a22:	9802      	ldr	r0, [sp, #8]
 8017a24:	4632      	mov	r2, r6
 8017a26:	463b      	mov	r3, r7
 8017a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017a2c:	f7e8 fc4c 	bl	80002c8 <__aeabi_dsub>
 8017a30:	4642      	mov	r2, r8
 8017a32:	464b      	mov	r3, r9
 8017a34:	f7e8 fc48 	bl	80002c8 <__aeabi_dsub>
 8017a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017a3c:	e607      	b.n	801764e <__ieee754_pow+0x2ce>
 8017a3e:	f04f 0a01 	mov.w	sl, #1
 8017a42:	e6a5      	b.n	8017790 <__ieee754_pow+0x410>
 8017a44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8017a98 <__ieee754_pow+0x718>
 8017a48:	e613      	b.n	8017672 <__ieee754_pow+0x2f2>
 8017a4a:	bf00      	nop
 8017a4c:	f3af 8000 	nop.w
 8017a50:	4a454eef 	.word	0x4a454eef
 8017a54:	3fca7e28 	.word	0x3fca7e28
 8017a58:	93c9db65 	.word	0x93c9db65
 8017a5c:	3fcd864a 	.word	0x3fcd864a
 8017a60:	a91d4101 	.word	0xa91d4101
 8017a64:	3fd17460 	.word	0x3fd17460
 8017a68:	518f264d 	.word	0x518f264d
 8017a6c:	3fd55555 	.word	0x3fd55555
 8017a70:	db6fabff 	.word	0xdb6fabff
 8017a74:	3fdb6db6 	.word	0x3fdb6db6
 8017a78:	33333303 	.word	0x33333303
 8017a7c:	3fe33333 	.word	0x3fe33333
 8017a80:	e0000000 	.word	0xe0000000
 8017a84:	3feec709 	.word	0x3feec709
 8017a88:	dc3a03fd 	.word	0xdc3a03fd
 8017a8c:	3feec709 	.word	0x3feec709
 8017a90:	145b01f5 	.word	0x145b01f5
 8017a94:	be3e2fe0 	.word	0xbe3e2fe0
 8017a98:	00000000 	.word	0x00000000
 8017a9c:	3ff00000 	.word	0x3ff00000
 8017aa0:	43400000 	.word	0x43400000
 8017aa4:	0003988e 	.word	0x0003988e
 8017aa8:	000bb679 	.word	0x000bb679
 8017aac:	080188f8 	.word	0x080188f8
 8017ab0:	3ff00000 	.word	0x3ff00000
 8017ab4:	40080000 	.word	0x40080000
 8017ab8:	08018918 	.word	0x08018918
 8017abc:	08018908 	.word	0x08018908
 8017ac0:	a3b4      	add	r3, pc, #720	; (adr r3, 8017d94 <__ieee754_pow+0xa14>)
 8017ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ac6:	4640      	mov	r0, r8
 8017ac8:	4649      	mov	r1, r9
 8017aca:	f7e8 fbff 	bl	80002cc <__adddf3>
 8017ace:	4622      	mov	r2, r4
 8017ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017ad4:	462b      	mov	r3, r5
 8017ad6:	4630      	mov	r0, r6
 8017ad8:	4639      	mov	r1, r7
 8017ada:	f7e8 fbf5 	bl	80002c8 <__aeabi_dsub>
 8017ade:	4602      	mov	r2, r0
 8017ae0:	460b      	mov	r3, r1
 8017ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017ae6:	f7e9 f837 	bl	8000b58 <__aeabi_dcmpgt>
 8017aea:	2800      	cmp	r0, #0
 8017aec:	f47f adfe 	bne.w	80176ec <__ieee754_pow+0x36c>
 8017af0:	4aa3      	ldr	r2, [pc, #652]	; (8017d80 <__ieee754_pow+0xa00>)
 8017af2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017af6:	4293      	cmp	r3, r2
 8017af8:	f340 810a 	ble.w	8017d10 <__ieee754_pow+0x990>
 8017afc:	151b      	asrs	r3, r3, #20
 8017afe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017b02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017b06:	fa4a f303 	asr.w	r3, sl, r3
 8017b0a:	445b      	add	r3, fp
 8017b0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017b10:	4e9c      	ldr	r6, [pc, #624]	; (8017d84 <__ieee754_pow+0xa04>)
 8017b12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017b16:	4116      	asrs	r6, r2
 8017b18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017b1c:	2000      	movs	r0, #0
 8017b1e:	ea23 0106 	bic.w	r1, r3, r6
 8017b22:	f1c2 0214 	rsb	r2, r2, #20
 8017b26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017b2a:	fa4a fa02 	asr.w	sl, sl, r2
 8017b2e:	f1bb 0f00 	cmp.w	fp, #0
 8017b32:	4602      	mov	r2, r0
 8017b34:	460b      	mov	r3, r1
 8017b36:	4620      	mov	r0, r4
 8017b38:	4629      	mov	r1, r5
 8017b3a:	bfb8      	it	lt
 8017b3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8017b40:	f7e8 fbc2 	bl	80002c8 <__aeabi_dsub>
 8017b44:	e9cd 0100 	strd	r0, r1, [sp]
 8017b48:	4642      	mov	r2, r8
 8017b4a:	464b      	mov	r3, r9
 8017b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b50:	f7e8 fbbc 	bl	80002cc <__adddf3>
 8017b54:	2000      	movs	r0, #0
 8017b56:	a378      	add	r3, pc, #480	; (adr r3, 8017d38 <__ieee754_pow+0x9b8>)
 8017b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b5c:	4604      	mov	r4, r0
 8017b5e:	460d      	mov	r5, r1
 8017b60:	f7e8 fd6a 	bl	8000638 <__aeabi_dmul>
 8017b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b68:	4606      	mov	r6, r0
 8017b6a:	460f      	mov	r7, r1
 8017b6c:	4620      	mov	r0, r4
 8017b6e:	4629      	mov	r1, r5
 8017b70:	f7e8 fbaa 	bl	80002c8 <__aeabi_dsub>
 8017b74:	4602      	mov	r2, r0
 8017b76:	460b      	mov	r3, r1
 8017b78:	4640      	mov	r0, r8
 8017b7a:	4649      	mov	r1, r9
 8017b7c:	f7e8 fba4 	bl	80002c8 <__aeabi_dsub>
 8017b80:	a36f      	add	r3, pc, #444	; (adr r3, 8017d40 <__ieee754_pow+0x9c0>)
 8017b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b86:	f7e8 fd57 	bl	8000638 <__aeabi_dmul>
 8017b8a:	a36f      	add	r3, pc, #444	; (adr r3, 8017d48 <__ieee754_pow+0x9c8>)
 8017b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b90:	4680      	mov	r8, r0
 8017b92:	4689      	mov	r9, r1
 8017b94:	4620      	mov	r0, r4
 8017b96:	4629      	mov	r1, r5
 8017b98:	f7e8 fd4e 	bl	8000638 <__aeabi_dmul>
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	460b      	mov	r3, r1
 8017ba0:	4640      	mov	r0, r8
 8017ba2:	4649      	mov	r1, r9
 8017ba4:	f7e8 fb92 	bl	80002cc <__adddf3>
 8017ba8:	4604      	mov	r4, r0
 8017baa:	460d      	mov	r5, r1
 8017bac:	4602      	mov	r2, r0
 8017bae:	460b      	mov	r3, r1
 8017bb0:	4630      	mov	r0, r6
 8017bb2:	4639      	mov	r1, r7
 8017bb4:	f7e8 fb8a 	bl	80002cc <__adddf3>
 8017bb8:	4632      	mov	r2, r6
 8017bba:	463b      	mov	r3, r7
 8017bbc:	4680      	mov	r8, r0
 8017bbe:	4689      	mov	r9, r1
 8017bc0:	f7e8 fb82 	bl	80002c8 <__aeabi_dsub>
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	460b      	mov	r3, r1
 8017bc8:	4620      	mov	r0, r4
 8017bca:	4629      	mov	r1, r5
 8017bcc:	f7e8 fb7c 	bl	80002c8 <__aeabi_dsub>
 8017bd0:	4642      	mov	r2, r8
 8017bd2:	4606      	mov	r6, r0
 8017bd4:	460f      	mov	r7, r1
 8017bd6:	464b      	mov	r3, r9
 8017bd8:	4640      	mov	r0, r8
 8017bda:	4649      	mov	r1, r9
 8017bdc:	f7e8 fd2c 	bl	8000638 <__aeabi_dmul>
 8017be0:	a35b      	add	r3, pc, #364	; (adr r3, 8017d50 <__ieee754_pow+0x9d0>)
 8017be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017be6:	4604      	mov	r4, r0
 8017be8:	460d      	mov	r5, r1
 8017bea:	f7e8 fd25 	bl	8000638 <__aeabi_dmul>
 8017bee:	a35a      	add	r3, pc, #360	; (adr r3, 8017d58 <__ieee754_pow+0x9d8>)
 8017bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bf4:	f7e8 fb68 	bl	80002c8 <__aeabi_dsub>
 8017bf8:	4622      	mov	r2, r4
 8017bfa:	462b      	mov	r3, r5
 8017bfc:	f7e8 fd1c 	bl	8000638 <__aeabi_dmul>
 8017c00:	a357      	add	r3, pc, #348	; (adr r3, 8017d60 <__ieee754_pow+0x9e0>)
 8017c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c06:	f7e8 fb61 	bl	80002cc <__adddf3>
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	462b      	mov	r3, r5
 8017c0e:	f7e8 fd13 	bl	8000638 <__aeabi_dmul>
 8017c12:	a355      	add	r3, pc, #340	; (adr r3, 8017d68 <__ieee754_pow+0x9e8>)
 8017c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c18:	f7e8 fb56 	bl	80002c8 <__aeabi_dsub>
 8017c1c:	4622      	mov	r2, r4
 8017c1e:	462b      	mov	r3, r5
 8017c20:	f7e8 fd0a 	bl	8000638 <__aeabi_dmul>
 8017c24:	a352      	add	r3, pc, #328	; (adr r3, 8017d70 <__ieee754_pow+0x9f0>)
 8017c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c2a:	f7e8 fb4f 	bl	80002cc <__adddf3>
 8017c2e:	4622      	mov	r2, r4
 8017c30:	462b      	mov	r3, r5
 8017c32:	f7e8 fd01 	bl	8000638 <__aeabi_dmul>
 8017c36:	4602      	mov	r2, r0
 8017c38:	460b      	mov	r3, r1
 8017c3a:	4640      	mov	r0, r8
 8017c3c:	4649      	mov	r1, r9
 8017c3e:	f7e8 fb43 	bl	80002c8 <__aeabi_dsub>
 8017c42:	4604      	mov	r4, r0
 8017c44:	460d      	mov	r5, r1
 8017c46:	4602      	mov	r2, r0
 8017c48:	460b      	mov	r3, r1
 8017c4a:	4640      	mov	r0, r8
 8017c4c:	4649      	mov	r1, r9
 8017c4e:	f7e8 fcf3 	bl	8000638 <__aeabi_dmul>
 8017c52:	2200      	movs	r2, #0
 8017c54:	e9cd 0100 	strd	r0, r1, [sp]
 8017c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	4629      	mov	r1, r5
 8017c60:	f7e8 fb32 	bl	80002c8 <__aeabi_dsub>
 8017c64:	4602      	mov	r2, r0
 8017c66:	460b      	mov	r3, r1
 8017c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c6c:	f7e8 fe0e 	bl	800088c <__aeabi_ddiv>
 8017c70:	4632      	mov	r2, r6
 8017c72:	4604      	mov	r4, r0
 8017c74:	460d      	mov	r5, r1
 8017c76:	463b      	mov	r3, r7
 8017c78:	4640      	mov	r0, r8
 8017c7a:	4649      	mov	r1, r9
 8017c7c:	f7e8 fcdc 	bl	8000638 <__aeabi_dmul>
 8017c80:	4632      	mov	r2, r6
 8017c82:	463b      	mov	r3, r7
 8017c84:	f7e8 fb22 	bl	80002cc <__adddf3>
 8017c88:	4602      	mov	r2, r0
 8017c8a:	460b      	mov	r3, r1
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	4629      	mov	r1, r5
 8017c90:	f7e8 fb1a 	bl	80002c8 <__aeabi_dsub>
 8017c94:	4642      	mov	r2, r8
 8017c96:	464b      	mov	r3, r9
 8017c98:	f7e8 fb16 	bl	80002c8 <__aeabi_dsub>
 8017c9c:	4602      	mov	r2, r0
 8017c9e:	460b      	mov	r3, r1
 8017ca0:	2000      	movs	r0, #0
 8017ca2:	4939      	ldr	r1, [pc, #228]	; (8017d88 <__ieee754_pow+0xa08>)
 8017ca4:	f7e8 fb10 	bl	80002c8 <__aeabi_dsub>
 8017ca8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8017cac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017cb0:	4602      	mov	r2, r0
 8017cb2:	460b      	mov	r3, r1
 8017cb4:	da2f      	bge.n	8017d16 <__ieee754_pow+0x996>
 8017cb6:	4650      	mov	r0, sl
 8017cb8:	ec43 2b10 	vmov	d0, r2, r3
 8017cbc:	f000 f9c0 	bl	8018040 <scalbn>
 8017cc0:	ec51 0b10 	vmov	r0, r1, d0
 8017cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cc8:	f7ff bbf1 	b.w	80174ae <__ieee754_pow+0x12e>
 8017ccc:	4b2f      	ldr	r3, [pc, #188]	; (8017d8c <__ieee754_pow+0xa0c>)
 8017cce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017cd2:	429e      	cmp	r6, r3
 8017cd4:	f77f af0c 	ble.w	8017af0 <__ieee754_pow+0x770>
 8017cd8:	4b2d      	ldr	r3, [pc, #180]	; (8017d90 <__ieee754_pow+0xa10>)
 8017cda:	440b      	add	r3, r1
 8017cdc:	4303      	orrs	r3, r0
 8017cde:	d00b      	beq.n	8017cf8 <__ieee754_pow+0x978>
 8017ce0:	a325      	add	r3, pc, #148	; (adr r3, 8017d78 <__ieee754_pow+0x9f8>)
 8017ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017cea:	f7e8 fca5 	bl	8000638 <__aeabi_dmul>
 8017cee:	a322      	add	r3, pc, #136	; (adr r3, 8017d78 <__ieee754_pow+0x9f8>)
 8017cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf4:	f7ff bbdb 	b.w	80174ae <__ieee754_pow+0x12e>
 8017cf8:	4622      	mov	r2, r4
 8017cfa:	462b      	mov	r3, r5
 8017cfc:	f7e8 fae4 	bl	80002c8 <__aeabi_dsub>
 8017d00:	4642      	mov	r2, r8
 8017d02:	464b      	mov	r3, r9
 8017d04:	f7e8 ff1e 	bl	8000b44 <__aeabi_dcmpge>
 8017d08:	2800      	cmp	r0, #0
 8017d0a:	f43f aef1 	beq.w	8017af0 <__ieee754_pow+0x770>
 8017d0e:	e7e7      	b.n	8017ce0 <__ieee754_pow+0x960>
 8017d10:	f04f 0a00 	mov.w	sl, #0
 8017d14:	e718      	b.n	8017b48 <__ieee754_pow+0x7c8>
 8017d16:	4621      	mov	r1, r4
 8017d18:	e7d4      	b.n	8017cc4 <__ieee754_pow+0x944>
 8017d1a:	2000      	movs	r0, #0
 8017d1c:	491a      	ldr	r1, [pc, #104]	; (8017d88 <__ieee754_pow+0xa08>)
 8017d1e:	f7ff bb8f 	b.w	8017440 <__ieee754_pow+0xc0>
 8017d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d26:	f7ff bb8b 	b.w	8017440 <__ieee754_pow+0xc0>
 8017d2a:	4630      	mov	r0, r6
 8017d2c:	4639      	mov	r1, r7
 8017d2e:	f7ff bb87 	b.w	8017440 <__ieee754_pow+0xc0>
 8017d32:	4693      	mov	fp, r2
 8017d34:	f7ff bb98 	b.w	8017468 <__ieee754_pow+0xe8>
 8017d38:	00000000 	.word	0x00000000
 8017d3c:	3fe62e43 	.word	0x3fe62e43
 8017d40:	fefa39ef 	.word	0xfefa39ef
 8017d44:	3fe62e42 	.word	0x3fe62e42
 8017d48:	0ca86c39 	.word	0x0ca86c39
 8017d4c:	be205c61 	.word	0xbe205c61
 8017d50:	72bea4d0 	.word	0x72bea4d0
 8017d54:	3e663769 	.word	0x3e663769
 8017d58:	c5d26bf1 	.word	0xc5d26bf1
 8017d5c:	3ebbbd41 	.word	0x3ebbbd41
 8017d60:	af25de2c 	.word	0xaf25de2c
 8017d64:	3f11566a 	.word	0x3f11566a
 8017d68:	16bebd93 	.word	0x16bebd93
 8017d6c:	3f66c16c 	.word	0x3f66c16c
 8017d70:	5555553e 	.word	0x5555553e
 8017d74:	3fc55555 	.word	0x3fc55555
 8017d78:	c2f8f359 	.word	0xc2f8f359
 8017d7c:	01a56e1f 	.word	0x01a56e1f
 8017d80:	3fe00000 	.word	0x3fe00000
 8017d84:	000fffff 	.word	0x000fffff
 8017d88:	3ff00000 	.word	0x3ff00000
 8017d8c:	4090cbff 	.word	0x4090cbff
 8017d90:	3f6f3400 	.word	0x3f6f3400
 8017d94:	652b82fe 	.word	0x652b82fe
 8017d98:	3c971547 	.word	0x3c971547

08017d9c <__ieee754_sqrt>:
 8017d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017da0:	4955      	ldr	r1, [pc, #340]	; (8017ef8 <__ieee754_sqrt+0x15c>)
 8017da2:	ec55 4b10 	vmov	r4, r5, d0
 8017da6:	43a9      	bics	r1, r5
 8017da8:	462b      	mov	r3, r5
 8017daa:	462a      	mov	r2, r5
 8017dac:	d112      	bne.n	8017dd4 <__ieee754_sqrt+0x38>
 8017dae:	ee10 2a10 	vmov	r2, s0
 8017db2:	ee10 0a10 	vmov	r0, s0
 8017db6:	4629      	mov	r1, r5
 8017db8:	f7e8 fc3e 	bl	8000638 <__aeabi_dmul>
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	460b      	mov	r3, r1
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	4629      	mov	r1, r5
 8017dc4:	f7e8 fa82 	bl	80002cc <__adddf3>
 8017dc8:	4604      	mov	r4, r0
 8017dca:	460d      	mov	r5, r1
 8017dcc:	ec45 4b10 	vmov	d0, r4, r5
 8017dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dd4:	2d00      	cmp	r5, #0
 8017dd6:	ee10 0a10 	vmov	r0, s0
 8017dda:	4621      	mov	r1, r4
 8017ddc:	dc0f      	bgt.n	8017dfe <__ieee754_sqrt+0x62>
 8017dde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017de2:	4330      	orrs	r0, r6
 8017de4:	d0f2      	beq.n	8017dcc <__ieee754_sqrt+0x30>
 8017de6:	b155      	cbz	r5, 8017dfe <__ieee754_sqrt+0x62>
 8017de8:	ee10 2a10 	vmov	r2, s0
 8017dec:	4620      	mov	r0, r4
 8017dee:	4629      	mov	r1, r5
 8017df0:	f7e8 fa6a 	bl	80002c8 <__aeabi_dsub>
 8017df4:	4602      	mov	r2, r0
 8017df6:	460b      	mov	r3, r1
 8017df8:	f7e8 fd48 	bl	800088c <__aeabi_ddiv>
 8017dfc:	e7e4      	b.n	8017dc8 <__ieee754_sqrt+0x2c>
 8017dfe:	151b      	asrs	r3, r3, #20
 8017e00:	d073      	beq.n	8017eea <__ieee754_sqrt+0x14e>
 8017e02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017e06:	07dd      	lsls	r5, r3, #31
 8017e08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017e0c:	bf48      	it	mi
 8017e0e:	0fc8      	lsrmi	r0, r1, #31
 8017e10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8017e14:	bf44      	itt	mi
 8017e16:	0049      	lslmi	r1, r1, #1
 8017e18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017e1c:	2500      	movs	r5, #0
 8017e1e:	1058      	asrs	r0, r3, #1
 8017e20:	0fcb      	lsrs	r3, r1, #31
 8017e22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8017e26:	0049      	lsls	r1, r1, #1
 8017e28:	2316      	movs	r3, #22
 8017e2a:	462c      	mov	r4, r5
 8017e2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017e30:	19a7      	adds	r7, r4, r6
 8017e32:	4297      	cmp	r7, r2
 8017e34:	bfde      	ittt	le
 8017e36:	19bc      	addle	r4, r7, r6
 8017e38:	1bd2      	suble	r2, r2, r7
 8017e3a:	19ad      	addle	r5, r5, r6
 8017e3c:	0fcf      	lsrs	r7, r1, #31
 8017e3e:	3b01      	subs	r3, #1
 8017e40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8017e44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017e48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017e4c:	d1f0      	bne.n	8017e30 <__ieee754_sqrt+0x94>
 8017e4e:	f04f 0c20 	mov.w	ip, #32
 8017e52:	469e      	mov	lr, r3
 8017e54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017e58:	42a2      	cmp	r2, r4
 8017e5a:	eb06 070e 	add.w	r7, r6, lr
 8017e5e:	dc02      	bgt.n	8017e66 <__ieee754_sqrt+0xca>
 8017e60:	d112      	bne.n	8017e88 <__ieee754_sqrt+0xec>
 8017e62:	428f      	cmp	r7, r1
 8017e64:	d810      	bhi.n	8017e88 <__ieee754_sqrt+0xec>
 8017e66:	2f00      	cmp	r7, #0
 8017e68:	eb07 0e06 	add.w	lr, r7, r6
 8017e6c:	da42      	bge.n	8017ef4 <__ieee754_sqrt+0x158>
 8017e6e:	f1be 0f00 	cmp.w	lr, #0
 8017e72:	db3f      	blt.n	8017ef4 <__ieee754_sqrt+0x158>
 8017e74:	f104 0801 	add.w	r8, r4, #1
 8017e78:	1b12      	subs	r2, r2, r4
 8017e7a:	428f      	cmp	r7, r1
 8017e7c:	bf88      	it	hi
 8017e7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017e82:	1bc9      	subs	r1, r1, r7
 8017e84:	4433      	add	r3, r6
 8017e86:	4644      	mov	r4, r8
 8017e88:	0052      	lsls	r2, r2, #1
 8017e8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8017e8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8017e92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017e96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017e9a:	d1dd      	bne.n	8017e58 <__ieee754_sqrt+0xbc>
 8017e9c:	430a      	orrs	r2, r1
 8017e9e:	d006      	beq.n	8017eae <__ieee754_sqrt+0x112>
 8017ea0:	1c5c      	adds	r4, r3, #1
 8017ea2:	bf13      	iteet	ne
 8017ea4:	3301      	addne	r3, #1
 8017ea6:	3501      	addeq	r5, #1
 8017ea8:	4663      	moveq	r3, ip
 8017eaa:	f023 0301 	bicne.w	r3, r3, #1
 8017eae:	106a      	asrs	r2, r5, #1
 8017eb0:	085b      	lsrs	r3, r3, #1
 8017eb2:	07e9      	lsls	r1, r5, #31
 8017eb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017eb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017ebc:	bf48      	it	mi
 8017ebe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017ec2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8017ec6:	461c      	mov	r4, r3
 8017ec8:	e780      	b.n	8017dcc <__ieee754_sqrt+0x30>
 8017eca:	0aca      	lsrs	r2, r1, #11
 8017ecc:	3815      	subs	r0, #21
 8017ece:	0549      	lsls	r1, r1, #21
 8017ed0:	2a00      	cmp	r2, #0
 8017ed2:	d0fa      	beq.n	8017eca <__ieee754_sqrt+0x12e>
 8017ed4:	02d6      	lsls	r6, r2, #11
 8017ed6:	d50a      	bpl.n	8017eee <__ieee754_sqrt+0x152>
 8017ed8:	f1c3 0420 	rsb	r4, r3, #32
 8017edc:	fa21 f404 	lsr.w	r4, r1, r4
 8017ee0:	1e5d      	subs	r5, r3, #1
 8017ee2:	4099      	lsls	r1, r3
 8017ee4:	4322      	orrs	r2, r4
 8017ee6:	1b43      	subs	r3, r0, r5
 8017ee8:	e78b      	b.n	8017e02 <__ieee754_sqrt+0x66>
 8017eea:	4618      	mov	r0, r3
 8017eec:	e7f0      	b.n	8017ed0 <__ieee754_sqrt+0x134>
 8017eee:	0052      	lsls	r2, r2, #1
 8017ef0:	3301      	adds	r3, #1
 8017ef2:	e7ef      	b.n	8017ed4 <__ieee754_sqrt+0x138>
 8017ef4:	46a0      	mov	r8, r4
 8017ef6:	e7bf      	b.n	8017e78 <__ieee754_sqrt+0xdc>
 8017ef8:	7ff00000 	.word	0x7ff00000

08017efc <fabs>:
 8017efc:	ec51 0b10 	vmov	r0, r1, d0
 8017f00:	ee10 2a10 	vmov	r2, s0
 8017f04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017f08:	ec43 2b10 	vmov	d0, r2, r3
 8017f0c:	4770      	bx	lr

08017f0e <finite>:
 8017f0e:	ee10 3a90 	vmov	r3, s1
 8017f12:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017f16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017f1a:	0fc0      	lsrs	r0, r0, #31
 8017f1c:	4770      	bx	lr

08017f1e <matherr>:
 8017f1e:	2000      	movs	r0, #0
 8017f20:	4770      	bx	lr
 8017f22:	0000      	movs	r0, r0
 8017f24:	0000      	movs	r0, r0
	...

08017f28 <nan>:
 8017f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017f30 <nan+0x8>
 8017f2c:	4770      	bx	lr
 8017f2e:	bf00      	nop
 8017f30:	00000000 	.word	0x00000000
 8017f34:	7ff80000 	.word	0x7ff80000

08017f38 <rint>:
 8017f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f3a:	ec51 0b10 	vmov	r0, r1, d0
 8017f3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017f42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8017f46:	2e13      	cmp	r6, #19
 8017f48:	460b      	mov	r3, r1
 8017f4a:	ee10 4a10 	vmov	r4, s0
 8017f4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8017f52:	dc56      	bgt.n	8018002 <rint+0xca>
 8017f54:	2e00      	cmp	r6, #0
 8017f56:	da2b      	bge.n	8017fb0 <rint+0x78>
 8017f58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017f5c:	4302      	orrs	r2, r0
 8017f5e:	d023      	beq.n	8017fa8 <rint+0x70>
 8017f60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8017f64:	4302      	orrs	r2, r0
 8017f66:	4254      	negs	r4, r2
 8017f68:	4314      	orrs	r4, r2
 8017f6a:	0c4b      	lsrs	r3, r1, #17
 8017f6c:	0b24      	lsrs	r4, r4, #12
 8017f6e:	045b      	lsls	r3, r3, #17
 8017f70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8017f74:	ea44 0103 	orr.w	r1, r4, r3
 8017f78:	460b      	mov	r3, r1
 8017f7a:	492f      	ldr	r1, [pc, #188]	; (8018038 <rint+0x100>)
 8017f7c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017f80:	e9d1 6700 	ldrd	r6, r7, [r1]
 8017f84:	4602      	mov	r2, r0
 8017f86:	4639      	mov	r1, r7
 8017f88:	4630      	mov	r0, r6
 8017f8a:	f7e8 f99f 	bl	80002cc <__adddf3>
 8017f8e:	e9cd 0100 	strd	r0, r1, [sp]
 8017f92:	463b      	mov	r3, r7
 8017f94:	4632      	mov	r2, r6
 8017f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f9a:	f7e8 f995 	bl	80002c8 <__aeabi_dsub>
 8017f9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017fa2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8017fa6:	4639      	mov	r1, r7
 8017fa8:	ec41 0b10 	vmov	d0, r0, r1
 8017fac:	b003      	add	sp, #12
 8017fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fb0:	4a22      	ldr	r2, [pc, #136]	; (801803c <rint+0x104>)
 8017fb2:	4132      	asrs	r2, r6
 8017fb4:	ea01 0702 	and.w	r7, r1, r2
 8017fb8:	4307      	orrs	r7, r0
 8017fba:	d0f5      	beq.n	8017fa8 <rint+0x70>
 8017fbc:	0852      	lsrs	r2, r2, #1
 8017fbe:	4011      	ands	r1, r2
 8017fc0:	430c      	orrs	r4, r1
 8017fc2:	d00b      	beq.n	8017fdc <rint+0xa4>
 8017fc4:	ea23 0202 	bic.w	r2, r3, r2
 8017fc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017fcc:	2e13      	cmp	r6, #19
 8017fce:	fa43 f306 	asr.w	r3, r3, r6
 8017fd2:	bf0c      	ite	eq
 8017fd4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017fd8:	2400      	movne	r4, #0
 8017fda:	4313      	orrs	r3, r2
 8017fdc:	4916      	ldr	r1, [pc, #88]	; (8018038 <rint+0x100>)
 8017fde:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8017fe2:	4622      	mov	r2, r4
 8017fe4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017fe8:	4620      	mov	r0, r4
 8017fea:	4629      	mov	r1, r5
 8017fec:	f7e8 f96e 	bl	80002cc <__adddf3>
 8017ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8017ff4:	4622      	mov	r2, r4
 8017ff6:	462b      	mov	r3, r5
 8017ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ffc:	f7e8 f964 	bl	80002c8 <__aeabi_dsub>
 8018000:	e7d2      	b.n	8017fa8 <rint+0x70>
 8018002:	2e33      	cmp	r6, #51	; 0x33
 8018004:	dd07      	ble.n	8018016 <rint+0xde>
 8018006:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801800a:	d1cd      	bne.n	8017fa8 <rint+0x70>
 801800c:	ee10 2a10 	vmov	r2, s0
 8018010:	f7e8 f95c 	bl	80002cc <__adddf3>
 8018014:	e7c8      	b.n	8017fa8 <rint+0x70>
 8018016:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801801a:	f04f 32ff 	mov.w	r2, #4294967295
 801801e:	40f2      	lsrs	r2, r6
 8018020:	4210      	tst	r0, r2
 8018022:	d0c1      	beq.n	8017fa8 <rint+0x70>
 8018024:	0852      	lsrs	r2, r2, #1
 8018026:	4210      	tst	r0, r2
 8018028:	bf1f      	itttt	ne
 801802a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801802e:	ea20 0202 	bicne.w	r2, r0, r2
 8018032:	4134      	asrne	r4, r6
 8018034:	4314      	orrne	r4, r2
 8018036:	e7d1      	b.n	8017fdc <rint+0xa4>
 8018038:	08018928 	.word	0x08018928
 801803c:	000fffff 	.word	0x000fffff

08018040 <scalbn>:
 8018040:	b570      	push	{r4, r5, r6, lr}
 8018042:	ec55 4b10 	vmov	r4, r5, d0
 8018046:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801804a:	4606      	mov	r6, r0
 801804c:	462b      	mov	r3, r5
 801804e:	b9aa      	cbnz	r2, 801807c <scalbn+0x3c>
 8018050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018054:	4323      	orrs	r3, r4
 8018056:	d03b      	beq.n	80180d0 <scalbn+0x90>
 8018058:	4b31      	ldr	r3, [pc, #196]	; (8018120 <scalbn+0xe0>)
 801805a:	4629      	mov	r1, r5
 801805c:	2200      	movs	r2, #0
 801805e:	ee10 0a10 	vmov	r0, s0
 8018062:	f7e8 fae9 	bl	8000638 <__aeabi_dmul>
 8018066:	4b2f      	ldr	r3, [pc, #188]	; (8018124 <scalbn+0xe4>)
 8018068:	429e      	cmp	r6, r3
 801806a:	4604      	mov	r4, r0
 801806c:	460d      	mov	r5, r1
 801806e:	da12      	bge.n	8018096 <scalbn+0x56>
 8018070:	a327      	add	r3, pc, #156	; (adr r3, 8018110 <scalbn+0xd0>)
 8018072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018076:	f7e8 fadf 	bl	8000638 <__aeabi_dmul>
 801807a:	e009      	b.n	8018090 <scalbn+0x50>
 801807c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018080:	428a      	cmp	r2, r1
 8018082:	d10c      	bne.n	801809e <scalbn+0x5e>
 8018084:	ee10 2a10 	vmov	r2, s0
 8018088:	4620      	mov	r0, r4
 801808a:	4629      	mov	r1, r5
 801808c:	f7e8 f91e 	bl	80002cc <__adddf3>
 8018090:	4604      	mov	r4, r0
 8018092:	460d      	mov	r5, r1
 8018094:	e01c      	b.n	80180d0 <scalbn+0x90>
 8018096:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801809a:	460b      	mov	r3, r1
 801809c:	3a36      	subs	r2, #54	; 0x36
 801809e:	4432      	add	r2, r6
 80180a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80180a4:	428a      	cmp	r2, r1
 80180a6:	dd0b      	ble.n	80180c0 <scalbn+0x80>
 80180a8:	ec45 4b11 	vmov	d1, r4, r5
 80180ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018118 <scalbn+0xd8>
 80180b0:	f000 f83c 	bl	801812c <copysign>
 80180b4:	a318      	add	r3, pc, #96	; (adr r3, 8018118 <scalbn+0xd8>)
 80180b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ba:	ec51 0b10 	vmov	r0, r1, d0
 80180be:	e7da      	b.n	8018076 <scalbn+0x36>
 80180c0:	2a00      	cmp	r2, #0
 80180c2:	dd08      	ble.n	80180d6 <scalbn+0x96>
 80180c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80180c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80180cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80180d0:	ec45 4b10 	vmov	d0, r4, r5
 80180d4:	bd70      	pop	{r4, r5, r6, pc}
 80180d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80180da:	da0d      	bge.n	80180f8 <scalbn+0xb8>
 80180dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80180e0:	429e      	cmp	r6, r3
 80180e2:	ec45 4b11 	vmov	d1, r4, r5
 80180e6:	dce1      	bgt.n	80180ac <scalbn+0x6c>
 80180e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018110 <scalbn+0xd0>
 80180ec:	f000 f81e 	bl	801812c <copysign>
 80180f0:	a307      	add	r3, pc, #28	; (adr r3, 8018110 <scalbn+0xd0>)
 80180f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f6:	e7e0      	b.n	80180ba <scalbn+0x7a>
 80180f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80180fc:	3236      	adds	r2, #54	; 0x36
 80180fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018106:	4620      	mov	r0, r4
 8018108:	4629      	mov	r1, r5
 801810a:	2200      	movs	r2, #0
 801810c:	4b06      	ldr	r3, [pc, #24]	; (8018128 <scalbn+0xe8>)
 801810e:	e7b2      	b.n	8018076 <scalbn+0x36>
 8018110:	c2f8f359 	.word	0xc2f8f359
 8018114:	01a56e1f 	.word	0x01a56e1f
 8018118:	8800759c 	.word	0x8800759c
 801811c:	7e37e43c 	.word	0x7e37e43c
 8018120:	43500000 	.word	0x43500000
 8018124:	ffff3cb0 	.word	0xffff3cb0
 8018128:	3c900000 	.word	0x3c900000

0801812c <copysign>:
 801812c:	ec51 0b10 	vmov	r0, r1, d0
 8018130:	ee11 0a90 	vmov	r0, s3
 8018134:	ee10 2a10 	vmov	r2, s0
 8018138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801813c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018140:	ea41 0300 	orr.w	r3, r1, r0
 8018144:	ec43 2b10 	vmov	d0, r2, r3
 8018148:	4770      	bx	lr
	...

0801814c <_init>:
 801814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801814e:	bf00      	nop
 8018150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018152:	bc08      	pop	{r3}
 8018154:	469e      	mov	lr, r3
 8018156:	4770      	bx	lr

08018158 <_fini>:
 8018158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801815a:	bf00      	nop
 801815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801815e:	bc08      	pop	{r3}
 8018160:	469e      	mov	lr, r3
 8018162:	4770      	bx	lr
