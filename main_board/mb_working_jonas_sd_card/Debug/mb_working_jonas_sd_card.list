
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  080199c8  080199c8  000299c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a238  0801a238  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a238  0801a238  0002a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a240  0801a240  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a240  0801a240  0002a240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a244  0801a244  0002a244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801a248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ec4  200001fc  0801a444  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200170c0  0801a444  000370c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c10b  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007524  00000000  00000000  0006c337  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002750  00000000  00000000  00073860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023f8  00000000  00000000  00075fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dc47  00000000  00000000  000783a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002860b  00000000  00000000  00085fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010537c  00000000  00000000  000ae5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b27c  00000000  00000000  001b39f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080199b0 	.word	0x080199b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	080199b0 	.word	0x080199b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <init_env>:
#include <Helper_Functions/env.h>

void init_env(env *env) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/* init constants */
	env->p_g = PRESSURE_REFERENCE; // ISA reference pressure at sea level [Pa]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <init_env+0x20>)
 8000f84:	601a      	str	r2, [r3, #0]
	env->T_g = 15.0 + T_0; // ISA reference temperature at sea level [K]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <init_env+0x24>)
 8000f8a:	605a      	str	r2, [r3, #4]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	47c5e680 	.word	0x47c5e680
 8000f9c:	43901333 	.word	0x43901333

08000fa0 <update_env>:
void calibrate_env(env *env, float p_g, float T_g) {
	env->T_g = T_g + T_0; // input is temperature in °C
	env->p_g = p_g; //
}

void update_env(env *env, float T) {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f7ff faeb 	bl	8000588 <__aeabi_f2d>
 8000fb2:	a317      	add	r3, pc, #92	; (adr r3, 8001010 <update_env+0x70>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff f988 	bl	80002cc <__adddf3>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	f7ff fe08 	bl	8000bd8 <__aeabi_d2f>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fad8 	bl	8000588 <__aeabi_f2d>
 8000fd8:	a30f      	add	r3, pc, #60	; (adr r3, 8001018 <update_env+0x78>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb2b 	bl	8000638 <__aeabi_dmul>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f7ff fdf5 	bl	8000bd8 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000ff4:	ee00 3a10 	vmov	s0, r3
 8000ff8:	f017 f8f2 	bl	80181e0 <powf>
 8000ffc:	eef0 7a40 	vmov.f32	s15, s0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	bf00      	nop
 8001010:	66666666 	.word	0x66666666
 8001014:	40711266 	.word	0x40711266
 8001018:	2f9873ff 	.word	0x2f9873ff
 800101c:	40791e2f 	.word	0x40791e2f

08001020 <mach_number>:

float mach_number(env *env, float V_x) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 800102c:	edd7 7a00 	vldr	s15, [r7]
 8001030:	eef0 6ae7 	vabs.f32	s13, s15
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	ed93 7a03 	vldr	s14, [r3, #12]
 800103a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800103e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	ee07 3a90 	vmov	s15, r3
}
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e043      	b.n	80010f4 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d03a      	beq.n	80010ee <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa83 	bl	8000588 <__aeabi_f2d>
 8001082:	a322      	add	r3, pc, #136	; (adr r3, 800110c <pressure2altitudeAGL+0xb4>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fc00 	bl	800088c <__aeabi_ddiv>
 800108c:	4603      	mov	r3, r0
 800108e:	460c      	mov	r4, r1
 8001090:	4625      	mov	r5, r4
 8001092:	461c      	mov	r4, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010aa:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001108 <pressure2altitudeAGL+0xb0>
 80010ae:	eeb0 0a66 	vmov.f32	s0, s13
 80010b2:	f017 f895 	bl	80181e0 <powf>
 80010b6:	eeb0 7a40 	vmov.f32	s14, s0
 80010ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80010be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff fa5f 	bl	8000588 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4620      	mov	r0, r4
 80010d0:	4629      	mov	r1, r5
 80010d2:	f7ff fab1 	bl	8000638 <__aeabi_dmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	460c      	mov	r4, r1
 80010da:	4618      	mov	r0, r3
 80010dc:	4621      	mov	r1, r4
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010e4:	18d4      	adds	r4, r2, r3
 80010e6:	f7ff fd77 	bl	8000bd8 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbb7      	blt.n	800106c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bdb0      	pop	{r4, r5, r7, pc}
 8001104:	f3af 8000 	nop.w
 8001108:	3e42d5e2 	.word	0x3e42d5e2
 800110c:	76c8b439 	.word	0x76c8b439
 8001110:	3f7a9fbe 	.word	0x3f7a9fbe
 8001114:	00000000 	.word	0x00000000

08001118 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	ed2d 8b02 	vpush	{d8}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e047      	b.n	80011c0 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d03e      	beq.n	80011ba <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	ed93 8a00 	vldr	s16, [r3]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa1b 	bl	8000588 <__aeabi_f2d>
 8001152:	a323      	add	r3, pc, #140	; (adr r3, 80011e0 <altitudeAGL2pressure+0xc8>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fa6e 	bl	8000638 <__aeabi_dmul>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	4625      	mov	r5, r4
 8001162:	461c      	mov	r4, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fa0d 	bl	8000588 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4603      	mov	r3, r0
 800117c:	460c      	mov	r4, r1
 800117e:	461a      	mov	r2, r3
 8001180:	4623      	mov	r3, r4
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4914      	ldr	r1, [pc, #80]	; (80011d8 <altitudeAGL2pressure+0xc0>)
 8001188:	f7ff f89e 	bl	80002c8 <__aeabi_dsub>
 800118c:	4603      	mov	r3, r0
 800118e:	460c      	mov	r4, r1
 8001190:	4618      	mov	r0, r3
 8001192:	4621      	mov	r1, r4
 8001194:	f7ff fd20 	bl	8000bd8 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80011dc <altitudeAGL2pressure+0xc4>
 800119e:	ee00 3a10 	vmov	s0, r3
 80011a2:	f017 f81d 	bl	80181e0 <powf>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b0:	4413      	add	r3, r2
 80011b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011b6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbb3      	blt.n	8001130 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	ecbd 8b02 	vpop	{d8}
 80011d2:	bdb0      	pop	{r4, r5, r7, pc}
 80011d4:	f3af 8000 	nop.w
 80011d8:	3ff00000 	.word	0x3ff00000
 80011dc:	40a82ed4 	.word	0x40a82ed4
 80011e0:	76c8b439 	.word	0x76c8b439
 80011e4:	3f7a9fbe 	.word	0x3f7a9fbe

080011e8 <altitude_gradient>:

float altitude_gradient(env *env, float p) {
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * T_GRAD / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / R_0 - 1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9c5 	bl	8000588 <__aeabi_f2d>
 80011fe:	a31f      	add	r3, pc, #124	; (adr r3, 800127c <altitude_gradient+0x94>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa18 	bl	8000638 <__aeabi_dmul>
 8001208:	4603      	mov	r3, r0
 800120a:	460c      	mov	r4, r1
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	a11c      	add	r1, pc, #112	; (adr r1, 8001284 <altitude_gradient+0x9c>)
 8001212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001216:	f7ff fb39 	bl	800088c <__aeabi_ddiv>
 800121a:	4603      	mov	r3, r0
 800121c:	460c      	mov	r4, r1
 800121e:	4625      	mov	r5, r4
 8001220:	461c      	mov	r4, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ed97 7a00 	vldr	s14, [r7]
 800122c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001230:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001278 <altitude_gradient+0x90>
 8001234:	eeb0 0a66 	vmov.f32	s0, s13
 8001238:	f016 ffd2 	bl	80181e0 <powf>
 800123c:	ee10 3a10 	vmov	r3, s0
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f9a1 	bl	8000588 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	f7ff f9f3 	bl	8000638 <__aeabi_dmul>
 8001252:	4603      	mov	r3, r0
 8001254:	460c      	mov	r4, r1
 8001256:	4618      	mov	r0, r3
 8001258:	4621      	mov	r1, r4
 800125a:	f7ff fcbd 	bl	8000bd8 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - env->R * env->T_g / (env->g * env->p_g) * expf(logf(p / env->p_g) * (env->R * env->T_grad / env->R - 1));
	return h_grad;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bdb0      	pop	{r4, r5, r7, pc}
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	bf7e5604 	.word	0xbf7e5604
 800127c:	3a92a305 	.word	0x3a92a305
 8001280:	40239d01 	.word	0x40239d01
 8001284:	bdb0d017 	.word	0xbdb0d017
 8001288:	bffddabb 	.word	0xbffddabb

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b09d      	sub	sp, #116	; 0x74
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001292:	f003 fe4e 	bl	8004f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001296:	f000 f915 	bl	80014c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <main+0x194>)
 800129c:	4a61      	ldr	r2, [pc, #388]	; (8001424 <main+0x198>)
 800129e:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 80012a0:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <main+0x194>)
 80012a2:	4a61      	ldr	r2, [pc, #388]	; (8001428 <main+0x19c>)
 80012a4:	60da      	str	r2, [r3, #12]
  init_env(&global_env);
 80012a6:	4861      	ldr	r0, [pc, #388]	; (800142c <main+0x1a0>)
 80012a8:	f7ff fe66 	bl	8000f78 <init_env>
  reset_flight_phase_detection(&global_flight_phase_detection);
 80012ac:	4860      	ldr	r0, [pc, #384]	; (8001430 <main+0x1a4>)
 80012ae:	f002 fa15 	bl	80036dc <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b2:	f000 fab7 	bl	8001824 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b6:	f000 fa8f 	bl	80017d8 <MX_DMA_Init>
  MX_SPI3_Init();
 80012ba:	f000 fa25 	bl	8001708 <MX_SPI3_Init>
  MX_SPI1_Init();
 80012be:	f000 f9b3 	bl	8001628 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 80012c2:	f000 f991 	bl	80015e8 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80012c6:	f000 f9e7 	bl	8001698 <MX_SPI2_Init>
  MX_FATFS_Init();
 80012ca:	f00c f963 	bl	800d594 <MX_FATFS_Init>
  MX_UART7_Init();
 80012ce:	f000 fa53 	bl	8001778 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80012d2:	f014 ff93 	bl	80161fc <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012d6:	f010 ff4f 	bl	8012178 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Sensor Board 1 Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <main+0x1a8>)
 80012dc:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80012e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 80012e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ea:	4618      	mov	r0, r3
 80012ec:	f011 f916 	bl	801251c <osMutexNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b51      	ldr	r3, [pc, #324]	; (8001438 <main+0x1ac>)
 80012f4:	601a      	str	r2, [r3, #0]

   /* Sensor Board 2 Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <main+0x1b0>)
 80012f8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8001302:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001306:	4618      	mov	r0, r3
 8001308:	f011 f908 	bl	801251c <osMutexNew>
 800130c:	4602      	mov	r2, r0
 800130e:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <main+0x1b4>)
 8001310:	601a      	str	r2, [r3, #0]

    /* Sensor Board 3 Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <main+0x1b8>)
 8001314:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 800131e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001322:	4618      	mov	r0, r3
 8001324:	f011 f8fa 	bl	801251c <osMutexNew>
 8001328:	4602      	mov	r2, r0
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <main+0x1bc>)
 800132c:	601a      	str	r2, [r3, #0]

     /* State Estimation Output Mutex */
      const osMutexAttr_t state_est_mutex_attr = {
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <main+0x1c0>)
 8001330:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexPrioInherit,    					 // attr_bits
        NULL,                                     // memory for control block
        0U                                        // size for control block
      };

      state_est_mutex = osMutexNew(&state_est_mutex_attr);
 800133a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133e:	4618      	mov	r0, r3
 8001340:	f011 f8ec 	bl	801251c <osMutexNew>
 8001344:	4602      	mov	r2, r0
 8001346:	4b42      	ldr	r3, [pc, #264]	; (8001450 <main+0x1c4>)
 8001348:	601a      	str	r2, [r3, #0]

      /* FSM Output Mutex */
       const osMutexAttr_t fsm_mutex_attr = {
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <main+0x1c8>)
 800134c:	f107 0420 	add.w	r4, r7, #32
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         osMutexPrioInherit,    					 // attr_bits
         NULL,                                     // memory for control block
         0U                                        // size for control block
       };

       fsm_mutex = osMutexNew(&fsm_mutex_attr);
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4618      	mov	r0, r3
 800135c:	f011 f8de 	bl	801251c <osMutexNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <main+0x1cc>)
 8001364:	601a      	str	r2, [r3, #0]

       /* Environment Mutex */
        const osMutexAttr_t environment_mutex_attr = {
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <main+0x1d0>)
 8001368:	f107 0410 	add.w	r4, r7, #16
 800136c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          osMutexPrioInherit,    					 // attr_bits
          NULL,                                     // memory for control block
          0U                                        // size for control block
        };

        environment_mutex = osMutexNew(&environment_mutex_attr);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4618      	mov	r0, r3
 8001378:	f011 f8d0 	bl	801251c <osMutexNew>
 800137c:	4602      	mov	r2, r0
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <main+0x1d4>)
 8001380:	601a      	str	r2, [r3, #0]

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <main+0x1d8>)
 8001384:	463c      	mov	r4, r7
 8001386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 800138c:	463b      	mov	r3, r7
 800138e:	4618      	mov	r0, r3
 8001390:	f011 f8c4 	bl	801251c <osMutexNew>
 8001394:	4602      	mov	r2, r0
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <main+0x1dc>)
 8001398:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800139a:	2200      	movs	r2, #0
 800139c:	2196      	movs	r1, #150	; 0x96
 800139e:	2080      	movs	r0, #128	; 0x80
 80013a0:	f011 fbc6 	bl	8012b30 <osMessageQueueNew>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <main+0x1e0>)
 80013a8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013aa:	4a31      	ldr	r2, [pc, #196]	; (8001470 <main+0x1e4>)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4831      	ldr	r0, [pc, #196]	; (8001474 <main+0x1e8>)
 80013b0:	f010 ffa0 	bl	80122f4 <osThreadNew>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <main+0x1ec>)
 80013b8:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 80013ba:	4a30      	ldr	r2, [pc, #192]	; (800147c <main+0x1f0>)
 80013bc:	2100      	movs	r1, #0
 80013be:	4830      	ldr	r0, [pc, #192]	; (8001480 <main+0x1f4>)
 80013c0:	f010 ff98 	bl	80122f4 <osThreadNew>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <main+0x1f8>)
 80013c8:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80013ca:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <main+0x1fc>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	482f      	ldr	r0, [pc, #188]	; (800148c <main+0x200>)
 80013d0:	f010 ff90 	bl	80122f4 <osThreadNew>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <main+0x204>)
 80013d8:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80013da:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <main+0x208>)
 80013dc:	2100      	movs	r1, #0
 80013de:	482e      	ldr	r0, [pc, #184]	; (8001498 <main+0x20c>)
 80013e0:	f010 ff88 	bl	80122f4 <osThreadNew>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <main+0x210>)
 80013e8:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80013ea:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <main+0x214>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	482d      	ldr	r0, [pc, #180]	; (80014a4 <main+0x218>)
 80013f0:	f010 ff80 	bl	80122f4 <osThreadNew>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <main+0x21c>)
 80013f8:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <main+0x220>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	482c      	ldr	r0, [pc, #176]	; (80014b0 <main+0x224>)
 8001400:	f010 ff78 	bl	80122f4 <osThreadNew>
 8001404:	4602      	mov	r2, r0
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <main+0x228>)
 8001408:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <main+0x22c>)
 800140c:	2100      	movs	r1, #0
 800140e:	482b      	ldr	r0, [pc, #172]	; (80014bc <main+0x230>)
 8001410:	f010 ff70 	bl	80122f4 <osThreadNew>
 8001414:	4602      	mov	r2, r0
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <main+0x234>)
 8001418:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800141a:	f010 ff03 	bl	8012224 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800141e:	e7fe      	b.n	800141e <main+0x192>
 8001420:	e0042000 	.word	0xe0042000
 8001424:	07e01bff 	.word	0x07e01bff
 8001428:	00070003 	.word	0x00070003
 800142c:	200002fc 	.word	0x200002fc
 8001430:	2000030c 	.word	0x2000030c
 8001434:	08019a38 	.word	0x08019a38
 8001438:	2000ab80 	.word	0x2000ab80
 800143c:	08019a54 	.word	0x08019a54
 8001440:	20014e8c 	.word	0x20014e8c
 8001444:	08019a70 	.word	0x08019a70
 8001448:	2000abe4 	.word	0x2000abe4
 800144c:	08019a90 	.word	0x08019a90
 8001450:	2000abe8 	.word	0x2000abe8
 8001454:	08019aac 	.word	0x08019aac
 8001458:	20008878 	.word	0x20008878
 800145c:	08019ad0 	.word	0x08019ad0
 8001460:	200089c0 	.word	0x200089c0
 8001464:	08019aec 	.word	0x08019aec
 8001468:	2000cc48 	.word	0x2000cc48
 800146c:	20010d6c 	.word	0x20010d6c
 8001470:	08019f7c 	.word	0x08019f7c
 8001474:	08001901 	.word	0x08001901
 8001478:	20008874 	.word	0x20008874
 800147c:	08019fa0 	.word	0x08019fa0
 8001480:	08003f21 	.word	0x08003f21
 8001484:	2000ab7c 	.word	0x2000ab7c
 8001488:	08019fc4 	.word	0x08019fc4
 800148c:	08003079 	.word	0x08003079
 8001490:	20014e88 	.word	0x20014e88
 8001494:	08019fe8 	.word	0x08019fe8
 8001498:	08003d81 	.word	0x08003d81
 800149c:	20008a48 	.word	0x20008a48
 80014a0:	0801a00c 	.word	0x0801a00c
 80014a4:	080039f9 	.word	0x080039f9
 80014a8:	20008960 	.word	0x20008960
 80014ac:	0801a030 	.word	0x0801a030
 80014b0:	0800370d 	.word	0x0800370d
 80014b4:	2000ab78 	.word	0x2000ab78
 80014b8:	0801a054 	.word	0x0801a054
 80014bc:	08003369 	.word	0x08003369
 80014c0:	2000ab84 	.word	0x2000ab84

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0b4      	sub	sp, #208	; 0xd0
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f015 fc3f 	bl	8016d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2284      	movs	r2, #132	; 0x84
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f015 fc30 	bl	8016d56 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <SystemClock_Config+0x118>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <SystemClock_Config+0x118>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <SystemClock_Config+0x118>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <SystemClock_Config+0x11c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <SystemClock_Config+0x11c>)
 8001518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <SystemClock_Config+0x11c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152a:	2301      	movs	r3, #1
 800152c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001546:	2304      	movs	r3, #4
 8001548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 800154c:	23a8      	movs	r3, #168	; 0xa8
 800154e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001558:	2307      	movs	r3, #7
 800155a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fd3c 	bl	8006fe0 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800156e:	f000 f9e3 	bl	8001938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001594:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001598:	2105      	movs	r1, #5
 800159a:	4618      	mov	r0, r3
 800159c:	f005 ffc4 	bl	8007528 <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80015a6:	f000 f9c7 	bl	8001938 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <SystemClock_Config+0x120>)
 80015ac:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 f9da 	bl	800797c <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80015ce:	f000 f9b3 	bl	8001938 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	37d0      	adds	r7, #208	; 0xd0
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000
 80015e4:	00a01000 	.word	0x00a01000

080015e8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <MX_SDMMC1_SD_Init+0x3c>)
 80015f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	200089c4 	.word	0x200089c4
 8001624:	40012c00 	.word	0x40012c00

08001628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_SPI1_Init+0x68>)
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <MX_SPI1_Init+0x6c>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_SPI1_Init+0x68>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_SPI1_Init+0x68>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_SPI1_Init+0x68>)
 8001640:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_SPI1_Init+0x68>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_SPI1_Init+0x68>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_SPI1_Init+0x68>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <MX_SPI1_Init+0x68>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI1_Init+0x68>)
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <MX_SPI1_Init+0x68>)
 8001666:	2200      	movs	r2, #0
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI1_Init+0x68>)
 800166c:	2207      	movs	r2, #7
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <MX_SPI1_Init+0x68>)
 8001672:	2200      	movs	r2, #0
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI1_Init+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_SPI1_Init+0x68>)
 800167e:	f008 f829 	bl	80096d4 <HAL_SPI_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001688:	f000 f956 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20010d08 	.word	0x20010d08
 8001694:	40013000 	.word	0x40013000

08001698 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_SPI2_Init+0x68>)
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <MX_SPI2_Init+0x6c>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_SPI2_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_SPI2_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI2_Init+0x68>)
 80016b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_SPI2_Init+0x68>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_SPI2_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI2_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <MX_SPI2_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI2_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_SPI2_Init+0x68>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI2_Init+0x68>)
 80016dc:	2207      	movs	r2, #7
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_SPI2_Init+0x68>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI2_Init+0x68>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_SPI2_Init+0x68>)
 80016ee:	f007 fff1 	bl	80096d4 <HAL_SPI_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80016f8:	f000 f91e 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000887c 	.word	0x2000887c
 8001704:	40003800 	.word	0x40003800

08001708 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_SPI3_Init+0x68>)
 800170e:	4a19      	ldr	r2, [pc, #100]	; (8001774 <MX_SPI3_Init+0x6c>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_SPI3_Init+0x68>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_SPI3_Init+0x68>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_SPI3_Init+0x68>)
 8001720:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001724:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_SPI3_Init+0x68>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_SPI3_Init+0x68>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_SPI3_Init+0x68>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_SPI3_Init+0x68>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_SPI3_Init+0x68>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_SPI3_Init+0x68>)
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_SPI3_Init+0x68>)
 800174c:	2207      	movs	r2, #7
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_SPI3_Init+0x68>)
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_SPI3_Init+0x68>)
 8001758:	2200      	movs	r2, #0
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_SPI3_Init+0x68>)
 800175e:	f007 ffb9 	bl	80096d4 <HAL_SPI_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001768:	f000 f8e6 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000aa4c 	.word	0x2000aa4c
 8001774:	40003c00 	.word	0x40003c00

08001778 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_UART7_Init+0x58>)
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <MX_UART7_Init+0x5c>)
 8001780:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <MX_UART7_Init+0x58>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_UART7_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_UART7_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_UART7_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_UART7_Init+0x58>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_UART7_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_UART7_Init+0x58>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_UART7_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_UART7_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_UART7_Init+0x58>)
 80017bc:	f009 f842 	bl	800a844 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80017c6:	f000 f8b7 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200088e0 	.word	0x200088e0
 80017d4:	40007800 	.word	0x40007800

080017d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_DMA_Init+0x48>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <MX_DMA_Init+0x48>)
 80017e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <MX_DMA_Init+0x48>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2105      	movs	r1, #5
 80017fa:	203b      	movs	r0, #59	; 0x3b
 80017fc:	f003 fca0 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001800:	203b      	movs	r0, #59	; 0x3b
 8001802:	f003 fcb9 	bl	8005178 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	2045      	movs	r0, #69	; 0x45
 800180c:	f003 fc98 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001810:	2045      	movs	r0, #69	; 0x45
 8001812:	f003 fcb1 	bl	8005178 <HAL_NVIC_EnableIRQ>

}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <MX_GPIO_Init+0xd4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MX_GPIO_Init+0xd4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_GPIO_Init+0xd4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <MX_GPIO_Init+0xd4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <MX_GPIO_Init+0xd4>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_GPIO_Init+0xd4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_GPIO_Init+0xd4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <MX_GPIO_Init+0xd4>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_GPIO_Init+0xd4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2108      	movs	r1, #8
 80018ce:	480b      	ldr	r0, [pc, #44]	; (80018fc <MX_GPIO_Init+0xd8>)
 80018d0:	f004 f9ae 	bl	8005c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018d4:	2308      	movs	r3, #8
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_GPIO_Init+0xd8>)
 80018ec:	f003 fff6 	bl	80058dc <HAL_GPIO_Init>

}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	; 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800

08001900 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001908:	f014 fc78 	bl	80161fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800190c:	2001      	movs	r0, #1
 800190e:	f010 fd97 	bl	8012440 <osDelay>
 8001912:	e7fb      	b.n	800190c <StartDefaultTask+0xc>

08001914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001926:	f003 fb11 	bl	8004f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40010000 	.word	0x40010000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <eye>:
#include "math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8001946:	b490      	push	{r4, r7}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	1e43      	subs	r3, r0, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f04f 0400 	mov.w	r4, #0
 8001966:	0154      	lsls	r4, r2, #5
 8001968:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800196c:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	e02b      	b.n	80019cc <eye+0x86>
        for(int j = 0; j < dim; j++){
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e021      	b.n	80019be <eye+0x78>
            if (i == j){
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	429a      	cmp	r2, r3
 8001980:	d10d      	bne.n	800199e <eye+0x58>
				A[i][j] = 1;
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	fb03 f302 	mul.w	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	441a      	add	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e00c      	b.n	80019b8 <eye+0x72>
			} else {
				A[i][j] = 0;
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	fb03 f302 	mul.w	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	441a      	add	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbd9      	blt.n	800197a <eye+0x34>
	for(int i = 0; i < dim; i++){
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3301      	adds	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbcf      	blt.n	8001974 <eye+0x2e>
			}
        }
    }
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc90      	pop	{r4, r7}
 80019dc:	4770      	bx	lr

080019de <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 80019de:	b4b0      	push	{r4, r5, r7}
 80019e0:	b089      	sub	sp, #36	; 0x24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	68b8      	ldr	r0, [r7, #8]
 80019ee:	1e43      	subs	r3, r0, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	4603      	mov	r3, r0
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	f04f 0400 	mov.w	r4, #0
 8001a02:	0154      	lsls	r4, r2, #5
 8001a04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a08:	014b      	lsls	r3, r1, #5
 8001a0a:	68fd      	ldr	r5, [r7, #12]
 8001a0c:	1e6b      	subs	r3, r5, #1
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	462b      	mov	r3, r5
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	0154      	lsls	r4, r2, #5
 8001a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a26:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	e022      	b.n	8001a74 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e018      	b.n	8001a66 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8001a34:	4602      	mov	r2, r0
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fb03 f302 	mul.w	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	441a      	add	r2, r3
 8001a42:	4629      	mov	r1, r5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	fb03 f301 	mul.w	r3, r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	4419      	add	r1, r3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	3301      	adds	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbe2      	blt.n	8001a34 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbd8      	blt.n	8001a2e <transpose+0x50>
		}
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bcb0      	pop	{r4, r5, r7}
 8001a84:	4770      	bx	lr

08001a86 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8001a86:	b480      	push	{r7}
 8001a88:	b087      	sub	sp, #28
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e016      	b.n	8001ac8 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbe4      	blt.n	8001a9a <vecadd+0x14>
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e016      	b.n	8001b1e <vecsub+0x42>
		c[i] = a[i] - b[i];
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	4413      	add	r3, r2
 8001af8:	ed93 7a00 	vldr	s14, [r3]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b14:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbe4      	blt.n	8001af0 <vecsub+0x14>
	}
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <matadd>:

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8001b32:	b4f0      	push	{r4, r5, r6, r7}
 8001b34:	b08a      	sub	sp, #40	; 0x28
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	68b8      	ldr	r0, [r7, #8]
 8001b42:	1e43      	subs	r3, r0, #1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	f04f 0400 	mov.w	r4, #0
 8001b56:	0154      	lsls	r4, r2, #5
 8001b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b5c:	014b      	lsls	r3, r1, #5
 8001b5e:	68bd      	ldr	r5, [r7, #8]
 8001b60:	1e6b      	subs	r3, r5, #1
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	462b      	mov	r3, r5
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	f04f 0400 	mov.w	r4, #0
 8001b74:	0154      	lsls	r4, r2, #5
 8001b76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b7a:	014b      	lsls	r3, r1, #5
 8001b7c:	68be      	ldr	r6, [r7, #8]
 8001b7e:	1e73      	subs	r3, r6, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	4633      	mov	r3, r6
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	0154      	lsls	r4, r2, #5
 8001b94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b98:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e032      	b.n	8001c06 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	e028      	b.n	8001bf8 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	fb03 f302 	mul.w	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	ed93 7a00 	vldr	s14, [r3]
 8001bbe:	462a      	mov	r2, r5
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	fb03 f302 	mul.w	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	441a      	add	r2, r3
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	4632      	mov	r2, r6
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	fb03 f302 	mul.w	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be2:	441a      	add	r2, r3
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3a      	ldr	r2, [r7, #32]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbd2      	blt.n	8001ba6 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	3301      	adds	r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbc8      	blt.n	8001ba0 <matadd+0x6e>
        }
    }
}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bcf0      	pop	{r4, r5, r6, r7}
 8001c16:	4770      	bx	lr

08001c18 <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8001c18:	b4f0      	push	{r4, r5, r6, r7}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	68b8      	ldr	r0, [r7, #8]
 8001c28:	1e43      	subs	r3, r0, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f04f 0400 	mov.w	r4, #0
 8001c3c:	0154      	lsls	r4, r2, #5
 8001c3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c42:	014b      	lsls	r3, r1, #5
 8001c44:	68bd      	ldr	r5, [r7, #8]
 8001c46:	1e6b      	subs	r3, r5, #1
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f04f 0400 	mov.w	r4, #0
 8001c5a:	0154      	lsls	r4, r2, #5
 8001c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c60:	014b      	lsls	r3, r1, #5
 8001c62:	68be      	ldr	r6, [r7, #8]
 8001c64:	1e73      	subs	r3, r6, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	4633      	mov	r3, r6
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	f04f 0400 	mov.w	r4, #0
 8001c78:	0154      	lsls	r4, r2, #5
 8001c7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c7e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	e032      	b.n	8001cec <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	e028      	b.n	8001cde <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fb03 f302 	mul.w	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	441a      	add	r2, r3
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	462a      	mov	r2, r5
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fb03 f302 	mul.w	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	4632      	mov	r2, r6
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fb03 f302 	mul.w	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc8:	441a      	add	r2, r3
 8001cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbd2      	blt.n	8001c8c <matsub+0x74>
	for(int i = 0; i < m; i++){
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbc8      	blt.n	8001c86 <matsub+0x6e>
        }
    }
}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8001cfc:	4770      	bx	lr

08001cfe <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8001cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d00:	b08d      	sub	sp, #52	; 0x34
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6178      	str	r0, [r7, #20]
 8001d06:	6139      	str	r1, [r7, #16]
 8001d08:	60fa      	str	r2, [r7, #12]
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	693e      	ldr	r6, [r7, #16]
 8001d0e:	1e73      	subs	r3, r6, #1
 8001d10:	623b      	str	r3, [r7, #32]
 8001d12:	4633      	mov	r3, r6
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f04f 0400 	mov.w	r4, #0
 8001d22:	0154      	lsls	r4, r2, #5
 8001d24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d28:	014b      	lsls	r3, r1, #5
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	3b01      	subs	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	4613      	mov	r3, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	f04f 0400 	mov.w	r4, #0
 8001d44:	0154      	lsls	r4, r2, #5
 8001d46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d4a:	014b      	lsls	r3, r1, #5
 8001d4c:	68fd      	ldr	r5, [r7, #12]
 8001d4e:	1e6b      	subs	r3, r5, #1
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	462b      	mov	r3, r5
 8001d54:	4619      	mov	r1, r3
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	f04f 0400 	mov.w	r4, #0
 8001d62:	0154      	lsls	r4, r2, #5
 8001d64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d68:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001d6a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d82:	f014 ffe8 	bl	8016d56 <memset>
	}
	for(int i = 0; i < m; i++){
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	e04a      	b.n	8001e22 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d90:	e040      	b.n	8001e14 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d96:	e036      	b.n	8001e06 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8001d98:	4632      	mov	r2, r6
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	fb03 f302 	mul.w	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	441a      	add	r2, r3
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	fb03 f302 	mul.w	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dbc:	441a      	add	r2, r3
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dcc:	462a      	mov	r2, r5
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	fb03 f302 	mul.w	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dd8:	441a      	add	r2, r3
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	462a      	mov	r2, r5
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	fb03 f302 	mul.w	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001df0:	441a      	add	r2, r3
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	3301      	adds	r3, #1
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbc4      	blt.n	8001d98 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	3301      	adds	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbba      	blt.n	8001d92 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	3301      	adds	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dbb0      	blt.n	8001d8c <matmul+0x8e>
            }
        }
    }
}
 8001e2a:	bf00      	nop
 8001e2c:	3734      	adds	r7, #52	; 0x34
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e32 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8001e32:	b5b0      	push	{r4, r5, r7, lr}
 8001e34:	b088      	sub	sp, #32
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	68bd      	ldr	r5, [r7, #8]
 8001e42:	1e6b      	subs	r3, r5, #1
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	462b      	mov	r3, r5
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	f04f 0400 	mov.w	r4, #0
 8001e56:	0154      	lsls	r4, r2, #5
 8001e58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e5c:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001e5e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e70:	f014 ff71 	bl	8016d56 <memset>
	}
	for(int i = 0; i < m; i++){
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	e02e      	b.n	8001ed8 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e024      	b.n	8001eca <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8001e80:	462a      	mov	r2, r5
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	fb03 f302 	mul.w	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	441a      	add	r2, r3
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eae:	4413      	add	r3, r2
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eba:	4413      	add	r3, r2
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbd6      	blt.n	8001e80 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbcc      	blt.n	8001e7a <matvecprod+0x48>
        }
    }
}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bdb0      	pop	{r4, r5, r7, pc}

08001ee8 <scalarmatprod>:

void scalarmatprod(int m, int n, float scalar, float A[m][n], float B[m][n]) {
 8001ee8:	b4b0      	push	{r4, r5, r7}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6178      	str	r0, [r7, #20]
 8001ef0:	6139      	str	r1, [r7, #16]
 8001ef2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	6938      	ldr	r0, [r7, #16]
 8001efc:	1e43      	subs	r3, r0, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	4603      	mov	r3, r0
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	f04f 0400 	mov.w	r4, #0
 8001f10:	0154      	lsls	r4, r2, #5
 8001f12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f16:	014b      	lsls	r3, r1, #5
 8001f18:	693d      	ldr	r5, [r7, #16]
 8001f1a:	1e6b      	subs	r3, r5, #1
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	462b      	mov	r3, r5
 8001f20:	4619      	mov	r1, r3
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	f04f 0400 	mov.w	r4, #0
 8001f2e:	0154      	lsls	r4, r2, #5
 8001f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f34:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	e028      	b.n	8001f8e <scalarmatprod+0xa6>
        for(int j = 0; j < n; j++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	e01e      	b.n	8001f80 <scalarmatprod+0x98>
            B[i][j] = scalar * A[i][j];
 8001f42:	4602      	mov	r2, r0
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	fb03 f302 	mul.w	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	441a      	add	r2, r3
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	fb03 f302 	mul.w	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	441a      	add	r2, r3
 8001f68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbdc      	blt.n	8001f42 <scalarmatprod+0x5a>
	for(int i = 0; i < m; i++){
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	623b      	str	r3, [r7, #32]
 8001f8e:	6a3a      	ldr	r2, [r7, #32]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dbd2      	blt.n	8001f3c <scalarmatprod+0x54>
        }
    }
}
 8001f96:	bf00      	nop
 8001f98:	372c      	adds	r7, #44	; 0x2c
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bcb0      	pop	{r4, r5, r7}
 8001f9e:	4770      	bx	lr

08001fa0 <cofactor>:
}

/* Function to get cofactor of A[p][q] in temp[][]. n is current dimension of A[][] */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
void cofactor(int dim, float A[dim][dim], float temp[dim][dim], int p, int q, int n)
{
 8001fa0:	b4b0      	push	{r4, r5, r7}
 8001fa2:	b08b      	sub	sp, #44	; 0x2c
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
void cofactor(int dim, float A[dim][dim], float temp[dim][dim], int p, int q, int n)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	1e43      	subs	r3, r0, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	0154      	lsls	r4, r2, #5
 8001fc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fca:	014b      	lsls	r3, r1, #5
 8001fcc:	68fd      	ldr	r5, [r7, #12]
 8001fce:	1e6b      	subs	r3, r5, #1
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	f04f 0400 	mov.w	r4, #0
 8001fe2:	0154      	lsls	r4, r2, #5
 8001fe4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fe8:	014b      	lsls	r3, r1, #5
    int i = 0, j = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24

    // Looping for each element of the matrix
    for (int row = 0; row < n; row++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e036      	b.n	8002066 <cofactor+0xc6>
    {
        for (int col = 0; col < n; col++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e02c      	b.n	8002058 <cofactor+0xb8>
        {
            //  Copying into temporary matrix only those element
            //  which are not in given row and column
            if (row != p && col != q)
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d025      	beq.n	8002052 <cofactor+0xb2>
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200a:	429a      	cmp	r2, r3
 800200c:	d021      	beq.n	8002052 <cofactor+0xb2>
            {
                temp[i][j++] = A[row][col];
 800200e:	4602      	mov	r2, r0
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	fb03 f302 	mul.w	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	18d4      	adds	r4, r2, r3
 800201c:	462a      	mov	r2, r5
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	fb03 f302 	mul.w	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	18d1      	adds	r1, r2, r3
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	627a      	str	r2, [r7, #36]	; 0x24
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4422      	add	r2, r4
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	601a      	str	r2, [r3, #0]

                // Row is filled, so increase row index and
                // reset col index
                if (j == n - 1)
 800203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002040:	3b01      	subs	r3, #1
 8002042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002044:	429a      	cmp	r2, r3
 8002046:	d104      	bne.n	8002052 <cofactor+0xb2>
                {
                    j = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
                    i++;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	3301      	adds	r3, #1
 8002050:	623b      	str	r3, [r7, #32]
        for (int col = 0; col < n; col++)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3301      	adds	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205c:	429a      	cmp	r2, r3
 800205e:	dbce      	blt.n	8001ffe <cofactor+0x5e>
    for (int row = 0; row < n; row++)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206a:	429a      	cmp	r2, r3
 800206c:	dbc4      	blt.n	8001ff8 <cofactor+0x58>
                }
            }
        }
    }
}
 800206e:	bf00      	nop
 8002070:	372c      	adds	r7, #44	; 0x2c
 8002072:	46bd      	mov	sp, r7
 8002074:	bcb0      	pop	{r4, r5, r7}
 8002076:	4770      	bx	lr

08002078 <determinant>:

/* Recursive function for finding determinant of matrix. n is current dimension of A[][]. */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
float determinant(int dim, float A[dim][dim], int n)
{
 8002078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207c:	ed2d 8b02 	vpush	{d8}
 8002080:	b08e      	sub	sp, #56	; 0x38
 8002082:	af02      	add	r7, sp, #8
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
float determinant(int dim, float A[dim][dim], int n)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002090:	4619      	mov	r1, r3
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f04f 0400 	mov.w	r4, #0
 800209e:	0154      	lsls	r4, r2, #5
 80020a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020a4:	014b      	lsls	r3, r1, #5
{
 80020a6:	466b      	mov	r3, sp
 80020a8:	4698      	mov	r8, r3
    float D = 0; // Initialize result
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]

    //  Base case : if matrix contains single element
    if (n == 1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <determinant+0x44>
        return A[0][0];
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e089      	b.n	80021d0 <determinant+0x158>

    float temp[dim][dim]; // To store cofactors
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	68fd      	ldr	r5, [r7, #12]
 80020c0:	1e43      	subs	r3, r0, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	4603      	mov	r3, r0
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	f04f 0400 	mov.w	r4, #0
 80020d4:	0154      	lsls	r4, r2, #5
 80020d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020da:	014b      	lsls	r3, r1, #5
 80020dc:	1e6b      	subs	r3, r5, #1
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	4603      	mov	r3, r0
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	462b      	mov	r3, r5
 80020ea:	f04f 0400 	mov.w	r4, #0
 80020ee:	fb03 fc02 	mul.w	ip, r3, r2
 80020f2:	fb01 f604 	mul.w	r6, r1, r4
 80020f6:	4466      	add	r6, ip
 80020f8:	fba1 3403 	umull	r3, r4, r1, r3
 80020fc:	1932      	adds	r2, r6, r4
 80020fe:	4614      	mov	r4, r2
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	0162      	lsls	r2, r4, #5
 800210a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800210e:	0159      	lsls	r1, r3, #5
 8002110:	4603      	mov	r3, r0
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	462b      	mov	r3, r5
 800211a:	f04f 0400 	mov.w	r4, #0
 800211e:	fb03 fc02 	mul.w	ip, r3, r2
 8002122:	fb01 f604 	mul.w	r6, r1, r4
 8002126:	4466      	add	r6, ip
 8002128:	fba1 3403 	umull	r3, r4, r1, r3
 800212c:	1932      	adds	r2, r6, r4
 800212e:	4614      	mov	r4, r2
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	0162      	lsls	r2, r4, #5
 800213a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800213e:	0159      	lsls	r1, r3, #5
 8002140:	4603      	mov	r3, r0
 8002142:	462a      	mov	r2, r5
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3303      	adds	r3, #3
 800214c:	3307      	adds	r3, #7
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	ebad 0d03 	sub.w	sp, sp, r3
 8002156:	ab02      	add	r3, sp, #8
 8002158:	3303      	adds	r3, #3
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	617b      	str	r3, [r7, #20]

    int sign = 1;  // To store sign multiplier
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24

     // Iterate for each element of first row
    for (int f = 0; f < n; f++)
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
 8002168:	e02d      	b.n	80021c6 <determinant+0x14e>
    {
        // Getting Cofactor of A[0][f]
        cofactor(dim, A, temp, 0, f, n);
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2300      	movs	r3, #0
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff ff11 	bl	8001fa0 <cofactor>
        D += sign * A[0][f] * determinant(dim, temp, n - 1);
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3b01      	subs	r3, #1
 800219e:	461a      	mov	r2, r3
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff ff69 	bl	8002078 <determinant>
 80021a6:	eef0 7a40 	vmov.f32	s15, s0
 80021aa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80021ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80021b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b6:	edc7 7a08 	vstr	s15, [r7, #32]

        // terms are to be added with alternate sign
        sign = -sign;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	425b      	negs	r3, r3
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    for (int f = 0; f < n; f++)
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	3301      	adds	r3, #1
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	dbcd      	blt.n	800216a <determinant+0xf2>
    }

    return D;
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	46c5      	mov	sp, r8
 80021d2:	ee07 3a90 	vmov	s15, r3
}
 80021d6:	eeb0 0a67 	vmov.f32	s0, s15
 80021da:	3730      	adds	r7, #48	; 0x30
 80021dc:	46bd      	mov	sp, r7
 80021de:	ecbd 8b02 	vpop	{d8}
 80021e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021e6 <adjoint>:

/* Function to get adjoint of A[dim][dim] in adj[dim][dim]. */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
void adjoint(int dim, float A[dim][dim], float adj[dim][dim])
{
 80021e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ea:	ed2d 8b02 	vpush	{d8}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
void adjoint(int dim, float A[dim][dim], float adj[dim][dim])
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e5a      	subs	r2, r3, #1
 80021fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	f04f 0400 	mov.w	r4, #0
 800220c:	0154      	lsls	r4, r2, #5
 800220e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002212:	014b      	lsls	r3, r1, #5
 8002214:	68fe      	ldr	r6, [r7, #12]
 8002216:	1e73      	subs	r3, r6, #1
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221a:	4633      	mov	r3, r6
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	f04f 0400 	mov.w	r4, #0
 800222a:	0154      	lsls	r4, r2, #5
 800222c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002230:	014b      	lsls	r3, r1, #5
{
 8002232:	466b      	mov	r3, sp
 8002234:	4698      	mov	r8, r3
    if (dim == 1)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <adjoint+0x64>
    {
        adj[0][0] = 1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002242:	601a      	str	r2, [r3, #0]
        return;
 8002244:	bf00      	nop
 8002246:	46c5      	mov	sp, r8
 8002248:	e09c      	b.n	8002384 <adjoint+0x19e>
    }

    // temp is used to store cofactors of A[][]
    int sign = 1;
 800224a:	2301      	movs	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
	float temp[dim][dim];
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	68fd      	ldr	r5, [r7, #12]
 8002252:	1e43      	subs	r3, r0, #1
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	4603      	mov	r3, r0
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	0154      	lsls	r4, r2, #5
 8002268:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800226c:	014b      	lsls	r3, r1, #5
 800226e:	1e6b      	subs	r3, r5, #1
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	4603      	mov	r3, r0
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	462b      	mov	r3, r5
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	fb03 fe02 	mul.w	lr, r3, r2
 8002284:	fb01 fc04 	mul.w	ip, r1, r4
 8002288:	44f4      	add	ip, lr
 800228a:	fba1 3403 	umull	r3, r4, r1, r3
 800228e:	eb0c 0204 	add.w	r2, ip, r4
 8002292:	4614      	mov	r4, r2
 8002294:	f04f 0100 	mov.w	r1, #0
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	0162      	lsls	r2, r4, #5
 800229e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	462b      	mov	r3, r5
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	fb03 fe02 	mul.w	lr, r3, r2
 80022b6:	fb01 fc04 	mul.w	ip, r1, r4
 80022ba:	44f4      	add	ip, lr
 80022bc:	fba1 3403 	umull	r3, r4, r1, r3
 80022c0:	eb0c 0204 	add.w	r2, ip, r4
 80022c4:	4614      	mov	r4, r2
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	0162      	lsls	r2, r4, #5
 80022d0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80022d4:	0159      	lsls	r1, r3, #5
 80022d6:	4603      	mov	r3, r0
 80022d8:	462a      	mov	r2, r5
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	3303      	adds	r3, #3
 80022e2:	3307      	adds	r3, #7
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	ebad 0d03 	sub.w	sp, sp, r3
 80022ec:	ab02      	add	r3, sp, #8
 80022ee:	3303      	adds	r3, #3
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	613b      	str	r3, [r7, #16]

    for (int i=0; i<dim; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	e03e      	b.n	800237a <adjoint+0x194>
    {
        for (int j=0; j<dim; j++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002300:	e034      	b.n	800236c <adjoint+0x186>
        {
            // Get cofactor of A[i][j]
            cofactor(dim, A, temp, i, j, dim);
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff fe45 	bl	8001fa0 <cofactor>

            // sign of adj[j][i] positive if sum of row
            // and column indexes is even.
            sign = ((i+j)%2==0)? 1: -1;
 8002316:	6a3a      	ldr	r2, [r7, #32]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	4413      	add	r3, r2
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <adjoint+0x142>
 8002324:	2301      	movs	r3, #1
 8002326:	e001      	b.n	800232c <adjoint+0x146>
 8002328:	f04f 33ff 	mov.w	r3, #4294967295
 800232c:	61fb      	str	r3, [r7, #28]

            // Interchanging rows and columns to get the
            // transpose of the cofactor matrix
            adj[j][i] = (sign)*(determinant(dim, temp, dim-1));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002338:	6939      	ldr	r1, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3b01      	subs	r3, #1
 800233e:	461a      	mov	r2, r3
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f7ff fe99 	bl	8002078 <determinant>
 8002346:	eef0 7a40 	vmov.f32	s15, s0
 800234a:	4632      	mov	r2, r6
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	fb03 f302 	mul.w	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	441a      	add	r2, r3
 8002358:	ee68 7a27 	vmul.f32	s15, s16, s15
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<dim; j++)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3301      	adds	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbc6      	blt.n	8002302 <adjoint+0x11c>
    for (int i=0; i<dim; i++)
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	3301      	adds	r3, #1
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	6a3a      	ldr	r2, [r7, #32]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	429a      	cmp	r2, r3
 8002380:	dbbc      	blt.n	80022fc <adjoint+0x116>
 8002382:	46c5      	mov	sp, r8
        }
    }
}
 8002384:	3730      	adds	r7, #48	; 0x30
 8002386:	46bd      	mov	sp, r7
 8002388:	ecbd 8b02 	vpop	{d8}
 800238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002390 <inverse>:

/* Function to calculate and store inverse, returns false if matrix is singular */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
bool inverse(int dim, float A[dim][dim], float A_inv[dim][dim], float lambda)
{
 8002390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002394:	b095      	sub	sp, #84	; 0x54
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	ed87 0a00 	vstr	s0, [r7]
bool inverse(int dim, float A[dim][dim], float A_inv[dim][dim], float lambda)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	f04f 0400 	mov.w	r4, #0
 80023b6:	0154      	lsls	r4, r2, #5
 80023b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023bc:	014b      	lsls	r3, r1, #5
 80023be:	68fe      	ldr	r6, [r7, #12]
 80023c0:	1e73      	subs	r3, r6, #1
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c4:	4633      	mov	r3, r6
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	0154      	lsls	r4, r2, #5
 80023d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023da:	014b      	lsls	r3, r1, #5
{
 80023dc:	466b      	mov	r3, sp
 80023de:	4699      	mov	r9, r3
	/* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[dim][dim];
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	68fd      	ldr	r5, [r7, #12]
 80023e4:	1e43      	subs	r3, r0, #1
 80023e6:	643b      	str	r3, [r7, #64]	; 0x40
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f04f 0400 	mov.w	r4, #0
 80023f8:	0154      	lsls	r4, r2, #5
 80023fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023fe:	014b      	lsls	r3, r1, #5
 8002400:	1e6b      	subs	r3, r5, #1
 8002402:	647b      	str	r3, [r7, #68]	; 0x44
 8002404:	4603      	mov	r3, r0
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	462b      	mov	r3, r5
 800240e:	f04f 0400 	mov.w	r4, #0
 8002412:	fb03 fe02 	mul.w	lr, r3, r2
 8002416:	fb01 fc04 	mul.w	ip, r1, r4
 800241a:	44f4      	add	ip, lr
 800241c:	fba1 3403 	umull	r3, r4, r1, r3
 8002420:	eb0c 0204 	add.w	r2, ip, r4
 8002424:	4614      	mov	r4, r2
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	0162      	lsls	r2, r4, #5
 8002430:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002434:	0159      	lsls	r1, r3, #5
 8002436:	4603      	mov	r3, r0
 8002438:	4619      	mov	r1, r3
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	462b      	mov	r3, r5
 8002440:	f04f 0400 	mov.w	r4, #0
 8002444:	fb03 fe02 	mul.w	lr, r3, r2
 8002448:	fb01 fc04 	mul.w	ip, r1, r4
 800244c:	44f4      	add	ip, lr
 800244e:	fba1 3403 	umull	r3, r4, r1, r3
 8002452:	eb0c 0204 	add.w	r2, ip, r4
 8002456:	4614      	mov	r4, r2
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	0162      	lsls	r2, r4, #5
 8002462:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002466:	0159      	lsls	r1, r3, #5
 8002468:	4603      	mov	r3, r0
 800246a:	462a      	mov	r2, r5
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	3303      	adds	r3, #3
 8002474:	3307      	adds	r3, #7
 8002476:	08db      	lsrs	r3, r3, #3
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	ebad 0d03 	sub.w	sp, sp, r3
 800247e:	ab02      	add	r3, sp, #8
 8002480:	3303      	adds	r3, #3
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lambda_diag[dim][dim];
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	68fd      	ldr	r5, [r7, #12]
 800248c:	1e43      	subs	r3, r0, #1
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f04f 0400 	mov.w	r4, #0
 80024a0:	0154      	lsls	r4, r2, #5
 80024a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024a6:	014b      	lsls	r3, r1, #5
 80024a8:	1e6b      	subs	r3, r5, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	4603      	mov	r3, r0
 80024ae:	4619      	mov	r1, r3
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	462b      	mov	r3, r5
 80024b6:	f04f 0400 	mov.w	r4, #0
 80024ba:	fb03 fe02 	mul.w	lr, r3, r2
 80024be:	fb01 fc04 	mul.w	ip, r1, r4
 80024c2:	44f4      	add	ip, lr
 80024c4:	fba1 3403 	umull	r3, r4, r1, r3
 80024c8:	eb0c 0204 	add.w	r2, ip, r4
 80024cc:	4614      	mov	r4, r2
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	0162      	lsls	r2, r4, #5
 80024d8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80024dc:	0159      	lsls	r1, r3, #5
 80024de:	4603      	mov	r3, r0
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	462b      	mov	r3, r5
 80024e8:	f04f 0400 	mov.w	r4, #0
 80024ec:	fb03 fe02 	mul.w	lr, r3, r2
 80024f0:	fb01 fc04 	mul.w	ip, r1, r4
 80024f4:	44f4      	add	ip, lr
 80024f6:	fba1 3403 	umull	r3, r4, r1, r3
 80024fa:	eb0c 0204 	add.w	r2, ip, r4
 80024fe:	4614      	mov	r4, r2
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	0162      	lsls	r2, r4, #5
 800250a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800250e:	0159      	lsls	r1, r3, #5
 8002510:	4603      	mov	r3, r0
 8002512:	462a      	mov	r2, r5
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	3303      	adds	r3, #3
 800251c:	3307      	adds	r3, #7
 800251e:	08db      	lsrs	r3, r3, #3
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	ebad 0d03 	sub.w	sp, sp, r3
 8002526:	ab02      	add	r3, sp, #8
 8002528:	3303      	adds	r3, #3
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	623b      	str	r3, [r7, #32]
	eye(dim, lambda_diag);
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	4619      	mov	r1, r3
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fa06 	bl	8001946 <eye>
	scalarmatprod(dim, dim, lambda, lambda_diag, lambda_diag);
 800253a:	6a3a      	ldr	r2, [r7, #32]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	ed97 0a00 	vldr	s0, [r7]
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7ff fccf 	bl	8001ee8 <scalarmatprod>
	matadd(dim, dim, A, lambda_diag, A_dash);
 800254a:	6a3a      	ldr	r2, [r7, #32]
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f7ff faeb 	bl	8001b32 <matadd>

    // Find determinant of A[][]
    float det = determinant(dim, A_dash, dim);
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4619      	mov	r1, r3
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f7ff fd88 	bl	8002078 <determinant>
 8002568:	ed87 0a07 	vstr	s0, [r7, #28]

    if (det == 0)
 800256c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002570:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d104      	bne.n	8002584 <inverse+0x1f4>
    {
        printf("Singular matrix, can't find its inverse\n");
 800257a:	484c      	ldr	r0, [pc, #304]	; (80026ac <inverse+0x31c>)
 800257c:	f014 fcf8 	bl	8016f70 <puts>
        return false;
 8002580:	2300      	movs	r3, #0
 8002582:	e08d      	b.n	80026a0 <inverse+0x310>
    }

    // Find adjoint
    float adj[dim][dim];
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	68fd      	ldr	r5, [r7, #12]
 8002588:	1e43      	subs	r3, r0, #1
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	4603      	mov	r3, r0
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f04f 0400 	mov.w	r4, #0
 800259c:	0154      	lsls	r4, r2, #5
 800259e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025a2:	014b      	lsls	r3, r1, #5
 80025a4:	4603      	mov	r3, r0
 80025a6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80025aa:	1e6b      	subs	r3, r5, #1
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	4603      	mov	r3, r0
 80025b0:	4619      	mov	r1, r3
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	462b      	mov	r3, r5
 80025b8:	f04f 0400 	mov.w	r4, #0
 80025bc:	fb03 fe02 	mul.w	lr, r3, r2
 80025c0:	fb01 fc04 	mul.w	ip, r1, r4
 80025c4:	44f4      	add	ip, lr
 80025c6:	fba1 3403 	umull	r3, r4, r1, r3
 80025ca:	eb0c 0204 	add.w	r2, ip, r4
 80025ce:	4614      	mov	r4, r2
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	0162      	lsls	r2, r4, #5
 80025da:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	4603      	mov	r3, r0
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	462b      	mov	r3, r5
 80025ea:	f04f 0400 	mov.w	r4, #0
 80025ee:	fb03 fe02 	mul.w	lr, r3, r2
 80025f2:	fb01 fc04 	mul.w	ip, r1, r4
 80025f6:	44f4      	add	ip, lr
 80025f8:	fba1 3403 	umull	r3, r4, r1, r3
 80025fc:	eb0c 0204 	add.w	r2, ip, r4
 8002600:	4614      	mov	r4, r2
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	0162      	lsls	r2, r4, #5
 800260c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002610:	0159      	lsls	r1, r3, #5
 8002612:	4603      	mov	r3, r0
 8002614:	462a      	mov	r2, r5
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	3303      	adds	r3, #3
 800261e:	3307      	adds	r3, #7
 8002620:	08db      	lsrs	r3, r3, #3
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	ebad 0d03 	sub.w	sp, sp, r3
 8002628:	ab02      	add	r3, sp, #8
 800262a:	3303      	adds	r3, #3
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	613b      	str	r3, [r7, #16]
    adjoint(dim, A_dash, adj);
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4619      	mov	r1, r3
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fdd4 	bl	80021e6 <adjoint>

    // Find Inverse using formula "inverse(A) = adj(A)/det(A)"
    for (int i=0; i<dim; i++) {
 800263e:	2300      	movs	r3, #0
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	e028      	b.n	8002696 <inverse+0x306>
        for (int j=0; j<dim; j++) {
 8002644:	2300      	movs	r3, #0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
 8002648:	e01e      	b.n	8002688 <inverse+0x2f8>
            A_inv[i][j] = adj[i][j] / ((float) det);
 800264a:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002652:	fb01 f103 	mul.w	r1, r1, r3
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	440b      	add	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	edd3 6a00 	vldr	s13, [r3]
 8002662:	4632      	mov	r2, r6
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	fb03 f302 	mul.w	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	441a      	add	r2, r3
 8002670:	ed97 7a07 	vldr	s14, [r7, #28]
 8002674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<dim; j++) {
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	3301      	adds	r3, #1
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
 8002688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbdc      	blt.n	800264a <inverse+0x2ba>
    for (int i=0; i<dim; i++) {
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	3301      	adds	r3, #1
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	429a      	cmp	r2, r3
 800269c:	dbd2      	blt.n	8002644 <inverse+0x2b4>
		}
	}

    return true;
 800269e:	2301      	movs	r3, #1
 80026a0:	46cd      	mov	sp, r9
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	374c      	adds	r7, #76	; 0x4c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026ac:	08019afc 	.word	0x08019afc

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_MspInit+0x4c>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_MspInit+0x4c>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_MspInit+0x4c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_MspInit+0x4c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_MspInit+0x4c>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	210f      	movs	r1, #15
 80026ea:	f06f 0001 	mvn.w	r0, #1
 80026ee:	f002 fd27 	bl	8005140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_SD_MspInit+0x1b4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	f040 80c3 	bne.w	80028aa <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002724:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 800272a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800272e:	6453      	str	r3, [r2, #68]	; 0x44
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	4a5d      	ldr	r2, [pc, #372]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6313      	str	r3, [r2, #48]	; 0x30
 8002748:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002754:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	6313      	str	r3, [r2, #48]	; 0x30
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <HAL_SD_MspInit+0x1b8>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800276c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002770:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800277e:	230c      	movs	r3, #12
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	484c      	ldr	r0, [pc, #304]	; (80028bc <HAL_SD_MspInit+0x1bc>)
 800278a:	f003 f8a7 	bl	80058dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800278e:	2304      	movs	r3, #4
 8002790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800279e:	230c      	movs	r3, #12
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	4845      	ldr	r0, [pc, #276]	; (80028c0 <HAL_SD_MspInit+0x1c0>)
 80027aa:	f003 f897 	bl	80058dc <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80027ae:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027b0:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_SD_MspInit+0x1c8>)
 80027b2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80027b4:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ba:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027bc:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c2:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ce:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d0:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027de:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80027e0:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027e2:	2220      	movs	r2, #32
 80027e4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027ee:	2204      	movs	r2, #4
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027f4:	2203      	movs	r2, #3
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 80027fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 8002802:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002808:	482e      	ldr	r0, [pc, #184]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 800280a:	f002 fcc3 	bl	8005194 <HAL_DMA_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8002814:	f7ff f890 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
 800281e:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <HAL_SD_MspInit+0x1c4>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_SD_MspInit+0x1d0>)
 8002828:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 800282c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002830:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002844:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800284c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002850:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002854:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002858:	2220      	movs	r2, #32
 800285a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002864:	2204      	movs	r2, #4
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 800286a:	2203      	movs	r2, #3
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002870:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002878:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800287e:	4813      	ldr	r0, [pc, #76]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002880:	f002 fc88 	bl	8005194 <HAL_DMA_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800288a:	f7ff f855 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_SD_MspInit+0x1cc>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2105      	movs	r1, #5
 800289e:	2031      	movs	r0, #49	; 0x31
 80028a0:	f002 fc4e 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80028a4:	2031      	movs	r0, #49	; 0x31
 80028a6:	f002 fc67 	bl	8005178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00
 80028c4:	2000cca8 	.word	0x2000cca8
 80028c8:	40026458 	.word	0x40026458
 80028cc:	20014e28 	.word	0x20014e28
 80028d0:	400264a0 	.word	0x400264a0

080028d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	; 0x38
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a68      	ldr	r2, [pc, #416]	; (8002a94 <HAL_SPI_MspInit+0x1c0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d131      	bne.n	800295a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028f6:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80028fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a61      	ldr	r2, [pc, #388]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8002926:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002938:	2305      	movs	r3, #5
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	4619      	mov	r1, r3
 8002942:	4856      	ldr	r0, [pc, #344]	; (8002a9c <HAL_SPI_MspInit+0x1c8>)
 8002944:	f002 ffca 	bl	80058dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2105      	movs	r1, #5
 800294c:	2023      	movs	r0, #35	; 0x23
 800294e:	f002 fbf7 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002952:	2023      	movs	r0, #35	; 0x23
 8002954:	f002 fc10 	bl	8005178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002958:	e097      	b.n	8002a8a <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_SPI_MspInit+0x1cc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d131      	bne.n	80029c8 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 800296a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297c:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a45      	ldr	r2, [pc, #276]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002994:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a6:	2305      	movs	r3, #5
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ae:	4619      	mov	r1, r3
 80029b0:	483c      	ldr	r0, [pc, #240]	; (8002aa4 <HAL_SPI_MspInit+0x1d0>)
 80029b2:	f002 ff93 	bl	80058dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2105      	movs	r1, #5
 80029ba:	2024      	movs	r0, #36	; 0x24
 80029bc:	f002 fbc0 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80029c0:	2024      	movs	r0, #36	; 0x24
 80029c2:	f002 fbd9 	bl	8005178 <HAL_NVIC_EnableIRQ>
}
 80029c6:	e060      	b.n	8002a8a <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a36      	ldr	r2, [pc, #216]	; (8002aa8 <HAL_SPI_MspInit+0x1d4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d15b      	bne.n	8002a8a <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a30      	ldr	r2, [pc, #192]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a24      	ldr	r2, [pc, #144]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_SPI_MspInit+0x1c4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a32:	4619      	mov	r1, r3
 8002a34:	4819      	ldr	r0, [pc, #100]	; (8002a9c <HAL_SPI_MspInit+0x1c8>)
 8002a36:	f002 ff51 	bl	80058dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a52:	4619      	mov	r1, r3
 8002a54:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <HAL_SPI_MspInit+0x1d0>)
 8002a56:	f002 ff41 	bl	80058dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a5a:	2318      	movs	r3, #24
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a6a:	2306      	movs	r3, #6
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	4619      	mov	r1, r3
 8002a74:	480b      	ldr	r0, [pc, #44]	; (8002aa4 <HAL_SPI_MspInit+0x1d0>)
 8002a76:	f002 ff31 	bl	80058dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2105      	movs	r1, #5
 8002a7e:	2033      	movs	r0, #51	; 0x33
 8002a80:	f002 fb5e 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002a84:	2033      	movs	r0, #51	; 0x33
 8002a86:	f002 fb77 	bl	8005178 <HAL_NVIC_EnableIRQ>
}
 8002a8a:	bf00      	nop
 8002a8c:	3738      	adds	r7, #56	; 0x38
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40013000 	.word	0x40013000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40003800 	.word	0x40003800
 8002aa4:	40020400 	.word	0x40020400
 8002aa8:	40003c00 	.word	0x40003c00

08002aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_UART_MspInit+0x7c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d128      	bne.n	8002b20 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_UART_MspInit+0x80>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_UART_MspInit+0x80>)
 8002ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_UART_MspInit+0x80>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_UART_MspInit+0x80>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_UART_MspInit+0x80>)
 8002aec:	f043 0310 	orr.w	r3, r3, #16
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_UART_MspInit+0x80>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002afe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002b10:	2308      	movs	r3, #8
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <HAL_UART_MspInit+0x84>)
 8002b1c:	f002 fede 	bl	80058dc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002b20:	bf00      	nop
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40007800 	.word	0x40007800
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	2019      	movs	r0, #25
 8002b4a:	f002 faf9 	bl	8005140 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002b4e:	2019      	movs	r0, #25
 8002b50:	f002 fb12 	bl	8005178 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_InitTick+0xa0>)
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_InitTick+0xa0>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_InitTick+0xa0>)
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b6c:	f107 0210 	add.w	r2, r7, #16
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f004 fece 	bl	8007918 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002b7c:	f004 feb8 	bl	80078f0 <HAL_RCC_GetPCLK2Freq>
 8002b80:	4603      	mov	r3, r0
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <HAL_InitTick+0xa4>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	3b01      	subs	r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_InitTick+0xa8>)
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_InitTick+0xac>)
 8002b98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_InitTick+0xa8>)
 8002b9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <HAL_InitTick+0xa8>)
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_InitTick+0xa8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_InitTick+0xa8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002bb4:	4809      	ldr	r0, [pc, #36]	; (8002bdc <HAL_InitTick+0xa8>)
 8002bb6:	f007 fbe0 	bl	800a37a <HAL_TIM_Base_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002bc0:	4806      	ldr	r0, [pc, #24]	; (8002bdc <HAL_InitTick+0xa8>)
 8002bc2:	f007 fc0f 	bl	800a3e4 <HAL_TIM_Base_Start_IT>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3730      	adds	r7, #48	; 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	20014e90 	.word	0x20014e90
 8002be0:	40010000 	.word	0x40010000

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c1e:	f007 fc0b 	bl	800a438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20014e90 	.word	0x20014e90

08002c2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <SPI1_IRQHandler+0x10>)
 8002c32:	f006 ff39 	bl	8009aa8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20010d08 	.word	0x20010d08

08002c40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <SPI2_IRQHandler+0x10>)
 8002c46:	f006 ff2f 	bl	8009aa8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000887c 	.word	0x2000887c

08002c54 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <SDMMC1_IRQHandler+0x10>)
 8002c5a:	f005 fcb7 	bl	80085cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200089c4 	.word	0x200089c4

08002c68 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <SPI3_IRQHandler+0x10>)
 8002c6e:	f006 ff1b 	bl	8009aa8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000aa4c 	.word	0x2000aa4c

08002c7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <DMA2_Stream3_IRQHandler+0x10>)
 8002c82:	f002 fbb7 	bl	80053f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000cca8 	.word	0x2000cca8

08002c90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <OTG_FS_IRQHandler+0x10>)
 8002c96:	f003 f92a 	bl	8005eee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20016cb8 	.word	0x20016cb8

08002ca4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <DMA2_Stream6_IRQHandler+0x10>)
 8002caa:	f002 fba3 	bl	80053f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20014e28 	.word	0x20014e28

08002cb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e00a      	b.n	8002ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cca:	f3af 8000 	nop.w
 8002cce:	4601      	mov	r1, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	60ba      	str	r2, [r7, #8]
 8002cd6:	b2ca      	uxtb	r2, r1
 8002cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	dbf0      	blt.n	8002cca <_read+0x12>
	}

return len;
 8002ce8:	687b      	ldr	r3, [r7, #4]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e009      	b.n	8002d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	60ba      	str	r2, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbf1      	blt.n	8002d04 <_write+0x12>
	}
	return len;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_close>:

int _close(int file)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	605a      	str	r2, [r3, #4]
	return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <_isatty>:

int _isatty(int file)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
	return 1;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
	return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <_sbrk+0x50>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_sbrk+0x16>
		heap_end = &end;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <_sbrk+0x50>)
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <_sbrk+0x54>)
 8002da8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <_sbrk+0x50>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <_sbrk+0x50>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	466a      	mov	r2, sp
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d907      	bls.n	8002dce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002dbe:	f013 ff85 	bl	8016ccc <__errno>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	230c      	movs	r3, #12
 8002dc6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	e006      	b.n	8002ddc <_sbrk+0x48>
	}

	heap_end += incr;
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <_sbrk+0x50>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a03      	ldr	r2, [pc, #12]	; (8002de4 <_sbrk+0x50>)
 8002dd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000318 	.word	0x20000318
 8002de8:	200170c0 	.word	0x200170c0

08002dec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <SystemInit+0x5c>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <SystemInit+0x5c>)
 8002df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <SystemInit+0x60>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <SystemInit+0x60>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <SystemInit+0x60>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <SystemInit+0x60>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	490d      	ldr	r1, [pc, #52]	; (8002e4c <SystemInit+0x60>)
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <SystemInit+0x64>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <SystemInit+0x60>)
 8002e20:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <SystemInit+0x68>)
 8002e22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <SystemInit+0x60>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <SystemInit+0x60>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <SystemInit+0x60>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SystemInit+0x5c>)
 8002e38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e3c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	fef6ffff 	.word	0xfef6ffff
 8002e54:	24003010 	.word	0x24003010

08002e58 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b0b3      	sub	sp, #204	; 0xcc
 8002e5c:	af06      	add	r7, sp, #24
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	72fb      	strb	r3, [r7, #11]
 8002e66:	4613      	mov	r3, r2
 8002e68:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	2296      	movs	r2, #150	; 0x96
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f013 ff6f 	bl	8016d56 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	7aba      	ldrb	r2, [r7, #10]
 8002e7c:	f107 0010 	add.w	r0, r7, #16
 8002e80:	9202      	str	r2, [sp, #8]
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	2301      	movs	r3, #1
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a41      	ldr	r2, [pc, #260]	; (8002f90 <logSensor+0x138>)
 8002e8c:	2196      	movs	r1, #150	; 0x96
 8002e8e:	f014 f887 	bl	8016fa0 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8002e92:	7abb      	ldrb	r3, [r7, #10]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <logSensor+0x46>
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d01d      	beq.n	8002ed8 <logSensor+0x80>
 8002e9c:	e055      	b.n	8002f4a <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd f9b1 	bl	8000210 <strlen>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	1898      	adds	r0, r3, r2
 8002eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ec6:	6892      	ldr	r2, [r2, #8]
 8002ec8:	9201      	str	r2, [sp, #4]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <logSensor+0x13c>)
 8002ed0:	2196      	movs	r1, #150	; 0x96
 8002ed2:	f014 f865 	bl	8016fa0 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8002ed6:	e04e      	b.n	8002f76 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd f994 	bl	8000210 <strlen>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8002ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ef4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ef8:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002efe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f02:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f0c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f16:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f20:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f2a:	461e      	mov	r6, r3
 8002f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	9305      	str	r3, [sp, #20]
 8002f34:	9604      	str	r6, [sp, #16]
 8002f36:	9503      	str	r5, [sp, #12]
 8002f38:	9402      	str	r4, [sp, #8]
 8002f3a:	9101      	str	r1, [sp, #4]
 8002f3c:	9200      	str	r2, [sp, #0]
 8002f3e:	4663      	mov	r3, ip
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <logSensor+0x140>)
 8002f42:	2196      	movs	r1, #150	; 0x96
 8002f44:	f014 f82c 	bl	8016fa0 <sniprintf>
	}
		break;
 8002f48:	e015      	b.n	8002f76 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd f95e 	bl	8000210 <strlen>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <logSensor+0x144>)
 8002f5e:	461d      	mov	r5, r3
 8002f60:	4614      	mov	r4, r2
 8002f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f64:	6028      	str	r0, [r5, #0]
 8002f66:	6069      	str	r1, [r5, #4]
 8002f68:	60aa      	str	r2, [r5, #8]
 8002f6a:	60eb      	str	r3, [r5, #12]
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	6128      	str	r0, [r5, #16]
 8002f70:	7923      	ldrb	r3, [r4, #4]
 8002f72:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8002f74:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <logSensor+0x148>)
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	f107 0110 	add.w	r1, r7, #16
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2200      	movs	r2, #0
 8002f82:	f00f fe5b 	bl	8012c3c <osMessageQueuePut>
 8002f86:	4603      	mov	r3, r0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	37b4      	adds	r7, #180	; 0xb4
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f90:	08019b24 	.word	0x08019b24
 8002f94:	08019b34 	.word	0x08019b34
 8002f98:	08019b44 	.word	0x08019b44
 8002f9c:	08019b64 	.word	0x08019b64
 8002fa0:	20010d6c 	.word	0x20010d6c

08002fa4 <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b0ac      	sub	sp, #176	; 0xb0
 8002faa:	af04      	add	r7, sp, #16
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	2296      	movs	r2, #150	; 0x96
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f013 fec9 	bl	8016d56 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 8002fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fcc:	f107 0008 	add.w	r0, r7, #8
 8002fd0:	9202      	str	r2, [sp, #8]
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <logEstimatorVar+0x60>)
 8002fdc:	2196      	movs	r1, #150	; 0x96
 8002fde:	f013 ffdf 	bl	8016fa0 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <logEstimatorVar+0x64>)
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	f107 0108 	add.w	r1, r7, #8
 8002fea:	2300      	movs	r3, #0
 8002fec:	2200      	movs	r2, #0
 8002fee:	f00f fe25 	bl	8012c3c <osMessageQueuePut>
 8002ff2:	4603      	mov	r3, r0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	37a0      	adds	r7, #160	; 0xa0
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ffe:	b004      	add	sp, #16
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	08019b88 	.word	0x08019b88
 8003008:	20010d6c 	.word	0x20010d6c

0800300c <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 800300c:	b40f      	push	{r0, r1, r2, r3}
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003014:	2301      	movs	r3, #1
 8003016:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <UsbPrint+0x60>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f00f fb16 	bl	8012650 <osMutexAcquire>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	21c8      	movs	r1, #200	; 0xc8
 8003036:	480e      	ldr	r0, [pc, #56]	; (8003070 <UsbPrint+0x64>)
 8003038:	f014 f812 	bl	8017060 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 800303c:	480c      	ldr	r0, [pc, #48]	; (8003070 <UsbPrint+0x64>)
 800303e:	f7fd f8e7 	bl	8000210 <strlen>
 8003042:	4603      	mov	r3, r0
 8003044:	b29b      	uxth	r3, r3
 8003046:	4619      	mov	r1, r3
 8003048:	4809      	ldr	r0, [pc, #36]	; (8003070 <UsbPrint+0x64>)
 800304a:	f013 f995 	bl	8016378 <CDC_Transmit_FS>
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <UsbPrint+0x60>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f00f fb58 	bl	801270c <osMutexRelease>
	}
#endif
	return ret;
 800305c:	79fb      	ldrb	r3, [r7, #7]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003068:	b004      	add	sp, #16
 800306a:	4770      	bx	lr
 800306c:	2000cc48 	.word	0x2000cc48
 8003070:	2000aab0 	.word	0x2000aab0
 8003074:	00000000 	.word	0x00000000

08003078 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800307e:	af00      	add	r7, sp, #0
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	4618      	mov	r0, r3
 800308a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800308e:	461a      	mov	r2, r3
 8003090:	2100      	movs	r1, #0
 8003092:	f013 fe60 	bl	8016d56 <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 80030a6:	f107 0310 	add.w	r3, r7, #16
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	6053      	str	r3, [r2, #4]
 80030b2:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 80030de:	2301      	movs	r3, #1
 80030e0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80030e4:	f00f f8d4 	bl	8012290 <osKernelGetTickCount>
 80030e8:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80030ec:	f00f f8f8 	bl	80122e0 <osKernelGetTickFreq>
 80030f0:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80030f4:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80030f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80030fc:	4413      	add	r3, r2
 80030fe:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 8003102:	f107 021c 	add.w	r2, r7, #28
 8003106:	f107 0110 	add.w	r1, r7, #16
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	4618      	mov	r0, r3
 8003110:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 8003114:	f000 f898 	bl	8003248 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8003124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003128:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	eeb1 7a67 	vneg.f32	s14, s15
 8003138:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 800313c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003140:	f107 0310 	add.w	r3, r7, #16
 8003144:	edd3 6a01 	vldr	s13, [r3, #4]
 8003148:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 800314c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003150:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	edd3 6a02 	vldr	s13, [r3, #8]
 800315c:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8003160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003164:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8003168:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 800316c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003170:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 8003174:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8003178:	f7fd fa06 	bl	8000588 <__aeabi_f2d>
 800317c:	4603      	mov	r3, r0
 800317e:	460c      	mov	r4, r1
 8003180:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8003228 <vTaskController+0x1b0>
 8003184:	ec44 3b10 	vmov	d0, r3, r4
 8003188:	f014 fe0d 	bl	8017da6 <fmin>
 800318c:	eeb0 7a40 	vmov.f32	s14, s0
 8003190:	eef0 7a60 	vmov.f32	s15, s1
 8003194:	eeb0 1a47 	vmov.f32	s2, s14
 8003198:	eef0 1a67 	vmov.f32	s3, s15
 800319c:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8003230 <vTaskController+0x1b8>
 80031a0:	f014 fdda 	bl	8017d58 <fmax>
 80031a4:	ec54 3b10 	vmov	r3, r4, d0
 80031a8:	4618      	mov	r0, r3
 80031aa:	4621      	mov	r1, r4
 80031ac:	f7fd fd14 	bl	8000bd8 <__aeabi_d2f>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 80031b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031c2:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80031c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ca:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80031ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d2:	ee17 0a90 	vmov	r0, s15
 80031d6:	f7fd f9d7 	bl	8000588 <__aeabi_f2d>
 80031da:	4603      	mov	r3, r0
 80031dc:	460c      	mov	r4, r1
 80031de:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003238 <vTaskController+0x1c0>
 80031e2:	ec44 3b10 	vmov	d0, r3, r4
 80031e6:	f014 fdde 	bl	8017da6 <fmin>
 80031ea:	eeb0 7a40 	vmov.f32	s14, s0
 80031ee:	eef0 7a60 	vmov.f32	s15, s1
 80031f2:	eeb0 1a47 	vmov.f32	s2, s14
 80031f6:	eef0 1a67 	vmov.f32	s3, s15
 80031fa:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003240 <vTaskController+0x1c8>
 80031fe:	f014 fdab 	bl	8017d58 <fmax>
 8003202:	ec54 3b10 	vmov	r3, r4, d0
 8003206:	4618      	mov	r0, r3
 8003208:	4621      	mov	r1, r4
 800320a:	f7fd fce5 	bl	8000bd8 <__aeabi_d2f>
 800320e:	4603      	mov	r3, r0
 8003210:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8003214:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003218:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

		/* Sleep */
		osDelayUntil(tick_count);
 800321c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8003220:	f00f f93c 	bl	801249c <osDelayUntil>
		tick_count += tick_update;
 8003224:	e766      	b.n	80030f4 <vTaskController+0x7c>
 8003226:	bf00      	nop
 8003228:	00000000 	.word	0x00000000
 800322c:	3ff00000 	.word	0x3ff00000
	...
 800323c:	40240000 	.word	0x40240000
 8003240:	00000000 	.word	0x00000000
 8003244:	c0240000 	.word	0xc0240000

08003248 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003252:	60b8      	str	r0, [r7, #8]
 8003254:	6079      	str	r1, [r7, #4]
 8003256:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e07b      	b.n	800335a <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7fd f990 	bl	8000588 <__aeabi_f2d>
 8003268:	4604      	mov	r4, r0
 800326a:	460d      	mov	r5, r1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f1c3 031d 	rsb	r3, r3, #29
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f976 	bl	8000564 <__aeabi_i2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	ec43 2b11 	vmov	d1, r2, r3
 8003280:	ec45 4b10 	vmov	d0, r4, r5
 8003284:	f014 fde2 	bl	8017e4c <pow>
 8003288:	ec54 3b10 	vmov	r3, r4, d0
 800328c:	4618      	mov	r0, r3
 800328e:	4621      	mov	r1, r4
 8003290:	f7fd fc82 	bl	8000b98 <__aeabi_d2uiz>
 8003294:	4603      	mov	r3, r0
 8003296:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	ed93 7a00 	vldr	s14, [r3]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	edd3 6a00 	vldr	s13, [r3]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	ed93 7a00 	vldr	s14, [r3]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	edd3 6a00 	vldr	s13, [r3]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f0:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3308      	adds	r3, #8
 80032f8:	ed93 7a00 	vldr	s14, [r3]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	edd3 6a00 	vldr	s13, [r3]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3308      	adds	r3, #8
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	ed93 7a00 	vldr	s14, [r3]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	edd3 6a00 	vldr	s13, [r3]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3301      	adds	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b1d      	cmp	r3, #29
 800335e:	dd80      	ble.n	8003262 <CalcPolynomial+0x1a>
	}

}
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bdb0      	pop	{r4, r5, r7, pc}

08003368 <vTaskFSM>:
void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *env);

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection);


void vTaskFSM(void *argument) {
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b0ae      	sub	sp, #184	; 0xb8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003370:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 800337c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f9ab 	bl	80036dc <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8003386:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800338a:	223c      	movs	r2, #60	; 0x3c
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f013 fce1 	bl	8016d56 <memset>
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 8003394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003398:	223c      	movs	r2, #60	; 0x3c
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f013 fcda 	bl	8016d56 <memset>

	/* environment data */
	env environment;
	env dummy_env;
	init_env(&dummy_env);
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fde6 	bl	8000f78 <init_env>
	init_env(&environment);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd fde1 	bl	8000f78 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80033b6:	f00e ff6b 	bl	8012290 <osKernelGetTickCount>
 80033ba:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80033be:	f00e ff8f 	bl	80122e0 <osKernelGetTickFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <vTaskFSM+0x150>)
 80033c6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80033d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033d8:	4413      	add	r3, r2
 80033da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <vTaskFSM+0x154>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f00f f9e2 	bl	80127ac <osMutexGetOwner>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d123      	bne.n	8003436 <vTaskFSM+0xce>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data;
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <vTaskFSM+0x158>)
 80033f0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80033f4:	461d      	mov	r5, r3
 80033f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003402:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <vTaskFSM+0x154>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f00f f9cc 	bl	80127ac <osMutexGetOwner>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <vTaskFSM+0xce>
				state_est_data_fsm = state_est_data_fsm_dummy;
 800341a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800341e:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8003422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}
		/* Update Environment */
		if(osMutexGetOwner(environment_mutex) == NULL){
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <vTaskFSM+0x15c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f00f f9b6 	bl	80127ac <osMutexGetOwner>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d114      	bne.n	8003470 <vTaskFSM+0x108>
			dummy_env = global_env;
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <vTaskFSM+0x160>)
 8003448:	f107 040c 	add.w	r4, r7, #12
 800344c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800344e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <vTaskFSM+0x154>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f00f f9a8 	bl	80127ac <osMutexGetOwner>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <vTaskFSM+0x108>
				environment = dummy_env;
 8003462:	f107 041c 	add.w	r4, r7, #28
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800346c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8003470:	f107 021c 	add.w	r2, r7, #28
 8003474:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003478:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f82b 	bl	80034d8 <detect_flight_phase>

		/* TODO Write NEW State in GLobal Variable */
		if(osMutexAcquire(fsm_mutex, 10) == osOK){
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <vTaskFSM+0x164>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	210a      	movs	r1, #10
 8003488:	4618      	mov	r0, r3
 800348a:	f00f f8e1 	bl	8012650 <osMutexAcquire>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10c      	bne.n	80034ae <vTaskFSM+0x146>
			global_flight_phase_detection = flight_phase_detection;
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <vTaskFSM+0x168>)
 8003496:	461c      	mov	r4, r3
 8003498:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800349c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(fsm_mutex);
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <vTaskFSM+0x164>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f00f f92f 	bl	801270c <osMutexRelease>
		}

		/* Sleep */
		osDelayUntil(tick_count);
 80034ae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80034b2:	f00e fff3 	bl	801249c <osDelayUntil>
		tick_count += tick_update;
 80034b6:	e78b      	b.n	80033d0 <vTaskFSM+0x68>
 80034b8:	51eb851f 	.word	0x51eb851f
 80034bc:	2000abe8 	.word	0x2000abe8
 80034c0:	200002c0 	.word	0x200002c0
 80034c4:	200089c0 	.word	0x200089c0
 80034c8:	200002fc 	.word	0x200002fc
 80034cc:	20008878 	.word	0x20008878
 80034d0:	2000030c 	.word	0x2000030c
 80034d4:	00000000 	.word	0x00000000

080034d8 <detect_flight_phase>:
}


void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *environment)

{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	f200 80a6 	bhi.w	800363c <detect_flight_phase+0x164>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <detect_flight_phase+0x20>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	0800363d 	.word	0x0800363d
 8003500:	0800355b 	.word	0x0800355b
 8003504:	080035a5 	.word	0x080035a5
 8003508:	080035ef 	.word	0x080035ef
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 > 20) {
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003518:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80036d8 <detect_flight_phase+0x200>
 800351c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003520:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	dc00      	bgt.n	8003530 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800352e:	e087      	b.n	8003640 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	b25a      	sxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003548:	2b03      	cmp	r3, #3
 800354a:	dd79      	ble.n	8003640 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2203      	movs	r2, #3
 8003550:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	721a      	strb	r2, [r3, #8]
        break;
 8003558:	e072      	b.n	8003640 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 < 0) {
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003566:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80036d8 <detect_flight_phase+0x200>
 800356a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800356e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003576:	d400      	bmi.n	800357a <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003578:	e064      	b.n	8003644 <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	b25a      	sxtb	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003592:	2b03      	cmp	r3, #3
 8003594:	dd56      	ble.n	8003644 <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2204      	movs	r2, #4
 800359a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	721a      	strb	r2, [r3, #8]
        break;
 80035a2:	e04f      	b.n	8003644 <detect_flight_phase+0x16c>

        case COASTING:
            if (((float)(state_est_data->velocity_world[2]))/1000 < 0) {
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	ee07 3a90 	vmov	s15, r3
 80035ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035b0:	eddf 6a49 	vldr	s13, [pc, #292]	; 80036d8 <detect_flight_phase+0x200>
 80035b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c0:	d400      	bmi.n	80035c4 <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80035c2:	e041      	b.n	8003648 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	b25a      	sxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	dd33      	ble.n	8003648 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2205      	movs	r2, #5
 80035e4:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	721a      	strb	r2, [r3, #8]
        break;
 80035ec:	e02c      	b.n	8003648 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2]))/1000 < 20) {
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035fa:	eddf 6a37 	vldr	s13, [pc, #220]	; 80036d8 <detect_flight_phase+0x200>
 80035fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003602:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800360a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360e:	d400      	bmi.n	8003612 <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003610:	e01c      	b.n	800364c <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	b25a      	sxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800362a:	2b03      	cmp	r3, #3
 800362c:	dd0e      	ble.n	800364c <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2206      	movs	r2, #6
 8003632:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	721a      	strb	r2, [r3, #8]
        break;
 800363a:	e007      	b.n	800364c <detect_flight_phase+0x174>

        default:
        break;
 800363c:	bf00      	nop
 800363e:	e006      	b.n	800364e <detect_flight_phase+0x176>
        break;
 8003640:	bf00      	nop
 8003642:	e004      	b.n	800364e <detect_flight_phase+0x176>
        break;
 8003644:	bf00      	nop
 8003646:	e002      	b.n	800364e <detect_flight_phase+0x176>
        break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <detect_flight_phase+0x176>
        break;
 800364c:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(environment, ((float)state_est_data->velocity_rocket[0])/1000);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80036d8 <detect_flight_phase+0x200>
 800365e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003662:	eeb0 0a66 	vmov.f32	s0, s13
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fcda 	bl	8001020 <mach_number>
 800366c:	eef0 7a40 	vmov.f32	s15, s0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff84 	bl	8000588 <__aeabi_f2d>
 8003680:	a311      	add	r3, pc, #68	; (adr r3, 80036c8 <detect_flight_phase+0x1f0>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f7fd fa5d 	bl	8000b44 <__aeabi_dcmpge>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2203      	movs	r2, #3
 8003694:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }


}
 8003696:	e013      	b.n	80036c0 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc ff73 	bl	8000588 <__aeabi_f2d>
 80036a2:	a30b      	add	r3, pc, #44	; (adr r3, 80036d0 <detect_flight_phase+0x1f8>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fd fa4c 	bl	8000b44 <__aeabi_dcmpge>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	705a      	strb	r2, [r3, #1]
}
 80036b8:	e002      	b.n	80036c0 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	705a      	strb	r2, [r3, #1]
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	cccccccd 	.word	0xcccccccd
 80036cc:	3ff4cccc 	.word	0x3ff4cccc
 80036d0:	9999999a 	.word	0x9999999a
 80036d4:	3fe99999 	.word	0x3fe99999
 80036d8:	447a0000 	.word	0x447a0000

080036dc <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	721a      	strb	r2, [r3, #8]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <vTaskMotorCont>:

uint16_t calculateCRC(uint8_t *data, uint8_t len);

uint8_t rx_data[10] = { 0 };

void vTaskMotorCont(void *argument) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b090      	sub	sp, #64	; 0x40
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003714:	f00e fdbc 	bl	8012290 <osKernelGetTickCount>
 8003718:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 800371a:	f00e fde1 	bl	80122e0 <osKernelGetTickFreq>
 800371e:	6378      	str	r0, [r7, #52]	; 0x34
	uint8_t counter = 10;
 8003720:	230a      	movs	r3, #10
 8003722:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	for (;;) {
		tick_count += tick_update;
 8003726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	4413      	add	r3, r2
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Command */
		uint8_t byte_stream_read[10] = { 0 };
 800372e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	811a      	strh	r2, [r3, #8]
		byte_stream_read[0] = 0x90;		// DLE
 800373a:	2390      	movs	r3, #144	; 0x90
 800373c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		byte_stream_read[1] = 0x02;		// STX
 8003740:	2302      	movs	r3, #2
 8003742:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		byte_stream_read[2] = 0x60;		// Read Object
 8003746:	2360      	movs	r3, #96	; 0x60
 8003748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		byte_stream_read[3] = 0x02;		// Length of stuff sent
 800374c:	2302      	movs	r3, #2
 800374e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		byte_stream_read[4] = 0x01;		// Node ID
 8003752:	2301      	movs	r3, #1
 8003754:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		byte_stream_read[5] = 0x7A;		// Index Low Byte
 8003758:	237a      	movs	r3, #122	; 0x7a
 800375a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		byte_stream_read[6] = 0x60;		// Index High byte
 800375e:	2360      	movs	r3, #96	; 0x60
 8003760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		byte_stream_read[7] = 0x00;		// Subindex of object
 8003764:	2300      	movs	r3, #0
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		/* CRC data array */
		uint8_t crc_data_array[6] = { 0 };
 800376a:	f107 031c 	add.w	r3, r7, #28
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	809a      	strh	r2, [r3, #4]
		memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8003774:	f107 031c 	add.w	r3, r7, #28
 8003778:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800377c:	6810      	ldr	r0, [r2, #0]
 800377e:	6018      	str	r0, [r3, #0]
 8003780:	8892      	ldrh	r2, [r2, #4]
 8003782:	809a      	strh	r2, [r3, #4]

		uint16_t crc_calc = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	867b      	strh	r3, [r7, #50]	; 0x32
		crc_calc = calculateCRC(crc_data_array, 6);
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	2106      	movs	r1, #6
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f8ca 	bl	8003928 <calculateCRC>
 8003794:	4603      	mov	r3, r0
 8003796:	867b      	strh	r3, [r7, #50]	; 0x32

		byte_stream_read[8] = crc_calc & 0xFF;;		// CRC low byte
 8003798:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 80037a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		byte_stream_read[8] = 0x6C;		// CRC low byte
 80037ac:	236c      	movs	r3, #108	; 0x6c
 80037ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = 0xE6;		// CRC high byte
 80037b2:	23e6      	movs	r3, #230	; 0xe6
 80037b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


		/* rx buffer */
		HAL_StatusTypeDef status;
		status = HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 80037b8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80037bc:	230a      	movs	r3, #10
 80037be:	220a      	movs	r2, #10
 80037c0:	484e      	ldr	r0, [pc, #312]	; (80038fc <vTaskMotorCont+0x1f0>)
 80037c2:	f007 f88d 	bl	800a8e0 <HAL_UART_Transmit>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		HAL_UART_Receive_IT(&huart7, rx_data, 10);
 80037cc:	220a      	movs	r2, #10
 80037ce:	494c      	ldr	r1, [pc, #304]	; (8003900 <vTaskMotorCont+0x1f4>)
 80037d0:	484a      	ldr	r0, [pc, #296]	; (80038fc <vTaskMotorCont+0x1f0>)
 80037d2:	f007 f917 	bl	800aa04 <HAL_UART_Receive_IT>

		uint8_t byte_stream_write[14] = { 0 };
 80037d6:	f107 030c 	add.w	r3, r7, #12
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	819a      	strh	r2, [r3, #12]

		if (counter > 20){
 80037e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80037e8:	2b14      	cmp	r3, #20
 80037ea:	d907      	bls.n	80037fc <vTaskMotorCont+0xf0>
			counter = 10;
 80037ec:	230a      	movs	r3, #10
 80037ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			byte_stream_write[12] = 0x41;		// CRC low byte
 80037f2:	2341      	movs	r3, #65	; 0x41
 80037f4:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0xBF;		// CRC high byte
 80037f6:	23bf      	movs	r3, #191	; 0xbf
 80037f8:	767b      	strb	r3, [r7, #25]
 80037fa:	e006      	b.n	800380a <vTaskMotorCont+0xfe>
		}
		else{
			byte_stream_write[12] = 0x87;		// CRC low byte
 80037fc:	2387      	movs	r3, #135	; 0x87
 80037fe:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0x39;		// CRC high byte
 8003800:	2339      	movs	r3, #57	; 0x39
 8003802:	767b      	strb	r3, [r7, #25]
			counter = 30;
 8003804:	231e      	movs	r3, #30
 8003806:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		/* Write Command */

		byte_stream_write[0] = 0x90;		// DLE
 800380a:	2390      	movs	r3, #144	; 0x90
 800380c:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 800380e:	2302      	movs	r3, #2
 8003810:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 8003812:	2368      	movs	r3, #104	; 0x68
 8003814:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 8003816:	2304      	movs	r3, #4
 8003818:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 800381a:	2301      	movs	r3, #1
 800381c:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x7A;		// Index Low Byte
 800381e:	237a      	movs	r3, #122	; 0x7a
 8003820:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 8003822:	2360      	movs	r3, #96	; 0x60
 8003824:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 8003826:	2300      	movs	r3, #0
 8003828:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = counter;		// Data LSB
 800382a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800382e:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 8003830:	2300      	movs	r3, #0
 8003832:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 8003834:	2300      	movs	r3, #0
 8003836:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
//		byte_stream_write[12] = 0x41;		// CRC low byte
//		byte_stream_write[13] = 0xBF;		// CRC high byte
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 800383c:	f107 010c 	add.w	r1, r7, #12
 8003840:	230a      	movs	r3, #10
 8003842:	220e      	movs	r2, #14
 8003844:	482d      	ldr	r0, [pc, #180]	; (80038fc <vTaskMotorCont+0x1f0>)
 8003846:	f007 f84b 	bl	800a8e0 <HAL_UART_Transmit>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 8003850:	2001      	movs	r0, #1
 8003852:	f00e fdf5 	bl	8012440 <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 8003856:	2390      	movs	r3, #144	; 0x90
 8003858:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 800385a:	2302      	movs	r3, #2
 800385c:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 800385e:	2368      	movs	r3, #104	; 0x68
 8003860:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 8003862:	2304      	movs	r3, #4
 8003864:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 8003866:	2301      	movs	r3, #1
 8003868:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 800386a:	2340      	movs	r3, #64	; 0x40
 800386c:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 800386e:	2360      	movs	r3, #96	; 0x60
 8003870:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 8003872:	2300      	movs	r3, #0
 8003874:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x3F;		// Data LSB
 8003876:	233f      	movs	r3, #63	; 0x3f
 8003878:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 800387a:	2300      	movs	r3, #0
 800387c:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 800387e:	2300      	movs	r3, #0
 8003880:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0x16;		// CRC low byte
 8003886:	2316      	movs	r3, #22
 8003888:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0xC2;		// CRC high byte
 800388a:	23c2      	movs	r3, #194	; 0xc2
 800388c:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 800388e:	f107 010c 	add.w	r1, r7, #12
 8003892:	230a      	movs	r3, #10
 8003894:	220e      	movs	r2, #14
 8003896:	4819      	ldr	r0, [pc, #100]	; (80038fc <vTaskMotorCont+0x1f0>)
 8003898:	f007 f822 	bl	800a8e0 <HAL_UART_Transmit>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f00e fdcc 	bl	8012440 <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 80038a8:	2390      	movs	r3, #144	; 0x90
 80038aa:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 80038ac:	2302      	movs	r3, #2
 80038ae:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 80038b0:	2368      	movs	r3, #104	; 0x68
 80038b2:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 80038b4:	2304      	movs	r3, #4
 80038b6:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 80038b8:	2301      	movs	r3, #1
 80038ba:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 80038bc:	2340      	movs	r3, #64	; 0x40
 80038be:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 80038c0:	2360      	movs	r3, #96	; 0x60
 80038c2:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 80038c4:	2300      	movs	r3, #0
 80038c6:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x0F;		// Data LSB
 80038c8:	230f      	movs	r3, #15
 80038ca:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 80038cc:	2300      	movs	r3, #0
 80038ce:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 80038d0:	2300      	movs	r3, #0
 80038d2:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0xB3;		// CRC low byte
 80038d8:	23b3      	movs	r3, #179	; 0xb3
 80038da:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0x07;		// CRC high byte
 80038dc:	2307      	movs	r3, #7
 80038de:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 80038e0:	f107 010c 	add.w	r1, r7, #12
 80038e4:	230a      	movs	r3, #10
 80038e6:	220e      	movs	r2, #14
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <vTaskMotorCont+0x1f0>)
 80038ea:	f006 fff9 	bl	800a8e0 <HAL_UART_Transmit>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31


		osDelayUntil(tick_count);
 80038f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038f6:	f00e fdd1 	bl	801249c <osDelayUntil>
	for (;;) {
 80038fa:	e714      	b.n	8003726 <vTaskMotorCont+0x1a>
 80038fc:	200088e0 	.word	0x200088e0
 8003900:	2000031c 	.word	0x2000031c

08003904 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart7, rx_data, sizeof(rx_data));
 800390c:	220a      	movs	r2, #10
 800390e:	4904      	ldr	r1, [pc, #16]	; (8003920 <HAL_UART_RxCpltCallback+0x1c>)
 8003910:	4804      	ldr	r0, [pc, #16]	; (8003924 <HAL_UART_RxCpltCallback+0x20>)
 8003912:	f007 f877 	bl	800aa04 <HAL_UART_Receive_IT>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	2000031c 	.word	0x2000031c
 8003924:	200088e0 	.word	0x200088e0

08003928 <calculateCRC>:


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crcCalc = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e04f      	b.n	80039de <calculateCRC+0xb6>
    shifter = 0x8000;
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	82fb      	strh	r3, [r7, #22]
    if (i == 0) {
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <calculateCRC+0x42>
      c = data[i] << 8 | data[i+1];
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b21a      	sxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	440b      	add	r3, r1
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b21b      	sxth	r3, r3
 8003962:	4313      	orrs	r3, r2
 8003964:	b21b      	sxth	r3, r3
 8003966:	82bb      	strh	r3, [r7, #20]
 8003968:	e015      	b.n	8003996 <calculateCRC+0x6e>
    } else if (i == len) {
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	429a      	cmp	r2, r3
 8003970:	d102      	bne.n	8003978 <calculateCRC+0x50>
      c = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	82bb      	strh	r3, [r7, #20]
 8003976:	e00e      	b.n	8003996 <calculateCRC+0x6e>
    } else {
      c = data[i+1] << 8 | data[i];
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3301      	adds	r3, #1
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	b21a      	sxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	440b      	add	r3, r1
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b21b      	sxth	r3, r3
 8003990:	4313      	orrs	r3, r2
 8003992:	b21b      	sxth	r3, r3
 8003994:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crcCalc & 0x8000;
 8003996:	8a7b      	ldrh	r3, [r7, #18]
 8003998:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800399c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80039a0:	817b      	strh	r3, [r7, #10]
      crcCalc <<= 1;
 80039a2:	8a7b      	ldrh	r3, [r7, #18]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crcCalc++;
 80039a8:	8aba      	ldrh	r2, [r7, #20]
 80039aa:	8afb      	ldrh	r3, [r7, #22]
 80039ac:	4013      	ands	r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <calculateCRC+0x92>
 80039b4:	8a7b      	ldrh	r3, [r7, #18]
 80039b6:	3301      	adds	r3, #1
 80039b8:	827b      	strh	r3, [r7, #18]
      if(carry) crcCalc ^= 0x1021;
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <calculateCRC+0xa4>
 80039c0:	8a7b      	ldrh	r3, [r7, #18]
 80039c2:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 80039cc:	8afb      	ldrh	r3, [r7, #22]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 80039d2:	8afb      	ldrh	r3, [r7, #22]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1de      	bne.n	8003996 <calculateCRC+0x6e>
  for (int i = 0; i < len + 2; i += 2) {
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3302      	adds	r3, #2
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	3302      	adds	r3, #2
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	dbaa      	blt.n	800393e <calculateCRC+0x16>
  }
  return crcCalc;
 80039e8:	8a7b      	ldrh	r3, [r7, #18]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b0cc      	sub	sp, #304	; 0x130
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003a08:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003a14:	48c1      	ldr	r0, [pc, #772]	; (8003d1c <vTaskSdCard+0x324>)
 8003a16:	f7ff faf9 	bl	800300c <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8003a1a:	48c1      	ldr	r0, [pc, #772]	; (8003d20 <vTaskSdCard+0x328>)
 8003a1c:	f7ff faf6 	bl	800300c <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8003a20:	2201      	movs	r2, #1
 8003a22:	49c0      	ldr	r1, [pc, #768]	; (8003d24 <vTaskSdCard+0x32c>)
 8003a24:	48c0      	ldr	r0, [pc, #768]	; (8003d28 <vTaskSdCard+0x330>)
 8003a26:	f00d fb27 	bl	8011078 <f_mount>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003a30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003a38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	48bb      	ldr	r0, [pc, #748]	; (8003d2c <vTaskSdCard+0x334>)
 8003a40:	f7ff fae4 	bl	800300c <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8003a44:	4bba      	ldr	r3, [pc, #744]	; (8003d30 <vTaskSdCard+0x338>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8003a4a:	2064      	movs	r0, #100	; 0x64
 8003a4c:	f00e fcf8 	bl	8012440 <osDelay>
		}
	} while (res != FR_OK);
 8003a50:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e3      	bne.n	8003a20 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8003a58:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f040 80a9 	bne.w	8003bb4 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8003a62:	48b4      	ldr	r0, [pc, #720]	; (8003d34 <vTaskSdCard+0x33c>)
 8003a64:	f7ff fad2 	bl	800300c <UsbPrint>

		unsigned int file_number = 1;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003a6e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a72:	f107 0008 	add.w	r0, r7, #8
 8003a76:	4bb0      	ldr	r3, [pc, #704]	; (8003d38 <vTaskSdCard+0x340>)
 8003a78:	4aaa      	ldr	r2, [pc, #680]	; (8003d24 <vTaskSdCard+0x32c>)
 8003a7a:	f00e fab5 	bl	8011fe8 <f_findfirst>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003a84:	e02b      	b.n	8003ade <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003a86:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003a8a:	3b30      	subs	r3, #48	; 0x30
 8003a8c:	2264      	movs	r2, #100	; 0x64
 8003a8e:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003a92:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003a96:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	18ca      	adds	r2, r1, r3
 8003aa4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003aa8:	3b30      	subs	r3, #48	; 0x30
 8003aaa:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8003ab0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d204      	bcs.n	8003ac8 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8003abe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8003ac8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003acc:	f107 0308 	add.w	r3, r7, #8
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f00e fa60 	bl	8011f98 <f_findnext>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003ade:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <vTaskSdCard+0xf6>
 8003ae6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1cb      	bne.n	8003a86 <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8003aee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8003af6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003afa:	4619      	mov	r1, r3
 8003afc:	488f      	ldr	r0, [pc, #572]	; (8003d3c <vTaskSdCard+0x344>)
 8003afe:	f7ff fa85 	bl	800300c <UsbPrint>
					res);
			goto resetSDCard;
 8003b02:	e78a      	b.n	8003a1a <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8003b04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b08:	4a8d      	ldr	r2, [pc, #564]	; (8003d40 <vTaskSdCard+0x348>)
 8003b0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003b10:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003b14:	4b8b      	ldr	r3, [pc, #556]	; (8003d44 <vTaskSdCard+0x34c>)
 8003b16:	fba3 2301 	umull	r2, r3, r3, r1
 8003b1a:	08da      	lsrs	r2, r3, #3
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	1aca      	subs	r2, r1, r3
 8003b26:	b2d3      	uxtb	r3, r2
 8003b28:	3330      	adds	r3, #48	; 0x30
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b34:	4a83      	ldr	r2, [pc, #524]	; (8003d44 <vTaskSdCard+0x34c>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	08d9      	lsrs	r1, r3, #3
 8003b3c:	4b81      	ldr	r3, [pc, #516]	; (8003d44 <vTaskSdCard+0x34c>)
 8003b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	1aca      	subs	r2, r1, r3
 8003b4e:	b2d3      	uxtb	r3, r2
 8003b50:	3330      	adds	r3, #48	; 0x30
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8003b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b5c:	4a7a      	ldr	r2, [pc, #488]	; (8003d48 <vTaskSdCard+0x350>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0959      	lsrs	r1, r3, #5
 8003b64:	4b77      	ldr	r3, [pc, #476]	; (8003d44 <vTaskSdCard+0x34c>)
 8003b66:	fba3 2301 	umull	r2, r3, r3, r1
 8003b6a:	08da      	lsrs	r2, r3, #3
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	1aca      	subs	r2, r1, r3
 8003b76:	b2d3      	uxtb	r3, r2
 8003b78:	3330      	adds	r3, #48	; 0x30
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8003b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b84:	4619      	mov	r1, r3
 8003b86:	4871      	ldr	r0, [pc, #452]	; (8003d4c <vTaskSdCard+0x354>)
 8003b88:	f7ff fa40 	bl	800300c <UsbPrint>

		res = f_closedir(&dj);
 8003b8c:	f107 0308 	add.w	r3, r7, #8
 8003b90:	4618      	mov	r0, r3
 8003b92:	f00e f993 	bl	8011ebc <f_closedir>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003b9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8003ba4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4869      	ldr	r0, [pc, #420]	; (8003d50 <vTaskSdCard+0x358>)
 8003bac:	f7ff fa2e 	bl	800300c <UsbPrint>
			goto resetSDCard;
 8003bb0:	bf00      	nop
 8003bb2:	e732      	b.n	8003a1a <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8003bb4:	4867      	ldr	r0, [pc, #412]	; (8003d54 <vTaskSdCard+0x35c>)
 8003bb6:	f7ff fa29 	bl	800300c <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003bba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bbe:	2212      	movs	r2, #18
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4865      	ldr	r0, [pc, #404]	; (8003d58 <vTaskSdCard+0x360>)
 8003bc4:	f00d fabc 	bl	8011140 <f_open>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8003bce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8003bd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bda:	4619      	mov	r1, r3
 8003bdc:	485f      	ldr	r0, [pc, #380]	; (8003d5c <vTaskSdCard+0x364>)
 8003bde:	f7ff fa15 	bl	800300c <UsbPrint>
		goto resetSDCard;
 8003be2:	e71a      	b.n	8003a1a <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8003be4:	485e      	ldr	r0, [pc, #376]	; (8003d60 <vTaskSdCard+0x368>)
 8003be6:	f7ff fa11 	bl	800300c <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8003bea:	4b5b      	ldr	r3, [pc, #364]	; (8003d58 <vTaskSdCard+0x360>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4859      	ldr	r0, [pc, #356]	; (8003d58 <vTaskSdCard+0x360>)
 8003bf2:	f00d fe97 	bl	8011924 <f_lseek>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8003bfc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d006      	beq.n	8003c12 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8003c04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4856      	ldr	r0, [pc, #344]	; (8003d64 <vTaskSdCard+0x36c>)
 8003c0c:	f7ff f9fe 	bl	800300c <UsbPrint>
		goto resetSDCard;
 8003c10:	e703      	b.n	8003a1a <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003c18:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <vTaskSdCard+0x370>)
 8003c1a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8003c1e:	461d      	mov	r5, r3
 8003c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c28:	c407      	stmia	r4!, {r0, r1, r2}
 8003c2a:	8023      	strh	r3, [r4, #0]
 8003c2c:	3402      	adds	r4, #2
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	7023      	strb	r3, [r4, #0]
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003c3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fae4 	bl	8000210 <strlen>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <vTaskSdCard+0x374>)
 8003c50:	4841      	ldr	r0, [pc, #260]	; (8003d58 <vTaskSdCard+0x360>)
 8003c52:	f00d fc3a 	bl	80114ca <f_write>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8003c5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8003c64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4841      	ldr	r0, [pc, #260]	; (8003d70 <vTaskSdCard+0x378>)
 8003c6c:	f7ff f9ce 	bl	800300c <UsbPrint>
		goto resetSDCard;
 8003c70:	e6d3      	b.n	8003a1a <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8003c72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c76:	2296      	movs	r2, #150	; 0x96
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f013 f86b 	bl	8016d56 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003c80:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <vTaskSdCard+0x37c>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f00f f849 	bl	8012d24 <osMessageQueueGet>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f3      	bne.n	8003c80 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8003c98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fab7 	bl	8000210 <strlen>
 8003ca2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 8003ca6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d015      	beq.n	8003cda <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003cae:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003cb2:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <vTaskSdCard+0x374>)
 8003cb4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003cb8:	4827      	ldr	r0, [pc, #156]	; (8003d58 <vTaskSdCard+0x360>)
 8003cba:	f00d fc06 	bl	80114ca <f_write>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8003cc4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d006      	beq.n	8003cda <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8003ccc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4827      	ldr	r0, [pc, #156]	; (8003d70 <vTaskSdCard+0x378>)
 8003cd4:	f7ff f99a 	bl	800300c <UsbPrint>
							res);
					goto resetSDCard;
 8003cd8:	e69f      	b.n	8003a1a <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8003cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8003ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cea:	ddc9      	ble.n	8003c80 <vTaskSdCard+0x288>
				msgCounter = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8003cf2:	4821      	ldr	r0, [pc, #132]	; (8003d78 <vTaskSdCard+0x380>)
 8003cf4:	f7ff f98a 	bl	800300c <UsbPrint>
				//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
				res = f_sync(&EULER_LOG_FILE);
 8003cf8:	4817      	ldr	r0, [pc, #92]	; (8003d58 <vTaskSdCard+0x360>)
 8003cfa:	f00d fd8a 	bl	8011812 <f_sync>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8003d04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0b9      	beq.n	8003c80 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8003d0c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d10:	4619      	mov	r1, r3
 8003d12:	481a      	ldr	r0, [pc, #104]	; (8003d7c <vTaskSdCard+0x384>)
 8003d14:	f7ff f97a 	bl	800300c <UsbPrint>
					goto resetSDCard;
 8003d18:	e67f      	b.n	8003a1a <vTaskSdCard+0x22>
 8003d1a:	bf00      	nop
 8003d1c:	08019ba4 	.word	0x08019ba4
 8003d20:	08019bcc 	.word	0x08019bcc
 8003d24:	08019bf0 	.word	0x08019bf0
 8003d28:	20015100 	.word	0x20015100
 8003d2c:	08019bf4 	.word	0x08019bf4
 8003d30:	20000358 	.word	0x20000358
 8003d34:	08019c20 	.word	0x08019c20
 8003d38:	08019c44 	.word	0x08019c44
 8003d3c:	08019c50 	.word	0x08019c50
 8003d40:	08019c88 	.word	0x08019c88
 8003d44:	cccccccd 	.word	0xcccccccd
 8003d48:	51eb851f 	.word	0x51eb851f
 8003d4c:	08019c94 	.word	0x08019c94
 8003d50:	08019cb8 	.word	0x08019cb8
 8003d54:	08019ce8 	.word	0x08019ce8
 8003d58:	20014ed0 	.word	0x20014ed0
 8003d5c:	08019d0c 	.word	0x08019d0c
 8003d60:	08019d38 	.word	0x08019d38
 8003d64:	08019d60 	.word	0x08019d60
 8003d68:	08019e04 	.word	0x08019e04
 8003d6c:	20015334 	.word	0x20015334
 8003d70:	08019d90 	.word	0x08019d90
 8003d74:	20010d6c 	.word	0x20010d6c
 8003d78:	08019dbc 	.word	0x08019dbc
 8003d7c:	08019ddc 	.word	0x08019ddc

08003d80 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af04      	add	r7, sp, #16
 8003d86:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003d88:	f00e fa82 	bl	8012290 <osKernelGetTickCount>
 8003d8c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8003d8e:	f00e faa7 	bl	80122e0 <osKernelGetTickFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <vTaskSensRead+0x144>)
 8003d96:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	60bb      	str	r3, [r7, #8]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4413      	add	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8003da6:	221c      	movs	r2, #28
 8003da8:	4947      	ldr	r1, [pc, #284]	; (8003ec8 <vTaskSensRead+0x148>)
 8003daa:	4848      	ldr	r0, [pc, #288]	; (8003ecc <vTaskSensRead+0x14c>)
 8003dac:	f005 fd24 	bl	80097f8 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003db0:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <vTaskSensRead+0x150>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	211e      	movs	r1, #30
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00e fc4a 	bl	8012650 <osMutexAcquire>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d110      	bne.n	8003de4 <vTaskSensRead+0x64>
			sb3_baro = sb3_data.baro;
 8003dc2:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <vTaskSensRead+0x154>)
 8003dc4:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <vTaskSensRead+0x148>)
 8003dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8003dcc:	4a42      	ldr	r2, [pc, #264]	; (8003ed8 <vTaskSensRead+0x158>)
 8003dce:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <vTaskSensRead+0x148>)
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 8003dda:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <vTaskSensRead+0x150>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f00e fc94 	bl	801270c <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003de4:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <vTaskSensRead+0x15c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	211e      	movs	r1, #30
 8003dea:	4618      	mov	r0, r3
 8003dec:	f00e fc30 	bl	8012650 <osMutexAcquire>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d110      	bne.n	8003e18 <vTaskSensRead+0x98>
			sb2_baro = sb3_data.baro;
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <vTaskSensRead+0x160>)
 8003df8:	4a33      	ldr	r2, [pc, #204]	; (8003ec8 <vTaskSensRead+0x148>)
 8003dfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 8003e00:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <vTaskSensRead+0x164>)
 8003e02:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <vTaskSensRead+0x148>)
 8003e04:	4614      	mov	r4, r2
 8003e06:	330c      	adds	r3, #12
 8003e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <vTaskSensRead+0x15c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00e fc7a 	bl	801270c <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003e18:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <vTaskSensRead+0x168>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	211e      	movs	r1, #30
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f00e fc16 	bl	8012650 <osMutexAcquire>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d110      	bne.n	8003e4c <vTaskSensRead+0xcc>
			sb1_baro = sb3_data.baro;
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <vTaskSensRead+0x16c>)
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <vTaskSensRead+0x148>)
 8003e2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8003e34:	4a2e      	ldr	r2, [pc, #184]	; (8003ef0 <vTaskSensRead+0x170>)
 8003e36:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <vTaskSensRead+0x148>)
 8003e38:	4614      	mov	r4, r2
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 8003e42:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <vTaskSensRead+0x168>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00e fc60 	bl	801270c <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8003e4c:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <vTaskSensRead+0x154>)
 8003e4e:	6819      	ldr	r1, [r3, #0]
 8003e50:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <vTaskSensRead+0x154>)
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4827      	ldr	r0, [pc, #156]	; (8003ef4 <vTaskSensRead+0x174>)
 8003e58:	f7ff f8d8 	bl	800300c <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003e5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <vTaskSensRead+0x158>)
 8003e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 8003e62:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003e64:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <vTaskSensRead+0x158>)
 8003e66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 8003e6a:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <vTaskSensRead+0x158>)
 8003e6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 8003e72:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <vTaskSensRead+0x158>)
 8003e76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 8003e7a:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <vTaskSensRead+0x158>)
 8003e7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 8003e82:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <vTaskSensRead+0x158>)
 8003e86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	9303      	str	r3, [sp, #12]
 8003e90:	9002      	str	r0, [sp, #8]
 8003e92:	9101      	str	r1, [sp, #4]
 8003e94:	9200      	str	r2, [sp, #0]
 8003e96:	4633      	mov	r3, r6
 8003e98:	462a      	mov	r2, r5
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	4816      	ldr	r0, [pc, #88]	; (8003ef8 <vTaskSensRead+0x178>)
 8003e9e:	f7ff f8b5 	bl	800300c <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <vTaskSensRead+0x154>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2103      	movs	r1, #3
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7fe ffd5 	bl	8002e58 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <vTaskSensRead+0x158>)
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	2103      	movs	r1, #3
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7fe ffcf 	bl	8002e58 <logSensor>

		osDelayUntil(tick_count);
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f00e faee 	bl	801249c <osDelayUntil>
		tick_count += tick_update;
 8003ec0:	e76d      	b.n	8003d9e <vTaskSensRead+0x1e>
 8003ec2:	bf00      	nop
 8003ec4:	51eb851f 	.word	0x51eb851f
 8003ec8:	200002a4 	.word	0x200002a4
 8003ecc:	2000aa4c 	.word	0x2000aa4c
 8003ed0:	2000abe4 	.word	0x2000abe4
 8003ed4:	20000288 	.word	0x20000288
 8003ed8:	20000294 	.word	0x20000294
 8003edc:	20014e8c 	.word	0x20014e8c
 8003ee0:	20000250 	.word	0x20000250
 8003ee4:	2000025c 	.word	0x2000025c
 8003ee8:	2000ab80 	.word	0x2000ab80
 8003eec:	20000218 	.word	0x20000218
 8003ef0:	20000224 	.word	0x20000224
 8003ef4:	08019e24 	.word	0x08019e24
 8003ef8:	08019e44 	.word	0x08019e44

08003efc <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8003f04:	221c      	movs	r2, #28
 8003f06:	4904      	ldr	r1, [pc, #16]	; (8003f18 <HAL_SPI_RxCpltCallback+0x1c>)
 8003f08:	4804      	ldr	r0, [pc, #16]	; (8003f1c <HAL_SPI_RxCpltCallback+0x20>)
 8003f0a:	f005 fc75 	bl	80097f8 <HAL_SPI_Receive_IT>

}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200002a4 	.word	0x200002a4
 8003f1c:	2000aa4c 	.word	0x2000aa4c

08003f20 <vTaskStateEst>:
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]);




void vTaskStateEst(void *argument) {
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8003f26:	af0c      	add	r7, sp, #48	; 0x30
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env environment;
	init_env(&environment);
 8003f2c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd f821 	bl	8000f78 <init_env>

	flight_phase_detection_t dummy_flight_phase_detection = { 0 };
 8003f36:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
 8003f40:	609a      	str	r2, [r3, #8]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003f42:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8003f4e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fbc2 	bl	80036dc <reset_flight_phase_detection>
	reset_flight_phase_detection(&dummy_flight_phase_detection);
 8003f58:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fbbd 	bl	80036dc <reset_flight_phase_detection>
	state_est_meas_t state_est_meas = { 0 };
 8003f62:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003f66:	2278      	movs	r2, #120	; 0x78
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f012 fef3 	bl	8016d56 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8003f70:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003f74:	4618      	mov	r0, r3
 8003f76:	2378      	movs	r3, #120	; 0x78
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	f012 feeb 	bl	8016d56 <memset>

	/* Initialise States */
	ekf_state_t ekf_state = { 0 };
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	4618      	mov	r0, r3
 8003f86:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f012 fee2 	bl	8016d56 <memset>
	reset_ekf_state(&ekf_state);
 8003f92:	f107 031c 	add.w	r3, r7, #28
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fa16 	bl	80043c8 <reset_ekf_state>

	/* Initialise placeholder variables for sensor reading */
	float Placeholder_measurement[3] = { 0 };
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	6053      	str	r3, [r2, #4]
 8003fa8:	6093      	str	r3, [r2, #8]
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003faa:	f107 0308 	add.w	r3, r7, #8
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	6053      	str	r3, [r2, #4]



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003fb6:	f00e f96b 	bl	8012290 <osKernelGetTickCount>
 8003fba:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8003fbe:	f00e f98f 	bl	80122e0 <osKernelGetTickFreq>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4bc8      	ldr	r3, [pc, #800]	; (80042e8 <vTaskStateEst+0x3c8>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
	for (;;) {
		tick_count += tick_update;
 8003fd0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8003fd4:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003fd8:	4413      	add	r3, r2
 8003fda:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

		/* Acquire the Sensor data */
		/* Sensor Board 1 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8003fde:	4bc3      	ldr	r3, [pc, #780]	; (80042ec <vTaskStateEst+0x3cc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f00e fbe2 	bl	80127ac <osMutexGetOwner>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d160      	bne.n	80040b0 <vTaskStateEst+0x190>
			Placeholder_measurement[0] = (float) (sb1_data.baro.pressure);
 8003fee:	4bc0      	ldr	r3, [pc, #768]	; (80042f0 <vTaskStateEst+0x3d0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffa:	f107 0310 	add.w	r3, r7, #16
 8003ffe:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb1_data.baro.ts;
 8004002:	4bbb      	ldr	r3, [pc, #748]	; (80042f0 <vTaskStateEst+0x3d0>)
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb1_data.imu.acc_z)) / 1024;
 800400c:	4bb8      	ldr	r3, [pc, #736]	; (80042f0 <vTaskStateEst+0x3d0>)
 800400e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800401a:	eddf 6ab6 	vldr	s13, [pc, #728]	; 80042f4 <vTaskStateEst+0x3d4>
 800401e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004022:	f107 0310 	add.w	r3, r7, #16
 8004026:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb1_data.imu.ts;
 800402a:	4bb1      	ldr	r3, [pc, #708]	; (80042f0 <vTaskStateEst+0x3d0>)
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	f107 0308 	add.w	r3, r7, #8
 8004032:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb1_data.baro.temperature)) / 100;
 8004034:	4bae      	ldr	r3, [pc, #696]	; (80042f0 <vTaskStateEst+0x3d0>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004040:	eddf 6aad 	vldr	s13, [pc, #692]	; 80042f8 <vTaskStateEst+0x3d8>
 8004044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004050:	4ba6      	ldr	r3, [pc, #664]	; (80042ec <vTaskStateEst+0x3cc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f00e fba9 	bl	80127ac <osMutexGetOwner>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d127      	bne.n	80040b0 <vTaskStateEst+0x190>
				state_est_meas.baro_state_est[0].pressure = Placeholder_measurement[0];
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
				state_est_meas.baro_state_est[0].temperature = Placeholder_measurement[2];
 800406a:	f107 0310 	add.w	r3, r7, #16
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
				state_est_meas.baro_state_est[0].ts = Placeholder_timestamps[0];
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

				state_est_meas.imu_state_est[0].acc_x = Placeholder_measurement[1] * GRAVITATION;
 800407e:	f107 0310 	add.w	r3, r7, #16
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa7f 	bl	8000588 <__aeabi_f2d>
 800408a:	a395      	add	r3, pc, #596	; (adr r3, 80042e0 <vTaskStateEst+0x3c0>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc fad2 	bl	8000638 <__aeabi_dmul>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	4618      	mov	r0, r3
 800409a:	4621      	mov	r1, r4
 800409c:	f7fc fd9c 	bl	8000bd8 <__aeabi_d2f>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
				state_est_meas.imu_state_est[0].ts = Placeholder_timestamps[1];
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
			}
		}

		/* Sensor Board 2 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 80040b0:	4b8e      	ldr	r3, [pc, #568]	; (80042ec <vTaskStateEst+0x3cc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f00e fb79 	bl	80127ac <osMutexGetOwner>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d160      	bne.n	8004182 <vTaskStateEst+0x262>
			Placeholder_measurement[0] = (float) (sb2_data.baro.pressure);
 80040c0:	4b8e      	ldr	r3, [pc, #568]	; (80042fc <vTaskStateEst+0x3dc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040cc:	f107 0310 	add.w	r3, r7, #16
 80040d0:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb2_data.baro.ts;
 80040d4:	4b89      	ldr	r3, [pc, #548]	; (80042fc <vTaskStateEst+0x3dc>)
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	f107 0308 	add.w	r3, r7, #8
 80040dc:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb2_data.imu.acc_z)) / 1024;
 80040de:	4b87      	ldr	r3, [pc, #540]	; (80042fc <vTaskStateEst+0x3dc>)
 80040e0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ec:	eddf 6a81 	vldr	s13, [pc, #516]	; 80042f4 <vTaskStateEst+0x3d4>
 80040f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f4:	f107 0310 	add.w	r3, r7, #16
 80040f8:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb2_data.imu.ts;
 80040fc:	4b7f      	ldr	r3, [pc, #508]	; (80042fc <vTaskStateEst+0x3dc>)
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	f107 0308 	add.w	r3, r7, #8
 8004104:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb2_data.baro.temperature)) / 100;
 8004106:	4b7d      	ldr	r3, [pc, #500]	; (80042fc <vTaskStateEst+0x3dc>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004112:	eddf 6a79 	vldr	s13, [pc, #484]	; 80042f8 <vTaskStateEst+0x3d8>
 8004116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800411a:	f107 0310 	add.w	r3, r7, #16
 800411e:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004122:	4b72      	ldr	r3, [pc, #456]	; (80042ec <vTaskStateEst+0x3cc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f00e fb40 	bl	80127ac <osMutexGetOwner>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d127      	bne.n	8004182 <vTaskStateEst+0x262>
				state_est_meas.baro_state_est[1].pressure = Placeholder_measurement[0];
 8004132:	f107 0310 	add.w	r3, r7, #16
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
				state_est_meas.baro_state_est[1].temperature = Placeholder_measurement[2];
 800413c:	f107 0310 	add.w	r3, r7, #16
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
				state_est_meas.baro_state_est[1].ts = Placeholder_timestamps[0];
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354

				state_est_meas.imu_state_est[1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc fa16 	bl	8000588 <__aeabi_f2d>
 800415c:	a360      	add	r3, pc, #384	; (adr r3, 80042e0 <vTaskStateEst+0x3c0>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f7fc fa69 	bl	8000638 <__aeabi_dmul>
 8004166:	4603      	mov	r3, r0
 8004168:	460c      	mov	r4, r1
 800416a:	4618      	mov	r0, r3
 800416c:	4621      	mov	r1, r4
 800416e:	f7fc fd33 	bl	8000bd8 <__aeabi_d2f>
 8004172:	4603      	mov	r3, r0
 8004174:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
				state_est_meas.imu_state_est[1].ts = Placeholder_timestamps[1];
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
			}
		}

		/* Sensor Board 3 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004182:	4b5a      	ldr	r3, [pc, #360]	; (80042ec <vTaskStateEst+0x3cc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f00e fb10 	bl	80127ac <osMutexGetOwner>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d160      	bne.n	8004254 <vTaskStateEst+0x334>
			Placeholder_measurement[0] = (float)(sb3_data.baro.pressure);
 8004192:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <vTaskStateEst+0x3e0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419e:	f107 0310 	add.w	r3, r7, #16
 80041a2:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb3_data.baro.ts;
 80041a6:	4b56      	ldr	r3, [pc, #344]	; (8004300 <vTaskStateEst+0x3e0>)
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float)(sb3_data.imu.acc_z)) / 1024;
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <vTaskStateEst+0x3e0>)
 80041b2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041be:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80042f4 <vTaskStateEst+0x3d4>
 80041c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041c6:	f107 0310 	add.w	r3, r7, #16
 80041ca:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb3_data.imu.ts;
 80041ce:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <vTaskStateEst+0x3e0>)
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	f107 0308 	add.w	r3, r7, #8
 80041d6:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float)(sb3_data.baro.temperature)) / 100;
 80041d8:	4b49      	ldr	r3, [pc, #292]	; (8004300 <vTaskStateEst+0x3e0>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80042f8 <vTaskStateEst+0x3d8>
 80041e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 80041f4:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <vTaskStateEst+0x3cc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f00e fad7 	bl	80127ac <osMutexGetOwner>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d127      	bne.n	8004254 <vTaskStateEst+0x334>
				state_est_meas.baro_state_est[2].pressure = Placeholder_measurement[0];
 8004204:	f107 0310 	add.w	r3, r7, #16
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
				state_est_meas.baro_state_est[2].temperature = Placeholder_measurement[2];
 800420e:	f107 0310 	add.w	r3, r7, #16
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
				state_est_meas.baro_state_est[2].ts = Placeholder_timestamps[0];
 8004218:	f107 0308 	add.w	r3, r7, #8
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

				state_est_meas.imu_state_est[2].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8004222:	f107 0310 	add.w	r3, r7, #16
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc f9ad 	bl	8000588 <__aeabi_f2d>
 800422e:	a32c      	add	r3, pc, #176	; (adr r3, 80042e0 <vTaskStateEst+0x3c0>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f7fc fa00 	bl	8000638 <__aeabi_dmul>
 8004238:	4603      	mov	r3, r0
 800423a:	460c      	mov	r4, r1
 800423c:	4618      	mov	r0, r3
 800423e:	4621      	mov	r1, r4
 8004240:	f7fc fcca 	bl	8000bd8 <__aeabi_d2f>
 8004244:	4603      	mov	r3, r0
 8004246:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
				state_est_meas.imu_state_est[2].ts = Placeholder_timestamps[1];
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
			}
		}

		/* get new Phase Detection*/
		if(osMutexGetOwner(fsm_mutex) == NULL){
 8004254:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <vTaskStateEst+0x3e4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f00e faa7 	bl	80127ac <osMutexGetOwner>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d114      	bne.n	800428e <vTaskStateEst+0x36e>
			dummy_flight_phase_detection = global_flight_phase_detection;
 8004264:	4a28      	ldr	r2, [pc, #160]	; (8004308 <vTaskStateEst+0x3e8>)
 8004266:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800426a:	ca07      	ldmia	r2, {r0, r1, r2}
 800426c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(fsm_mutex) == NULL){
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <vTaskStateEst+0x3e4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f00e fa99 	bl	80127ac <osMutexGetOwner>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <vTaskStateEst+0x36e>
				flight_phase_detection = dummy_flight_phase_detection;
 8004280:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8004284:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8004288:	ca07      	ldmia	r2, {r0, r1, r2}
 800428a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			}
		}

		/* process measurements */
		process_measurements(&ekf_state, &state_est_meas, &state_est_meas_prior, &environment);
 800428e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004292:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8004296:	f507 7150 	add.w	r1, r7, #832	; 0x340
 800429a:	f107 001c 	add.w	r0, r7, #28
 800429e:	f000 fb0f 	bl	80048c0 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&ekf_state, &flight_phase_detection, &environment);
 80042a2:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80042a6:	f507 716e 	add.w	r1, r7, #952	; 0x3b8
 80042aa:	f107 031c 	add.w	r3, r7, #28
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fc92 	bl	8004bd8 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		ekf_prediction(&ekf_state);
 80042b4:	f107 031c 	add.w	r3, r7, #28
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f919 	bl	80044f0 <ekf_prediction>

		/* update Step */
		if (ekf_state.num_z_active > 0) {
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <vTaskStateEst+0x3ec>
			select_ekf_observation_matrices(&ekf_state);
 80042ca:	f107 031c 	add.w	r3, r7, #28
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f97e 	bl	80045d0 <select_ekf_observation_matrices>
			ekf_update(&ekf_state);
 80042d4:	f107 031c 	add.w	r3, r7, #28
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f9b7 	bl	800464c <ekf_update>
 80042de:	e01f      	b.n	8004320 <vTaskStateEst+0x400>
 80042e0:	3a92a305 	.word	0x3a92a305
 80042e4:	40239d01 	.word	0x40239d01
 80042e8:	51eb851f 	.word	0x51eb851f
 80042ec:	2000ab80 	.word	0x2000ab80
 80042f0:	20000234 	.word	0x20000234
 80042f4:	44800000 	.word	0x44800000
 80042f8:	42c80000 	.word	0x42c80000
 80042fc:	2000026c 	.word	0x2000026c
 8004300:	200002a4 	.word	0x200002a4
 8004304:	20008878 	.word	0x20008878
 8004308:	2000030c 	.word	0x2000030c
		}
		else
		{
			memcpy(ekf_state.x_est, ekf_state.x_priori, sizeof(ekf_state.x_priori));
 800430c:	f107 031c 	add.w	r3, r7, #28
 8004310:	f107 021c 	add.w	r2, r7, #28
 8004314:	33e0      	adds	r3, #224	; 0xe0
 8004316:	f502 7288 	add.w	r2, r2, #272	; 0x110
 800431a:	ca07      	ldmia	r2, {r0, r1, r2}
 800431c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8004320:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8004324:	4618      	mov	r0, r3
 8004326:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800432a:	2278      	movs	r2, #120	; 0x78
 800432c:	4619      	mov	r1, r3
 800432e:	f012 fd07 	bl	8016d40 <memcpy>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <vTaskStateEst+0x498>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	210a      	movs	r1, #10
 8004338:	4618      	mov	r0, r3
 800433a:	f00e f989 	bl	8012650 <osMutexAcquire>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <vTaskStateEst+0x43a>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			update_state_est_data(&state_est_data, &ekf_state);
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	4619      	mov	r1, r3
 800434a:	481c      	ldr	r0, [pc, #112]	; (80043bc <vTaskStateEst+0x49c>)
 800434c:	f000 fa6a 	bl	8004824 <update_state_est_data>
			osMutexRelease(state_est_mutex);
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <vTaskStateEst+0x498>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f00e f9d9 	bl	801270c <osMutexRelease>
		}

		/* Update Environment for FSM */
		if(osMutexAcquire(environment_mutex, 10) == osOK){
 800435a:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <vTaskStateEst+0x4a0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	210a      	movs	r1, #10
 8004360:	4618      	mov	r0, r3
 8004362:	f00e f975 	bl	8012650 <osMutexAcquire>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <vTaskStateEst+0x464>
			global_env = environment;
 800436c:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <vTaskStateEst+0x4a4>)
 800436e:	461c      	mov	r4, r3
 8004370:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(environment_mutex);
 800437a:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <vTaskStateEst+0x4a0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f00e f9c4 	bl	801270c <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data);
 8004384:	f00d ff84 	bl	8012290 <osKernelGetTickCount>
 8004388:	4684      	mov	ip, r0
 800438a:	4e0c      	ldr	r6, [pc, #48]	; (80043bc <vTaskStateEst+0x49c>)
 800438c:	466d      	mov	r5, sp
 800438e:	f106 040c 	add.w	r4, r6, #12
 8004392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800439e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80043a2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80043a6:	4660      	mov	r0, ip
 80043a8:	f7fe fdfc 	bl	8002fa4 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 80043ac:	f8d7 03e4 	ldr.w	r0, [r7, #996]	; 0x3e4
 80043b0:	f00e f874 	bl	801249c <osDelayUntil>
		tick_count += tick_update;
 80043b4:	e60c      	b.n	8003fd0 <vTaskStateEst+0xb0>
 80043b6:	bf00      	nop
 80043b8:	2000abe8 	.word	0x2000abe8
 80043bc:	200002c0 	.word	0x200002c0
 80043c0:	200089c0 	.word	0x200089c0
 80043c4:	200002fc 	.word	0x200002fc

080043c8 <reset_ekf_state>:
	}
}


void reset_ekf_state(ekf_state_t *ekf_state){
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b0b0      	sub	sp, #192	; 0xc0
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
        memcpy(ekf_state->Ad, A_init, sizeof(ekf_state->Ad));
        memcpy(ekf_state->Bd, B_init, sizeof(ekf_state->Bd));
        memcpy(ekf_state->Gd, G_init, sizeof(ekf_state->Gd));
    }
    else if (STATE_ESTIMATION_FREQUENCY == 100) {
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 80043d0:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <reset_ekf_state+0x11c>)
 80043d2:	f107 040c 	add.w	r4, r7, #12
 80043d6:	461d      	mov	r5, r3
 80043d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80043e4:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <reset_ekf_state+0x120>)
 80043e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80043ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80043f0:	4a3d      	ldr	r2, [pc, #244]	; (80044e8 <reset_ekf_state+0x120>)
 80043f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80043f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(ekf_state->Ad, A_init, sizeof(ekf_state->Ad));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f107 010c 	add.w	r1, r7, #12
 8004402:	2224      	movs	r2, #36	; 0x24
 8004404:	4618      	mov	r0, r3
 8004406:	f012 fc9b 	bl	8016d40 <memcpy>
        memcpy(ekf_state->Bd, B_init, sizeof(ekf_state->Bd));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3348      	adds	r3, #72	; 0x48
 800440e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8004412:	220c      	movs	r2, #12
 8004414:	4618      	mov	r0, r3
 8004416:	f012 fc93 	bl	8016d40 <memcpy>
        memcpy(ekf_state->Gd, G_init, sizeof(ekf_state->Gd));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3354      	adds	r3, #84	; 0x54
 800441e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004422:	220c      	movs	r2, #12
 8004424:	4618      	mov	r0, r3
 8004426:	f012 fc8b 	bl	8016d40 <memcpy>
        memset(ekf_state->Ad, 0, sizeof(ekf_state->Ad));
        memset(ekf_state->Bd, 0, sizeof(ekf_state->Bd));
        memset(ekf_state->Gd, 0, sizeof(ekf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <reset_ekf_state+0x124>)
 8004444:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8004448:	461d      	mov	r5, r3
 800444a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800444e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004452:	682b      	ldr	r3, [r5, #0]
 8004454:	6023      	str	r3, [r4, #0]

    memcpy(ekf_state->x_est, x_est_init, sizeof(x_est_init));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	33e0      	adds	r3, #224	; 0xe0
 800445a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800445e:	220c      	movs	r2, #12
 8004460:	4618      	mov	r0, r3
 8004462:	f012 fc6d 	bl	8016d40 <memcpy>
    memcpy(ekf_state->P_est, P_est_init, sizeof(P_est_init));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	33ec      	adds	r3, #236	; 0xec
 800446a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	4618      	mov	r0, r3
 8004472:	f012 fc65 	bl	8016d40 <memcpy>

    memset(ekf_state->Q, 0, NUMBER_NOISE*NUMBER_NOISE*sizeof(ekf_state->Q[0][0]));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	33b4      	adds	r3, #180	; 0xb4
 800447a:	2204      	movs	r2, #4
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f012 fc69 	bl	8016d56 <memset>
    memset(ekf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(ekf_state->R[0][0]));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	33b8      	adds	r3, #184	; 0xb8
 8004488:	2224      	movs	r2, #36	; 0x24
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f012 fc62 	bl	8016d56 <memset>

    memset(ekf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(ekf_state->z[0]));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004498:	220c      	movs	r2, #12
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f012 fc5a 	bl	8016d56 <memset>
    memset(ekf_state->z_active, 0, NUMBER_MEASUREMENTS*sizeof(ekf_state->z_active[0]));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80044a8:	2203      	movs	r2, #3
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f012 fc52 	bl	8016d56 <memset>
    ekf_state->num_z_active = 0;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7

    transpose(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->Ad_T);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3324      	adds	r3, #36	; 0x24
 80044c0:	2103      	movs	r1, #3
 80044c2:	2003      	movs	r0, #3
 80044c4:	f7fd fa8b 	bl	80019de <transpose>
    transpose(NUMBER_STATES, NUMBER_NOISE, ekf_state->Gd, ekf_state->Gd_T);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3360      	adds	r3, #96	; 0x60
 80044d2:	2101      	movs	r1, #1
 80044d4:	2003      	movs	r0, #3
 80044d6:	f7fd fa82 	bl	80019de <transpose>
}
 80044da:	bf00      	nop
 80044dc:	37c0      	adds	r7, #192	; 0xc0
 80044de:	46bd      	mov	sp, r7
 80044e0:	bdb0      	pop	{r4, r5, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	08019e84 	.word	0x08019e84
 80044e8:	08019ea8 	.word	0x08019ea8
 80044ec:	08019eb4 	.word	0x08019eb4

080044f0 <ekf_prediction>:

void ekf_prediction(ekf_state_t *ekf_state){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af04      	add	r7, sp, #16
 80044f6:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->x_est, ekf_state->x_priori, true);
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004506:	2201      	movs	r2, #1
 8004508:	9201      	str	r2, [sp, #4]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	460a      	mov	r2, r1
 8004510:	2103      	movs	r1, #3
 8004512:	2003      	movs	r0, #3
 8004514:	f7fd fc8d 	bl	8001e32 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, ekf_state->Bd, ekf_state->u, ekf_state->x_priori, false);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800452a:	2200      	movs	r2, #0
 800452c:	9201      	str	r2, [sp, #4]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	4603      	mov	r3, r0
 8004532:	460a      	mov	r2, r1
 8004534:	2101      	movs	r1, #1
 8004536:	2003      	movs	r0, #3
 8004538:	f7fd fc7b 	bl	8001e32 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->P_est, ekf_state->Placeholder_Ad_mult_P_est, true);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	33ec      	adds	r3, #236	; 0xec
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8004548:	2101      	movs	r1, #1
 800454a:	9102      	str	r1, [sp, #8]
 800454c:	9201      	str	r2, [sp, #4]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4603      	mov	r3, r0
 8004552:	2203      	movs	r2, #3
 8004554:	2103      	movs	r1, #3
 8004556:	2003      	movs	r0, #3
 8004558:	f7fd fbd1 	bl	8001cfe <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_NOISE, ekf_state->Gd, ekf_state->Q, ekf_state->Placeholder_Gd_mult_Q, true);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	33b4      	adds	r3, #180	; 0xb4
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
 800456c:	2101      	movs	r1, #1
 800456e:	9102      	str	r1, [sp, #8]
 8004570:	9201      	str	r2, [sp, #4]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4603      	mov	r3, r0
 8004576:	2201      	movs	r2, #1
 8004578:	2101      	movs	r1, #1
 800457a:	2003      	movs	r0, #3
 800457c:	f7fd fbbf 	bl	8001cfe <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_Ad_mult_P_est, ekf_state->Ad_T, ekf_state->P_priori, true);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3324      	adds	r3, #36	; 0x24
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8004590:	2101      	movs	r1, #1
 8004592:	9102      	str	r1, [sp, #8]
 8004594:	9201      	str	r2, [sp, #4]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4603      	mov	r3, r0
 800459a:	2203      	movs	r2, #3
 800459c:	2103      	movs	r1, #3
 800459e:	2003      	movs	r0, #3
 80045a0:	f7fd fbad 	bl	8001cfe <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_STATES, ekf_state->Placeholder_Gd_mult_Q, ekf_state->Gd_T, ekf_state->P_priori, false);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 70f6 	add.w	r0, r3, #492	; 0x1ec
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3360      	adds	r3, #96	; 0x60
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 80045b4:	2100      	movs	r1, #0
 80045b6:	9102      	str	r1, [sp, #8]
 80045b8:	9201      	str	r2, [sp, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4603      	mov	r3, r0
 80045be:	2203      	movs	r2, #3
 80045c0:	2101      	movs	r1, #1
 80045c2:	2003      	movs	r0, #3
 80045c4:	f7fd fb9b 	bl	8001cfe <matmul>
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <select_ekf_observation_matrices>:

void select_ekf_observation_matrices(ekf_state_t *ekf_state){
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
    memset(ekf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(ekf_state->H[0][0]));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	336c      	adds	r3, #108	; 0x6c
 80045dc:	2224      	movs	r2, #36	; 0x24
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f012 fbb8 	bl	8016d56 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e01e      	b.n	800462a <select_ekf_observation_matrices+0x5a>
        if (ekf_state->z_active[i]) {
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <select_ekf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            ekf_state->H[i][0] = 1;
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	336c      	adds	r3, #108	; 0x6c
 800460c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e007      	b.n	8004624 <select_ekf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            ekf_state->R[i][i] = 0;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	33b8      	adds	r3, #184	; 0xb8
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b02      	cmp	r3, #2
 800462e:	dddd      	ble.n	80045ec <select_ekf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->H, ekf_state->H_T);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3390      	adds	r3, #144	; 0x90
 800463a:	2103      	movs	r1, #3
 800463c:	2003      	movs	r0, #3
 800463e:	f7fd f9ce 	bl	80019de <transpose>
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <ekf_update>:

void ekf_update(ekf_state_t *ekf_state) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af04      	add	r7, sp, #16
 8004652:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->H, ekf_state->x_priori, ekf_state->y, true);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 7088 	add.w	r0, r3, #272	; 0x110
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8004666:	2201      	movs	r2, #1
 8004668:	9201      	str	r2, [sp, #4]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4603      	mov	r3, r0
 800466e:	460a      	mov	r2, r1
 8004670:	2103      	movs	r1, #3
 8004672:	2003      	movs	r0, #3
 8004674:	f7fd fbdd 	bl	8001e32 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->y, ekf_state->y);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800468a:	2003      	movs	r0, #3
 800468c:	f7fd fa26 	bl	8001adc <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, ekf_state->H, ekf_state->P_priori, ekf_state->Placeholder_H_mult_P_priori, true);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 80046a2:	2101      	movs	r1, #1
 80046a4:	9102      	str	r1, [sp, #8]
 80046a6:	9201      	str	r2, [sp, #4]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4603      	mov	r3, r0
 80046ac:	2203      	movs	r2, #3
 80046ae:	2103      	movs	r1, #3
 80046b0:	2003      	movs	r0, #3
 80046b2:	f7fd fb24 	bl	8001cfe <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->Placeholder_H_mult_P_priori, ekf_state->H_T, ekf_state->S, true);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3390      	adds	r3, #144	; 0x90
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 80046c6:	2101      	movs	r1, #1
 80046c8:	9102      	str	r1, [sp, #8]
 80046ca:	9201      	str	r2, [sp, #4]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	4603      	mov	r3, r0
 80046d0:	2203      	movs	r2, #3
 80046d2:	2103      	movs	r1, #3
 80046d4:	2003      	movs	r0, #3
 80046d6:	f7fd fb12 	bl	8001cfe <matmul>
    matadd(NUMBER_MEASUREMENTS,  NUMBER_MEASUREMENTS, ekf_state->S, ekf_state->R, ekf_state->S);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	460b      	mov	r3, r1
 80046f0:	2103      	movs	r1, #3
 80046f2:	2003      	movs	r0, #3
 80046f4:	f7fd fa1d 	bl	8001b32 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(ekf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(ekf_state->S_inv[0][0]));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f012 fb27 	bl	8016d56 <memset>
    inverse(NUMBER_MEASUREMENTS, ekf_state->S, ekf_state->S_inv, LAMBDA);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004714:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8004820 <ekf_update+0x1d4>
 8004718:	461a      	mov	r2, r3
 800471a:	2003      	movs	r0, #3
 800471c:	f7fd fe38 	bl	8002390 <inverse>

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->P_priori, ekf_state->H_T, ekf_state->Placeholder_P_priori_mult_H_T, true);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3390      	adds	r3, #144	; 0x90
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 8004730:	2101      	movs	r1, #1
 8004732:	9102      	str	r1, [sp, #8]
 8004734:	9201      	str	r2, [sp, #4]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4603      	mov	r3, r0
 800473a:	2203      	movs	r2, #3
 800473c:	2103      	movs	r1, #3
 800473e:	2003      	movs	r0, #3
 8004740:	f7fd fadd 	bl	8001cfe <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, ekf_state->Placeholder_P_priori_mult_H_T, ekf_state->S_inv, ekf_state->K, true);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8004756:	2101      	movs	r1, #1
 8004758:	9102      	str	r1, [sp, #8]
 800475a:	9201      	str	r2, [sp, #4]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	4603      	mov	r3, r0
 8004760:	2203      	movs	r2, #3
 8004762:	2103      	movs	r1, #3
 8004764:	2003      	movs	r0, #3
 8004766:	f7fd faca 	bl	8001cfe <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->K, ekf_state->y, ekf_state->x_est, true);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f503 70a6 	add.w	r0, r3, #332	; 0x14c
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	33e0      	adds	r3, #224	; 0xe0
 800477a:	2201      	movs	r2, #1
 800477c:	9201      	str	r2, [sp, #4]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	4603      	mov	r3, r0
 8004782:	460a      	mov	r2, r1
 8004784:	2103      	movs	r1, #3
 8004786:	2003      	movs	r0, #3
 8004788:	f7fd fb53 	bl	8001e32 <matvecprod>
    vecadd(NUMBER_STATES, ekf_state->x_priori, ekf_state->x_est, ekf_state->x_est);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f503 7188 	add.w	r1, r3, #272	; 0x110
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	33e0      	adds	r3, #224	; 0xe0
 800479c:	2003      	movs	r0, #3
 800479e:	f7fd f972 	bl	8001a86 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, ekf_state->Placeholder_eye);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80047a8:	4619      	mov	r1, r3
 80047aa:	2003      	movs	r0, #3
 80047ac:	f7fd f8cb 	bl	8001946 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->K, ekf_state->H, ekf_state->Placeholder_K_mult_H, true);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	336c      	adds	r3, #108	; 0x6c
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	f502 7222 	add.w	r2, r2, #648	; 0x288
 80047c0:	2101      	movs	r1, #1
 80047c2:	9102      	str	r1, [sp, #8]
 80047c4:	9201      	str	r2, [sp, #4]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4603      	mov	r3, r0
 80047ca:	2203      	movs	r2, #3
 80047cc:	2103      	movs	r1, #3
 80047ce:	2003      	movs	r0, #3
 80047d0:	f7fd fa95 	bl	8001cfe <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_eye, ekf_state->Placeholder_K_mult_H, ekf_state->Placeholder_P_est);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 7219 	add.w	r2, r3, #612	; 0x264
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 7122 	add.w	r1, r3, #648	; 0x288
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	460b      	mov	r3, r1
 80047ea:	2103      	movs	r1, #3
 80047ec:	2003      	movs	r0, #3
 80047ee:	f7fd fa13 	bl	8001c18 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, ekf_state->Placeholder_P_est, ekf_state->P_priori, ekf_state->P_est, true);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 7010 	add.w	r0, r3, #576	; 0x240
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	32ec      	adds	r2, #236	; 0xec
 8004802:	2101      	movs	r1, #1
 8004804:	9102      	str	r1, [sp, #8]
 8004806:	9201      	str	r2, [sp, #4]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	4603      	mov	r3, r0
 800480c:	2203      	movs	r2, #3
 800480e:	2103      	movs	r1, #3
 8004810:	2003      	movs	r0, #3
 8004812:	f7fd fa74 	bl	8001cfe <matmul>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	38d1b717 	.word	0x38d1b717

08004824 <update_state_est_data>:

void update_state_est_data(state_est_data_t *state_est_data, ekf_state_t *ekf_state) {
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(ekf_state->x_est[0] * 1000);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8004834:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80048bc <update_state_est_data+0x98>
 8004838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800483c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004840:	ee17 2a90 	vmov	r2, s15
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(ekf_state->x_est[1] * 1000);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800484e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80048bc <update_state_est_data+0x98>
 8004852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485a:	ee17 2a90 	vmov	r2, s15
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(ekf_state->x_est[1] * 1000);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004868:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80048bc <update_state_est_data+0x98>
 800486c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004874:	ee17 2a90 	vmov	r2, s15
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(ekf_state->u[0] * 1000);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8004882:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80048bc <update_state_est_data+0x98>
 8004886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800488a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800488e:	ee17 2a90 	vmov	r2, s15
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(ekf_state->u[0] * 1000);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800489c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80048bc <update_state_est_data+0x98>
 80048a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048a8:	ee17 2a90 	vmov	r2, s15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	447a0000 	.word	0x447a0000

080048c0 <process_measurements>:

void process_measurements(ekf_state_t *ekf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior, env *env) {
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b095      	sub	sp, #84	; 0x54
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
    float temp_meas[NUMBER_SENSORBOARDS];
    bool temp_meas_active[NUMBER_SENSORBOARDS];
    float acc_x_meas[NUMBER_SENSORBOARDS];
    bool acc_x_meas_active[NUMBER_SENSORBOARDS];

    for (int i = 0; i < NUMBER_SENSORBOARDS; i++){
 80048ce:	2300      	movs	r3, #0
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
 80048d2:	e0b0      	b.n	8004a36 <process_measurements+0x176>
        /* barometer */
        if (state_est_meas->baro_state_est[i].ts > state_est_meas_prior->baro_state_est[i].ts || state_est_meas->baro_state_est[i].ts == 0) {
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d8:	4613      	mov	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	3308      	adds	r3, #8
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4403      	add	r3, r0
 80048f4:	3308      	adds	r3, #8
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4299      	cmp	r1, r3
 80048fa:	d80a      	bhi.n	8004912 <process_measurements+0x52>
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004900:	4613      	mov	r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	3308      	adds	r3, #8
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d12b      	bne.n	800496a <process_measurements+0xaa>
            ekf_state->z[i] = state_est_meas->baro_state_est[i].pressure;
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004926:	3350      	adds	r3, #80	; 0x50
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	601a      	str	r2, [r3, #0]
            ekf_state->z_active[i] = true;
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004932:	4413      	add	r3, r2
 8004934:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_state_est[i].temperature;
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004940:	4613      	mov	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	3304      	adds	r3, #4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004956:	440b      	add	r3, r1
 8004958:	3b20      	subs	r3, #32
 800495a:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 800495c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004962:	4413      	add	r3, r2
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e01d      	b.n	80049a6 <process_measurements+0xe6>
        } else {
            ekf_state->z[i] = 0;
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496e:	3350      	adds	r3, #80	; 0x50
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
            ekf_state->z_active[i] = false;
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497e:	4413      	add	r3, r2
 8004980:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004990:	4413      	add	r3, r2
 8004992:	3b20      	subs	r3, #32
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 800499a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800499e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a0:	4413      	add	r3, r2
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_state_est[i].ts > state_est_meas_prior->imu_state_est[i].ts || state_est_meas->imu_state_est[i].ts == 0) {
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	333c      	adds	r3, #60	; 0x3c
 80049b6:	6819      	ldr	r1, [r3, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4403      	add	r3, r0
 80049c6:	333c      	adds	r3, #60	; 0x3c
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4299      	cmp	r1, r3
 80049cc:	d80a      	bhi.n	80049e4 <process_measurements+0x124>
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d2:	4613      	mov	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	333c      	adds	r3, #60	; 0x3c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <process_measurements+0x152>
            acc_x_meas[i] = state_est_meas->imu_state_est[i].acc_x;
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	3330      	adds	r3, #48	; 0x30
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80049fe:	440b      	add	r3, r1
 8004a00:	3b30      	subs	r3, #48	; 0x30
 8004a02:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8004a04:	f107 0214 	add.w	r2, r7, #20
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	4413      	add	r3, r2
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e00e      	b.n	8004a30 <process_measurements+0x170>
        } else {
            acc_x_meas[i] = 0;
 8004a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3b30      	subs	r3, #48	; 0x30
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8004a24:	f107 0214 	add.w	r2, r7, #20
 8004a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2a:	4413      	add	r3, r2
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUMBER_SENSORBOARDS; i++){
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	3301      	adds	r3, #1
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
 8004a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	f77f af4b 	ble.w	80048d4 <process_measurements+0x14>
        }
    }

    /* eliminate barometer measurements */
    /* TODO @maxi: Replace with sensor elimination by extrapolation */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->z_active);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2003      	movs	r0, #3
 8004a4e:	f000 f973 	bl	8004d38 <sensor_elimination_by_stdev>

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8004a52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	2003      	movs	r0, #3
 8004a5e:	f000 f96b 	bl	8004d38 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8004a62:	f107 0214 	add.w	r2, r7, #20
 8004a66:	f107 0318 	add.w	r3, r7, #24
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	2003      	movs	r0, #3
 8004a6e:	f000 f963 	bl	8004d38 <sensor_elimination_by_stdev>

    /* update num_z_active */
    ekf_state->num_z_active = 0;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    ekf_state->u[0] = 0;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    int32_t num_acc_x_meas_active = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	643b      	str	r3, [r7, #64]	; 0x40
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t num_temp_meas_active = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
 8004a96:	e04a      	b.n	8004b2e <process_measurements+0x26e>
        if (ekf_state->z_active[i]){
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <process_measurements+0x1f8>
            ekf_state->num_z_active += 1;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
        }
        if (acc_x_meas_active[i]) {
 8004ab8:	f107 0214 	add.w	r2, r7, #20
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	4413      	add	r3, r2
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d012      	beq.n	8004aec <process_measurements+0x22c>
            ekf_state->u[0] += acc_x_meas[i];
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3b30      	subs	r3, #48	; 0x30
 8004ad8:	edd3 7a00 	vldr	s15, [r3]
 8004adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
            num_acc_x_meas_active += 1;
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae8:	3301      	adds	r3, #1
 8004aea:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8004aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004af4:	4413      	add	r3, r2
 8004af6:	3b20      	subs	r3, #32
 8004af8:	edd3 7a00 	vldr	s15, [r3]
 8004afc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	d010      	beq.n	8004b28 <process_measurements+0x268>
            temp_meas_mean += temp_meas[i];
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b0e:	4413      	add	r3, r2
 8004b10:	3b20      	subs	r3, #32
 8004b12:	edd3 7a00 	vldr	s15, [r3]
 8004b16:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_temp_meas_active += 1;
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	3301      	adds	r3, #1
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	ddb1      	ble.n	8004a98 <process_measurements+0x1d8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->z_active, ekf_state->z);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	2103      	movs	r1, #3
 8004b4c:	6838      	ldr	r0, [r7, #0]
 8004b4e:	f7fc fa83 	bl	8001058 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 8004b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dd21      	ble.n	8004b9c <process_measurements+0x2dc>
        ekf_state->u[0] /= num_acc_x_meas_active;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
        /* gravity compensation for accelerometer */
        ekf_state->u[0] -= GRAVITATION;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fb fd05 	bl	8000588 <__aeabi_f2d>
 8004b7e:	a314      	add	r3, pc, #80	; (adr r3, 8004bd0 <process_measurements+0x310>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fba0 	bl	80002c8 <__aeabi_dsub>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	4621      	mov	r1, r4
 8004b90:	f7fc f822 	bl	8000bd8 <__aeabi_d2f>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }
    if (num_temp_meas_active > 0){
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	dd0f      	ble.n	8004bc2 <process_measurements+0x302>
        temp_meas_mean /= num_temp_meas_active;
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bac:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8004bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        update_env(env, temp_meas_mean);
 8004bb8:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004bbc:	6838      	ldr	r0, [r7, #0]
 8004bbe:	f7fc f9ef 	bl	8000fa0 <update_env>
    }
}
 8004bc2:	bf00      	nop
 8004bc4:	374c      	adds	r7, #76	; 0x4c
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd90      	pop	{r4, r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	3a92a305 	.word	0x3a92a305
 8004bd4:	40239d01 	.word	0x40239d01

08004bd8 <select_noise_models>:

void select_noise_models(ekf_state_t *ekf_state, flight_phase_detection_t *flight_phase_detection, env *env){
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b091      	sub	sp, #68	; 0x44
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d822      	bhi.n	8004c34 <select_noise_models+0x5c>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <select_noise_models+0x1c>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c0d 	.word	0x08004c0d
 8004bf8:	08004c0d 	.word	0x08004c0d
 8004bfc:	08004c17 	.word	0x08004c17
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004c2b 	.word	0x08004c2b
 8004c08:	08004c0d 	.word	0x08004c0d
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8004c0c:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <select_noise_models+0x140>)
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8004c10:	4b42      	ldr	r3, [pc, #264]	; (8004d1c <select_noise_models+0x144>)
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004c14:	e00e      	b.n	8004c34 <select_noise_models+0x5c>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8004c16:	4b42      	ldr	r3, [pc, #264]	; (8004d20 <select_noise_models+0x148>)
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8004c1a:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <select_noise_models+0x14c>)
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004c1e:	e009      	b.n	8004c34 <select_noise_models+0x5c>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8004c20:	4b41      	ldr	r3, [pc, #260]	; (8004d28 <select_noise_models+0x150>)
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8004c24:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <select_noise_models+0x154>)
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004c28:	e004      	b.n	8004c34 <select_noise_models+0x5c>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8004c2a:	4b41      	ldr	r3, [pc, #260]	; (8004d30 <select_noise_models+0x158>)
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8004c2e:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <select_noise_models+0x15c>)
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004c32:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_NOISE; i++){
 8004c34:	2300      	movs	r3, #0
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c38:	e01b      	b.n	8004c72 <select_noise_models+0x9a>
        ekf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8004c3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c3c:	f7fb fca4 	bl	8000588 <__aeabi_f2d>
 8004c40:	4603      	mov	r3, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8004d10 <select_noise_models+0x138>
 8004c48:	ec44 3b10 	vmov	d0, r3, r4
 8004c4c:	f013 f8fe 	bl	8017e4c <pow>
 8004c50:	ec54 3b10 	vmov	r3, r4, d0
 8004c54:	4618      	mov	r0, r3
 8004c56:	4621      	mov	r1, r4
 8004c58:	f7fb ffbe 	bl	8000bd8 <__aeabi_d2f>
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	3316      	adds	r3, #22
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	3304      	adds	r3, #4
 8004c6a:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_NOISE; i++){
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	3301      	adds	r3, #1
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dde0      	ble.n	8004c3a <select_noise_models+0x62>
    }

    float p[1];
    float h[1] = {ekf_state->x_est[0]};
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c7e:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8004c80:	2301      	movs	r3, #1
 8004c82:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8004c84:	f107 0114 	add.w	r1, r7, #20
 8004c88:	f107 0218 	add.w	r2, r7, #24
 8004c8c:	f107 031c 	add.w	r3, r7, #28
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	460b      	mov	r3, r1
 8004c94:	2101      	movs	r1, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fa3e 	bl	8001118 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8004c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fc fa9f 	bl	80011e8 <altitude_gradient>
 8004caa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8004cae:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004cb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	eef0 7ae7 	vabs.f32	s15, s15
 8004cbe:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc6:	e01a      	b.n	8004cfe <select_noise_models+0x126>
        ekf_state->R[i][i] = pow(altitude_stdev, 2);
 8004cc8:	6a38      	ldr	r0, [r7, #32]
 8004cca:	f7fb fc5d 	bl	8000588 <__aeabi_f2d>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8004d10 <select_noise_models+0x138>
 8004cd6:	ec44 3b10 	vmov	d0, r3, r4
 8004cda:	f013 f8b7 	bl	8017e4c <pow>
 8004cde:	ec54 3b10 	vmov	r3, r4, d0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	f7fb ff77 	bl	8000bd8 <__aeabi_d2f>
 8004cea:	4601      	mov	r1, r0
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	4413      	add	r3, r2
 8004cf4:	33b8      	adds	r3, #184	; 0xb8
 8004cf6:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	dde1      	ble.n	8004cc8 <select_noise_models+0xf0>
    }
}
 8004d04:	bf00      	nop
 8004d06:	373c      	adds	r7, #60	; 0x3c
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd90      	pop	{r4, r7, pc}
 8004d0c:	f3af 8000 	nop.w
 8004d10:	00000000 	.word	0x00000000
 8004d14:	40000000 	.word	0x40000000
 8004d18:	3c97e316 	.word	0x3c97e316
 8004d1c:	3fef3b64 	.word	0x3fef3b64
 8004d20:	3fa01965 	.word	0x3fa01965
 8004d24:	41500000 	.word	0x41500000
 8004d28:	3f1e3737 	.word	0x3f1e3737
 8004d2c:	40ec28f6 	.word	0x40ec28f6
 8004d30:	3ffa41cc 	.word	0x3ffa41cc
 8004d34:	40795810 	.word	0x40795810

08004d38 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	b08b      	sub	sp, #44	; 0x2c
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	e017      	b.n	8004d84 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	3301      	adds	r3, #1
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	edd3 7a00 	vldr	s15, [r3]
 8004d72:	ed97 7a08 	vldr	s14, [r7, #32]
 8004d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d7a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	dbe3      	blt.n	8004d54 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	dd0a      	ble.n	8004da8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d9c:	edd7 6a08 	vldr	s13, [r7, #32]
 8004da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e033      	b.n	8004e1c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02a      	beq.n	8004e16 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	ed93 7a00 	vldr	s14, [r3]
 8004dcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8004dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dd4:	ee17 0a90 	vmov	r0, s15
 8004dd8:	f7fb fbd6 	bl	8000588 <__aeabi_f2d>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8004ed8 <sensor_elimination_by_stdev+0x1a0>
 8004de4:	ec44 3b10 	vmov	d0, r3, r4
 8004de8:	f013 f830 	bl	8017e4c <pow>
 8004dec:	ec56 5b10 	vmov	r5, r6, d0
 8004df0:	69b8      	ldr	r0, [r7, #24]
 8004df2:	f7fb fbc9 	bl	8000588 <__aeabi_f2d>
 8004df6:	4603      	mov	r3, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	4631      	mov	r1, r6
 8004e02:	f7fb fa63 	bl	80002cc <__adddf3>
 8004e06:	4603      	mov	r3, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	f7fb fee3 	bl	8000bd8 <__aeabi_d2f>
 8004e12:	4603      	mov	r3, r0
 8004e14:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	dbc7      	blt.n	8004db4 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dd1a      	ble.n	8004e60 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e34:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e3c:	ee16 0a90 	vmov	r0, s13
 8004e40:	f7fb fba2 	bl	8000588 <__aeabi_f2d>
 8004e44:	4603      	mov	r3, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	ec44 3b10 	vmov	d0, r3, r4
 8004e4c:	f013 f96e 	bl	801812c <sqrt>
 8004e50:	ec54 3b10 	vmov	r3, r4, d0
 8004e54:	4618      	mov	r0, r3
 8004e56:	4621      	mov	r1, r4
 8004e58:	f7fb febe 	bl	8000bd8 <__aeabi_d2f>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	e02f      	b.n	8004ec6 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d026      	beq.n	8004ec0 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4413      	add	r3, r2
 8004e7a:	ed93 7a00 	vldr	s14, [r3]
 8004e7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e86:	eef0 7ae7 	vabs.f32	s15, s15
 8004e8a:	ee17 0a90 	vmov	r0, s15
 8004e8e:	f7fb fb7b 	bl	8000588 <__aeabi_f2d>
 8004e92:	4604      	mov	r4, r0
 8004e94:	460d      	mov	r5, r1
 8004e96:	69b8      	ldr	r0, [r7, #24]
 8004e98:	f7fb fb76 	bl	8000588 <__aeabi_f2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	f7fb fa14 	bl	80002cc <__adddf3>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f7fb fe54 	bl	8000b58 <__aeabi_dcmpgt>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4413      	add	r3, r2
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	dbcb      	blt.n	8004e66 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8004ece:	bf00      	nop
 8004ed0:	372c      	adds	r7, #44	; 0x2c
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	40000000 	.word	0x40000000

08004ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ee6:	e003      	b.n	8004ef0 <LoopCopyDataInit>

08004ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004eee:	3104      	adds	r1, #4

08004ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ef0:	480b      	ldr	r0, [pc, #44]	; (8004f20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ef8:	d3f6      	bcc.n	8004ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8004efa:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004efc:	e002      	b.n	8004f04 <LoopFillZerobss>

08004efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f00:	f842 3b04 	str.w	r3, [r2], #4

08004f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f08:	d3f9      	bcc.n	8004efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f0a:	f7fd ff6f 	bl	8002dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f0e:	f011 fee3 	bl	8016cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f12:	f7fc f9bb 	bl	800128c <main>
  bx  lr    
 8004f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f18:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004f1c:	0801a248 	.word	0x0801a248
  ldr  r0, =_sdata
 8004f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f24:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8004f28:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8004f2c:	200170c0 	.word	0x200170c0

08004f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f30:	e7fe      	b.n	8004f30 <ADC_IRQHandler>

08004f32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f36:	2003      	movs	r0, #3
 8004f38:	f000 f8f7 	bl	800512a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f7fd fdf9 	bl	8002b34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004f42:	f7fd fbb5 	bl	80026b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_IncTick+0x20>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_IncTick+0x24>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <HAL_IncTick+0x24>)
 8004f5e:	6013      	str	r3, [r2, #0]
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000008 	.word	0x20000008
 8004f70:	20015338 	.word	0x20015338

08004f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return uwTick;
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <HAL_GetTick+0x14>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20015338 	.word	0x20015338

08004f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f94:	f7ff ffee 	bl	8004f74 <HAL_GetTick>
 8004f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d005      	beq.n	8004fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_Delay+0x40>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fb2:	bf00      	nop
 8004fb4:	f7ff ffde 	bl	8004f74 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d8f7      	bhi.n	8004fb4 <HAL_Delay+0x28>
  {
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000008 	.word	0x20000008

08004fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <__NVIC_SetPriorityGrouping+0x40>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fec:	4013      	ands	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <__NVIC_SetPriorityGrouping+0x44>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <__NVIC_SetPriorityGrouping+0x40>)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	60d3      	str	r3, [r2, #12]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000ed00 	.word	0xe000ed00
 8005014:	05fa0000 	.word	0x05fa0000

08005018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <__NVIC_GetPriorityGrouping+0x18>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	f003 0307 	and.w	r3, r3, #7
}
 8005026:	4618      	mov	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800503e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005042:	2b00      	cmp	r3, #0
 8005044:	db0b      	blt.n	800505e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	f003 021f 	and.w	r2, r3, #31
 800504c:	4907      	ldr	r1, [pc, #28]	; (800506c <__NVIC_EnableIRQ+0x38>)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2001      	movs	r0, #1
 8005056:	fa00 f202 	lsl.w	r2, r0, r2
 800505a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	e000e100 	.word	0xe000e100

08005070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	6039      	str	r1, [r7, #0]
 800507a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800507c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005080:	2b00      	cmp	r3, #0
 8005082:	db0a      	blt.n	800509a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	490c      	ldr	r1, [pc, #48]	; (80050bc <__NVIC_SetPriority+0x4c>)
 800508a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508e:	0112      	lsls	r2, r2, #4
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	440b      	add	r3, r1
 8005094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005098:	e00a      	b.n	80050b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4908      	ldr	r1, [pc, #32]	; (80050c0 <__NVIC_SetPriority+0x50>)
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	3b04      	subs	r3, #4
 80050a8:	0112      	lsls	r2, r2, #4
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	440b      	add	r3, r1
 80050ae:	761a      	strb	r2, [r3, #24]
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	e000e100 	.word	0xe000e100
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b089      	sub	sp, #36	; 0x24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f1c3 0307 	rsb	r3, r3, #7
 80050de:	2b04      	cmp	r3, #4
 80050e0:	bf28      	it	cs
 80050e2:	2304      	movcs	r3, #4
 80050e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	3304      	adds	r3, #4
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d902      	bls.n	80050f4 <NVIC_EncodePriority+0x30>
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	3b03      	subs	r3, #3
 80050f2:	e000      	b.n	80050f6 <NVIC_EncodePriority+0x32>
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f8:	f04f 32ff 	mov.w	r2, #4294967295
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43da      	mvns	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	401a      	ands	r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800510c:	f04f 31ff 	mov.w	r1, #4294967295
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	43d9      	mvns	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800511c:	4313      	orrs	r3, r2
         );
}
 800511e:	4618      	mov	r0, r3
 8005120:	3724      	adds	r7, #36	; 0x24
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff ff4c 	bl	8004fd0 <__NVIC_SetPriorityGrouping>
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005152:	f7ff ff61 	bl	8005018 <__NVIC_GetPriorityGrouping>
 8005156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	6978      	ldr	r0, [r7, #20]
 800515e:	f7ff ffb1 	bl	80050c4 <NVIC_EncodePriority>
 8005162:	4602      	mov	r2, r0
 8005164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ff80 	bl	8005070 <__NVIC_SetPriority>
}
 8005170:	bf00      	nop
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff54 	bl	8005034 <__NVIC_EnableIRQ>
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051a0:	f7ff fee8 	bl	8004f74 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e099      	b.n	80052e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d0:	e00f      	b.n	80051f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d2:	f7ff fecf 	bl	8004f74 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b05      	cmp	r3, #5
 80051de:	d908      	bls.n	80051f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2203      	movs	r2, #3
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e078      	b.n	80052e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e8      	bne.n	80051d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4b38      	ldr	r3, [pc, #224]	; (80052ec <HAL_DMA_Init+0x158>)
 800520c:	4013      	ands	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800521e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	2b04      	cmp	r3, #4
 800524a:	d107      	bne.n	800525c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	4313      	orrs	r3, r2
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b04      	cmp	r3, #4
 8005284:	d117      	bne.n	80052b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00e      	beq.n	80052b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 faa5 	bl	80057e8 <DMA_CheckFifoParam>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052b2:	2301      	movs	r3, #1
 80052b4:	e016      	b.n	80052e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa5c 	bl	800577c <DMA_CalcBaseAndBitshift>
 80052c4:	4603      	mov	r3, r0
 80052c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052cc:	223f      	movs	r2, #63	; 0x3f
 80052ce:	409a      	lsls	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	f010803f 	.word	0xf010803f

080052f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_DMA_Start_IT+0x26>
 8005312:	2302      	movs	r3, #2
 8005314:	e048      	b.n	80053a8 <HAL_DMA_Start_IT+0xb8>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d137      	bne.n	800539a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f9ee 	bl	8005720 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	223f      	movs	r2, #63	; 0x3f
 800534a:	409a      	lsls	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0216 	orr.w	r2, r2, #22
 800535e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800536e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0208 	orr.w	r2, r2, #8
 8005386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e005      	b.n	80053a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053a2:	2302      	movs	r3, #2
 80053a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d004      	beq.n	80053ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e00c      	b.n	80053e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2205      	movs	r2, #5
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005400:	4b92      	ldr	r3, [pc, #584]	; (800564c <HAL_DMA_IRQHandler+0x258>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a92      	ldr	r2, [pc, #584]	; (8005650 <HAL_DMA_IRQHandler+0x25c>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541e:	2208      	movs	r2, #8
 8005420:	409a      	lsls	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01a      	beq.n	8005460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	2208      	movs	r2, #8
 800544e:	409a      	lsls	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	f043 0201 	orr.w	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d012      	beq.n	8005496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	2201      	movs	r2, #1
 8005484:	409a      	lsls	r2, r3
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0202 	orr.w	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549a:	2204      	movs	r2, #4
 800549c:	409a      	lsls	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d012      	beq.n	80054cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	2204      	movs	r2, #4
 80054ba:	409a      	lsls	r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d0:	2210      	movs	r2, #16
 80054d2:	409a      	lsls	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d043      	beq.n	8005564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d03c      	beq.n	8005564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	2210      	movs	r2, #16
 80054f0:	409a      	lsls	r2, r3
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d018      	beq.n	8005536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d108      	bne.n	8005524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d024      	beq.n	8005564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
 8005522:	e01f      	b.n	8005564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
 8005534:	e016      	b.n	8005564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0208 	bic.w	r2, r2, #8
 8005552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005568:	2220      	movs	r2, #32
 800556a:	409a      	lsls	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 808e 	beq.w	8005692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8086 	beq.w	8005692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	2220      	movs	r2, #32
 800558c:	409a      	lsls	r2, r3
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b05      	cmp	r3, #5
 800559c:	d136      	bne.n	800560c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0216 	bic.w	r2, r2, #22
 80055ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <HAL_DMA_IRQHandler+0x1da>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0208 	bic.w	r2, r2, #8
 80055dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e2:	223f      	movs	r2, #63	; 0x3f
 80055e4:	409a      	lsls	r2, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d07d      	beq.n	80056fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
        }
        return;
 800560a:	e078      	b.n	80056fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01c      	beq.n	8005654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562c:	2b00      	cmp	r3, #0
 800562e:	d030      	beq.n	8005692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
 8005638:	e02b      	b.n	8005692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d027      	beq.n	8005692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
 800564a:	e022      	b.n	8005692 <HAL_DMA_IRQHandler+0x29e>
 800564c:	20000000 	.word	0x20000000
 8005650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10f      	bne.n	8005682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0210 	bic.w	r2, r2, #16
 8005670:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	2b00      	cmp	r3, #0
 8005698:	d032      	beq.n	8005700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d022      	beq.n	80056ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2205      	movs	r2, #5
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	3301      	adds	r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d307      	bcc.n	80056da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f2      	bne.n	80056be <HAL_DMA_IRQHandler+0x2ca>
 80056d8:	e000      	b.n	80056dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80056da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
 80056fc:	e000      	b.n	8005700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80056fe:	bf00      	nop
    }
  }
}
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop

08005708 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800573c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d108      	bne.n	8005760 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800575e:	e007      	b.n	8005770 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	3b10      	subs	r3, #16
 800578c:	4a13      	ldr	r2, [pc, #76]	; (80057dc <DMA_CalcBaseAndBitshift+0x60>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <DMA_CalcBaseAndBitshift+0x64>)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d908      	bls.n	80057bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <DMA_CalcBaseAndBitshift+0x68>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	1d1a      	adds	r2, r3, #4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	659a      	str	r2, [r3, #88]	; 0x58
 80057ba:	e006      	b.n	80057ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <DMA_CalcBaseAndBitshift+0x68>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	aaaaaaab 	.word	0xaaaaaaab
 80057e0:	0801a090 	.word	0x0801a090
 80057e4:	fffffc00 	.word	0xfffffc00

080057e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11f      	bne.n	8005842 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d855      	bhi.n	80058b4 <DMA_CheckFifoParam+0xcc>
 8005808:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <DMA_CheckFifoParam+0x28>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005821 	.word	0x08005821
 8005814:	08005833 	.word	0x08005833
 8005818:	08005821 	.word	0x08005821
 800581c:	080058b5 	.word	0x080058b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d045      	beq.n	80058b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005830:	e042      	b.n	80058b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800583a:	d13f      	bne.n	80058bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005840:	e03c      	b.n	80058bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584a:	d121      	bne.n	8005890 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d836      	bhi.n	80058c0 <DMA_CheckFifoParam+0xd8>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <DMA_CheckFifoParam+0x70>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005869 	.word	0x08005869
 800585c:	0800586f 	.word	0x0800586f
 8005860:	08005869 	.word	0x08005869
 8005864:	08005881 	.word	0x08005881
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
      break;
 800586c:	e02f      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d024      	beq.n	80058c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800587e:	e021      	b.n	80058c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005888:	d11e      	bne.n	80058c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800588e:	e01b      	b.n	80058c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d902      	bls.n	800589c <DMA_CheckFifoParam+0xb4>
 8005896:	2b03      	cmp	r3, #3
 8005898:	d003      	beq.n	80058a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800589a:	e018      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      break;
 80058a0:	e015      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00e      	beq.n	80058cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
      break;
 80058b2:	e00b      	b.n	80058cc <DMA_CheckFifoParam+0xe4>
      break;
 80058b4:	bf00      	nop
 80058b6:	e00a      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      break;
 80058b8:	bf00      	nop
 80058ba:	e008      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      break;
 80058bc:	bf00      	nop
 80058be:	e006      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      break;
 80058c0:	bf00      	nop
 80058c2:	e004      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      break;
 80058c4:	bf00      	nop
 80058c6:	e002      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      break;   
 80058c8:	bf00      	nop
 80058ca:	e000      	b.n	80058ce <DMA_CheckFifoParam+0xe6>
      break;
 80058cc:	bf00      	nop
    }
  } 
  
  return status; 
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058dc:	b480      	push	{r7}
 80058de:	b089      	sub	sp, #36	; 0x24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	e175      	b.n	8005be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058fc:	2201      	movs	r2, #1
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	429a      	cmp	r2, r3
 8005916:	f040 8164 	bne.w	8005be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d00b      	beq.n	800593a <HAL_GPIO_Init+0x5e>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d007      	beq.n	800593a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800592e:	2b11      	cmp	r3, #17
 8005930:	d003      	beq.n	800593a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b12      	cmp	r3, #18
 8005938:	d130      	bne.n	800599c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2203      	movs	r2, #3
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005970:	2201      	movs	r2, #1
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 0201 	and.w	r2, r3, #1
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	2203      	movs	r2, #3
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d003      	beq.n	80059dc <HAL_GPIO_Init+0x100>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b12      	cmp	r3, #18
 80059da:	d123      	bne.n	8005a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	08da      	lsrs	r2, r3, #3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3208      	adds	r2, #8
 80059e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	220f      	movs	r2, #15
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	08da      	lsrs	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3208      	adds	r2, #8
 8005a1e:	69b9      	ldr	r1, [r7, #24]
 8005a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	2203      	movs	r2, #3
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0203 	and.w	r2, r3, #3
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80be 	beq.w	8005be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a66:	4b65      	ldr	r3, [pc, #404]	; (8005bfc <HAL_GPIO_Init+0x320>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	4a64      	ldr	r2, [pc, #400]	; (8005bfc <HAL_GPIO_Init+0x320>)
 8005a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a70:	6453      	str	r3, [r2, #68]	; 0x44
 8005a72:	4b62      	ldr	r3, [pc, #392]	; (8005bfc <HAL_GPIO_Init+0x320>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a7e:	4a60      	ldr	r2, [pc, #384]	; (8005c00 <HAL_GPIO_Init+0x324>)
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	089b      	lsrs	r3, r3, #2
 8005a84:	3302      	adds	r3, #2
 8005a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	220f      	movs	r2, #15
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a57      	ldr	r2, [pc, #348]	; (8005c04 <HAL_GPIO_Init+0x328>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d037      	beq.n	8005b1a <HAL_GPIO_Init+0x23e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a56      	ldr	r2, [pc, #344]	; (8005c08 <HAL_GPIO_Init+0x32c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d031      	beq.n	8005b16 <HAL_GPIO_Init+0x23a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a55      	ldr	r2, [pc, #340]	; (8005c0c <HAL_GPIO_Init+0x330>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d02b      	beq.n	8005b12 <HAL_GPIO_Init+0x236>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a54      	ldr	r2, [pc, #336]	; (8005c10 <HAL_GPIO_Init+0x334>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d025      	beq.n	8005b0e <HAL_GPIO_Init+0x232>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a53      	ldr	r2, [pc, #332]	; (8005c14 <HAL_GPIO_Init+0x338>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01f      	beq.n	8005b0a <HAL_GPIO_Init+0x22e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a52      	ldr	r2, [pc, #328]	; (8005c18 <HAL_GPIO_Init+0x33c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d019      	beq.n	8005b06 <HAL_GPIO_Init+0x22a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a51      	ldr	r2, [pc, #324]	; (8005c1c <HAL_GPIO_Init+0x340>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_GPIO_Init+0x226>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a50      	ldr	r2, [pc, #320]	; (8005c20 <HAL_GPIO_Init+0x344>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00d      	beq.n	8005afe <HAL_GPIO_Init+0x222>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a4f      	ldr	r2, [pc, #316]	; (8005c24 <HAL_GPIO_Init+0x348>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d007      	beq.n	8005afa <HAL_GPIO_Init+0x21e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a4e      	ldr	r2, [pc, #312]	; (8005c28 <HAL_GPIO_Init+0x34c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d101      	bne.n	8005af6 <HAL_GPIO_Init+0x21a>
 8005af2:	2309      	movs	r3, #9
 8005af4:	e012      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005af6:	230a      	movs	r3, #10
 8005af8:	e010      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005afa:	2308      	movs	r3, #8
 8005afc:	e00e      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005afe:	2307      	movs	r3, #7
 8005b00:	e00c      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005b02:	2306      	movs	r3, #6
 8005b04:	e00a      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005b06:	2305      	movs	r3, #5
 8005b08:	e008      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005b0a:	2304      	movs	r3, #4
 8005b0c:	e006      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e004      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e002      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <HAL_GPIO_Init+0x240>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	f002 0203 	and.w	r2, r2, #3
 8005b22:	0092      	lsls	r2, r2, #2
 8005b24:	4093      	lsls	r3, r2
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b2c:	4934      	ldr	r1, [pc, #208]	; (8005c00 <HAL_GPIO_Init+0x324>)
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	3302      	adds	r3, #2
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b3a:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b5e:	4a33      	ldr	r2, [pc, #204]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b64:	4b31      	ldr	r3, [pc, #196]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	4013      	ands	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b88:	4a28      	ldr	r2, [pc, #160]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b8e:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	43db      	mvns	r3, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <HAL_GPIO_Init+0x350>)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3301      	adds	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	f67f ae86 	bls.w	80058fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3724      	adds	r7, #36	; 0x24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	40013800 	.word	0x40013800
 8005c04:	40020000 	.word	0x40020000
 8005c08:	40020400 	.word	0x40020400
 8005c0c:	40020800 	.word	0x40020800
 8005c10:	40020c00 	.word	0x40020c00
 8005c14:	40021000 	.word	0x40021000
 8005c18:	40021400 	.word	0x40021400
 8005c1c:	40021800 	.word	0x40021800
 8005c20:	40021c00 	.word	0x40021c00
 8005c24:	40022000 	.word	0x40022000
 8005c28:	40022400 	.word	0x40022400
 8005c2c:	40013c00 	.word	0x40013c00

08005c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c40:	787b      	ldrb	r3, [r7, #1]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c4c:	e003      	b.n	8005c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c4e:	887b      	ldrh	r3, [r7, #2]
 8005c50:	041a      	lsls	r2, r3, #16
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	619a      	str	r2, [r3, #24]
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c64:	b08f      	sub	sp, #60	; 0x3c
 8005c66:	af0a      	add	r7, sp, #40	; 0x28
 8005c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e116      	b.n	8005ea2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f010 fcca 	bl	8016628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2203      	movs	r2, #3
 8005c98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f006 fa57 	bl	800c166 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	687e      	ldr	r6, [r7, #4]
 8005cc0:	466d      	mov	r5, sp
 8005cc2:	f106 0410 	add.w	r4, r6, #16
 8005cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cd6:	1d33      	adds	r3, r6, #4
 8005cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cda:	6838      	ldr	r0, [r7, #0]
 8005cdc:	f006 f938 	bl	800bf50 <USB_CoreInit>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0d7      	b.n	8005ea2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f006 fa45 	bl	800c188 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	e04a      	b.n	8005d9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d04:	7bfa      	ldrb	r2, [r7, #15]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	333d      	adds	r3, #61	; 0x3d
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d18:	7bfa      	ldrb	r2, [r7, #15]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	333c      	adds	r3, #60	; 0x3c
 8005d28:	7bfa      	ldrb	r2, [r7, #15]
 8005d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d2c:	7bfa      	ldrb	r2, [r7, #15]
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	b298      	uxth	r0, r3
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	3342      	adds	r3, #66	; 0x42
 8005d40:	4602      	mov	r2, r0
 8005d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d44:	7bfa      	ldrb	r2, [r7, #15]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	333f      	adds	r3, #63	; 0x3f
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d58:	7bfa      	ldrb	r2, [r7, #15]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	3344      	adds	r3, #68	; 0x44
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d6c:	7bfa      	ldrb	r2, [r7, #15]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3348      	adds	r3, #72	; 0x48
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d80:	7bfa      	ldrb	r2, [r7, #15]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	1a9b      	subs	r3, r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	3350      	adds	r3, #80	; 0x50
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	3301      	adds	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
 8005d9a:	7bfa      	ldrb	r2, [r7, #15]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3af      	bcc.n	8005d04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e044      	b.n	8005e34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005daa:	7bfa      	ldrb	r2, [r7, #15]
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005dc0:	7bfa      	ldrb	r2, [r7, #15]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005dd2:	7bfa      	ldrb	r2, [r7, #15]
 8005dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005dd6:	7bfa      	ldrb	r2, [r7, #15]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005dec:	7bfa      	ldrb	r2, [r7, #15]
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e18:	7bfa      	ldrb	r2, [r7, #15]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	3301      	adds	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	7bfa      	ldrb	r2, [r7, #15]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3b5      	bcc.n	8005daa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	687e      	ldr	r6, [r7, #4]
 8005e46:	466d      	mov	r5, sp
 8005e48:	f106 0410 	add.w	r4, r6, #16
 8005e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e5c:	1d33      	adds	r3, r6, #4
 8005e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e60:	6838      	ldr	r0, [r7, #0]
 8005e62:	f006 f9bb 	bl	800c1dc <USB_DevInit>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e014      	b.n	8005ea2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 f881 	bl	8006f98 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f007 fa0a 	bl	800d2b4 <USB_DevDisconnect>

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005eaa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_PCD_Start+0x16>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e012      	b.n	8005ee6 <HAL_PCD_Start+0x3c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f007 f9d9 	bl	800d284 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f006 f934 	bl	800c144 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005eee:	b590      	push	{r4, r7, lr}
 8005ef0:	b08d      	sub	sp, #52	; 0x34
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f007 fa80 	bl	800d40a <USB_GetMode>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 83ca 	bne.w	80066a6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f007 f9e4 	bl	800d2e4 <USB_ReadInterrupts>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 83c0 	beq.w	80066a4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f007 f9db 	bl	800d2e4 <USB_ReadInterrupts>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d107      	bne.n	8005f48 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695a      	ldr	r2, [r3, #20]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f002 0202 	and.w	r2, r2, #2
 8005f46:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f007 f9c9 	bl	800d2e4 <USB_ReadInterrupts>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d161      	bne.n	8006020 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0210 	bic.w	r2, r2, #16
 8005f6a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	4413      	add	r3, r2
 8005f88:	3304      	adds	r3, #4
 8005f8a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	0c5b      	lsrs	r3, r3, #17
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d124      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d035      	beq.n	8006010 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6a38      	ldr	r0, [r7, #32]
 8005fb8:	f007 f841 	bl	800d03e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fc8:	441a      	add	r2, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fda:	441a      	add	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	619a      	str	r2, [r3, #24]
 8005fe0:	e016      	b.n	8006010 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	0c5b      	lsrs	r3, r3, #17
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	2b06      	cmp	r3, #6
 8005fec:	d110      	bne.n	8006010 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6a38      	ldr	r0, [r7, #32]
 8005ffa:	f007 f820 	bl	800d03e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800600a:	441a      	add	r2, r3
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0210 	orr.w	r2, r2, #16
 800601e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f007 f95d 	bl	800d2e4 <USB_ReadInterrupts>
 800602a:	4603      	mov	r3, r0
 800602c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006030:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006034:	d16e      	bne.n	8006114 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f007 f963 	bl	800d30a <USB_ReadDevAllOutEpInterrupt>
 8006044:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006046:	e062      	b.n	800610e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d057      	beq.n	8006102 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f007 f988 	bl	800d372 <USB_ReadDevOutEPInterrupt>
 8006062:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	461a      	mov	r2, r3
 800607c:	2301      	movs	r3, #1
 800607e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fdde 	bl	8006c44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	461a      	mov	r2, r3
 80060a0:	2308      	movs	r3, #8
 80060a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80060a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fed8 	bl	8006e5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	461a      	mov	r2, r3
 80060c4:	2310      	movs	r3, #16
 80060c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	461a      	mov	r2, r3
 80060e0:	2320      	movs	r3, #32
 80060e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006100:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	3301      	adds	r3, #1
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	d199      	bne.n	8006048 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f007 f8e3 	bl	800d2e4 <USB_ReadInterrupts>
 800611e:	4603      	mov	r3, r0
 8006120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006128:	f040 80c0 	bne.w	80062ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f007 f904 	bl	800d33e <USB_ReadDevAllInEpInterrupt>
 8006136:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800613c:	e0b2      	b.n	80062a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80a7 	beq.w	8006298 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	4611      	mov	r1, r2
 8006154:	4618      	mov	r0, r3
 8006156:	f007 f92a 	bl	800d3ae <USB_ReadDevInEPInterrupt>
 800615a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d057      	beq.n	8006216 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	2201      	movs	r2, #1
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	43db      	mvns	r3, r3
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006186:	4013      	ands	r3, r2
 8006188:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	461a      	mov	r2, r3
 8006198:	2301      	movs	r3, #1
 800619a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d132      	bne.n	800620a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	3348      	adds	r3, #72	; 0x48
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	4613      	mov	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4403      	add	r3, r0
 80061c4:	3344      	adds	r3, #68	; 0x44
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4419      	add	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4403      	add	r3, r0
 80061d8:	3348      	adds	r3, #72	; 0x48
 80061da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d113      	bne.n	800620a <HAL_PCD_IRQHandler+0x31c>
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	3350      	adds	r3, #80	; 0x50
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006202:	461a      	mov	r2, r3
 8006204:	2101      	movs	r1, #1
 8006206:	f007 f933 	bl	800d470 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	b2db      	uxtb	r3, r3
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f010 fa8c 	bl	801672e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	461a      	mov	r2, r3
 800622e:	2308      	movs	r3, #8
 8006230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	461a      	mov	r2, r3
 800624a:	2310      	movs	r3, #16
 800624c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	461a      	mov	r2, r3
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	461a      	mov	r2, r3
 8006282:	2302      	movs	r3, #2
 8006284:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fc48 	bl	8006b28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	3301      	adds	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f af49 	bne.w	800613e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f007 f817 	bl	800d2e4 <USB_ReadInterrupts>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d122      	bne.n	8006308 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d108      	bne.n	80062f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062e8:	2100      	movs	r1, #0
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f010 fc6e 	bl	8016bcc <HAL_PCDEx_LPM_Callback>
 80062f0:	e002      	b.n	80062f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f010 fa92 	bl	801681c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f006 ffe9 	bl	800d2e4 <USB_ReadInterrupts>
 8006312:	4603      	mov	r3, r0
 8006314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800631c:	d112      	bne.n	8006344 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d102      	bne.n	8006334 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f010 fa4e 	bl	80167d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006342:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f006 ffcb 	bl	800d2e4 <USB_ReadInterrupts>
 800634e:	4603      	mov	r3, r0
 8006350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006358:	d121      	bne.n	800639e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006368:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d111      	bne.n	8006398 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800638e:	2101      	movs	r1, #1
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f010 fc1b 	bl	8016bcc <HAL_PCDEx_LPM_Callback>
 8006396:	e002      	b.n	800639e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f010 fa19 	bl	80167d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f006 ff9e 	bl	800d2e4 <USB_ReadInterrupts>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b2:	f040 80c7 	bne.w	8006544 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2110      	movs	r1, #16
 80063d0:	4618      	mov	r0, r3
 80063d2:	f006 f871 	bl	800c4b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063d6:	2300      	movs	r3, #0
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063da:	e056      	b.n	800648a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e8:	461a      	mov	r2, r3
 80063ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800640e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	440a      	add	r2, r1
 8006426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800642e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006442:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006462:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006482:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	3301      	adds	r3, #1
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006490:	429a      	cmp	r2, r3
 8006492:	d3a3      	bcc.n	80063dc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80064a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d016      	beq.n	80064de <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c0:	f043 030b 	orr.w	r3, r3, #11
 80064c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064d6:	f043 030b 	orr.w	r3, r3, #11
 80064da:	6453      	str	r3, [r2, #68]	; 0x44
 80064dc:	e015      	b.n	800650a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	4619      	mov	r1, r3
 80064ee:	f242 032b 	movw	r3, #8235	; 0x202b
 80064f2:	4313      	orrs	r3, r2
 80064f4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006504:	f043 030b 	orr.w	r3, r3, #11
 8006508:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006518:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800651c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800652e:	461a      	mov	r2, r3
 8006530:	f006 ff9e 	bl	800d470 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695a      	ldr	r2, [r3, #20]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f006 fecb 	bl	800d2e4 <USB_ReadInterrupts>
 800654e:	4603      	mov	r3, r0
 8006550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006558:	d124      	bne.n	80065a4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f006 ff62 	bl	800d428 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f006 f806 	bl	800c57a <USB_GetDevSpeed>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681c      	ldr	r4, [r3, #0]
 800657a:	f001 f999 	bl	80078b0 <HAL_RCC_GetHCLKFreq>
 800657e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006584:	b2db      	uxtb	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	4620      	mov	r0, r4
 800658a:	f005 fd39 	bl	800c000 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f010 f8f5 	bl	801677e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80065a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f006 fe9b 	bl	800d2e4 <USB_ReadInterrupts>
 80065ae:	4603      	mov	r3, r0
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d10a      	bne.n	80065ce <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f010 f8d2 	bl	8016762 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f002 0208 	and.w	r2, r2, #8
 80065cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f006 fe86 	bl	800d2e4 <USB_ReadInterrupts>
 80065d8:	4603      	mov	r3, r0
 80065da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e2:	d10f      	bne.n	8006604 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f010 f934 	bl	801685c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f006 fe6b 	bl	800d2e4 <USB_ReadInterrupts>
 800660e:	4603      	mov	r3, r0
 8006610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006618:	d10f      	bne.n	800663a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	b2db      	uxtb	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f010 f907 	bl	8016838 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695a      	ldr	r2, [r3, #20]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f006 fe50 	bl	800d2e4 <USB_ReadInterrupts>
 8006644:	4603      	mov	r3, r0
 8006646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800664a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664e:	d10a      	bne.n	8006666 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f010 f915 	bl	8016880 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f006 fe3a 	bl	800d2e4 <USB_ReadInterrupts>
 8006670:	4603      	mov	r3, r0
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b04      	cmp	r3, #4
 8006678:	d115      	bne.n	80066a6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f010 f905 	bl	801689c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
 80066a2:	e000      	b.n	80066a6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80066a4:	bf00      	nop
    }
  }
}
 80066a6:	3734      	adds	r7, #52	; 0x34
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd90      	pop	{r4, r7, pc}

080066ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_PCD_SetAddress+0x1a>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e013      	b.n	80066ee <HAL_PCD_SetAddress+0x42>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	78fa      	ldrb	r2, [r7, #3]
 80066d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	4611      	mov	r1, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f006 fdaa 	bl	800d238 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	461a      	mov	r2, r3
 8006704:	4603      	mov	r3, r0
 8006706:	70fb      	strb	r3, [r7, #3]
 8006708:	460b      	mov	r3, r1
 800670a:	803b      	strh	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006718:	2b00      	cmp	r3, #0
 800671a:	da0f      	bge.n	800673c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	f003 020f 	and.w	r2, r3, #15
 8006722:	4613      	mov	r3, r2
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	3338      	adds	r3, #56	; 0x38
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	3304      	adds	r3, #4
 8006732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	705a      	strb	r2, [r3, #1]
 800673a:	e00f      	b.n	800675c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	f003 020f 	and.w	r2, r3, #15
 8006742:	4613      	mov	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4413      	add	r3, r2
 8006752:	3304      	adds	r3, #4
 8006754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006768:	883a      	ldrh	r2, [r7, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	78ba      	ldrb	r2, [r7, #2]
 8006772:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006786:	78bb      	ldrb	r3, [r7, #2]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d102      	bne.n	8006792 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_PCD_EP_Open+0xaa>
 800679c:	2302      	movs	r3, #2
 800679e:	e00e      	b.n	80067be <HAL_PCD_EP_Open+0xc8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68f9      	ldr	r1, [r7, #12]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f005 ff08 	bl	800c5c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80067bc:	7afb      	ldrb	r3, [r7, #11]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da0f      	bge.n	80067fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	f003 020f 	and.w	r2, r3, #15
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	3338      	adds	r3, #56	; 0x38
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	3304      	adds	r3, #4
 80067f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	705a      	strb	r2, [r3, #1]
 80067f8:	e00f      	b.n	800681a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	f003 020f 	and.w	r2, r3, #15
 8006800:	4613      	mov	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4413      	add	r3, r2
 8006810:	3304      	adds	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	b2da      	uxtb	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_PCD_EP_Close+0x6e>
 8006830:	2302      	movs	r3, #2
 8006832:	e00e      	b.n	8006852 <HAL_PCD_EP_Close+0x8c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	4618      	mov	r0, r3
 8006844:	f005 ff46 	bl	800c6d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
 8006866:	460b      	mov	r3, r1
 8006868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	4613      	mov	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	3304      	adds	r3, #4
 8006882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2200      	movs	r2, #0
 8006894:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2200      	movs	r2, #0
 800689a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d102      	bne.n	80068b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	6979      	ldr	r1, [r7, #20]
 80068ce:	f006 fa29 	bl	800cd24 <USB_EP0StartXfer>
 80068d2:	e008      	b.n	80068e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	f005 ffd3 	bl	800c88c <USB_EPStartXfer>
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	f003 020f 	and.w	r2, r3, #15
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006912:	681b      	ldr	r3, [r3, #0]
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	607a      	str	r2, [r7, #4]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	460b      	mov	r3, r1
 800692e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	4613      	mov	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	3338      	adds	r3, #56	; 0x38
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2201      	movs	r2, #1
 800695e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	b2da      	uxtb	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d102      	bne.n	800697a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	6979      	ldr	r1, [r7, #20]
 8006992:	f006 f9c7 	bl	800cd24 <USB_EP0StartXfer>
 8006996:	e008      	b.n	80069aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	f005 ff71 	bl	800c88c <USB_EPStartXfer>
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	f003 020f 	and.w	r2, r3, #15
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d901      	bls.n	80069d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e050      	b.n	8006a74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da0f      	bge.n	80069fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	3338      	adds	r3, #56	; 0x38
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	705a      	strb	r2, [r3, #1]
 80069f8:	e00d      	b.n	8006a16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	4613      	mov	r3, r2
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	1a9b      	subs	r3, r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_PCD_EP_SetStall+0x82>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e01e      	b.n	8006a74 <HAL_PCD_EP_SetStall+0xc0>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f006 fb23 	bl	800d090 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	b2d9      	uxtb	r1, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a64:	461a      	mov	r2, r3
 8006a66:	f006 fd03 	bl	800d470 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	f003 020f 	and.w	r2, r3, #15
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d901      	bls.n	8006a9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e042      	b.n	8006b20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	da0f      	bge.n	8006ac2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	f003 020f 	and.w	r2, r3, #15
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	3338      	adds	r3, #56	; 0x38
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	705a      	strb	r2, [r3, #1]
 8006ac0:	e00f      	b.n	8006ae2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	4613      	mov	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3304      	adds	r3, #4
 8006ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_PCD_EP_ClrStall+0x86>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e00e      	b.n	8006b20 <HAL_PCD_EP_ClrStall+0xa4>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f006 fb2b 	bl	800d16c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	1a9b      	subs	r3, r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	3338      	adds	r3, #56	; 0x38
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d901      	bls.n	8006b60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e06c      	b.n	8006c3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d902      	bls.n	8006b7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3303      	adds	r3, #3
 8006b80:	089b      	lsrs	r3, r3, #2
 8006b82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b84:	e02b      	b.n	8006bde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	695a      	ldr	r2, [r3, #20]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d902      	bls.n	8006ba2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3303      	adds	r3, #3
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68d9      	ldr	r1, [r3, #12]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	6978      	ldr	r0, [r7, #20]
 8006bc2:	f006 fa07 	bl	800cfd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	441a      	add	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	441a      	add	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d809      	bhi.n	8006c08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d203      	bcs.n	8006c08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1be      	bne.n	8006b86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d811      	bhi.n	8006c38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	6939      	ldr	r1, [r7, #16]
 8006c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c34:	4013      	ands	r3, r2
 8006c36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	333c      	adds	r3, #60	; 0x3c
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	f040 80a0 	bne.w	8006dbc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d015      	beq.n	8006cb2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4a72      	ldr	r2, [pc, #456]	; (8006e54 <PCD_EP_OutXfrComplete_int+0x210>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	f240 80dd 	bls.w	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 80d7 	beq.w	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cae:	6093      	str	r3, [r2, #8]
 8006cb0:	e0cb      	b.n	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2320      	movs	r3, #32
 8006ccc:	6093      	str	r3, [r2, #8]
 8006cce:	e0bc      	b.n	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f040 80b7 	bne.w	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a5d      	ldr	r2, [pc, #372]	; (8006e54 <PCD_EP_OutXfrComplete_int+0x210>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d90f      	bls.n	8006d04 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d00:	6093      	str	r3, [r2, #8]
 8006d02:	e0a2      	b.n	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d16:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	0159      	lsls	r1, r3, #5
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	440b      	add	r3, r1
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006d2a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	4613      	mov	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4403      	add	r3, r0
 8006d3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006d3e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	1a9b      	subs	r3, r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4403      	add	r3, r0
 8006d62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4419      	add	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4403      	add	r3, r0
 8006d78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d7c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d114      	bne.n	8006dae <PCD_EP_OutXfrComplete_int+0x16a>
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006da6:	461a      	mov	r2, r3
 8006da8:	2101      	movs	r1, #1
 8006daa:	f006 fb61 	bl	800d470 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f00f fc9f 	bl	80166f8 <HAL_PCD_DataOutStageCallback>
 8006dba:	e046      	b.n	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4a26      	ldr	r2, [pc, #152]	; (8006e58 <PCD_EP_OutXfrComplete_int+0x214>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d124      	bne.n	8006e0e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de0:	6093      	str	r3, [r2, #8]
 8006de2:	e032      	b.n	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2320      	movs	r3, #32
 8006dfe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f00f fc76 	bl	80166f8 <HAL_PCD_DataOutStageCallback>
 8006e0c:	e01d      	b.n	8006e4a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d114      	bne.n	8006e3e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d108      	bne.n	8006e3e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e36:	461a      	mov	r2, r3
 8006e38:	2100      	movs	r1, #0
 8006e3a:	f006 fb19 	bl	800d470 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f00f fc57 	bl	80166f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	4f54300a 	.word	0x4f54300a
 8006e58:	4f54310a 	.word	0x4f54310a

08006e5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	333c      	adds	r3, #60	; 0x3c
 8006e74:	3304      	adds	r3, #4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d90e      	bls.n	8006eb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d009      	beq.n	8006eb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f00f fc0f 	bl	80166d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d90c      	bls.n	8006ed8 <PCD_EP_OutSetupPacket_int+0x7c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d108      	bne.n	8006ed8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	f006 facc 	bl	800d470 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	4f54300a 	.word	0x4f54300a

08006ee8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d107      	bne.n	8006f16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f06:	883b      	ldrh	r3, [r7, #0]
 8006f08:	0419      	lsls	r1, r3, #16
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	629a      	str	r2, [r3, #40]	; 0x28
 8006f14:	e028      	b.n	8006f68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e00d      	b.n	8006f46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	3340      	adds	r3, #64	; 0x40
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	0c1b      	lsrs	r3, r3, #16
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	3301      	adds	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	7bfa      	ldrb	r2, [r7, #15]
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d3ec      	bcc.n	8006f2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f50:	883b      	ldrh	r3, [r7, #0]
 8006f52:	0418      	lsls	r0, r3, #16
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6819      	ldr	r1, [r3, #0]
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	4302      	orrs	r2, r0
 8006f60:	3340      	adds	r3, #64	; 0x40
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	887a      	ldrh	r2, [r7, #2]
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <HAL_PCDEx_ActivateLPM+0x44>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	10000003 	.word	0x10000003

08006fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e291      	b.n	800751a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8087 	beq.w	8007112 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007004:	4b96      	ldr	r3, [pc, #600]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 030c 	and.w	r3, r3, #12
 800700c:	2b04      	cmp	r3, #4
 800700e:	d00c      	beq.n	800702a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007010:	4b93      	ldr	r3, [pc, #588]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 030c 	and.w	r3, r3, #12
 8007018:	2b08      	cmp	r3, #8
 800701a:	d112      	bne.n	8007042 <HAL_RCC_OscConfig+0x62>
 800701c:	4b90      	ldr	r3, [pc, #576]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007028:	d10b      	bne.n	8007042 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702a:	4b8d      	ldr	r3, [pc, #564]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d06c      	beq.n	8007110 <HAL_RCC_OscConfig+0x130>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d168      	bne.n	8007110 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e26b      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704a:	d106      	bne.n	800705a <HAL_RCC_OscConfig+0x7a>
 800704c:	4b84      	ldr	r3, [pc, #528]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a83      	ldr	r2, [pc, #524]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	e02e      	b.n	80070b8 <HAL_RCC_OscConfig+0xd8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10c      	bne.n	800707c <HAL_RCC_OscConfig+0x9c>
 8007062:	4b7f      	ldr	r3, [pc, #508]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a7e      	ldr	r2, [pc, #504]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	4b7c      	ldr	r3, [pc, #496]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a7b      	ldr	r2, [pc, #492]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e01d      	b.n	80070b8 <HAL_RCC_OscConfig+0xd8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007084:	d10c      	bne.n	80070a0 <HAL_RCC_OscConfig+0xc0>
 8007086:	4b76      	ldr	r3, [pc, #472]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a75      	ldr	r2, [pc, #468]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800708c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	4b73      	ldr	r3, [pc, #460]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a72      	ldr	r2, [pc, #456]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	e00b      	b.n	80070b8 <HAL_RCC_OscConfig+0xd8>
 80070a0:	4b6f      	ldr	r3, [pc, #444]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6e      	ldr	r2, [pc, #440]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80070a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	4b6c      	ldr	r3, [pc, #432]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a6b      	ldr	r2, [pc, #428]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80070b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d013      	beq.n	80070e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fd ff58 	bl	8004f74 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c8:	f7fd ff54 	bl	8004f74 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b64      	cmp	r3, #100	; 0x64
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e21f      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070da:	4b61      	ldr	r3, [pc, #388]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0f0      	beq.n	80070c8 <HAL_RCC_OscConfig+0xe8>
 80070e6:	e014      	b.n	8007112 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fd ff44 	bl	8004f74 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f0:	f7fd ff40 	bl	8004f74 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b64      	cmp	r3, #100	; 0x64
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e20b      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007102:	4b57      	ldr	r3, [pc, #348]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f0      	bne.n	80070f0 <HAL_RCC_OscConfig+0x110>
 800710e:	e000      	b.n	8007112 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d069      	beq.n	80071f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800711e:	4b50      	ldr	r3, [pc, #320]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 030c 	and.w	r3, r3, #12
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800712a:	4b4d      	ldr	r3, [pc, #308]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b08      	cmp	r3, #8
 8007134:	d11c      	bne.n	8007170 <HAL_RCC_OscConfig+0x190>
 8007136:	4b4a      	ldr	r3, [pc, #296]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d116      	bne.n	8007170 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007142:	4b47      	ldr	r3, [pc, #284]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_RCC_OscConfig+0x17a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d001      	beq.n	800715a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e1df      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715a:	4b41      	ldr	r3, [pc, #260]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	493d      	ldr	r1, [pc, #244]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800716a:	4313      	orrs	r3, r2
 800716c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800716e:	e040      	b.n	80071f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d023      	beq.n	80071c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007178:	4b39      	ldr	r3, [pc, #228]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a38      	ldr	r2, [pc, #224]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fd fef6 	bl	8004f74 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718c:	f7fd fef2 	bl	8004f74 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e1bd      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719e:	4b30      	ldr	r3, [pc, #192]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0f0      	beq.n	800718c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071aa:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4929      	ldr	r1, [pc, #164]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	600b      	str	r3, [r1, #0]
 80071be:	e018      	b.n	80071f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071c0:	4b27      	ldr	r3, [pc, #156]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a26      	ldr	r2, [pc, #152]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fd fed2 	bl	8004f74 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d4:	f7fd fece 	bl	8004f74 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e199      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071e6:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d038      	beq.n	8007270 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d019      	beq.n	800723a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720a:	4a15      	ldr	r2, [pc, #84]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007212:	f7fd feaf 	bl	8004f74 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800721a:	f7fd feab 	bl	8004f74 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e176      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800722e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0x23a>
 8007238:	e01a      	b.n	8007270 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 800723c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800723e:	4a08      	ldr	r2, [pc, #32]	; (8007260 <HAL_RCC_OscConfig+0x280>)
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007246:	f7fd fe95 	bl	8004f74 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800724c:	e00a      	b.n	8007264 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800724e:	f7fd fe91 	bl	8004f74 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d903      	bls.n	8007264 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e15c      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
 8007260:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007264:	4b91      	ldr	r3, [pc, #580]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ee      	bne.n	800724e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 80a4 	beq.w	80073c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800727e:	4b8b      	ldr	r3, [pc, #556]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800728a:	4b88      	ldr	r3, [pc, #544]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	4a87      	ldr	r2, [pc, #540]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007294:	6413      	str	r3, [r2, #64]	; 0x40
 8007296:	4b85      	ldr	r3, [pc, #532]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a6:	4b82      	ldr	r3, [pc, #520]	; (80074b0 <HAL_RCC_OscConfig+0x4d0>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d118      	bne.n	80072e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80072b2:	4b7f      	ldr	r3, [pc, #508]	; (80074b0 <HAL_RCC_OscConfig+0x4d0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a7e      	ldr	r2, [pc, #504]	; (80074b0 <HAL_RCC_OscConfig+0x4d0>)
 80072b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072be:	f7fd fe59 	bl	8004f74 <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c6:	f7fd fe55 	bl	8004f74 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b64      	cmp	r3, #100	; 0x64
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e120      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072d8:	4b75      	ldr	r3, [pc, #468]	; (80074b0 <HAL_RCC_OscConfig+0x4d0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d106      	bne.n	80072fa <HAL_RCC_OscConfig+0x31a>
 80072ec:	4b6f      	ldr	r3, [pc, #444]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a6e      	ldr	r2, [pc, #440]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
 80072f8:	e02d      	b.n	8007356 <HAL_RCC_OscConfig+0x376>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0x33c>
 8007302:	4b6a      	ldr	r3, [pc, #424]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	4a69      	ldr	r2, [pc, #420]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	6713      	str	r3, [r2, #112]	; 0x70
 800730e:	4b67      	ldr	r3, [pc, #412]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007312:	4a66      	ldr	r2, [pc, #408]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007314:	f023 0304 	bic.w	r3, r3, #4
 8007318:	6713      	str	r3, [r2, #112]	; 0x70
 800731a:	e01c      	b.n	8007356 <HAL_RCC_OscConfig+0x376>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b05      	cmp	r3, #5
 8007322:	d10c      	bne.n	800733e <HAL_RCC_OscConfig+0x35e>
 8007324:	4b61      	ldr	r3, [pc, #388]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	4a60      	ldr	r2, [pc, #384]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800732a:	f043 0304 	orr.w	r3, r3, #4
 800732e:	6713      	str	r3, [r2, #112]	; 0x70
 8007330:	4b5e      	ldr	r3, [pc, #376]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007334:	4a5d      	ldr	r2, [pc, #372]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6713      	str	r3, [r2, #112]	; 0x70
 800733c:	e00b      	b.n	8007356 <HAL_RCC_OscConfig+0x376>
 800733e:	4b5b      	ldr	r3, [pc, #364]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	4a5a      	ldr	r2, [pc, #360]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6713      	str	r3, [r2, #112]	; 0x70
 800734a:	4b58      	ldr	r3, [pc, #352]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	4a57      	ldr	r2, [pc, #348]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d015      	beq.n	800738a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735e:	f7fd fe09 	bl	8004f74 <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007364:	e00a      	b.n	800737c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007366:	f7fd fe05 	bl	8004f74 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	f241 3288 	movw	r2, #5000	; 0x1388
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e0ce      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800737c:	4b4b      	ldr	r3, [pc, #300]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0ee      	beq.n	8007366 <HAL_RCC_OscConfig+0x386>
 8007388:	e014      	b.n	80073b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738a:	f7fd fdf3 	bl	8004f74 <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007390:	e00a      	b.n	80073a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007392:	f7fd fdef 	bl	8004f74 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0b8      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073a8:	4b40      	ldr	r3, [pc, #256]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1ee      	bne.n	8007392 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d105      	bne.n	80073c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ba:	4b3c      	ldr	r3, [pc, #240]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	4a3b      	ldr	r2, [pc, #236]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80073c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80a4 	beq.w	8007518 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073d0:	4b36      	ldr	r3, [pc, #216]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 030c 	and.w	r3, r3, #12
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d06b      	beq.n	80074b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d149      	bne.n	8007478 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e4:	4b31      	ldr	r3, [pc, #196]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a30      	ldr	r2, [pc, #192]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80073ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f0:	f7fd fdc0 	bl	8004f74 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f8:	f7fd fdbc 	bl	8004f74 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b02      	cmp	r3, #2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e087      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800740a:	4b28      	ldr	r3, [pc, #160]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f0      	bne.n	80073f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69da      	ldr	r2, [r3, #28]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	019b      	lsls	r3, r3, #6
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	3b01      	subs	r3, #1
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	061b      	lsls	r3, r3, #24
 800743a:	4313      	orrs	r3, r2
 800743c:	4a1b      	ldr	r2, [pc, #108]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800743e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007442:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007444:	4b19      	ldr	r3, [pc, #100]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a18      	ldr	r2, [pc, #96]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800744a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800744e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007450:	f7fd fd90 	bl	8004f74 <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007458:	f7fd fd8c 	bl	8004f74 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e057      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800746a:	4b10      	ldr	r3, [pc, #64]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f0      	beq.n	8007458 <HAL_RCC_OscConfig+0x478>
 8007476:	e04f      	b.n	8007518 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007478:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 800747e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007484:	f7fd fd76 	bl	8004f74 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748c:	f7fd fd72 	bl	8004f74 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e03d      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749e:	4b03      	ldr	r3, [pc, #12]	; (80074ac <HAL_RCC_OscConfig+0x4cc>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f0      	bne.n	800748c <HAL_RCC_OscConfig+0x4ac>
 80074aa:	e035      	b.n	8007518 <HAL_RCC_OscConfig+0x538>
 80074ac:	40023800 	.word	0x40023800
 80074b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80074b4:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <HAL_RCC_OscConfig+0x544>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d028      	beq.n	8007514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d121      	bne.n	8007514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074da:	429a      	cmp	r2, r3
 80074dc:	d11a      	bne.n	8007514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074e4:	4013      	ands	r3, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d111      	bne.n	8007514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	3b01      	subs	r3, #1
 80074fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007500:	429a      	cmp	r2, r3
 8007502:	d107      	bne.n	8007514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007510:	429a      	cmp	r2, r3
 8007512:	d001      	beq.n	8007518 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40023800 	.word	0x40023800

08007528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0d0      	b.n	80076e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007540:	4b6a      	ldr	r3, [pc, #424]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d910      	bls.n	8007570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b67      	ldr	r3, [pc, #412]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 020f 	bic.w	r2, r3, #15
 8007556:	4965      	ldr	r1, [pc, #404]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800755e:	4b63      	ldr	r3, [pc, #396]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d001      	beq.n	8007570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e0b8      	b.n	80076e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d020      	beq.n	80075be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007588:	4b59      	ldr	r3, [pc, #356]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	4a58      	ldr	r2, [pc, #352]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 800758e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075a0:	4b53      	ldr	r3, [pc, #332]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	4a52      	ldr	r2, [pc, #328]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075ac:	4b50      	ldr	r3, [pc, #320]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	494d      	ldr	r1, [pc, #308]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d040      	beq.n	800764c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d107      	bne.n	80075e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075d2:	4b47      	ldr	r3, [pc, #284]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d115      	bne.n	800760a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e07f      	b.n	80076e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d107      	bne.n	80075fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ea:	4b41      	ldr	r3, [pc, #260]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e073      	b.n	80076e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075fa:	4b3d      	ldr	r3, [pc, #244]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e06b      	b.n	80076e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800760a:	4b39      	ldr	r3, [pc, #228]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f023 0203 	bic.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	4936      	ldr	r1, [pc, #216]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 8007618:	4313      	orrs	r3, r2
 800761a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800761c:	f7fd fcaa 	bl	8004f74 <HAL_GetTick>
 8007620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007622:	e00a      	b.n	800763a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007624:	f7fd fca6 	bl	8004f74 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e053      	b.n	80076e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800763a:	4b2d      	ldr	r3, [pc, #180]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 020c 	and.w	r2, r3, #12
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	429a      	cmp	r2, r3
 800764a:	d1eb      	bne.n	8007624 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800764c:	4b27      	ldr	r3, [pc, #156]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d210      	bcs.n	800767c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800765a:	4b24      	ldr	r3, [pc, #144]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f023 020f 	bic.w	r2, r3, #15
 8007662:	4922      	ldr	r1, [pc, #136]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	4313      	orrs	r3, r2
 8007668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800766a:	4b20      	ldr	r3, [pc, #128]	; (80076ec <HAL_RCC_ClockConfig+0x1c4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d001      	beq.n	800767c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e032      	b.n	80076e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007688:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4916      	ldr	r1, [pc, #88]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 8007696:	4313      	orrs	r3, r2
 8007698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d009      	beq.n	80076ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076a6:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	490e      	ldr	r1, [pc, #56]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076ba:	f000 f821 	bl	8007700 <HAL_RCC_GetSysClockFreq>
 80076be:	4601      	mov	r1, r0
 80076c0:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <HAL_RCC_ClockConfig+0x1c8>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	4a0a      	ldr	r2, [pc, #40]	; (80076f4 <HAL_RCC_ClockConfig+0x1cc>)
 80076cc:	5cd3      	ldrb	r3, [r2, r3]
 80076ce:	fa21 f303 	lsr.w	r3, r1, r3
 80076d2:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <HAL_RCC_ClockConfig+0x1d0>)
 80076d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <HAL_RCC_ClockConfig+0x1d4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fb fa2a 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40023c00 	.word	0x40023c00
 80076f0:	40023800 	.word	0x40023800
 80076f4:	0801a078 	.word	0x0801a078
 80076f8:	20000000 	.word	0x20000000
 80076fc:	20000004 	.word	0x20000004

08007700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	2300      	movs	r3, #0
 8007710:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007716:	4b63      	ldr	r3, [pc, #396]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 030c 	and.w	r3, r3, #12
 800771e:	2b04      	cmp	r3, #4
 8007720:	d007      	beq.n	8007732 <HAL_RCC_GetSysClockFreq+0x32>
 8007722:	2b08      	cmp	r3, #8
 8007724:	d008      	beq.n	8007738 <HAL_RCC_GetSysClockFreq+0x38>
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 80b4 	bne.w	8007894 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800772c:	4b5e      	ldr	r3, [pc, #376]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800772e:	60bb      	str	r3, [r7, #8]
      break;
 8007730:	e0b3      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007732:	4b5e      	ldr	r3, [pc, #376]	; (80078ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007734:	60bb      	str	r3, [r7, #8]
      break;
 8007736:	e0b0      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007738:	4b5a      	ldr	r3, [pc, #360]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007740:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007742:	4b58      	ldr	r3, [pc, #352]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d04a      	beq.n	80077e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800774e:	4b55      	ldr	r3, [pc, #340]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	099b      	lsrs	r3, r3, #6
 8007754:	f04f 0400 	mov.w	r4, #0
 8007758:	f240 11ff 	movw	r1, #511	; 0x1ff
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	ea03 0501 	and.w	r5, r3, r1
 8007764:	ea04 0602 	and.w	r6, r4, r2
 8007768:	4629      	mov	r1, r5
 800776a:	4632      	mov	r2, r6
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	f04f 0400 	mov.w	r4, #0
 8007774:	0154      	lsls	r4, r2, #5
 8007776:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800777a:	014b      	lsls	r3, r1, #5
 800777c:	4619      	mov	r1, r3
 800777e:	4622      	mov	r2, r4
 8007780:	1b49      	subs	r1, r1, r5
 8007782:	eb62 0206 	sbc.w	r2, r2, r6
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	f04f 0400 	mov.w	r4, #0
 800778e:	0194      	lsls	r4, r2, #6
 8007790:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007794:	018b      	lsls	r3, r1, #6
 8007796:	1a5b      	subs	r3, r3, r1
 8007798:	eb64 0402 	sbc.w	r4, r4, r2
 800779c:	f04f 0100 	mov.w	r1, #0
 80077a0:	f04f 0200 	mov.w	r2, #0
 80077a4:	00e2      	lsls	r2, r4, #3
 80077a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077aa:	00d9      	lsls	r1, r3, #3
 80077ac:	460b      	mov	r3, r1
 80077ae:	4614      	mov	r4, r2
 80077b0:	195b      	adds	r3, r3, r5
 80077b2:	eb44 0406 	adc.w	r4, r4, r6
 80077b6:	f04f 0100 	mov.w	r1, #0
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	0262      	lsls	r2, r4, #9
 80077c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80077c4:	0259      	lsls	r1, r3, #9
 80077c6:	460b      	mov	r3, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	4621      	mov	r1, r4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f04f 0400 	mov.w	r4, #0
 80077d4:	461a      	mov	r2, r3
 80077d6:	4623      	mov	r3, r4
 80077d8:	f7f9 fa4e 	bl	8000c78 <__aeabi_uldivmod>
 80077dc:	4603      	mov	r3, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e049      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077e4:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	099b      	lsrs	r3, r3, #6
 80077ea:	f04f 0400 	mov.w	r4, #0
 80077ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	ea03 0501 	and.w	r5, r3, r1
 80077fa:	ea04 0602 	and.w	r6, r4, r2
 80077fe:	4629      	mov	r1, r5
 8007800:	4632      	mov	r2, r6
 8007802:	f04f 0300 	mov.w	r3, #0
 8007806:	f04f 0400 	mov.w	r4, #0
 800780a:	0154      	lsls	r4, r2, #5
 800780c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007810:	014b      	lsls	r3, r1, #5
 8007812:	4619      	mov	r1, r3
 8007814:	4622      	mov	r2, r4
 8007816:	1b49      	subs	r1, r1, r5
 8007818:	eb62 0206 	sbc.w	r2, r2, r6
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	f04f 0400 	mov.w	r4, #0
 8007824:	0194      	lsls	r4, r2, #6
 8007826:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800782a:	018b      	lsls	r3, r1, #6
 800782c:	1a5b      	subs	r3, r3, r1
 800782e:	eb64 0402 	sbc.w	r4, r4, r2
 8007832:	f04f 0100 	mov.w	r1, #0
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	00e2      	lsls	r2, r4, #3
 800783c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007840:	00d9      	lsls	r1, r3, #3
 8007842:	460b      	mov	r3, r1
 8007844:	4614      	mov	r4, r2
 8007846:	195b      	adds	r3, r3, r5
 8007848:	eb44 0406 	adc.w	r4, r4, r6
 800784c:	f04f 0100 	mov.w	r1, #0
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	02a2      	lsls	r2, r4, #10
 8007856:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800785a:	0299      	lsls	r1, r3, #10
 800785c:	460b      	mov	r3, r1
 800785e:	4614      	mov	r4, r2
 8007860:	4618      	mov	r0, r3
 8007862:	4621      	mov	r1, r4
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	461a      	mov	r2, r3
 800786c:	4623      	mov	r3, r4
 800786e:	f7f9 fa03 	bl	8000c78 <__aeabi_uldivmod>
 8007872:	4603      	mov	r3, r0
 8007874:	460c      	mov	r4, r1
 8007876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	3301      	adds	r3, #1
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007890:	60bb      	str	r3, [r7, #8]
      break;
 8007892:	e002      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007894:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007896:	60bb      	str	r3, [r7, #8]
      break;
 8007898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800789a:	68bb      	ldr	r3, [r7, #8]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a4:	40023800 	.word	0x40023800
 80078a8:	00f42400 	.word	0x00f42400
 80078ac:	007a1200 	.word	0x007a1200

080078b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078b4:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078b6:	681b      	ldr	r3, [r3, #0]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000000 	.word	0x20000000

080078c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078cc:	f7ff fff0 	bl	80078b0 <HAL_RCC_GetHCLKFreq>
 80078d0:	4601      	mov	r1, r0
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	0a9b      	lsrs	r3, r3, #10
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	4a03      	ldr	r2, [pc, #12]	; (80078ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80078de:	5cd3      	ldrb	r3, [r2, r3]
 80078e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40023800 	.word	0x40023800
 80078ec:	0801a088 	.word	0x0801a088

080078f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078f4:	f7ff ffdc 	bl	80078b0 <HAL_RCC_GetHCLKFreq>
 80078f8:	4601      	mov	r1, r0
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	0b5b      	lsrs	r3, r3, #13
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	4a03      	ldr	r2, [pc, #12]	; (8007914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007906:	5cd3      	ldrb	r3, [r2, r3]
 8007908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800790c:	4618      	mov	r0, r3
 800790e:	bd80      	pop	{r7, pc}
 8007910:	40023800 	.word	0x40023800
 8007914:	0801a088 	.word	0x0801a088

08007918 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	220f      	movs	r2, #15
 8007926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007928:	4b12      	ldr	r3, [pc, #72]	; (8007974 <HAL_RCC_GetClockConfig+0x5c>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0203 	and.w	r2, r3, #3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007934:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <HAL_RCC_GetClockConfig+0x5c>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007940:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <HAL_RCC_GetClockConfig+0x5c>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <HAL_RCC_GetClockConfig+0x5c>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	08db      	lsrs	r3, r3, #3
 8007952:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800795a:	4b07      	ldr	r3, [pc, #28]	; (8007978 <HAL_RCC_GetClockConfig+0x60>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 020f 	and.w	r2, r3, #15
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	601a      	str	r2, [r3, #0]
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40023800 	.word	0x40023800
 8007978:	40023c00 	.word	0x40023c00

0800797c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d012      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079a4:	4b69      	ldr	r3, [pc, #420]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	4a68      	ldr	r2, [pc, #416]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079ae:	6093      	str	r3, [r2, #8]
 80079b0:	4b66      	ldr	r3, [pc, #408]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b8:	4964      	ldr	r1, [pc, #400]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80079c6:	2301      	movs	r3, #1
 80079c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d017      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079d6:	4b5d      	ldr	r3, [pc, #372]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	4959      	ldr	r1, [pc, #356]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f4:	d101      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80079f6:	2301      	movs	r3, #1
 80079f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a02:	2301      	movs	r3, #1
 8007a04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d017      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a12:	4b4e      	ldr	r3, [pc, #312]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	494a      	ldr	r1, [pc, #296]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a30:	d101      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 808b 	beq.w	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a60:	4b3a      	ldr	r3, [pc, #232]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	4a39      	ldr	r2, [pc, #228]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8007a6c:	4b37      	ldr	r3, [pc, #220]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a78:	4b35      	ldr	r3, [pc, #212]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a34      	ldr	r2, [pc, #208]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a84:	f7fd fa76 	bl	8004f74 <HAL_GetTick>
 8007a88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a8c:	f7fd fa72 	bl	8004f74 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b64      	cmp	r3, #100	; 0x64
 8007a98:	d901      	bls.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e31e      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a9e:	4b2c      	ldr	r3, [pc, #176]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0f0      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007aaa:	4b28      	ldr	r3, [pc, #160]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d035      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d02e      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ac8:	4b20      	ldr	r3, [pc, #128]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ad2:	4b1e      	ldr	r3, [pc, #120]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad6:	4a1d      	ldr	r2, [pc, #116]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007adc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ade:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae2:	4a1a      	ldr	r2, [pc, #104]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007aea:	4a18      	ldr	r2, [pc, #96]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007af0:	4b16      	ldr	r3, [pc, #88]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d114      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afc:	f7fd fa3a 	bl	8004f74 <HAL_GetTick>
 8007b00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b02:	e00a      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b04:	f7fd fa36 	bl	8004f74 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e2e0      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0ee      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b32:	d111      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b42:	400b      	ands	r3, r1
 8007b44:	4901      	ldr	r1, [pc, #4]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	608b      	str	r3, [r1, #8]
 8007b4a:	e00b      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	40007000 	.word	0x40007000
 8007b54:	0ffffcff 	.word	0x0ffffcff
 8007b58:	4bac      	ldr	r3, [pc, #688]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	4aab      	ldr	r2, [pc, #684]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b62:	6093      	str	r3, [r2, #8]
 8007b64:	4ba9      	ldr	r3, [pc, #676]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b70:	49a6      	ldr	r1, [pc, #664]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0310 	and.w	r3, r3, #16
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d010      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b82:	4ba2      	ldr	r3, [pc, #648]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b88:	4aa0      	ldr	r2, [pc, #640]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007b92:	4b9e      	ldr	r3, [pc, #632]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	499b      	ldr	r1, [pc, #620]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bb0:	4b96      	ldr	r3, [pc, #600]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bbe:	4993      	ldr	r1, [pc, #588]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bd2:	4b8e      	ldr	r3, [pc, #568]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007be0:	498a      	ldr	r1, [pc, #552]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bf4:	4b85      	ldr	r3, [pc, #532]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c02:	4982      	ldr	r1, [pc, #520]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c16:	4b7d      	ldr	r3, [pc, #500]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c24:	4979      	ldr	r1, [pc, #484]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c38:	4b74      	ldr	r3, [pc, #464]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f023 0203 	bic.w	r2, r3, #3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	4971      	ldr	r1, [pc, #452]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c5a:	4b6c      	ldr	r3, [pc, #432]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f023 020c 	bic.w	r2, r3, #12
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c68:	4968      	ldr	r1, [pc, #416]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c7c:	4b63      	ldr	r3, [pc, #396]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8a:	4960      	ldr	r1, [pc, #384]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c9e:	4b5b      	ldr	r3, [pc, #364]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cac:	4957      	ldr	r1, [pc, #348]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cc0:	4b52      	ldr	r3, [pc, #328]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	494f      	ldr	r1, [pc, #316]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007ce2:	4b4a      	ldr	r3, [pc, #296]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf0:	4946      	ldr	r1, [pc, #280]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d04:	4b41      	ldr	r3, [pc, #260]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d12:	493e      	ldr	r1, [pc, #248]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d26:	4b39      	ldr	r3, [pc, #228]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d34:	4935      	ldr	r1, [pc, #212]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d48:	4b30      	ldr	r3, [pc, #192]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d56:	492d      	ldr	r1, [pc, #180]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d011      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d6a:	4b28      	ldr	r3, [pc, #160]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d78:	4924      	ldr	r1, [pc, #144]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d88:	d101      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d9a:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da8:	4918      	ldr	r1, [pc, #96]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dcc:	490f      	ldr	r1, [pc, #60]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d005      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007de2:	f040 80d8 	bne.w	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df2:	f7fd f8bf 	bl	8004f74 <HAL_GetTick>
 8007df6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007df8:	e00a      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007dfa:	f7fd f8bb 	bl	8004f74 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b64      	cmp	r3, #100	; 0x64
 8007e06:	d903      	bls.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e167      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x760>
 8007e0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e10:	4bad      	ldr	r3, [pc, #692]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1ee      	bne.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d021      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d11d      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e30:	4ba5      	ldr	r3, [pc, #660]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e36:	0c1b      	lsrs	r3, r3, #16
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e3e:	4ba2      	ldr	r3, [pc, #648]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e44:	0e1b      	lsrs	r3, r3, #24
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	019a      	lsls	r2, r3, #6
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	041b      	lsls	r3, r3, #16
 8007e56:	431a      	orrs	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	061b      	lsls	r3, r3, #24
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	071b      	lsls	r3, r3, #28
 8007e64:	4998      	ldr	r1, [pc, #608]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e80:	d00a      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02e      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e96:	d129      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e98:	4b8b      	ldr	r3, [pc, #556]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ea6:	4b88      	ldr	r3, [pc, #544]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eac:	0f1b      	lsrs	r3, r3, #28
 8007eae:	f003 0307 	and.w	r3, r3, #7
 8007eb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	019a      	lsls	r2, r3, #6
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	071b      	lsls	r3, r3, #28
 8007ecc:	497e      	ldr	r1, [pc, #504]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ed4:	4b7c      	ldr	r3, [pc, #496]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eda:	f023 021f 	bic.w	r2, r3, #31
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	4978      	ldr	r1, [pc, #480]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01d      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ef8:	4b73      	ldr	r3, [pc, #460]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efe:	0e1b      	lsrs	r3, r3, #24
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f06:	4b70      	ldr	r3, [pc, #448]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0c:	0f1b      	lsrs	r3, r3, #28
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	019a      	lsls	r2, r3, #6
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	041b      	lsls	r3, r3, #16
 8007f20:	431a      	orrs	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	061b      	lsls	r3, r3, #24
 8007f26:	431a      	orrs	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	071b      	lsls	r3, r3, #28
 8007f2c:	4966      	ldr	r1, [pc, #408]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d011      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	019a      	lsls	r2, r3, #6
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	041b      	lsls	r3, r3, #16
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	061b      	lsls	r3, r3, #24
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	071b      	lsls	r3, r3, #28
 8007f5c:	495a      	ldr	r1, [pc, #360]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f64:	4b58      	ldr	r3, [pc, #352]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a57      	ldr	r2, [pc, #348]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f70:	f7fd f800 	bl	8004f74 <HAL_GetTick>
 8007f74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f76:	e008      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f78:	f7fc fffc 	bl	8004f74 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b64      	cmp	r3, #100	; 0x64
 8007f84:	d901      	bls.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e0a8      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f8a:	4b4f      	ldr	r3, [pc, #316]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	f040 809e 	bne.w	80080da <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f9e:	4b4a      	ldr	r3, [pc, #296]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a49      	ldr	r2, [pc, #292]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007faa:	f7fc ffe3 	bl	8004f74 <HAL_GetTick>
 8007fae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fb2:	f7fc ffdf 	bl	8004f74 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b64      	cmp	r3, #100	; 0x64
 8007fbe:	d901      	bls.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e08b      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fc4:	4b40      	ldr	r3, [pc, #256]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd0:	d0ef      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d02e      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d12a      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ffa:	4b33      	ldr	r3, [pc, #204]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008000:	0c1b      	lsrs	r3, r3, #16
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008008:	4b2f      	ldr	r3, [pc, #188]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800e:	0f1b      	lsrs	r3, r3, #28
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	019a      	lsls	r2, r3, #6
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	041b      	lsls	r3, r3, #16
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	061b      	lsls	r3, r3, #24
 8008028:	431a      	orrs	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	071b      	lsls	r3, r3, #28
 800802e:	4926      	ldr	r1, [pc, #152]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008030:	4313      	orrs	r3, r2
 8008032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008036:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	3b01      	subs	r3, #1
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	491f      	ldr	r1, [pc, #124]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d022      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008064:	d11d      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008066:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806c:	0e1b      	lsrs	r3, r3, #24
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008074:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	0f1b      	lsrs	r3, r3, #28
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	019a      	lsls	r2, r3, #6
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	041b      	lsls	r3, r3, #16
 800808e:	431a      	orrs	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	061b      	lsls	r3, r3, #24
 8008094:	431a      	orrs	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	071b      	lsls	r3, r3, #28
 800809a:	490b      	ldr	r1, [pc, #44]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800809c:	4313      	orrs	r3, r2
 800809e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ae:	f7fc ff61 	bl	8004f74 <HAL_GetTick>
 80080b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080b4:	e00a      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080b6:	f7fc ff5d 	bl	8004f74 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b64      	cmp	r3, #100	; 0x64
 80080c2:	d903      	bls.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e009      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80080c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d8:	d1ed      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40023800 	.word	0x40023800

080080e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e022      	b.n	8008140 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fa faf7 	bl	8002700 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2203      	movs	r2, #3
 8008116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f814 	bl	8008148 <HAL_SD_InitCard>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e00a      	b.n	8008140 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008148:	b5b0      	push	{r4, r5, r7, lr}
 800814a:	b08e      	sub	sp, #56	; 0x38
 800814c:	af04      	add	r7, sp, #16
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008150:	2300      	movs	r3, #0
 8008152:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008158:	2300      	movs	r3, #0
 800815a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008160:	2300      	movs	r3, #0
 8008162:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008164:	2376      	movs	r3, #118	; 0x76
 8008166:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681d      	ldr	r5, [r3, #0]
 800816c:	466c      	mov	r4, sp
 800816e:	f107 0314 	add.w	r3, r7, #20
 8008172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008180:	4628      	mov	r0, r5
 8008182:	f003 f97d 	bl	800b480 <SDMMC_Init>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800818c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e03b      	b.n	8008210 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081a6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f003 f9b1 	bl	800b514 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081c0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 ffca 	bl	800915c <SD_PowerON>
 80081c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e013      	b.n	8008210 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fee9 	bl	8008fc0 <SD_InitCard>
 80081ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3728      	adds	r7, #40	; 0x28
 8008214:	46bd      	mov	sp, r7
 8008216:	bdb0      	pop	{r4, r5, r7, pc}

08008218 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08c      	sub	sp, #48	; 0x30
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d107      	bne.n	8008240 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e0cc      	b.n	80083da <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b01      	cmp	r3, #1
 800824a:	f040 80c5 	bne.w	80083d8 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	441a      	add	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800825e:	429a      	cmp	r2, r3
 8008260:	d907      	bls.n	8008272 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e0b3      	b.n	80083da <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2203      	movs	r2, #3
 8008276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2200      	movs	r2, #0
 8008280:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	4a53      	ldr	r2, [pc, #332]	; (80083e4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	4a52      	ldr	r2, [pc, #328]	; (80083e8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80082a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	2200      	movs	r2, #0
 80082a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3380      	adds	r3, #128	; 0x80
 80082b4:	4619      	mov	r1, r3
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	025b      	lsls	r3, r3, #9
 80082bc:	089b      	lsrs	r3, r3, #2
 80082be:	f7fd f817 	bl	80052f0 <HAL_DMA_Start_IT>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d017      	beq.n	80082f8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80082d6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a43      	ldr	r2, [pc, #268]	; (80083ec <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e070      	b.n	80083da <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0208 	orr.w	r2, r2, #8
 8008306:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830c:	2b01      	cmp	r3, #1
 800830e:	d002      	beq.n	8008316 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	025b      	lsls	r3, r3, #9
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800831e:	4618      	mov	r0, r3
 8008320:	f003 f98c 	bl	800b63c <SDMMC_CmdBlockLength>
 8008324:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00f      	beq.n	800834c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a2e      	ldr	r2, [pc, #184]	; (80083ec <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008332:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	431a      	orrs	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e046      	b.n	80083da <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800834c:	f04f 33ff 	mov.w	r3, #4294967295
 8008350:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	025b      	lsls	r3, r3, #9
 8008356:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008358:	2390      	movs	r3, #144	; 0x90
 800835a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800835c:	2302      	movs	r3, #2
 800835e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008360:	2300      	movs	r3, #0
 8008362:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008364:	2301      	movs	r3, #1
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f107 0210 	add.w	r2, r7, #16
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f003 f936 	bl	800b5e4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d90a      	bls.n	8008394 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2282      	movs	r2, #130	; 0x82
 8008382:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800838a:	4618      	mov	r0, r3
 800838c:	f003 f99a 	bl	800b6c4 <SDMMC_CmdReadMultiBlock>
 8008390:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008392:	e009      	b.n	80083a8 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2281      	movs	r2, #129	; 0x81
 8008398:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083a0:	4618      	mov	r0, r3
 80083a2:	f003 f96d 	bl	800b680 <SDMMC_CmdReadSingleBlock>
 80083a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d012      	beq.n	80083d4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a0e      	ldr	r2, [pc, #56]	; (80083ec <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	431a      	orrs	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e002      	b.n	80083da <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e000      	b.n	80083da <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
  }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3730      	adds	r7, #48	; 0x30
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	08008dcf 	.word	0x08008dcf
 80083e8:	08008e41 	.word	0x08008e41
 80083ec:	004005ff 	.word	0x004005ff

080083f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d107      	bne.n	8008418 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e0cf      	b.n	80085b8 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b01      	cmp	r3, #1
 8008422:	f040 80c8 	bne.w	80085b6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800842c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	441a      	add	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008436:	429a      	cmp	r2, r3
 8008438:	d907      	bls.n	800844a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e0b6      	b.n	80085b8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2203      	movs	r2, #3
 800844e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2200      	movs	r2, #0
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 021a 	orr.w	r2, r2, #26
 8008468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846e:	4a54      	ldr	r2, [pc, #336]	; (80085c0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008470:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	4a53      	ldr	r2, [pc, #332]	; (80085c4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008478:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	2200      	movs	r2, #0
 8008480:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008486:	2b01      	cmp	r3, #1
 8008488:	d002      	beq.n	8008490 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	025b      	lsls	r3, r3, #9
 800848e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008498:	4618      	mov	r0, r3
 800849a:	f003 f8cf 	bl	800b63c <SDMMC_CmdBlockLength>
 800849e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a47      	ldr	r2, [pc, #284]	; (80085c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	431a      	orrs	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e078      	b.n	80085b8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d90a      	bls.n	80084e2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	22a0      	movs	r2, #160	; 0xa0
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084d8:	4618      	mov	r0, r3
 80084da:	f003 f937 	bl	800b74c <SDMMC_CmdWriteMultiBlock>
 80084de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084e0:	e009      	b.n	80084f6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2290      	movs	r2, #144	; 0x90
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 f90a 	bl	800b708 <SDMMC_CmdWriteSingleBlock>
 80084f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d012      	beq.n	8008522 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a31      	ldr	r2, [pc, #196]	; (80085c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	431a      	orrs	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e04a      	b.n	80085b8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0208 	orr.w	r2, r2, #8
 8008530:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3380      	adds	r3, #128	; 0x80
 800853e:	461a      	mov	r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	025b      	lsls	r3, r3, #9
 8008544:	089b      	lsrs	r3, r3, #2
 8008546:	f7fc fed3 	bl	80052f0 <HAL_DMA_Start_IT>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01a      	beq.n	8008586 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 021a 	bic.w	r2, r2, #26
 800855e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e018      	b.n	80085b8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008586:	f04f 33ff 	mov.w	r3, #4294967295
 800858a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	025b      	lsls	r3, r3, #9
 8008590:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008592:	2390      	movs	r3, #144	; 0x90
 8008594:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800859a:	2300      	movs	r3, #0
 800859c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800859e:	2301      	movs	r3, #1
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f107 0210 	add.w	r2, r7, #16
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f003 f819 	bl	800b5e4 <SDMMC_ConfigData>

      return HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e000      	b.n	80085b8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80085b6:	2302      	movs	r3, #2
  }
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3730      	adds	r7, #48	; 0x30
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	08008da5 	.word	0x08008da5
 80085c4:	08008e41 	.word	0x08008e41
 80085c8:	004005ff 	.word	0x004005ff

080085cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_SD_IRQHandler+0x2e>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 ffc8 	bl	8009588 <SD_Read_IT>
 80085f8:	e153      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 808d 	beq.w	8008724 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008612:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4ba3      	ldr	r3, [pc, #652]	; (80088ac <HAL_SD_IRQHandler+0x2e0>)
 8008620:	400b      	ands	r3, r1
 8008622:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d039      	beq.n	80086b2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d104      	bne.n	8008652 <HAL_SD_IRQHandler+0x86>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b00      	cmp	r3, #0
 8008650:	d011      	beq.n	8008676 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f003 f89a 	bl	800b790 <SDMMC_CmdStopTransfer>
 800865c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d008      	beq.n	8008676 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	431a      	orrs	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f921 	bl	80088b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f240 523a 	movw	r2, #1338	; 0x53a
 800867e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d104      	bne.n	80086a2 <HAL_SD_IRQHandler+0xd6>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f005 f81c 	bl	800d6e0 <HAL_SD_RxCpltCallback>
 80086a8:	e0fb      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f005 f80e 	bl	800d6cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80086b0:	e0f7      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80f2 	beq.w	80088a2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d011      	beq.n	80086ec <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f003 f85f 	bl	800b790 <SDMMC_CmdStopTransfer>
 80086d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f8e6 	bl	80088b8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f040 80d5 	bne.w	80088a2 <HAL_SD_IRQHandler+0x2d6>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f040 80cf 	bne.w	80088a2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0208 	bic.w	r2, r2, #8
 8008712:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f004 ffd5 	bl	800d6cc <HAL_SD_TxCpltCallback>
}
 8008722:	e0be      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d008      	beq.n	8008744 <HAL_SD_IRQHandler+0x178>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 ff74 	bl	800962a <SD_Write_IT>
 8008742:	e0ae      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 80a7 	beq.w	80088a2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	f043 0202 	orr.w	r2, r3, #2
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	f043 0208 	orr.w	r2, r3, #8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	f043 0220 	orr.w	r2, r3, #32
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	f043 0210 	orr.w	r2, r3, #16
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80087d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 ffd8 	bl	800b790 <SDMMC_CmdStopTransfer>
 80087e0:	4602      	mov	r2, r0
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f857 	bl	80088b8 <HAL_SD_ErrorCallback>
}
 800880a:	e04a      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b00      	cmp	r3, #0
 8008814:	d045      	beq.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <HAL_SD_IRQHandler+0x25e>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d011      	beq.n	800884e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882e:	4a20      	ldr	r2, [pc, #128]	; (80088b0 <HAL_SD_IRQHandler+0x2e4>)
 8008830:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008836:	4618      	mov	r0, r3
 8008838:	f7fc fdba 	bl	80053b0 <HAL_DMA_Abort_IT>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d02f      	beq.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fb4c 	bl	8008ee4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800884c:	e029      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <HAL_SD_IRQHandler+0x296>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d011      	beq.n	8008886 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <HAL_SD_IRQHandler+0x2e8>)
 8008868:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	4618      	mov	r0, r3
 8008870:	f7fc fd9e 	bl	80053b0 <HAL_DMA_Abort_IT>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d013      	beq.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fb67 	bl	8008f52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008884:	e00d      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f004 ff0c 	bl	800d6b8 <HAL_SD_AbortCallback>
}
 80088a0:	e7ff      	b.n	80088a2 <HAL_SD_IRQHandler+0x2d6>
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	ffff3ec5 	.word	0xffff3ec5
 80088b0:	08008ee5 	.word	0x08008ee5
 80088b4:	08008f53 	.word	0x08008f53

080088b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088da:	0f9b      	lsrs	r3, r3, #30
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e6:	0e9b      	lsrs	r3, r3, #26
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f8:	0e1b      	lsrs	r3, r3, #24
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	b2da      	uxtb	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800890a:	0c1b      	lsrs	r3, r3, #16
 800890c:	b2da      	uxtb	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	b2da      	uxtb	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008922:	b2da      	uxtb	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800892c:	0d1b      	lsrs	r3, r3, #20
 800892e:	b29a      	uxth	r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008938:	0c1b      	lsrs	r3, r3, #16
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f003 030f 	and.w	r3, r3, #15
 8008940:	b2da      	uxtb	r2, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800894a:	0bdb      	lsrs	r3, r3, #15
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800895c:	0b9b      	lsrs	r3, r3, #14
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	b2da      	uxtb	r2, r3
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800896e:	0b5b      	lsrs	r3, r3, #13
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	b2da      	uxtb	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008980:	0b1b      	lsrs	r3, r3, #12
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	b2da      	uxtb	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2200      	movs	r2, #0
 8008992:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008998:	2b00      	cmp	r3, #0
 800899a:	d163      	bne.n	8008a64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089a0:	009a      	lsls	r2, r3, #2
 80089a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089a6:	4013      	ands	r3, r2
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80089ac:	0f92      	lsrs	r2, r2, #30
 80089ae:	431a      	orrs	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b8:	0edb      	lsrs	r3, r3, #27
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ca:	0e1b      	lsrs	r3, r3, #24
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089dc:	0d5b      	lsrs	r3, r3, #21
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ee:	0c9b      	lsrs	r3, r3, #18
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a00:	0bdb      	lsrs	r3, r3, #15
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	7e1b      	ldrb	r3, [r3, #24]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	3302      	adds	r3, #2
 8008a24:	2201      	movs	r2, #1
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008a2e:	fb02 f203 	mul.w	r2, r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	7a1b      	ldrb	r3, [r3, #8]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	2201      	movs	r2, #1
 8008a42:	409a      	lsls	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008a50:	0a52      	lsrs	r2, r2, #9
 8008a52:	fb02 f203 	mul.w	r2, r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a60:	661a      	str	r2, [r3, #96]	; 0x60
 8008a62:	e031      	b.n	8008ac8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d11d      	bne.n	8008aa8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a70:	041b      	lsls	r3, r3, #16
 8008a72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	3301      	adds	r3, #1
 8008a88:	029a      	lsls	r2, r3, #10
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	661a      	str	r2, [r3, #96]	; 0x60
 8008aa6:	e00f      	b.n	8008ac8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a58      	ldr	r2, [pc, #352]	; (8008c10 <HAL_SD_GetCardCSD+0x344>)
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e09d      	b.n	8008c04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008acc:	0b9b      	lsrs	r3, r3, #14
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ade:	09db      	lsrs	r3, r3, #7
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b00:	0fdb      	lsrs	r3, r3, #31
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0c:	0f5b      	lsrs	r3, r3, #29
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1e:	0e9b      	lsrs	r3, r3, #26
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b30:	0d9b      	lsrs	r3, r3, #22
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b42:	0d5b      	lsrs	r3, r3, #21
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b72:	0bdb      	lsrs	r3, r3, #15
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b86:	0b9b      	lsrs	r3, r3, #14
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	0b5b      	lsrs	r3, r3, #13
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bae:	0b1b      	lsrs	r3, r3, #12
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	0a9b      	lsrs	r3, r3, #10
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	004005ff 	.word	0x004005ff

08008c14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008c6c:	b5b0      	push	{r4, r5, r7, lr}
 8008c6e:	b08e      	sub	sp, #56	; 0x38
 8008c70:	af04      	add	r7, sp, #16
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d02e      	beq.n	8008ce4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8c:	d106      	bne.n	8008c9c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	639a      	str	r2, [r3, #56]	; 0x38
 8008c9a:	e029      	b.n	8008cf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ca2:	d10a      	bne.n	8008cba <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb0f 	bl	80092c8 <SD_WideBus_Enable>
 8008caa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8008cb8:	e01a      	b.n	8008cf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fb4c 	bl	800935e <SD_WideBus_Disable>
 8008cc6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8008cd4:	e00c      	b.n	8008cf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ce2:	e005      	b.n	8008cf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d009      	beq.n	8008d0c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a18      	ldr	r2, [pc, #96]	; (8008d60 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e024      	b.n	8008d56 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681d      	ldr	r5, [r3, #0]
 8008d32:	466c      	mov	r4, sp
 8008d34:	f107 0318 	add.w	r3, r7, #24
 8008d38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d46:	4628      	mov	r0, r5
 8008d48:	f002 fb9a 	bl	800b480 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	; 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	004005ff 	.word	0x004005ff

08008d64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d70:	f107 030c 	add.w	r3, r7, #12
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fa7e 	bl	8009278 <SD_SendStatus>
 8008d7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	0a5b      	lsrs	r3, r3, #9
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008d9a:	693b      	ldr	r3, [r7, #16]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3718      	adds	r7, #24
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dc0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	2b82      	cmp	r3, #130	; 0x82
 8008de2:	d111      	bne.n	8008e08 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f002 fcd1 	bl	800b790 <SDMMC_CmdStopTransfer>
 8008dee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7ff fd58 	bl	80088b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0208 	bic.w	r2, r2, #8
 8008e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e20:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f004 fc55 	bl	800d6e0 <HAL_SD_RxCpltCallback>
#endif
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fc fc5a 	bl	8005708 <HAL_DMA_GetError>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d03e      	beq.n	8008ed8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e60:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e68:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d002      	beq.n	8008e76 <SD_DMAError+0x36>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d12d      	bne.n	8008ed2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <SD_DMAError+0xa0>)
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e8c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008e9a:	6978      	ldr	r0, [r7, #20]
 8008e9c:	f7ff ff62 	bl	8008d64 <HAL_SD_GetCardState>
 8008ea0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b06      	cmp	r3, #6
 8008ea6:	d002      	beq.n	8008eae <SD_DMAError+0x6e>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d10a      	bne.n	8008ec4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f002 fc6c 	bl	800b790 <SDMMC_CmdStopTransfer>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008ed2:	6978      	ldr	r0, [r7, #20]
 8008ed4:	f7ff fcf0 	bl	80088b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	004005ff 	.word	0x004005ff

08008ee4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f240 523a 	movw	r2, #1338	; 0x53a
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff ff31 	bl	8008d64 <HAL_SD_GetCardState>
 8008f02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b06      	cmp	r3, #6
 8008f16:	d002      	beq.n	8008f1e <SD_DMATxAbort+0x3a>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b05      	cmp	r3, #5
 8008f1c:	d10a      	bne.n	8008f34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f002 fc34 	bl	800b790 <SDMMC_CmdStopTransfer>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d103      	bne.n	8008f44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f004 fbbb 	bl	800d6b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008f42:	e002      	b.n	8008f4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff fcb7 	bl	80088b8 <HAL_SD_ErrorCallback>
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fefa 	bl	8008d64 <HAL_SD_GetCardState>
 8008f70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b06      	cmp	r3, #6
 8008f84:	d002      	beq.n	8008f8c <SD_DMARxAbort+0x3a>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b05      	cmp	r3, #5
 8008f8a:	d10a      	bne.n	8008fa2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 fbfd 	bl	800b790 <SDMMC_CmdStopTransfer>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d103      	bne.n	8008fb2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f004 fb84 	bl	800d6b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008fb0:	e002      	b.n	8008fb8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff fc80 	bl	80088b8 <HAL_SD_ErrorCallback>
}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fc0:	b5b0      	push	{r4, r5, r7, lr}
 8008fc2:	b094      	sub	sp, #80	; 0x50
 8008fc4:	af04      	add	r7, sp, #16
 8008fc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 faae 	bl	800b532 <SDMMC_GetPowerState>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008fe0:	e0b7      	b.n	8009152 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d02f      	beq.n	800904a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f002 fcd9 	bl	800b9a6 <SDMMC_CmdSendCID>
 8008ff4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <SD_InitCard+0x40>
    {
      return errorstate;
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffe:	e0a8      	b.n	8009152 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2100      	movs	r1, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f002 fad9 	bl	800b5be <SDMMC_GetResponse>
 800900c:	4602      	mov	r2, r0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2104      	movs	r1, #4
 8009018:	4618      	mov	r0, r3
 800901a:	f002 fad0 	bl	800b5be <SDMMC_GetResponse>
 800901e:	4602      	mov	r2, r0
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2108      	movs	r1, #8
 800902a:	4618      	mov	r0, r3
 800902c:	f002 fac7 	bl	800b5be <SDMMC_GetResponse>
 8009030:	4602      	mov	r2, r0
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	210c      	movs	r1, #12
 800903c:	4618      	mov	r0, r3
 800903e:	f002 fabe 	bl	800b5be <SDMMC_GetResponse>
 8009042:	4602      	mov	r2, r0
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904e:	2b03      	cmp	r3, #3
 8009050:	d00d      	beq.n	800906e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f107 020e 	add.w	r2, r7, #14
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f002 fcdf 	bl	800ba20 <SDMMC_CmdSetRelAdd>
 8009062:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <SD_InitCard+0xae>
    {
      return errorstate;
 800906a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906c:	e071      	b.n	8009152 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	2b03      	cmp	r3, #3
 8009074:	d036      	beq.n	80090e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009076:	89fb      	ldrh	r3, [r7, #14]
 8009078:	461a      	mov	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009086:	041b      	lsls	r3, r3, #16
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f002 fca9 	bl	800b9e2 <SDMMC_CmdSendCSD>
 8009090:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909a:	e05a      	b.n	8009152 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f002 fa8b 	bl	800b5be <SDMMC_GetResponse>
 80090a8:	4602      	mov	r2, r0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2104      	movs	r1, #4
 80090b4:	4618      	mov	r0, r3
 80090b6:	f002 fa82 	bl	800b5be <SDMMC_GetResponse>
 80090ba:	4602      	mov	r2, r0
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2108      	movs	r1, #8
 80090c6:	4618      	mov	r0, r3
 80090c8:	f002 fa79 	bl	800b5be <SDMMC_GetResponse>
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	210c      	movs	r1, #12
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 fa70 	bl	800b5be <SDMMC_GetResponse>
 80090de:	4602      	mov	r2, r0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2104      	movs	r1, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f002 fa67 	bl	800b5be <SDMMC_GetResponse>
 80090f0:	4603      	mov	r3, r0
 80090f2:	0d1a      	lsrs	r2, r3, #20
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090f8:	f107 0310 	add.w	r3, r7, #16
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fbe4 	bl	80088cc <HAL_SD_GetCardCSD>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800910a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800910e:	e020      	b.n	8009152 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009118:	041b      	lsls	r3, r3, #16
 800911a:	f04f 0400 	mov.w	r4, #0
 800911e:	461a      	mov	r2, r3
 8009120:	4623      	mov	r3, r4
 8009122:	4608      	mov	r0, r1
 8009124:	f002 fb56 	bl	800b7d4 <SDMMC_CmdSelDesel>
 8009128:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800912a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <SD_InitCard+0x174>
  {
    return errorstate;
 8009130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009132:	e00e      	b.n	8009152 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681d      	ldr	r5, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	466c      	mov	r4, sp
 800913c:	f103 0210 	add.w	r2, r3, #16
 8009140:	ca07      	ldmia	r2, {r0, r1, r2}
 8009142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009146:	3304      	adds	r3, #4
 8009148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800914a:	4628      	mov	r0, r5
 800914c:	f002 f998 	bl	800b480 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3740      	adds	r7, #64	; 0x40
 8009156:	46bd      	mov	sp, r7
 8009158:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800915c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	2300      	movs	r3, #0
 800916e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f002 fb50 	bl	800b81a <SDMMC_CmdGoIdleState>
 800917a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	e072      	b.n	800926c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f002 fb63 	bl	800b856 <SDMMC_CmdOperCond>
 8009190:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f002 fb39 	bl	800b81a <SDMMC_CmdGoIdleState>
 80091a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e05b      	b.n	800926c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d137      	bne.n	8009232 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2100      	movs	r1, #0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f002 fb63 	bl	800b894 <SDMMC_CmdAppCommand>
 80091ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d02d      	beq.n	8009232 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091da:	e047      	b.n	800926c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f002 fb56 	bl	800b894 <SDMMC_CmdAppCommand>
 80091e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	e03b      	b.n	800926c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	491e      	ldr	r1, [pc, #120]	; (8009274 <SD_PowerON+0x118>)
 80091fa:	4618      	mov	r0, r3
 80091fc:	f002 fb6c 	bl	800b8d8 <SDMMC_CmdAppOperCommand>
 8009200:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009208:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800920c:	e02e      	b.n	800926c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2100      	movs	r1, #0
 8009214:	4618      	mov	r0, r3
 8009216:	f002 f9d2 	bl	800b5be <SDMMC_GetResponse>
 800921a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	0fdb      	lsrs	r3, r3, #31
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <SD_PowerON+0xcc>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <SD_PowerON+0xce>
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]

    count++;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3301      	adds	r3, #1
 8009230:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009238:	4293      	cmp	r3, r2
 800923a:	d802      	bhi.n	8009242 <SD_PowerON+0xe6>
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0cc      	beq.n	80091dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009248:	4293      	cmp	r3, r2
 800924a:	d902      	bls.n	8009252 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800924c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009250:	e00c      	b.n	800926c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	645a      	str	r2, [r3, #68]	; 0x44
 8009262:	e002      	b.n	800926a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	c1100000 	.word	0xc1100000

08009278 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800928c:	e018      	b.n	80092c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f002 fbe1 	bl	800ba62 <SDMMC_CmdSendStatus>
 80092a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e009      	b.n	80092c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 f983 	bl	800b5be <SDMMC_GetResponse>
 80092b8:	4602      	mov	r2, r0
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	2300      	movs	r3, #0
 80092d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f002 f96d 	bl	800b5be <SDMMC_GetResponse>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ee:	d102      	bne.n	80092f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f4:	e02f      	b.n	8009356 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092f6:	f107 030c 	add.w	r3, r7, #12
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f879 	bl	80093f4 <SD_FindSCR>
 8009302:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	e023      	b.n	8009356 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01c      	beq.n	8009352 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009320:	041b      	lsls	r3, r3, #16
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f002 fab5 	bl	800b894 <SDMMC_CmdAppCommand>
 800932a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	e00f      	b.n	8009356 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2102      	movs	r1, #2
 800933c:	4618      	mov	r0, r3
 800933e:	f002 faef 	bl	800b920 <SDMMC_CmdBusWidth>
 8009342:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	e003      	b.n	8009356 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800934e:	2300      	movs	r3, #0
 8009350:	e001      	b.n	8009356 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b086      	sub	sp, #24
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f002 f922 	bl	800b5be <SDMMC_GetResponse>
 800937a:	4603      	mov	r3, r0
 800937c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009384:	d102      	bne.n	800938c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009386:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800938a:	e02f      	b.n	80093ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f82e 	bl	80093f4 <SD_FindSCR>
 8009398:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	e023      	b.n	80093ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01c      	beq.n	80093e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	4619      	mov	r1, r3
 80093ba:	4610      	mov	r0, r2
 80093bc:	f002 fa6a 	bl	800b894 <SDMMC_CmdAppCommand>
 80093c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	e00f      	b.n	80093ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f002 faa4 	bl	800b920 <SDMMC_CmdBusWidth>
 80093d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	e003      	b.n	80093ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e001      	b.n	80093ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093f4:	b590      	push	{r4, r7, lr}
 80093f6:	b08f      	sub	sp, #60	; 0x3c
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093fe:	f7fb fdb9 	bl	8004f74 <HAL_GetTick>
 8009402:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009408:	2300      	movs	r3, #0
 800940a:	60bb      	str	r3, [r7, #8]
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2108      	movs	r1, #8
 800941a:	4618      	mov	r0, r3
 800941c:	f002 f90e 	bl	800b63c <SDMMC_CmdBlockLength>
 8009420:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	e0a9      	b.n	8009580 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009434:	041b      	lsls	r3, r3, #16
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f002 fa2b 	bl	800b894 <SDMMC_CmdAppCommand>
 800943e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	e09a      	b.n	8009580 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800944a:	f04f 33ff 	mov.w	r3, #4294967295
 800944e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009450:	2308      	movs	r3, #8
 8009452:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009454:	2330      	movs	r3, #48	; 0x30
 8009456:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009458:	2302      	movs	r3, #2
 800945a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800945c:	2300      	movs	r3, #0
 800945e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009460:	2301      	movs	r3, #1
 8009462:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f107 0210 	add.w	r2, r7, #16
 800946c:	4611      	mov	r1, r2
 800946e:	4618      	mov	r0, r3
 8009470:	f002 f8b8 	bl	800b5e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f002 fa73 	bl	800b964 <SDMMC_CmdSendSCR>
 800947e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d022      	beq.n	80094cc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	e07a      	b.n	8009580 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00e      	beq.n	80094b6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6819      	ldr	r1, [r3, #0]
 800949c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	f107 0208 	add.w	r2, r7, #8
 80094a4:	18d4      	adds	r4, r2, r3
 80094a6:	4608      	mov	r0, r1
 80094a8:	f002 f816 	bl	800b4d8 <SDMMC_ReadFIFO>
 80094ac:	4603      	mov	r3, r0
 80094ae:	6023      	str	r3, [r4, #0]
      index++;
 80094b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b2:	3301      	adds	r3, #1
 80094b4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094b6:	f7fb fd5d 	bl	8004f74 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d102      	bne.n	80094cc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ca:	e059      	b.n	8009580 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094d2:	f240 432a 	movw	r3, #1066	; 0x42a
 80094d6:	4013      	ands	r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0d6      	beq.n	800948a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	f003 0308 	and.w	r3, r3, #8
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2208      	movs	r2, #8
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094f2:	2308      	movs	r3, #8
 80094f4:	e044      	b.n	8009580 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2202      	movs	r2, #2
 800950a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800950c:	2302      	movs	r3, #2
 800950e:	e037      	b.n	8009580 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2220      	movs	r2, #32
 8009524:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009526:	2320      	movs	r3, #32
 8009528:	e02a      	b.n	8009580 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009532:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	061a      	lsls	r2, r3, #24
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009540:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	0a1b      	lsrs	r3, r3, #8
 8009546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800954a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	0e1b      	lsrs	r3, r3, #24
 8009550:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	601a      	str	r2, [r3, #0]
    scr++;
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	3304      	adds	r3, #4
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	061a      	lsls	r2, r3, #24
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009568:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	0a1b      	lsrs	r3, r3, #8
 800956e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009572:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	0e1b      	lsrs	r3, r3, #24
 8009578:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	373c      	adds	r7, #60	; 0x3c
 8009584:	46bd      	mov	sp, r7
 8009586:	bd90      	pop	{r4, r7, pc}

08009588 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009594:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d03f      	beq.n	8009622 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80095a2:	2300      	movs	r3, #0
 80095a4:	617b      	str	r3, [r7, #20]
 80095a6:	e033      	b.n	8009610 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 ff93 	bl	800b4d8 <SDMMC_ReadFIFO>
 80095b2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3301      	adds	r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	0a1b      	lsrs	r3, r3, #8
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	3b01      	subs	r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	0c1b      	lsrs	r3, r3, #16
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3301      	adds	r3, #1
 80095ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	0e1b      	lsrs	r3, r3, #24
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3301      	adds	r3, #1
 8009602:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	3b01      	subs	r3, #1
 8009608:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	3301      	adds	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b07      	cmp	r3, #7
 8009614:	d9c8      	bls.n	80095a8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009622:	bf00      	nop
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b086      	sub	sp, #24
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d043      	beq.n	80096cc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009644:	2300      	movs	r3, #0
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e037      	b.n	80096ba <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	3301      	adds	r3, #1
 8009654:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	3b01      	subs	r3, #1
 800965a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	021a      	lsls	r2, r3, #8
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4313      	orrs	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3301      	adds	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3b01      	subs	r3, #1
 8009672:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	041a      	lsls	r2, r3, #16
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	4313      	orrs	r3, r2
 800967e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3301      	adds	r3, #1
 8009684:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	3b01      	subs	r3, #1
 800968a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	061a      	lsls	r2, r3, #24
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4313      	orrs	r3, r2
 8009696:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f107 0208 	add.w	r2, r7, #8
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f001 ff1f 	bl	800b4f2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	3301      	adds	r3, #1
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b07      	cmp	r3, #7
 80096be:	d9c4      	bls.n	800964a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80096cc:	bf00      	nop
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e084      	b.n	80097f0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d106      	bne.n	8009706 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7f9 f8e7 	bl	80028d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2202      	movs	r2, #2
 800970a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800971c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009726:	d902      	bls.n	800972e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	e002      	b.n	8009734 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800972e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009732:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800973c:	d007      	beq.n	800974e <HAL_SPI_Init+0x7a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009746:	d002      	beq.n	800974e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800975e:	d903      	bls.n	8009768 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	631a      	str	r2, [r3, #48]	; 0x30
 8009766:	e002      	b.n	800976e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	431a      	orrs	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800978c:	431a      	orrs	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	ea42 0103 	orr.w	r1, r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	0c1b      	lsrs	r3, r3, #16
 80097ae:	f003 0204 	and.w	r2, r3, #4
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	431a      	orrs	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	ea42 0103 	orr.w	r1, r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	69da      	ldr	r2, [r3, #28]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	4613      	mov	r3, r2
 8009804:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d110      	bne.n	8009834 <HAL_SPI_Receive_IT+0x3c>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800981a:	d10b      	bne.n	8009834 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2204      	movs	r2, #4
 8009820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8009824:	88fb      	ldrh	r3, [r7, #6]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f88c 	bl	8009948 <HAL_SPI_TransmitReceive_IT>
 8009830:	4603      	mov	r3, r0
 8009832:	e081      	b.n	8009938 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800983a:	2b01      	cmp	r3, #1
 800983c:	d101      	bne.n	8009842 <HAL_SPI_Receive_IT+0x4a>
 800983e:	2302      	movs	r3, #2
 8009840:	e07a      	b.n	8009938 <HAL_SPI_Receive_IT+0x140>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b01      	cmp	r3, #1
 8009854:	d002      	beq.n	800985c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8009856:	2302      	movs	r3, #2
 8009858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800985a:	e068      	b.n	800992e <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <HAL_SPI_Receive_IT+0x70>
 8009862:	88fb      	ldrh	r3, [r7, #6]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800986c:	e05f      	b.n	800992e <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2204      	movs	r2, #4
 8009872:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	88fa      	ldrh	r2, [r7, #6]
 8009886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	88fa      	ldrh	r2, [r7, #6]
 800988e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098b2:	d90b      	bls.n	80098cc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80098c2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <HAL_SPI_Receive_IT+0x148>)
 80098c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80098ca:	e00a      	b.n	80098e2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098da:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4a19      	ldr	r2, [pc, #100]	; (8009944 <HAL_SPI_Receive_IT+0x14c>)
 80098e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098ea:	d107      	bne.n	80098fc <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098fa:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800990a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009916:	2b40      	cmp	r3, #64	; 0x40
 8009918:	d008      	beq.n	800992c <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	e000      	b.n	800992e <HAL_SPI_Receive_IT+0x136>
  }

error :
 800992c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009936:	7dfb      	ldrb	r3, [r7, #23]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	08009f61 	.word	0x08009f61
 8009944:	08009f11 	.word	0x08009f11

08009948 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_SPI_TransmitReceive_IT+0x20>
 8009964:	2302      	movs	r3, #2
 8009966:	e091      	b.n	8009a8c <HAL_SPI_TransmitReceive_IT+0x144>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009976:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800997e:	7dbb      	ldrb	r3, [r7, #22]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d00d      	beq.n	80099a0 <HAL_SPI_TransmitReceive_IT+0x58>
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800998a:	d106      	bne.n	800999a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <HAL_SPI_TransmitReceive_IT+0x52>
 8009994:	7dbb      	ldrb	r3, [r7, #22]
 8009996:	2b04      	cmp	r3, #4
 8009998:	d002      	beq.n	80099a0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800999a:	2302      	movs	r3, #2
 800999c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800999e:	e070      	b.n	8009a82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80099ac:	887b      	ldrh	r3, [r7, #2]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d102      	bne.n	80099b8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80099b6:	e064      	b.n	8009a82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b04      	cmp	r3, #4
 80099c2:	d003      	beq.n	80099cc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2205      	movs	r2, #5
 80099c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	887a      	ldrh	r2, [r7, #2]
 80099dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	887a      	ldrh	r2, [r7, #2]
 80099e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	887a      	ldrh	r2, [r7, #2]
 80099ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	887a      	ldrh	r2, [r7, #2]
 80099f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a02:	d906      	bls.n	8009a12 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4a24      	ldr	r2, [pc, #144]	; (8009a98 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009a08:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4a23      	ldr	r2, [pc, #140]	; (8009a9c <HAL_SPI_TransmitReceive_IT+0x154>)
 8009a0e:	651a      	str	r2, [r3, #80]	; 0x50
 8009a10:	e005      	b.n	8009a1e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4a22      	ldr	r2, [pc, #136]	; (8009aa0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8009a16:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a22      	ldr	r2, [pc, #136]	; (8009aa4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009a1c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a26:	d802      	bhi.n	8009a2e <HAL_SPI_TransmitReceive_IT+0xe6>
 8009a28:	887b      	ldrh	r3, [r7, #2]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d908      	bls.n	8009a40 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	e007      	b.n	8009a50 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a4e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009a5e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6a:	2b40      	cmp	r3, #64	; 0x40
 8009a6c:	d008      	beq.n	8009a80 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	e000      	b.n	8009a82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009a80:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	08009e4b 	.word	0x08009e4b
 8009a9c:	08009eb1 	.word	0x08009eb1
 8009aa0:	08009cfb 	.word	0x08009cfb
 8009aa4:	08009db9 	.word	0x08009db9

08009aa8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	099b      	lsrs	r3, r3, #6
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10f      	bne.n	8009aec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	099b      	lsrs	r3, r3, #6
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
    return;
 8009aea:	e0d8      	b.n	8009c9e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	085b      	lsrs	r3, r3, #1
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <HAL_SPI_IRQHandler+0x66>
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	09db      	lsrs	r3, r3, #7
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	4798      	blx	r3
    return;
 8009b0c:	e0c7      	b.n	8009c9e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	095b      	lsrs	r3, r3, #5
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10c      	bne.n	8009b34 <HAL_SPI_IRQHandler+0x8c>
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	099b      	lsrs	r3, r3, #6
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <HAL_SPI_IRQHandler+0x8c>
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	0a1b      	lsrs	r3, r3, #8
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 80b5 	beq.w	8009c9e <HAL_SPI_IRQHandler+0x1f6>
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	095b      	lsrs	r3, r3, #5
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80ae 	beq.w	8009c9e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	099b      	lsrs	r3, r3, #6
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d023      	beq.n	8009b96 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d011      	beq.n	8009b7e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b5e:	f043 0204 	orr.w	r2, r3, #4
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b66:	2300      	movs	r3, #0
 8009b68:	617b      	str	r3, [r7, #20]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	e00b      	b.n	8009b96 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	693b      	ldr	r3, [r7, #16]
        return;
 8009b94:	e083      	b.n	8009c9e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	095b      	lsrs	r3, r3, #5
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d014      	beq.n	8009bcc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ba6:	f043 0201 	orr.w	r2, r3, #1
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	0a1b      	lsrs	r3, r3, #8
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00c      	beq.n	8009bf2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bdc:	f043 0208 	orr.w	r2, r3, #8
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009be4:	2300      	movs	r3, #0
 8009be6:	60bb      	str	r3, [r7, #8]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	60bb      	str	r3, [r7, #8]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d050      	beq.n	8009c9c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c08:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d104      	bne.n	8009c26 <HAL_SPI_IRQHandler+0x17e>
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d034      	beq.n	8009c90 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0203 	bic.w	r2, r2, #3
 8009c34:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d011      	beq.n	8009c62 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c42:	4a18      	ldr	r2, [pc, #96]	; (8009ca4 <HAL_SPI_IRQHandler+0x1fc>)
 8009c44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fb fbb0 	bl	80053b0 <HAL_DMA_Abort_IT>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d005      	beq.n	8009c62 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d016      	beq.n	8009c98 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6e:	4a0d      	ldr	r2, [pc, #52]	; (8009ca4 <HAL_SPI_IRQHandler+0x1fc>)
 8009c70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fb fb9a 	bl	80053b0 <HAL_DMA_Abort_IT>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00a      	beq.n	8009c98 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009c8e:	e003      	b.n	8009c98 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f813 	bl	8009cbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009c96:	e000      	b.n	8009c9a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009c98:	bf00      	nop
    return;
 8009c9a:	bf00      	nop
 8009c9c:	bf00      	nop
  }
}
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	08009cd1 	.word	0x08009cd1

08009ca8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cdc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff ffe5 	bl	8009cbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d923      	bls.n	8009d56 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	b292      	uxth	r2, r2
 8009d1a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	1c9a      	adds	r2, r3, #2
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b02      	subs	r3, #2
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d11f      	bne.n	8009d84 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d52:	605a      	str	r2, [r3, #4]
 8009d54:	e016      	b.n	8009d84 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f103 020c 	add.w	r2, r3, #12
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	7812      	ldrb	r2, [r2, #0]
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10f      	bne.n	8009db0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009d9e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fa73 	bl	800a296 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d912      	bls.n	8009df0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dce:	881a      	ldrh	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dda:	1c9a      	adds	r2, r3, #2
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	3b02      	subs	r3, #2
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dee:	e012      	b.n	8009e16 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	330c      	adds	r3, #12
 8009dfa:	7812      	ldrb	r2, [r2, #0]
 8009dfc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d110      	bne.n	8009e42 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e2e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fa2a 	bl	800a296 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68da      	ldr	r2, [r3, #12]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	b292      	uxth	r2, r2
 8009e5e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	1c9a      	adds	r2, r3, #2
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	3b01      	subs	r3, #1
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10f      	bne.n	8009ea8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e96:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f9f7 	bl	800a296 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebc:	881a      	ldrh	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	1c9a      	adds	r2, r3, #2
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d110      	bne.n	8009f08 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ef4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f9c7 	bl	800a296 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f103 020c 	add.w	r2, r3, #12
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	7812      	ldrb	r2, [r2, #0]
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d102      	bne.n	8009f58 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f9e1 	bl	800a31a <SPI_CloseRx_ISR>
  }
}
 8009f58:	bf00      	nop
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68da      	ldr	r2, [r3, #12]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	b292      	uxth	r2, r2
 8009f74:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	1c9a      	adds	r2, r3, #2
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9bb 	bl	800a31a <SPI_CloseRx_ISR>
  }
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fbc:	e04c      	b.n	800a058 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc4:	d048      	beq.n	800a058 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009fc6:	f7fa ffd5 	bl	8004f74 <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d902      	bls.n	8009fdc <SPI_WaitFlagStateUntilTimeout+0x30>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d13d      	bne.n	800a058 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009fea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ff4:	d111      	bne.n	800a01a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ffe:	d004      	beq.n	800a00a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a008:	d107      	bne.n	800a01a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a018:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a022:	d10f      	bne.n	800a044 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a042:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e00f      	b.n	800a078 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4013      	ands	r3, r2
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	429a      	cmp	r2, r3
 800a066:	bf0c      	ite	eq
 800a068:	2301      	moveq	r3, #1
 800a06a:	2300      	movne	r3, #0
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	461a      	mov	r2, r3
 800a070:	79fb      	ldrb	r3, [r7, #7]
 800a072:	429a      	cmp	r2, r3
 800a074:	d1a3      	bne.n	8009fbe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800a08e:	e057      	b.n	800a140 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a096:	d106      	bne.n	800a0a6 <SPI_WaitFifoStateUntilTimeout+0x26>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d103      	bne.n	800a0a6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	330c      	adds	r3, #12
 800a0a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ac:	d048      	beq.n	800a140 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a0ae:	f7fa ff61 	bl	8004f74 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d902      	bls.n	800a0c4 <SPI_WaitFifoStateUntilTimeout+0x44>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d13d      	bne.n	800a140 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0dc:	d111      	bne.n	800a102 <SPI_WaitFifoStateUntilTimeout+0x82>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0e6:	d004      	beq.n	800a0f2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f0:	d107      	bne.n	800a102 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a100:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a10a:	d10f      	bne.n	800a12c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a12a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e008      	b.n	800a152 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	4013      	ands	r3, r2
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d19f      	bne.n	800a090 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af02      	add	r7, sp, #8
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	60b9      	str	r1, [r7, #8]
 800a164:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a16e:	d111      	bne.n	800a194 <SPI_EndRxTransaction+0x3a>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a178:	d004      	beq.n	800a184 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a182:	d107      	bne.n	800a194 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a192:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2200      	movs	r2, #0
 800a19c:	2180      	movs	r1, #128	; 0x80
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7ff ff04 	bl	8009fac <SPI_WaitFlagStateUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d007      	beq.n	800a1ba <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ae:	f043 0220 	orr.w	r2, r3, #32
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e023      	b.n	800a202 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1c2:	d11d      	bne.n	800a200 <SPI_EndRxTransaction+0xa6>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1cc:	d004      	beq.n	800a1d8 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d6:	d113      	bne.n	800a200 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff ff4b 	bl	800a080 <SPI_WaitFifoStateUntilTimeout>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d007      	beq.n	800a200 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f4:	f043 0220 	orr.w	r2, r3, #32
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e000      	b.n	800a202 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af02      	add	r7, sp, #8
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff ff2c 	bl	800a080 <SPI_WaitFifoStateUntilTimeout>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d007      	beq.n	800a23e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a232:	f043 0220 	orr.w	r2, r3, #32
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e027      	b.n	800a28e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2200      	movs	r2, #0
 800a246:	2180      	movs	r1, #128	; 0x80
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff feaf 	bl	8009fac <SPI_WaitFlagStateUntilTimeout>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d007      	beq.n	800a264 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a258:	f043 0220 	orr.w	r2, r3, #32
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e014      	b.n	800a28e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7ff ff05 	bl	800a080 <SPI_WaitFifoStateUntilTimeout>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d007      	beq.n	800a28c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a280:	f043 0220 	orr.w	r2, r3, #32
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e000      	b.n	800a28e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a29e:	f7fa fe69 	bl	8004f74 <HAL_GetTick>
 800a2a2:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0220 	bic.w	r2, r2, #32
 800a2b2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	2164      	movs	r1, #100	; 0x64
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff ffa6 	bl	800a20a <SPI_EndRxTxTransaction>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c8:	f043 0220 	orr.w	r2, r3, #32
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d115      	bne.n	800a304 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	d107      	bne.n	800a2f4 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7f9 fe05 	bl	8003efc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a2f2:	e00e      	b.n	800a312 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fcd3 	bl	8009ca8 <HAL_SPI_TxRxCpltCallback>
}
 800a302:	e006      	b.n	800a312 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff fcd5 	bl	8009cbc <HAL_SPI_ErrorCallback>
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a330:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a332:	f7fa fe1f 	bl	8004f74 <HAL_GetTick>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	2164      	movs	r1, #100	; 0x64
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff ff0c 	bl	800a15a <SPI_EndRxTransaction>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d005      	beq.n	800a354 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a34c:	f043 0220 	orr.w	r2, r3, #32
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a360:	2b00      	cmp	r3, #0
 800a362:	d103      	bne.n	800a36c <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7f9 fdc9 	bl	8003efc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a36a:	e002      	b.n	800a372 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff fca5 	bl	8009cbc <HAL_SPI_ErrorCallback>
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e01d      	b.n	800a3c8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f815 	bl	800a3d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	f000 f985 	bl	800a6c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68da      	ldr	r2, [r3, #12]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0201 	orr.w	r2, r2, #1
 800a3fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <HAL_TIM_Base_Start_IT+0x50>)
 800a404:	4013      	ands	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b06      	cmp	r3, #6
 800a40c:	d00b      	beq.n	800a426 <HAL_TIM_Base_Start_IT+0x42>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a414:	d007      	beq.n	800a426 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0201 	orr.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	00010007 	.word	0x00010007

0800a438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d122      	bne.n	800a494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d11b      	bne.n	800a494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0202 	mvn.w	r2, #2
 800a464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f003 0303 	and.w	r3, r3, #3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f905 	bl	800a68a <HAL_TIM_IC_CaptureCallback>
 800a480:	e005      	b.n	800a48e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f8f7 	bl	800a676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f908 	bl	800a69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	f003 0304 	and.w	r3, r3, #4
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d122      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d11b      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0204 	mvn.w	r2, #4
 800a4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8db 	bl	800a68a <HAL_TIM_IC_CaptureCallback>
 800a4d4:	e005      	b.n	800a4e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f8cd 	bl	800a676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8de 	bl	800a69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f003 0308 	and.w	r3, r3, #8
 800a4f2:	2b08      	cmp	r3, #8
 800a4f4:	d122      	bne.n	800a53c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b08      	cmp	r3, #8
 800a502:	d11b      	bne.n	800a53c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f06f 0208 	mvn.w	r2, #8
 800a50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2204      	movs	r2, #4
 800a512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f8b1 	bl	800a68a <HAL_TIM_IC_CaptureCallback>
 800a528:	e005      	b.n	800a536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f8a3 	bl	800a676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f8b4 	bl	800a69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	f003 0310 	and.w	r3, r3, #16
 800a546:	2b10      	cmp	r3, #16
 800a548:	d122      	bne.n	800a590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	2b10      	cmp	r3, #16
 800a556:	d11b      	bne.n	800a590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f06f 0210 	mvn.w	r2, #16
 800a560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2208      	movs	r2, #8
 800a566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f887 	bl	800a68a <HAL_TIM_IC_CaptureCallback>
 800a57c:	e005      	b.n	800a58a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f879 	bl	800a676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f88a 	bl	800a69e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d10e      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d107      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f06f 0201 	mvn.w	r2, #1
 800a5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7f7 f9ac 	bl	8001914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c6:	2b80      	cmp	r3, #128	; 0x80
 800a5c8:	d10e      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d107      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f91a 	bl	800a81c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f6:	d10e      	bne.n	800a616 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a602:	2b80      	cmp	r3, #128	; 0x80
 800a604:	d107      	bne.n	800a616 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f90d 	bl	800a830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	d10e      	bne.n	800a642 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62e:	2b40      	cmp	r3, #64	; 0x40
 800a630:	d107      	bne.n	800a642 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f838 	bl	800a6b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	f003 0320 	and.w	r3, r3, #32
 800a64c:	2b20      	cmp	r3, #32
 800a64e:	d10e      	bne.n	800a66e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	d107      	bne.n	800a66e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f06f 0220 	mvn.w	r2, #32
 800a666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f8cd 	bl	800a808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
	...

0800a6c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a40      	ldr	r2, [pc, #256]	; (800a7dc <TIM_Base_SetConfig+0x114>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d013      	beq.n	800a708 <TIM_Base_SetConfig+0x40>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e6:	d00f      	beq.n	800a708 <TIM_Base_SetConfig+0x40>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a3d      	ldr	r2, [pc, #244]	; (800a7e0 <TIM_Base_SetConfig+0x118>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d00b      	beq.n	800a708 <TIM_Base_SetConfig+0x40>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a3c      	ldr	r2, [pc, #240]	; (800a7e4 <TIM_Base_SetConfig+0x11c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d007      	beq.n	800a708 <TIM_Base_SetConfig+0x40>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a3b      	ldr	r2, [pc, #236]	; (800a7e8 <TIM_Base_SetConfig+0x120>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d003      	beq.n	800a708 <TIM_Base_SetConfig+0x40>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a3a      	ldr	r2, [pc, #232]	; (800a7ec <TIM_Base_SetConfig+0x124>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d108      	bne.n	800a71a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	4313      	orrs	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a2f      	ldr	r2, [pc, #188]	; (800a7dc <TIM_Base_SetConfig+0x114>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d02b      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a728:	d027      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a2c      	ldr	r2, [pc, #176]	; (800a7e0 <TIM_Base_SetConfig+0x118>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d023      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a2b      	ldr	r2, [pc, #172]	; (800a7e4 <TIM_Base_SetConfig+0x11c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d01f      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a2a      	ldr	r2, [pc, #168]	; (800a7e8 <TIM_Base_SetConfig+0x120>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d01b      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a29      	ldr	r2, [pc, #164]	; (800a7ec <TIM_Base_SetConfig+0x124>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d017      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a28      	ldr	r2, [pc, #160]	; (800a7f0 <TIM_Base_SetConfig+0x128>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d013      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a27      	ldr	r2, [pc, #156]	; (800a7f4 <TIM_Base_SetConfig+0x12c>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00f      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a26      	ldr	r2, [pc, #152]	; (800a7f8 <TIM_Base_SetConfig+0x130>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d00b      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a25      	ldr	r2, [pc, #148]	; (800a7fc <TIM_Base_SetConfig+0x134>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d007      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a24      	ldr	r2, [pc, #144]	; (800a800 <TIM_Base_SetConfig+0x138>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d003      	beq.n	800a77a <TIM_Base_SetConfig+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a23      	ldr	r2, [pc, #140]	; (800a804 <TIM_Base_SetConfig+0x13c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d108      	bne.n	800a78c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	689a      	ldr	r2, [r3, #8]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <TIM_Base_SetConfig+0x114>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d003      	beq.n	800a7c0 <TIM_Base_SetConfig+0xf8>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a0c      	ldr	r2, [pc, #48]	; (800a7ec <TIM_Base_SetConfig+0x124>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d103      	bne.n	800a7c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	691a      	ldr	r2, [r3, #16]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	615a      	str	r2, [r3, #20]
}
 800a7ce:	bf00      	nop
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	40010000 	.word	0x40010000
 800a7e0:	40000400 	.word	0x40000400
 800a7e4:	40000800 	.word	0x40000800
 800a7e8:	40000c00 	.word	0x40000c00
 800a7ec:	40010400 	.word	0x40010400
 800a7f0:	40014000 	.word	0x40014000
 800a7f4:	40014400 	.word	0x40014400
 800a7f8:	40014800 	.word	0x40014800
 800a7fc:	40001800 	.word	0x40001800
 800a800:	40001c00 	.word	0x40001c00
 800a804:	40002000 	.word	0x40002000

0800a808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e040      	b.n	800a8d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7f8 f920 	bl	8002aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2224      	movs	r2, #36	; 0x24
 800a870:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f960 	bl	800ab48 <UART_SetConfig>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e022      	b.n	800a8d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fbfe 	bl	800b09c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fc85 	bl	800b1e0 <UART_CheckIdleState>
 800a8d6:	4603      	mov	r3, r0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08a      	sub	sp, #40	; 0x28
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	d17f      	bne.n	800a9f8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <HAL_UART_Transmit+0x24>
 800a8fe:	88fb      	ldrh	r3, [r7, #6]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e078      	b.n	800a9fa <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d101      	bne.n	800a916 <HAL_UART_Transmit+0x36>
 800a912:	2302      	movs	r3, #2
 800a914:	e071      	b.n	800a9fa <HAL_UART_Transmit+0x11a>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2221      	movs	r2, #33	; 0x21
 800a928:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a92a:	f7fa fb23 	bl	8004f74 <HAL_GetTick>
 800a92e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	88fa      	ldrh	r2, [r7, #6]
 800a934:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	88fa      	ldrh	r2, [r7, #6]
 800a93c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a948:	d108      	bne.n	800a95c <HAL_UART_Transmit+0x7c>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d104      	bne.n	800a95c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a952:	2300      	movs	r3, #0
 800a954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	61bb      	str	r3, [r7, #24]
 800a95a:	e003      	b.n	800a964 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a960:	2300      	movs	r3, #0
 800a962:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a96c:	e02c      	b.n	800a9c8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2200      	movs	r2, #0
 800a976:	2180      	movs	r1, #128	; 0x80
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 fc60 	bl	800b23e <UART_WaitOnFlagUntilTimeout>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a984:	2303      	movs	r3, #3
 800a986:	e038      	b.n	800a9fa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10b      	bne.n	800a9a6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a99c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	3302      	adds	r3, #2
 800a9a2:	61bb      	str	r3, [r7, #24]
 800a9a4:	e007      	b.n	800a9b6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	781a      	ldrb	r2, [r3, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1cc      	bne.n	800a96e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	2140      	movs	r1, #64	; 0x40
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f000 fc2d 	bl	800b23e <UART_WaitOnFlagUntilTimeout>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e005      	b.n	800a9fa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e000      	b.n	800a9fa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a9f8:	2302      	movs	r3, #2
  }
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3720      	adds	r7, #32
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	f040 808a 	bne.w	800ab30 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <HAL_UART_Receive_IT+0x24>
 800aa22:	88fb      	ldrh	r3, [r7, #6]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e082      	b.n	800ab32 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <HAL_UART_Receive_IT+0x36>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e07b      	b.n	800ab32 <HAL_UART_Receive_IT+0x12e>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	88fa      	ldrh	r2, [r7, #6]
 800aa4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	88fa      	ldrh	r2, [r7, #6]
 800aa54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa66:	d10e      	bne.n	800aa86 <HAL_UART_Receive_IT+0x82>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <HAL_UART_Receive_IT+0x78>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aa76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa7a:	e02d      	b.n	800aad8 <HAL_UART_Receive_IT+0xd4>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	22ff      	movs	r2, #255	; 0xff
 800aa80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa84:	e028      	b.n	800aad8 <HAL_UART_Receive_IT+0xd4>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10d      	bne.n	800aaaa <HAL_UART_Receive_IT+0xa6>
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d104      	bne.n	800aaa0 <HAL_UART_Receive_IT+0x9c>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	22ff      	movs	r2, #255	; 0xff
 800aa9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa9e:	e01b      	b.n	800aad8 <HAL_UART_Receive_IT+0xd4>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	227f      	movs	r2, #127	; 0x7f
 800aaa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaa8:	e016      	b.n	800aad8 <HAL_UART_Receive_IT+0xd4>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aab2:	d10d      	bne.n	800aad0 <HAL_UART_Receive_IT+0xcc>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d104      	bne.n	800aac6 <HAL_UART_Receive_IT+0xc2>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	227f      	movs	r2, #127	; 0x7f
 800aac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aac4:	e008      	b.n	800aad8 <HAL_UART_Receive_IT+0xd4>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	223f      	movs	r2, #63	; 0x3f
 800aaca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aace:	e003      	b.n	800aad8 <HAL_UART_Receive_IT+0xd4>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2222      	movs	r2, #34	; 0x22
 800aae2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689a      	ldr	r2, [r3, #8]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafc:	d107      	bne.n	800ab0e <HAL_UART_Receive_IT+0x10a>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4a0d      	ldr	r2, [pc, #52]	; (800ab40 <HAL_UART_Receive_IT+0x13c>)
 800ab0a:	661a      	str	r2, [r3, #96]	; 0x60
 800ab0c:	e002      	b.n	800ab14 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4a0c      	ldr	r2, [pc, #48]	; (800ab44 <HAL_UART_Receive_IT+0x140>)
 800ab12:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ab2a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	e000      	b.n	800ab32 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800ab30:	2302      	movs	r3, #2
  }
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	0800b3db 	.word	0x0800b3db
 800ab44:	0800b335 	.word	0x0800b335

0800ab48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	689a      	ldr	r2, [r3, #8]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	431a      	orrs	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	4bb1      	ldr	r3, [pc, #708]	; (800ae3c <UART_SetConfig+0x2f4>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	6939      	ldr	r1, [r7, #16]
 800ab80:	430b      	orrs	r3, r1
 800ab82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	430a      	orrs	r2, r1
 800abbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a9f      	ldr	r2, [pc, #636]	; (800ae40 <UART_SetConfig+0x2f8>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d121      	bne.n	800ac0c <UART_SetConfig+0xc4>
 800abc8:	4b9e      	ldr	r3, [pc, #632]	; (800ae44 <UART_SetConfig+0x2fc>)
 800abca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abce:	f003 0303 	and.w	r3, r3, #3
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d816      	bhi.n	800ac04 <UART_SetConfig+0xbc>
 800abd6:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <UART_SetConfig+0x94>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800abed 	.word	0x0800abed
 800abe0:	0800abf9 	.word	0x0800abf9
 800abe4:	0800abf3 	.word	0x0800abf3
 800abe8:	0800abff 	.word	0x0800abff
 800abec:	2301      	movs	r3, #1
 800abee:	77fb      	strb	r3, [r7, #31]
 800abf0:	e151      	b.n	800ae96 <UART_SetConfig+0x34e>
 800abf2:	2302      	movs	r3, #2
 800abf4:	77fb      	strb	r3, [r7, #31]
 800abf6:	e14e      	b.n	800ae96 <UART_SetConfig+0x34e>
 800abf8:	2304      	movs	r3, #4
 800abfa:	77fb      	strb	r3, [r7, #31]
 800abfc:	e14b      	b.n	800ae96 <UART_SetConfig+0x34e>
 800abfe:	2308      	movs	r3, #8
 800ac00:	77fb      	strb	r3, [r7, #31]
 800ac02:	e148      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ac04:	2310      	movs	r3, #16
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	bf00      	nop
 800ac0a:	e144      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a8d      	ldr	r2, [pc, #564]	; (800ae48 <UART_SetConfig+0x300>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d134      	bne.n	800ac80 <UART_SetConfig+0x138>
 800ac16:	4b8b      	ldr	r3, [pc, #556]	; (800ae44 <UART_SetConfig+0x2fc>)
 800ac18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac1c:	f003 030c 	and.w	r3, r3, #12
 800ac20:	2b0c      	cmp	r3, #12
 800ac22:	d829      	bhi.n	800ac78 <UART_SetConfig+0x130>
 800ac24:	a201      	add	r2, pc, #4	; (adr r2, 800ac2c <UART_SetConfig+0xe4>)
 800ac26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2a:	bf00      	nop
 800ac2c:	0800ac61 	.word	0x0800ac61
 800ac30:	0800ac79 	.word	0x0800ac79
 800ac34:	0800ac79 	.word	0x0800ac79
 800ac38:	0800ac79 	.word	0x0800ac79
 800ac3c:	0800ac6d 	.word	0x0800ac6d
 800ac40:	0800ac79 	.word	0x0800ac79
 800ac44:	0800ac79 	.word	0x0800ac79
 800ac48:	0800ac79 	.word	0x0800ac79
 800ac4c:	0800ac67 	.word	0x0800ac67
 800ac50:	0800ac79 	.word	0x0800ac79
 800ac54:	0800ac79 	.word	0x0800ac79
 800ac58:	0800ac79 	.word	0x0800ac79
 800ac5c:	0800ac73 	.word	0x0800ac73
 800ac60:	2300      	movs	r3, #0
 800ac62:	77fb      	strb	r3, [r7, #31]
 800ac64:	e117      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ac66:	2302      	movs	r3, #2
 800ac68:	77fb      	strb	r3, [r7, #31]
 800ac6a:	e114      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ac6c:	2304      	movs	r3, #4
 800ac6e:	77fb      	strb	r3, [r7, #31]
 800ac70:	e111      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ac72:	2308      	movs	r3, #8
 800ac74:	77fb      	strb	r3, [r7, #31]
 800ac76:	e10e      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ac78:	2310      	movs	r3, #16
 800ac7a:	77fb      	strb	r3, [r7, #31]
 800ac7c:	bf00      	nop
 800ac7e:	e10a      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a71      	ldr	r2, [pc, #452]	; (800ae4c <UART_SetConfig+0x304>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d120      	bne.n	800accc <UART_SetConfig+0x184>
 800ac8a:	4b6e      	ldr	r3, [pc, #440]	; (800ae44 <UART_SetConfig+0x2fc>)
 800ac8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ac94:	2b10      	cmp	r3, #16
 800ac96:	d00f      	beq.n	800acb8 <UART_SetConfig+0x170>
 800ac98:	2b10      	cmp	r3, #16
 800ac9a:	d802      	bhi.n	800aca2 <UART_SetConfig+0x15a>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d005      	beq.n	800acac <UART_SetConfig+0x164>
 800aca0:	e010      	b.n	800acc4 <UART_SetConfig+0x17c>
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	d005      	beq.n	800acb2 <UART_SetConfig+0x16a>
 800aca6:	2b30      	cmp	r3, #48	; 0x30
 800aca8:	d009      	beq.n	800acbe <UART_SetConfig+0x176>
 800acaa:	e00b      	b.n	800acc4 <UART_SetConfig+0x17c>
 800acac:	2300      	movs	r3, #0
 800acae:	77fb      	strb	r3, [r7, #31]
 800acb0:	e0f1      	b.n	800ae96 <UART_SetConfig+0x34e>
 800acb2:	2302      	movs	r3, #2
 800acb4:	77fb      	strb	r3, [r7, #31]
 800acb6:	e0ee      	b.n	800ae96 <UART_SetConfig+0x34e>
 800acb8:	2304      	movs	r3, #4
 800acba:	77fb      	strb	r3, [r7, #31]
 800acbc:	e0eb      	b.n	800ae96 <UART_SetConfig+0x34e>
 800acbe:	2308      	movs	r3, #8
 800acc0:	77fb      	strb	r3, [r7, #31]
 800acc2:	e0e8      	b.n	800ae96 <UART_SetConfig+0x34e>
 800acc4:	2310      	movs	r3, #16
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	bf00      	nop
 800acca:	e0e4      	b.n	800ae96 <UART_SetConfig+0x34e>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a5f      	ldr	r2, [pc, #380]	; (800ae50 <UART_SetConfig+0x308>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d120      	bne.n	800ad18 <UART_SetConfig+0x1d0>
 800acd6:	4b5b      	ldr	r3, [pc, #364]	; (800ae44 <UART_SetConfig+0x2fc>)
 800acd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ace0:	2b40      	cmp	r3, #64	; 0x40
 800ace2:	d00f      	beq.n	800ad04 <UART_SetConfig+0x1bc>
 800ace4:	2b40      	cmp	r3, #64	; 0x40
 800ace6:	d802      	bhi.n	800acee <UART_SetConfig+0x1a6>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <UART_SetConfig+0x1b0>
 800acec:	e010      	b.n	800ad10 <UART_SetConfig+0x1c8>
 800acee:	2b80      	cmp	r3, #128	; 0x80
 800acf0:	d005      	beq.n	800acfe <UART_SetConfig+0x1b6>
 800acf2:	2bc0      	cmp	r3, #192	; 0xc0
 800acf4:	d009      	beq.n	800ad0a <UART_SetConfig+0x1c2>
 800acf6:	e00b      	b.n	800ad10 <UART_SetConfig+0x1c8>
 800acf8:	2300      	movs	r3, #0
 800acfa:	77fb      	strb	r3, [r7, #31]
 800acfc:	e0cb      	b.n	800ae96 <UART_SetConfig+0x34e>
 800acfe:	2302      	movs	r3, #2
 800ad00:	77fb      	strb	r3, [r7, #31]
 800ad02:	e0c8      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad04:	2304      	movs	r3, #4
 800ad06:	77fb      	strb	r3, [r7, #31]
 800ad08:	e0c5      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad0a:	2308      	movs	r3, #8
 800ad0c:	77fb      	strb	r3, [r7, #31]
 800ad0e:	e0c2      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad10:	2310      	movs	r3, #16
 800ad12:	77fb      	strb	r3, [r7, #31]
 800ad14:	bf00      	nop
 800ad16:	e0be      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a4d      	ldr	r2, [pc, #308]	; (800ae54 <UART_SetConfig+0x30c>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d124      	bne.n	800ad6c <UART_SetConfig+0x224>
 800ad22:	4b48      	ldr	r3, [pc, #288]	; (800ae44 <UART_SetConfig+0x2fc>)
 800ad24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad30:	d012      	beq.n	800ad58 <UART_SetConfig+0x210>
 800ad32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad36:	d802      	bhi.n	800ad3e <UART_SetConfig+0x1f6>
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d007      	beq.n	800ad4c <UART_SetConfig+0x204>
 800ad3c:	e012      	b.n	800ad64 <UART_SetConfig+0x21c>
 800ad3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad42:	d006      	beq.n	800ad52 <UART_SetConfig+0x20a>
 800ad44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad48:	d009      	beq.n	800ad5e <UART_SetConfig+0x216>
 800ad4a:	e00b      	b.n	800ad64 <UART_SetConfig+0x21c>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	77fb      	strb	r3, [r7, #31]
 800ad50:	e0a1      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad52:	2302      	movs	r3, #2
 800ad54:	77fb      	strb	r3, [r7, #31]
 800ad56:	e09e      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad58:	2304      	movs	r3, #4
 800ad5a:	77fb      	strb	r3, [r7, #31]
 800ad5c:	e09b      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad5e:	2308      	movs	r3, #8
 800ad60:	77fb      	strb	r3, [r7, #31]
 800ad62:	e098      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad64:	2310      	movs	r3, #16
 800ad66:	77fb      	strb	r3, [r7, #31]
 800ad68:	bf00      	nop
 800ad6a:	e094      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a39      	ldr	r2, [pc, #228]	; (800ae58 <UART_SetConfig+0x310>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d124      	bne.n	800adc0 <UART_SetConfig+0x278>
 800ad76:	4b33      	ldr	r3, [pc, #204]	; (800ae44 <UART_SetConfig+0x2fc>)
 800ad78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad84:	d012      	beq.n	800adac <UART_SetConfig+0x264>
 800ad86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad8a:	d802      	bhi.n	800ad92 <UART_SetConfig+0x24a>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d007      	beq.n	800ada0 <UART_SetConfig+0x258>
 800ad90:	e012      	b.n	800adb8 <UART_SetConfig+0x270>
 800ad92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad96:	d006      	beq.n	800ada6 <UART_SetConfig+0x25e>
 800ad98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad9c:	d009      	beq.n	800adb2 <UART_SetConfig+0x26a>
 800ad9e:	e00b      	b.n	800adb8 <UART_SetConfig+0x270>
 800ada0:	2301      	movs	r3, #1
 800ada2:	77fb      	strb	r3, [r7, #31]
 800ada4:	e077      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ada6:	2302      	movs	r3, #2
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e074      	b.n	800ae96 <UART_SetConfig+0x34e>
 800adac:	2304      	movs	r3, #4
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e071      	b.n	800ae96 <UART_SetConfig+0x34e>
 800adb2:	2308      	movs	r3, #8
 800adb4:	77fb      	strb	r3, [r7, #31]
 800adb6:	e06e      	b.n	800ae96 <UART_SetConfig+0x34e>
 800adb8:	2310      	movs	r3, #16
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	bf00      	nop
 800adbe:	e06a      	b.n	800ae96 <UART_SetConfig+0x34e>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a25      	ldr	r2, [pc, #148]	; (800ae5c <UART_SetConfig+0x314>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d124      	bne.n	800ae14 <UART_SetConfig+0x2cc>
 800adca:	4b1e      	ldr	r3, [pc, #120]	; (800ae44 <UART_SetConfig+0x2fc>)
 800adcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800add4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800add8:	d012      	beq.n	800ae00 <UART_SetConfig+0x2b8>
 800adda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adde:	d802      	bhi.n	800ade6 <UART_SetConfig+0x29e>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d007      	beq.n	800adf4 <UART_SetConfig+0x2ac>
 800ade4:	e012      	b.n	800ae0c <UART_SetConfig+0x2c4>
 800ade6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adea:	d006      	beq.n	800adfa <UART_SetConfig+0x2b2>
 800adec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adf0:	d009      	beq.n	800ae06 <UART_SetConfig+0x2be>
 800adf2:	e00b      	b.n	800ae0c <UART_SetConfig+0x2c4>
 800adf4:	2300      	movs	r3, #0
 800adf6:	77fb      	strb	r3, [r7, #31]
 800adf8:	e04d      	b.n	800ae96 <UART_SetConfig+0x34e>
 800adfa:	2302      	movs	r3, #2
 800adfc:	77fb      	strb	r3, [r7, #31]
 800adfe:	e04a      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae00:	2304      	movs	r3, #4
 800ae02:	77fb      	strb	r3, [r7, #31]
 800ae04:	e047      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae06:	2308      	movs	r3, #8
 800ae08:	77fb      	strb	r3, [r7, #31]
 800ae0a:	e044      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae0c:	2310      	movs	r3, #16
 800ae0e:	77fb      	strb	r3, [r7, #31]
 800ae10:	bf00      	nop
 800ae12:	e040      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a11      	ldr	r2, [pc, #68]	; (800ae60 <UART_SetConfig+0x318>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d139      	bne.n	800ae92 <UART_SetConfig+0x34a>
 800ae1e:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <UART_SetConfig+0x2fc>)
 800ae20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae2c:	d027      	beq.n	800ae7e <UART_SetConfig+0x336>
 800ae2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae32:	d817      	bhi.n	800ae64 <UART_SetConfig+0x31c>
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01c      	beq.n	800ae72 <UART_SetConfig+0x32a>
 800ae38:	e027      	b.n	800ae8a <UART_SetConfig+0x342>
 800ae3a:	bf00      	nop
 800ae3c:	efff69f3 	.word	0xefff69f3
 800ae40:	40011000 	.word	0x40011000
 800ae44:	40023800 	.word	0x40023800
 800ae48:	40004400 	.word	0x40004400
 800ae4c:	40004800 	.word	0x40004800
 800ae50:	40004c00 	.word	0x40004c00
 800ae54:	40005000 	.word	0x40005000
 800ae58:	40011400 	.word	0x40011400
 800ae5c:	40007800 	.word	0x40007800
 800ae60:	40007c00 	.word	0x40007c00
 800ae64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae68:	d006      	beq.n	800ae78 <UART_SetConfig+0x330>
 800ae6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae6e:	d009      	beq.n	800ae84 <UART_SetConfig+0x33c>
 800ae70:	e00b      	b.n	800ae8a <UART_SetConfig+0x342>
 800ae72:	2300      	movs	r3, #0
 800ae74:	77fb      	strb	r3, [r7, #31]
 800ae76:	e00e      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae78:	2302      	movs	r3, #2
 800ae7a:	77fb      	strb	r3, [r7, #31]
 800ae7c:	e00b      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae7e:	2304      	movs	r3, #4
 800ae80:	77fb      	strb	r3, [r7, #31]
 800ae82:	e008      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae84:	2308      	movs	r3, #8
 800ae86:	77fb      	strb	r3, [r7, #31]
 800ae88:	e005      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae8a:	2310      	movs	r3, #16
 800ae8c:	77fb      	strb	r3, [r7, #31]
 800ae8e:	bf00      	nop
 800ae90:	e001      	b.n	800ae96 <UART_SetConfig+0x34e>
 800ae92:	2310      	movs	r3, #16
 800ae94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae9e:	d17f      	bne.n	800afa0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aea0:	7ffb      	ldrb	r3, [r7, #31]
 800aea2:	2b08      	cmp	r3, #8
 800aea4:	d85c      	bhi.n	800af60 <UART_SetConfig+0x418>
 800aea6:	a201      	add	r2, pc, #4	; (adr r2, 800aeac <UART_SetConfig+0x364>)
 800aea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeac:	0800aed1 	.word	0x0800aed1
 800aeb0:	0800aef1 	.word	0x0800aef1
 800aeb4:	0800af11 	.word	0x0800af11
 800aeb8:	0800af61 	.word	0x0800af61
 800aebc:	0800af29 	.word	0x0800af29
 800aec0:	0800af61 	.word	0x0800af61
 800aec4:	0800af61 	.word	0x0800af61
 800aec8:	0800af61 	.word	0x0800af61
 800aecc:	0800af49 	.word	0x0800af49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aed0:	f7fc fcfa 	bl	80078c8 <HAL_RCC_GetPCLK1Freq>
 800aed4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	005a      	lsls	r2, r3, #1
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	085b      	lsrs	r3, r3, #1
 800aee0:	441a      	add	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	61bb      	str	r3, [r7, #24]
        break;
 800aeee:	e03a      	b.n	800af66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aef0:	f7fc fcfe 	bl	80078f0 <HAL_RCC_GetPCLK2Freq>
 800aef4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	005a      	lsls	r2, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	085b      	lsrs	r3, r3, #1
 800af00:	441a      	add	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	61bb      	str	r3, [r7, #24]
        break;
 800af0e:	e02a      	b.n	800af66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	085a      	lsrs	r2, r3, #1
 800af16:	4b5f      	ldr	r3, [pc, #380]	; (800b094 <UART_SetConfig+0x54c>)
 800af18:	4413      	add	r3, r2
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	6852      	ldr	r2, [r2, #4]
 800af1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800af22:	b29b      	uxth	r3, r3
 800af24:	61bb      	str	r3, [r7, #24]
        break;
 800af26:	e01e      	b.n	800af66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af28:	f7fc fbea 	bl	8007700 <HAL_RCC_GetSysClockFreq>
 800af2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	005a      	lsls	r2, r3, #1
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	085b      	lsrs	r3, r3, #1
 800af38:	441a      	add	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af42:	b29b      	uxth	r3, r3
 800af44:	61bb      	str	r3, [r7, #24]
        break;
 800af46:	e00e      	b.n	800af66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	085b      	lsrs	r3, r3, #1
 800af4e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	fbb2 f3f3 	udiv	r3, r2, r3
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	61bb      	str	r3, [r7, #24]
        break;
 800af5e:	e002      	b.n	800af66 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	75fb      	strb	r3, [r7, #23]
        break;
 800af64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b0f      	cmp	r3, #15
 800af6a:	d916      	bls.n	800af9a <UART_SetConfig+0x452>
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af72:	d212      	bcs.n	800af9a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	b29b      	uxth	r3, r3
 800af78:	f023 030f 	bic.w	r3, r3, #15
 800af7c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	085b      	lsrs	r3, r3, #1
 800af82:	b29b      	uxth	r3, r3
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	b29a      	uxth	r2, r3
 800af8a:	897b      	ldrh	r3, [r7, #10]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	897a      	ldrh	r2, [r7, #10]
 800af96:	60da      	str	r2, [r3, #12]
 800af98:	e070      	b.n	800b07c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	75fb      	strb	r3, [r7, #23]
 800af9e:	e06d      	b.n	800b07c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800afa0:	7ffb      	ldrb	r3, [r7, #31]
 800afa2:	2b08      	cmp	r3, #8
 800afa4:	d859      	bhi.n	800b05a <UART_SetConfig+0x512>
 800afa6:	a201      	add	r2, pc, #4	; (adr r2, 800afac <UART_SetConfig+0x464>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800afd1 	.word	0x0800afd1
 800afb0:	0800afef 	.word	0x0800afef
 800afb4:	0800b00d 	.word	0x0800b00d
 800afb8:	0800b05b 	.word	0x0800b05b
 800afbc:	0800b025 	.word	0x0800b025
 800afc0:	0800b05b 	.word	0x0800b05b
 800afc4:	0800b05b 	.word	0x0800b05b
 800afc8:	0800b05b 	.word	0x0800b05b
 800afcc:	0800b043 	.word	0x0800b043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afd0:	f7fc fc7a 	bl	80078c8 <HAL_RCC_GetPCLK1Freq>
 800afd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	085a      	lsrs	r2, r3, #1
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	441a      	add	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe8:	b29b      	uxth	r3, r3
 800afea:	61bb      	str	r3, [r7, #24]
        break;
 800afec:	e038      	b.n	800b060 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afee:	f7fc fc7f 	bl	80078f0 <HAL_RCC_GetPCLK2Freq>
 800aff2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	085a      	lsrs	r2, r3, #1
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	441a      	add	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	fbb2 f3f3 	udiv	r3, r2, r3
 800b006:	b29b      	uxth	r3, r3
 800b008:	61bb      	str	r3, [r7, #24]
        break;
 800b00a:	e029      	b.n	800b060 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	085a      	lsrs	r2, r3, #1
 800b012:	4b21      	ldr	r3, [pc, #132]	; (800b098 <UART_SetConfig+0x550>)
 800b014:	4413      	add	r3, r2
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6852      	ldr	r2, [r2, #4]
 800b01a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	61bb      	str	r3, [r7, #24]
        break;
 800b022:	e01d      	b.n	800b060 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b024:	f7fc fb6c 	bl	8007700 <HAL_RCC_GetSysClockFreq>
 800b028:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	085a      	lsrs	r2, r3, #1
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	441a      	add	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	fbb2 f3f3 	udiv	r3, r2, r3
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	61bb      	str	r3, [r7, #24]
        break;
 800b040:	e00e      	b.n	800b060 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	085b      	lsrs	r3, r3, #1
 800b048:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	fbb2 f3f3 	udiv	r3, r2, r3
 800b054:	b29b      	uxth	r3, r3
 800b056:	61bb      	str	r3, [r7, #24]
        break;
 800b058:	e002      	b.n	800b060 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	75fb      	strb	r3, [r7, #23]
        break;
 800b05e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	2b0f      	cmp	r3, #15
 800b064:	d908      	bls.n	800b078 <UART_SetConfig+0x530>
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b06c:	d204      	bcs.n	800b078 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	60da      	str	r2, [r3, #12]
 800b076:	e001      	b.n	800b07c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b088:	7dfb      	ldrb	r3, [r7, #23]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	01e84800 	.word	0x01e84800
 800b098:	00f42400 	.word	0x00f42400

0800b09c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	f003 0301 	and.w	r3, r3, #1
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	f003 0304 	and.w	r3, r3, #4
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00a      	beq.n	800b10a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	f003 0308 	and.w	r3, r3, #8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00a      	beq.n	800b12c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	f003 0310 	and.w	r3, r3, #16
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00a      	beq.n	800b14e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	430a      	orrs	r2, r1
 800b14c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	f003 0320 	and.w	r3, r3, #32
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01a      	beq.n	800b1b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	430a      	orrs	r2, r1
 800b190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b19a:	d10a      	bne.n	800b1b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	605a      	str	r2, [r3, #4]
  }
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af02      	add	r7, sp, #8
 800b1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b1ee:	f7f9 fec1 	bl	8004f74 <HAL_GetTick>
 800b1f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0308 	and.w	r3, r3, #8
 800b1fe:	2b08      	cmp	r3, #8
 800b200:	d10e      	bne.n	800b220 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b202:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f814 	bl	800b23e <UART_WaitOnFlagUntilTimeout>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e00a      	b.n	800b236 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2220      	movs	r2, #32
 800b224:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2220      	movs	r2, #32
 800b22a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	603b      	str	r3, [r7, #0]
 800b24a:	4613      	mov	r3, r2
 800b24c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b24e:	e05d      	b.n	800b30c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b256:	d059      	beq.n	800b30c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b258:	f7f9 fe8c 	bl	8004f74 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	d302      	bcc.n	800b26e <UART_WaitOnFlagUntilTimeout+0x30>
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d11b      	bne.n	800b2a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b27c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689a      	ldr	r2, [r3, #8]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0201 	bic.w	r2, r2, #1
 800b28c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2220      	movs	r2, #32
 800b292:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2220      	movs	r2, #32
 800b298:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e042      	b.n	800b32c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d02b      	beq.n	800b30c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2c2:	d123      	bne.n	800b30c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2cc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	689a      	ldr	r2, [r3, #8]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f022 0201 	bic.w	r2, r2, #1
 800b2ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2220      	movs	r2, #32
 800b2f2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2220      	movs	r2, #32
 800b2f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e00f      	b.n	800b32c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	69da      	ldr	r2, [r3, #28]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	4013      	ands	r3, r2
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	429a      	cmp	r2, r3
 800b31a:	bf0c      	ite	eq
 800b31c:	2301      	moveq	r3, #1
 800b31e:	2300      	movne	r3, #0
 800b320:	b2db      	uxtb	r3, r3
 800b322:	461a      	mov	r2, r3
 800b324:	79fb      	ldrb	r3, [r7, #7]
 800b326:	429a      	cmp	r2, r3
 800b328:	d092      	beq.n	800b250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b342:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b348:	2b22      	cmp	r3, #34	; 0x22
 800b34a:	d13a      	bne.n	800b3c2 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b352:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b354:	89bb      	ldrh	r3, [r7, #12]
 800b356:	b2d9      	uxtb	r1, r3
 800b358:	89fb      	ldrh	r3, [r7, #14]
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b360:	400a      	ands	r2, r1
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b376:	b29b      	uxth	r3, r3
 800b378:	3b01      	subs	r3, #1
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b388:	b29b      	uxth	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d121      	bne.n	800b3d2 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b39c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0201 	bic.w	r2, r2, #1
 800b3ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7f8 faa2 	bl	8003904 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3c0:	e007      	b.n	800b3d2 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	699a      	ldr	r2, [r3, #24]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 0208 	orr.w	r2, r2, #8
 800b3d0:	619a      	str	r2, [r3, #24]
}
 800b3d2:	bf00      	nop
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3e8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ee:	2b22      	cmp	r3, #34	; 0x22
 800b3f0:	d13a      	bne.n	800b468 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fe:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b400:	89ba      	ldrh	r2, [r7, #12]
 800b402:	89fb      	ldrh	r3, [r7, #14]
 800b404:	4013      	ands	r3, r2
 800b406:	b29a      	uxth	r2, r3
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b410:	1c9a      	adds	r2, r3, #2
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	3b01      	subs	r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b42e:	b29b      	uxth	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	d121      	bne.n	800b478 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b442:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689a      	ldr	r2, [r3, #8]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 0201 	bic.w	r2, r2, #1
 800b452:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2220      	movs	r2, #32
 800b458:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7f8 fa4f 	bl	8003904 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b466:	e007      	b.n	800b478 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	699a      	ldr	r2, [r3, #24]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f042 0208 	orr.w	r2, r2, #8
 800b476:	619a      	str	r2, [r3, #24]
}
 800b478:	bf00      	nop
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b480:	b084      	sub	sp, #16
 800b482:	b480      	push	{r7}
 800b484:	b085      	sub	sp, #20
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	f107 001c 	add.w	r0, r7, #28
 800b48e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b496:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b498:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b49a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b49e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b4a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b4a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b4aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	4b07      	ldr	r3, [pc, #28]	; (800b4d4 <SDMMC_Init+0x54>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	431a      	orrs	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	b004      	add	sp, #16
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	ffff8100 	.word	0xffff8100

0800b4d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2203      	movs	r2, #3
 800b520:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b522:	2002      	movs	r0, #2
 800b524:	f7f9 fd32 	bl	8004f8c <HAL_Delay>
  
  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0303 	and.w	r3, r3, #3
}
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
	...

0800b550 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b56e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b574:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b57a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <SDMMC_SendCommand+0x50>)
 800b588:	4013      	ands	r3, r2
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	431a      	orrs	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	fffff000 	.word	0xfffff000

0800b5a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	b2db      	uxtb	r3, r3
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3314      	adds	r3, #20
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
}  
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b60a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b610:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b616:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b622:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	431a      	orrs	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0

}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b64a:	2310      	movs	r3, #16
 800b64c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b64e:	2340      	movs	r3, #64	; 0x40
 800b650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b652:	2300      	movs	r3, #0
 800b654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b65a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b65c:	f107 0308 	add.w	r3, r7, #8
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff ff74 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b668:	f241 3288 	movw	r2, #5000	; 0x1388
 800b66c:	2110      	movs	r1, #16
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fa42 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b676:	69fb      	ldr	r3, [r7, #28]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3720      	adds	r7, #32
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b68e:	2311      	movs	r3, #17
 800b690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b692:	2340      	movs	r3, #64	; 0x40
 800b694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b696:	2300      	movs	r3, #0
 800b698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b69a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b69e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a0:	f107 0308 	add.w	r3, r7, #8
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff ff52 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b0:	2111      	movs	r1, #17
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fa20 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b6b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b6d2:	2312      	movs	r3, #18
 800b6d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6d6:	2340      	movs	r3, #64	; 0x40
 800b6d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6e4:	f107 0308 	add.w	r3, r7, #8
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff ff30 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b6f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f4:	2112      	movs	r1, #18
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f9fe 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b6fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6fe:	69fb      	ldr	r3, [r7, #28]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3720      	adds	r7, #32
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b716:	2318      	movs	r3, #24
 800b718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b71a:	2340      	movs	r3, #64	; 0x40
 800b71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b71e:	2300      	movs	r3, #0
 800b720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b728:	f107 0308 	add.w	r3, r7, #8
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff ff0e 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b734:	f241 3288 	movw	r2, #5000	; 0x1388
 800b738:	2118      	movs	r1, #24
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f9dc 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b742:	69fb      	ldr	r3, [r7, #28]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3720      	adds	r7, #32
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b75a:	2319      	movs	r3, #25
 800b75c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b76a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b76c:	f107 0308 	add.w	r3, r7, #8
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff feec 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b778:	f241 3288 	movw	r2, #5000	; 0x1388
 800b77c:	2119      	movs	r1, #25
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f9ba 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b786:	69fb      	ldr	r3, [r7, #28]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3720      	adds	r7, #32
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b798:	2300      	movs	r3, #0
 800b79a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b79c:	230c      	movs	r3, #12
 800b79e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7a0:	2340      	movs	r3, #64	; 0x40
 800b7a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ae:	f107 0308 	add.w	r3, r7, #8
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff fecb 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b7ba:	4a05      	ldr	r2, [pc, #20]	; (800b7d0 <SDMMC_CmdStopTransfer+0x40>)
 800b7bc:	210c      	movs	r1, #12
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f99a 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b7c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3720      	adds	r7, #32
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	05f5e100 	.word	0x05f5e100

0800b7d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08a      	sub	sp, #40	; 0x28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b7e4:	2307      	movs	r3, #7
 800b7e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7e8:	2340      	movs	r3, #64	; 0x40
 800b7ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f6:	f107 0310 	add.w	r3, r7, #16
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f7ff fea7 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b802:	f241 3288 	movw	r2, #5000	; 0x1388
 800b806:	2107      	movs	r1, #7
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f975 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b80e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b812:	4618      	mov	r0, r3
 800b814:	3728      	adds	r7, #40	; 0x28
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b088      	sub	sp, #32
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b826:	2300      	movs	r3, #0
 800b828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b82a:	2300      	movs	r3, #0
 800b82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b838:	f107 0308 	add.w	r3, r7, #8
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff fe86 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f92f 	bl	800baa8 <SDMMC_GetCmdError>
 800b84a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b84c:	69fb      	ldr	r3, [r7, #28]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b088      	sub	sp, #32
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b85e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b864:	2308      	movs	r3, #8
 800b866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b868:	2340      	movs	r3, #64	; 0x40
 800b86a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b86c:	2300      	movs	r3, #0
 800b86e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b876:	f107 0308 	add.w	r3, r7, #8
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff fe67 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fb18 	bl	800beb8 <SDMMC_GetCmdResp7>
 800b888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b88a:	69fb      	ldr	r3, [r7, #28]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b088      	sub	sp, #32
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b8a2:	2337      	movs	r3, #55	; 0x37
 800b8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8a6:	2340      	movs	r3, #64	; 0x40
 800b8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8b4:	f107 0308 	add.w	r3, r7, #8
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff fe48 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c4:	2137      	movs	r1, #55	; 0x37
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f916 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b8cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ce:	69fb      	ldr	r3, [r7, #28]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3720      	adds	r7, #32
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <SDMMC_CmdAppOperCommand+0x44>)
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b8ea:	2329      	movs	r3, #41	; 0x29
 800b8ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8fc:	f107 0308 	add.w	r3, r7, #8
 800b900:	4619      	mov	r1, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff fe24 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fa27 	bl	800bd5c <SDMMC_GetCmdResp3>
 800b90e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b910:	69fb      	ldr	r3, [r7, #28]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	80100000 	.word	0x80100000

0800b920 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b92e:	2306      	movs	r3, #6
 800b930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b932:	2340      	movs	r3, #64	; 0x40
 800b934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b936:	2300      	movs	r3, #0
 800b938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b93e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b940:	f107 0308 	add.w	r3, r7, #8
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff fe02 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b950:	2106      	movs	r1, #6
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f8d0 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b95a:	69fb      	ldr	r3, [r7, #28]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3720      	adds	r7, #32
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b970:	2333      	movs	r3, #51	; 0x33
 800b972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b974:	2340      	movs	r3, #64	; 0x40
 800b976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b978:	2300      	movs	r3, #0
 800b97a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b97c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b980:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b982:	f107 0308 	add.w	r3, r7, #8
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7ff fde1 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b98e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b992:	2133      	movs	r1, #51	; 0x33
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f8af 	bl	800baf8 <SDMMC_GetCmdResp1>
 800b99a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b99c:	69fb      	ldr	r3, [r7, #28]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3720      	adds	r7, #32
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b088      	sub	sp, #32
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b9b6:	23c0      	movs	r3, #192	; 0xc0
 800b9b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9c4:	f107 0308 	add.w	r3, r7, #8
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7ff fdc0 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f97d 	bl	800bcd0 <SDMMC_GetCmdResp2>
 800b9d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3720      	adds	r7, #32
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b088      	sub	sp, #32
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b9f0:	2309      	movs	r3, #9
 800b9f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b9f4:	23c0      	movs	r3, #192	; 0xc0
 800b9f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba02:	f107 0308 	add.w	r3, r7, #8
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff fda1 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f95e 	bl	800bcd0 <SDMMC_GetCmdResp2>
 800ba14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba16:	69fb      	ldr	r3, [r7, #28]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3720      	adds	r7, #32
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b088      	sub	sp, #32
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba32:	2340      	movs	r3, #64	; 0x40
 800ba34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba36:	2300      	movs	r3, #0
 800ba38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba40:	f107 0308 	add.w	r3, r7, #8
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff fd82 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	2103      	movs	r1, #3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f9bd 	bl	800bdd0 <SDMMC_GetCmdResp6>
 800ba56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba58:	69fb      	ldr	r3, [r7, #28]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3720      	adds	r7, #32
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b088      	sub	sp, #32
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba70:	230d      	movs	r3, #13
 800ba72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba74:	2340      	movs	r3, #64	; 0x40
 800ba76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba82:	f107 0308 	add.w	r3, r7, #8
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff fd61 	bl	800b550 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba92:	210d      	movs	r1, #13
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f82f 	bl	800baf8 <SDMMC_GetCmdResp1>
 800ba9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3720      	adds	r7, #32
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800baa8:	b490      	push	{r4, r7}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab0:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <SDMMC_GetCmdError+0x48>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a0f      	ldr	r2, [pc, #60]	; (800baf4 <SDMMC_GetCmdError+0x4c>)
 800bab6:	fba2 2303 	umull	r2, r3, r2, r3
 800baba:	0a5b      	lsrs	r3, r3, #9
 800babc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bac4:	4623      	mov	r3, r4
 800bac6:	1e5c      	subs	r4, r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bacc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bad0:	e009      	b.n	800bae6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bada:	2b00      	cmp	r3, #0
 800badc:	d0f2      	beq.n	800bac4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	22c5      	movs	r2, #197	; 0xc5
 800bae2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bc90      	pop	{r4, r7}
 800baee:	4770      	bx	lr
 800baf0:	20000000 	.word	0x20000000
 800baf4:	10624dd3 	.word	0x10624dd3

0800baf8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800baf8:	b590      	push	{r4, r7, lr}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	460b      	mov	r3, r1
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bb06:	4b6f      	ldr	r3, [pc, #444]	; (800bcc4 <SDMMC_GetCmdResp1+0x1cc>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a6f      	ldr	r2, [pc, #444]	; (800bcc8 <SDMMC_GetCmdResp1+0x1d0>)
 800bb0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb10:	0a5b      	lsrs	r3, r3, #9
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb18:	4623      	mov	r3, r4
 800bb1a:	1e5c      	subs	r4, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb24:	e0c9      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0f0      	beq.n	800bb18 <SDMMC_GetCmdResp1+0x20>
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1eb      	bne.n	800bb18 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb44:	f003 0304 	and.w	r3, r3, #4
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d004      	beq.n	800bb56 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2204      	movs	r2, #4
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb52:	2304      	movs	r3, #4
 800bb54:	e0b1      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d004      	beq.n	800bb6c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e0a6      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	22c5      	movs	r2, #197	; 0xc5
 800bb70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f7ff fd16 	bl	800b5a4 <SDMMC_GetCommandResponse>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	7afb      	ldrb	r3, [r7, #11]
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d001      	beq.n	800bb86 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e099      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb86:	2100      	movs	r1, #0
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff fd18 	bl	800b5be <SDMMC_GetResponse>
 800bb8e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4b4e      	ldr	r3, [pc, #312]	; (800bccc <SDMMC_GetCmdResp1+0x1d4>)
 800bb94:	4013      	ands	r3, r2
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e08d      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	da02      	bge.n	800bbaa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bba8:	e087      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bbb4:	2340      	movs	r3, #64	; 0x40
 800bbb6:	e080      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bbc2:	2380      	movs	r3, #128	; 0x80
 800bbc4:	e079      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bbd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd4:	e071      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bbe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbe4:	e069      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bbf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbf4:	e061      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc04:	e059      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc14:	e051      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc24:	e049      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bc30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc34:	e041      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bc40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc44:	e039      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc54:	e031      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc64:	e029      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc74:	e021      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d002      	beq.n	800bc86 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc84:	e019      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc94:	e011      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bca0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bca4:	e009      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	f003 0308 	and.w	r3, r3, #8
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bcb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bcb4:	e001      	b.n	800bcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd90      	pop	{r4, r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20000000 	.word	0x20000000
 800bcc8:	10624dd3 	.word	0x10624dd3
 800bccc:	fdffe008 	.word	0xfdffe008

0800bcd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bcd0:	b490      	push	{r4, r7}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcd8:	4b1e      	ldr	r3, [pc, #120]	; (800bd54 <SDMMC_GetCmdResp2+0x84>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a1e      	ldr	r2, [pc, #120]	; (800bd58 <SDMMC_GetCmdResp2+0x88>)
 800bcde:	fba2 2303 	umull	r2, r3, r2, r3
 800bce2:	0a5b      	lsrs	r3, r3, #9
 800bce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bcec:	4623      	mov	r3, r4
 800bcee:	1e5c      	subs	r4, r3, #1
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d102      	bne.n	800bcfa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcf8:	e026      	b.n	800bd48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d0f0      	beq.n	800bcec <SDMMC_GetCmdResp2+0x1c>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1eb      	bne.n	800bcec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2204      	movs	r2, #4
 800bd24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd26:	2304      	movs	r3, #4
 800bd28:	e00e      	b.n	800bd48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e003      	b.n	800bd48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	22c5      	movs	r2, #197	; 0xc5
 800bd44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bc90      	pop	{r4, r7}
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	20000000 	.word	0x20000000
 800bd58:	10624dd3 	.word	0x10624dd3

0800bd5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bd5c:	b490      	push	{r4, r7}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd64:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <SDMMC_GetCmdResp3+0x6c>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a18      	ldr	r2, [pc, #96]	; (800bdcc <SDMMC_GetCmdResp3+0x70>)
 800bd6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd6e:	0a5b      	lsrs	r3, r3, #9
 800bd70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd78:	4623      	mov	r3, r4
 800bd7a:	1e5c      	subs	r4, r3, #1
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd84:	e01b      	b.n	800bdbe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0f0      	beq.n	800bd78 <SDMMC_GetCmdResp3+0x1c>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1eb      	bne.n	800bd78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda4:	f003 0304 	and.w	r3, r3, #4
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2204      	movs	r2, #4
 800bdb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdb2:	2304      	movs	r3, #4
 800bdb4:	e003      	b.n	800bdbe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	22c5      	movs	r2, #197	; 0xc5
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bc90      	pop	{r4, r7}
 800bdc6:	4770      	bx	lr
 800bdc8:	20000000 	.word	0x20000000
 800bdcc:	10624dd3 	.word	0x10624dd3

0800bdd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bdd0:	b590      	push	{r4, r7, lr}
 800bdd2:	b087      	sub	sp, #28
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdde:	4b34      	ldr	r3, [pc, #208]	; (800beb0 <SDMMC_GetCmdResp6+0xe0>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a34      	ldr	r2, [pc, #208]	; (800beb4 <SDMMC_GetCmdResp6+0xe4>)
 800bde4:	fba2 2303 	umull	r2, r3, r2, r3
 800bde8:	0a5b      	lsrs	r3, r3, #9
 800bdea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bdf2:	4623      	mov	r3, r4
 800bdf4:	1e5c      	subs	r4, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d102      	bne.n	800be00 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdfe:	e052      	b.n	800bea6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be04:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d0f0      	beq.n	800bdf2 <SDMMC_GetCmdResp6+0x22>
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1eb      	bne.n	800bdf2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1e:	f003 0304 	and.w	r3, r3, #4
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2204      	movs	r2, #4
 800be2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be2c:	2304      	movs	r3, #4
 800be2e:	e03a      	b.n	800bea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2201      	movs	r2, #1
 800be40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be42:	2301      	movs	r3, #1
 800be44:	e02f      	b.n	800bea6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f7ff fbac 	bl	800b5a4 <SDMMC_GetCommandResponse>
 800be4c:	4603      	mov	r3, r0
 800be4e:	461a      	mov	r2, r3
 800be50:	7afb      	ldrb	r3, [r7, #11]
 800be52:	4293      	cmp	r3, r2
 800be54:	d001      	beq.n	800be5a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be56:	2301      	movs	r3, #1
 800be58:	e025      	b.n	800bea6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	22c5      	movs	r2, #197	; 0xc5
 800be5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be60:	2100      	movs	r1, #0
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f7ff fbab 	bl	800b5be <SDMMC_GetResponse>
 800be68:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d106      	bne.n	800be82 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	0c1b      	lsrs	r3, r3, #16
 800be78:	b29a      	uxth	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800be7e:	2300      	movs	r3, #0
 800be80:	e011      	b.n	800bea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be90:	e009      	b.n	800bea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bea0:	e001      	b.n	800bea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd90      	pop	{r4, r7, pc}
 800beae:	bf00      	nop
 800beb0:	20000000 	.word	0x20000000
 800beb4:	10624dd3 	.word	0x10624dd3

0800beb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800beb8:	b490      	push	{r4, r7}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bec0:	4b21      	ldr	r3, [pc, #132]	; (800bf48 <SDMMC_GetCmdResp7+0x90>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a21      	ldr	r2, [pc, #132]	; (800bf4c <SDMMC_GetCmdResp7+0x94>)
 800bec6:	fba2 2303 	umull	r2, r3, r2, r3
 800beca:	0a5b      	lsrs	r3, r3, #9
 800becc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bed4:	4623      	mov	r3, r4
 800bed6:	1e5c      	subs	r4, r3, #1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d102      	bne.n	800bee2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bedc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bee0:	e02c      	b.n	800bf3c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d0f0      	beq.n	800bed4 <SDMMC_GetCmdResp7+0x1c>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1eb      	bne.n	800bed4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf00:	f003 0304 	and.w	r3, r3, #4
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d004      	beq.n	800bf12 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2204      	movs	r2, #4
 800bf0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf0e:	2304      	movs	r3, #4
 800bf10:	e014      	b.n	800bf3c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d004      	beq.n	800bf28 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e009      	b.n	800bf3c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2240      	movs	r2, #64	; 0x40
 800bf38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bf3a:	2300      	movs	r3, #0
  
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bc90      	pop	{r4, r7}
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	20000000 	.word	0x20000000
 800bf4c:	10624dd3 	.word	0x10624dd3

0800bf50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf50:	b084      	sub	sp, #16
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b084      	sub	sp, #16
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	f107 001c 	add.w	r0, r7, #28
 800bf5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d120      	bne.n	800bfaa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68da      	ldr	r2, [r3, #12]
 800bf78:	4b20      	ldr	r3, [pc, #128]	; (800bffc <USB_CoreInit+0xac>)
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bf8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d105      	bne.n	800bf9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f001 fac4 	bl	800d52c <USB_CoreReset>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	73fb      	strb	r3, [r7, #15]
 800bfa8:	e010      	b.n	800bfcc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f001 fab8 	bl	800d52c <USB_CoreReset>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d10b      	bne.n	800bfea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	f043 0206 	orr.w	r2, r3, #6
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	f043 0220 	orr.w	r2, r3, #32
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bff6:	b004      	add	sp, #16
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	ffbdffbf 	.word	0xffbdffbf

0800c000 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	4613      	mov	r3, r2
 800c00c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c00e:	79fb      	ldrb	r3, [r7, #7]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d165      	bne.n	800c0e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4a41      	ldr	r2, [pc, #260]	; (800c11c <USB_SetTurnaroundTime+0x11c>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d906      	bls.n	800c02a <USB_SetTurnaroundTime+0x2a>
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	4a40      	ldr	r2, [pc, #256]	; (800c120 <USB_SetTurnaroundTime+0x120>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d802      	bhi.n	800c02a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c024:	230f      	movs	r3, #15
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e062      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	4a3c      	ldr	r2, [pc, #240]	; (800c120 <USB_SetTurnaroundTime+0x120>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d906      	bls.n	800c040 <USB_SetTurnaroundTime+0x40>
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	4a3b      	ldr	r2, [pc, #236]	; (800c124 <USB_SetTurnaroundTime+0x124>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d802      	bhi.n	800c040 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c03a:	230e      	movs	r3, #14
 800c03c:	617b      	str	r3, [r7, #20]
 800c03e:	e057      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	4a38      	ldr	r2, [pc, #224]	; (800c124 <USB_SetTurnaroundTime+0x124>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d906      	bls.n	800c056 <USB_SetTurnaroundTime+0x56>
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4a37      	ldr	r2, [pc, #220]	; (800c128 <USB_SetTurnaroundTime+0x128>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d802      	bhi.n	800c056 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c050:	230d      	movs	r3, #13
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	e04c      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4a33      	ldr	r2, [pc, #204]	; (800c128 <USB_SetTurnaroundTime+0x128>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d906      	bls.n	800c06c <USB_SetTurnaroundTime+0x6c>
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	4a32      	ldr	r2, [pc, #200]	; (800c12c <USB_SetTurnaroundTime+0x12c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d802      	bhi.n	800c06c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c066:	230c      	movs	r3, #12
 800c068:	617b      	str	r3, [r7, #20]
 800c06a:	e041      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4a2f      	ldr	r2, [pc, #188]	; (800c12c <USB_SetTurnaroundTime+0x12c>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d906      	bls.n	800c082 <USB_SetTurnaroundTime+0x82>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	4a2e      	ldr	r2, [pc, #184]	; (800c130 <USB_SetTurnaroundTime+0x130>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d802      	bhi.n	800c082 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c07c:	230b      	movs	r3, #11
 800c07e:	617b      	str	r3, [r7, #20]
 800c080:	e036      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	4a2a      	ldr	r2, [pc, #168]	; (800c130 <USB_SetTurnaroundTime+0x130>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d906      	bls.n	800c098 <USB_SetTurnaroundTime+0x98>
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	4a29      	ldr	r2, [pc, #164]	; (800c134 <USB_SetTurnaroundTime+0x134>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d802      	bhi.n	800c098 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c092:	230a      	movs	r3, #10
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	e02b      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	4a26      	ldr	r2, [pc, #152]	; (800c134 <USB_SetTurnaroundTime+0x134>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d906      	bls.n	800c0ae <USB_SetTurnaroundTime+0xae>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	4a25      	ldr	r2, [pc, #148]	; (800c138 <USB_SetTurnaroundTime+0x138>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d802      	bhi.n	800c0ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c0a8:	2309      	movs	r3, #9
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	e020      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	4a21      	ldr	r2, [pc, #132]	; (800c138 <USB_SetTurnaroundTime+0x138>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d906      	bls.n	800c0c4 <USB_SetTurnaroundTime+0xc4>
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	4a20      	ldr	r2, [pc, #128]	; (800c13c <USB_SetTurnaroundTime+0x13c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d802      	bhi.n	800c0c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c0be:	2308      	movs	r3, #8
 800c0c0:	617b      	str	r3, [r7, #20]
 800c0c2:	e015      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	4a1d      	ldr	r2, [pc, #116]	; (800c13c <USB_SetTurnaroundTime+0x13c>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d906      	bls.n	800c0da <USB_SetTurnaroundTime+0xda>
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	4a1c      	ldr	r2, [pc, #112]	; (800c140 <USB_SetTurnaroundTime+0x140>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d802      	bhi.n	800c0da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c0d4:	2307      	movs	r3, #7
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e00a      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c0da:	2306      	movs	r3, #6
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e007      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c0e6:	2309      	movs	r3, #9
 800c0e8:	617b      	str	r3, [r7, #20]
 800c0ea:	e001      	b.n	800c0f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c0ec:	2309      	movs	r3, #9
 800c0ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	68da      	ldr	r2, [r3, #12]
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	029b      	lsls	r3, r3, #10
 800c104:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c108:	431a      	orrs	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	00d8acbf 	.word	0x00d8acbf
 800c120:	00e4e1bf 	.word	0x00e4e1bf
 800c124:	00f423ff 	.word	0x00f423ff
 800c128:	0106737f 	.word	0x0106737f
 800c12c:	011a499f 	.word	0x011a499f
 800c130:	01312cff 	.word	0x01312cff
 800c134:	014ca43f 	.word	0x014ca43f
 800c138:	016e35ff 	.word	0x016e35ff
 800c13c:	01a6ab1f 	.word	0x01a6ab1f
 800c140:	01e847ff 	.word	0x01e847ff

0800c144 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f043 0201 	orr.w	r2, r3, #1
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f023 0201 	bic.w	r2, r3, #1
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	460b      	mov	r3, r1
 800c192:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d106      	bne.n	800c1b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60da      	str	r2, [r3, #12]
 800c1b2:	e00b      	b.n	800c1cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c1b4:	78fb      	ldrb	r3, [r7, #3]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60da      	str	r2, [r3, #12]
 800c1c6:	e001      	b.n	800c1cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e003      	b.n	800c1d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c1cc:	2032      	movs	r0, #50	; 0x32
 800c1ce:	f7f8 fedd 	bl	8004f8c <HAL_Delay>

  return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1dc:	b084      	sub	sp, #16
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b086      	sub	sp, #24
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c1ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	613b      	str	r3, [r7, #16]
 800c1fa:	e009      	b.n	800c210 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	3340      	adds	r3, #64	; 0x40
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	2200      	movs	r2, #0
 800c208:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	3301      	adds	r3, #1
 800c20e:	613b      	str	r3, [r7, #16]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	2b0e      	cmp	r3, #14
 800c214:	d9f2      	bls.n	800c1fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d11c      	bne.n	800c256 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c22a:	f043 0302 	orr.w	r3, r3, #2
 800c22e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c234:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	e005      	b.n	800c262 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c268:	461a      	mov	r2, r3
 800c26a:	2300      	movs	r3, #0
 800c26c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c274:	4619      	mov	r1, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27c:	461a      	mov	r2, r3
 800c27e:	680b      	ldr	r3, [r1, #0]
 800c280:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	2b01      	cmp	r3, #1
 800c286:	d10c      	bne.n	800c2a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d104      	bne.n	800c298 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c28e:	2100      	movs	r1, #0
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f959 	bl	800c548 <USB_SetDevSpeed>
 800c296:	e018      	b.n	800c2ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c298:	2101      	movs	r1, #1
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f954 	bl	800c548 <USB_SetDevSpeed>
 800c2a0:	e013      	b.n	800c2ca <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d10c      	bne.n	800c2c2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d104      	bne.n	800c2b8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f949 	bl	800c548 <USB_SetDevSpeed>
 800c2b6:	e008      	b.n	800c2ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f944 	bl	800c548 <USB_SetDevSpeed>
 800c2c0:	e003      	b.n	800c2ca <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c2c2:	2103      	movs	r1, #3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f93f 	bl	800c548 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c2ca:	2110      	movs	r1, #16
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f8f3 	bl	800c4b8 <USB_FlushTxFifo>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d001      	beq.n	800c2dc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f911 	bl	800c504 <USB_FlushRxFifo>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fe:	461a      	mov	r2, r3
 800c300:	2300      	movs	r3, #0
 800c302:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c30a:	461a      	mov	r2, r3
 800c30c:	2300      	movs	r3, #0
 800c30e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c310:	2300      	movs	r3, #0
 800c312:	613b      	str	r3, [r7, #16]
 800c314:	e043      	b.n	800c39e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	015a      	lsls	r2, r3, #5
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	4413      	add	r3, r2
 800c31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c32c:	d118      	bne.n	800c360 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10a      	bne.n	800c34a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c340:	461a      	mov	r2, r3
 800c342:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	e013      	b.n	800c372 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4413      	add	r3, r2
 800c352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c356:	461a      	mov	r2, r3
 800c358:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c35c:	6013      	str	r3, [r2, #0]
 800c35e:	e008      	b.n	800c372 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36c:	461a      	mov	r2, r3
 800c36e:	2300      	movs	r3, #0
 800c370:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37e:	461a      	mov	r2, r3
 800c380:	2300      	movs	r3, #0
 800c382:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	015a      	lsls	r2, r3, #5
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4413      	add	r3, r2
 800c38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c390:	461a      	mov	r2, r3
 800c392:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c396:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	3301      	adds	r3, #1
 800c39c:	613b      	str	r3, [r7, #16]
 800c39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d3b7      	bcc.n	800c316 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	613b      	str	r3, [r7, #16]
 800c3aa:	e043      	b.n	800c434 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3c2:	d118      	bne.n	800c3f6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	015a      	lsls	r2, r3, #5
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	e013      	b.n	800c408 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	e008      	b.n	800c408 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	015a      	lsls	r2, r3, #5
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c402:	461a      	mov	r2, r3
 800c404:	2300      	movs	r3, #0
 800c406:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	015a      	lsls	r2, r3, #5
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	4413      	add	r3, r2
 800c410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c414:	461a      	mov	r2, r3
 800c416:	2300      	movs	r3, #0
 800c418:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4413      	add	r3, r2
 800c422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c426:	461a      	mov	r2, r3
 800c428:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c42c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	3301      	adds	r3, #1
 800c432:	613b      	str	r3, [r7, #16]
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d3b7      	bcc.n	800c3ac <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c44a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c44e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c45c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	2b00      	cmp	r3, #0
 800c462:	d105      	bne.n	800c470 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	f043 0210 	orr.w	r2, r3, #16
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	699a      	ldr	r2, [r3, #24]
 800c474:	4b0e      	ldr	r3, [pc, #56]	; (800c4b0 <USB_DevInit+0x2d4>)
 800c476:	4313      	orrs	r3, r2
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d005      	beq.n	800c48e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	699b      	ldr	r3, [r3, #24]
 800c486:	f043 0208 	orr.w	r2, r3, #8
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c490:	2b01      	cmp	r3, #1
 800c492:	d105      	bne.n	800c4a0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	699a      	ldr	r2, [r3, #24]
 800c498:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <USB_DevInit+0x2d8>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4ac:	b004      	add	sp, #16
 800c4ae:	4770      	bx	lr
 800c4b0:	803c3800 	.word	0x803c3800
 800c4b4:	40000004 	.word	0x40000004

0800c4b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	019b      	lsls	r3, r3, #6
 800c4ca:	f043 0220 	orr.w	r2, r3, #32
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4a09      	ldr	r2, [pc, #36]	; (800c500 <USB_FlushTxFifo+0x48>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d901      	bls.n	800c4e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	e006      	b.n	800c4f2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	f003 0320 	and.w	r3, r3, #32
 800c4ec:	2b20      	cmp	r3, #32
 800c4ee:	d0f0      	beq.n	800c4d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3714      	adds	r7, #20
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	00030d40 	.word	0x00030d40

0800c504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2210      	movs	r2, #16
 800c514:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3301      	adds	r3, #1
 800c51a:	60fb      	str	r3, [r7, #12]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4a09      	ldr	r2, [pc, #36]	; (800c544 <USB_FlushRxFifo+0x40>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d901      	bls.n	800c528 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e006      	b.n	800c536 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	f003 0310 	and.w	r3, r3, #16
 800c530:	2b10      	cmp	r3, #16
 800c532:	d0f0      	beq.n	800c516 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	00030d40 	.word	0x00030d40

0800c548 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c568:	4313      	orrs	r3, r2
 800c56a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b087      	sub	sp, #28
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	f003 0306 	and.w	r3, r3, #6
 800c592:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d102      	bne.n	800c5a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c59a:	2300      	movs	r3, #0
 800c59c:	75fb      	strb	r3, [r7, #23]
 800c59e:	e00a      	b.n	800c5b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d002      	beq.n	800c5ac <USB_GetDevSpeed+0x32>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b06      	cmp	r3, #6
 800c5aa:	d102      	bne.n	800c5b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	75fb      	strb	r3, [r7, #23]
 800c5b0:	e001      	b.n	800c5b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c5b2:	230f      	movs	r3, #15
 800c5b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	371c      	adds	r7, #28
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b085      	sub	sp, #20
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	785b      	ldrb	r3, [r3, #1]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d139      	bne.n	800c654 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e6:	69da      	ldr	r2, [r3, #28]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	f003 030f 	and.w	r3, r3, #15
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	68f9      	ldr	r1, [r7, #12]
 800c5fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5fe:	4313      	orrs	r3, r2
 800c600:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d153      	bne.n	800c6c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	015a      	lsls	r2, r3, #5
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	78db      	ldrb	r3, [r3, #3]
 800c632:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c634:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	059b      	lsls	r3, r3, #22
 800c63a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c63c:	431a      	orrs	r2, r3
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	0159      	lsls	r1, r3, #5
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	440b      	add	r3, r1
 800c646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c64a:	4619      	mov	r1, r3
 800c64c:	4b20      	ldr	r3, [pc, #128]	; (800c6d0 <USB_ActivateEndpoint+0x10c>)
 800c64e:	4313      	orrs	r3, r2
 800c650:	600b      	str	r3, [r1, #0]
 800c652:	e035      	b.n	800c6c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c65a:	69da      	ldr	r2, [r3, #28]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	2101      	movs	r1, #1
 800c666:	fa01 f303 	lsl.w	r3, r1, r3
 800c66a:	041b      	lsls	r3, r3, #16
 800c66c:	68f9      	ldr	r1, [r7, #12]
 800c66e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c672:	4313      	orrs	r3, r2
 800c674:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	015a      	lsls	r2, r3, #5
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4413      	add	r3, r2
 800c67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d119      	bne.n	800c6c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	015a      	lsls	r2, r3, #5
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4413      	add	r3, r2
 800c694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	78db      	ldrb	r3, [r3, #3]
 800c6a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c6a8:	430b      	orrs	r3, r1
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	0159      	lsls	r1, r3, #5
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	440b      	add	r3, r1
 800c6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <USB_ActivateEndpoint+0x10c>)
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	10008000 	.word	0x10008000

0800c6d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	785b      	ldrb	r3, [r3, #1]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d161      	bne.n	800c7b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	015a      	lsls	r2, r3, #5
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c706:	d11f      	bne.n	800c748 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	015a      	lsls	r2, r3, #5
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68ba      	ldr	r2, [r7, #8]
 800c718:	0151      	lsls	r1, r2, #5
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	440a      	add	r2, r1
 800c71e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c726:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	015a      	lsls	r2, r3, #5
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	0151      	lsls	r1, r2, #5
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	440a      	add	r2, r1
 800c73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c74e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	f003 030f 	and.w	r3, r3, #15
 800c758:	2101      	movs	r1, #1
 800c75a:	fa01 f303 	lsl.w	r3, r1, r3
 800c75e:	b29b      	uxth	r3, r3
 800c760:	43db      	mvns	r3, r3
 800c762:	68f9      	ldr	r1, [r7, #12]
 800c764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c768:	4013      	ands	r3, r2
 800c76a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c772:	69da      	ldr	r2, [r3, #28]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f003 030f 	and.w	r3, r3, #15
 800c77c:	2101      	movs	r1, #1
 800c77e:	fa01 f303 	lsl.w	r3, r1, r3
 800c782:	b29b      	uxth	r3, r3
 800c784:	43db      	mvns	r3, r3
 800c786:	68f9      	ldr	r1, [r7, #12]
 800c788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c78c:	4013      	ands	r3, r2
 800c78e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	015a      	lsls	r2, r3, #5
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	4413      	add	r3, r2
 800c798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	0159      	lsls	r1, r3, #5
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	440b      	add	r3, r1
 800c7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	4b35      	ldr	r3, [pc, #212]	; (800c884 <USB_DeactivateEndpoint+0x1b0>)
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	600b      	str	r3, [r1, #0]
 800c7b2:	e060      	b.n	800c876 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7ca:	d11f      	bne.n	800c80c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	015a      	lsls	r2, r3, #5
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	0151      	lsls	r1, r2, #5
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	440a      	add	r2, r1
 800c7e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	0151      	lsls	r1, r2, #5
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	440a      	add	r2, r1
 800c802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c80a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	f003 030f 	and.w	r3, r3, #15
 800c81c:	2101      	movs	r1, #1
 800c81e:	fa01 f303 	lsl.w	r3, r1, r3
 800c822:	041b      	lsls	r3, r3, #16
 800c824:	43db      	mvns	r3, r3
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c82c:	4013      	ands	r3, r2
 800c82e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c836:	69da      	ldr	r2, [r3, #28]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	f003 030f 	and.w	r3, r3, #15
 800c840:	2101      	movs	r1, #1
 800c842:	fa01 f303 	lsl.w	r3, r1, r3
 800c846:	041b      	lsls	r3, r3, #16
 800c848:	43db      	mvns	r3, r3
 800c84a:	68f9      	ldr	r1, [r7, #12]
 800c84c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c850:	4013      	ands	r3, r2
 800c852:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	0159      	lsls	r1, r3, #5
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	440b      	add	r3, r1
 800c86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c86e:	4619      	mov	r1, r3
 800c870:	4b05      	ldr	r3, [pc, #20]	; (800c888 <USB_DeactivateEndpoint+0x1b4>)
 800c872:	4013      	ands	r3, r2
 800c874:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	ec337800 	.word	0xec337800
 800c888:	eff37800 	.word	0xeff37800

0800c88c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08a      	sub	sp, #40	; 0x28
 800c890:	af02      	add	r7, sp, #8
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	4613      	mov	r3, r2
 800c898:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	785b      	ldrb	r3, [r3, #1]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	f040 8163 	bne.w	800cb74 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d132      	bne.n	800c91c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	0159      	lsls	r1, r3, #5
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	440b      	add	r3, r1
 800c8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	4ba5      	ldr	r3, [pc, #660]	; (800cb68 <USB_EPStartXfer+0x2dc>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	015a      	lsls	r2, r3, #5
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	4413      	add	r3, r2
 800c8e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	0151      	lsls	r1, r2, #5
 800c8ea:	69fa      	ldr	r2, [r7, #28]
 800c8ec:	440a      	add	r2, r1
 800c8ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c904:	691a      	ldr	r2, [r3, #16]
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	0159      	lsls	r1, r3, #5
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	440b      	add	r3, r1
 800c90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c912:	4619      	mov	r1, r3
 800c914:	4b95      	ldr	r3, [pc, #596]	; (800cb6c <USB_EPStartXfer+0x2e0>)
 800c916:	4013      	ands	r3, r2
 800c918:	610b      	str	r3, [r1, #16]
 800c91a:	e074      	b.n	800ca06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	4413      	add	r3, r2
 800c924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c928:	691a      	ldr	r2, [r3, #16]
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	0159      	lsls	r1, r3, #5
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	440b      	add	r3, r1
 800c932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c936:	4619      	mov	r1, r3
 800c938:	4b8c      	ldr	r3, [pc, #560]	; (800cb6c <USB_EPStartXfer+0x2e0>)
 800c93a:	4013      	ands	r3, r2
 800c93c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	015a      	lsls	r2, r3, #5
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	4413      	add	r3, r2
 800c946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c94a:	691a      	ldr	r2, [r3, #16]
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	0159      	lsls	r1, r3, #5
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	440b      	add	r3, r1
 800c954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c958:	4619      	mov	r1, r3
 800c95a:	4b83      	ldr	r3, [pc, #524]	; (800cb68 <USB_EPStartXfer+0x2dc>)
 800c95c:	4013      	ands	r3, r2
 800c95e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	4413      	add	r3, r2
 800c968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96c:	691a      	ldr	r2, [r3, #16]
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	6959      	ldr	r1, [r3, #20]
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	440b      	add	r3, r1
 800c978:	1e59      	subs	r1, r3, #1
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c982:	04d9      	lsls	r1, r3, #19
 800c984:	4b7a      	ldr	r3, [pc, #488]	; (800cb70 <USB_EPStartXfer+0x2e4>)
 800c986:	400b      	ands	r3, r1
 800c988:	69b9      	ldr	r1, [r7, #24]
 800c98a:	0148      	lsls	r0, r1, #5
 800c98c:	69f9      	ldr	r1, [r7, #28]
 800c98e:	4401      	add	r1, r0
 800c990:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c994:	4313      	orrs	r3, r2
 800c996:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	015a      	lsls	r2, r3, #5
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	4413      	add	r3, r2
 800c9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a4:	691a      	ldr	r2, [r3, #16]
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ae:	69b9      	ldr	r1, [r7, #24]
 800c9b0:	0148      	lsls	r0, r1, #5
 800c9b2:	69f9      	ldr	r1, [r7, #28]
 800c9b4:	4401      	add	r1, r0
 800c9b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	78db      	ldrb	r3, [r3, #3]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d11f      	bne.n	800ca06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	015a      	lsls	r2, r3, #5
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	69ba      	ldr	r2, [r7, #24]
 800c9d6:	0151      	lsls	r1, r2, #5
 800c9d8:	69fa      	ldr	r2, [r7, #28]
 800c9da:	440a      	add	r2, r1
 800c9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c9e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	015a      	lsls	r2, r3, #5
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	69ba      	ldr	r2, [r7, #24]
 800c9f6:	0151      	lsls	r1, r2, #5
 800c9f8:	69fa      	ldr	r2, [r7, #28]
 800c9fa:	440a      	add	r2, r1
 800c9fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ca06:	79fb      	ldrb	r3, [r7, #7]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d14b      	bne.n	800caa4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d009      	beq.n	800ca28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca20:	461a      	mov	r2, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	78db      	ldrb	r3, [r3, #3]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d128      	bne.n	800ca82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d110      	bne.n	800ca62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	015a      	lsls	r2, r3, #5
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	4413      	add	r3, r2
 800ca48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	69ba      	ldr	r2, [r7, #24]
 800ca50:	0151      	lsls	r1, r2, #5
 800ca52:	69fa      	ldr	r2, [r7, #28]
 800ca54:	440a      	add	r2, r1
 800ca56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	e00f      	b.n	800ca82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	0151      	lsls	r1, r2, #5
 800ca74:	69fa      	ldr	r2, [r7, #28]
 800ca76:	440a      	add	r2, r1
 800ca78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	69ba      	ldr	r2, [r7, #24]
 800ca92:	0151      	lsls	r1, r2, #5
 800ca94:	69fa      	ldr	r2, [r7, #28]
 800ca96:	440a      	add	r2, r1
 800ca98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	e133      	b.n	800cd0c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	015a      	lsls	r2, r3, #5
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	69ba      	ldr	r2, [r7, #24]
 800cab4:	0151      	lsls	r1, r2, #5
 800cab6:	69fa      	ldr	r2, [r7, #28]
 800cab8:	440a      	add	r2, r1
 800caba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cabe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cac2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	78db      	ldrb	r3, [r3, #3]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d015      	beq.n	800caf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 811b 	beq.w	800cd0c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cadc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	f003 030f 	and.w	r3, r3, #15
 800cae6:	2101      	movs	r1, #1
 800cae8:	fa01 f303 	lsl.w	r3, r1, r3
 800caec:	69f9      	ldr	r1, [r7, #28]
 800caee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caf2:	4313      	orrs	r3, r2
 800caf4:	634b      	str	r3, [r1, #52]	; 0x34
 800caf6:	e109      	b.n	800cd0c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d110      	bne.n	800cb2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	015a      	lsls	r2, r3, #5
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	69ba      	ldr	r2, [r7, #24]
 800cb18:	0151      	lsls	r1, r2, #5
 800cb1a:	69fa      	ldr	r2, [r7, #28]
 800cb1c:	440a      	add	r2, r1
 800cb1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	e00f      	b.n	800cb4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	015a      	lsls	r2, r3, #5
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	4413      	add	r3, r2
 800cb32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	69ba      	ldr	r2, [r7, #24]
 800cb3a:	0151      	lsls	r1, r2, #5
 800cb3c:	69fa      	ldr	r2, [r7, #28]
 800cb3e:	440a      	add	r2, r1
 800cb40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	68d9      	ldr	r1, [r3, #12]
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	781a      	ldrb	r2, [r3, #0]
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	b298      	uxth	r0, r3
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 fa38 	bl	800cfd4 <USB_WritePacket>
 800cb64:	e0d2      	b.n	800cd0c <USB_EPStartXfer+0x480>
 800cb66:	bf00      	nop
 800cb68:	e007ffff 	.word	0xe007ffff
 800cb6c:	fff80000 	.word	0xfff80000
 800cb70:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	015a      	lsls	r2, r3, #5
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb80:	691a      	ldr	r2, [r3, #16]
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	0159      	lsls	r1, r3, #5
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	440b      	add	r3, r1
 800cb8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4b61      	ldr	r3, [pc, #388]	; (800cd18 <USB_EPStartXfer+0x48c>)
 800cb92:	4013      	ands	r3, r2
 800cb94:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	015a      	lsls	r2, r3, #5
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba2:	691a      	ldr	r2, [r3, #16]
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	0159      	lsls	r1, r3, #5
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	440b      	add	r3, r1
 800cbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4b5a      	ldr	r3, [pc, #360]	; (800cd1c <USB_EPStartXfer+0x490>)
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d123      	bne.n	800cc08 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbcc:	691a      	ldr	r2, [r3, #16]
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbd6:	69b9      	ldr	r1, [r7, #24]
 800cbd8:	0148      	lsls	r0, r1, #5
 800cbda:	69f9      	ldr	r1, [r7, #28]
 800cbdc:	4401      	add	r1, r0
 800cbde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	015a      	lsls	r2, r3, #5
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	4413      	add	r3, r2
 800cbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	69ba      	ldr	r2, [r7, #24]
 800cbf6:	0151      	lsls	r1, r2, #5
 800cbf8:	69fa      	ldr	r2, [r7, #28]
 800cbfa:	440a      	add	r2, r1
 800cbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc04:	6113      	str	r3, [r2, #16]
 800cc06:	e033      	b.n	800cc70 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	695a      	ldr	r2, [r3, #20]
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	4413      	add	r3, r2
 800cc12:	1e5a      	subs	r2, r3, #1
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc1c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2a:	691a      	ldr	r2, [r3, #16]
 800cc2c:	8afb      	ldrh	r3, [r7, #22]
 800cc2e:	04d9      	lsls	r1, r3, #19
 800cc30:	4b3b      	ldr	r3, [pc, #236]	; (800cd20 <USB_EPStartXfer+0x494>)
 800cc32:	400b      	ands	r3, r1
 800cc34:	69b9      	ldr	r1, [r7, #24]
 800cc36:	0148      	lsls	r0, r1, #5
 800cc38:	69f9      	ldr	r1, [r7, #28]
 800cc3a:	4401      	add	r1, r0
 800cc3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc40:	4313      	orrs	r3, r2
 800cc42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc50:	691a      	ldr	r2, [r3, #16]
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	8af9      	ldrh	r1, [r7, #22]
 800cc58:	fb01 f303 	mul.w	r3, r1, r3
 800cc5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc60:	69b9      	ldr	r1, [r7, #24]
 800cc62:	0148      	lsls	r0, r1, #5
 800cc64:	69f9      	ldr	r1, [r7, #28]
 800cc66:	4401      	add	r1, r0
 800cc68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d10d      	bne.n	800cc92 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d009      	beq.n	800cc92 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	68d9      	ldr	r1, [r3, #12]
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	015a      	lsls	r2, r3, #5
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	4413      	add	r3, r2
 800cc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8e:	460a      	mov	r2, r1
 800cc90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	78db      	ldrb	r3, [r3, #3]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d128      	bne.n	800ccec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d110      	bne.n	800cccc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	69ba      	ldr	r2, [r7, #24]
 800ccba:	0151      	lsls	r1, r2, #5
 800ccbc:	69fa      	ldr	r2, [r7, #28]
 800ccbe:	440a      	add	r2, r1
 800ccc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ccc8:	6013      	str	r3, [r2, #0]
 800ccca:	e00f      	b.n	800ccec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	015a      	lsls	r2, r3, #5
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	69ba      	ldr	r2, [r7, #24]
 800ccdc:	0151      	lsls	r1, r2, #5
 800ccde:	69fa      	ldr	r2, [r7, #28]
 800cce0:	440a      	add	r2, r1
 800cce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	0151      	lsls	r1, r2, #5
 800ccfe:	69fa      	ldr	r2, [r7, #28]
 800cd00:	440a      	add	r2, r1
 800cd02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	fff80000 	.word	0xfff80000
 800cd1c:	e007ffff 	.word	0xe007ffff
 800cd20:	1ff80000 	.word	0x1ff80000

0800cd24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	785b      	ldrb	r3, [r3, #1]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	f040 80cd 	bne.w	800cee0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d132      	bne.n	800cdb4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	015a      	lsls	r2, r3, #5
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	4413      	add	r3, r2
 800cd56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd5a:	691a      	ldr	r2, [r3, #16]
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	0159      	lsls	r1, r3, #5
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	440b      	add	r3, r1
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4b98      	ldr	r3, [pc, #608]	; (800cfcc <USB_EP0StartXfer+0x2a8>)
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	015a      	lsls	r2, r3, #5
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	4413      	add	r3, r2
 800cd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	0151      	lsls	r1, r2, #5
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	440a      	add	r2, r1
 800cd86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	015a      	lsls	r2, r3, #5
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	4413      	add	r3, r2
 800cd98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd9c:	691a      	ldr	r2, [r3, #16]
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	0159      	lsls	r1, r3, #5
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	440b      	add	r3, r1
 800cda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4b88      	ldr	r3, [pc, #544]	; (800cfd0 <USB_EP0StartXfer+0x2ac>)
 800cdae:	4013      	ands	r3, r2
 800cdb0:	610b      	str	r3, [r1, #16]
 800cdb2:	e04e      	b.n	800ce52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	015a      	lsls	r2, r3, #5
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	4413      	add	r3, r2
 800cdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc0:	691a      	ldr	r2, [r3, #16]
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	0159      	lsls	r1, r3, #5
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	440b      	add	r3, r1
 800cdca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4b7f      	ldr	r3, [pc, #508]	; (800cfd0 <USB_EP0StartXfer+0x2ac>)
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	015a      	lsls	r2, r3, #5
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	4413      	add	r3, r2
 800cdde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde2:	691a      	ldr	r2, [r3, #16]
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	0159      	lsls	r1, r3, #5
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	440b      	add	r3, r1
 800cdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4b76      	ldr	r3, [pc, #472]	; (800cfcc <USB_EP0StartXfer+0x2a8>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	695a      	ldr	r2, [r3, #20]
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d903      	bls.n	800ce0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	689a      	ldr	r2, [r3, #8]
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	015a      	lsls	r2, r3, #5
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	0151      	lsls	r1, r2, #5
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	440a      	add	r2, r1
 800ce22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce38:	691a      	ldr	r2, [r3, #16]
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce42:	6939      	ldr	r1, [r7, #16]
 800ce44:	0148      	lsls	r0, r1, #5
 800ce46:	6979      	ldr	r1, [r7, #20]
 800ce48:	4401      	add	r1, r0
 800ce4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d11e      	bne.n	800ce96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d009      	beq.n	800ce74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	015a      	lsls	r2, r3, #5
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	693a      	ldr	r2, [r7, #16]
 800ce84:	0151      	lsls	r1, r2, #5
 800ce86:	697a      	ldr	r2, [r7, #20]
 800ce88:	440a      	add	r2, r1
 800ce8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	e092      	b.n	800cfbc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	015a      	lsls	r2, r3, #5
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	693a      	ldr	r2, [r7, #16]
 800cea6:	0151      	lsls	r1, r2, #5
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	440a      	add	r2, r1
 800ceac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ceb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	695b      	ldr	r3, [r3, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d07e      	beq.n	800cfbc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	f003 030f 	and.w	r3, r3, #15
 800cece:	2101      	movs	r1, #1
 800ced0:	fa01 f303 	lsl.w	r3, r1, r3
 800ced4:	6979      	ldr	r1, [r7, #20]
 800ced6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ceda:	4313      	orrs	r3, r2
 800cedc:	634b      	str	r3, [r1, #52]	; 0x34
 800cede:	e06d      	b.n	800cfbc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	015a      	lsls	r2, r3, #5
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceec:	691a      	ldr	r2, [r3, #16]
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	0159      	lsls	r1, r3, #5
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	440b      	add	r3, r1
 800cef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefa:	4619      	mov	r1, r3
 800cefc:	4b34      	ldr	r3, [pc, #208]	; (800cfd0 <USB_EP0StartXfer+0x2ac>)
 800cefe:	4013      	ands	r3, r2
 800cf00:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0e:	691a      	ldr	r2, [r3, #16]
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	0159      	lsls	r1, r3, #5
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	440b      	add	r3, r1
 800cf18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4b2b      	ldr	r3, [pc, #172]	; (800cfcc <USB_EP0StartXfer+0x2a8>)
 800cf20:	4013      	ands	r3, r2
 800cf22:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	689a      	ldr	r2, [r3, #8]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	015a      	lsls	r2, r3, #5
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	693a      	ldr	r2, [r7, #16]
 800cf44:	0151      	lsls	r1, r2, #5
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	440a      	add	r2, r1
 800cf4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	015a      	lsls	r2, r3, #5
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf60:	691a      	ldr	r2, [r3, #16]
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf6a:	6939      	ldr	r1, [r7, #16]
 800cf6c:	0148      	lsls	r0, r1, #5
 800cf6e:	6979      	ldr	r1, [r7, #20]
 800cf70:	4401      	add	r1, r0
 800cf72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf76:	4313      	orrs	r3, r2
 800cf78:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d10d      	bne.n	800cf9c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d009      	beq.n	800cf9c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	68d9      	ldr	r1, [r3, #12]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	015a      	lsls	r2, r3, #5
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	4413      	add	r3, r2
 800cf94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf98:	460a      	mov	r2, r1
 800cf9a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	0151      	lsls	r1, r2, #5
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	440a      	add	r2, r1
 800cfb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	371c      	adds	r7, #28
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	e007ffff 	.word	0xe007ffff
 800cfd0:	fff80000 	.word	0xfff80000

0800cfd4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b089      	sub	sp, #36	; 0x24
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	4611      	mov	r1, r2
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	71fb      	strb	r3, [r7, #7]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d11a      	bne.n	800d030 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cffa:	88bb      	ldrh	r3, [r7, #4]
 800cffc:	3303      	adds	r3, #3
 800cffe:	089b      	lsrs	r3, r3, #2
 800d000:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d002:	2300      	movs	r3, #0
 800d004:	61bb      	str	r3, [r7, #24]
 800d006:	e00f      	b.n	800d028 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	031a      	lsls	r2, r3, #12
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d014:	461a      	mov	r2, r3
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	3304      	adds	r3, #4
 800d020:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	3301      	adds	r3, #1
 800d026:	61bb      	str	r3, [r7, #24]
 800d028:	69ba      	ldr	r2, [r7, #24]
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d3eb      	bcc.n	800d008 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3724      	adds	r7, #36	; 0x24
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr

0800d03e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d03e:	b480      	push	{r7}
 800d040:	b089      	sub	sp, #36	; 0x24
 800d042:	af00      	add	r7, sp, #0
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	60b9      	str	r1, [r7, #8]
 800d048:	4613      	mov	r3, r2
 800d04a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d054:	88fb      	ldrh	r3, [r7, #6]
 800d056:	3303      	adds	r3, #3
 800d058:	089b      	lsrs	r3, r3, #2
 800d05a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d05c:	2300      	movs	r3, #0
 800d05e:	61bb      	str	r3, [r7, #24]
 800d060:	e00b      	b.n	800d07a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	601a      	str	r2, [r3, #0]
    pDest++;
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	3304      	adds	r3, #4
 800d072:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	3301      	adds	r3, #1
 800d078:	61bb      	str	r3, [r7, #24]
 800d07a:	69ba      	ldr	r2, [r7, #24]
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d3ef      	bcc.n	800d062 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d082:	69fb      	ldr	r3, [r7, #28]
}
 800d084:	4618      	mov	r0, r3
 800d086:	3724      	adds	r7, #36	; 0x24
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	785b      	ldrb	r3, [r3, #1]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d12c      	bne.n	800d106 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	db12      	blt.n	800d0e4 <USB_EPSetStall+0x54>
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00f      	beq.n	800d0e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	015a      	lsls	r2, r3, #5
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	0151      	lsls	r1, r2, #5
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	440a      	add	r2, r1
 800d0da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	015a      	lsls	r2, r3, #5
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	0151      	lsls	r1, r2, #5
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	440a      	add	r2, r1
 800d0fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	e02b      	b.n	800d15e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	015a      	lsls	r2, r3, #5
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	db12      	blt.n	800d13e <USB_EPSetStall+0xae>
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00f      	beq.n	800d13e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d13c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	015a      	lsls	r2, r3, #5
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	4413      	add	r3, r2
 800d146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	0151      	lsls	r1, r2, #5
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	440a      	add	r2, r1
 800d154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d15c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d128      	bne.n	800d1da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	015a      	lsls	r2, r3, #5
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	4413      	add	r3, r2
 800d190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	0151      	lsls	r1, r2, #5
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	440a      	add	r2, r1
 800d19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	78db      	ldrb	r3, [r3, #3]
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	d003      	beq.n	800d1b8 <USB_EPClearStall+0x4c>
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	78db      	ldrb	r3, [r3, #3]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d138      	bne.n	800d22a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	4413      	add	r3, r2
 800d1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	0151      	lsls	r1, r2, #5
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	440a      	add	r2, r1
 800d1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1d6:	6013      	str	r3, [r2, #0]
 800d1d8:	e027      	b.n	800d22a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	0151      	lsls	r1, r2, #5
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	440a      	add	r2, r1
 800d1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	78db      	ldrb	r3, [r3, #3]
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d003      	beq.n	800d20a <USB_EPClearStall+0x9e>
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	78db      	ldrb	r3, [r3, #3]
 800d206:	2b02      	cmp	r3, #2
 800d208:	d10f      	bne.n	800d22a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	015a      	lsls	r2, r3, #5
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	4413      	add	r3, r2
 800d212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	0151      	lsls	r1, r2, #5
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	440a      	add	r2, r1
 800d220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d228:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d256:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d25a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	011b      	lsls	r3, r3, #4
 800d268:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d26c:	68f9      	ldr	r1, [r7, #12]
 800d26e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d272:	4313      	orrs	r3, r2
 800d274:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3714      	adds	r7, #20
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d29e:	f023 0302 	bic.w	r3, r3, #2
 800d2a2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d2a4:	2003      	movs	r0, #3
 800d2a6:	f7f7 fe71 	bl	8004f8c <HAL_Delay>

  return HAL_OK;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2ce:	f043 0302 	orr.w	r3, r3, #2
 800d2d2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d2d4:	2003      	movs	r0, #3
 800d2d6:	f7f7 fe59 	bl	8004f8c <HAL_Delay>

  return HAL_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	695b      	ldr	r3, [r3, #20]
 800d2f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	699b      	ldr	r3, [r3, #24]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	4013      	ands	r3, r2
 800d2fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr

0800d30a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b085      	sub	sp, #20
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	4013      	ands	r3, r2
 800d32c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	0c1b      	lsrs	r3, r3, #16
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d33e:	b480      	push	{r7}
 800d340:	b085      	sub	sp, #20
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d35a:	69db      	ldr	r3, [r3, #28]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	4013      	ands	r3, r2
 800d360:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	b29b      	uxth	r3, r3
}
 800d366:	4618      	mov	r0, r3
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d372:	b480      	push	{r7}
 800d374:	b085      	sub	sp, #20
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	460b      	mov	r3, r1
 800d37c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d382:	78fb      	ldrb	r3, [r7, #3]
 800d384:	015a      	lsls	r2, r3, #5
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	4413      	add	r3, r2
 800d38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d398:	695b      	ldr	r3, [r3, #20]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	4013      	ands	r3, r2
 800d39e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b087      	sub	sp, #28
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d3d2:	78fb      	ldrb	r3, [r7, #3]
 800d3d4:	f003 030f 	and.w	r3, r3, #15
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	fa22 f303 	lsr.w	r3, r2, r3
 800d3de:	01db      	lsls	r3, r3, #7
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d3e8:	78fb      	ldrb	r3, [r7, #3]
 800d3ea:	015a      	lsls	r2, r3, #5
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	f003 0301 	and.w	r3, r3, #1
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
	...

0800d428 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d442:	4619      	mov	r1, r3
 800d444:	4b09      	ldr	r3, [pc, #36]	; (800d46c <USB_ActivateSetup+0x44>)
 800d446:	4013      	ands	r3, r2
 800d448:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d45c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	3714      	adds	r7, #20
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr
 800d46c:	fffff800 	.word	0xfffff800

0800d470 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	460b      	mov	r3, r1
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	333c      	adds	r3, #60	; 0x3c
 800d486:	3304      	adds	r3, #4
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	4a26      	ldr	r2, [pc, #152]	; (800d528 <USB_EP0_OutStart+0xb8>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d90a      	bls.n	800d4aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4a4:	d101      	bne.n	800d4aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e037      	b.n	800d51a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4d8:	f043 0318 	orr.w	r3, r3, #24
 800d4dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d4f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d4f2:	7afb      	ldrb	r3, [r7, #11]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d10f      	bne.n	800d518 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4fe:	461a      	mov	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	697a      	ldr	r2, [r7, #20]
 800d50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d512:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	371c      	adds	r7, #28
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	4f54300a 	.word	0x4f54300a

0800d52c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d534:	2300      	movs	r3, #0
 800d536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	3301      	adds	r3, #1
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	4a13      	ldr	r2, [pc, #76]	; (800d590 <USB_CoreReset+0x64>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d901      	bls.n	800d54a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e01b      	b.n	800d582 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	691b      	ldr	r3, [r3, #16]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	daf2      	bge.n	800d538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d552:	2300      	movs	r3, #0
 800d554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	691b      	ldr	r3, [r3, #16]
 800d55a:	f043 0201 	orr.w	r2, r3, #1
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	3301      	adds	r3, #1
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	4a09      	ldr	r2, [pc, #36]	; (800d590 <USB_CoreReset+0x64>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d901      	bls.n	800d574 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d570:	2303      	movs	r3, #3
 800d572:	e006      	b.n	800d582 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	f003 0301 	and.w	r3, r3, #1
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d0f0      	beq.n	800d562 <USB_CoreReset+0x36>

  return HAL_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	00030d40 	.word	0x00030d40

0800d594 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d594:	b580      	push	{r7, lr}
 800d596:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d598:	4904      	ldr	r1, [pc, #16]	; (800d5ac <MX_FATFS_Init+0x18>)
 800d59a:	4805      	ldr	r0, [pc, #20]	; (800d5b0 <MX_FATFS_Init+0x1c>)
 800d59c:	f004 fd8e 	bl	80120bc <FATFS_LinkDriver>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	4b03      	ldr	r3, [pc, #12]	; (800d5b4 <MX_FATFS_Init+0x20>)
 800d5a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d5a8:	bf00      	nop
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	20015340 	.word	0x20015340
 800d5b0:	0801a098 	.word	0x0801a098
 800d5b4:	2001533c 	.word	0x2001533c

0800d5b8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d5bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5d2:	f000 f896 	bl	800d702 <BSP_SD_IsDetected>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d001      	beq.n	800d5e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d5dc:	2302      	movs	r3, #2
 800d5de:	e012      	b.n	800d606 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d5e0:	480b      	ldr	r0, [pc, #44]	; (800d610 <BSP_SD_Init+0x48>)
 800d5e2:	f7fa fd81 	bl	80080e8 <HAL_SD_Init>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d109      	bne.n	800d604 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d5f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d5f4:	4806      	ldr	r0, [pc, #24]	; (800d610 <BSP_SD_Init+0x48>)
 800d5f6:	f7fb fb39 	bl	8008c6c <HAL_SD_ConfigWideBusOperation>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d001      	beq.n	800d604 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d604:	79fb      	ldrb	r3, [r7, #7]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	200089c4 	.word	0x200089c4

0800d614 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	68f9      	ldr	r1, [r7, #12]
 800d62a:	4806      	ldr	r0, [pc, #24]	; (800d644 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d62c:	f7fa fdf4 	bl	8008218 <HAL_SD_ReadBlocks_DMA>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	200089c4 	.word	0x200089c4

0800d648 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	68f9      	ldr	r1, [r7, #12]
 800d65e:	4806      	ldr	r0, [pc, #24]	; (800d678 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d660:	f7fa fec6 	bl	80083f0 <HAL_SD_WriteBlocks_DMA>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3718      	adds	r7, #24
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	200089c4 	.word	0x200089c4

0800d67c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d680:	4805      	ldr	r0, [pc, #20]	; (800d698 <BSP_SD_GetCardState+0x1c>)
 800d682:	f7fb fb6f 	bl	8008d64 <HAL_SD_GetCardState>
 800d686:	4603      	mov	r3, r0
 800d688:	2b04      	cmp	r3, #4
 800d68a:	bf14      	ite	ne
 800d68c:	2301      	movne	r3, #1
 800d68e:	2300      	moveq	r3, #0
 800d690:	b2db      	uxtb	r3, r3
}
 800d692:	4618      	mov	r0, r3
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	200089c4 	.word	0x200089c4

0800d69c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	4803      	ldr	r0, [pc, #12]	; (800d6b4 <BSP_SD_GetCardInfo+0x18>)
 800d6a8:	f7fb fab4 	bl	8008c14 <HAL_SD_GetCardInfo>
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	200089c4 	.word	0x200089c4

0800d6b8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d6c0:	f000 f818 	bl	800d6f4 <BSP_SD_AbortCallback>
}
 800d6c4:	bf00      	nop
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d6d4:	f000 f998 	bl	800da08 <BSP_SD_WriteCpltCallback>
}
 800d6d8:	bf00      	nop
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d6e8:	f000 f9a0 	bl	800da2c <BSP_SD_ReadCpltCallback>
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	af00      	add	r7, sp, #0

}
 800d6f8:	bf00      	nop
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d708:	2301      	movs	r3, #1
 800d70a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	b2db      	uxtb	r3, r3
}
 800d710:	4618      	mov	r0, r3
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800d724:	f004 fdb4 	bl	8012290 <osKernelGetTickCount>
 800d728:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800d72a:	e006      	b.n	800d73a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d72c:	f7ff ffa6 	bl	800d67c <BSP_SD_GetCardState>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d736:	2300      	movs	r3, #0
 800d738:	e009      	b.n	800d74e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800d73a:	f004 fda9 	bl	8012290 <osKernelGetTickCount>
 800d73e:	4602      	mov	r2, r0
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	429a      	cmp	r2, r3
 800d748:	d8f0      	bhi.n	800d72c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d74a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
	...

0800d758 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	4603      	mov	r3, r0
 800d760:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d762:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <SD_CheckStatus+0x38>)
 800d764:	2201      	movs	r2, #1
 800d766:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d768:	f7ff ff88 	bl	800d67c <BSP_SD_GetCardState>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d107      	bne.n	800d782 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d772:	4b07      	ldr	r3, [pc, #28]	; (800d790 <SD_CheckStatus+0x38>)
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	b2db      	uxtb	r3, r3
 800d778:	f023 0301 	bic.w	r3, r3, #1
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	4b04      	ldr	r3, [pc, #16]	; (800d790 <SD_CheckStatus+0x38>)
 800d780:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d782:	4b03      	ldr	r3, [pc, #12]	; (800d790 <SD_CheckStatus+0x38>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	b2db      	uxtb	r3, r3
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20000009 	.word	0x20000009

0800d794 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800d79e:	4b1c      	ldr	r3, [pc, #112]	; (800d810 <SD_initialize+0x7c>)
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800d7a4:	f004 fd1c 	bl	80121e0 <osKernelGetState>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d129      	bne.n	800d802 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d7ae:	f7ff ff0b 	bl	800d5c8 <BSP_SD_Init>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d107      	bne.n	800d7c8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d7b8:	79fb      	ldrb	r3, [r7, #7]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff ffcc 	bl	800d758 <SD_CheckStatus>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	4b12      	ldr	r3, [pc, #72]	; (800d810 <SD_initialize+0x7c>)
 800d7c6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d7c8:	4b11      	ldr	r3, [pc, #68]	; (800d810 <SD_initialize+0x7c>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d017      	beq.n	800d802 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800d7d2:	4b10      	ldr	r3, [pc, #64]	; (800d814 <SD_initialize+0x80>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d107      	bne.n	800d7ea <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2102      	movs	r1, #2
 800d7de:	200a      	movs	r0, #10
 800d7e0:	f005 f9a6 	bl	8012b30 <osMessageQueueNew>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	4b0b      	ldr	r3, [pc, #44]	; (800d814 <SD_initialize+0x80>)
 800d7e8:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800d7ea:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <SD_initialize+0x80>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d107      	bne.n	800d802 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800d7f2:	4b07      	ldr	r3, [pc, #28]	; (800d810 <SD_initialize+0x7c>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	f043 0301 	orr.w	r3, r3, #1
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	4b04      	ldr	r3, [pc, #16]	; (800d810 <SD_initialize+0x7c>)
 800d800:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d802:	4b03      	ldr	r3, [pc, #12]	; (800d810 <SD_initialize+0x7c>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	b2db      	uxtb	r3, r3
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	20000009 	.word	0x20000009
 800d814:	20000328 	.word	0x20000328

0800d818 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff ff97 	bl	800d758 <SD_CheckStatus>
 800d82a:	4603      	mov	r3, r0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
 800d83e:	603b      	str	r3, [r7, #0]
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d848:	f247 5030 	movw	r0, #30000	; 0x7530
 800d84c:	f7ff ff66 	bl	800d71c <SD_CheckStatusWithTimeout>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	da01      	bge.n	800d85a <SD_read+0x26>
  {
    return res;
 800d856:	7ffb      	ldrb	r3, [r7, #31]
 800d858:	e02f      	b.n	800d8ba <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	6879      	ldr	r1, [r7, #4]
 800d85e:	68b8      	ldr	r0, [r7, #8]
 800d860:	f7ff fed8 	bl	800d614 <BSP_SD_ReadBlocks_DMA>
 800d864:	4603      	mov	r3, r0
 800d866:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800d868:	7fbb      	ldrb	r3, [r7, #30]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d124      	bne.n	800d8b8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d86e:	4b15      	ldr	r3, [pc, #84]	; (800d8c4 <SD_read+0x90>)
 800d870:	6818      	ldr	r0, [r3, #0]
 800d872:	f107 0112 	add.w	r1, r7, #18
 800d876:	f247 5330 	movw	r3, #30000	; 0x7530
 800d87a:	2200      	movs	r2, #0
 800d87c:	f005 fa52 	bl	8012d24 <osMessageQueueGet>
 800d880:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d117      	bne.n	800d8b8 <SD_read+0x84>
 800d888:	8a7b      	ldrh	r3, [r7, #18]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d114      	bne.n	800d8b8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800d88e:	f004 fcff 	bl	8012290 <osKernelGetTickCount>
 800d892:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d894:	e007      	b.n	800d8a6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d896:	f7ff fef1 	bl	800d67c <BSP_SD_GetCardState>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d102      	bne.n	800d8a6 <SD_read+0x72>
              {
                res = RES_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d8a4:	e008      	b.n	800d8b8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d8a6:	f004 fcf3 	bl	8012290 <osKernelGetTickCount>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d9ee      	bls.n	800d896 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d8b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3720      	adds	r7, #32
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20000328 	.word	0x20000328

0800d8c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	607a      	str	r2, [r7, #4]
 800d8d2:	603b      	str	r3, [r7, #0]
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d8dc:	f247 5030 	movw	r0, #30000	; 0x7530
 800d8e0:	f7ff ff1c 	bl	800d71c <SD_CheckStatusWithTimeout>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	da01      	bge.n	800d8ee <SD_write+0x26>
  {
    return res;
 800d8ea:	7ffb      	ldrb	r3, [r7, #31]
 800d8ec:	e02d      	b.n	800d94a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d8ee:	683a      	ldr	r2, [r7, #0]
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	68b8      	ldr	r0, [r7, #8]
 800d8f4:	f7ff fea8 	bl	800d648 <BSP_SD_WriteBlocks_DMA>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d124      	bne.n	800d948 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d8fe:	4b15      	ldr	r3, [pc, #84]	; (800d954 <SD_write+0x8c>)
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	f107 0112 	add.w	r1, r7, #18
 800d906:	f247 5330 	movw	r3, #30000	; 0x7530
 800d90a:	2200      	movs	r2, #0
 800d90c:	f005 fa0a 	bl	8012d24 <osMessageQueueGet>
 800d910:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d117      	bne.n	800d948 <SD_write+0x80>
 800d918:	8a7b      	ldrh	r3, [r7, #18]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d114      	bne.n	800d948 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800d91e:	f004 fcb7 	bl	8012290 <osKernelGetTickCount>
 800d922:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800d924:	e007      	b.n	800d936 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d926:	f7ff fea9 	bl	800d67c <BSP_SD_GetCardState>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <SD_write+0x6e>
          {
            res = RES_OK;
 800d930:	2300      	movs	r3, #0
 800d932:	77fb      	strb	r3, [r7, #31]
            break;
 800d934:	e008      	b.n	800d948 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800d936:	f004 fcab 	bl	8012290 <osKernelGetTickCount>
 800d93a:	4602      	mov	r2, r0
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	f247 522f 	movw	r2, #29999	; 0x752f
 800d944:	4293      	cmp	r3, r2
 800d946:	d9ee      	bls.n	800d926 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800d948:	7ffb      	ldrb	r3, [r7, #31]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3720      	adds	r7, #32
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	20000328 	.word	0x20000328

0800d958 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08c      	sub	sp, #48	; 0x30
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	603a      	str	r2, [r7, #0]
 800d962:	71fb      	strb	r3, [r7, #7]
 800d964:	460b      	mov	r3, r1
 800d966:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d96e:	4b25      	ldr	r3, [pc, #148]	; (800da04 <SD_ioctl+0xac>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	b2db      	uxtb	r3, r3
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <SD_ioctl+0x28>
 800d97c:	2303      	movs	r3, #3
 800d97e:	e03c      	b.n	800d9fa <SD_ioctl+0xa2>

  switch (cmd)
 800d980:	79bb      	ldrb	r3, [r7, #6]
 800d982:	2b03      	cmp	r3, #3
 800d984:	d834      	bhi.n	800d9f0 <SD_ioctl+0x98>
 800d986:	a201      	add	r2, pc, #4	; (adr r2, 800d98c <SD_ioctl+0x34>)
 800d988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98c:	0800d99d 	.word	0x0800d99d
 800d990:	0800d9a5 	.word	0x0800d9a5
 800d994:	0800d9bd 	.word	0x0800d9bd
 800d998:	0800d9d7 	.word	0x0800d9d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d9a2:	e028      	b.n	800d9f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d9a4:	f107 030c 	add.w	r3, r7, #12
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7ff fe77 	bl	800d69c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d9ba:	e01c      	b.n	800d9f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d9bc:	f107 030c 	add.w	r3, r7, #12
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff fe6b 	bl	800d69c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d9d4:	e00f      	b.n	800d9f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d9d6:	f107 030c 	add.w	r3, r7, #12
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7ff fe5e 	bl	800d69c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	0a5a      	lsrs	r2, r3, #9
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d9ee:	e002      	b.n	800d9f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d9f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3730      	adds	r7, #48	; 0x30
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	20000009 	.word	0x20000009

0800da08 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800da0e:	2302      	movs	r3, #2
 800da10:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800da12:	4b05      	ldr	r3, [pc, #20]	; (800da28 <BSP_SD_WriteCpltCallback+0x20>)
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	1db9      	adds	r1, r7, #6
 800da18:	2300      	movs	r3, #0
 800da1a:	2200      	movs	r2, #0
 800da1c:	f005 f90e 	bl	8012c3c <osMessageQueuePut>
#endif
}
 800da20:	bf00      	nop
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	20000328 	.word	0x20000328

0800da2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800da32:	2301      	movs	r3, #1
 800da34:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800da36:	4b05      	ldr	r3, [pc, #20]	; (800da4c <BSP_SD_ReadCpltCallback+0x20>)
 800da38:	6818      	ldr	r0, [r3, #0]
 800da3a:	1db9      	adds	r1, r7, #6
 800da3c:	2300      	movs	r3, #0
 800da3e:	2200      	movs	r2, #0
 800da40:	f005 f8fc 	bl	8012c3c <osMessageQueuePut>
#endif
}
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20000328 	.word	0x20000328

0800da50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800da60:	f009 f95e 	bl	8016d20 <malloc>
 800da64:	4603      	mov	r3, r0
 800da66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d105      	bne.n	800da7a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800da76:	2302      	movs	r3, #2
 800da78:	e066      	b.n	800db48 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	7c1b      	ldrb	r3, [r3, #16]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d119      	bne.n	800dabe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da8e:	2202      	movs	r2, #2
 800da90:	2181      	movs	r1, #129	; 0x81
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f008 ff77 	bl	8016986 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daa2:	2202      	movs	r2, #2
 800daa4:	2101      	movs	r1, #1
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f008 ff6d 	bl	8016986 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2210      	movs	r2, #16
 800dab8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dabc:	e016      	b.n	800daec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dabe:	2340      	movs	r3, #64	; 0x40
 800dac0:	2202      	movs	r2, #2
 800dac2:	2181      	movs	r1, #129	; 0x81
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f008 ff5e 	bl	8016986 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dad0:	2340      	movs	r3, #64	; 0x40
 800dad2:	2202      	movs	r2, #2
 800dad4:	2101      	movs	r1, #1
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f008 ff55 	bl	8016986 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2210      	movs	r2, #16
 800dae8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800daec:	2308      	movs	r3, #8
 800daee:	2203      	movs	r2, #3
 800daf0:	2182      	movs	r1, #130	; 0x82
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f008 ff47 	bl	8016986 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	7c1b      	ldrb	r3, [r3, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d109      	bne.n	800db36 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db2c:	2101      	movs	r1, #1
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f009 f818 	bl	8016b64 <USBD_LL_PrepareReceive>
 800db34:	e007      	b.n	800db46 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db3c:	2340      	movs	r3, #64	; 0x40
 800db3e:	2101      	movs	r1, #1
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f009 f80f 	bl	8016b64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800db60:	2181      	movs	r1, #129	; 0x81
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f008 ff35 	bl	80169d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800db6e:	2101      	movs	r1, #1
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f008 ff2e 	bl	80169d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800db7e:	2182      	movs	r1, #130	; 0x82
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f008 ff26 	bl	80169d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00e      	beq.n	800dbbe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f009 f8bd 	bl	8016d30 <free>
    pdev->pClassData = NULL;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbd8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d03a      	beq.n	800dc68 <USBD_CDC_Setup+0xa0>
 800dbf2:	2b20      	cmp	r3, #32
 800dbf4:	f040 8097 	bne.w	800dd26 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	88db      	ldrh	r3, [r3, #6]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d029      	beq.n	800dc54 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	b25b      	sxtb	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	da11      	bge.n	800dc2e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800dc16:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	88d2      	ldrh	r2, [r2, #6]
 800dc1c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dc1e:	6939      	ldr	r1, [r7, #16]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	88db      	ldrh	r3, [r3, #6]
 800dc24:	461a      	mov	r2, r3
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f001 fac7 	bl	800f1ba <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800dc2c:	e082      	b.n	800dd34 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	785a      	ldrb	r2, [r3, #1]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	88db      	ldrh	r3, [r3, #6]
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dc44:	6939      	ldr	r1, [r7, #16]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	88db      	ldrh	r3, [r3, #6]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f001 fae0 	bl	800f212 <USBD_CtlPrepareRx>
    break;
 800dc52:	e06f      	b.n	800dd34 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	7850      	ldrb	r0, [r2, #1]
 800dc60:	2200      	movs	r2, #0
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	4798      	blx	r3
    break;
 800dc66:	e065      	b.n	800dd34 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	785b      	ldrb	r3, [r3, #1]
 800dc6c:	2b0b      	cmp	r3, #11
 800dc6e:	d84f      	bhi.n	800dd10 <USBD_CDC_Setup+0x148>
 800dc70:	a201      	add	r2, pc, #4	; (adr r2, 800dc78 <USBD_CDC_Setup+0xb0>)
 800dc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc76:	bf00      	nop
 800dc78:	0800dca9 	.word	0x0800dca9
 800dc7c:	0800dd1f 	.word	0x0800dd1f
 800dc80:	0800dd11 	.word	0x0800dd11
 800dc84:	0800dd11 	.word	0x0800dd11
 800dc88:	0800dd11 	.word	0x0800dd11
 800dc8c:	0800dd11 	.word	0x0800dd11
 800dc90:	0800dd11 	.word	0x0800dd11
 800dc94:	0800dd11 	.word	0x0800dd11
 800dc98:	0800dd11 	.word	0x0800dd11
 800dc9c:	0800dd11 	.word	0x0800dd11
 800dca0:	0800dcd1 	.word	0x0800dcd1
 800dca4:	0800dcf9 	.word	0x0800dcf9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	d107      	bne.n	800dcc2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dcb2:	f107 030c 	add.w	r3, r7, #12
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	4619      	mov	r1, r3
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f001 fa7d 	bl	800f1ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dcc0:	e030      	b.n	800dd24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f001 fa07 	bl	800f0d8 <USBD_CtlError>
        ret = USBD_FAIL;
 800dcca:	2303      	movs	r3, #3
 800dccc:	75fb      	strb	r3, [r7, #23]
      break;
 800dcce:	e029      	b.n	800dd24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d107      	bne.n	800dcea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dcda:	f107 030f 	add.w	r3, r7, #15
 800dcde:	2201      	movs	r2, #1
 800dce0:	4619      	mov	r1, r3
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f001 fa69 	bl	800f1ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dce8:	e01c      	b.n	800dd24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800dcea:	6839      	ldr	r1, [r7, #0]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f001 f9f3 	bl	800f0d8 <USBD_CtlError>
        ret = USBD_FAIL;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	75fb      	strb	r3, [r7, #23]
      break;
 800dcf6:	e015      	b.n	800dd24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	d00f      	beq.n	800dd22 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f001 f9e7 	bl	800f0d8 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800dd0e:	e008      	b.n	800dd22 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f001 f9e0 	bl	800f0d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800dd18:	2303      	movs	r3, #3
 800dd1a:	75fb      	strb	r3, [r7, #23]
      break;
 800dd1c:	e002      	b.n	800dd24 <USBD_CDC_Setup+0x15c>
      break;
 800dd1e:	bf00      	nop
 800dd20:	e008      	b.n	800dd34 <USBD_CDC_Setup+0x16c>
      break;
 800dd22:	bf00      	nop
    }
    break;
 800dd24:	e006      	b.n	800dd34 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f001 f9d5 	bl	800f0d8 <USBD_CtlError>
    ret = USBD_FAIL;
 800dd2e:	2303      	movs	r3, #3
 800dd30:	75fb      	strb	r3, [r7, #23]
    break;
 800dd32:	bf00      	nop
  }

  return (uint8_t)ret;
 800dd34:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3718      	adds	r7, #24
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop

0800dd40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d101      	bne.n	800dd62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	e049      	b.n	800ddf6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dd6a:	78fa      	ldrb	r2, [r7, #3]
 800dd6c:	6879      	ldr	r1, [r7, #4]
 800dd6e:	4613      	mov	r3, r2
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	4413      	add	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	440b      	add	r3, r1
 800dd78:	3318      	adds	r3, #24
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d029      	beq.n	800ddd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dd80:	78fa      	ldrb	r2, [r7, #3]
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	4613      	mov	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	4413      	add	r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	440b      	add	r3, r1
 800dd8e:	3318      	adds	r3, #24
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	78f9      	ldrb	r1, [r7, #3]
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	460b      	mov	r3, r1
 800dd98:	00db      	lsls	r3, r3, #3
 800dd9a:	1a5b      	subs	r3, r3, r1
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4403      	add	r3, r0
 800dda0:	3344      	adds	r3, #68	; 0x44
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	fbb2 f1f3 	udiv	r1, r2, r3
 800dda8:	fb03 f301 	mul.w	r3, r3, r1
 800ddac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d110      	bne.n	800ddd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ddb2:	78fa      	ldrb	r2, [r7, #3]
 800ddb4:	6879      	ldr	r1, [r7, #4]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	440b      	add	r3, r1
 800ddc0:	3318      	adds	r3, #24
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ddc6:	78f9      	ldrb	r1, [r7, #3]
 800ddc8:	2300      	movs	r3, #0
 800ddca:	2200      	movs	r2, #0
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f008 fea8 	bl	8016b22 <USBD_LL_Transmit>
 800ddd2:	e00f      	b.n	800ddf4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	68ba      	ldr	r2, [r7, #8]
 800dde6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ddf0:	78fa      	ldrb	r2, [r7, #3]
 800ddf2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d101      	bne.n	800de20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800de1c:	2303      	movs	r3, #3
 800de1e:	e015      	b.n	800de4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de20:	78fb      	ldrb	r3, [r7, #3]
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f008 febe 	bl	8016ba6 <USBD_LL_GetRxDataSize>
 800de2a:	4602      	mov	r2, r0
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800de46:	4611      	mov	r1, r2
 800de48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3710      	adds	r7, #16
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d015      	beq.n	800de9a <USBD_CDC_EP0_RxReady+0x46>
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800de74:	2bff      	cmp	r3, #255	; 0xff
 800de76:	d010      	beq.n	800de9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800de86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de8e:	b292      	uxth	r2, r2
 800de90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	22ff      	movs	r2, #255	; 0xff
 800de96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2243      	movs	r2, #67	; 0x43
 800deb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800deb2:	4b03      	ldr	r3, [pc, #12]	; (800dec0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	20000094 	.word	0x20000094

0800dec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2243      	movs	r2, #67	; 0x43
 800ded0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ded2:	4b03      	ldr	r3, [pc, #12]	; (800dee0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr
 800dee0:	20000050 	.word	0x20000050

0800dee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2243      	movs	r2, #67	; 0x43
 800def0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800def2:	4b03      	ldr	r3, [pc, #12]	; (800df00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	200000d8 	.word	0x200000d8

0800df04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	220a      	movs	r2, #10
 800df10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800df12:	4b03      	ldr	r3, [pc, #12]	; (800df20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df14:	4618      	mov	r0, r3
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	2000000c 	.word	0x2000000c

0800df24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800df34:	2303      	movs	r3, #3
 800df36:	e004      	b.n	800df42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800df4e:	b480      	push	{r7}
 800df50:	b087      	sub	sp, #28
 800df52:	af00      	add	r7, sp, #0
 800df54:	60f8      	str	r0, [r7, #12]
 800df56:	60b9      	str	r1, [r7, #8]
 800df58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	371c      	adds	r7, #28
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df90:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dfc6:	2303      	movs	r3, #3
 800dfc8:	e01a      	b.n	800e000 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d114      	bne.n	800dffe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dff2:	2181      	movs	r1, #129	; 0x81
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f008 fd94 	bl	8016b22 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d101      	bne.n	800e026 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e022:	2303      	movs	r3, #3
 800e024:	e016      	b.n	800e054 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	7c1b      	ldrb	r3, [r3, #16]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d109      	bne.n	800e042 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e034:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e038:	2101      	movs	r1, #1
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f008 fd92 	bl	8016b64 <USBD_LL_PrepareReceive>
 800e040:	e007      	b.n	800e052 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e048:	2340      	movs	r3, #64	; 0x40
 800e04a:	2101      	movs	r1, #1
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f008 fd89 	bl	8016b64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	4613      	mov	r3, r2
 800e068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e070:	2303      	movs	r3, #3
 800e072:	e025      	b.n	800e0c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d003      	beq.n	800e098 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2200      	movs	r2, #0
 800e094:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d003      	beq.n	800e0a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	79fa      	ldrb	r2, [r7, #7]
 800e0b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f008 fbff 	bl	80168b8 <USBD_LL_Init>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3718      	adds	r7, #24
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d101      	bne.n	800e0e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e010      	b.n	800e102 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	683a      	ldr	r2, [r7, #0]
 800e0e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0f0:	f107 020e 	add.w	r2, r7, #14
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4798      	blx	r3
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3710      	adds	r7, #16
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b082      	sub	sp, #8
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f008 fc1c 	bl	8016950 <USBD_LL_Start>
 800e118:	4603      	mov	r3, r0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e122:	b480      	push	{r7}
 800e124:	b083      	sub	sp, #12
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	460b      	mov	r3, r1
 800e142:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e144:	2303      	movs	r3, #3
 800e146:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d009      	beq.n	800e166 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	78fa      	ldrb	r2, [r7, #3]
 800e15c:	4611      	mov	r1, r2
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	4798      	blx	r3
 800e162:	4603      	mov	r3, r0
 800e164:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e166:	7bfb      	ldrb	r3, [r7, #15]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	78fa      	ldrb	r2, [r7, #3]
 800e190:	4611      	mov	r1, r2
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	4798      	blx	r3
  }

  return USBD_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1b0:	6839      	ldr	r1, [r7, #0]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 ff56 	bl	800f064 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e1d4:	f003 031f 	and.w	r3, r3, #31
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d00e      	beq.n	800e1fa <USBD_LL_SetupStage+0x5a>
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d302      	bcc.n	800e1e6 <USBD_LL_SetupStage+0x46>
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d014      	beq.n	800e20e <USBD_LL_SetupStage+0x6e>
 800e1e4:	e01d      	b.n	800e222 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fa18 	bl	800e624 <USBD_StdDevReq>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800e1f8:	e020      	b.n	800e23c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e200:	4619      	mov	r1, r3
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fa7c 	bl	800e700 <USBD_StdItfReq>
 800e208:	4603      	mov	r3, r0
 800e20a:	73fb      	strb	r3, [r7, #15]
      break;
 800e20c:	e016      	b.n	800e23c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fab8 	bl	800e78c <USBD_StdEPReq>
 800e21c:	4603      	mov	r3, r0
 800e21e:	73fb      	strb	r3, [r7, #15]
      break;
 800e220:	e00c      	b.n	800e23c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e228:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f008 fbed 	bl	8016a10 <USBD_LL_StallEP>
 800e236:	4603      	mov	r3, r0
 800e238:	73fb      	strb	r3, [r7, #15]
      break;
 800e23a:	bf00      	nop
  }

  return ret;
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b086      	sub	sp, #24
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	60f8      	str	r0, [r7, #12]
 800e24e:	460b      	mov	r3, r1
 800e250:	607a      	str	r2, [r7, #4]
 800e252:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e254:	7afb      	ldrb	r3, [r7, #11]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d137      	bne.n	800e2ca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e268:	2b03      	cmp	r3, #3
 800e26a:	d14a      	bne.n	800e302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	689a      	ldr	r2, [r3, #8]
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	429a      	cmp	r2, r3
 800e276:	d913      	bls.n	800e2a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	689a      	ldr	r2, [r3, #8]
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	1ad2      	subs	r2, r2, r3
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	68da      	ldr	r2, [r3, #12]
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	4293      	cmp	r3, r2
 800e290:	bf28      	it	cs
 800e292:	4613      	movcs	r3, r2
 800e294:	461a      	mov	r2, r3
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 ffd7 	bl	800f24c <USBD_CtlContinueRx>
 800e29e:	e030      	b.n	800e302 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d105      	bne.n	800e2c2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f000 ffd3 	bl	800f26e <USBD_CtlSendStatus>
 800e2c8:	e01b      	b.n	800e302 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d013      	beq.n	800e2fe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e2dc:	2b03      	cmp	r3, #3
 800e2de:	d10e      	bne.n	800e2fe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	7afa      	ldrb	r2, [r7, #11]
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	4798      	blx	r3
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	e002      	b.n	800e304 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e2fe:	2303      	movs	r3, #3
 800e300:	e000      	b.n	800e304 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3718      	adds	r7, #24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	460b      	mov	r3, r1
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e31a:	7afb      	ldrb	r3, [r7, #11]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d16a      	bne.n	800e3f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3314      	adds	r3, #20
 800e324:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d155      	bne.n	800e3dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	689a      	ldr	r2, [r3, #8]
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d914      	bls.n	800e366 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	689a      	ldr	r2, [r3, #8]
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	1ad2      	subs	r2, r2, r3
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	461a      	mov	r2, r3
 800e350:	6879      	ldr	r1, [r7, #4]
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f000 ff4c 	bl	800f1f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e358:	2300      	movs	r3, #0
 800e35a:	2200      	movs	r2, #0
 800e35c:	2100      	movs	r1, #0
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f008 fc00 	bl	8016b64 <USBD_LL_PrepareReceive>
 800e364:	e03a      	b.n	800e3dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	68da      	ldr	r2, [r3, #12]
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d11c      	bne.n	800e3ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d316      	bcc.n	800e3ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	685a      	ldr	r2, [r3, #4]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e388:	429a      	cmp	r2, r3
 800e38a:	d20f      	bcs.n	800e3ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e38c:	2200      	movs	r2, #0
 800e38e:	2100      	movs	r1, #0
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	f000 ff2d 	bl	800f1f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2200      	movs	r2, #0
 800e39a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e39e:	2300      	movs	r3, #0
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f008 fbdd 	bl	8016b64 <USBD_LL_PrepareReceive>
 800e3aa:	e017      	b.n	800e3dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00a      	beq.n	800e3ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	d105      	bne.n	800e3ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3ce:	2180      	movs	r1, #128	; 0x80
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f008 fb1d 	bl	8016a10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 ff5c 	bl	800f294 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d123      	bne.n	800e42e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f7ff fe9b 	bl	800e122 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e3f4:	e01b      	b.n	800e42e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d013      	beq.n	800e42a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d10e      	bne.n	800e42a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e412:	695b      	ldr	r3, [r3, #20]
 800e414:	7afa      	ldrb	r2, [r7, #11]
 800e416:	4611      	mov	r1, r2
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	4798      	blx	r3
 800e41c:	4603      	mov	r3, r0
 800e41e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e420:	7dfb      	ldrb	r3, [r7, #23]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d003      	beq.n	800e42e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	e002      	b.n	800e430 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e42a:	2303      	movs	r3, #3
 800e42c:	e000      	b.n	800e430 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3718      	adds	r7, #24
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e464:	2b00      	cmp	r3, #0
 800e466:	d009      	beq.n	800e47c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	6852      	ldr	r2, [r2, #4]
 800e474:	b2d2      	uxtb	r2, r2
 800e476:	4611      	mov	r1, r2
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e47c:	2340      	movs	r3, #64	; 0x40
 800e47e:	2200      	movs	r2, #0
 800e480:	2100      	movs	r1, #0
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f008 fa7f 	bl	8016986 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2240      	movs	r2, #64	; 0x40
 800e494:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e498:	2340      	movs	r3, #64	; 0x40
 800e49a:	2200      	movs	r2, #0
 800e49c:	2180      	movs	r1, #128	; 0x80
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f008 fa71 	bl	8016986 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2240      	movs	r2, #64	; 0x40
 800e4ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b083      	sub	sp, #12
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	78fa      	ldrb	r2, [r7, #3]
 800e4ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b083      	sub	sp, #12
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2204      	movs	r2, #4
 800e4f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e512:	2b04      	cmp	r3, #4
 800e514:	d105      	bne.n	800e522 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d10b      	bne.n	800e55a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e548:	69db      	ldr	r3, [r3, #28]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d005      	beq.n	800e55a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e554:	69db      	ldr	r3, [r3, #28]
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e55a:	2300      	movs	r3, #0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	460b      	mov	r3, r1
 800e56e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e57e:	b480      	push	{r7}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	460b      	mov	r3, r1
 800e588:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	370c      	adds	r7, #12
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b082      	sub	sp, #8
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d009      	beq.n	800e5dc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	6852      	ldr	r2, [r2, #4]
 800e5d4:	b2d2      	uxtb	r2, r2
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	4798      	blx	r3
  }

  return USBD_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e5e6:	b480      	push	{r7}
 800e5e8:	b087      	sub	sp, #28
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e604:	8a3b      	ldrh	r3, [r7, #16]
 800e606:	021b      	lsls	r3, r3, #8
 800e608:	b21a      	sxth	r2, r3
 800e60a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e60e:	4313      	orrs	r3, r2
 800e610:	b21b      	sxth	r3, r3
 800e612:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e614:	89fb      	ldrh	r3, [r7, #14]
}
 800e616:	4618      	mov	r0, r3
 800e618:	371c      	adds	r7, #28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
	...

0800e624 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e63a:	2b20      	cmp	r3, #32
 800e63c:	d004      	beq.n	800e648 <USBD_StdDevReq+0x24>
 800e63e:	2b40      	cmp	r3, #64	; 0x40
 800e640:	d002      	beq.n	800e648 <USBD_StdDevReq+0x24>
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00a      	beq.n	800e65c <USBD_StdDevReq+0x38>
 800e646:	e050      	b.n	800e6ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	4798      	blx	r3
 800e656:	4603      	mov	r3, r0
 800e658:	73fb      	strb	r3, [r7, #15]
    break;
 800e65a:	e04b      	b.n	800e6f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	785b      	ldrb	r3, [r3, #1]
 800e660:	2b09      	cmp	r3, #9
 800e662:	d83c      	bhi.n	800e6de <USBD_StdDevReq+0xba>
 800e664:	a201      	add	r2, pc, #4	; (adr r2, 800e66c <USBD_StdDevReq+0x48>)
 800e666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66a:	bf00      	nop
 800e66c:	0800e6c1 	.word	0x0800e6c1
 800e670:	0800e6d5 	.word	0x0800e6d5
 800e674:	0800e6df 	.word	0x0800e6df
 800e678:	0800e6cb 	.word	0x0800e6cb
 800e67c:	0800e6df 	.word	0x0800e6df
 800e680:	0800e69f 	.word	0x0800e69f
 800e684:	0800e695 	.word	0x0800e695
 800e688:	0800e6df 	.word	0x0800e6df
 800e68c:	0800e6b7 	.word	0x0800e6b7
 800e690:	0800e6a9 	.word	0x0800e6a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800e694:	6839      	ldr	r1, [r7, #0]
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 f9ce 	bl	800ea38 <USBD_GetDescriptor>
      break;
 800e69c:	e024      	b.n	800e6e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fb5d 	bl	800ed60 <USBD_SetAddress>
      break;
 800e6a6:	e01f      	b.n	800e6e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800e6a8:	6839      	ldr	r1, [r7, #0]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fb9a 	bl	800ede4 <USBD_SetConfig>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e6b4:	e018      	b.n	800e6e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800e6b6:	6839      	ldr	r1, [r7, #0]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fc37 	bl	800ef2c <USBD_GetConfig>
      break;
 800e6be:	e013      	b.n	800e6e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fc66 	bl	800ef94 <USBD_GetStatus>
      break;
 800e6c8:	e00e      	b.n	800e6e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fc94 	bl	800effa <USBD_SetFeature>
      break;
 800e6d2:	e009      	b.n	800e6e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fca3 	bl	800f022 <USBD_ClrFeature>
      break;
 800e6dc:	e004      	b.n	800e6e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 fcf9 	bl	800f0d8 <USBD_CtlError>
      break;
 800e6e6:	bf00      	nop
    }
    break;
 800e6e8:	e004      	b.n	800e6f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fcf3 	bl	800f0d8 <USBD_CtlError>
    break;
 800e6f2:	bf00      	nop
  }

  return ret;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop

0800e700 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e70a:	2300      	movs	r3, #0
 800e70c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e716:	2b20      	cmp	r3, #32
 800e718:	d003      	beq.n	800e722 <USBD_StdItfReq+0x22>
 800e71a:	2b40      	cmp	r3, #64	; 0x40
 800e71c:	d001      	beq.n	800e722 <USBD_StdItfReq+0x22>
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d12a      	bne.n	800e778 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e728:	3b01      	subs	r3, #1
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d81d      	bhi.n	800e76a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	889b      	ldrh	r3, [r3, #4]
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b01      	cmp	r3, #1
 800e736:	d813      	bhi.n	800e760 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	4798      	blx	r3
 800e746:	4603      	mov	r3, r0
 800e748:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	88db      	ldrh	r3, [r3, #6]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d110      	bne.n	800e774 <USBD_StdItfReq+0x74>
 800e752:	7bfb      	ldrb	r3, [r7, #15]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d10d      	bne.n	800e774 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 fd88 	bl	800f26e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e75e:	e009      	b.n	800e774 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e760:	6839      	ldr	r1, [r7, #0]
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 fcb8 	bl	800f0d8 <USBD_CtlError>
      break;
 800e768:	e004      	b.n	800e774 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e76a:	6839      	ldr	r1, [r7, #0]
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 fcb3 	bl	800f0d8 <USBD_CtlError>
      break;
 800e772:	e000      	b.n	800e776 <USBD_StdItfReq+0x76>
      break;
 800e774:	bf00      	nop
    }
    break;
 800e776:	e004      	b.n	800e782 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e778:	6839      	ldr	r1, [r7, #0]
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 fcac 	bl	800f0d8 <USBD_CtlError>
    break;
 800e780:	bf00      	nop
  }

  return ret;
 800e782:	7bfb      	ldrb	r3, [r7, #15]
}
 800e784:	4618      	mov	r0, r3
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	889b      	ldrh	r3, [r3, #4]
 800e79e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e7a8:	2b20      	cmp	r3, #32
 800e7aa:	d004      	beq.n	800e7b6 <USBD_StdEPReq+0x2a>
 800e7ac:	2b40      	cmp	r3, #64	; 0x40
 800e7ae:	d002      	beq.n	800e7b6 <USBD_StdEPReq+0x2a>
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d00a      	beq.n	800e7ca <USBD_StdEPReq+0x3e>
 800e7b4:	e135      	b.n	800ea22 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	4798      	blx	r3
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7c8:	e130      	b.n	800ea2c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	785b      	ldrb	r3, [r3, #1]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d03e      	beq.n	800e850 <USBD_StdEPReq+0xc4>
 800e7d2:	2b03      	cmp	r3, #3
 800e7d4:	d002      	beq.n	800e7dc <USBD_StdEPReq+0x50>
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d077      	beq.n	800e8ca <USBD_StdEPReq+0x13e>
 800e7da:	e11c      	b.n	800ea16 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d002      	beq.n	800e7ec <USBD_StdEPReq+0x60>
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d015      	beq.n	800e816 <USBD_StdEPReq+0x8a>
 800e7ea:	e02b      	b.n	800e844 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00c      	beq.n	800e80c <USBD_StdEPReq+0x80>
 800e7f2:	7bbb      	ldrb	r3, [r7, #14]
 800e7f4:	2b80      	cmp	r3, #128	; 0x80
 800e7f6:	d009      	beq.n	800e80c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7f8:	7bbb      	ldrb	r3, [r7, #14]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f008 f907 	bl	8016a10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e802:	2180      	movs	r1, #128	; 0x80
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f008 f903 	bl	8016a10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e80a:	e020      	b.n	800e84e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800e80c:	6839      	ldr	r1, [r7, #0]
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 fc62 	bl	800f0d8 <USBD_CtlError>
        break;
 800e814:	e01b      	b.n	800e84e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	885b      	ldrh	r3, [r3, #2]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10e      	bne.n	800e83c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e81e:	7bbb      	ldrb	r3, [r7, #14]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00b      	beq.n	800e83c <USBD_StdEPReq+0xb0>
 800e824:	7bbb      	ldrb	r3, [r7, #14]
 800e826:	2b80      	cmp	r3, #128	; 0x80
 800e828:	d008      	beq.n	800e83c <USBD_StdEPReq+0xb0>
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	88db      	ldrh	r3, [r3, #6]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d104      	bne.n	800e83c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e832:	7bbb      	ldrb	r3, [r7, #14]
 800e834:	4619      	mov	r1, r3
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f008 f8ea 	bl	8016a10 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 fd16 	bl	800f26e <USBD_CtlSendStatus>

        break;
 800e842:	e004      	b.n	800e84e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800e844:	6839      	ldr	r1, [r7, #0]
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 fc46 	bl	800f0d8 <USBD_CtlError>
        break;
 800e84c:	bf00      	nop
      }
      break;
 800e84e:	e0e7      	b.n	800ea20 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e856:	2b02      	cmp	r3, #2
 800e858:	d002      	beq.n	800e860 <USBD_StdEPReq+0xd4>
 800e85a:	2b03      	cmp	r3, #3
 800e85c:	d015      	beq.n	800e88a <USBD_StdEPReq+0xfe>
 800e85e:	e02d      	b.n	800e8bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e860:	7bbb      	ldrb	r3, [r7, #14]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00c      	beq.n	800e880 <USBD_StdEPReq+0xf4>
 800e866:	7bbb      	ldrb	r3, [r7, #14]
 800e868:	2b80      	cmp	r3, #128	; 0x80
 800e86a:	d009      	beq.n	800e880 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e86c:	7bbb      	ldrb	r3, [r7, #14]
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f008 f8cd 	bl	8016a10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e876:	2180      	movs	r1, #128	; 0x80
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f008 f8c9 	bl	8016a10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e87e:	e023      	b.n	800e8c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800e880:	6839      	ldr	r1, [r7, #0]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 fc28 	bl	800f0d8 <USBD_CtlError>
        break;
 800e888:	e01e      	b.n	800e8c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	885b      	ldrh	r3, [r3, #2]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d119      	bne.n	800e8c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e892:	7bbb      	ldrb	r3, [r7, #14]
 800e894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d004      	beq.n	800e8a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e89c:	7bbb      	ldrb	r3, [r7, #14]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f008 f8d4 	bl	8016a4e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 fce1 	bl	800f26e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	6839      	ldr	r1, [r7, #0]
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	4798      	blx	r3
        }
        break;
 800e8ba:	e004      	b.n	800e8c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 fc0a 	bl	800f0d8 <USBD_CtlError>
        break;
 800e8c4:	e000      	b.n	800e8c8 <USBD_StdEPReq+0x13c>
        break;
 800e8c6:	bf00      	nop
      }
      break;
 800e8c8:	e0aa      	b.n	800ea20 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d002      	beq.n	800e8da <USBD_StdEPReq+0x14e>
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	d032      	beq.n	800e93e <USBD_StdEPReq+0x1b2>
 800e8d8:	e097      	b.n	800ea0a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e8da:	7bbb      	ldrb	r3, [r7, #14]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d007      	beq.n	800e8f0 <USBD_StdEPReq+0x164>
 800e8e0:	7bbb      	ldrb	r3, [r7, #14]
 800e8e2:	2b80      	cmp	r3, #128	; 0x80
 800e8e4:	d004      	beq.n	800e8f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800e8e6:	6839      	ldr	r1, [r7, #0]
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 fbf5 	bl	800f0d8 <USBD_CtlError>
          break;
 800e8ee:	e091      	b.n	800ea14 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	da0b      	bge.n	800e910 <USBD_StdEPReq+0x184>
 800e8f8:	7bbb      	ldrb	r3, [r7, #14]
 800e8fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8fe:	4613      	mov	r3, r2
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4413      	add	r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	3310      	adds	r3, #16
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	4413      	add	r3, r2
 800e90c:	3304      	adds	r3, #4
 800e90e:	e00b      	b.n	800e928 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e910:	7bbb      	ldrb	r3, [r7, #14]
 800e912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e916:	4613      	mov	r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	4413      	add	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	4413      	add	r3, r2
 800e926:	3304      	adds	r3, #4
 800e928:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2200      	movs	r2, #0
 800e92e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	2202      	movs	r2, #2
 800e934:	4619      	mov	r1, r3
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 fc3f 	bl	800f1ba <USBD_CtlSendData>
        break;
 800e93c:	e06a      	b.n	800ea14 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e93e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e942:	2b00      	cmp	r3, #0
 800e944:	da11      	bge.n	800e96a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e946:	7bbb      	ldrb	r3, [r7, #14]
 800e948:	f003 020f 	and.w	r2, r3, #15
 800e94c:	6879      	ldr	r1, [r7, #4]
 800e94e:	4613      	mov	r3, r2
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4413      	add	r3, r2
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	440b      	add	r3, r1
 800e958:	3324      	adds	r3, #36	; 0x24
 800e95a:	881b      	ldrh	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d117      	bne.n	800e990 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e960:	6839      	ldr	r1, [r7, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 fbb8 	bl	800f0d8 <USBD_CtlError>
            break;
 800e968:	e054      	b.n	800ea14 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e96a:	7bbb      	ldrb	r3, [r7, #14]
 800e96c:	f003 020f 	and.w	r2, r3, #15
 800e970:	6879      	ldr	r1, [r7, #4]
 800e972:	4613      	mov	r3, r2
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	4413      	add	r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	440b      	add	r3, r1
 800e97c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e980:	881b      	ldrh	r3, [r3, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d104      	bne.n	800e990 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e986:	6839      	ldr	r1, [r7, #0]
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 fba5 	bl	800f0d8 <USBD_CtlError>
            break;
 800e98e:	e041      	b.n	800ea14 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e994:	2b00      	cmp	r3, #0
 800e996:	da0b      	bge.n	800e9b0 <USBD_StdEPReq+0x224>
 800e998:	7bbb      	ldrb	r3, [r7, #14]
 800e99a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e99e:	4613      	mov	r3, r2
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4413      	add	r3, r2
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	3310      	adds	r3, #16
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	e00b      	b.n	800e9c8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e9b0:	7bbb      	ldrb	r3, [r7, #14]
 800e9b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4413      	add	r3, r2
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e9ca:	7bbb      	ldrb	r3, [r7, #14]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d002      	beq.n	800e9d6 <USBD_StdEPReq+0x24a>
 800e9d0:	7bbb      	ldrb	r3, [r7, #14]
 800e9d2:	2b80      	cmp	r3, #128	; 0x80
 800e9d4:	d103      	bne.n	800e9de <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]
 800e9dc:	e00e      	b.n	800e9fc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e9de:	7bbb      	ldrb	r3, [r7, #14]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f008 f852 	bl	8016a8c <USBD_LL_IsStallEP>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d003      	beq.n	800e9f6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	601a      	str	r2, [r3, #0]
 800e9f4:	e002      	b.n	800e9fc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2202      	movs	r2, #2
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 fbd9 	bl	800f1ba <USBD_CtlSendData>
          break;
 800ea08:	e004      	b.n	800ea14 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ea0a:	6839      	ldr	r1, [r7, #0]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fb63 	bl	800f0d8 <USBD_CtlError>
        break;
 800ea12:	bf00      	nop
      }
      break;
 800ea14:	e004      	b.n	800ea20 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 fb5d 	bl	800f0d8 <USBD_CtlError>
      break;
 800ea1e:	bf00      	nop
    }
    break;
 800ea20:	e004      	b.n	800ea2c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fb57 	bl	800f0d8 <USBD_CtlError>
    break;
 800ea2a:	bf00      	nop
  }

  return ret;
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
	...

0800ea38 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea42:	2300      	movs	r3, #0
 800ea44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	885b      	ldrh	r3, [r3, #2]
 800ea52:	0a1b      	lsrs	r3, r3, #8
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	2b0e      	cmp	r3, #14
 800ea5a:	f200 8152 	bhi.w	800ed02 <USBD_GetDescriptor+0x2ca>
 800ea5e:	a201      	add	r2, pc, #4	; (adr r2, 800ea64 <USBD_GetDescriptor+0x2c>)
 800ea60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea64:	0800ead5 	.word	0x0800ead5
 800ea68:	0800eaed 	.word	0x0800eaed
 800ea6c:	0800eb2d 	.word	0x0800eb2d
 800ea70:	0800ed03 	.word	0x0800ed03
 800ea74:	0800ed03 	.word	0x0800ed03
 800ea78:	0800eca3 	.word	0x0800eca3
 800ea7c:	0800eccf 	.word	0x0800eccf
 800ea80:	0800ed03 	.word	0x0800ed03
 800ea84:	0800ed03 	.word	0x0800ed03
 800ea88:	0800ed03 	.word	0x0800ed03
 800ea8c:	0800ed03 	.word	0x0800ed03
 800ea90:	0800ed03 	.word	0x0800ed03
 800ea94:	0800ed03 	.word	0x0800ed03
 800ea98:	0800ed03 	.word	0x0800ed03
 800ea9c:	0800eaa1 	.word	0x0800eaa1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00b      	beq.n	800eac4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eab2:	69db      	ldr	r3, [r3, #28]
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	7c12      	ldrb	r2, [r2, #16]
 800eab8:	f107 0108 	add.w	r1, r7, #8
 800eabc:	4610      	mov	r0, r2
 800eabe:	4798      	blx	r3
 800eac0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800eac2:	e126      	b.n	800ed12 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 fb06 	bl	800f0d8 <USBD_CtlError>
      err++;
 800eacc:	7afb      	ldrb	r3, [r7, #11]
 800eace:	3301      	adds	r3, #1
 800ead0:	72fb      	strb	r3, [r7, #11]
    break;
 800ead2:	e11e      	b.n	800ed12 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	7c12      	ldrb	r2, [r2, #16]
 800eae0:	f107 0108 	add.w	r1, r7, #8
 800eae4:	4610      	mov	r0, r2
 800eae6:	4798      	blx	r3
 800eae8:	60f8      	str	r0, [r7, #12]
    break;
 800eaea:	e112      	b.n	800ed12 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	7c1b      	ldrb	r3, [r3, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10d      	bne.n	800eb10 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafc:	f107 0208 	add.w	r2, r7, #8
 800eb00:	4610      	mov	r0, r2
 800eb02:	4798      	blx	r3
 800eb04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800eb0e:	e100      	b.n	800ed12 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb18:	f107 0208 	add.w	r2, r7, #8
 800eb1c:	4610      	mov	r0, r2
 800eb1e:	4798      	blx	r3
 800eb20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3301      	adds	r3, #1
 800eb26:	2202      	movs	r2, #2
 800eb28:	701a      	strb	r2, [r3, #0]
    break;
 800eb2a:	e0f2      	b.n	800ed12 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	885b      	ldrh	r3, [r3, #2]
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b05      	cmp	r3, #5
 800eb34:	f200 80ac 	bhi.w	800ec90 <USBD_GetDescriptor+0x258>
 800eb38:	a201      	add	r2, pc, #4	; (adr r2, 800eb40 <USBD_GetDescriptor+0x108>)
 800eb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb3e:	bf00      	nop
 800eb40:	0800eb59 	.word	0x0800eb59
 800eb44:	0800eb8d 	.word	0x0800eb8d
 800eb48:	0800ebc1 	.word	0x0800ebc1
 800eb4c:	0800ebf5 	.word	0x0800ebf5
 800eb50:	0800ec29 	.word	0x0800ec29
 800eb54:	0800ec5d 	.word	0x0800ec5d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00b      	beq.n	800eb7c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	7c12      	ldrb	r2, [r2, #16]
 800eb70:	f107 0108 	add.w	r1, r7, #8
 800eb74:	4610      	mov	r0, r2
 800eb76:	4798      	blx	r3
 800eb78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb7a:	e091      	b.n	800eca0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 faaa 	bl	800f0d8 <USBD_CtlError>
        err++;
 800eb84:	7afb      	ldrb	r3, [r7, #11]
 800eb86:	3301      	adds	r3, #1
 800eb88:	72fb      	strb	r3, [r7, #11]
      break;
 800eb8a:	e089      	b.n	800eca0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00b      	beq.n	800ebb0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	7c12      	ldrb	r2, [r2, #16]
 800eba4:	f107 0108 	add.w	r1, r7, #8
 800eba8:	4610      	mov	r0, r2
 800ebaa:	4798      	blx	r3
 800ebac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebae:	e077      	b.n	800eca0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fa90 	bl	800f0d8 <USBD_CtlError>
        err++;
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	72fb      	strb	r3, [r7, #11]
      break;
 800ebbe:	e06f      	b.n	800eca0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00b      	beq.n	800ebe4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	7c12      	ldrb	r2, [r2, #16]
 800ebd8:	f107 0108 	add.w	r1, r7, #8
 800ebdc:	4610      	mov	r0, r2
 800ebde:	4798      	blx	r3
 800ebe0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebe2:	e05d      	b.n	800eca0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fa76 	bl	800f0d8 <USBD_CtlError>
        err++;
 800ebec:	7afb      	ldrb	r3, [r7, #11]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	72fb      	strb	r3, [r7, #11]
      break;
 800ebf2:	e055      	b.n	800eca0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00b      	beq.n	800ec18 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	7c12      	ldrb	r2, [r2, #16]
 800ec0c:	f107 0108 	add.w	r1, r7, #8
 800ec10:	4610      	mov	r0, r2
 800ec12:	4798      	blx	r3
 800ec14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec16:	e043      	b.n	800eca0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 fa5c 	bl	800f0d8 <USBD_CtlError>
        err++;
 800ec20:	7afb      	ldrb	r3, [r7, #11]
 800ec22:	3301      	adds	r3, #1
 800ec24:	72fb      	strb	r3, [r7, #11]
      break;
 800ec26:	e03b      	b.n	800eca0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00b      	beq.n	800ec4c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec3a:	695b      	ldr	r3, [r3, #20]
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	7c12      	ldrb	r2, [r2, #16]
 800ec40:	f107 0108 	add.w	r1, r7, #8
 800ec44:	4610      	mov	r0, r2
 800ec46:	4798      	blx	r3
 800ec48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec4a:	e029      	b.n	800eca0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ec4c:	6839      	ldr	r1, [r7, #0]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 fa42 	bl	800f0d8 <USBD_CtlError>
        err++;
 800ec54:	7afb      	ldrb	r3, [r7, #11]
 800ec56:	3301      	adds	r3, #1
 800ec58:	72fb      	strb	r3, [r7, #11]
      break;
 800ec5a:	e021      	b.n	800eca0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00b      	beq.n	800ec80 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec6e:	699b      	ldr	r3, [r3, #24]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	7c12      	ldrb	r2, [r2, #16]
 800ec74:	f107 0108 	add.w	r1, r7, #8
 800ec78:	4610      	mov	r0, r2
 800ec7a:	4798      	blx	r3
 800ec7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec7e:	e00f      	b.n	800eca0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ec80:	6839      	ldr	r1, [r7, #0]
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 fa28 	bl	800f0d8 <USBD_CtlError>
        err++;
 800ec88:	7afb      	ldrb	r3, [r7, #11]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	72fb      	strb	r3, [r7, #11]
      break;
 800ec8e:	e007      	b.n	800eca0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fa20 	bl	800f0d8 <USBD_CtlError>
      err++;
 800ec98:	7afb      	ldrb	r3, [r7, #11]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ec9e:	bf00      	nop
    }
    break;
 800eca0:	e037      	b.n	800ed12 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	7c1b      	ldrb	r3, [r3, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d109      	bne.n	800ecbe <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb2:	f107 0208 	add.w	r2, r7, #8
 800ecb6:	4610      	mov	r0, r2
 800ecb8:	4798      	blx	r3
 800ecba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ecbc:	e029      	b.n	800ed12 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ecbe:	6839      	ldr	r1, [r7, #0]
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fa09 	bl	800f0d8 <USBD_CtlError>
      err++;
 800ecc6:	7afb      	ldrb	r3, [r7, #11]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	72fb      	strb	r3, [r7, #11]
    break;
 800eccc:	e021      	b.n	800ed12 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	7c1b      	ldrb	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10d      	bne.n	800ecf2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecde:	f107 0208 	add.w	r2, r7, #8
 800ece2:	4610      	mov	r0, r2
 800ece4:	4798      	blx	r3
 800ece6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3301      	adds	r3, #1
 800ecec:	2207      	movs	r2, #7
 800ecee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ecf0:	e00f      	b.n	800ed12 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 f9ef 	bl	800f0d8 <USBD_CtlError>
      err++;
 800ecfa:	7afb      	ldrb	r3, [r7, #11]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	72fb      	strb	r3, [r7, #11]
    break;
 800ed00:	e007      	b.n	800ed12 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f9e7 	bl	800f0d8 <USBD_CtlError>
    err++;
 800ed0a:	7afb      	ldrb	r3, [r7, #11]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	72fb      	strb	r3, [r7, #11]
    break;
 800ed10:	bf00      	nop
  }

  if (err != 0U)
 800ed12:	7afb      	ldrb	r3, [r7, #11]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d11e      	bne.n	800ed56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	88db      	ldrh	r3, [r3, #6]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d016      	beq.n	800ed4e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800ed20:	893b      	ldrh	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00e      	beq.n	800ed44 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	88da      	ldrh	r2, [r3, #6]
 800ed2a:	893b      	ldrh	r3, [r7, #8]
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	bf28      	it	cs
 800ed30:	4613      	movcs	r3, r2
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ed36:	893b      	ldrh	r3, [r7, #8]
 800ed38:	461a      	mov	r2, r3
 800ed3a:	68f9      	ldr	r1, [r7, #12]
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fa3c 	bl	800f1ba <USBD_CtlSendData>
 800ed42:	e009      	b.n	800ed58 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ed44:	6839      	ldr	r1, [r7, #0]
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f9c6 	bl	800f0d8 <USBD_CtlError>
 800ed4c:	e004      	b.n	800ed58 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fa8d 	bl	800f26e <USBD_CtlSendStatus>
 800ed54:	e000      	b.n	800ed58 <USBD_GetDescriptor+0x320>
    return;
 800ed56:	bf00      	nop
    }
  }
}
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop

0800ed60 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	889b      	ldrh	r3, [r3, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d130      	bne.n	800edd4 <USBD_SetAddress+0x74>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	88db      	ldrh	r3, [r3, #6]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d12c      	bne.n	800edd4 <USBD_SetAddress+0x74>
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	885b      	ldrh	r3, [r3, #2]
 800ed7e:	2b7f      	cmp	r3, #127	; 0x7f
 800ed80:	d828      	bhi.n	800edd4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	885b      	ldrh	r3, [r3, #2]
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	d104      	bne.n	800eda2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ed98:	6839      	ldr	r1, [r7, #0]
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 f99c 	bl	800f0d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eda0:	e01c      	b.n	800eddc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	7bfa      	ldrb	r2, [r7, #15]
 800eda6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
 800edac:	4619      	mov	r1, r3
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f007 fe98 	bl	8016ae4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fa5a 	bl	800f26e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800edba:	7bfb      	ldrb	r3, [r7, #15]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d004      	beq.n	800edca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2202      	movs	r2, #2
 800edc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edc8:	e008      	b.n	800eddc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2201      	movs	r2, #1
 800edce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edd2:	e003      	b.n	800eddc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f97e 	bl	800f0d8 <USBD_CtlError>
  }
}
 800eddc:	bf00      	nop
 800edde:	3710      	adds	r7, #16
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800edee:	2300      	movs	r3, #0
 800edf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	885b      	ldrh	r3, [r3, #2]
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	4b4b      	ldr	r3, [pc, #300]	; (800ef28 <USBD_SetConfig+0x144>)
 800edfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800edfc:	4b4a      	ldr	r3, [pc, #296]	; (800ef28 <USBD_SetConfig+0x144>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d905      	bls.n	800ee10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f966 	bl	800f0d8 <USBD_CtlError>
    return USBD_FAIL;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	e087      	b.n	800ef20 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d002      	beq.n	800ee20 <USBD_SetConfig+0x3c>
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d025      	beq.n	800ee6a <USBD_SetConfig+0x86>
 800ee1e:	e071      	b.n	800ef04 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ee20:	4b41      	ldr	r3, [pc, #260]	; (800ef28 <USBD_SetConfig+0x144>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d01c      	beq.n	800ee62 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ee28:	4b3f      	ldr	r3, [pc, #252]	; (800ef28 <USBD_SetConfig+0x144>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee32:	4b3d      	ldr	r3, [pc, #244]	; (800ef28 <USBD_SetConfig+0x144>)
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	4619      	mov	r1, r3
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f7ff f97d 	bl	800e138 <USBD_SetClassConfig>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ee42:	7bfb      	ldrb	r3, [r7, #15]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d004      	beq.n	800ee52 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ee48:	6839      	ldr	r1, [r7, #0]
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 f944 	bl	800f0d8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ee50:	e065      	b.n	800ef1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fa0b 	bl	800f26e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2203      	movs	r2, #3
 800ee5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ee60:	e05d      	b.n	800ef1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fa03 	bl	800f26e <USBD_CtlSendStatus>
    break;
 800ee68:	e059      	b.n	800ef1e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	; (800ef28 <USBD_SetConfig+0x144>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d112      	bne.n	800ee98 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2202      	movs	r2, #2
 800ee76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ee7a:	4b2b      	ldr	r3, [pc, #172]	; (800ef28 <USBD_SetConfig+0x144>)
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee84:	4b28      	ldr	r3, [pc, #160]	; (800ef28 <USBD_SetConfig+0x144>)
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7ff f970 	bl	800e170 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 f9ec 	bl	800f26e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ee96:	e042      	b.n	800ef1e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ee98:	4b23      	ldr	r3, [pc, #140]	; (800ef28 <USBD_SetConfig+0x144>)
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d02a      	beq.n	800eefc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	4619      	mov	r1, r3
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7ff f95e 	bl	800e170 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800eeb4:	4b1c      	ldr	r3, [pc, #112]	; (800ef28 <USBD_SetConfig+0x144>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	461a      	mov	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800eebe:	4b1a      	ldr	r3, [pc, #104]	; (800ef28 <USBD_SetConfig+0x144>)
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	4619      	mov	r1, r3
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f7ff f937 	bl	800e138 <USBD_SetClassConfig>
 800eeca:	4603      	mov	r3, r0
 800eecc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800eece:	7bfb      	ldrb	r3, [r7, #15]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00f      	beq.n	800eef4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800eed4:	6839      	ldr	r1, [r7, #0]
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 f8fe 	bl	800f0d8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	4619      	mov	r1, r3
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff f943 	bl	800e170 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2202      	movs	r2, #2
 800eeee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800eef2:	e014      	b.n	800ef1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 f9ba 	bl	800f26e <USBD_CtlSendStatus>
    break;
 800eefa:	e010      	b.n	800ef1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 f9b6 	bl	800f26e <USBD_CtlSendStatus>
    break;
 800ef02:	e00c      	b.n	800ef1e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 f8e6 	bl	800f0d8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <USBD_SetConfig+0x144>)
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	4619      	mov	r1, r3
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7ff f92c 	bl	800e170 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ef18:	2303      	movs	r3, #3
 800ef1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef1c:	bf00      	nop
  }

  return ret;
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	2000032c 	.word	0x2000032c

0800ef2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	88db      	ldrh	r3, [r3, #6]
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d004      	beq.n	800ef48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f8c9 	bl	800f0d8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ef46:	e021      	b.n	800ef8c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	db17      	blt.n	800ef82 <USBD_GetConfig+0x56>
 800ef52:	2b02      	cmp	r3, #2
 800ef54:	dd02      	ble.n	800ef5c <USBD_GetConfig+0x30>
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d00b      	beq.n	800ef72 <USBD_GetConfig+0x46>
 800ef5a:	e012      	b.n	800ef82 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	3308      	adds	r3, #8
 800ef66:	2201      	movs	r2, #1
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f925 	bl	800f1ba <USBD_CtlSendData>
      break;
 800ef70:	e00c      	b.n	800ef8c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	3304      	adds	r3, #4
 800ef76:	2201      	movs	r2, #1
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f91d 	bl	800f1ba <USBD_CtlSendData>
      break;
 800ef80:	e004      	b.n	800ef8c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 f8a7 	bl	800f0d8 <USBD_CtlError>
      break;
 800ef8a:	bf00      	nop
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa4:	3b01      	subs	r3, #1
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d81e      	bhi.n	800efe8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	88db      	ldrh	r3, [r3, #6]
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d004      	beq.n	800efbc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800efb2:	6839      	ldr	r1, [r7, #0]
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f88f 	bl	800f0d8 <USBD_CtlError>
      break;
 800efba:	e01a      	b.n	800eff2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d005      	beq.n	800efd8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	f043 0202 	orr.w	r2, r3, #2
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	330c      	adds	r3, #12
 800efdc:	2202      	movs	r2, #2
 800efde:	4619      	mov	r1, r3
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f8ea 	bl	800f1ba <USBD_CtlSendData>
    break;
 800efe6:	e004      	b.n	800eff2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800efe8:	6839      	ldr	r1, [r7, #0]
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 f874 	bl	800f0d8 <USBD_CtlError>
    break;
 800eff0:	bf00      	nop
  }
}
 800eff2:	bf00      	nop
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b082      	sub	sp, #8
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
 800f002:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	885b      	ldrh	r3, [r3, #2]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d106      	bne.n	800f01a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f92a 	bl	800f26e <USBD_CtlSendStatus>
  }
}
 800f01a:	bf00      	nop
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b082      	sub	sp, #8
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f032:	3b01      	subs	r3, #1
 800f034:	2b02      	cmp	r3, #2
 800f036:	d80b      	bhi.n	800f050 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	885b      	ldrh	r3, [r3, #2]
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d10c      	bne.n	800f05a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f910 	bl	800f26e <USBD_CtlSendStatus>
      }
      break;
 800f04e:	e004      	b.n	800f05a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 f840 	bl	800f0d8 <USBD_CtlError>
      break;
 800f058:	e000      	b.n	800f05c <USBD_ClrFeature+0x3a>
      break;
 800f05a:	bf00      	nop
  }
}
 800f05c:	bf00      	nop
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	781a      	ldrb	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	3301      	adds	r3, #1
 800f07e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	781a      	ldrb	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3301      	adds	r3, #1
 800f08c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f7ff faa9 	bl	800e5e6 <SWAPBYTE>
 800f094:	4603      	mov	r3, r0
 800f096:	461a      	mov	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f7ff fa9c 	bl	800e5e6 <SWAPBYTE>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7ff fa8f 	bl	800e5e6 <SWAPBYTE>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	80da      	strh	r2, [r3, #6]
}
 800f0d0:	bf00      	nop
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0e2:	2180      	movs	r1, #128	; 0x80
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f007 fc93 	bl	8016a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f007 fc8f 	bl	8016a10 <USBD_LL_StallEP>
}
 800f0f2:	bf00      	nop
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b086      	sub	sp, #24
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	60f8      	str	r0, [r7, #12]
 800f102:	60b9      	str	r1, [r7, #8]
 800f104:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d036      	beq.n	800f17e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f114:	6938      	ldr	r0, [r7, #16]
 800f116:	f000 f836 	bl	800f186 <USBD_GetLen>
 800f11a:	4603      	mov	r3, r0
 800f11c:	3301      	adds	r3, #1
 800f11e:	b29b      	uxth	r3, r3
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	b29a      	uxth	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f128:	7dfb      	ldrb	r3, [r7, #23]
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	4413      	add	r3, r2
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	7812      	ldrb	r2, [r2, #0]
 800f132:	701a      	strb	r2, [r3, #0]
  idx++;
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	3301      	adds	r3, #1
 800f138:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f13a:	7dfb      	ldrb	r3, [r7, #23]
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	4413      	add	r3, r2
 800f140:	2203      	movs	r2, #3
 800f142:	701a      	strb	r2, [r3, #0]
  idx++;
 800f144:	7dfb      	ldrb	r3, [r7, #23]
 800f146:	3301      	adds	r3, #1
 800f148:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f14a:	e013      	b.n	800f174 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f14c:	7dfb      	ldrb	r3, [r7, #23]
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	4413      	add	r3, r2
 800f152:	693a      	ldr	r2, [r7, #16]
 800f154:	7812      	ldrb	r2, [r2, #0]
 800f156:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	3301      	adds	r3, #1
 800f15c:	613b      	str	r3, [r7, #16]
    idx++;
 800f15e:	7dfb      	ldrb	r3, [r7, #23]
 800f160:	3301      	adds	r3, #1
 800f162:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f164:	7dfb      	ldrb	r3, [r7, #23]
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	4413      	add	r3, r2
 800f16a:	2200      	movs	r2, #0
 800f16c:	701a      	strb	r2, [r3, #0]
    idx++;
 800f16e:	7dfb      	ldrb	r3, [r7, #23]
 800f170:	3301      	adds	r3, #1
 800f172:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1e7      	bne.n	800f14c <USBD_GetString+0x52>
 800f17c:	e000      	b.n	800f180 <USBD_GetString+0x86>
    return;
 800f17e:	bf00      	nop
  }
}
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f186:	b480      	push	{r7}
 800f188:	b085      	sub	sp, #20
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f196:	e005      	b.n	800f1a4 <USBD_GetLen+0x1e>
  {
    len++;
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	3301      	adds	r3, #1
 800f19c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1f5      	bne.n	800f198 <USBD_GetLen+0x12>
  }

  return len;
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3714      	adds	r7, #20
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b084      	sub	sp, #16
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	60f8      	str	r0, [r7, #12]
 800f1c2:	60b9      	str	r1, [r7, #8]
 800f1c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2202      	movs	r2, #2
 800f1ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	2100      	movs	r1, #0
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f007 fc9e 	bl	8016b22 <USBD_LL_Transmit>

  return USBD_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	2100      	movs	r1, #0
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f007 fc8d 	bl	8016b22 <USBD_LL_Transmit>

  return USBD_OK;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2203      	movs	r2, #3
 800f222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	2100      	movs	r1, #0
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f007 fc91 	bl	8016b64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	68ba      	ldr	r2, [r7, #8]
 800f25c:	2100      	movs	r1, #0
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f007 fc80 	bl	8016b64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b082      	sub	sp, #8
 800f272:	af00      	add	r7, sp, #0
 800f274:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2204      	movs	r2, #4
 800f27a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f27e:	2300      	movs	r3, #0
 800f280:	2200      	movs	r2, #0
 800f282:	2100      	movs	r1, #0
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f007 fc4c 	bl	8016b22 <USBD_LL_Transmit>

  return USBD_OK;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2205      	movs	r2, #5
 800f2a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f007 fc5a 	bl	8016b64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	4a08      	ldr	r2, [pc, #32]	; (800f2ec <disk_status+0x30>)
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	79fa      	ldrb	r2, [r7, #7]
 800f2d4:	4905      	ldr	r1, [pc, #20]	; (800f2ec <disk_status+0x30>)
 800f2d6:	440a      	add	r2, r1
 800f2d8:	7a12      	ldrb	r2, [r2, #8]
 800f2da:	4610      	mov	r0, r2
 800f2dc:	4798      	blx	r3
 800f2de:	4603      	mov	r3, r0
 800f2e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3710      	adds	r7, #16
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	20000358 	.word	0x20000358

0800f2f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f2fe:	79fb      	ldrb	r3, [r7, #7]
 800f300:	4a0d      	ldr	r2, [pc, #52]	; (800f338 <disk_initialize+0x48>)
 800f302:	5cd3      	ldrb	r3, [r2, r3]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d111      	bne.n	800f32c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f308:	79fb      	ldrb	r3, [r7, #7]
 800f30a:	4a0b      	ldr	r2, [pc, #44]	; (800f338 <disk_initialize+0x48>)
 800f30c:	2101      	movs	r1, #1
 800f30e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f310:	79fb      	ldrb	r3, [r7, #7]
 800f312:	4a09      	ldr	r2, [pc, #36]	; (800f338 <disk_initialize+0x48>)
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	79fa      	ldrb	r2, [r7, #7]
 800f31e:	4906      	ldr	r1, [pc, #24]	; (800f338 <disk_initialize+0x48>)
 800f320:	440a      	add	r2, r1
 800f322:	7a12      	ldrb	r2, [r2, #8]
 800f324:	4610      	mov	r0, r2
 800f326:	4798      	blx	r3
 800f328:	4603      	mov	r3, r0
 800f32a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	20000358 	.word	0x20000358

0800f33c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	60b9      	str	r1, [r7, #8]
 800f344:	607a      	str	r2, [r7, #4]
 800f346:	603b      	str	r3, [r7, #0]
 800f348:	4603      	mov	r3, r0
 800f34a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f34c:	7bfb      	ldrb	r3, [r7, #15]
 800f34e:	4a0a      	ldr	r2, [pc, #40]	; (800f378 <disk_read+0x3c>)
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	4413      	add	r3, r2
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	689c      	ldr	r4, [r3, #8]
 800f358:	7bfb      	ldrb	r3, [r7, #15]
 800f35a:	4a07      	ldr	r2, [pc, #28]	; (800f378 <disk_read+0x3c>)
 800f35c:	4413      	add	r3, r2
 800f35e:	7a18      	ldrb	r0, [r3, #8]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	68b9      	ldr	r1, [r7, #8]
 800f366:	47a0      	blx	r4
 800f368:	4603      	mov	r3, r0
 800f36a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	371c      	adds	r7, #28
 800f372:	46bd      	mov	sp, r7
 800f374:	bd90      	pop	{r4, r7, pc}
 800f376:	bf00      	nop
 800f378:	20000358 	.word	0x20000358

0800f37c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f37c:	b590      	push	{r4, r7, lr}
 800f37e:	b087      	sub	sp, #28
 800f380:	af00      	add	r7, sp, #0
 800f382:	60b9      	str	r1, [r7, #8]
 800f384:	607a      	str	r2, [r7, #4]
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	4603      	mov	r3, r0
 800f38a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f38c:	7bfb      	ldrb	r3, [r7, #15]
 800f38e:	4a0a      	ldr	r2, [pc, #40]	; (800f3b8 <disk_write+0x3c>)
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	4413      	add	r3, r2
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	68dc      	ldr	r4, [r3, #12]
 800f398:	7bfb      	ldrb	r3, [r7, #15]
 800f39a:	4a07      	ldr	r2, [pc, #28]	; (800f3b8 <disk_write+0x3c>)
 800f39c:	4413      	add	r3, r2
 800f39e:	7a18      	ldrb	r0, [r3, #8]
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	68b9      	ldr	r1, [r7, #8]
 800f3a6:	47a0      	blx	r4
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800f3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	371c      	adds	r7, #28
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd90      	pop	{r4, r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20000358 	.word	0x20000358

0800f3bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	603a      	str	r2, [r7, #0]
 800f3c6:	71fb      	strb	r3, [r7, #7]
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f3cc:	79fb      	ldrb	r3, [r7, #7]
 800f3ce:	4a09      	ldr	r2, [pc, #36]	; (800f3f4 <disk_ioctl+0x38>)
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	79fa      	ldrb	r2, [r7, #7]
 800f3da:	4906      	ldr	r1, [pc, #24]	; (800f3f4 <disk_ioctl+0x38>)
 800f3dc:	440a      	add	r2, r1
 800f3de:	7a10      	ldrb	r0, [r2, #8]
 800f3e0:	79b9      	ldrb	r1, [r7, #6]
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	4798      	blx	r3
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	73fb      	strb	r3, [r7, #15]
  return res;
 800f3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3710      	adds	r7, #16
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	20000358 	.word	0x20000358

0800f3f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	3301      	adds	r3, #1
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f408:	89fb      	ldrh	r3, [r7, #14]
 800f40a:	021b      	lsls	r3, r3, #8
 800f40c:	b21a      	sxth	r2, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	b21b      	sxth	r3, r3
 800f414:	4313      	orrs	r3, r2
 800f416:	b21b      	sxth	r3, r3
 800f418:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f41a:	89fb      	ldrh	r3, [r7, #14]
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3714      	adds	r7, #20
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f428:	b480      	push	{r7}
 800f42a:	b085      	sub	sp, #20
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3303      	adds	r3, #3
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	021b      	lsls	r3, r3, #8
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	3202      	adds	r2, #2
 800f440:	7812      	ldrb	r2, [r2, #0]
 800f442:	4313      	orrs	r3, r2
 800f444:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	021b      	lsls	r3, r3, #8
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	3201      	adds	r2, #1
 800f44e:	7812      	ldrb	r2, [r2, #0]
 800f450:	4313      	orrs	r3, r2
 800f452:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	021b      	lsls	r3, r3, #8
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	7812      	ldrb	r2, [r2, #0]
 800f45c:	4313      	orrs	r3, r2
 800f45e:	60fb      	str	r3, [r7, #12]
	return rv;
 800f460:	68fb      	ldr	r3, [r7, #12]
}
 800f462:	4618      	mov	r0, r3
 800f464:	3714      	adds	r7, #20
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	460b      	mov	r3, r1
 800f478:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	1c5a      	adds	r2, r3, #1
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	887a      	ldrh	r2, [r7, #2]
 800f482:	b2d2      	uxtb	r2, r2
 800f484:	701a      	strb	r2, [r3, #0]
 800f486:	887b      	ldrh	r3, [r7, #2]
 800f488:	0a1b      	lsrs	r3, r3, #8
 800f48a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	1c5a      	adds	r2, r3, #1
 800f490:	607a      	str	r2, [r7, #4]
 800f492:	887a      	ldrh	r2, [r7, #2]
 800f494:	b2d2      	uxtb	r2, r2
 800f496:	701a      	strb	r2, [r3, #0]
}
 800f498:	bf00      	nop
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	1c5a      	adds	r2, r3, #1
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	683a      	ldr	r2, [r7, #0]
 800f4b6:	b2d2      	uxtb	r2, r2
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	0a1b      	lsrs	r3, r3, #8
 800f4be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	607a      	str	r2, [r7, #4]
 800f4c6:	683a      	ldr	r2, [r7, #0]
 800f4c8:	b2d2      	uxtb	r2, r2
 800f4ca:	701a      	strb	r2, [r3, #0]
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	0a1b      	lsrs	r3, r3, #8
 800f4d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	607a      	str	r2, [r7, #4]
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	b2d2      	uxtb	r2, r2
 800f4dc:	701a      	strb	r2, [r3, #0]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	0a1b      	lsrs	r3, r3, #8
 800f4e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	607a      	str	r2, [r7, #4]
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	b2d2      	uxtb	r2, r2
 800f4ee:	701a      	strb	r2, [r3, #0]
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f4fc:	b480      	push	{r7}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d00d      	beq.n	800f532 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f516:	693a      	ldr	r2, [r7, #16]
 800f518:	1c53      	adds	r3, r2, #1
 800f51a:	613b      	str	r3, [r7, #16]
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	1c59      	adds	r1, r3, #1
 800f520:	6179      	str	r1, [r7, #20]
 800f522:	7812      	ldrb	r2, [r2, #0]
 800f524:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	3b01      	subs	r3, #1
 800f52a:	607b      	str	r3, [r7, #4]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1f1      	bne.n	800f516 <mem_cpy+0x1a>
	}
}
 800f532:	bf00      	nop
 800f534:	371c      	adds	r7, #28
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f53e:	b480      	push	{r7}
 800f540:	b087      	sub	sp, #28
 800f542:	af00      	add	r7, sp, #0
 800f544:	60f8      	str	r0, [r7, #12]
 800f546:	60b9      	str	r1, [r7, #8]
 800f548:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	1c5a      	adds	r2, r3, #1
 800f552:	617a      	str	r2, [r7, #20]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	b2d2      	uxtb	r2, r2
 800f558:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3b01      	subs	r3, #1
 800f55e:	607b      	str	r3, [r7, #4]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d1f3      	bne.n	800f54e <mem_set+0x10>
}
 800f566:	bf00      	nop
 800f568:	371c      	adds	r7, #28
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f572:	b480      	push	{r7}
 800f574:	b089      	sub	sp, #36	; 0x24
 800f576:	af00      	add	r7, sp, #0
 800f578:	60f8      	str	r0, [r7, #12]
 800f57a:	60b9      	str	r1, [r7, #8]
 800f57c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	61fb      	str	r3, [r7, #28]
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	1c5a      	adds	r2, r3, #1
 800f58e:	61fa      	str	r2, [r7, #28]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	4619      	mov	r1, r3
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	1c5a      	adds	r2, r3, #1
 800f598:	61ba      	str	r2, [r7, #24]
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	1acb      	subs	r3, r1, r3
 800f59e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	607b      	str	r3, [r7, #4]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <mem_cmp+0x40>
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d0eb      	beq.n	800f58a <mem_cmp+0x18>

	return r;
 800f5b2:	697b      	ldr	r3, [r7, #20]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3724      	adds	r7, #36	; 0x24
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f5ca:	e002      	b.n	800f5d2 <chk_chr+0x12>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	607b      	str	r3, [r7, #4]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d005      	beq.n	800f5e6 <chk_chr+0x26>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	461a      	mov	r2, r3
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d1f2      	bne.n	800f5cc <chk_chr+0xc>
	return *str;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	781b      	ldrb	r3, [r3, #0]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	370c      	adds	r7, #12
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr

0800f5f6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d009      	beq.n	800f618 <lock_fs+0x22>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	4618      	mov	r0, r3
 800f60a:	f002 fd8d 	bl	8012128 <ff_req_grant>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <lock_fs+0x22>
 800f614:	2301      	movs	r3, #1
 800f616:	e000      	b.n	800f61a <lock_fs+0x24>
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b082      	sub	sp, #8
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	460b      	mov	r3, r1
 800f62c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d00d      	beq.n	800f650 <unlock_fs+0x2e>
 800f634:	78fb      	ldrb	r3, [r7, #3]
 800f636:	2b0c      	cmp	r3, #12
 800f638:	d00a      	beq.n	800f650 <unlock_fs+0x2e>
 800f63a:	78fb      	ldrb	r3, [r7, #3]
 800f63c:	2b0b      	cmp	r3, #11
 800f63e:	d007      	beq.n	800f650 <unlock_fs+0x2e>
 800f640:	78fb      	ldrb	r3, [r7, #3]
 800f642:	2b0f      	cmp	r3, #15
 800f644:	d004      	beq.n	800f650 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f002 fd81 	bl	8012152 <ff_rel_grant>
	}
}
 800f650:	bf00      	nop
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f662:	2300      	movs	r3, #0
 800f664:	60bb      	str	r3, [r7, #8]
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	60fb      	str	r3, [r7, #12]
 800f66a:	e029      	b.n	800f6c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f66c:	4a27      	ldr	r2, [pc, #156]	; (800f70c <chk_lock+0xb4>)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	011b      	lsls	r3, r3, #4
 800f672:	4413      	add	r3, r2
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d01d      	beq.n	800f6b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f67a:	4a24      	ldr	r2, [pc, #144]	; (800f70c <chk_lock+0xb4>)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	011b      	lsls	r3, r3, #4
 800f680:	4413      	add	r3, r2
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d116      	bne.n	800f6ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f68c:	4a1f      	ldr	r2, [pc, #124]	; (800f70c <chk_lock+0xb4>)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	011b      	lsls	r3, r3, #4
 800f692:	4413      	add	r3, r2
 800f694:	3304      	adds	r3, #4
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d10c      	bne.n	800f6ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f6a0:	4a1a      	ldr	r2, [pc, #104]	; (800f70c <chk_lock+0xb4>)
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	011b      	lsls	r3, r3, #4
 800f6a6:	4413      	add	r3, r2
 800f6a8:	3308      	adds	r3, #8
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d102      	bne.n	800f6ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f6b4:	e007      	b.n	800f6c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d9d2      	bls.n	800f66c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d109      	bne.n	800f6e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d102      	bne.n	800f6d8 <chk_lock+0x80>
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d101      	bne.n	800f6dc <chk_lock+0x84>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e010      	b.n	800f6fe <chk_lock+0xa6>
 800f6dc:	2312      	movs	r3, #18
 800f6de:	e00e      	b.n	800f6fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d108      	bne.n	800f6f8 <chk_lock+0xa0>
 800f6e6:	4a09      	ldr	r2, [pc, #36]	; (800f70c <chk_lock+0xb4>)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	4413      	add	r3, r2
 800f6ee:	330c      	adds	r3, #12
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6f6:	d101      	bne.n	800f6fc <chk_lock+0xa4>
 800f6f8:	2310      	movs	r3, #16
 800f6fa:	e000      	b.n	800f6fe <chk_lock+0xa6>
 800f6fc:	2300      	movs	r3, #0
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	20000338 	.word	0x20000338

0800f710 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f716:	2300      	movs	r3, #0
 800f718:	607b      	str	r3, [r7, #4]
 800f71a:	e002      	b.n	800f722 <enq_lock+0x12>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3301      	adds	r3, #1
 800f720:	607b      	str	r3, [r7, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d806      	bhi.n	800f736 <enq_lock+0x26>
 800f728:	4a09      	ldr	r2, [pc, #36]	; (800f750 <enq_lock+0x40>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	011b      	lsls	r3, r3, #4
 800f72e:	4413      	add	r3, r2
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1f2      	bne.n	800f71c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2b02      	cmp	r3, #2
 800f73a:	bf14      	ite	ne
 800f73c:	2301      	movne	r3, #1
 800f73e:	2300      	moveq	r3, #0
 800f740:	b2db      	uxtb	r3, r3
}
 800f742:	4618      	mov	r0, r3
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	20000338 	.word	0x20000338

0800f754 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f75e:	2300      	movs	r3, #0
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	e01f      	b.n	800f7a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f764:	4a41      	ldr	r2, [pc, #260]	; (800f86c <inc_lock+0x118>)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	011b      	lsls	r3, r3, #4
 800f76a:	4413      	add	r3, r2
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	429a      	cmp	r2, r3
 800f774:	d113      	bne.n	800f79e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f776:	4a3d      	ldr	r2, [pc, #244]	; (800f86c <inc_lock+0x118>)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	011b      	lsls	r3, r3, #4
 800f77c:	4413      	add	r3, r2
 800f77e:	3304      	adds	r3, #4
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f786:	429a      	cmp	r2, r3
 800f788:	d109      	bne.n	800f79e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f78a:	4a38      	ldr	r2, [pc, #224]	; (800f86c <inc_lock+0x118>)
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	011b      	lsls	r3, r3, #4
 800f790:	4413      	add	r3, r2
 800f792:	3308      	adds	r3, #8
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d006      	beq.n	800f7ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	60fb      	str	r3, [r7, #12]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d9dc      	bls.n	800f764 <inc_lock+0x10>
 800f7aa:	e000      	b.n	800f7ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f7ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d132      	bne.n	800f81a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	60fb      	str	r3, [r7, #12]
 800f7b8:	e002      	b.n	800f7c0 <inc_lock+0x6c>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d806      	bhi.n	800f7d4 <inc_lock+0x80>
 800f7c6:	4a29      	ldr	r2, [pc, #164]	; (800f86c <inc_lock+0x118>)
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	011b      	lsls	r3, r3, #4
 800f7cc:	4413      	add	r3, r2
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1f2      	bne.n	800f7ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d101      	bne.n	800f7de <inc_lock+0x8a>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e040      	b.n	800f860 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	4922      	ldr	r1, [pc, #136]	; (800f86c <inc_lock+0x118>)
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	011b      	lsls	r3, r3, #4
 800f7e8:	440b      	add	r3, r1
 800f7ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	689a      	ldr	r2, [r3, #8]
 800f7f0:	491e      	ldr	r1, [pc, #120]	; (800f86c <inc_lock+0x118>)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	440b      	add	r3, r1
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	695a      	ldr	r2, [r3, #20]
 800f800:	491a      	ldr	r1, [pc, #104]	; (800f86c <inc_lock+0x118>)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	440b      	add	r3, r1
 800f808:	3308      	adds	r3, #8
 800f80a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f80c:	4a17      	ldr	r2, [pc, #92]	; (800f86c <inc_lock+0x118>)
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	011b      	lsls	r3, r3, #4
 800f812:	4413      	add	r3, r2
 800f814:	330c      	adds	r3, #12
 800f816:	2200      	movs	r2, #0
 800f818:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d009      	beq.n	800f834 <inc_lock+0xe0>
 800f820:	4a12      	ldr	r2, [pc, #72]	; (800f86c <inc_lock+0x118>)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	011b      	lsls	r3, r3, #4
 800f826:	4413      	add	r3, r2
 800f828:	330c      	adds	r3, #12
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <inc_lock+0xe0>
 800f830:	2300      	movs	r3, #0
 800f832:	e015      	b.n	800f860 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d108      	bne.n	800f84c <inc_lock+0xf8>
 800f83a:	4a0c      	ldr	r2, [pc, #48]	; (800f86c <inc_lock+0x118>)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	4413      	add	r3, r2
 800f842:	330c      	adds	r3, #12
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	3301      	adds	r3, #1
 800f848:	b29a      	uxth	r2, r3
 800f84a:	e001      	b.n	800f850 <inc_lock+0xfc>
 800f84c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f850:	4906      	ldr	r1, [pc, #24]	; (800f86c <inc_lock+0x118>)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	011b      	lsls	r3, r3, #4
 800f856:	440b      	add	r3, r1
 800f858:	330c      	adds	r3, #12
 800f85a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3301      	adds	r3, #1
}
 800f860:	4618      	mov	r0, r3
 800f862:	3714      	adds	r7, #20
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	20000338 	.word	0x20000338

0800f870 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	607b      	str	r3, [r7, #4]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b01      	cmp	r3, #1
 800f882:	d825      	bhi.n	800f8d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800f884:	4a17      	ldr	r2, [pc, #92]	; (800f8e4 <dec_lock+0x74>)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	011b      	lsls	r3, r3, #4
 800f88a:	4413      	add	r3, r2
 800f88c:	330c      	adds	r3, #12
 800f88e:	881b      	ldrh	r3, [r3, #0]
 800f890:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f892:	89fb      	ldrh	r3, [r7, #14]
 800f894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f898:	d101      	bne.n	800f89e <dec_lock+0x2e>
 800f89a:	2300      	movs	r3, #0
 800f89c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f89e:	89fb      	ldrh	r3, [r7, #14]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d002      	beq.n	800f8aa <dec_lock+0x3a>
 800f8a4:	89fb      	ldrh	r3, [r7, #14]
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f8aa:	4a0e      	ldr	r2, [pc, #56]	; (800f8e4 <dec_lock+0x74>)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	011b      	lsls	r3, r3, #4
 800f8b0:	4413      	add	r3, r2
 800f8b2:	330c      	adds	r3, #12
 800f8b4:	89fa      	ldrh	r2, [r7, #14]
 800f8b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f8b8:	89fb      	ldrh	r3, [r7, #14]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d105      	bne.n	800f8ca <dec_lock+0x5a>
 800f8be:	4a09      	ldr	r2, [pc, #36]	; (800f8e4 <dec_lock+0x74>)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	011b      	lsls	r3, r3, #4
 800f8c4:	4413      	add	r3, r2
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	737b      	strb	r3, [r7, #13]
 800f8ce:	e001      	b.n	800f8d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f8d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3714      	adds	r7, #20
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	20000338 	.word	0x20000338

0800f8e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	60fb      	str	r3, [r7, #12]
 800f8f4:	e010      	b.n	800f918 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f8f6:	4a0d      	ldr	r2, [pc, #52]	; (800f92c <clear_lock+0x44>)
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	011b      	lsls	r3, r3, #4
 800f8fc:	4413      	add	r3, r2
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	429a      	cmp	r2, r3
 800f904:	d105      	bne.n	800f912 <clear_lock+0x2a>
 800f906:	4a09      	ldr	r2, [pc, #36]	; (800f92c <clear_lock+0x44>)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	011b      	lsls	r3, r3, #4
 800f90c:	4413      	add	r3, r2
 800f90e:	2200      	movs	r2, #0
 800f910:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3301      	adds	r3, #1
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d9eb      	bls.n	800f8f6 <clear_lock+0xe>
	}
}
 800f91e:	bf00      	nop
 800f920:	3714      	adds	r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	20000338 	.word	0x20000338

0800f930 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	78db      	ldrb	r3, [r3, #3]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d034      	beq.n	800f9ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f948:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	7858      	ldrb	r0, [r3, #1]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f954:	2301      	movs	r3, #1
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	f7ff fd10 	bl	800f37c <disk_write>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d002      	beq.n	800f968 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f962:	2301      	movs	r3, #1
 800f964:	73fb      	strb	r3, [r7, #15]
 800f966:	e022      	b.n	800f9ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f972:	697a      	ldr	r2, [r7, #20]
 800f974:	1ad2      	subs	r2, r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	69db      	ldr	r3, [r3, #28]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d217      	bcs.n	800f9ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	789b      	ldrb	r3, [r3, #2]
 800f982:	613b      	str	r3, [r7, #16]
 800f984:	e010      	b.n	800f9a8 <sync_window+0x78>
					wsect += fs->fsize;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	69db      	ldr	r3, [r3, #28]
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	4413      	add	r3, r2
 800f98e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	7858      	ldrb	r0, [r3, #1]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f99a:	2301      	movs	r3, #1
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	f7ff fced 	bl	800f37c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	613b      	str	r3, [r7, #16]
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d8eb      	bhi.n	800f986 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3718      	adds	r7, #24
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ca:	683a      	ldr	r2, [r7, #0]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d01b      	beq.n	800fa08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff ffad 	bl	800f930 <sync_window>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f9da:	7bfb      	ldrb	r3, [r7, #15]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d113      	bne.n	800fa08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7858      	ldrb	r0, [r3, #1]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	683a      	ldr	r2, [r7, #0]
 800f9ee:	f7ff fca5 	bl	800f33c <disk_read>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d004      	beq.n	800fa02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	683a      	ldr	r2, [r7, #0]
 800fa06:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
	...

0800fa14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f7ff ff87 	bl	800f930 <sync_window>
 800fa22:	4603      	mov	r3, r0
 800fa24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d158      	bne.n	800fade <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	2b03      	cmp	r3, #3
 800fa32:	d148      	bne.n	800fac6 <sync_fs+0xb2>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	791b      	ldrb	r3, [r3, #4]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d144      	bne.n	800fac6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3334      	adds	r3, #52	; 0x34
 800fa40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa44:	2100      	movs	r1, #0
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7ff fd79 	bl	800f53e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	3334      	adds	r3, #52	; 0x34
 800fa50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa54:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff fd08 	bl	800f46e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	3334      	adds	r3, #52	; 0x34
 800fa62:	4921      	ldr	r1, [pc, #132]	; (800fae8 <sync_fs+0xd4>)
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff fd1d 	bl	800f4a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3334      	adds	r3, #52	; 0x34
 800fa6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fa72:	491e      	ldr	r1, [pc, #120]	; (800faec <sync_fs+0xd8>)
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff fd15 	bl	800f4a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3334      	adds	r3, #52	; 0x34
 800fa7e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7ff fd0b 	bl	800f4a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	3334      	adds	r3, #52	; 0x34
 800fa92:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	f7ff fd01 	bl	800f4a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6a1b      	ldr	r3, [r3, #32]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	7858      	ldrb	r0, [r3, #1]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800faba:	2301      	movs	r3, #1
 800fabc:	f7ff fc5e 	bl	800f37c <disk_write>
			fs->fsi_flag = 0;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	785b      	ldrb	r3, [r3, #1]
 800faca:	2200      	movs	r2, #0
 800facc:	2100      	movs	r1, #0
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff fc74 	bl	800f3bc <disk_ioctl>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <sync_fs+0xca>
 800fada:	2301      	movs	r3, #1
 800fadc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fade:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	41615252 	.word	0x41615252
 800faec:	61417272 	.word	0x61417272

0800faf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	3b02      	subs	r3, #2
 800fafe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	699b      	ldr	r3, [r3, #24]
 800fb04:	3b02      	subs	r3, #2
 800fb06:	683a      	ldr	r2, [r7, #0]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d301      	bcc.n	800fb10 <clust2sect+0x20>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	e008      	b.n	800fb22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	895b      	ldrh	r3, [r3, #10]
 800fb14:	461a      	mov	r2, r3
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	fb03 f202 	mul.w	r2, r3, r2
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb20:	4413      	add	r3, r2
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	370c      	adds	r7, #12
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b086      	sub	sp, #24
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d904      	bls.n	800fb4e <get_fat+0x20>
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	683a      	ldr	r2, [r7, #0]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d302      	bcc.n	800fb54 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fb4e:	2301      	movs	r3, #1
 800fb50:	617b      	str	r3, [r7, #20]
 800fb52:	e08c      	b.n	800fc6e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fb54:	f04f 33ff 	mov.w	r3, #4294967295
 800fb58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	d045      	beq.n	800fbee <get_fat+0xc0>
 800fb62:	2b03      	cmp	r3, #3
 800fb64:	d05d      	beq.n	800fc22 <get_fat+0xf4>
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d177      	bne.n	800fc5a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	60fb      	str	r3, [r7, #12]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	085b      	lsrs	r3, r3, #1
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	4413      	add	r3, r2
 800fb76:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	0a5b      	lsrs	r3, r3, #9
 800fb80:	4413      	add	r3, r2
 800fb82:	4619      	mov	r1, r3
 800fb84:	6938      	ldr	r0, [r7, #16]
 800fb86:	f7ff ff17 	bl	800f9b8 <move_window>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d167      	bne.n	800fc60 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	1c5a      	adds	r2, r3, #1
 800fb94:	60fa      	str	r2, [r7, #12]
 800fb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fba2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	0a5b      	lsrs	r3, r3, #9
 800fbac:	4413      	add	r3, r2
 800fbae:	4619      	mov	r1, r3
 800fbb0:	6938      	ldr	r0, [r7, #16]
 800fbb2:	f7ff ff01 	bl	800f9b8 <move_window>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d153      	bne.n	800fc64 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbc2:	693a      	ldr	r2, [r7, #16]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbca:	021b      	lsls	r3, r3, #8
 800fbcc:	461a      	mov	r2, r3
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d002      	beq.n	800fbe4 <get_fat+0xb6>
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	091b      	lsrs	r3, r3, #4
 800fbe2:	e002      	b.n	800fbea <get_fat+0xbc>
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbea:	617b      	str	r3, [r7, #20]
			break;
 800fbec:	e03f      	b.n	800fc6e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	0a1b      	lsrs	r3, r3, #8
 800fbf6:	4413      	add	r3, r2
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	6938      	ldr	r0, [r7, #16]
 800fbfc:	f7ff fedc 	bl	800f9b8 <move_window>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d130      	bne.n	800fc68 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	005b      	lsls	r3, r3, #1
 800fc10:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fc14:	4413      	add	r3, r2
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fbee 	bl	800f3f8 <ld_word>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	617b      	str	r3, [r7, #20]
			break;
 800fc20:	e025      	b.n	800fc6e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	09db      	lsrs	r3, r3, #7
 800fc2a:	4413      	add	r3, r2
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	6938      	ldr	r0, [r7, #16]
 800fc30:	f7ff fec2 	bl	800f9b8 <move_window>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d118      	bne.n	800fc6c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fc48:	4413      	add	r3, r2
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff fbec 	bl	800f428 <ld_dword>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fc56:	617b      	str	r3, [r7, #20]
			break;
 800fc58:	e009      	b.n	800fc6e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	617b      	str	r3, [r7, #20]
 800fc5e:	e006      	b.n	800fc6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc60:	bf00      	nop
 800fc62:	e004      	b.n	800fc6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc64:	bf00      	nop
 800fc66:	e002      	b.n	800fc6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc68:	bf00      	nop
 800fc6a:	e000      	b.n	800fc6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc6c:	bf00      	nop
		}
	}

	return val;
 800fc6e:	697b      	ldr	r3, [r7, #20]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3718      	adds	r7, #24
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fc78:	b590      	push	{r4, r7, lr}
 800fc7a:	b089      	sub	sp, #36	; 0x24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fc84:	2302      	movs	r3, #2
 800fc86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	f240 80d6 	bls.w	800fe3c <put_fat+0x1c4>
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	699b      	ldr	r3, [r3, #24]
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	f080 80d0 	bcs.w	800fe3c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	2b02      	cmp	r3, #2
 800fca2:	d073      	beq.n	800fd8c <put_fat+0x114>
 800fca4:	2b03      	cmp	r3, #3
 800fca6:	f000 8091 	beq.w	800fdcc <put_fat+0x154>
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	f040 80c6 	bne.w	800fe3c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	61bb      	str	r3, [r7, #24]
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	085b      	lsrs	r3, r3, #1
 800fcb8:	69ba      	ldr	r2, [r7, #24]
 800fcba:	4413      	add	r3, r2
 800fcbc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	0a5b      	lsrs	r3, r3, #9
 800fcc6:	4413      	add	r3, r2
 800fcc8:	4619      	mov	r1, r3
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f7ff fe74 	bl	800f9b8 <move_window>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fcd4:	7ffb      	ldrb	r3, [r7, #31]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f040 80a9 	bne.w	800fe2e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	1c59      	adds	r1, r3, #1
 800fce6:	61b9      	str	r1, [r7, #24]
 800fce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcec:	4413      	add	r3, r2
 800fcee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00d      	beq.n	800fd16 <put_fat+0x9e>
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	b25b      	sxtb	r3, r3
 800fd00:	f003 030f 	and.w	r3, r3, #15
 800fd04:	b25a      	sxtb	r2, r3
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	011b      	lsls	r3, r3, #4
 800fd0c:	b25b      	sxtb	r3, r3
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	b25b      	sxtb	r3, r3
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	e001      	b.n	800fd1a <put_fat+0xa2>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	697a      	ldr	r2, [r7, #20]
 800fd1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2201      	movs	r2, #1
 800fd22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	0a5b      	lsrs	r3, r3, #9
 800fd2c:	4413      	add	r3, r2
 800fd2e:	4619      	mov	r1, r3
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f7ff fe41 	bl	800f9b8 <move_window>
 800fd36:	4603      	mov	r3, r0
 800fd38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd3a:	7ffb      	ldrb	r3, [r7, #31]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d178      	bne.n	800fe32 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd4c:	4413      	add	r3, r2
 800fd4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f003 0301 	and.w	r3, r3, #1
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d003      	beq.n	800fd62 <put_fat+0xea>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	091b      	lsrs	r3, r3, #4
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	e00e      	b.n	800fd80 <put_fat+0x108>
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	b25b      	sxtb	r3, r3
 800fd68:	f023 030f 	bic.w	r3, r3, #15
 800fd6c:	b25a      	sxtb	r2, r3
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	0a1b      	lsrs	r3, r3, #8
 800fd72:	b25b      	sxtb	r3, r3
 800fd74:	f003 030f 	and.w	r3, r3, #15
 800fd78:	b25b      	sxtb	r3, r3
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	b25b      	sxtb	r3, r3
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	697a      	ldr	r2, [r7, #20]
 800fd82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2201      	movs	r2, #1
 800fd88:	70da      	strb	r2, [r3, #3]
			break;
 800fd8a:	e057      	b.n	800fe3c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	0a1b      	lsrs	r3, r3, #8
 800fd94:	4413      	add	r3, r2
 800fd96:	4619      	mov	r1, r3
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f7ff fe0d 	bl	800f9b8 <move_window>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fda2:	7ffb      	ldrb	r3, [r7, #31]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d146      	bne.n	800fe36 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fdb6:	4413      	add	r3, r2
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	b292      	uxth	r2, r2
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff fb55 	bl	800f46e <st_word>
			fs->wflag = 1;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	70da      	strb	r2, [r3, #3]
			break;
 800fdca:	e037      	b.n	800fe3c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	09db      	lsrs	r3, r3, #7
 800fdd4:	4413      	add	r3, r2
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f7ff fded 	bl	800f9b8 <move_window>
 800fdde:	4603      	mov	r3, r0
 800fde0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fde2:	7ffb      	ldrb	r3, [r7, #31]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d128      	bne.n	800fe3a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fdfc:	4413      	add	r3, r2
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7ff fb12 	bl	800f428 <ld_dword>
 800fe04:	4603      	mov	r3, r0
 800fe06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fe0a:	4323      	orrs	r3, r4
 800fe0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fe1c:	4413      	add	r3, r2
 800fe1e:	6879      	ldr	r1, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7ff fb3f 	bl	800f4a4 <st_dword>
			fs->wflag = 1;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	70da      	strb	r2, [r3, #3]
			break;
 800fe2c:	e006      	b.n	800fe3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800fe2e:	bf00      	nop
 800fe30:	e004      	b.n	800fe3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800fe32:	bf00      	nop
 800fe34:	e002      	b.n	800fe3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800fe36:	bf00      	nop
 800fe38:	e000      	b.n	800fe3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800fe3a:	bf00      	nop
		}
	}
	return res;
 800fe3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3724      	adds	r7, #36	; 0x24
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd90      	pop	{r4, r7, pc}

0800fe46 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b088      	sub	sp, #32
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	60f8      	str	r0, [r7, #12]
 800fe4e:	60b9      	str	r1, [r7, #8]
 800fe50:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d904      	bls.n	800fe6c <remove_chain+0x26>
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	699b      	ldr	r3, [r3, #24]
 800fe66:	68ba      	ldr	r2, [r7, #8]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d301      	bcc.n	800fe70 <remove_chain+0x2a>
 800fe6c:	2302      	movs	r3, #2
 800fe6e:	e04b      	b.n	800ff08 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00c      	beq.n	800fe90 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fe76:	f04f 32ff 	mov.w	r2, #4294967295
 800fe7a:	6879      	ldr	r1, [r7, #4]
 800fe7c:	69b8      	ldr	r0, [r7, #24]
 800fe7e:	f7ff fefb 	bl	800fc78 <put_fat>
 800fe82:	4603      	mov	r3, r0
 800fe84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fe86:	7ffb      	ldrb	r3, [r7, #31]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d001      	beq.n	800fe90 <remove_chain+0x4a>
 800fe8c:	7ffb      	ldrb	r3, [r7, #31]
 800fe8e:	e03b      	b.n	800ff08 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fe90:	68b9      	ldr	r1, [r7, #8]
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f7ff fe4b 	bl	800fb2e <get_fat>
 800fe98:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d031      	beq.n	800ff04 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d101      	bne.n	800feaa <remove_chain+0x64>
 800fea6:	2302      	movs	r3, #2
 800fea8:	e02e      	b.n	800ff08 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb0:	d101      	bne.n	800feb6 <remove_chain+0x70>
 800feb2:	2301      	movs	r3, #1
 800feb4:	e028      	b.n	800ff08 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800feb6:	2200      	movs	r2, #0
 800feb8:	68b9      	ldr	r1, [r7, #8]
 800feba:	69b8      	ldr	r0, [r7, #24]
 800febc:	f7ff fedc 	bl	800fc78 <put_fat>
 800fec0:	4603      	mov	r3, r0
 800fec2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fec4:	7ffb      	ldrb	r3, [r7, #31]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d001      	beq.n	800fece <remove_chain+0x88>
 800feca:	7ffb      	ldrb	r3, [r7, #31]
 800fecc:	e01c      	b.n	800ff08 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	695a      	ldr	r2, [r3, #20]
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	699b      	ldr	r3, [r3, #24]
 800fed6:	3b02      	subs	r3, #2
 800fed8:	429a      	cmp	r2, r3
 800feda:	d20b      	bcs.n	800fef4 <remove_chain+0xae>
			fs->free_clst++;
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	695b      	ldr	r3, [r3, #20]
 800fee0:	1c5a      	adds	r2, r3, #1
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	791b      	ldrb	r3, [r3, #4]
 800feea:	f043 0301 	orr.w	r3, r3, #1
 800feee:	b2da      	uxtb	r2, r3
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	699b      	ldr	r3, [r3, #24]
 800fefc:	68ba      	ldr	r2, [r7, #8]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d3c6      	bcc.n	800fe90 <remove_chain+0x4a>
 800ff02:	e000      	b.n	800ff06 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ff04:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ff06:	2300      	movs	r3, #0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3720      	adds	r7, #32
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b088      	sub	sp, #32
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d10d      	bne.n	800ff42 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	691b      	ldr	r3, [r3, #16]
 800ff2a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d004      	beq.n	800ff3c <create_chain+0x2c>
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d31b      	bcc.n	800ff74 <create_chain+0x64>
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	61bb      	str	r3, [r7, #24]
 800ff40:	e018      	b.n	800ff74 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ff42:	6839      	ldr	r1, [r7, #0]
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff fdf2 	bl	800fb2e <get_fat>
 800ff4a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d801      	bhi.n	800ff56 <create_chain+0x46>
 800ff52:	2301      	movs	r3, #1
 800ff54:	e070      	b.n	8010038 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff5c:	d101      	bne.n	800ff62 <create_chain+0x52>
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	e06a      	b.n	8010038 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	699b      	ldr	r3, [r3, #24]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d201      	bcs.n	800ff70 <create_chain+0x60>
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	e063      	b.n	8010038 <create_chain+0x128>
		scl = clst;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	699b      	ldr	r3, [r3, #24]
 800ff82:	69fa      	ldr	r2, [r7, #28]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d307      	bcc.n	800ff98 <create_chain+0x88>
				ncl = 2;
 800ff88:	2302      	movs	r3, #2
 800ff8a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ff8c:	69fa      	ldr	r2, [r7, #28]
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d901      	bls.n	800ff98 <create_chain+0x88>
 800ff94:	2300      	movs	r3, #0
 800ff96:	e04f      	b.n	8010038 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ff98:	69f9      	ldr	r1, [r7, #28]
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7ff fdc7 	bl	800fb2e <get_fat>
 800ffa0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00e      	beq.n	800ffc6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	d003      	beq.n	800ffb6 <create_chain+0xa6>
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffb4:	d101      	bne.n	800ffba <create_chain+0xaa>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	e03e      	b.n	8010038 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ffba:	69fa      	ldr	r2, [r7, #28]
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d1da      	bne.n	800ff78 <create_chain+0x68>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	e038      	b.n	8010038 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ffc6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ffc8:	f04f 32ff 	mov.w	r2, #4294967295
 800ffcc:	69f9      	ldr	r1, [r7, #28]
 800ffce:	6938      	ldr	r0, [r7, #16]
 800ffd0:	f7ff fe52 	bl	800fc78 <put_fat>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d109      	bne.n	800fff2 <create_chain+0xe2>
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d006      	beq.n	800fff2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ffe4:	69fa      	ldr	r2, [r7, #28]
 800ffe6:	6839      	ldr	r1, [r7, #0]
 800ffe8:	6938      	ldr	r0, [r7, #16]
 800ffea:	f7ff fe45 	bl	800fc78 <put_fat>
 800ffee:	4603      	mov	r3, r0
 800fff0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fff2:	7dfb      	ldrb	r3, [r7, #23]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d116      	bne.n	8010026 <create_chain+0x116>
		fs->last_clst = ncl;
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	69fa      	ldr	r2, [r7, #28]
 800fffc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	695a      	ldr	r2, [r3, #20]
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	699b      	ldr	r3, [r3, #24]
 8010006:	3b02      	subs	r3, #2
 8010008:	429a      	cmp	r2, r3
 801000a:	d804      	bhi.n	8010016 <create_chain+0x106>
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	695b      	ldr	r3, [r3, #20]
 8010010:	1e5a      	subs	r2, r3, #1
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	791b      	ldrb	r3, [r3, #4]
 801001a:	f043 0301 	orr.w	r3, r3, #1
 801001e:	b2da      	uxtb	r2, r3
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	711a      	strb	r2, [r3, #4]
 8010024:	e007      	b.n	8010036 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010026:	7dfb      	ldrb	r3, [r7, #23]
 8010028:	2b01      	cmp	r3, #1
 801002a:	d102      	bne.n	8010032 <create_chain+0x122>
 801002c:	f04f 33ff 	mov.w	r3, #4294967295
 8010030:	e000      	b.n	8010034 <create_chain+0x124>
 8010032:	2301      	movs	r3, #1
 8010034:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010036:	69fb      	ldr	r3, [r7, #28]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3720      	adds	r7, #32
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010040:	b480      	push	{r7}
 8010042:	b087      	sub	sp, #28
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010054:	3304      	adds	r3, #4
 8010056:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	0a5b      	lsrs	r3, r3, #9
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	8952      	ldrh	r2, [r2, #10]
 8010060:	fbb3 f3f2 	udiv	r3, r3, r2
 8010064:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	1d1a      	adds	r2, r3, #4
 801006a:	613a      	str	r2, [r7, #16]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d101      	bne.n	801007a <clmt_clust+0x3a>
 8010076:	2300      	movs	r3, #0
 8010078:	e010      	b.n	801009c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801007a:	697a      	ldr	r2, [r7, #20]
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	429a      	cmp	r2, r3
 8010080:	d307      	bcc.n	8010092 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010082:	697a      	ldr	r2, [r7, #20]
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	3304      	adds	r3, #4
 801008e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010090:	e7e9      	b.n	8010066 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010092:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	4413      	add	r3, r2
}
 801009c:	4618      	mov	r0, r3
 801009e:	371c      	adds	r7, #28
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b086      	sub	sp, #24
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80100be:	d204      	bcs.n	80100ca <dir_sdi+0x22>
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	f003 031f 	and.w	r3, r3, #31
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d001      	beq.n	80100ce <dir_sdi+0x26>
		return FR_INT_ERR;
 80100ca:	2302      	movs	r3, #2
 80100cc:	e063      	b.n	8010196 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	683a      	ldr	r2, [r7, #0]
 80100d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d106      	bne.n	80100ee <dir_sdi+0x46>
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d902      	bls.n	80100ee <dir_sdi+0x46>
		clst = fs->dirbase;
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d10c      	bne.n	801010e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	095b      	lsrs	r3, r3, #5
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	8912      	ldrh	r2, [r2, #8]
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d301      	bcc.n	8010104 <dir_sdi+0x5c>
 8010100:	2302      	movs	r3, #2
 8010102:	e048      	b.n	8010196 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	61da      	str	r2, [r3, #28]
 801010c:	e029      	b.n	8010162 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	895b      	ldrh	r3, [r3, #10]
 8010112:	025b      	lsls	r3, r3, #9
 8010114:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010116:	e019      	b.n	801014c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6979      	ldr	r1, [r7, #20]
 801011c:	4618      	mov	r0, r3
 801011e:	f7ff fd06 	bl	800fb2e <get_fat>
 8010122:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801012a:	d101      	bne.n	8010130 <dir_sdi+0x88>
 801012c:	2301      	movs	r3, #1
 801012e:	e032      	b.n	8010196 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	2b01      	cmp	r3, #1
 8010134:	d904      	bls.n	8010140 <dir_sdi+0x98>
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	699b      	ldr	r3, [r3, #24]
 801013a:	697a      	ldr	r2, [r7, #20]
 801013c:	429a      	cmp	r2, r3
 801013e:	d301      	bcc.n	8010144 <dir_sdi+0x9c>
 8010140:	2302      	movs	r3, #2
 8010142:	e028      	b.n	8010196 <dir_sdi+0xee>
			ofs -= csz;
 8010144:	683a      	ldr	r2, [r7, #0]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801014c:	683a      	ldr	r2, [r7, #0]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	429a      	cmp	r2, r3
 8010152:	d2e1      	bcs.n	8010118 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010154:	6979      	ldr	r1, [r7, #20]
 8010156:	6938      	ldr	r0, [r7, #16]
 8010158:	f7ff fcca 	bl	800faf0 <clust2sect>
 801015c:	4602      	mov	r2, r0
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	697a      	ldr	r2, [r7, #20]
 8010166:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	69db      	ldr	r3, [r3, #28]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d101      	bne.n	8010174 <dir_sdi+0xcc>
 8010170:	2302      	movs	r3, #2
 8010172:	e010      	b.n	8010196 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	69da      	ldr	r2, [r3, #28]
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	0a5b      	lsrs	r3, r3, #9
 801017c:	441a      	add	r2, r3
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801018e:	441a      	add	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010194:	2300      	movs	r3, #0
}
 8010196:	4618      	mov	r0, r3
 8010198:	3718      	adds	r7, #24
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b086      	sub	sp, #24
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	695b      	ldr	r3, [r3, #20]
 80101b2:	3320      	adds	r3, #32
 80101b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	69db      	ldr	r3, [r3, #28]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d003      	beq.n	80101c6 <dir_next+0x28>
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101c4:	d301      	bcc.n	80101ca <dir_next+0x2c>
 80101c6:	2304      	movs	r3, #4
 80101c8:	e0aa      	b.n	8010320 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f040 8098 	bne.w	8010306 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	69db      	ldr	r3, [r3, #28]
 80101da:	1c5a      	adds	r2, r3, #1
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	699b      	ldr	r3, [r3, #24]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d10b      	bne.n	8010200 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	095b      	lsrs	r3, r3, #5
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	8912      	ldrh	r2, [r2, #8]
 80101f0:	4293      	cmp	r3, r2
 80101f2:	f0c0 8088 	bcc.w	8010306 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	61da      	str	r2, [r3, #28]
 80101fc:	2304      	movs	r3, #4
 80101fe:	e08f      	b.n	8010320 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	0a5b      	lsrs	r3, r3, #9
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	8952      	ldrh	r2, [r2, #10]
 8010208:	3a01      	subs	r2, #1
 801020a:	4013      	ands	r3, r2
 801020c:	2b00      	cmp	r3, #0
 801020e:	d17a      	bne.n	8010306 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	699b      	ldr	r3, [r3, #24]
 8010216:	4619      	mov	r1, r3
 8010218:	4610      	mov	r0, r2
 801021a:	f7ff fc88 	bl	800fb2e <get_fat>
 801021e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	2b01      	cmp	r3, #1
 8010224:	d801      	bhi.n	801022a <dir_next+0x8c>
 8010226:	2302      	movs	r3, #2
 8010228:	e07a      	b.n	8010320 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010230:	d101      	bne.n	8010236 <dir_next+0x98>
 8010232:	2301      	movs	r3, #1
 8010234:	e074      	b.n	8010320 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	697a      	ldr	r2, [r7, #20]
 801023c:	429a      	cmp	r2, r3
 801023e:	d358      	bcc.n	80102f2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d104      	bne.n	8010250 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	61da      	str	r2, [r3, #28]
 801024c:	2304      	movs	r3, #4
 801024e:	e067      	b.n	8010320 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	699b      	ldr	r3, [r3, #24]
 8010256:	4619      	mov	r1, r3
 8010258:	4610      	mov	r0, r2
 801025a:	f7ff fe59 	bl	800ff10 <create_chain>
 801025e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d101      	bne.n	801026a <dir_next+0xcc>
 8010266:	2307      	movs	r3, #7
 8010268:	e05a      	b.n	8010320 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d101      	bne.n	8010274 <dir_next+0xd6>
 8010270:	2302      	movs	r3, #2
 8010272:	e055      	b.n	8010320 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801027a:	d101      	bne.n	8010280 <dir_next+0xe2>
 801027c:	2301      	movs	r3, #1
 801027e:	e04f      	b.n	8010320 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f7ff fb55 	bl	800f930 <sync_window>
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d001      	beq.n	8010290 <dir_next+0xf2>
 801028c:	2301      	movs	r3, #1
 801028e:	e047      	b.n	8010320 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	3334      	adds	r3, #52	; 0x34
 8010294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010298:	2100      	movs	r1, #0
 801029a:	4618      	mov	r0, r3
 801029c:	f7ff f94f 	bl	800f53e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102a0:	2300      	movs	r3, #0
 80102a2:	613b      	str	r3, [r7, #16]
 80102a4:	6979      	ldr	r1, [r7, #20]
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f7ff fc22 	bl	800faf0 <clust2sect>
 80102ac:	4602      	mov	r2, r0
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	631a      	str	r2, [r3, #48]	; 0x30
 80102b2:	e012      	b.n	80102da <dir_next+0x13c>
						fs->wflag = 1;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2201      	movs	r2, #1
 80102b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80102ba:	68f8      	ldr	r0, [r7, #12]
 80102bc:	f7ff fb38 	bl	800f930 <sync_window>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d001      	beq.n	80102ca <dir_next+0x12c>
 80102c6:	2301      	movs	r3, #1
 80102c8:	e02a      	b.n	8010320 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	3301      	adds	r3, #1
 80102ce:	613b      	str	r3, [r7, #16]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102d4:	1c5a      	adds	r2, r3, #1
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	631a      	str	r2, [r3, #48]	; 0x30
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	895b      	ldrh	r3, [r3, #10]
 80102de:	461a      	mov	r2, r3
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d3e6      	bcc.n	80102b4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	1ad2      	subs	r2, r2, r3
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	697a      	ldr	r2, [r7, #20]
 80102f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80102f8:	6979      	ldr	r1, [r7, #20]
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f7ff fbf8 	bl	800faf0 <clust2sect>
 8010300:	4602      	mov	r2, r0
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	68ba      	ldr	r2, [r7, #8]
 801030a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010318:	441a      	add	r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b086      	sub	sp, #24
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010338:	2100      	movs	r1, #0
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff feb4 	bl	80100a8 <dir_sdi>
 8010340:	4603      	mov	r3, r0
 8010342:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010344:	7dfb      	ldrb	r3, [r7, #23]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d12b      	bne.n	80103a2 <dir_alloc+0x7a>
		n = 0;
 801034a:	2300      	movs	r3, #0
 801034c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	69db      	ldr	r3, [r3, #28]
 8010352:	4619      	mov	r1, r3
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f7ff fb2f 	bl	800f9b8 <move_window>
 801035a:	4603      	mov	r3, r0
 801035c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801035e:	7dfb      	ldrb	r3, [r7, #23]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d11d      	bne.n	80103a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6a1b      	ldr	r3, [r3, #32]
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	2be5      	cmp	r3, #229	; 0xe5
 801036c:	d004      	beq.n	8010378 <dir_alloc+0x50>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d107      	bne.n	8010388 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	3301      	adds	r3, #1
 801037c:	613b      	str	r3, [r7, #16]
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	429a      	cmp	r2, r3
 8010384:	d102      	bne.n	801038c <dir_alloc+0x64>
 8010386:	e00c      	b.n	80103a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010388:	2300      	movs	r3, #0
 801038a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801038c:	2101      	movs	r1, #1
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff ff05 	bl	801019e <dir_next>
 8010394:	4603      	mov	r3, r0
 8010396:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010398:	7dfb      	ldrb	r3, [r7, #23]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d0d7      	beq.n	801034e <dir_alloc+0x26>
 801039e:	e000      	b.n	80103a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80103a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80103a2:	7dfb      	ldrb	r3, [r7, #23]
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d101      	bne.n	80103ac <dir_alloc+0x84>
 80103a8:	2307      	movs	r3, #7
 80103aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80103ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3718      	adds	r7, #24
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b084      	sub	sp, #16
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	331a      	adds	r3, #26
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7ff f817 	bl	800f3f8 <ld_word>
 80103ca:	4603      	mov	r3, r0
 80103cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	2b03      	cmp	r3, #3
 80103d4:	d109      	bne.n	80103ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	3314      	adds	r3, #20
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff f80c 	bl	800f3f8 <ld_word>
 80103e0:	4603      	mov	r3, r0
 80103e2:	041b      	lsls	r3, r3, #16
 80103e4:	68fa      	ldr	r2, [r7, #12]
 80103e6:	4313      	orrs	r3, r2
 80103e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80103ea:	68fb      	ldr	r3, [r7, #12]
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	331a      	adds	r3, #26
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	b292      	uxth	r2, r2
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff f82f 	bl	800f46e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	2b03      	cmp	r3, #3
 8010416:	d109      	bne.n	801042c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	f103 0214 	add.w	r2, r3, #20
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	0c1b      	lsrs	r3, r3, #16
 8010422:	b29b      	uxth	r3, r3
 8010424:	4619      	mov	r1, r3
 8010426:	4610      	mov	r0, r2
 8010428:	f7ff f821 	bl	800f46e <st_word>
	}
}
 801042c:	bf00      	nop
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801043e:	2304      	movs	r3, #4
 8010440:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010448:	e03c      	b.n	80104c4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	69db      	ldr	r3, [r3, #28]
 801044e:	4619      	mov	r1, r3
 8010450:	6938      	ldr	r0, [r7, #16]
 8010452:	f7ff fab1 	bl	800f9b8 <move_window>
 8010456:	4603      	mov	r3, r0
 8010458:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801045a:	7dfb      	ldrb	r3, [r7, #23]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d136      	bne.n	80104ce <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6a1b      	ldr	r3, [r3, #32]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010468:	7bfb      	ldrb	r3, [r7, #15]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d102      	bne.n	8010474 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801046e:	2304      	movs	r3, #4
 8010470:	75fb      	strb	r3, [r7, #23]
 8010472:	e031      	b.n	80104d8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6a1b      	ldr	r3, [r3, #32]
 8010478:	330b      	adds	r3, #11
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010480:	73bb      	strb	r3, [r7, #14]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	7bba      	ldrb	r2, [r7, #14]
 8010486:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010488:	7bfb      	ldrb	r3, [r7, #15]
 801048a:	2be5      	cmp	r3, #229	; 0xe5
 801048c:	d011      	beq.n	80104b2 <dir_read+0x7e>
 801048e:	7bfb      	ldrb	r3, [r7, #15]
 8010490:	2b2e      	cmp	r3, #46	; 0x2e
 8010492:	d00e      	beq.n	80104b2 <dir_read+0x7e>
 8010494:	7bbb      	ldrb	r3, [r7, #14]
 8010496:	2b0f      	cmp	r3, #15
 8010498:	d00b      	beq.n	80104b2 <dir_read+0x7e>
 801049a:	7bbb      	ldrb	r3, [r7, #14]
 801049c:	f023 0320 	bic.w	r3, r3, #32
 80104a0:	2b08      	cmp	r3, #8
 80104a2:	bf0c      	ite	eq
 80104a4:	2301      	moveq	r3, #1
 80104a6:	2300      	movne	r3, #0
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	461a      	mov	r2, r3
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d00f      	beq.n	80104d2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80104b2:	2100      	movs	r1, #0
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7ff fe72 	bl	801019e <dir_next>
 80104ba:	4603      	mov	r3, r0
 80104bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104be:	7dfb      	ldrb	r3, [r7, #23]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d108      	bne.n	80104d6 <dir_read+0xa2>
	while (dp->sect) {
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	69db      	ldr	r3, [r3, #28]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d1be      	bne.n	801044a <dir_read+0x16>
 80104cc:	e004      	b.n	80104d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80104ce:	bf00      	nop
 80104d0:	e002      	b.n	80104d8 <dir_read+0xa4>
				break;
 80104d2:	bf00      	nop
 80104d4:	e000      	b.n	80104d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80104d6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80104d8:	7dfb      	ldrb	r3, [r7, #23]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d002      	beq.n	80104e4 <dir_read+0xb0>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	61da      	str	r2, [r3, #28]
	return res;
 80104e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3718      	adds	r7, #24
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}

080104ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b086      	sub	sp, #24
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80104fc:	2100      	movs	r1, #0
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff fdd2 	bl	80100a8 <dir_sdi>
 8010504:	4603      	mov	r3, r0
 8010506:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010508:	7dfb      	ldrb	r3, [r7, #23]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d001      	beq.n	8010512 <dir_find+0x24>
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	e03e      	b.n	8010590 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	69db      	ldr	r3, [r3, #28]
 8010516:	4619      	mov	r1, r3
 8010518:	6938      	ldr	r0, [r7, #16]
 801051a:	f7ff fa4d 	bl	800f9b8 <move_window>
 801051e:	4603      	mov	r3, r0
 8010520:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010522:	7dfb      	ldrb	r3, [r7, #23]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d12f      	bne.n	8010588 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6a1b      	ldr	r3, [r3, #32]
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010530:	7bfb      	ldrb	r3, [r7, #15]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d102      	bne.n	801053c <dir_find+0x4e>
 8010536:	2304      	movs	r3, #4
 8010538:	75fb      	strb	r3, [r7, #23]
 801053a:	e028      	b.n	801058e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6a1b      	ldr	r3, [r3, #32]
 8010540:	330b      	adds	r3, #11
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010548:	b2da      	uxtb	r2, r3
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a1b      	ldr	r3, [r3, #32]
 8010552:	330b      	adds	r3, #11
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	f003 0308 	and.w	r3, r3, #8
 801055a:	2b00      	cmp	r3, #0
 801055c:	d10a      	bne.n	8010574 <dir_find+0x86>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a18      	ldr	r0, [r3, #32]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	3324      	adds	r3, #36	; 0x24
 8010566:	220b      	movs	r2, #11
 8010568:	4619      	mov	r1, r3
 801056a:	f7ff f802 	bl	800f572 <mem_cmp>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00b      	beq.n	801058c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010574:	2100      	movs	r1, #0
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff fe11 	bl	801019e <dir_next>
 801057c:	4603      	mov	r3, r0
 801057e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010580:	7dfb      	ldrb	r3, [r7, #23]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d0c5      	beq.n	8010512 <dir_find+0x24>
 8010586:	e002      	b.n	801058e <dir_find+0xa0>
		if (res != FR_OK) break;
 8010588:	bf00      	nop
 801058a:	e000      	b.n	801058e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801058c:	bf00      	nop

	return res;
 801058e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80105a6:	2101      	movs	r1, #1
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff febd 	bl	8010328 <dir_alloc>
 80105ae:	4603      	mov	r3, r0
 80105b0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80105b2:	7bfb      	ldrb	r3, [r7, #15]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d11c      	bne.n	80105f2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	69db      	ldr	r3, [r3, #28]
 80105bc:	4619      	mov	r1, r3
 80105be:	68b8      	ldr	r0, [r7, #8]
 80105c0:	f7ff f9fa 	bl	800f9b8 <move_window>
 80105c4:	4603      	mov	r3, r0
 80105c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d111      	bne.n	80105f2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a1b      	ldr	r3, [r3, #32]
 80105d2:	2220      	movs	r2, #32
 80105d4:	2100      	movs	r1, #0
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fe ffb1 	bl	800f53e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6a18      	ldr	r0, [r3, #32]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	3324      	adds	r3, #36	; 0x24
 80105e4:	220b      	movs	r2, #11
 80105e6:	4619      	mov	r1, r3
 80105e8:	f7fe ff88 	bl	800f4fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	2201      	movs	r2, #1
 80105f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80105f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3710      	adds	r7, #16
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b086      	sub	sp, #24
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2200      	movs	r2, #0
 801060a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	69db      	ldr	r3, [r3, #28]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d04e      	beq.n	80106b2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010614:	2300      	movs	r3, #0
 8010616:	613b      	str	r3, [r7, #16]
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801061c:	e021      	b.n	8010662 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6a1a      	ldr	r2, [r3, #32]
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	1c59      	adds	r1, r3, #1
 8010626:	6179      	str	r1, [r7, #20]
 8010628:	4413      	add	r3, r2
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801062e:	7bfb      	ldrb	r3, [r7, #15]
 8010630:	2b20      	cmp	r3, #32
 8010632:	d100      	bne.n	8010636 <get_fileinfo+0x3a>
 8010634:	e015      	b.n	8010662 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010636:	7bfb      	ldrb	r3, [r7, #15]
 8010638:	2b05      	cmp	r3, #5
 801063a:	d101      	bne.n	8010640 <get_fileinfo+0x44>
 801063c:	23e5      	movs	r3, #229	; 0xe5
 801063e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	2b09      	cmp	r3, #9
 8010644:	d106      	bne.n	8010654 <get_fileinfo+0x58>
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	1c5a      	adds	r2, r3, #1
 801064a:	613a      	str	r2, [r7, #16]
 801064c:	683a      	ldr	r2, [r7, #0]
 801064e:	4413      	add	r3, r2
 8010650:	222e      	movs	r2, #46	; 0x2e
 8010652:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	1c5a      	adds	r2, r3, #1
 8010658:	613a      	str	r2, [r7, #16]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	4413      	add	r3, r2
 801065e:	7bfa      	ldrb	r2, [r7, #15]
 8010660:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	2b0a      	cmp	r3, #10
 8010666:	d9da      	bls.n	801061e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010668:	683a      	ldr	r2, [r7, #0]
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	4413      	add	r3, r2
 801066e:	3309      	adds	r3, #9
 8010670:	2200      	movs	r2, #0
 8010672:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6a1b      	ldr	r3, [r3, #32]
 8010678:	7ada      	ldrb	r2, [r3, #11]
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6a1b      	ldr	r3, [r3, #32]
 8010682:	331c      	adds	r3, #28
 8010684:	4618      	mov	r0, r3
 8010686:	f7fe fecf 	bl	800f428 <ld_dword>
 801068a:	4602      	mov	r2, r0
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6a1b      	ldr	r3, [r3, #32]
 8010694:	3316      	adds	r3, #22
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fec6 	bl	800f428 <ld_dword>
 801069c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	80da      	strh	r2, [r3, #6]
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	0c1b      	lsrs	r3, r3, #16
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	809a      	strh	r2, [r3, #4]
 80106b0:	e000      	b.n	80106b4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80106b2:	bf00      	nop
}
 80106b4:	3718      	adds	r7, #24
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
	...

080106bc <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80106bc:	b480      	push	{r7}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	1c59      	adds	r1, r3, #1
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	6011      	str	r1, [r2, #0]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80106d2:	89fb      	ldrh	r3, [r7, #14]
 80106d4:	2b60      	cmp	r3, #96	; 0x60
 80106d6:	d905      	bls.n	80106e4 <get_achar+0x28>
 80106d8:	89fb      	ldrh	r3, [r7, #14]
 80106da:	2b7a      	cmp	r3, #122	; 0x7a
 80106dc:	d802      	bhi.n	80106e4 <get_achar+0x28>
 80106de:	89fb      	ldrh	r3, [r7, #14]
 80106e0:	3b20      	subs	r3, #32
 80106e2:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80106e4:	89fb      	ldrh	r3, [r7, #14]
 80106e6:	2b7f      	cmp	r3, #127	; 0x7f
 80106e8:	d904      	bls.n	80106f4 <get_achar+0x38>
 80106ea:	89fb      	ldrh	r3, [r7, #14]
 80106ec:	3b80      	subs	r3, #128	; 0x80
 80106ee:	4a05      	ldr	r2, [pc, #20]	; (8010704 <get_achar+0x48>)
 80106f0:	5cd3      	ldrb	r3, [r2, r3]
 80106f2:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80106f4:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3714      	adds	r7, #20
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	0801a0ac 	.word	0x0801a0ac

08010708 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b08a      	sub	sp, #40	; 0x28
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8010716:	e009      	b.n	801072c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8010718:	f107 0308 	add.w	r3, r7, #8
 801071c:	4618      	mov	r0, r3
 801071e:	f7ff ffcd 	bl	80106bc <get_achar>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d101      	bne.n	801072c <pattern_matching+0x24>
 8010728:	2300      	movs	r3, #0
 801072a:	e064      	b.n	80107f6 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	1e5a      	subs	r2, r3, #1
 8010730:	607a      	str	r2, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1f0      	bne.n	8010718 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d104      	bne.n	8010748 <pattern_matching+0x40>
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d001      	beq.n	8010748 <pattern_matching+0x40>
 8010744:	2301      	movs	r3, #1
 8010746:	e056      	b.n	80107f6 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	617b      	str	r3, [r7, #20]
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	2b3f      	cmp	r3, #63	; 0x3f
 8010756:	d003      	beq.n	8010760 <pattern_matching+0x58>
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	2b2a      	cmp	r3, #42	; 0x2a
 801075e:	d126      	bne.n	80107ae <pattern_matching+0xa6>
				nm = nx = 0;
 8010760:	2300      	movs	r3, #0
 8010762:	61fb      	str	r3, [r7, #28]
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	1c5a      	adds	r2, r3, #1
 801076c:	617a      	str	r2, [r7, #20]
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	2b3f      	cmp	r3, #63	; 0x3f
 8010772:	d103      	bne.n	801077c <pattern_matching+0x74>
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	3301      	adds	r3, #1
 8010778:	623b      	str	r3, [r7, #32]
 801077a:	e001      	b.n	8010780 <pattern_matching+0x78>
 801077c:	2301      	movs	r3, #1
 801077e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	2b3f      	cmp	r3, #63	; 0x3f
 8010786:	d0ef      	beq.n	8010768 <pattern_matching+0x60>
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	2b2a      	cmp	r3, #42	; 0x2a
 801078e:	d0eb      	beq.n	8010768 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8010790:	6978      	ldr	r0, [r7, #20]
 8010792:	6939      	ldr	r1, [r7, #16]
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	6a3a      	ldr	r2, [r7, #32]
 8010798:	f7ff ffb6 	bl	8010708 <pattern_matching>
 801079c:	4603      	mov	r3, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d001      	beq.n	80107a6 <pattern_matching+0x9e>
 80107a2:	2301      	movs	r3, #1
 80107a4:	e027      	b.n	80107f6 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80107ac:	e017      	b.n	80107de <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80107ae:	f107 0314 	add.w	r3, r7, #20
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ff ff82 	bl	80106bc <get_achar>
 80107b8:	4603      	mov	r3, r0
 80107ba:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80107bc:	f107 0310 	add.w	r3, r7, #16
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff ff7b 	bl	80106bc <get_achar>
 80107c6:	4603      	mov	r3, r0
 80107c8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80107ca:	8b7a      	ldrh	r2, [r7, #26]
 80107cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d104      	bne.n	80107dc <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80107d2:	8b7b      	ldrh	r3, [r7, #26]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1bb      	bne.n	8010750 <pattern_matching+0x48>
 80107d8:	2301      	movs	r3, #1
 80107da:	e00c      	b.n	80107f6 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80107dc:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80107de:	f107 0308 	add.w	r3, r7, #8
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7ff ff6a 	bl	80106bc <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d002      	beq.n	80107f4 <pattern_matching+0xec>
 80107ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d1a9      	bne.n	8010748 <pattern_matching+0x40>

	return 0;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3728      	adds	r7, #40	; 0x28
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
	...

08010800 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b088      	sub	sp, #32
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60fb      	str	r3, [r7, #12]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	3324      	adds	r3, #36	; 0x24
 8010814:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010816:	220b      	movs	r2, #11
 8010818:	2120      	movs	r1, #32
 801081a:	68b8      	ldr	r0, [r7, #8]
 801081c:	f7fe fe8f 	bl	800f53e <mem_set>
	si = i = 0; ni = 8;
 8010820:	2300      	movs	r3, #0
 8010822:	613b      	str	r3, [r7, #16]
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	617b      	str	r3, [r7, #20]
 8010828:	2308      	movs	r3, #8
 801082a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	1c5a      	adds	r2, r3, #1
 8010830:	617a      	str	r2, [r7, #20]
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	4413      	add	r3, r2
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801083a:	7ffb      	ldrb	r3, [r7, #31]
 801083c:	2b20      	cmp	r3, #32
 801083e:	d94e      	bls.n	80108de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010840:	7ffb      	ldrb	r3, [r7, #31]
 8010842:	2b2f      	cmp	r3, #47	; 0x2f
 8010844:	d006      	beq.n	8010854 <create_name+0x54>
 8010846:	7ffb      	ldrb	r3, [r7, #31]
 8010848:	2b5c      	cmp	r3, #92	; 0x5c
 801084a:	d110      	bne.n	801086e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801084c:	e002      	b.n	8010854 <create_name+0x54>
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	3301      	adds	r3, #1
 8010852:	617b      	str	r3, [r7, #20]
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	4413      	add	r3, r2
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	2b2f      	cmp	r3, #47	; 0x2f
 801085e:	d0f6      	beq.n	801084e <create_name+0x4e>
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	4413      	add	r3, r2
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	2b5c      	cmp	r3, #92	; 0x5c
 801086a:	d0f0      	beq.n	801084e <create_name+0x4e>
			break;
 801086c:	e038      	b.n	80108e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801086e:	7ffb      	ldrb	r3, [r7, #31]
 8010870:	2b2e      	cmp	r3, #46	; 0x2e
 8010872:	d003      	beq.n	801087c <create_name+0x7c>
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	429a      	cmp	r2, r3
 801087a:	d30c      	bcc.n	8010896 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801087c:	69bb      	ldr	r3, [r7, #24]
 801087e:	2b0b      	cmp	r3, #11
 8010880:	d002      	beq.n	8010888 <create_name+0x88>
 8010882:	7ffb      	ldrb	r3, [r7, #31]
 8010884:	2b2e      	cmp	r3, #46	; 0x2e
 8010886:	d001      	beq.n	801088c <create_name+0x8c>
 8010888:	2306      	movs	r3, #6
 801088a:	e044      	b.n	8010916 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801088c:	2308      	movs	r3, #8
 801088e:	613b      	str	r3, [r7, #16]
 8010890:	230b      	movs	r3, #11
 8010892:	61bb      	str	r3, [r7, #24]
			continue;
 8010894:	e022      	b.n	80108dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010896:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801089a:	2b00      	cmp	r3, #0
 801089c:	da04      	bge.n	80108a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801089e:	7ffb      	ldrb	r3, [r7, #31]
 80108a0:	3b80      	subs	r3, #128	; 0x80
 80108a2:	4a1f      	ldr	r2, [pc, #124]	; (8010920 <create_name+0x120>)
 80108a4:	5cd3      	ldrb	r3, [r2, r3]
 80108a6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80108a8:	7ffb      	ldrb	r3, [r7, #31]
 80108aa:	4619      	mov	r1, r3
 80108ac:	481d      	ldr	r0, [pc, #116]	; (8010924 <create_name+0x124>)
 80108ae:	f7fe fe87 	bl	800f5c0 <chk_chr>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d001      	beq.n	80108bc <create_name+0xbc>
 80108b8:	2306      	movs	r3, #6
 80108ba:	e02c      	b.n	8010916 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80108bc:	7ffb      	ldrb	r3, [r7, #31]
 80108be:	2b60      	cmp	r3, #96	; 0x60
 80108c0:	d905      	bls.n	80108ce <create_name+0xce>
 80108c2:	7ffb      	ldrb	r3, [r7, #31]
 80108c4:	2b7a      	cmp	r3, #122	; 0x7a
 80108c6:	d802      	bhi.n	80108ce <create_name+0xce>
 80108c8:	7ffb      	ldrb	r3, [r7, #31]
 80108ca:	3b20      	subs	r3, #32
 80108cc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	613a      	str	r2, [r7, #16]
 80108d4:	68ba      	ldr	r2, [r7, #8]
 80108d6:	4413      	add	r3, r2
 80108d8:	7ffa      	ldrb	r2, [r7, #31]
 80108da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80108dc:	e7a6      	b.n	801082c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80108de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	441a      	add	r2, r3
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d101      	bne.n	80108f4 <create_name+0xf4>
 80108f0:	2306      	movs	r3, #6
 80108f2:	e010      	b.n	8010916 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	2be5      	cmp	r3, #229	; 0xe5
 80108fa:	d102      	bne.n	8010902 <create_name+0x102>
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	2205      	movs	r2, #5
 8010900:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010902:	7ffb      	ldrb	r3, [r7, #31]
 8010904:	2b20      	cmp	r3, #32
 8010906:	d801      	bhi.n	801090c <create_name+0x10c>
 8010908:	2204      	movs	r2, #4
 801090a:	e000      	b.n	801090e <create_name+0x10e>
 801090c:	2200      	movs	r2, #0
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	330b      	adds	r3, #11
 8010912:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010914:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010916:	4618      	mov	r0, r3
 8010918:	3720      	adds	r7, #32
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	0801a0ac 	.word	0x0801a0ac
 8010924:	08019ed8 	.word	0x08019ed8

08010928 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801093c:	e002      	b.n	8010944 <follow_path+0x1c>
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	3301      	adds	r3, #1
 8010942:	603b      	str	r3, [r7, #0]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	2b2f      	cmp	r3, #47	; 0x2f
 801094a:	d0f8      	beq.n	801093e <follow_path+0x16>
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	2b5c      	cmp	r3, #92	; 0x5c
 8010952:	d0f4      	beq.n	801093e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	2200      	movs	r2, #0
 8010958:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	2b1f      	cmp	r3, #31
 8010960:	d80a      	bhi.n	8010978 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2280      	movs	r2, #128	; 0x80
 8010966:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801096a:	2100      	movs	r1, #0
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7ff fb9b 	bl	80100a8 <dir_sdi>
 8010972:	4603      	mov	r3, r0
 8010974:	75fb      	strb	r3, [r7, #23]
 8010976:	e043      	b.n	8010a00 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010978:	463b      	mov	r3, r7
 801097a:	4619      	mov	r1, r3
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f7ff ff3f 	bl	8010800 <create_name>
 8010982:	4603      	mov	r3, r0
 8010984:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d134      	bne.n	80109f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7ff fdae 	bl	80104ee <dir_find>
 8010992:	4603      	mov	r3, r0
 8010994:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801099c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00a      	beq.n	80109ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
 80109a6:	2b04      	cmp	r3, #4
 80109a8:	d127      	bne.n	80109fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80109aa:	7afb      	ldrb	r3, [r7, #11]
 80109ac:	f003 0304 	and.w	r3, r3, #4
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d122      	bne.n	80109fa <follow_path+0xd2>
 80109b4:	2305      	movs	r3, #5
 80109b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80109b8:	e01f      	b.n	80109fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80109ba:	7afb      	ldrb	r3, [r7, #11]
 80109bc:	f003 0304 	and.w	r3, r3, #4
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d11c      	bne.n	80109fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	799b      	ldrb	r3, [r3, #6]
 80109c8:	f003 0310 	and.w	r3, r3, #16
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d102      	bne.n	80109d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80109d0:	2305      	movs	r3, #5
 80109d2:	75fb      	strb	r3, [r7, #23]
 80109d4:	e014      	b.n	8010a00 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	695b      	ldr	r3, [r3, #20]
 80109e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109e4:	4413      	add	r3, r2
 80109e6:	4619      	mov	r1, r3
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f7ff fce4 	bl	80103b6 <ld_clust>
 80109ee:	4602      	mov	r2, r0
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80109f4:	e7c0      	b.n	8010978 <follow_path+0x50>
			if (res != FR_OK) break;
 80109f6:	bf00      	nop
 80109f8:	e002      	b.n	8010a00 <follow_path+0xd8>
				break;
 80109fa:	bf00      	nop
 80109fc:	e000      	b.n	8010a00 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80109fe:	bf00      	nop
			}
		}
	}

	return res;
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3718      	adds	r7, #24
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b087      	sub	sp, #28
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010a12:	f04f 33ff 	mov.w	r3, #4294967295
 8010a16:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d031      	beq.n	8010a84 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	617b      	str	r3, [r7, #20]
 8010a26:	e002      	b.n	8010a2e <get_ldnumber+0x24>
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	617b      	str	r3, [r7, #20]
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	2b20      	cmp	r3, #32
 8010a34:	d903      	bls.n	8010a3e <get_ldnumber+0x34>
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	2b3a      	cmp	r3, #58	; 0x3a
 8010a3c:	d1f4      	bne.n	8010a28 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	2b3a      	cmp	r3, #58	; 0x3a
 8010a44:	d11c      	bne.n	8010a80 <get_ldnumber+0x76>
			tp = *path;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	1c5a      	adds	r2, r3, #1
 8010a50:	60fa      	str	r2, [r7, #12]
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	3b30      	subs	r3, #48	; 0x30
 8010a56:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	2b09      	cmp	r3, #9
 8010a5c:	d80e      	bhi.n	8010a7c <get_ldnumber+0x72>
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d10a      	bne.n	8010a7c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d107      	bne.n	8010a7c <get_ldnumber+0x72>
					vol = (int)i;
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	3301      	adds	r3, #1
 8010a74:	617b      	str	r3, [r7, #20]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	697a      	ldr	r2, [r7, #20]
 8010a7a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	e002      	b.n	8010a86 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010a80:	2300      	movs	r3, #0
 8010a82:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010a84:	693b      	ldr	r3, [r7, #16]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	371c      	adds	r7, #28
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr
	...

08010a94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	70da      	strb	r2, [r3, #3]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8010aaa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010aac:	6839      	ldr	r1, [r7, #0]
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f7fe ff82 	bl	800f9b8 <move_window>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <check_fs+0x2a>
 8010aba:	2304      	movs	r3, #4
 8010abc:	e038      	b.n	8010b30 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	3334      	adds	r3, #52	; 0x34
 8010ac2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fe fc96 	bl	800f3f8 <ld_word>
 8010acc:	4603      	mov	r3, r0
 8010ace:	461a      	mov	r2, r3
 8010ad0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d001      	beq.n	8010adc <check_fs+0x48>
 8010ad8:	2303      	movs	r3, #3
 8010ada:	e029      	b.n	8010b30 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ae2:	2be9      	cmp	r3, #233	; 0xe9
 8010ae4:	d009      	beq.n	8010afa <check_fs+0x66>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010aec:	2beb      	cmp	r3, #235	; 0xeb
 8010aee:	d11e      	bne.n	8010b2e <check_fs+0x9a>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010af6:	2b90      	cmp	r3, #144	; 0x90
 8010af8:	d119      	bne.n	8010b2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	3334      	adds	r3, #52	; 0x34
 8010afe:	3336      	adds	r3, #54	; 0x36
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fe fc91 	bl	800f428 <ld_dword>
 8010b06:	4603      	mov	r3, r0
 8010b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010b0c:	4a0a      	ldr	r2, [pc, #40]	; (8010b38 <check_fs+0xa4>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d101      	bne.n	8010b16 <check_fs+0x82>
 8010b12:	2300      	movs	r3, #0
 8010b14:	e00c      	b.n	8010b30 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	3334      	adds	r3, #52	; 0x34
 8010b1a:	3352      	adds	r3, #82	; 0x52
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fe fc83 	bl	800f428 <ld_dword>
 8010b22:	4602      	mov	r2, r0
 8010b24:	4b05      	ldr	r3, [pc, #20]	; (8010b3c <check_fs+0xa8>)
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d101      	bne.n	8010b2e <check_fs+0x9a>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	e000      	b.n	8010b30 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010b2e:	2302      	movs	r3, #2
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	00544146 	.word	0x00544146
 8010b3c:	33544146 	.word	0x33544146

08010b40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b096      	sub	sp, #88	; 0x58
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	2200      	movs	r2, #0
 8010b52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010b54:	68f8      	ldr	r0, [r7, #12]
 8010b56:	f7ff ff58 	bl	8010a0a <get_ldnumber>
 8010b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	da01      	bge.n	8010b66 <find_volume+0x26>
 8010b62:	230b      	movs	r3, #11
 8010b64:	e236      	b.n	8010fd4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010b66:	4aac      	ldr	r2, [pc, #688]	; (8010e18 <find_volume+0x2d8>)
 8010b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d101      	bne.n	8010b7a <find_volume+0x3a>
 8010b76:	230c      	movs	r3, #12
 8010b78:	e22c      	b.n	8010fd4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010b7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b7c:	f7fe fd3b 	bl	800f5f6 <lock_fs>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d101      	bne.n	8010b8a <find_volume+0x4a>
 8010b86:	230f      	movs	r3, #15
 8010b88:	e224      	b.n	8010fd4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010b90:	79fb      	ldrb	r3, [r7, #7]
 8010b92:	f023 0301 	bic.w	r3, r3, #1
 8010b96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d01a      	beq.n	8010bd6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba2:	785b      	ldrb	r3, [r3, #1]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fe fb89 	bl	800f2bc <disk_status>
 8010baa:	4603      	mov	r3, r0
 8010bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bb4:	f003 0301 	and.w	r3, r3, #1
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d10c      	bne.n	8010bd6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010bbc:	79fb      	ldrb	r3, [r7, #7]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d007      	beq.n	8010bd2 <find_volume+0x92>
 8010bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bc6:	f003 0304 	and.w	r3, r3, #4
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d001      	beq.n	8010bd2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010bce:	230a      	movs	r3, #10
 8010bd0:	e200      	b.n	8010fd4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	e1fe      	b.n	8010fd4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd8:	2200      	movs	r2, #0
 8010bda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bde:	b2da      	uxtb	r2, r3
 8010be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be6:	785b      	ldrb	r3, [r3, #1]
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fe fb81 	bl	800f2f0 <disk_initialize>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bf8:	f003 0301 	and.w	r3, r3, #1
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d001      	beq.n	8010c04 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010c00:	2303      	movs	r3, #3
 8010c02:	e1e7      	b.n	8010fd4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010c04:	79fb      	ldrb	r3, [r7, #7]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d007      	beq.n	8010c1a <find_volume+0xda>
 8010c0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c0e:	f003 0304 	and.w	r3, r3, #4
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d001      	beq.n	8010c1a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010c16:	230a      	movs	r3, #10
 8010c18:	e1dc      	b.n	8010fd4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010c22:	f7ff ff37 	bl	8010a94 <check_fs>
 8010c26:	4603      	mov	r3, r0
 8010c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c30:	2b02      	cmp	r3, #2
 8010c32:	d14b      	bne.n	8010ccc <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010c34:	2300      	movs	r3, #0
 8010c36:	643b      	str	r3, [r7, #64]	; 0x40
 8010c38:	e01f      	b.n	8010c7a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c42:	011b      	lsls	r3, r3, #4
 8010c44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010c48:	4413      	add	r3, r2
 8010c4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4e:	3304      	adds	r3, #4
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d006      	beq.n	8010c64 <find_volume+0x124>
 8010c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c58:	3308      	adds	r3, #8
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe fbe4 	bl	800f428 <ld_dword>
 8010c60:	4602      	mov	r2, r0
 8010c62:	e000      	b.n	8010c66 <find_volume+0x126>
 8010c64:	2200      	movs	r2, #0
 8010c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c68:	009b      	lsls	r3, r3, #2
 8010c6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010c6e:	440b      	add	r3, r1
 8010c70:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c76:	3301      	adds	r3, #1
 8010c78:	643b      	str	r3, [r7, #64]	; 0x40
 8010c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c7c:	2b03      	cmp	r3, #3
 8010c7e:	d9dc      	bls.n	8010c3a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010c80:	2300      	movs	r3, #0
 8010c82:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d002      	beq.n	8010c90 <find_volume+0x150>
 8010c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c92:	009b      	lsls	r3, r3, #2
 8010c94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010c98:	4413      	add	r3, r2
 8010c9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010c9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d005      	beq.n	8010cb2 <find_volume+0x172>
 8010ca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010caa:	f7ff fef3 	bl	8010a94 <check_fs>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	e000      	b.n	8010cb4 <find_volume+0x174>
 8010cb2:	2303      	movs	r3, #3
 8010cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d905      	bls.n	8010ccc <find_volume+0x18c>
 8010cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8010cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cc8:	2b03      	cmp	r3, #3
 8010cca:	d9e1      	bls.n	8010c90 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cd0:	2b04      	cmp	r3, #4
 8010cd2:	d101      	bne.n	8010cd8 <find_volume+0x198>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e17d      	b.n	8010fd4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d901      	bls.n	8010ce4 <find_volume+0x1a4>
 8010ce0:	230d      	movs	r3, #13
 8010ce2:	e177      	b.n	8010fd4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce6:	3334      	adds	r3, #52	; 0x34
 8010ce8:	330b      	adds	r3, #11
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fe fb84 	bl	800f3f8 <ld_word>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cf6:	d001      	beq.n	8010cfc <find_volume+0x1bc>
 8010cf8:	230d      	movs	r3, #13
 8010cfa:	e16b      	b.n	8010fd4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfe:	3334      	adds	r3, #52	; 0x34
 8010d00:	3316      	adds	r3, #22
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fe fb78 	bl	800f3f8 <ld_word>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d106      	bne.n	8010d20 <find_volume+0x1e0>
 8010d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d14:	3334      	adds	r3, #52	; 0x34
 8010d16:	3324      	adds	r3, #36	; 0x24
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fe fb85 	bl	800f428 <ld_dword>
 8010d1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d24:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d28:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d32:	789b      	ldrb	r3, [r3, #2]
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	d005      	beq.n	8010d44 <find_volume+0x204>
 8010d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3a:	789b      	ldrb	r3, [r3, #2]
 8010d3c:	2b02      	cmp	r3, #2
 8010d3e:	d001      	beq.n	8010d44 <find_volume+0x204>
 8010d40:	230d      	movs	r3, #13
 8010d42:	e147      	b.n	8010fd4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d46:	789b      	ldrb	r3, [r3, #2]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d4c:	fb02 f303 	mul.w	r3, r2, r3
 8010d50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010d58:	b29a      	uxth	r2, r3
 8010d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d60:	895b      	ldrh	r3, [r3, #10]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d008      	beq.n	8010d78 <find_volume+0x238>
 8010d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d68:	895b      	ldrh	r3, [r3, #10]
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6e:	895b      	ldrh	r3, [r3, #10]
 8010d70:	3b01      	subs	r3, #1
 8010d72:	4013      	ands	r3, r2
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d001      	beq.n	8010d7c <find_volume+0x23c>
 8010d78:	230d      	movs	r3, #13
 8010d7a:	e12b      	b.n	8010fd4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7e:	3334      	adds	r3, #52	; 0x34
 8010d80:	3311      	adds	r3, #17
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fe fb38 	bl	800f3f8 <ld_word>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	891b      	ldrh	r3, [r3, #8]
 8010d94:	f003 030f 	and.w	r3, r3, #15
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <find_volume+0x262>
 8010d9e:	230d      	movs	r3, #13
 8010da0:	e118      	b.n	8010fd4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da4:	3334      	adds	r3, #52	; 0x34
 8010da6:	3313      	adds	r3, #19
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fe fb25 	bl	800f3f8 <ld_word>
 8010dae:	4603      	mov	r3, r0
 8010db0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d106      	bne.n	8010dc6 <find_volume+0x286>
 8010db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dba:	3334      	adds	r3, #52	; 0x34
 8010dbc:	3320      	adds	r3, #32
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fe fb32 	bl	800f428 <ld_dword>
 8010dc4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc8:	3334      	adds	r3, #52	; 0x34
 8010dca:	330e      	adds	r3, #14
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fe fb13 	bl	800f3f8 <ld_word>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010dd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d101      	bne.n	8010de0 <find_volume+0x2a0>
 8010ddc:	230d      	movs	r3, #13
 8010dde:	e0f9      	b.n	8010fd4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010de0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010de4:	4413      	add	r3, r2
 8010de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010de8:	8912      	ldrh	r2, [r2, #8]
 8010dea:	0912      	lsrs	r2, r2, #4
 8010dec:	b292      	uxth	r2, r2
 8010dee:	4413      	add	r3, r2
 8010df0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d201      	bcs.n	8010dfe <find_volume+0x2be>
 8010dfa:	230d      	movs	r3, #13
 8010dfc:	e0ea      	b.n	8010fd4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	1ad3      	subs	r3, r2, r3
 8010e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e06:	8952      	ldrh	r2, [r2, #10]
 8010e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d103      	bne.n	8010e1c <find_volume+0x2dc>
 8010e14:	230d      	movs	r3, #13
 8010e16:	e0dd      	b.n	8010fd4 <find_volume+0x494>
 8010e18:	20000330 	.word	0x20000330
		fmt = FS_FAT32;
 8010e1c:	2303      	movs	r3, #3
 8010e1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d802      	bhi.n	8010e32 <find_volume+0x2f2>
 8010e2c:	2302      	movs	r3, #2
 8010e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e34:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d802      	bhi.n	8010e42 <find_volume+0x302>
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e44:	1c9a      	adds	r2, r3, #2
 8010e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e48:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e4e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010e50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e54:	441a      	add	r2, r3
 8010e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e58:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010e5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	441a      	add	r2, r3
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e68:	2b03      	cmp	r3, #3
 8010e6a:	d11e      	bne.n	8010eaa <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e6e:	3334      	adds	r3, #52	; 0x34
 8010e70:	332a      	adds	r3, #42	; 0x2a
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fe fac0 	bl	800f3f8 <ld_word>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d001      	beq.n	8010e82 <find_volume+0x342>
 8010e7e:	230d      	movs	r3, #13
 8010e80:	e0a8      	b.n	8010fd4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e84:	891b      	ldrh	r3, [r3, #8]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d001      	beq.n	8010e8e <find_volume+0x34e>
 8010e8a:	230d      	movs	r3, #13
 8010e8c:	e0a2      	b.n	8010fd4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e90:	3334      	adds	r3, #52	; 0x34
 8010e92:	332c      	adds	r3, #44	; 0x2c
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fe fac7 	bl	800f428 <ld_dword>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8010ea8:	e01f      	b.n	8010eea <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eac:	891b      	ldrh	r3, [r3, #8]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d101      	bne.n	8010eb6 <find_volume+0x376>
 8010eb2:	230d      	movs	r3, #13
 8010eb4:	e08e      	b.n	8010fd4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ebc:	441a      	add	r2, r3
 8010ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010ec2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ec6:	2b02      	cmp	r3, #2
 8010ec8:	d103      	bne.n	8010ed2 <find_volume+0x392>
 8010eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ecc:	699b      	ldr	r3, [r3, #24]
 8010ece:	005b      	lsls	r3, r3, #1
 8010ed0:	e00a      	b.n	8010ee8 <find_volume+0x3a8>
 8010ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed4:	699a      	ldr	r2, [r3, #24]
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	4413      	add	r3, r2
 8010edc:	085a      	lsrs	r2, r3, #1
 8010ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	f003 0301 	and.w	r3, r3, #1
 8010ee6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010ee8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eec:	69da      	ldr	r2, [r3, #28]
 8010eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ef0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010ef4:	0a5b      	lsrs	r3, r3, #9
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d201      	bcs.n	8010efe <find_volume+0x3be>
 8010efa:	230d      	movs	r3, #13
 8010efc:	e06a      	b.n	8010fd4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f00:	f04f 32ff 	mov.w	r2, #4294967295
 8010f04:	615a      	str	r2, [r3, #20]
 8010f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f08:	695a      	ldr	r2, [r3, #20]
 8010f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f10:	2280      	movs	r2, #128	; 0x80
 8010f12:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f18:	2b03      	cmp	r3, #3
 8010f1a:	d149      	bne.n	8010fb0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1e:	3334      	adds	r3, #52	; 0x34
 8010f20:	3330      	adds	r3, #48	; 0x30
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fe fa68 	bl	800f3f8 <ld_word>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	d140      	bne.n	8010fb0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f30:	3301      	adds	r3, #1
 8010f32:	4619      	mov	r1, r3
 8010f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f36:	f7fe fd3f 	bl	800f9b8 <move_window>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d137      	bne.n	8010fb0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	2200      	movs	r2, #0
 8010f44:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f48:	3334      	adds	r3, #52	; 0x34
 8010f4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe fa52 	bl	800f3f8 <ld_word>
 8010f54:	4603      	mov	r3, r0
 8010f56:	461a      	mov	r2, r3
 8010f58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d127      	bne.n	8010fb0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f62:	3334      	adds	r3, #52	; 0x34
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7fe fa5f 	bl	800f428 <ld_dword>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	4b1b      	ldr	r3, [pc, #108]	; (8010fdc <find_volume+0x49c>)
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d11e      	bne.n	8010fb0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f74:	3334      	adds	r3, #52	; 0x34
 8010f76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fe fa54 	bl	800f428 <ld_dword>
 8010f80:	4602      	mov	r2, r0
 8010f82:	4b17      	ldr	r3, [pc, #92]	; (8010fe0 <find_volume+0x4a0>)
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d113      	bne.n	8010fb0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8a:	3334      	adds	r3, #52	; 0x34
 8010f8c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fe fa49 	bl	800f428 <ld_dword>
 8010f96:	4602      	mov	r2, r0
 8010f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9e:	3334      	adds	r3, #52	; 0x34
 8010fa0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fe fa3f 	bl	800f428 <ld_dword>
 8010faa:	4602      	mov	r2, r0
 8010fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fae:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010fb6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010fb8:	4b0a      	ldr	r3, [pc, #40]	; (8010fe4 <find_volume+0x4a4>)
 8010fba:	881b      	ldrh	r3, [r3, #0]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	b29a      	uxth	r2, r3
 8010fc0:	4b08      	ldr	r3, [pc, #32]	; (8010fe4 <find_volume+0x4a4>)
 8010fc2:	801a      	strh	r2, [r3, #0]
 8010fc4:	4b07      	ldr	r3, [pc, #28]	; (8010fe4 <find_volume+0x4a4>)
 8010fc6:	881a      	ldrh	r2, [r3, #0]
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fca:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010fcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fce:	f7fe fc8b 	bl	800f8e8 <clear_lock>
#endif
	return FR_OK;
 8010fd2:	2300      	movs	r3, #0
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3758      	adds	r7, #88	; 0x58
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	41615252 	.word	0x41615252
 8010fe0:	61417272 	.word	0x61417272
 8010fe4:	20000334 	.word	0x20000334

08010fe8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010ff2:	2309      	movs	r3, #9
 8010ff4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d02e      	beq.n	801105a <validate+0x72>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d02a      	beq.n	801105a <validate+0x72>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d025      	beq.n	801105a <validate+0x72>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	889a      	ldrh	r2, [r3, #4]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	88db      	ldrh	r3, [r3, #6]
 8011018:	429a      	cmp	r2, r3
 801101a:	d11e      	bne.n	801105a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4618      	mov	r0, r3
 8011022:	f7fe fae8 	bl	800f5f6 <lock_fs>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d014      	beq.n	8011056 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	785b      	ldrb	r3, [r3, #1]
 8011032:	4618      	mov	r0, r3
 8011034:	f7fe f942 	bl	800f2bc <disk_status>
 8011038:	4603      	mov	r3, r0
 801103a:	f003 0301 	and.w	r3, r3, #1
 801103e:	2b00      	cmp	r3, #0
 8011040:	d102      	bne.n	8011048 <validate+0x60>
				res = FR_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	73fb      	strb	r3, [r7, #15]
 8011046:	e008      	b.n	801105a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2100      	movs	r1, #0
 801104e:	4618      	mov	r0, r3
 8011050:	f7fe fae7 	bl	800f622 <unlock_fs>
 8011054:	e001      	b.n	801105a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011056:	230f      	movs	r3, #15
 8011058:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801105a:	7bfb      	ldrb	r3, [r7, #15]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d102      	bne.n	8011066 <validate+0x7e>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	e000      	b.n	8011068 <validate+0x80>
 8011066:	2300      	movs	r3, #0
 8011068:	683a      	ldr	r2, [r7, #0]
 801106a:	6013      	str	r3, [r2, #0]
	return res;
 801106c:	7bfb      	ldrb	r3, [r7, #15]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
	...

08011078 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b088      	sub	sp, #32
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	4613      	mov	r3, r2
 8011084:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801108a:	f107 0310 	add.w	r3, r7, #16
 801108e:	4618      	mov	r0, r3
 8011090:	f7ff fcbb 	bl	8010a0a <get_ldnumber>
 8011094:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	2b00      	cmp	r3, #0
 801109a:	da01      	bge.n	80110a0 <f_mount+0x28>
 801109c:	230b      	movs	r3, #11
 801109e:	e048      	b.n	8011132 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80110a0:	4a26      	ldr	r2, [pc, #152]	; (801113c <f_mount+0xc4>)
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d00f      	beq.n	80110d0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80110b0:	69b8      	ldr	r0, [r7, #24]
 80110b2:	f7fe fc19 	bl	800f8e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	68db      	ldr	r3, [r3, #12]
 80110ba:	4618      	mov	r0, r3
 80110bc:	f001 f828 	bl	8012110 <ff_del_syncobj>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d101      	bne.n	80110ca <f_mount+0x52>
 80110c6:	2302      	movs	r3, #2
 80110c8:	e033      	b.n	8011132 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	2200      	movs	r2, #0
 80110ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00f      	beq.n	80110f6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2200      	movs	r2, #0
 80110da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	b2da      	uxtb	r2, r3
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	330c      	adds	r3, #12
 80110e4:	4619      	mov	r1, r3
 80110e6:	4610      	mov	r0, r2
 80110e8:	f000 fff7 	bl	80120da <ff_cre_syncobj>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d101      	bne.n	80110f6 <f_mount+0x7e>
 80110f2:	2302      	movs	r3, #2
 80110f4:	e01d      	b.n	8011132 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80110f6:	68fa      	ldr	r2, [r7, #12]
 80110f8:	4910      	ldr	r1, [pc, #64]	; (801113c <f_mount+0xc4>)
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d002      	beq.n	801110c <f_mount+0x94>
 8011106:	79fb      	ldrb	r3, [r7, #7]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d001      	beq.n	8011110 <f_mount+0x98>
 801110c:	2300      	movs	r3, #0
 801110e:	e010      	b.n	8011132 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011110:	f107 010c 	add.w	r1, r7, #12
 8011114:	f107 0308 	add.w	r3, r7, #8
 8011118:	2200      	movs	r2, #0
 801111a:	4618      	mov	r0, r3
 801111c:	f7ff fd10 	bl	8010b40 <find_volume>
 8011120:	4603      	mov	r3, r0
 8011122:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	7dfa      	ldrb	r2, [r7, #23]
 8011128:	4611      	mov	r1, r2
 801112a:	4618      	mov	r0, r3
 801112c:	f7fe fa79 	bl	800f622 <unlock_fs>
 8011130:	7dfb      	ldrb	r3, [r7, #23]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3720      	adds	r7, #32
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	20000330 	.word	0x20000330

08011140 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b09a      	sub	sp, #104	; 0x68
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	4613      	mov	r3, r2
 801114c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d101      	bne.n	8011158 <f_open+0x18>
 8011154:	2309      	movs	r3, #9
 8011156:	e1b4      	b.n	80114c2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011158:	79fb      	ldrb	r3, [r7, #7]
 801115a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801115e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011160:	79fa      	ldrb	r2, [r7, #7]
 8011162:	f107 0114 	add.w	r1, r7, #20
 8011166:	f107 0308 	add.w	r3, r7, #8
 801116a:	4618      	mov	r0, r3
 801116c:	f7ff fce8 	bl	8010b40 <find_volume>
 8011170:	4603      	mov	r3, r0
 8011172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011176:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801117a:	2b00      	cmp	r3, #0
 801117c:	f040 8191 	bne.w	80114a2 <f_open+0x362>
		dj.obj.fs = fs;
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011184:	68ba      	ldr	r2, [r7, #8]
 8011186:	f107 0318 	add.w	r3, r7, #24
 801118a:	4611      	mov	r1, r2
 801118c:	4618      	mov	r0, r3
 801118e:	f7ff fbcb 	bl	8010928 <follow_path>
 8011192:	4603      	mov	r3, r0
 8011194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011198:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801119c:	2b00      	cmp	r3, #0
 801119e:	d11a      	bne.n	80111d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80111a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80111a4:	b25b      	sxtb	r3, r3
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	da03      	bge.n	80111b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80111aa:	2306      	movs	r3, #6
 80111ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80111b0:	e011      	b.n	80111d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80111b2:	79fb      	ldrb	r3, [r7, #7]
 80111b4:	f023 0301 	bic.w	r3, r3, #1
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	bf14      	ite	ne
 80111bc:	2301      	movne	r3, #1
 80111be:	2300      	moveq	r3, #0
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	461a      	mov	r2, r3
 80111c4:	f107 0318 	add.w	r3, r7, #24
 80111c8:	4611      	mov	r1, r2
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fe fa44 	bl	800f658 <chk_lock>
 80111d0:	4603      	mov	r3, r0
 80111d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80111d6:	79fb      	ldrb	r3, [r7, #7]
 80111d8:	f003 031c 	and.w	r3, r3, #28
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d07f      	beq.n	80112e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80111e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d017      	beq.n	8011218 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80111e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80111ec:	2b04      	cmp	r3, #4
 80111ee:	d10e      	bne.n	801120e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80111f0:	f7fe fa8e 	bl	800f710 <enq_lock>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d006      	beq.n	8011208 <f_open+0xc8>
 80111fa:	f107 0318 	add.w	r3, r7, #24
 80111fe:	4618      	mov	r0, r3
 8011200:	f7ff f9ca 	bl	8010598 <dir_register>
 8011204:	4603      	mov	r3, r0
 8011206:	e000      	b.n	801120a <f_open+0xca>
 8011208:	2312      	movs	r3, #18
 801120a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801120e:	79fb      	ldrb	r3, [r7, #7]
 8011210:	f043 0308 	orr.w	r3, r3, #8
 8011214:	71fb      	strb	r3, [r7, #7]
 8011216:	e010      	b.n	801123a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011218:	7fbb      	ldrb	r3, [r7, #30]
 801121a:	f003 0311 	and.w	r3, r3, #17
 801121e:	2b00      	cmp	r3, #0
 8011220:	d003      	beq.n	801122a <f_open+0xea>
					res = FR_DENIED;
 8011222:	2307      	movs	r3, #7
 8011224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011228:	e007      	b.n	801123a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801122a:	79fb      	ldrb	r3, [r7, #7]
 801122c:	f003 0304 	and.w	r3, r3, #4
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <f_open+0xfa>
 8011234:	2308      	movs	r3, #8
 8011236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801123a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801123e:	2b00      	cmp	r3, #0
 8011240:	d168      	bne.n	8011314 <f_open+0x1d4>
 8011242:	79fb      	ldrb	r3, [r7, #7]
 8011244:	f003 0308 	and.w	r3, r3, #8
 8011248:	2b00      	cmp	r3, #0
 801124a:	d063      	beq.n	8011314 <f_open+0x1d4>
				dw = GET_FATTIME();
 801124c:	f7fc f9b4 	bl	800d5b8 <get_fattime>
 8011250:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011254:	330e      	adds	r3, #14
 8011256:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011258:	4618      	mov	r0, r3
 801125a:	f7fe f923 	bl	800f4a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	3316      	adds	r3, #22
 8011262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011264:	4618      	mov	r0, r3
 8011266:	f7fe f91d 	bl	800f4a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801126a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126c:	330b      	adds	r3, #11
 801126e:	2220      	movs	r2, #32
 8011270:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011276:	4611      	mov	r1, r2
 8011278:	4618      	mov	r0, r3
 801127a:	f7ff f89c 	bl	80103b6 <ld_clust>
 801127e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011284:	2200      	movs	r2, #0
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff f8b4 	bl	80103f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128e:	331c      	adds	r3, #28
 8011290:	2100      	movs	r1, #0
 8011292:	4618      	mov	r0, r3
 8011294:	f7fe f906 	bl	800f4a4 <st_dword>
					fs->wflag = 1;
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	2201      	movs	r2, #1
 801129c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801129e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d037      	beq.n	8011314 <f_open+0x1d4>
						dw = fs->winsect;
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80112aa:	f107 0318 	add.w	r3, r7, #24
 80112ae:	2200      	movs	r2, #0
 80112b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fe fdc7 	bl	800fe46 <remove_chain>
 80112b8:	4603      	mov	r3, r0
 80112ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80112be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d126      	bne.n	8011314 <f_open+0x1d4>
							res = move_window(fs, dw);
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fe fb74 	bl	800f9b8 <move_window>
 80112d0:	4603      	mov	r3, r0
 80112d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80112da:	3a01      	subs	r2, #1
 80112dc:	611a      	str	r2, [r3, #16]
 80112de:	e019      	b.n	8011314 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80112e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d115      	bne.n	8011314 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80112e8:	7fbb      	ldrb	r3, [r7, #30]
 80112ea:	f003 0310 	and.w	r3, r3, #16
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d003      	beq.n	80112fa <f_open+0x1ba>
					res = FR_NO_FILE;
 80112f2:	2304      	movs	r3, #4
 80112f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80112f8:	e00c      	b.n	8011314 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80112fa:	79fb      	ldrb	r3, [r7, #7]
 80112fc:	f003 0302 	and.w	r3, r3, #2
 8011300:	2b00      	cmp	r3, #0
 8011302:	d007      	beq.n	8011314 <f_open+0x1d4>
 8011304:	7fbb      	ldrb	r3, [r7, #30]
 8011306:	f003 0301 	and.w	r3, r3, #1
 801130a:	2b00      	cmp	r3, #0
 801130c:	d002      	beq.n	8011314 <f_open+0x1d4>
						res = FR_DENIED;
 801130e:	2307      	movs	r3, #7
 8011310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011318:	2b00      	cmp	r3, #0
 801131a:	d128      	bne.n	801136e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801131c:	79fb      	ldrb	r3, [r7, #7]
 801131e:	f003 0308 	and.w	r3, r3, #8
 8011322:	2b00      	cmp	r3, #0
 8011324:	d003      	beq.n	801132e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011326:	79fb      	ldrb	r3, [r7, #7]
 8011328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801132c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801133c:	79fb      	ldrb	r3, [r7, #7]
 801133e:	f023 0301 	bic.w	r3, r3, #1
 8011342:	2b00      	cmp	r3, #0
 8011344:	bf14      	ite	ne
 8011346:	2301      	movne	r3, #1
 8011348:	2300      	moveq	r3, #0
 801134a:	b2db      	uxtb	r3, r3
 801134c:	461a      	mov	r2, r3
 801134e:	f107 0318 	add.w	r3, r7, #24
 8011352:	4611      	mov	r1, r2
 8011354:	4618      	mov	r0, r3
 8011356:	f7fe f9fd 	bl	800f754 <inc_lock>
 801135a:	4602      	mov	r2, r0
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	691b      	ldr	r3, [r3, #16]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d102      	bne.n	801136e <f_open+0x22e>
 8011368:	2302      	movs	r3, #2
 801136a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801136e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011372:	2b00      	cmp	r3, #0
 8011374:	f040 8095 	bne.w	80114a2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801137c:	4611      	mov	r1, r2
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff f819 	bl	80103b6 <ld_clust>
 8011384:	4602      	mov	r2, r0
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801138a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138c:	331c      	adds	r3, #28
 801138e:	4618      	mov	r0, r3
 8011390:	f7fe f84a 	bl	800f428 <ld_dword>
 8011394:	4602      	mov	r2, r0
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2200      	movs	r2, #0
 801139e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	88da      	ldrh	r2, [r3, #6]
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	79fa      	ldrb	r2, [r7, #7]
 80113b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2200      	movs	r2, #0
 80113b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2200      	movs	r2, #0
 80113be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2200      	movs	r2, #0
 80113c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	3330      	adds	r3, #48	; 0x30
 80113ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113ce:	2100      	movs	r1, #0
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7fe f8b4 	bl	800f53e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80113d6:	79fb      	ldrb	r3, [r7, #7]
 80113d8:	f003 0320 	and.w	r3, r3, #32
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d060      	beq.n	80114a2 <f_open+0x362>
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d05c      	beq.n	80114a2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	68da      	ldr	r2, [r3, #12]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	895b      	ldrh	r3, [r3, #10]
 80113f4:	025b      	lsls	r3, r3, #9
 80113f6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011404:	e016      	b.n	8011434 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801140a:	4618      	mov	r0, r3
 801140c:	f7fe fb8f 	bl	800fb2e <get_fat>
 8011410:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011414:	2b01      	cmp	r3, #1
 8011416:	d802      	bhi.n	801141e <f_open+0x2de>
 8011418:	2302      	movs	r3, #2
 801141a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801141e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011424:	d102      	bne.n	801142c <f_open+0x2ec>
 8011426:	2301      	movs	r3, #1
 8011428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801142c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801142e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011438:	2b00      	cmp	r3, #0
 801143a:	d103      	bne.n	8011444 <f_open+0x304>
 801143c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801143e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011440:	429a      	cmp	r2, r3
 8011442:	d8e0      	bhi.n	8011406 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011448:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801144a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801144e:	2b00      	cmp	r3, #0
 8011450:	d127      	bne.n	80114a2 <f_open+0x362>
 8011452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011458:	2b00      	cmp	r3, #0
 801145a:	d022      	beq.n	80114a2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011460:	4618      	mov	r0, r3
 8011462:	f7fe fb45 	bl	800faf0 <clust2sect>
 8011466:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801146a:	2b00      	cmp	r3, #0
 801146c:	d103      	bne.n	8011476 <f_open+0x336>
						res = FR_INT_ERR;
 801146e:	2302      	movs	r3, #2
 8011470:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011474:	e015      	b.n	80114a2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011478:	0a5a      	lsrs	r2, r3, #9
 801147a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801147c:	441a      	add	r2, r3
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	7858      	ldrb	r0, [r3, #1]
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	6a1a      	ldr	r2, [r3, #32]
 8011490:	2301      	movs	r3, #1
 8011492:	f7fd ff53 	bl	800f33c <disk_read>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d002      	beq.n	80114a2 <f_open+0x362>
 801149c:	2301      	movs	r3, #1
 801149e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80114a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d002      	beq.n	80114b0 <f_open+0x370>
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2200      	movs	r2, #0
 80114ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80114b6:	4611      	mov	r1, r2
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe f8b2 	bl	800f622 <unlock_fs>
 80114be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3768      	adds	r7, #104	; 0x68
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b08c      	sub	sp, #48	; 0x30
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	60f8      	str	r0, [r7, #12]
 80114d2:	60b9      	str	r1, [r7, #8]
 80114d4:	607a      	str	r2, [r7, #4]
 80114d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	2200      	movs	r2, #0
 80114e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f107 0210 	add.w	r2, r7, #16
 80114e8:	4611      	mov	r1, r2
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7ff fd7c 	bl	8010fe8 <validate>
 80114f0:	4603      	mov	r3, r0
 80114f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80114f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d107      	bne.n	801150e <f_write+0x44>
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	7d5b      	ldrb	r3, [r3, #21]
 8011502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801150a:	2b00      	cmp	r3, #0
 801150c:	d009      	beq.n	8011522 <f_write+0x58>
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011514:	4611      	mov	r1, r2
 8011516:	4618      	mov	r0, r3
 8011518:	f7fe f883 	bl	800f622 <unlock_fs>
 801151c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011520:	e173      	b.n	801180a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	7d1b      	ldrb	r3, [r3, #20]
 8011526:	f003 0302 	and.w	r3, r3, #2
 801152a:	2b00      	cmp	r3, #0
 801152c:	d106      	bne.n	801153c <f_write+0x72>
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	2107      	movs	r1, #7
 8011532:	4618      	mov	r0, r3
 8011534:	f7fe f875 	bl	800f622 <unlock_fs>
 8011538:	2307      	movs	r3, #7
 801153a:	e166      	b.n	801180a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	699a      	ldr	r2, [r3, #24]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	441a      	add	r2, r3
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	699b      	ldr	r3, [r3, #24]
 8011548:	429a      	cmp	r2, r3
 801154a:	f080 814b 	bcs.w	80117e4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	699b      	ldr	r3, [r3, #24]
 8011552:	43db      	mvns	r3, r3
 8011554:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011556:	e145      	b.n	80117e4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	699b      	ldr	r3, [r3, #24]
 801155c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011560:	2b00      	cmp	r3, #0
 8011562:	f040 8101 	bne.w	8011768 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	699b      	ldr	r3, [r3, #24]
 801156a:	0a5b      	lsrs	r3, r3, #9
 801156c:	693a      	ldr	r2, [r7, #16]
 801156e:	8952      	ldrh	r2, [r2, #10]
 8011570:	3a01      	subs	r2, #1
 8011572:	4013      	ands	r3, r2
 8011574:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d14d      	bne.n	8011618 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d10c      	bne.n	801159e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	689b      	ldr	r3, [r3, #8]
 8011588:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158c:	2b00      	cmp	r3, #0
 801158e:	d11a      	bne.n	80115c6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2100      	movs	r1, #0
 8011594:	4618      	mov	r0, r3
 8011596:	f7fe fcbb 	bl	800ff10 <create_chain>
 801159a:	62b8      	str	r0, [r7, #40]	; 0x28
 801159c:	e013      	b.n	80115c6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d007      	beq.n	80115b6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	699b      	ldr	r3, [r3, #24]
 80115aa:	4619      	mov	r1, r3
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f7fe fd47 	bl	8010040 <clmt_clust>
 80115b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80115b4:	e007      	b.n	80115c6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	69db      	ldr	r3, [r3, #28]
 80115bc:	4619      	mov	r1, r3
 80115be:	4610      	mov	r0, r2
 80115c0:	f7fe fca6 	bl	800ff10 <create_chain>
 80115c4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80115c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f000 8110 	beq.w	80117ee <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80115ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d109      	bne.n	80115e8 <f_write+0x11e>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2202      	movs	r2, #2
 80115d8:	755a      	strb	r2, [r3, #21]
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	2102      	movs	r1, #2
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fe f81f 	bl	800f622 <unlock_fs>
 80115e4:	2302      	movs	r3, #2
 80115e6:	e110      	b.n	801180a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80115e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ee:	d109      	bne.n	8011604 <f_write+0x13a>
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2201      	movs	r2, #1
 80115f4:	755a      	strb	r2, [r3, #21]
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	2101      	movs	r1, #1
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fe f811 	bl	800f622 <unlock_fs>
 8011600:	2301      	movs	r3, #1
 8011602:	e102      	b.n	801180a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011608:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d102      	bne.n	8011618 <f_write+0x14e>
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011616:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	7d1b      	ldrb	r3, [r3, #20]
 801161c:	b25b      	sxtb	r3, r3
 801161e:	2b00      	cmp	r3, #0
 8011620:	da1d      	bge.n	801165e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	7858      	ldrb	r0, [r3, #1]
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	6a1a      	ldr	r2, [r3, #32]
 8011630:	2301      	movs	r3, #1
 8011632:	f7fd fea3 	bl	800f37c <disk_write>
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d009      	beq.n	8011650 <f_write+0x186>
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2201      	movs	r2, #1
 8011640:	755a      	strb	r2, [r3, #21]
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	2101      	movs	r1, #1
 8011646:	4618      	mov	r0, r3
 8011648:	f7fd ffeb 	bl	800f622 <unlock_fs>
 801164c:	2301      	movs	r3, #1
 801164e:	e0dc      	b.n	801180a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	7d1b      	ldrb	r3, [r3, #20]
 8011654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011658:	b2da      	uxtb	r2, r3
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801165e:	693a      	ldr	r2, [r7, #16]
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	69db      	ldr	r3, [r3, #28]
 8011664:	4619      	mov	r1, r3
 8011666:	4610      	mov	r0, r2
 8011668:	f7fe fa42 	bl	800faf0 <clust2sect>
 801166c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d109      	bne.n	8011688 <f_write+0x1be>
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2202      	movs	r2, #2
 8011678:	755a      	strb	r2, [r3, #21]
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	2102      	movs	r1, #2
 801167e:	4618      	mov	r0, r3
 8011680:	f7fd ffcf 	bl	800f622 <unlock_fs>
 8011684:	2302      	movs	r3, #2
 8011686:	e0c0      	b.n	801180a <f_write+0x340>
			sect += csect;
 8011688:	697a      	ldr	r2, [r7, #20]
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	4413      	add	r3, r2
 801168e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	0a5b      	lsrs	r3, r3, #9
 8011694:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011696:	6a3b      	ldr	r3, [r7, #32]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d041      	beq.n	8011720 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801169c:	69ba      	ldr	r2, [r7, #24]
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	4413      	add	r3, r2
 80116a2:	693a      	ldr	r2, [r7, #16]
 80116a4:	8952      	ldrh	r2, [r2, #10]
 80116a6:	4293      	cmp	r3, r2
 80116a8:	d905      	bls.n	80116b6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	895b      	ldrh	r3, [r3, #10]
 80116ae:	461a      	mov	r2, r3
 80116b0:	69bb      	ldr	r3, [r7, #24]
 80116b2:	1ad3      	subs	r3, r2, r3
 80116b4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	7858      	ldrb	r0, [r3, #1]
 80116ba:	6a3b      	ldr	r3, [r7, #32]
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	69f9      	ldr	r1, [r7, #28]
 80116c0:	f7fd fe5c 	bl	800f37c <disk_write>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d009      	beq.n	80116de <f_write+0x214>
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2201      	movs	r2, #1
 80116ce:	755a      	strb	r2, [r3, #21]
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	2101      	movs	r1, #1
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fd ffa4 	bl	800f622 <unlock_fs>
 80116da:	2301      	movs	r3, #1
 80116dc:	e095      	b.n	801180a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	6a1a      	ldr	r2, [r3, #32]
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	1ad3      	subs	r3, r2, r3
 80116e6:	6a3a      	ldr	r2, [r7, #32]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d915      	bls.n	8011718 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	6a1a      	ldr	r2, [r3, #32]
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	025b      	lsls	r3, r3, #9
 80116fc:	69fa      	ldr	r2, [r7, #28]
 80116fe:	4413      	add	r3, r2
 8011700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011704:	4619      	mov	r1, r3
 8011706:	f7fd fef9 	bl	800f4fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	7d1b      	ldrb	r3, [r3, #20]
 801170e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011712:	b2da      	uxtb	r2, r3
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011718:	6a3b      	ldr	r3, [r7, #32]
 801171a:	025b      	lsls	r3, r3, #9
 801171c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801171e:	e044      	b.n	80117aa <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	6a1b      	ldr	r3, [r3, #32]
 8011724:	697a      	ldr	r2, [r7, #20]
 8011726:	429a      	cmp	r2, r3
 8011728:	d01b      	beq.n	8011762 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	699a      	ldr	r2, [r3, #24]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011732:	429a      	cmp	r2, r3
 8011734:	d215      	bcs.n	8011762 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	7858      	ldrb	r0, [r3, #1]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011740:	2301      	movs	r3, #1
 8011742:	697a      	ldr	r2, [r7, #20]
 8011744:	f7fd fdfa 	bl	800f33c <disk_read>
 8011748:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801174a:	2b00      	cmp	r3, #0
 801174c:	d009      	beq.n	8011762 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2201      	movs	r2, #1
 8011752:	755a      	strb	r2, [r3, #21]
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	2101      	movs	r1, #1
 8011758:	4618      	mov	r0, r3
 801175a:	f7fd ff62 	bl	800f622 <unlock_fs>
 801175e:	2301      	movs	r3, #1
 8011760:	e053      	b.n	801180a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	697a      	ldr	r2, [r7, #20]
 8011766:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	699b      	ldr	r3, [r3, #24]
 801176c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011770:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011774:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	429a      	cmp	r2, r3
 801177c:	d901      	bls.n	8011782 <f_write+0x2b8>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	699b      	ldr	r3, [r3, #24]
 801178c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011790:	4413      	add	r3, r2
 8011792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011794:	69f9      	ldr	r1, [r7, #28]
 8011796:	4618      	mov	r0, r3
 8011798:	f7fd feb0 	bl	800f4fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	7d1b      	ldrb	r3, [r3, #20]
 80117a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80117a4:	b2da      	uxtb	r2, r3
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80117aa:	69fa      	ldr	r2, [r7, #28]
 80117ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ae:	4413      	add	r3, r2
 80117b0:	61fb      	str	r3, [r7, #28]
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	699a      	ldr	r2, [r3, #24]
 80117b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b8:	441a      	add	r2, r3
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	619a      	str	r2, [r3, #24]
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	68da      	ldr	r2, [r3, #12]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	699b      	ldr	r3, [r3, #24]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	bf38      	it	cc
 80117ca:	461a      	movcc	r2, r3
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	60da      	str	r2, [r3, #12]
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d6:	441a      	add	r2, r3
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	601a      	str	r2, [r3, #0]
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e0:	1ad3      	subs	r3, r2, r3
 80117e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f47f aeb6 	bne.w	8011558 <f_write+0x8e>
 80117ec:	e000      	b.n	80117f0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80117ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	7d1b      	ldrb	r3, [r3, #20]
 80117f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f8:	b2da      	uxtb	r2, r3
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	2100      	movs	r1, #0
 8011802:	4618      	mov	r0, r3
 8011804:	f7fd ff0d 	bl	800f622 <unlock_fs>
 8011808:	2300      	movs	r3, #0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3730      	adds	r7, #48	; 0x30
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011812:	b580      	push	{r7, lr}
 8011814:	b086      	sub	sp, #24
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f107 0208 	add.w	r2, r7, #8
 8011820:	4611      	mov	r1, r2
 8011822:	4618      	mov	r0, r3
 8011824:	f7ff fbe0 	bl	8010fe8 <validate>
 8011828:	4603      	mov	r3, r0
 801182a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801182c:	7dfb      	ldrb	r3, [r7, #23]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d16d      	bne.n	801190e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	7d1b      	ldrb	r3, [r3, #20]
 8011836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801183a:	2b00      	cmp	r3, #0
 801183c:	d067      	beq.n	801190e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	7d1b      	ldrb	r3, [r3, #20]
 8011842:	b25b      	sxtb	r3, r3
 8011844:	2b00      	cmp	r3, #0
 8011846:	da1a      	bge.n	801187e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	7858      	ldrb	r0, [r3, #1]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6a1a      	ldr	r2, [r3, #32]
 8011856:	2301      	movs	r3, #1
 8011858:	f7fd fd90 	bl	800f37c <disk_write>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d006      	beq.n	8011870 <f_sync+0x5e>
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	2101      	movs	r1, #1
 8011866:	4618      	mov	r0, r3
 8011868:	f7fd fedb 	bl	800f622 <unlock_fs>
 801186c:	2301      	movs	r3, #1
 801186e:	e055      	b.n	801191c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	7d1b      	ldrb	r3, [r3, #20]
 8011874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011878:	b2da      	uxtb	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801187e:	f7fb fe9b 	bl	800d5b8 <get_fattime>
 8011882:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801188a:	4619      	mov	r1, r3
 801188c:	4610      	mov	r0, r2
 801188e:	f7fe f893 	bl	800f9b8 <move_window>
 8011892:	4603      	mov	r3, r0
 8011894:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011896:	7dfb      	ldrb	r3, [r7, #23]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d138      	bne.n	801190e <f_sync+0xfc>
					dir = fp->dir_ptr;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	330b      	adds	r3, #11
 80118a6:	781a      	ldrb	r2, [r3, #0]
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	330b      	adds	r3, #11
 80118ac:	f042 0220 	orr.w	r2, r2, #32
 80118b0:	b2d2      	uxtb	r2, r2
 80118b2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6818      	ldr	r0, [r3, #0]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	689b      	ldr	r3, [r3, #8]
 80118bc:	461a      	mov	r2, r3
 80118be:	68f9      	ldr	r1, [r7, #12]
 80118c0:	f7fe fd98 	bl	80103f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f103 021c 	add.w	r2, r3, #28
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	4619      	mov	r1, r3
 80118d0:	4610      	mov	r0, r2
 80118d2:	f7fd fde7 	bl	800f4a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	3316      	adds	r3, #22
 80118da:	6939      	ldr	r1, [r7, #16]
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fd fde1 	bl	800f4a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	3312      	adds	r3, #18
 80118e6:	2100      	movs	r1, #0
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7fd fdc0 	bl	800f46e <st_word>
					fs->wflag = 1;
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	2201      	movs	r2, #1
 80118f2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7fe f88c 	bl	800fa14 <sync_fs>
 80118fc:	4603      	mov	r3, r0
 80118fe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	7d1b      	ldrb	r3, [r3, #20]
 8011904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011908:	b2da      	uxtb	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	7dfa      	ldrb	r2, [r7, #23]
 8011912:	4611      	mov	r1, r2
 8011914:	4618      	mov	r0, r3
 8011916:	f7fd fe84 	bl	800f622 <unlock_fs>
 801191a:	7dfb      	ldrb	r3, [r7, #23]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3718      	adds	r7, #24
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b090      	sub	sp, #64	; 0x40
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f107 0208 	add.w	r2, r7, #8
 8011934:	4611      	mov	r1, r2
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff fb56 	bl	8010fe8 <validate>
 801193c:	4603      	mov	r3, r0
 801193e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011942:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011946:	2b00      	cmp	r3, #0
 8011948:	d103      	bne.n	8011952 <f_lseek+0x2e>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	7d5b      	ldrb	r3, [r3, #21]
 801194e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011952:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011956:	2b00      	cmp	r3, #0
 8011958:	d009      	beq.n	801196e <f_lseek+0x4a>
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011960:	4611      	mov	r1, r2
 8011962:	4618      	mov	r0, r3
 8011964:	f7fd fe5d 	bl	800f622 <unlock_fs>
 8011968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801196c:	e229      	b.n	8011dc2 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011972:	2b00      	cmp	r3, #0
 8011974:	f000 80ea 	beq.w	8011b4c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801197e:	d164      	bne.n	8011a4a <f_lseek+0x126>
			tbl = fp->cltbl;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011984:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011988:	1d1a      	adds	r2, r3, #4
 801198a:	627a      	str	r2, [r7, #36]	; 0x24
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	617b      	str	r3, [r7, #20]
 8011990:	2302      	movs	r3, #2
 8011992:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199c:	2b00      	cmp	r3, #0
 801199e:	d044      	beq.n	8011a2a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80119a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a2:	613b      	str	r3, [r7, #16]
 80119a4:	2300      	movs	r3, #0
 80119a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119aa:	3302      	adds	r3, #2
 80119ac:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80119ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b0:	60fb      	str	r3, [r7, #12]
 80119b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b4:	3301      	adds	r3, #1
 80119b6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fe f8b6 	bl	800fb2e <get_fat>
 80119c2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80119c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d809      	bhi.n	80119de <f_lseek+0xba>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2202      	movs	r2, #2
 80119ce:	755a      	strb	r2, [r3, #21]
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	2102      	movs	r1, #2
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fd fe24 	bl	800f622 <unlock_fs>
 80119da:	2302      	movs	r3, #2
 80119dc:	e1f1      	b.n	8011dc2 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e4:	d109      	bne.n	80119fa <f_lseek+0xd6>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2201      	movs	r2, #1
 80119ea:	755a      	strb	r2, [r3, #21]
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	2101      	movs	r1, #1
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7fd fe16 	bl	800f622 <unlock_fs>
 80119f6:	2301      	movs	r3, #1
 80119f8:	e1e3      	b.n	8011dc2 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	3301      	adds	r3, #1
 80119fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d0d4      	beq.n	80119ae <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d809      	bhi.n	8011a20 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0e:	1d1a      	adds	r2, r3, #4
 8011a10:	627a      	str	r2, [r7, #36]	; 0x24
 8011a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a14:	601a      	str	r2, [r3, #0]
 8011a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a18:	1d1a      	adds	r2, r3, #4
 8011a1a:	627a      	str	r2, [r7, #36]	; 0x24
 8011a1c:	693a      	ldr	r2, [r7, #16]
 8011a1e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	699b      	ldr	r3, [r3, #24]
 8011a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d3ba      	bcc.n	80119a0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a30:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d803      	bhi.n	8011a42 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	601a      	str	r2, [r3, #0]
 8011a40:	e1b6      	b.n	8011db0 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011a42:	2311      	movs	r3, #17
 8011a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011a48:	e1b2      	b.n	8011db0 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	683a      	ldr	r2, [r7, #0]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d902      	bls.n	8011a5a <f_lseek+0x136>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	683a      	ldr	r2, [r7, #0]
 8011a5e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f000 81a4 	beq.w	8011db0 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	3b01      	subs	r3, #1
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7fe fae6 	bl	8010040 <clmt_clust>
 8011a74:	4602      	mov	r2, r0
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	69db      	ldr	r3, [r3, #28]
 8011a80:	4619      	mov	r1, r3
 8011a82:	4610      	mov	r0, r2
 8011a84:	f7fe f834 	bl	800faf0 <clust2sect>
 8011a88:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d109      	bne.n	8011aa4 <f_lseek+0x180>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2202      	movs	r2, #2
 8011a94:	755a      	strb	r2, [r3, #21]
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	2102      	movs	r1, #2
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fd fdc1 	bl	800f622 <unlock_fs>
 8011aa0:	2302      	movs	r3, #2
 8011aa2:	e18e      	b.n	8011dc2 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	0a5b      	lsrs	r3, r3, #9
 8011aaa:	68ba      	ldr	r2, [r7, #8]
 8011aac:	8952      	ldrh	r2, [r2, #10]
 8011aae:	3a01      	subs	r2, #1
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	69ba      	ldr	r2, [r7, #24]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	699b      	ldr	r3, [r3, #24]
 8011abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	f000 8175 	beq.w	8011db0 <f_lseek+0x48c>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6a1b      	ldr	r3, [r3, #32]
 8011aca:	69ba      	ldr	r2, [r7, #24]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	f000 816f 	beq.w	8011db0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	7d1b      	ldrb	r3, [r3, #20]
 8011ad6:	b25b      	sxtb	r3, r3
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	da1d      	bge.n	8011b18 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	7858      	ldrb	r0, [r3, #1]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a1a      	ldr	r2, [r3, #32]
 8011aea:	2301      	movs	r3, #1
 8011aec:	f7fd fc46 	bl	800f37c <disk_write>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d009      	beq.n	8011b0a <f_lseek+0x1e6>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2201      	movs	r2, #1
 8011afa:	755a      	strb	r2, [r3, #21]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	2101      	movs	r1, #1
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7fd fd8e 	bl	800f622 <unlock_fs>
 8011b06:	2301      	movs	r3, #1
 8011b08:	e15b      	b.n	8011dc2 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	7d1b      	ldrb	r3, [r3, #20]
 8011b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	7858      	ldrb	r0, [r3, #1]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b22:	2301      	movs	r3, #1
 8011b24:	69ba      	ldr	r2, [r7, #24]
 8011b26:	f7fd fc09 	bl	800f33c <disk_read>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d009      	beq.n	8011b44 <f_lseek+0x220>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2201      	movs	r2, #1
 8011b34:	755a      	strb	r2, [r3, #21]
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	2101      	movs	r1, #1
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7fd fd71 	bl	800f622 <unlock_fs>
 8011b40:	2301      	movs	r3, #1
 8011b42:	e13e      	b.n	8011dc2 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	69ba      	ldr	r2, [r7, #24]
 8011b48:	621a      	str	r2, [r3, #32]
 8011b4a:	e131      	b.n	8011db0 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	68db      	ldr	r3, [r3, #12]
 8011b50:	683a      	ldr	r2, [r7, #0]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d908      	bls.n	8011b68 <f_lseek+0x244>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	7d1b      	ldrb	r3, [r3, #20]
 8011b5a:	f003 0302 	and.w	r3, r3, #2
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d102      	bne.n	8011b68 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	699b      	ldr	r3, [r3, #24]
 8011b6c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	637b      	str	r3, [r7, #52]	; 0x34
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b76:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	f000 80c0 	beq.w	8011d00 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	895b      	ldrh	r3, [r3, #10]
 8011b84:	025b      	lsls	r3, r3, #9
 8011b86:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011b88:	6a3b      	ldr	r3, [r7, #32]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d01b      	beq.n	8011bc6 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	1e5a      	subs	r2, r3, #1
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8011b98:	6a3b      	ldr	r3, [r7, #32]
 8011b9a:	1e59      	subs	r1, r3, #1
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d30f      	bcc.n	8011bc6 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011ba6:	6a3b      	ldr	r3, [r7, #32]
 8011ba8:	1e5a      	subs	r2, r3, #1
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	425b      	negs	r3, r3
 8011bae:	401a      	ands	r2, r3
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	683a      	ldr	r2, [r7, #0]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	69db      	ldr	r3, [r3, #28]
 8011bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bc4:	e02c      	b.n	8011c20 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d123      	bne.n	8011c1a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fe f99a 	bl	800ff10 <create_chain>
 8011bdc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d109      	bne.n	8011bf8 <f_lseek+0x2d4>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2202      	movs	r2, #2
 8011be8:	755a      	strb	r2, [r3, #21]
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	2102      	movs	r1, #2
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fd fd17 	bl	800f622 <unlock_fs>
 8011bf4:	2302      	movs	r3, #2
 8011bf6:	e0e4      	b.n	8011dc2 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bfe:	d109      	bne.n	8011c14 <f_lseek+0x2f0>
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2201      	movs	r2, #1
 8011c04:	755a      	strb	r2, [r3, #21]
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	2101      	movs	r1, #1
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fd fd09 	bl	800f622 <unlock_fs>
 8011c10:	2301      	movs	r3, #1
 8011c12:	e0d6      	b.n	8011dc2 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c18:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c1e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d06c      	beq.n	8011d00 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011c26:	e044      	b.n	8011cb2 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011c28:	683a      	ldr	r2, [r7, #0]
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	603b      	str	r3, [r7, #0]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	699a      	ldr	r2, [r3, #24]
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	441a      	add	r2, r3
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	7d1b      	ldrb	r3, [r3, #20]
 8011c40:	f003 0302 	and.w	r3, r3, #2
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00b      	beq.n	8011c60 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fe f95f 	bl	800ff10 <create_chain>
 8011c52:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d108      	bne.n	8011c6c <f_lseek+0x348>
							ofs = 0; break;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	603b      	str	r3, [r7, #0]
 8011c5e:	e02c      	b.n	8011cba <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fd ff62 	bl	800fb2e <get_fat>
 8011c6a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c72:	d109      	bne.n	8011c88 <f_lseek+0x364>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2201      	movs	r2, #1
 8011c78:	755a      	strb	r2, [r3, #21]
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7fd fccf 	bl	800f622 <unlock_fs>
 8011c84:	2301      	movs	r3, #1
 8011c86:	e09c      	b.n	8011dc2 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d904      	bls.n	8011c98 <f_lseek+0x374>
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	699b      	ldr	r3, [r3, #24]
 8011c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d309      	bcc.n	8011cac <f_lseek+0x388>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2202      	movs	r2, #2
 8011c9c:	755a      	strb	r2, [r3, #21]
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2102      	movs	r1, #2
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fd fcbd 	bl	800f622 <unlock_fs>
 8011ca8:	2302      	movs	r3, #2
 8011caa:	e08a      	b.n	8011dc2 <f_lseek+0x49e>
					fp->clust = clst;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cb0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011cb2:	683a      	ldr	r2, [r7, #0]
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d8b6      	bhi.n	8011c28 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	699a      	ldr	r2, [r3, #24]
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	441a      	add	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d017      	beq.n	8011d00 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7fd ff0b 	bl	800faf0 <clust2sect>
 8011cda:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d109      	bne.n	8011cf6 <f_lseek+0x3d2>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2202      	movs	r2, #2
 8011ce6:	755a      	strb	r2, [r3, #21]
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	2102      	movs	r1, #2
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fd fc98 	bl	800f622 <unlock_fs>
 8011cf2:	2302      	movs	r3, #2
 8011cf4:	e065      	b.n	8011dc2 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	0a5b      	lsrs	r3, r3, #9
 8011cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cfc:	4413      	add	r3, r2
 8011cfe:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	699a      	ldr	r2, [r3, #24]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d90a      	bls.n	8011d22 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	699a      	ldr	r2, [r3, #24]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	7d1b      	ldrb	r3, [r3, #20]
 8011d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d1c:	b2da      	uxtb	r2, r3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	699b      	ldr	r3, [r3, #24]
 8011d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d040      	beq.n	8011db0 <f_lseek+0x48c>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6a1b      	ldr	r3, [r3, #32]
 8011d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d03b      	beq.n	8011db0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	7d1b      	ldrb	r3, [r3, #20]
 8011d3c:	b25b      	sxtb	r3, r3
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	da1d      	bge.n	8011d7e <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	7858      	ldrb	r0, [r3, #1]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6a1a      	ldr	r2, [r3, #32]
 8011d50:	2301      	movs	r3, #1
 8011d52:	f7fd fb13 	bl	800f37c <disk_write>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d009      	beq.n	8011d70 <f_lseek+0x44c>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	755a      	strb	r2, [r3, #21]
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	2101      	movs	r1, #1
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fd fc5b 	bl	800f622 <unlock_fs>
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	e028      	b.n	8011dc2 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	7d1b      	ldrb	r3, [r3, #20]
 8011d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	7858      	ldrb	r0, [r3, #1]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d88:	2301      	movs	r3, #1
 8011d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d8c:	f7fd fad6 	bl	800f33c <disk_read>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d009      	beq.n	8011daa <f_lseek+0x486>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2201      	movs	r2, #1
 8011d9a:	755a      	strb	r2, [r3, #21]
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	2101      	movs	r1, #1
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fd fc3e 	bl	800f622 <unlock_fs>
 8011da6:	2301      	movs	r3, #1
 8011da8:	e00b      	b.n	8011dc2 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dae:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011db6:	4611      	mov	r1, r2
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7fd fc32 	bl	800f622 <unlock_fs>
 8011dbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3740      	adds	r7, #64	; 0x40
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b086      	sub	sp, #24
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d101      	bne.n	8011dde <f_opendir+0x14>
 8011dda:	2309      	movs	r3, #9
 8011ddc:	e06a      	b.n	8011eb4 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011de2:	f107 010c 	add.w	r1, r7, #12
 8011de6:	463b      	mov	r3, r7
 8011de8:	2200      	movs	r2, #0
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fe fea8 	bl	8010b40 <find_volume>
 8011df0:	4603      	mov	r3, r0
 8011df2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011df4:	7dfb      	ldrb	r3, [r7, #23]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d14f      	bne.n	8011e9a <f_opendir+0xd0>
		obj->fs = fs;
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	4619      	mov	r1, r3
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7fe fd8f 	bl	8010928 <follow_path>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011e0e:	7dfb      	ldrb	r3, [r7, #23]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d13d      	bne.n	8011e90 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e1a:	b25b      	sxtb	r3, r3
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	db12      	blt.n	8011e46 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	799b      	ldrb	r3, [r3, #6]
 8011e24:	f003 0310 	and.w	r3, r3, #16
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00a      	beq.n	8011e42 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6a1b      	ldr	r3, [r3, #32]
 8011e32:	4619      	mov	r1, r3
 8011e34:	4610      	mov	r0, r2
 8011e36:	f7fe fabe 	bl	80103b6 <ld_clust>
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	693b      	ldr	r3, [r7, #16]
 8011e3e:	609a      	str	r2, [r3, #8]
 8011e40:	e001      	b.n	8011e46 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011e42:	2305      	movs	r3, #5
 8011e44:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011e46:	7dfb      	ldrb	r3, [r7, #23]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d121      	bne.n	8011e90 <f_opendir+0xc6>
				obj->id = fs->id;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	88da      	ldrh	r2, [r3, #6]
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011e54:	2100      	movs	r1, #0
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f7fe f926 	bl	80100a8 <dir_sdi>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011e60:	7dfb      	ldrb	r3, [r7, #23]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d114      	bne.n	8011e90 <f_opendir+0xc6>
					if (obj->sclust) {
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	689b      	ldr	r3, [r3, #8]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00d      	beq.n	8011e8a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011e6e:	2100      	movs	r1, #0
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7fd fc6f 	bl	800f754 <inc_lock>
 8011e76:	4602      	mov	r2, r0
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	691b      	ldr	r3, [r3, #16]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d105      	bne.n	8011e90 <f_opendir+0xc6>
 8011e84:	2312      	movs	r3, #18
 8011e86:	75fb      	strb	r3, [r7, #23]
 8011e88:	e002      	b.n	8011e90 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
 8011e92:	2b04      	cmp	r3, #4
 8011e94:	d101      	bne.n	8011e9a <f_opendir+0xd0>
 8011e96:	2305      	movs	r3, #5
 8011e98:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011e9a:	7dfb      	ldrb	r3, [r7, #23]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d002      	beq.n	8011ea6 <f_opendir+0xdc>
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	7dfa      	ldrb	r2, [r7, #23]
 8011eaa:	4611      	mov	r1, r2
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fd fbb8 	bl	800f622 <unlock_fs>
 8011eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3718      	adds	r7, #24
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f107 0208 	add.w	r2, r7, #8
 8011eca:	4611      	mov	r1, r2
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7ff f88b 	bl	8010fe8 <validate>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d115      	bne.n	8011f08 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	691b      	ldr	r3, [r3, #16]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d006      	beq.n	8011ef2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	691b      	ldr	r3, [r3, #16]
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fd fcc1 	bl	800f870 <dec_lock>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011ef2:	7bfb      	ldrb	r3, [r7, #15]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d102      	bne.n	8011efe <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	2100      	movs	r1, #0
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fd fb8d 	bl	800f622 <unlock_fs>
#endif
	}
	return res;
 8011f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3710      	adds	r7, #16
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}

08011f12 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011f12:	b580      	push	{r7, lr}
 8011f14:	b084      	sub	sp, #16
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
 8011f1a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f107 0208 	add.w	r2, r7, #8
 8011f22:	4611      	mov	r1, r2
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7ff f85f 	bl	8010fe8 <validate>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f2e:	7bfb      	ldrb	r3, [r7, #15]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d126      	bne.n	8011f82 <f_readdir+0x70>
		if (!fno) {
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d106      	bne.n	8011f48 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011f3a:	2100      	movs	r1, #0
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f7fe f8b3 	bl	80100a8 <dir_sdi>
 8011f42:	4603      	mov	r3, r0
 8011f44:	73fb      	strb	r3, [r7, #15]
 8011f46:	e01c      	b.n	8011f82 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011f48:	2100      	movs	r1, #0
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7fe fa72 	bl	8010434 <dir_read>
 8011f50:	4603      	mov	r3, r0
 8011f52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011f54:	7bfb      	ldrb	r3, [r7, #15]
 8011f56:	2b04      	cmp	r3, #4
 8011f58:	d101      	bne.n	8011f5e <f_readdir+0x4c>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011f5e:	7bfb      	ldrb	r3, [r7, #15]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d10e      	bne.n	8011f82 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011f64:	6839      	ldr	r1, [r7, #0]
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7fe fb48 	bl	80105fc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f7fe f915 	bl	801019e <dir_next>
 8011f74:	4603      	mov	r3, r0
 8011f76:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011f78:	7bfb      	ldrb	r3, [r7, #15]
 8011f7a:	2b04      	cmp	r3, #4
 8011f7c:	d101      	bne.n	8011f82 <f_readdir+0x70>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	7bfa      	ldrb	r2, [r7, #15]
 8011f86:	4611      	mov	r1, r2
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fd fb4a 	bl	800f622 <unlock_fs>
 8011f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8011fa2:	6839      	ldr	r1, [r7, #0]
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f7ff ffb4 	bl	8011f12 <f_readdir>
 8011faa:	4603      	mov	r3, r0
 8011fac:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8011fae:	7bfb      	ldrb	r3, [r7, #15]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d114      	bne.n	8011fde <f_findnext+0x46>
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d011      	beq.n	8011fde <f_findnext+0x46>
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	7a5b      	ldrb	r3, [r3, #9]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00d      	beq.n	8011fde <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	f103 0109 	add.w	r1, r3, #9
 8011fcc:	2300      	movs	r3, #0
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f7fe fb9a 	bl	8010708 <pattern_matching>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d100      	bne.n	8011fdc <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8011fda:	e7e2      	b.n	8011fa2 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8011fdc:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8011fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b086      	sub	sp, #24
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
 8011ff4:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	683a      	ldr	r2, [r7, #0]
 8011ffa:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8011ffc:	6879      	ldr	r1, [r7, #4]
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	f7ff fee3 	bl	8011dca <f_opendir>
 8012004:	4603      	mov	r3, r0
 8012006:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012008:	7dfb      	ldrb	r3, [r7, #23]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d105      	bne.n	801201a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801200e:	68b9      	ldr	r1, [r7, #8]
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f7ff ffc1 	bl	8011f98 <f_findnext>
 8012016:	4603      	mov	r3, r0
 8012018:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801201a:	7dfb      	ldrb	r3, [r7, #23]
}
 801201c:	4618      	mov	r0, r3
 801201e:	3718      	adds	r7, #24
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012024:	b480      	push	{r7}
 8012026:	b087      	sub	sp, #28
 8012028:	af00      	add	r7, sp, #0
 801202a:	60f8      	str	r0, [r7, #12]
 801202c:	60b9      	str	r1, [r7, #8]
 801202e:	4613      	mov	r3, r2
 8012030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012032:	2301      	movs	r3, #1
 8012034:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012036:	2300      	movs	r3, #0
 8012038:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801203a:	4b1f      	ldr	r3, [pc, #124]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 801203c:	7a5b      	ldrb	r3, [r3, #9]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b00      	cmp	r3, #0
 8012042:	d131      	bne.n	80120a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012044:	4b1c      	ldr	r3, [pc, #112]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 8012046:	7a5b      	ldrb	r3, [r3, #9]
 8012048:	b2db      	uxtb	r3, r3
 801204a:	461a      	mov	r2, r3
 801204c:	4b1a      	ldr	r3, [pc, #104]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 801204e:	2100      	movs	r1, #0
 8012050:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012052:	4b19      	ldr	r3, [pc, #100]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 8012054:	7a5b      	ldrb	r3, [r3, #9]
 8012056:	b2db      	uxtb	r3, r3
 8012058:	4a17      	ldr	r2, [pc, #92]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4413      	add	r3, r2
 801205e:	68fa      	ldr	r2, [r7, #12]
 8012060:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012062:	4b15      	ldr	r3, [pc, #84]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 8012064:	7a5b      	ldrb	r3, [r3, #9]
 8012066:	b2db      	uxtb	r3, r3
 8012068:	461a      	mov	r2, r3
 801206a:	4b13      	ldr	r3, [pc, #76]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 801206c:	4413      	add	r3, r2
 801206e:	79fa      	ldrb	r2, [r7, #7]
 8012070:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012072:	4b11      	ldr	r3, [pc, #68]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 8012074:	7a5b      	ldrb	r3, [r3, #9]
 8012076:	b2db      	uxtb	r3, r3
 8012078:	1c5a      	adds	r2, r3, #1
 801207a:	b2d1      	uxtb	r1, r2
 801207c:	4a0e      	ldr	r2, [pc, #56]	; (80120b8 <FATFS_LinkDriverEx+0x94>)
 801207e:	7251      	strb	r1, [r2, #9]
 8012080:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012082:	7dbb      	ldrb	r3, [r7, #22]
 8012084:	3330      	adds	r3, #48	; 0x30
 8012086:	b2da      	uxtb	r2, r3
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	3301      	adds	r3, #1
 8012090:	223a      	movs	r2, #58	; 0x3a
 8012092:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	3302      	adds	r3, #2
 8012098:	222f      	movs	r2, #47	; 0x2f
 801209a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	3303      	adds	r3, #3
 80120a0:	2200      	movs	r2, #0
 80120a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80120a4:	2300      	movs	r3, #0
 80120a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80120a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	371c      	adds	r7, #28
 80120ae:	46bd      	mov	sp, r7
 80120b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop
 80120b8:	20000358 	.word	0x20000358

080120bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80120c6:	2200      	movs	r2, #0
 80120c8:	6839      	ldr	r1, [r7, #0]
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff ffaa 	bl	8012024 <FATFS_LinkDriverEx>
 80120d0:	4603      	mov	r3, r0
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3708      	adds	r7, #8
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b084      	sub	sp, #16
 80120de:	af00      	add	r7, sp, #0
 80120e0:	4603      	mov	r3, r0
 80120e2:	6039      	str	r1, [r7, #0]
 80120e4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80120e6:	2200      	movs	r2, #0
 80120e8:	2101      	movs	r1, #1
 80120ea:	2001      	movs	r0, #1
 80120ec:	f000 fb8e 	bl	801280c <osSemaphoreNew>
 80120f0:	4602      	mov	r2, r0
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	bf14      	ite	ne
 80120fe:	2301      	movne	r3, #1
 8012100:	2300      	moveq	r3, #0
 8012102:	b2db      	uxtb	r3, r3
 8012104:	60fb      	str	r3, [r7, #12]

    return ret;
 8012106:	68fb      	ldr	r3, [r7, #12]
}
 8012108:	4618      	mov	r0, r3
 801210a:	3710      	adds	r7, #16
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}

08012110 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 fcd3 	bl	8012ac4 <osSemaphoreDelete>
#endif
    return 1;
 801211e:	2301      	movs	r3, #1
}
 8012120:	4618      	mov	r0, r3
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012130:	2300      	movs	r3, #0
 8012132:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8012134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 fc05 	bl	8012948 <osSemaphoreAcquire>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d101      	bne.n	8012148 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8012144:	2301      	movs	r3, #1
 8012146:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012148:	68fb      	ldr	r3, [r7, #12]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b082      	sub	sp, #8
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 fc5a 	bl	8012a14 <osSemaphoreRelease>
#endif
}
 8012160:	bf00      	nop
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012168:	b480      	push	{r7}
 801216a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801216c:	bf00      	nop
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr
	...

08012178 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801217e:	f3ef 8305 	mrs	r3, IPSR
 8012182:	60bb      	str	r3, [r7, #8]
  return(result);
 8012184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012186:	2b00      	cmp	r3, #0
 8012188:	d10f      	bne.n	80121aa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801218a:	f3ef 8310 	mrs	r3, PRIMASK
 801218e:	607b      	str	r3, [r7, #4]
  return(result);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d105      	bne.n	80121a2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012196:	f3ef 8311 	mrs	r3, BASEPRI
 801219a:	603b      	str	r3, [r7, #0]
  return(result);
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d007      	beq.n	80121b2 <osKernelInitialize+0x3a>
 80121a2:	4b0e      	ldr	r3, [pc, #56]	; (80121dc <osKernelInitialize+0x64>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d103      	bne.n	80121b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80121aa:	f06f 0305 	mvn.w	r3, #5
 80121ae:	60fb      	str	r3, [r7, #12]
 80121b0:	e00c      	b.n	80121cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80121b2:	4b0a      	ldr	r3, [pc, #40]	; (80121dc <osKernelInitialize+0x64>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d105      	bne.n	80121c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80121ba:	4b08      	ldr	r3, [pc, #32]	; (80121dc <osKernelInitialize+0x64>)
 80121bc:	2201      	movs	r2, #1
 80121be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80121c0:	2300      	movs	r3, #0
 80121c2:	60fb      	str	r3, [r7, #12]
 80121c4:	e002      	b.n	80121cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80121c6:	f04f 33ff 	mov.w	r3, #4294967295
 80121ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80121cc:	68fb      	ldr	r3, [r7, #12]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3714      	adds	r7, #20
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	20000364 	.word	0x20000364

080121e0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80121e6:	f002 fec5 	bl	8014f74 <xTaskGetSchedulerState>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d004      	beq.n	80121fa <osKernelGetState+0x1a>
 80121f0:	2b02      	cmp	r3, #2
 80121f2:	d105      	bne.n	8012200 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80121f4:	2302      	movs	r3, #2
 80121f6:	607b      	str	r3, [r7, #4]
      break;
 80121f8:	e00c      	b.n	8012214 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80121fa:	2303      	movs	r3, #3
 80121fc:	607b      	str	r3, [r7, #4]
      break;
 80121fe:	e009      	b.n	8012214 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8012200:	4b07      	ldr	r3, [pc, #28]	; (8012220 <osKernelGetState+0x40>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2b01      	cmp	r3, #1
 8012206:	d102      	bne.n	801220e <osKernelGetState+0x2e>
        state = osKernelReady;
 8012208:	2301      	movs	r3, #1
 801220a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801220c:	e001      	b.n	8012212 <osKernelGetState+0x32>
        state = osKernelInactive;
 801220e:	2300      	movs	r3, #0
 8012210:	607b      	str	r3, [r7, #4]
      break;
 8012212:	bf00      	nop
  }

  return (state);
 8012214:	687b      	ldr	r3, [r7, #4]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3708      	adds	r7, #8
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	20000364 	.word	0x20000364

08012224 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801222a:	f3ef 8305 	mrs	r3, IPSR
 801222e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012230:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012232:	2b00      	cmp	r3, #0
 8012234:	d10f      	bne.n	8012256 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012236:	f3ef 8310 	mrs	r3, PRIMASK
 801223a:	607b      	str	r3, [r7, #4]
  return(result);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d105      	bne.n	801224e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012242:	f3ef 8311 	mrs	r3, BASEPRI
 8012246:	603b      	str	r3, [r7, #0]
  return(result);
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d007      	beq.n	801225e <osKernelStart+0x3a>
 801224e:	4b0f      	ldr	r3, [pc, #60]	; (801228c <osKernelStart+0x68>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	2b02      	cmp	r3, #2
 8012254:	d103      	bne.n	801225e <osKernelStart+0x3a>
    stat = osErrorISR;
 8012256:	f06f 0305 	mvn.w	r3, #5
 801225a:	60fb      	str	r3, [r7, #12]
 801225c:	e010      	b.n	8012280 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801225e:	4b0b      	ldr	r3, [pc, #44]	; (801228c <osKernelStart+0x68>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2b01      	cmp	r3, #1
 8012264:	d109      	bne.n	801227a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012266:	f7ff ff7f 	bl	8012168 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801226a:	4b08      	ldr	r3, [pc, #32]	; (801228c <osKernelStart+0x68>)
 801226c:	2202      	movs	r2, #2
 801226e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012270:	f002 fa12 	bl	8014698 <vTaskStartScheduler>
      stat = osOK;
 8012274:	2300      	movs	r3, #0
 8012276:	60fb      	str	r3, [r7, #12]
 8012278:	e002      	b.n	8012280 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801227a:	f04f 33ff 	mov.w	r3, #4294967295
 801227e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012280:	68fb      	ldr	r3, [r7, #12]
}
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20000364 	.word	0x20000364

08012290 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012296:	f3ef 8305 	mrs	r3, IPSR
 801229a:	60bb      	str	r3, [r7, #8]
  return(result);
 801229c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d10f      	bne.n	80122c2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122a2:	f3ef 8310 	mrs	r3, PRIMASK
 80122a6:	607b      	str	r3, [r7, #4]
  return(result);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d105      	bne.n	80122ba <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122ae:	f3ef 8311 	mrs	r3, BASEPRI
 80122b2:	603b      	str	r3, [r7, #0]
  return(result);
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d007      	beq.n	80122ca <osKernelGetTickCount+0x3a>
 80122ba:	4b08      	ldr	r3, [pc, #32]	; (80122dc <osKernelGetTickCount+0x4c>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2b02      	cmp	r3, #2
 80122c0:	d103      	bne.n	80122ca <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80122c2:	f002 fb0d 	bl	80148e0 <xTaskGetTickCountFromISR>
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	e002      	b.n	80122d0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80122ca:	f002 faf9 	bl	80148c0 <xTaskGetTickCount>
 80122ce:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80122d0:	68fb      	ldr	r3, [r7, #12]
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3710      	adds	r7, #16
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	20000364 	.word	0x20000364

080122e0 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80122e0:	b480      	push	{r7}
 80122e2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80122e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr
	...

080122f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b090      	sub	sp, #64	; 0x40
 80122f8:	af04      	add	r7, sp, #16
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012300:	2300      	movs	r3, #0
 8012302:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012304:	f3ef 8305 	mrs	r3, IPSR
 8012308:	61fb      	str	r3, [r7, #28]
  return(result);
 801230a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801230c:	2b00      	cmp	r3, #0
 801230e:	f040 808f 	bne.w	8012430 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012312:	f3ef 8310 	mrs	r3, PRIMASK
 8012316:	61bb      	str	r3, [r7, #24]
  return(result);
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d105      	bne.n	801232a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801231e:	f3ef 8311 	mrs	r3, BASEPRI
 8012322:	617b      	str	r3, [r7, #20]
  return(result);
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d003      	beq.n	8012332 <osThreadNew+0x3e>
 801232a:	4b44      	ldr	r3, [pc, #272]	; (801243c <osThreadNew+0x148>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b02      	cmp	r3, #2
 8012330:	d07e      	beq.n	8012430 <osThreadNew+0x13c>
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d07b      	beq.n	8012430 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8012338:	2380      	movs	r3, #128	; 0x80
 801233a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801233c:	2318      	movs	r3, #24
 801233e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8012340:	2300      	movs	r3, #0
 8012342:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8012344:	f04f 33ff 	mov.w	r3, #4294967295
 8012348:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d045      	beq.n	80123dc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d002      	beq.n	801235e <osThreadNew+0x6a>
        name = attr->name;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	699b      	ldr	r3, [r3, #24]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d002      	beq.n	801236c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	699b      	ldr	r3, [r3, #24]
 801236a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	2b00      	cmp	r3, #0
 8012370:	d008      	beq.n	8012384 <osThreadNew+0x90>
 8012372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012374:	2b38      	cmp	r3, #56	; 0x38
 8012376:	d805      	bhi.n	8012384 <osThreadNew+0x90>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	f003 0301 	and.w	r3, r3, #1
 8012380:	2b00      	cmp	r3, #0
 8012382:	d001      	beq.n	8012388 <osThreadNew+0x94>
        return (NULL);
 8012384:	2300      	movs	r3, #0
 8012386:	e054      	b.n	8012432 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	695b      	ldr	r3, [r3, #20]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d003      	beq.n	8012398 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	695b      	ldr	r3, [r3, #20]
 8012394:	089b      	lsrs	r3, r3, #2
 8012396:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00e      	beq.n	80123be <osThreadNew+0xca>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	2b5b      	cmp	r3, #91	; 0x5b
 80123a6:	d90a      	bls.n	80123be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d006      	beq.n	80123be <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	695b      	ldr	r3, [r3, #20]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d002      	beq.n	80123be <osThreadNew+0xca>
        mem = 1;
 80123b8:	2301      	movs	r3, #1
 80123ba:	623b      	str	r3, [r7, #32]
 80123bc:	e010      	b.n	80123e0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d10c      	bne.n	80123e0 <osThreadNew+0xec>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d108      	bne.n	80123e0 <osThreadNew+0xec>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	691b      	ldr	r3, [r3, #16]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d104      	bne.n	80123e0 <osThreadNew+0xec>
          mem = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	623b      	str	r3, [r7, #32]
 80123da:	e001      	b.n	80123e0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80123dc:	2300      	movs	r3, #0
 80123de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80123e0:	6a3b      	ldr	r3, [r7, #32]
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d110      	bne.n	8012408 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80123ee:	9202      	str	r2, [sp, #8]
 80123f0:	9301      	str	r3, [sp, #4]
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	9300      	str	r3, [sp, #0]
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f001 feef 	bl	80141e0 <xTaskCreateStatic>
 8012402:	4603      	mov	r3, r0
 8012404:	613b      	str	r3, [r7, #16]
 8012406:	e013      	b.n	8012430 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012408:	6a3b      	ldr	r3, [r7, #32]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d110      	bne.n	8012430 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	b29a      	uxth	r2, r3
 8012412:	f107 0310 	add.w	r3, r7, #16
 8012416:	9301      	str	r3, [sp, #4]
 8012418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241a:	9300      	str	r3, [sp, #0]
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012420:	68f8      	ldr	r0, [r7, #12]
 8012422:	f001 ff3d 	bl	80142a0 <xTaskCreate>
 8012426:	4603      	mov	r3, r0
 8012428:	2b01      	cmp	r3, #1
 801242a:	d001      	beq.n	8012430 <osThreadNew+0x13c>
          hTask = NULL;
 801242c:	2300      	movs	r3, #0
 801242e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012430:	693b      	ldr	r3, [r7, #16]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3730      	adds	r7, #48	; 0x30
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	20000364 	.word	0x20000364

08012440 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012440:	b580      	push	{r7, lr}
 8012442:	b086      	sub	sp, #24
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012448:	f3ef 8305 	mrs	r3, IPSR
 801244c:	613b      	str	r3, [r7, #16]
  return(result);
 801244e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10f      	bne.n	8012474 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012454:	f3ef 8310 	mrs	r3, PRIMASK
 8012458:	60fb      	str	r3, [r7, #12]
  return(result);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d105      	bne.n	801246c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012460:	f3ef 8311 	mrs	r3, BASEPRI
 8012464:	60bb      	str	r3, [r7, #8]
  return(result);
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d007      	beq.n	801247c <osDelay+0x3c>
 801246c:	4b0a      	ldr	r3, [pc, #40]	; (8012498 <osDelay+0x58>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b02      	cmp	r3, #2
 8012472:	d103      	bne.n	801247c <osDelay+0x3c>
    stat = osErrorISR;
 8012474:	f06f 0305 	mvn.w	r3, #5
 8012478:	617b      	str	r3, [r7, #20]
 801247a:	e007      	b.n	801248c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801247c:	2300      	movs	r3, #0
 801247e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d002      	beq.n	801248c <osDelay+0x4c>
      vTaskDelay(ticks);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f002 f8d0 	bl	801462c <vTaskDelay>
    }
  }

  return (stat);
 801248c:	697b      	ldr	r3, [r7, #20]
}
 801248e:	4618      	mov	r0, r3
 8012490:	3718      	adds	r7, #24
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	20000364 	.word	0x20000364

0801249c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 801249c:	b580      	push	{r7, lr}
 801249e:	b088      	sub	sp, #32
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124a4:	f3ef 8305 	mrs	r3, IPSR
 80124a8:	617b      	str	r3, [r7, #20]
  return(result);
 80124aa:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d10f      	bne.n	80124d0 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124b0:	f3ef 8310 	mrs	r3, PRIMASK
 80124b4:	613b      	str	r3, [r7, #16]
  return(result);
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d105      	bne.n	80124c8 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80124bc:	f3ef 8311 	mrs	r3, BASEPRI
 80124c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d007      	beq.n	80124d8 <osDelayUntil+0x3c>
 80124c8:	4b13      	ldr	r3, [pc, #76]	; (8012518 <osDelayUntil+0x7c>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b02      	cmp	r3, #2
 80124ce:	d103      	bne.n	80124d8 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80124d0:	f06f 0305 	mvn.w	r3, #5
 80124d4:	61fb      	str	r3, [r7, #28]
 80124d6:	e019      	b.n	801250c <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80124d8:	2300      	movs	r3, #0
 80124da:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80124dc:	f002 f9f0 	bl	80148c0 <xTaskGetTickCount>
 80124e0:	4603      	mov	r3, r0
 80124e2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	1ad3      	subs	r3, r2, r3
 80124ea:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d009      	beq.n	8012506 <osDelayUntil+0x6a>
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	db06      	blt.n	8012506 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80124f8:	f107 0308 	add.w	r3, r7, #8
 80124fc:	69b9      	ldr	r1, [r7, #24]
 80124fe:	4618      	mov	r0, r3
 8012500:	f002 f814 	bl	801452c <vTaskDelayUntil>
 8012504:	e002      	b.n	801250c <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8012506:	f06f 0303 	mvn.w	r3, #3
 801250a:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801250c:	69fb      	ldr	r3, [r7, #28]
}
 801250e:	4618      	mov	r0, r3
 8012510:	3720      	adds	r7, #32
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	20000364 	.word	0x20000364

0801251c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801251c:	b580      	push	{r7, lr}
 801251e:	b08a      	sub	sp, #40	; 0x28
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012524:	2300      	movs	r3, #0
 8012526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012528:	f3ef 8305 	mrs	r3, IPSR
 801252c:	613b      	str	r3, [r7, #16]
  return(result);
 801252e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8012530:	2b00      	cmp	r3, #0
 8012532:	f040 8085 	bne.w	8012640 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012536:	f3ef 8310 	mrs	r3, PRIMASK
 801253a:	60fb      	str	r3, [r7, #12]
  return(result);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d105      	bne.n	801254e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012542:	f3ef 8311 	mrs	r3, BASEPRI
 8012546:	60bb      	str	r3, [r7, #8]
  return(result);
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d003      	beq.n	8012556 <osMutexNew+0x3a>
 801254e:	4b3f      	ldr	r3, [pc, #252]	; (801264c <osMutexNew+0x130>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b02      	cmp	r3, #2
 8012554:	d074      	beq.n	8012640 <osMutexNew+0x124>
    if (attr != NULL) {
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d003      	beq.n	8012564 <osMutexNew+0x48>
      type = attr->attr_bits;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	623b      	str	r3, [r7, #32]
 8012562:	e001      	b.n	8012568 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8012564:	2300      	movs	r3, #0
 8012566:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012568:	6a3b      	ldr	r3, [r7, #32]
 801256a:	f003 0301 	and.w	r3, r3, #1
 801256e:	2b00      	cmp	r3, #0
 8012570:	d002      	beq.n	8012578 <osMutexNew+0x5c>
      rmtx = 1U;
 8012572:	2301      	movs	r3, #1
 8012574:	61fb      	str	r3, [r7, #28]
 8012576:	e001      	b.n	801257c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8012578:	2300      	movs	r3, #0
 801257a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801257c:	6a3b      	ldr	r3, [r7, #32]
 801257e:	f003 0308 	and.w	r3, r3, #8
 8012582:	2b00      	cmp	r3, #0
 8012584:	d15c      	bne.n	8012640 <osMutexNew+0x124>
      mem = -1;
 8012586:	f04f 33ff 	mov.w	r3, #4294967295
 801258a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d015      	beq.n	80125be <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	689b      	ldr	r3, [r3, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d006      	beq.n	80125a8 <osMutexNew+0x8c>
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	2b4f      	cmp	r3, #79	; 0x4f
 80125a0:	d902      	bls.n	80125a8 <osMutexNew+0x8c>
          mem = 1;
 80125a2:	2301      	movs	r3, #1
 80125a4:	61bb      	str	r3, [r7, #24]
 80125a6:	e00c      	b.n	80125c2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	689b      	ldr	r3, [r3, #8]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d108      	bne.n	80125c2 <osMutexNew+0xa6>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d104      	bne.n	80125c2 <osMutexNew+0xa6>
            mem = 0;
 80125b8:	2300      	movs	r3, #0
 80125ba:	61bb      	str	r3, [r7, #24]
 80125bc:	e001      	b.n	80125c2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d112      	bne.n	80125ee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d007      	beq.n	80125de <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	4619      	mov	r1, r3
 80125d4:	2004      	movs	r0, #4
 80125d6:	f000 fe7c 	bl	80132d2 <xQueueCreateMutexStatic>
 80125da:	6278      	str	r0, [r7, #36]	; 0x24
 80125dc:	e016      	b.n	801260c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	689b      	ldr	r3, [r3, #8]
 80125e2:	4619      	mov	r1, r3
 80125e4:	2001      	movs	r0, #1
 80125e6:	f000 fe74 	bl	80132d2 <xQueueCreateMutexStatic>
 80125ea:	6278      	str	r0, [r7, #36]	; 0x24
 80125ec:	e00e      	b.n	801260c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80125ee:	69bb      	ldr	r3, [r7, #24]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d10b      	bne.n	801260c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d004      	beq.n	8012604 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80125fa:	2004      	movs	r0, #4
 80125fc:	f000 fe51 	bl	80132a2 <xQueueCreateMutex>
 8012600:	6278      	str	r0, [r7, #36]	; 0x24
 8012602:	e003      	b.n	801260c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012604:	2001      	movs	r0, #1
 8012606:	f000 fe4c 	bl	80132a2 <xQueueCreateMutex>
 801260a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260e:	2b00      	cmp	r3, #0
 8012610:	d00c      	beq.n	801262c <osMutexNew+0x110>
        if (attr != NULL) {
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d003      	beq.n	8012620 <osMutexNew+0x104>
          name = attr->name;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	617b      	str	r3, [r7, #20]
 801261e:	e001      	b.n	8012624 <osMutexNew+0x108>
        } else {
          name = NULL;
 8012620:	2300      	movs	r3, #0
 8012622:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8012624:	6979      	ldr	r1, [r7, #20]
 8012626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012628:	f001 fd54 	bl	80140d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	2b00      	cmp	r3, #0
 8012630:	d006      	beq.n	8012640 <osMutexNew+0x124>
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d003      	beq.n	8012640 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263a:	f043 0301 	orr.w	r3, r3, #1
 801263e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012642:	4618      	mov	r0, r3
 8012644:	3728      	adds	r7, #40	; 0x28
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	20000364 	.word	0x20000364

08012650 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012650:	b580      	push	{r7, lr}
 8012652:	b088      	sub	sp, #32
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f023 0301 	bic.w	r3, r3, #1
 8012660:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f003 0301 	and.w	r3, r3, #1
 8012668:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801266a:	2300      	movs	r3, #0
 801266c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801266e:	f3ef 8305 	mrs	r3, IPSR
 8012672:	613b      	str	r3, [r7, #16]
  return(result);
 8012674:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012676:	2b00      	cmp	r3, #0
 8012678:	d10f      	bne.n	801269a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801267a:	f3ef 8310 	mrs	r3, PRIMASK
 801267e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d105      	bne.n	8012692 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012686:	f3ef 8311 	mrs	r3, BASEPRI
 801268a:	60bb      	str	r3, [r7, #8]
  return(result);
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d007      	beq.n	80126a2 <osMutexAcquire+0x52>
 8012692:	4b1d      	ldr	r3, [pc, #116]	; (8012708 <osMutexAcquire+0xb8>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b02      	cmp	r3, #2
 8012698:	d103      	bne.n	80126a2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 801269a:	f06f 0305 	mvn.w	r3, #5
 801269e:	61fb      	str	r3, [r7, #28]
 80126a0:	e02c      	b.n	80126fc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d103      	bne.n	80126b0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80126a8:	f06f 0303 	mvn.w	r3, #3
 80126ac:	61fb      	str	r3, [r7, #28]
 80126ae:	e025      	b.n	80126fc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d011      	beq.n	80126da <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80126b6:	6839      	ldr	r1, [r7, #0]
 80126b8:	69b8      	ldr	r0, [r7, #24]
 80126ba:	f000 fe73 	bl	80133a4 <xQueueTakeMutexRecursive>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b01      	cmp	r3, #1
 80126c2:	d01b      	beq.n	80126fc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d003      	beq.n	80126d2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80126ca:	f06f 0301 	mvn.w	r3, #1
 80126ce:	61fb      	str	r3, [r7, #28]
 80126d0:	e014      	b.n	80126fc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80126d2:	f06f 0302 	mvn.w	r3, #2
 80126d6:	61fb      	str	r3, [r7, #28]
 80126d8:	e010      	b.n	80126fc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80126da:	6839      	ldr	r1, [r7, #0]
 80126dc:	69b8      	ldr	r0, [r7, #24]
 80126de:	f001 fa19 	bl	8013b14 <xQueueSemaphoreTake>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d009      	beq.n	80126fc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d003      	beq.n	80126f6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80126ee:	f06f 0301 	mvn.w	r3, #1
 80126f2:	61fb      	str	r3, [r7, #28]
 80126f4:	e002      	b.n	80126fc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80126f6:	f06f 0302 	mvn.w	r3, #2
 80126fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80126fc:	69fb      	ldr	r3, [r7, #28]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3720      	adds	r7, #32
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	20000364 	.word	0x20000364

0801270c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801270c:	b580      	push	{r7, lr}
 801270e:	b088      	sub	sp, #32
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f023 0301 	bic.w	r3, r3, #1
 801271a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f003 0301 	and.w	r3, r3, #1
 8012722:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012724:	2300      	movs	r3, #0
 8012726:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012728:	f3ef 8305 	mrs	r3, IPSR
 801272c:	613b      	str	r3, [r7, #16]
  return(result);
 801272e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012730:	2b00      	cmp	r3, #0
 8012732:	d10f      	bne.n	8012754 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012734:	f3ef 8310 	mrs	r3, PRIMASK
 8012738:	60fb      	str	r3, [r7, #12]
  return(result);
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d105      	bne.n	801274c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012740:	f3ef 8311 	mrs	r3, BASEPRI
 8012744:	60bb      	str	r3, [r7, #8]
  return(result);
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d007      	beq.n	801275c <osMutexRelease+0x50>
 801274c:	4b16      	ldr	r3, [pc, #88]	; (80127a8 <osMutexRelease+0x9c>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2b02      	cmp	r3, #2
 8012752:	d103      	bne.n	801275c <osMutexRelease+0x50>
    stat = osErrorISR;
 8012754:	f06f 0305 	mvn.w	r3, #5
 8012758:	61fb      	str	r3, [r7, #28]
 801275a:	e01f      	b.n	801279c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d103      	bne.n	801276a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8012762:	f06f 0303 	mvn.w	r3, #3
 8012766:	61fb      	str	r3, [r7, #28]
 8012768:	e018      	b.n	801279c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d009      	beq.n	8012784 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012770:	69b8      	ldr	r0, [r7, #24]
 8012772:	f000 fde2 	bl	801333a <xQueueGiveMutexRecursive>
 8012776:	4603      	mov	r3, r0
 8012778:	2b01      	cmp	r3, #1
 801277a:	d00f      	beq.n	801279c <osMutexRelease+0x90>
        stat = osErrorResource;
 801277c:	f06f 0302 	mvn.w	r3, #2
 8012780:	61fb      	str	r3, [r7, #28]
 8012782:	e00b      	b.n	801279c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012784:	2300      	movs	r3, #0
 8012786:	2200      	movs	r2, #0
 8012788:	2100      	movs	r1, #0
 801278a:	69b8      	ldr	r0, [r7, #24]
 801278c:	f000 feb0 	bl	80134f0 <xQueueGenericSend>
 8012790:	4603      	mov	r3, r0
 8012792:	2b01      	cmp	r3, #1
 8012794:	d002      	beq.n	801279c <osMutexRelease+0x90>
        stat = osErrorResource;
 8012796:	f06f 0302 	mvn.w	r3, #2
 801279a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801279c:	69fb      	ldr	r3, [r7, #28]
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3720      	adds	r7, #32
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	20000364 	.word	0x20000364

080127ac <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b088      	sub	sp, #32
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f023 0301 	bic.w	r3, r3, #1
 80127ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127bc:	f3ef 8305 	mrs	r3, IPSR
 80127c0:	617b      	str	r3, [r7, #20]
  return(result);
 80127c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d112      	bne.n	80127ee <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127c8:	f3ef 8310 	mrs	r3, PRIMASK
 80127cc:	613b      	str	r3, [r7, #16]
  return(result);
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d105      	bne.n	80127e0 <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80127d4:	f3ef 8311 	mrs	r3, BASEPRI
 80127d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d003      	beq.n	80127e8 <osMutexGetOwner+0x3c>
 80127e0:	4b09      	ldr	r3, [pc, #36]	; (8012808 <osMutexGetOwner+0x5c>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2b02      	cmp	r3, #2
 80127e6:	d002      	beq.n	80127ee <osMutexGetOwner+0x42>
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d102      	bne.n	80127f4 <osMutexGetOwner+0x48>
    owner = NULL;
 80127ee:	2300      	movs	r3, #0
 80127f0:	61fb      	str	r3, [r7, #28]
 80127f2:	e003      	b.n	80127fc <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 80127f4:	69b8      	ldr	r0, [r7, #24]
 80127f6:	f000 fd87 	bl	8013308 <xQueueGetMutexHolder>
 80127fa:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 80127fc:	69fb      	ldr	r3, [r7, #28]
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3720      	adds	r7, #32
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	20000364 	.word	0x20000364

0801280c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801280c:	b580      	push	{r7, lr}
 801280e:	b08c      	sub	sp, #48	; 0x30
 8012810:	af02      	add	r7, sp, #8
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012818:	2300      	movs	r3, #0
 801281a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801281c:	f3ef 8305 	mrs	r3, IPSR
 8012820:	61bb      	str	r3, [r7, #24]
  return(result);
 8012822:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012824:	2b00      	cmp	r3, #0
 8012826:	f040 8087 	bne.w	8012938 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801282a:	f3ef 8310 	mrs	r3, PRIMASK
 801282e:	617b      	str	r3, [r7, #20]
  return(result);
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d105      	bne.n	8012842 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012836:	f3ef 8311 	mrs	r3, BASEPRI
 801283a:	613b      	str	r3, [r7, #16]
  return(result);
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d003      	beq.n	801284a <osSemaphoreNew+0x3e>
 8012842:	4b40      	ldr	r3, [pc, #256]	; (8012944 <osSemaphoreNew+0x138>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2b02      	cmp	r3, #2
 8012848:	d076      	beq.n	8012938 <osSemaphoreNew+0x12c>
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d073      	beq.n	8012938 <osSemaphoreNew+0x12c>
 8012850:	68ba      	ldr	r2, [r7, #8]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	429a      	cmp	r2, r3
 8012856:	d86f      	bhi.n	8012938 <osSemaphoreNew+0x12c>
    mem = -1;
 8012858:	f04f 33ff 	mov.w	r3, #4294967295
 801285c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d015      	beq.n	8012890 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d006      	beq.n	801287a <osSemaphoreNew+0x6e>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	2b4f      	cmp	r3, #79	; 0x4f
 8012872:	d902      	bls.n	801287a <osSemaphoreNew+0x6e>
        mem = 1;
 8012874:	2301      	movs	r3, #1
 8012876:	623b      	str	r3, [r7, #32]
 8012878:	e00c      	b.n	8012894 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d108      	bne.n	8012894 <osSemaphoreNew+0x88>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	68db      	ldr	r3, [r3, #12]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d104      	bne.n	8012894 <osSemaphoreNew+0x88>
          mem = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	623b      	str	r3, [r7, #32]
 801288e:	e001      	b.n	8012894 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8012894:	6a3b      	ldr	r3, [r7, #32]
 8012896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801289a:	d04d      	beq.n	8012938 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d129      	bne.n	80128f6 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80128a2:	6a3b      	ldr	r3, [r7, #32]
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d10b      	bne.n	80128c0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	689a      	ldr	r2, [r3, #8]
 80128ac:	2303      	movs	r3, #3
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	4613      	mov	r3, r2
 80128b2:	2200      	movs	r2, #0
 80128b4:	2100      	movs	r1, #0
 80128b6:	2001      	movs	r0, #1
 80128b8:	f000 fbf8 	bl	80130ac <xQueueGenericCreateStatic>
 80128bc:	6278      	str	r0, [r7, #36]	; 0x24
 80128be:	e005      	b.n	80128cc <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80128c0:	2203      	movs	r2, #3
 80128c2:	2100      	movs	r1, #0
 80128c4:	2001      	movs	r0, #1
 80128c6:	f000 fc6e 	bl	80131a6 <xQueueGenericCreate>
 80128ca:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80128cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d022      	beq.n	8012918 <osSemaphoreNew+0x10c>
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d01f      	beq.n	8012918 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80128d8:	2300      	movs	r3, #0
 80128da:	2200      	movs	r2, #0
 80128dc:	2100      	movs	r1, #0
 80128de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128e0:	f000 fe06 	bl	80134f0 <xQueueGenericSend>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d016      	beq.n	8012918 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80128ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128ec:	f001 faa5 	bl	8013e3a <vQueueDelete>
            hSemaphore = NULL;
 80128f0:	2300      	movs	r3, #0
 80128f2:	627b      	str	r3, [r7, #36]	; 0x24
 80128f4:	e010      	b.n	8012918 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80128f6:	6a3b      	ldr	r3, [r7, #32]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d108      	bne.n	801290e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	689b      	ldr	r3, [r3, #8]
 8012900:	461a      	mov	r2, r3
 8012902:	68b9      	ldr	r1, [r7, #8]
 8012904:	68f8      	ldr	r0, [r7, #12]
 8012906:	f000 fd84 	bl	8013412 <xQueueCreateCountingSemaphoreStatic>
 801290a:	6278      	str	r0, [r7, #36]	; 0x24
 801290c:	e004      	b.n	8012918 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801290e:	68b9      	ldr	r1, [r7, #8]
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f000 fdb7 	bl	8013484 <xQueueCreateCountingSemaphore>
 8012916:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00c      	beq.n	8012938 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d003      	beq.n	801292c <osSemaphoreNew+0x120>
          name = attr->name;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	61fb      	str	r3, [r7, #28]
 801292a:	e001      	b.n	8012930 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012930:	69f9      	ldr	r1, [r7, #28]
 8012932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012934:	f001 fbce 	bl	80140d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801293a:	4618      	mov	r0, r3
 801293c:	3728      	adds	r7, #40	; 0x28
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	20000364 	.word	0x20000364

08012948 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012956:	2300      	movs	r3, #0
 8012958:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d103      	bne.n	8012968 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012960:	f06f 0303 	mvn.w	r3, #3
 8012964:	61fb      	str	r3, [r7, #28]
 8012966:	e04b      	b.n	8012a00 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012968:	f3ef 8305 	mrs	r3, IPSR
 801296c:	617b      	str	r3, [r7, #20]
  return(result);
 801296e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10f      	bne.n	8012994 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012974:	f3ef 8310 	mrs	r3, PRIMASK
 8012978:	613b      	str	r3, [r7, #16]
  return(result);
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d105      	bne.n	801298c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012980:	f3ef 8311 	mrs	r3, BASEPRI
 8012984:	60fb      	str	r3, [r7, #12]
  return(result);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d026      	beq.n	80129da <osSemaphoreAcquire+0x92>
 801298c:	4b1f      	ldr	r3, [pc, #124]	; (8012a0c <osSemaphoreAcquire+0xc4>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2b02      	cmp	r3, #2
 8012992:	d122      	bne.n	80129da <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d003      	beq.n	80129a2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801299a:	f06f 0303 	mvn.w	r3, #3
 801299e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80129a0:	e02d      	b.n	80129fe <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80129a2:	2300      	movs	r3, #0
 80129a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80129a6:	f107 0308 	add.w	r3, r7, #8
 80129aa:	461a      	mov	r2, r3
 80129ac:	2100      	movs	r1, #0
 80129ae:	69b8      	ldr	r0, [r7, #24]
 80129b0:	f001 f9c0 	bl	8013d34 <xQueueReceiveFromISR>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d003      	beq.n	80129c2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80129ba:	f06f 0302 	mvn.w	r3, #2
 80129be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80129c0:	e01d      	b.n	80129fe <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d01a      	beq.n	80129fe <osSemaphoreAcquire+0xb6>
 80129c8:	4b11      	ldr	r3, [pc, #68]	; (8012a10 <osSemaphoreAcquire+0xc8>)
 80129ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129ce:	601a      	str	r2, [r3, #0]
 80129d0:	f3bf 8f4f 	dsb	sy
 80129d4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80129d8:	e011      	b.n	80129fe <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80129da:	6839      	ldr	r1, [r7, #0]
 80129dc:	69b8      	ldr	r0, [r7, #24]
 80129de:	f001 f899 	bl	8013b14 <xQueueSemaphoreTake>
 80129e2:	4603      	mov	r3, r0
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d00b      	beq.n	8012a00 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d003      	beq.n	80129f6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80129ee:	f06f 0301 	mvn.w	r3, #1
 80129f2:	61fb      	str	r3, [r7, #28]
 80129f4:	e004      	b.n	8012a00 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80129f6:	f06f 0302 	mvn.w	r3, #2
 80129fa:	61fb      	str	r3, [r7, #28]
 80129fc:	e000      	b.n	8012a00 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80129fe:	bf00      	nop
      }
    }
  }

  return (stat);
 8012a00:	69fb      	ldr	r3, [r7, #28]
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3720      	adds	r7, #32
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	20000364 	.word	0x20000364
 8012a10:	e000ed04 	.word	0xe000ed04

08012a14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b088      	sub	sp, #32
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012a20:	2300      	movs	r3, #0
 8012a22:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012a24:	69bb      	ldr	r3, [r7, #24]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d103      	bne.n	8012a32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012a2a:	f06f 0303 	mvn.w	r3, #3
 8012a2e:	61fb      	str	r3, [r7, #28]
 8012a30:	e03e      	b.n	8012ab0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a32:	f3ef 8305 	mrs	r3, IPSR
 8012a36:	617b      	str	r3, [r7, #20]
  return(result);
 8012a38:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d10f      	bne.n	8012a5e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8012a42:	613b      	str	r3, [r7, #16]
  return(result);
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d105      	bne.n	8012a56 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8012a4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d01e      	beq.n	8012a94 <osSemaphoreRelease+0x80>
 8012a56:	4b19      	ldr	r3, [pc, #100]	; (8012abc <osSemaphoreRelease+0xa8>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2b02      	cmp	r3, #2
 8012a5c:	d11a      	bne.n	8012a94 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012a62:	f107 0308 	add.w	r3, r7, #8
 8012a66:	4619      	mov	r1, r3
 8012a68:	69b8      	ldr	r0, [r7, #24]
 8012a6a:	f000 fedf 	bl	801382c <xQueueGiveFromISR>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d003      	beq.n	8012a7c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8012a74:	f06f 0302 	mvn.w	r3, #2
 8012a78:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012a7a:	e018      	b.n	8012aae <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d015      	beq.n	8012aae <osSemaphoreRelease+0x9a>
 8012a82:	4b0f      	ldr	r3, [pc, #60]	; (8012ac0 <osSemaphoreRelease+0xac>)
 8012a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a88:	601a      	str	r2, [r3, #0]
 8012a8a:	f3bf 8f4f 	dsb	sy
 8012a8e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012a92:	e00c      	b.n	8012aae <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012a94:	2300      	movs	r3, #0
 8012a96:	2200      	movs	r2, #0
 8012a98:	2100      	movs	r1, #0
 8012a9a:	69b8      	ldr	r0, [r7, #24]
 8012a9c:	f000 fd28 	bl	80134f0 <xQueueGenericSend>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d004      	beq.n	8012ab0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8012aa6:	f06f 0302 	mvn.w	r3, #2
 8012aaa:	61fb      	str	r3, [r7, #28]
 8012aac:	e000      	b.n	8012ab0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012aae:	bf00      	nop
    }
  }

  return (stat);
 8012ab0:	69fb      	ldr	r3, [r7, #28]
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3720      	adds	r7, #32
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	bf00      	nop
 8012abc:	20000364 	.word	0x20000364
 8012ac0:	e000ed04 	.word	0xe000ed04

08012ac4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b088      	sub	sp, #32
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ad0:	f3ef 8305 	mrs	r3, IPSR
 8012ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8012ad6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d10f      	bne.n	8012afc <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012adc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d105      	bne.n	8012af4 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8012aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d007      	beq.n	8012b04 <osSemaphoreDelete+0x40>
 8012af4:	4b0d      	ldr	r3, [pc, #52]	; (8012b2c <osSemaphoreDelete+0x68>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b02      	cmp	r3, #2
 8012afa:	d103      	bne.n	8012b04 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8012afc:	f06f 0305 	mvn.w	r3, #5
 8012b00:	61fb      	str	r3, [r7, #28]
 8012b02:	e00e      	b.n	8012b22 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d103      	bne.n	8012b12 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8012b0a:	f06f 0303 	mvn.w	r3, #3
 8012b0e:	61fb      	str	r3, [r7, #28]
 8012b10:	e007      	b.n	8012b22 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012b12:	69b8      	ldr	r0, [r7, #24]
 8012b14:	f001 fb06 	bl	8014124 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8012b1c:	69b8      	ldr	r0, [r7, #24]
 8012b1e:	f001 f98c 	bl	8013e3a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012b22:	69fb      	ldr	r3, [r7, #28]
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3720      	adds	r7, #32
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	20000364 	.word	0x20000364

08012b30 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b08c      	sub	sp, #48	; 0x30
 8012b34:	af02      	add	r7, sp, #8
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b40:	f3ef 8305 	mrs	r3, IPSR
 8012b44:	61bb      	str	r3, [r7, #24]
  return(result);
 8012b46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d170      	bne.n	8012c2e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8012b50:	617b      	str	r3, [r7, #20]
  return(result);
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d105      	bne.n	8012b64 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b58:	f3ef 8311 	mrs	r3, BASEPRI
 8012b5c:	613b      	str	r3, [r7, #16]
  return(result);
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d003      	beq.n	8012b6c <osMessageQueueNew+0x3c>
 8012b64:	4b34      	ldr	r3, [pc, #208]	; (8012c38 <osMessageQueueNew+0x108>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b02      	cmp	r3, #2
 8012b6a:	d060      	beq.n	8012c2e <osMessageQueueNew+0xfe>
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d05d      	beq.n	8012c2e <osMessageQueueNew+0xfe>
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d05a      	beq.n	8012c2e <osMessageQueueNew+0xfe>
    mem = -1;
 8012b78:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d029      	beq.n	8012bd8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	689b      	ldr	r3, [r3, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d012      	beq.n	8012bb2 <osMessageQueueNew+0x82>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	68db      	ldr	r3, [r3, #12]
 8012b90:	2b4f      	cmp	r3, #79	; 0x4f
 8012b92:	d90e      	bls.n	8012bb2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d00a      	beq.n	8012bb2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	695a      	ldr	r2, [r3, #20]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	68b9      	ldr	r1, [r7, #8]
 8012ba4:	fb01 f303 	mul.w	r3, r1, r3
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d302      	bcc.n	8012bb2 <osMessageQueueNew+0x82>
        mem = 1;
 8012bac:	2301      	movs	r3, #1
 8012bae:	623b      	str	r3, [r7, #32]
 8012bb0:	e014      	b.n	8012bdc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	689b      	ldr	r3, [r3, #8]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d110      	bne.n	8012bdc <osMessageQueueNew+0xac>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d10c      	bne.n	8012bdc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d108      	bne.n	8012bdc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	695b      	ldr	r3, [r3, #20]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d104      	bne.n	8012bdc <osMessageQueueNew+0xac>
          mem = 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	623b      	str	r3, [r7, #32]
 8012bd6:	e001      	b.n	8012bdc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012bdc:	6a3b      	ldr	r3, [r7, #32]
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d10c      	bne.n	8012bfc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	691a      	ldr	r2, [r3, #16]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6899      	ldr	r1, [r3, #8]
 8012bea:	2300      	movs	r3, #0
 8012bec:	9300      	str	r3, [sp, #0]
 8012bee:	460b      	mov	r3, r1
 8012bf0:	68b9      	ldr	r1, [r7, #8]
 8012bf2:	68f8      	ldr	r0, [r7, #12]
 8012bf4:	f000 fa5a 	bl	80130ac <xQueueGenericCreateStatic>
 8012bf8:	6278      	str	r0, [r7, #36]	; 0x24
 8012bfa:	e008      	b.n	8012c0e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012bfc:	6a3b      	ldr	r3, [r7, #32]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d105      	bne.n	8012c0e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012c02:	2200      	movs	r2, #0
 8012c04:	68b9      	ldr	r1, [r7, #8]
 8012c06:	68f8      	ldr	r0, [r7, #12]
 8012c08:	f000 facd 	bl	80131a6 <xQueueGenericCreate>
 8012c0c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00c      	beq.n	8012c2e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d003      	beq.n	8012c22 <osMessageQueueNew+0xf2>
        name = attr->name;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	61fb      	str	r3, [r7, #28]
 8012c20:	e001      	b.n	8012c26 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8012c22:	2300      	movs	r3, #0
 8012c24:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012c26:	69f9      	ldr	r1, [r7, #28]
 8012c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c2a:	f001 fa53 	bl	80140d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3728      	adds	r7, #40	; 0x28
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	20000364 	.word	0x20000364

08012c3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b08a      	sub	sp, #40	; 0x28
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	603b      	str	r3, [r7, #0]
 8012c48:	4613      	mov	r3, r2
 8012c4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012c50:	2300      	movs	r3, #0
 8012c52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c54:	f3ef 8305 	mrs	r3, IPSR
 8012c58:	61fb      	str	r3, [r7, #28]
  return(result);
 8012c5a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d10f      	bne.n	8012c80 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c60:	f3ef 8310 	mrs	r3, PRIMASK
 8012c64:	61bb      	str	r3, [r7, #24]
  return(result);
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d105      	bne.n	8012c78 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8012c70:	617b      	str	r3, [r7, #20]
  return(result);
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d02c      	beq.n	8012cd2 <osMessageQueuePut+0x96>
 8012c78:	4b28      	ldr	r3, [pc, #160]	; (8012d1c <osMessageQueuePut+0xe0>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	d128      	bne.n	8012cd2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012c80:	6a3b      	ldr	r3, [r7, #32]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d005      	beq.n	8012c92 <osMessageQueuePut+0x56>
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d002      	beq.n	8012c92 <osMessageQueuePut+0x56>
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d003      	beq.n	8012c9a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012c92:	f06f 0303 	mvn.w	r3, #3
 8012c96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012c98:	e039      	b.n	8012d0e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012c9e:	f107 0210 	add.w	r2, r7, #16
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	68b9      	ldr	r1, [r7, #8]
 8012ca6:	6a38      	ldr	r0, [r7, #32]
 8012ca8:	f000 fd24 	bl	80136f4 <xQueueGenericSendFromISR>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	d003      	beq.n	8012cba <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012cb2:	f06f 0302 	mvn.w	r3, #2
 8012cb6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012cb8:	e029      	b.n	8012d0e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d026      	beq.n	8012d0e <osMessageQueuePut+0xd2>
 8012cc0:	4b17      	ldr	r3, [pc, #92]	; (8012d20 <osMessageQueuePut+0xe4>)
 8012cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cc6:	601a      	str	r2, [r3, #0]
 8012cc8:	f3bf 8f4f 	dsb	sy
 8012ccc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012cd0:	e01d      	b.n	8012d0e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012cd2:	6a3b      	ldr	r3, [r7, #32]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d002      	beq.n	8012cde <osMessageQueuePut+0xa2>
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d103      	bne.n	8012ce6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012cde:	f06f 0303 	mvn.w	r3, #3
 8012ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ce4:	e014      	b.n	8012d10 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	683a      	ldr	r2, [r7, #0]
 8012cea:	68b9      	ldr	r1, [r7, #8]
 8012cec:	6a38      	ldr	r0, [r7, #32]
 8012cee:	f000 fbff 	bl	80134f0 <xQueueGenericSend>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d00b      	beq.n	8012d10 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d003      	beq.n	8012d06 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012cfe:	f06f 0301 	mvn.w	r3, #1
 8012d02:	627b      	str	r3, [r7, #36]	; 0x24
 8012d04:	e004      	b.n	8012d10 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012d06:	f06f 0302 	mvn.w	r3, #2
 8012d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8012d0c:	e000      	b.n	8012d10 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3728      	adds	r7, #40	; 0x28
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	20000364 	.word	0x20000364
 8012d20:	e000ed04 	.word	0xe000ed04

08012d24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b08a      	sub	sp, #40	; 0x28
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012d36:	2300      	movs	r3, #0
 8012d38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d3a:	f3ef 8305 	mrs	r3, IPSR
 8012d3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8012d40:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d10f      	bne.n	8012d66 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d46:	f3ef 8310 	mrs	r3, PRIMASK
 8012d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d105      	bne.n	8012d5e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012d52:	f3ef 8311 	mrs	r3, BASEPRI
 8012d56:	617b      	str	r3, [r7, #20]
  return(result);
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d02c      	beq.n	8012db8 <osMessageQueueGet+0x94>
 8012d5e:	4b28      	ldr	r3, [pc, #160]	; (8012e00 <osMessageQueueGet+0xdc>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2b02      	cmp	r3, #2
 8012d64:	d128      	bne.n	8012db8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d66:	6a3b      	ldr	r3, [r7, #32]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d005      	beq.n	8012d78 <osMessageQueueGet+0x54>
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d002      	beq.n	8012d78 <osMessageQueueGet+0x54>
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d003      	beq.n	8012d80 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012d78:	f06f 0303 	mvn.w	r3, #3
 8012d7c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d7e:	e038      	b.n	8012df2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012d80:	2300      	movs	r3, #0
 8012d82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012d84:	f107 0310 	add.w	r3, r7, #16
 8012d88:	461a      	mov	r2, r3
 8012d8a:	68b9      	ldr	r1, [r7, #8]
 8012d8c:	6a38      	ldr	r0, [r7, #32]
 8012d8e:	f000 ffd1 	bl	8013d34 <xQueueReceiveFromISR>
 8012d92:	4603      	mov	r3, r0
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d003      	beq.n	8012da0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012d98:	f06f 0302 	mvn.w	r3, #2
 8012d9c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d9e:	e028      	b.n	8012df2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d025      	beq.n	8012df2 <osMessageQueueGet+0xce>
 8012da6:	4b17      	ldr	r3, [pc, #92]	; (8012e04 <osMessageQueueGet+0xe0>)
 8012da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dac:	601a      	str	r2, [r3, #0]
 8012dae:	f3bf 8f4f 	dsb	sy
 8012db2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012db6:	e01c      	b.n	8012df2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012db8:	6a3b      	ldr	r3, [r7, #32]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d002      	beq.n	8012dc4 <osMessageQueueGet+0xa0>
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d103      	bne.n	8012dcc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012dc4:	f06f 0303 	mvn.w	r3, #3
 8012dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8012dca:	e013      	b.n	8012df4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012dcc:	683a      	ldr	r2, [r7, #0]
 8012dce:	68b9      	ldr	r1, [r7, #8]
 8012dd0:	6a38      	ldr	r0, [r7, #32]
 8012dd2:	f000 fdbd 	bl	8013950 <xQueueReceive>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d00b      	beq.n	8012df4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d003      	beq.n	8012dea <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012de2:	f06f 0301 	mvn.w	r3, #1
 8012de6:	627b      	str	r3, [r7, #36]	; 0x24
 8012de8:	e004      	b.n	8012df4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012dea:	f06f 0302 	mvn.w	r3, #2
 8012dee:	627b      	str	r3, [r7, #36]	; 0x24
 8012df0:	e000      	b.n	8012df4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012df2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3728      	adds	r7, #40	; 0x28
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	20000364 	.word	0x20000364
 8012e04:	e000ed04 	.word	0xe000ed04

08012e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e08:	b480      	push	{r7}
 8012e0a:	b085      	sub	sp, #20
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	60f8      	str	r0, [r7, #12]
 8012e10:	60b9      	str	r1, [r7, #8]
 8012e12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	4a07      	ldr	r2, [pc, #28]	; (8012e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8012e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	4a06      	ldr	r2, [pc, #24]	; (8012e38 <vApplicationGetIdleTaskMemory+0x30>)
 8012e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2280      	movs	r2, #128	; 0x80
 8012e24:	601a      	str	r2, [r3, #0]
}
 8012e26:	bf00      	nop
 8012e28:	3714      	adds	r7, #20
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr
 8012e32:	bf00      	nop
 8012e34:	20000368 	.word	0x20000368
 8012e38:	200003c4 	.word	0x200003c4

08012e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012e3c:	b480      	push	{r7}
 8012e3e:	b085      	sub	sp, #20
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	4a07      	ldr	r2, [pc, #28]	; (8012e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8012e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	4a06      	ldr	r2, [pc, #24]	; (8012e6c <vApplicationGetTimerTaskMemory+0x30>)
 8012e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012e5a:	601a      	str	r2, [r3, #0]
}
 8012e5c:	bf00      	nop
 8012e5e:	3714      	adds	r7, #20
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr
 8012e68:	200005c4 	.word	0x200005c4
 8012e6c:	20000620 	.word	0x20000620

08012e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f103 0208 	add.w	r2, r3, #8
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f04f 32ff 	mov.w	r2, #4294967295
 8012e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f103 0208 	add.w	r2, r3, #8
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f103 0208 	add.w	r2, r3, #8
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ea4:	bf00      	nop
 8012ea6:	370c      	adds	r7, #12
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012ebe:	bf00      	nop
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr

08012eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012eca:	b480      	push	{r7}
 8012ecc:	b085      	sub	sp, #20
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
 8012ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	689a      	ldr	r2, [r3, #8]
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	689b      	ldr	r3, [r3, #8]
 8012eec:	683a      	ldr	r2, [r7, #0]
 8012eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	683a      	ldr	r2, [r7, #0]
 8012ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	1c5a      	adds	r2, r3, #1
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	601a      	str	r2, [r3, #0]
}
 8012f06:	bf00      	nop
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr

08012f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f12:	b480      	push	{r7}
 8012f14:	b085      	sub	sp, #20
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
 8012f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f28:	d103      	bne.n	8012f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	60fb      	str	r3, [r7, #12]
 8012f30:	e00c      	b.n	8012f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	3308      	adds	r3, #8
 8012f36:	60fb      	str	r3, [r7, #12]
 8012f38:	e002      	b.n	8012f40 <vListInsert+0x2e>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	68ba      	ldr	r2, [r7, #8]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d2f6      	bcs.n	8012f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	685a      	ldr	r2, [r3, #4]
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	683a      	ldr	r2, [r7, #0]
 8012f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	68fa      	ldr	r2, [r7, #12]
 8012f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	683a      	ldr	r2, [r7, #0]
 8012f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	1c5a      	adds	r2, r3, #1
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	601a      	str	r2, [r3, #0]
}
 8012f78:	bf00      	nop
 8012f7a:	3714      	adds	r7, #20
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f82:	4770      	bx	lr

08012f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012f84:	b480      	push	{r7}
 8012f86:	b085      	sub	sp, #20
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	691b      	ldr	r3, [r3, #16]
 8012f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	6892      	ldr	r2, [r2, #8]
 8012f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	689b      	ldr	r3, [r3, #8]
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	6852      	ldr	r2, [r2, #4]
 8012fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d103      	bne.n	8012fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	689a      	ldr	r2, [r3, #8]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	1e5a      	subs	r2, r3, #1
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3714      	adds	r7, #20
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d10b      	bne.n	8013004 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff0:	b672      	cpsid	i
 8012ff2:	f383 8811 	msr	BASEPRI, r3
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	b662      	cpsie	i
 8013000:	60bb      	str	r3, [r7, #8]
 8013002:	e7fe      	b.n	8013002 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013004:	f002 fdf8 	bl	8015bf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	681a      	ldr	r2, [r3, #0]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013010:	68f9      	ldr	r1, [r7, #12]
 8013012:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013014:	fb01 f303 	mul.w	r3, r1, r3
 8013018:	441a      	add	r2, r3
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2200      	movs	r2, #0
 8013022:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013034:	3b01      	subs	r3, #1
 8013036:	68f9      	ldr	r1, [r7, #12]
 8013038:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801303a:	fb01 f303 	mul.w	r3, r1, r3
 801303e:	441a      	add	r2, r3
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	22ff      	movs	r2, #255	; 0xff
 8013048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	22ff      	movs	r2, #255	; 0xff
 8013050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d114      	bne.n	8013084 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	691b      	ldr	r3, [r3, #16]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d01a      	beq.n	8013098 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	3310      	adds	r3, #16
 8013066:	4618      	mov	r0, r3
 8013068:	f001 fdb6 	bl	8014bd8 <xTaskRemoveFromEventList>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d012      	beq.n	8013098 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013072:	4b0d      	ldr	r3, [pc, #52]	; (80130a8 <xQueueGenericReset+0xd0>)
 8013074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013078:	601a      	str	r2, [r3, #0]
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	f3bf 8f6f 	isb	sy
 8013082:	e009      	b.n	8013098 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	3310      	adds	r3, #16
 8013088:	4618      	mov	r0, r3
 801308a:	f7ff fef1 	bl	8012e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	3324      	adds	r3, #36	; 0x24
 8013092:	4618      	mov	r0, r3
 8013094:	f7ff feec 	bl	8012e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013098:	f002 fde0 	bl	8015c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801309c:	2301      	movs	r3, #1
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3710      	adds	r7, #16
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	e000ed04 	.word	0xe000ed04

080130ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b08e      	sub	sp, #56	; 0x38
 80130b0:	af02      	add	r7, sp, #8
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	607a      	str	r2, [r7, #4]
 80130b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d10b      	bne.n	80130d8 <xQueueGenericCreateStatic+0x2c>
 80130c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c4:	b672      	cpsid	i
 80130c6:	f383 8811 	msr	BASEPRI, r3
 80130ca:	f3bf 8f6f 	isb	sy
 80130ce:	f3bf 8f4f 	dsb	sy
 80130d2:	b662      	cpsie	i
 80130d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80130d6:	e7fe      	b.n	80130d6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d10b      	bne.n	80130f6 <xQueueGenericCreateStatic+0x4a>
 80130de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e2:	b672      	cpsid	i
 80130e4:	f383 8811 	msr	BASEPRI, r3
 80130e8:	f3bf 8f6f 	isb	sy
 80130ec:	f3bf 8f4f 	dsb	sy
 80130f0:	b662      	cpsie	i
 80130f2:	627b      	str	r3, [r7, #36]	; 0x24
 80130f4:	e7fe      	b.n	80130f4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d002      	beq.n	8013102 <xQueueGenericCreateStatic+0x56>
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d001      	beq.n	8013106 <xQueueGenericCreateStatic+0x5a>
 8013102:	2301      	movs	r3, #1
 8013104:	e000      	b.n	8013108 <xQueueGenericCreateStatic+0x5c>
 8013106:	2300      	movs	r3, #0
 8013108:	2b00      	cmp	r3, #0
 801310a:	d10b      	bne.n	8013124 <xQueueGenericCreateStatic+0x78>
 801310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013110:	b672      	cpsid	i
 8013112:	f383 8811 	msr	BASEPRI, r3
 8013116:	f3bf 8f6f 	isb	sy
 801311a:	f3bf 8f4f 	dsb	sy
 801311e:	b662      	cpsie	i
 8013120:	623b      	str	r3, [r7, #32]
 8013122:	e7fe      	b.n	8013122 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d102      	bne.n	8013130 <xQueueGenericCreateStatic+0x84>
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d101      	bne.n	8013134 <xQueueGenericCreateStatic+0x88>
 8013130:	2301      	movs	r3, #1
 8013132:	e000      	b.n	8013136 <xQueueGenericCreateStatic+0x8a>
 8013134:	2300      	movs	r3, #0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d10b      	bne.n	8013152 <xQueueGenericCreateStatic+0xa6>
 801313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801313e:	b672      	cpsid	i
 8013140:	f383 8811 	msr	BASEPRI, r3
 8013144:	f3bf 8f6f 	isb	sy
 8013148:	f3bf 8f4f 	dsb	sy
 801314c:	b662      	cpsie	i
 801314e:	61fb      	str	r3, [r7, #28]
 8013150:	e7fe      	b.n	8013150 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013152:	2350      	movs	r3, #80	; 0x50
 8013154:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	2b50      	cmp	r3, #80	; 0x50
 801315a:	d00b      	beq.n	8013174 <xQueueGenericCreateStatic+0xc8>
 801315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013160:	b672      	cpsid	i
 8013162:	f383 8811 	msr	BASEPRI, r3
 8013166:	f3bf 8f6f 	isb	sy
 801316a:	f3bf 8f4f 	dsb	sy
 801316e:	b662      	cpsie	i
 8013170:	61bb      	str	r3, [r7, #24]
 8013172:	e7fe      	b.n	8013172 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013174:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317c:	2b00      	cmp	r3, #0
 801317e:	d00d      	beq.n	801319c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013182:	2201      	movs	r2, #1
 8013184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013188:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318e:	9300      	str	r3, [sp, #0]
 8013190:	4613      	mov	r3, r2
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	68b9      	ldr	r1, [r7, #8]
 8013196:	68f8      	ldr	r0, [r7, #12]
 8013198:	f000 f846 	bl	8013228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801319e:	4618      	mov	r0, r3
 80131a0:	3730      	adds	r7, #48	; 0x30
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b08a      	sub	sp, #40	; 0x28
 80131aa:	af02      	add	r7, sp, #8
 80131ac:	60f8      	str	r0, [r7, #12]
 80131ae:	60b9      	str	r1, [r7, #8]
 80131b0:	4613      	mov	r3, r2
 80131b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d10b      	bne.n	80131d2 <xQueueGenericCreate+0x2c>
 80131ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131be:	b672      	cpsid	i
 80131c0:	f383 8811 	msr	BASEPRI, r3
 80131c4:	f3bf 8f6f 	isb	sy
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	b662      	cpsie	i
 80131ce:	613b      	str	r3, [r7, #16]
 80131d0:	e7fe      	b.n	80131d0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d102      	bne.n	80131de <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80131d8:	2300      	movs	r3, #0
 80131da:	61fb      	str	r3, [r7, #28]
 80131dc:	e004      	b.n	80131e8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	68ba      	ldr	r2, [r7, #8]
 80131e2:	fb02 f303 	mul.w	r3, r2, r3
 80131e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	3350      	adds	r3, #80	; 0x50
 80131ec:	4618      	mov	r0, r3
 80131ee:	f002 fe25 	bl	8015e3c <pvPortMalloc>
 80131f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d011      	beq.n	801321e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	3350      	adds	r3, #80	; 0x50
 8013202:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013204:	69bb      	ldr	r3, [r7, #24]
 8013206:	2200      	movs	r2, #0
 8013208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801320c:	79fa      	ldrb	r2, [r7, #7]
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	9300      	str	r3, [sp, #0]
 8013212:	4613      	mov	r3, r2
 8013214:	697a      	ldr	r2, [r7, #20]
 8013216:	68b9      	ldr	r1, [r7, #8]
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f000 f805 	bl	8013228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801321e:	69bb      	ldr	r3, [r7, #24]
	}
 8013220:	4618      	mov	r0, r3
 8013222:	3720      	adds	r7, #32
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	60f8      	str	r0, [r7, #12]
 8013230:	60b9      	str	r1, [r7, #8]
 8013232:	607a      	str	r2, [r7, #4]
 8013234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d103      	bne.n	8013244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	69ba      	ldr	r2, [r7, #24]
 8013240:	601a      	str	r2, [r3, #0]
 8013242:	e002      	b.n	801324a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013244:	69bb      	ldr	r3, [r7, #24]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	68ba      	ldr	r2, [r7, #8]
 8013254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013256:	2101      	movs	r1, #1
 8013258:	69b8      	ldr	r0, [r7, #24]
 801325a:	f7ff febd 	bl	8012fd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	78fa      	ldrb	r2, [r7, #3]
 8013262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013266:	bf00      	nop
 8013268:	3710      	adds	r7, #16
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801326e:	b580      	push	{r7, lr}
 8013270:	b082      	sub	sp, #8
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00e      	beq.n	801329a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2200      	movs	r2, #0
 8013286:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801328e:	2300      	movs	r3, #0
 8013290:	2200      	movs	r2, #0
 8013292:	2100      	movs	r1, #0
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f000 f92b 	bl	80134f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801329a:	bf00      	nop
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b086      	sub	sp, #24
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	4603      	mov	r3, r0
 80132aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80132ac:	2301      	movs	r3, #1
 80132ae:	617b      	str	r3, [r7, #20]
 80132b0:	2300      	movs	r3, #0
 80132b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80132b4:	79fb      	ldrb	r3, [r7, #7]
 80132b6:	461a      	mov	r2, r3
 80132b8:	6939      	ldr	r1, [r7, #16]
 80132ba:	6978      	ldr	r0, [r7, #20]
 80132bc:	f7ff ff73 	bl	80131a6 <xQueueGenericCreate>
 80132c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f7ff ffd3 	bl	801326e <prvInitialiseMutex>

		return xNewQueue;
 80132c8:	68fb      	ldr	r3, [r7, #12]
	}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3718      	adds	r7, #24
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80132d2:	b580      	push	{r7, lr}
 80132d4:	b088      	sub	sp, #32
 80132d6:	af02      	add	r7, sp, #8
 80132d8:	4603      	mov	r3, r0
 80132da:	6039      	str	r1, [r7, #0]
 80132dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80132de:	2301      	movs	r3, #1
 80132e0:	617b      	str	r3, [r7, #20]
 80132e2:	2300      	movs	r3, #0
 80132e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80132e6:	79fb      	ldrb	r3, [r7, #7]
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	2200      	movs	r2, #0
 80132ee:	6939      	ldr	r1, [r7, #16]
 80132f0:	6978      	ldr	r0, [r7, #20]
 80132f2:	f7ff fedb 	bl	80130ac <xQueueGenericCreateStatic>
 80132f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80132f8:	68f8      	ldr	r0, [r7, #12]
 80132fa:	f7ff ffb8 	bl	801326e <prvInitialiseMutex>

		return xNewQueue;
 80132fe:	68fb      	ldr	r3, [r7, #12]
	}
 8013300:	4618      	mov	r0, r3
 8013302:	3718      	adds	r7, #24
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8013314:	f002 fc70 	bl	8015bf8 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d103      	bne.n	8013328 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	60fb      	str	r3, [r7, #12]
 8013326:	e001      	b.n	801332c <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 8013328:	2300      	movs	r3, #0
 801332a:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801332c:	f002 fc96 	bl	8015c5c <vPortExitCritical>

		return pxReturn;
 8013330:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8013332:	4618      	mov	r0, r3
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801333a:	b590      	push	{r4, r7, lr}
 801333c:	b087      	sub	sp, #28
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10b      	bne.n	8013364 <xQueueGiveMutexRecursive+0x2a>
 801334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013350:	b672      	cpsid	i
 8013352:	f383 8811 	msr	BASEPRI, r3
 8013356:	f3bf 8f6f 	isb	sy
 801335a:	f3bf 8f4f 	dsb	sy
 801335e:	b662      	cpsie	i
 8013360:	60fb      	str	r3, [r7, #12]
 8013362:	e7fe      	b.n	8013362 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	689c      	ldr	r4, [r3, #8]
 8013368:	f001 fdf4 	bl	8014f54 <xTaskGetCurrentTaskHandle>
 801336c:	4603      	mov	r3, r0
 801336e:	429c      	cmp	r4, r3
 8013370:	d111      	bne.n	8013396 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	68db      	ldr	r3, [r3, #12]
 8013376:	1e5a      	subs	r2, r3, #1
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d105      	bne.n	8013390 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8013384:	2300      	movs	r3, #0
 8013386:	2200      	movs	r2, #0
 8013388:	2100      	movs	r1, #0
 801338a:	6938      	ldr	r0, [r7, #16]
 801338c:	f000 f8b0 	bl	80134f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8013390:	2301      	movs	r3, #1
 8013392:	617b      	str	r3, [r7, #20]
 8013394:	e001      	b.n	801339a <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8013396:	2300      	movs	r3, #0
 8013398:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801339a:	697b      	ldr	r3, [r7, #20]
	}
 801339c:	4618      	mov	r0, r3
 801339e:	371c      	adds	r7, #28
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd90      	pop	{r4, r7, pc}

080133a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80133a4:	b590      	push	{r4, r7, lr}
 80133a6:	b087      	sub	sp, #28
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d10b      	bne.n	80133d0 <xQueueTakeMutexRecursive+0x2c>
 80133b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133bc:	b672      	cpsid	i
 80133be:	f383 8811 	msr	BASEPRI, r3
 80133c2:	f3bf 8f6f 	isb	sy
 80133c6:	f3bf 8f4f 	dsb	sy
 80133ca:	b662      	cpsie	i
 80133cc:	60fb      	str	r3, [r7, #12]
 80133ce:	e7fe      	b.n	80133ce <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	689c      	ldr	r4, [r3, #8]
 80133d4:	f001 fdbe 	bl	8014f54 <xTaskGetCurrentTaskHandle>
 80133d8:	4603      	mov	r3, r0
 80133da:	429c      	cmp	r4, r3
 80133dc:	d107      	bne.n	80133ee <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	68db      	ldr	r3, [r3, #12]
 80133e2:	1c5a      	adds	r2, r3, #1
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80133e8:	2301      	movs	r3, #1
 80133ea:	617b      	str	r3, [r7, #20]
 80133ec:	e00c      	b.n	8013408 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80133ee:	6839      	ldr	r1, [r7, #0]
 80133f0:	6938      	ldr	r0, [r7, #16]
 80133f2:	f000 fb8f 	bl	8013b14 <xQueueSemaphoreTake>
 80133f6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d004      	beq.n	8013408 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	1c5a      	adds	r2, r3, #1
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8013408:	697b      	ldr	r3, [r7, #20]
	}
 801340a:	4618      	mov	r0, r3
 801340c:	371c      	adds	r7, #28
 801340e:	46bd      	mov	sp, r7
 8013410:	bd90      	pop	{r4, r7, pc}

08013412 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013412:	b580      	push	{r7, lr}
 8013414:	b08a      	sub	sp, #40	; 0x28
 8013416:	af02      	add	r7, sp, #8
 8013418:	60f8      	str	r0, [r7, #12]
 801341a:	60b9      	str	r1, [r7, #8]
 801341c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d10b      	bne.n	801343c <xQueueCreateCountingSemaphoreStatic+0x2a>
 8013424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013428:	b672      	cpsid	i
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	b662      	cpsie	i
 8013438:	61bb      	str	r3, [r7, #24]
 801343a:	e7fe      	b.n	801343a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801343c:	68ba      	ldr	r2, [r7, #8]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	429a      	cmp	r2, r3
 8013442:	d90b      	bls.n	801345c <xQueueCreateCountingSemaphoreStatic+0x4a>
 8013444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013448:	b672      	cpsid	i
 801344a:	f383 8811 	msr	BASEPRI, r3
 801344e:	f3bf 8f6f 	isb	sy
 8013452:	f3bf 8f4f 	dsb	sy
 8013456:	b662      	cpsie	i
 8013458:	617b      	str	r3, [r7, #20]
 801345a:	e7fe      	b.n	801345a <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801345c:	2302      	movs	r3, #2
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2200      	movs	r2, #0
 8013464:	2100      	movs	r1, #0
 8013466:	68f8      	ldr	r0, [r7, #12]
 8013468:	f7ff fe20 	bl	80130ac <xQueueGenericCreateStatic>
 801346c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013474:	69fb      	ldr	r3, [r7, #28]
 8013476:	68ba      	ldr	r2, [r7, #8]
 8013478:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801347a:	69fb      	ldr	r3, [r7, #28]
	}
 801347c:	4618      	mov	r0, r3
 801347e:	3720      	adds	r7, #32
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8013484:	b580      	push	{r7, lr}
 8013486:	b086      	sub	sp, #24
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d10b      	bne.n	80134ac <xQueueCreateCountingSemaphore+0x28>
 8013494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013498:	b672      	cpsid	i
 801349a:	f383 8811 	msr	BASEPRI, r3
 801349e:	f3bf 8f6f 	isb	sy
 80134a2:	f3bf 8f4f 	dsb	sy
 80134a6:	b662      	cpsie	i
 80134a8:	613b      	str	r3, [r7, #16]
 80134aa:	e7fe      	b.n	80134aa <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80134ac:	683a      	ldr	r2, [r7, #0]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d90b      	bls.n	80134cc <xQueueCreateCountingSemaphore+0x48>
 80134b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b8:	b672      	cpsid	i
 80134ba:	f383 8811 	msr	BASEPRI, r3
 80134be:	f3bf 8f6f 	isb	sy
 80134c2:	f3bf 8f4f 	dsb	sy
 80134c6:	b662      	cpsie	i
 80134c8:	60fb      	str	r3, [r7, #12]
 80134ca:	e7fe      	b.n	80134ca <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80134cc:	2202      	movs	r2, #2
 80134ce:	2100      	movs	r1, #0
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7ff fe68 	bl	80131a6 <xQueueGenericCreate>
 80134d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d002      	beq.n	80134e4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80134e4:	697b      	ldr	r3, [r7, #20]
	}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3718      	adds	r7, #24
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
	...

080134f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b08e      	sub	sp, #56	; 0x38
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
 80134fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80134fe:	2300      	movs	r3, #0
 8013500:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013508:	2b00      	cmp	r3, #0
 801350a:	d10b      	bne.n	8013524 <xQueueGenericSend+0x34>
 801350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013510:	b672      	cpsid	i
 8013512:	f383 8811 	msr	BASEPRI, r3
 8013516:	f3bf 8f6f 	isb	sy
 801351a:	f3bf 8f4f 	dsb	sy
 801351e:	b662      	cpsie	i
 8013520:	62bb      	str	r3, [r7, #40]	; 0x28
 8013522:	e7fe      	b.n	8013522 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d103      	bne.n	8013532 <xQueueGenericSend+0x42>
 801352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801352e:	2b00      	cmp	r3, #0
 8013530:	d101      	bne.n	8013536 <xQueueGenericSend+0x46>
 8013532:	2301      	movs	r3, #1
 8013534:	e000      	b.n	8013538 <xQueueGenericSend+0x48>
 8013536:	2300      	movs	r3, #0
 8013538:	2b00      	cmp	r3, #0
 801353a:	d10b      	bne.n	8013554 <xQueueGenericSend+0x64>
 801353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013540:	b672      	cpsid	i
 8013542:	f383 8811 	msr	BASEPRI, r3
 8013546:	f3bf 8f6f 	isb	sy
 801354a:	f3bf 8f4f 	dsb	sy
 801354e:	b662      	cpsie	i
 8013550:	627b      	str	r3, [r7, #36]	; 0x24
 8013552:	e7fe      	b.n	8013552 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	2b02      	cmp	r3, #2
 8013558:	d103      	bne.n	8013562 <xQueueGenericSend+0x72>
 801355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801355e:	2b01      	cmp	r3, #1
 8013560:	d101      	bne.n	8013566 <xQueueGenericSend+0x76>
 8013562:	2301      	movs	r3, #1
 8013564:	e000      	b.n	8013568 <xQueueGenericSend+0x78>
 8013566:	2300      	movs	r3, #0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10b      	bne.n	8013584 <xQueueGenericSend+0x94>
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	b672      	cpsid	i
 8013572:	f383 8811 	msr	BASEPRI, r3
 8013576:	f3bf 8f6f 	isb	sy
 801357a:	f3bf 8f4f 	dsb	sy
 801357e:	b662      	cpsie	i
 8013580:	623b      	str	r3, [r7, #32]
 8013582:	e7fe      	b.n	8013582 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013584:	f001 fcf6 	bl	8014f74 <xTaskGetSchedulerState>
 8013588:	4603      	mov	r3, r0
 801358a:	2b00      	cmp	r3, #0
 801358c:	d102      	bne.n	8013594 <xQueueGenericSend+0xa4>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d101      	bne.n	8013598 <xQueueGenericSend+0xa8>
 8013594:	2301      	movs	r3, #1
 8013596:	e000      	b.n	801359a <xQueueGenericSend+0xaa>
 8013598:	2300      	movs	r3, #0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10b      	bne.n	80135b6 <xQueueGenericSend+0xc6>
 801359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a2:	b672      	cpsid	i
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	b662      	cpsie	i
 80135b2:	61fb      	str	r3, [r7, #28]
 80135b4:	e7fe      	b.n	80135b4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80135b6:	f002 fb1f 	bl	8015bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80135ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80135be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d302      	bcc.n	80135cc <xQueueGenericSend+0xdc>
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d129      	bne.n	8013620 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80135cc:	683a      	ldr	r2, [r7, #0]
 80135ce:	68b9      	ldr	r1, [r7, #8]
 80135d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135d2:	f000 fc6e 	bl	8013eb2 <prvCopyDataToQueue>
 80135d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d010      	beq.n	8013602 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e2:	3324      	adds	r3, #36	; 0x24
 80135e4:	4618      	mov	r0, r3
 80135e6:	f001 faf7 	bl	8014bd8 <xTaskRemoveFromEventList>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d013      	beq.n	8013618 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80135f0:	4b3f      	ldr	r3, [pc, #252]	; (80136f0 <xQueueGenericSend+0x200>)
 80135f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135f6:	601a      	str	r2, [r3, #0]
 80135f8:	f3bf 8f4f 	dsb	sy
 80135fc:	f3bf 8f6f 	isb	sy
 8013600:	e00a      	b.n	8013618 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013604:	2b00      	cmp	r3, #0
 8013606:	d007      	beq.n	8013618 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013608:	4b39      	ldr	r3, [pc, #228]	; (80136f0 <xQueueGenericSend+0x200>)
 801360a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801360e:	601a      	str	r2, [r3, #0]
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013618:	f002 fb20 	bl	8015c5c <vPortExitCritical>
				return pdPASS;
 801361c:	2301      	movs	r3, #1
 801361e:	e063      	b.n	80136e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d103      	bne.n	801362e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013626:	f002 fb19 	bl	8015c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801362a:	2300      	movs	r3, #0
 801362c:	e05c      	b.n	80136e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013630:	2b00      	cmp	r3, #0
 8013632:	d106      	bne.n	8013642 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013634:	f107 0314 	add.w	r3, r7, #20
 8013638:	4618      	mov	r0, r3
 801363a:	f001 fb31 	bl	8014ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801363e:	2301      	movs	r3, #1
 8013640:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013642:	f002 fb0b 	bl	8015c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013646:	f001 f88f 	bl	8014768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801364a:	f002 fad5 	bl	8015bf8 <vPortEnterCritical>
 801364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013654:	b25b      	sxtb	r3, r3
 8013656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801365a:	d103      	bne.n	8013664 <xQueueGenericSend+0x174>
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	2200      	movs	r2, #0
 8013660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801366a:	b25b      	sxtb	r3, r3
 801366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013670:	d103      	bne.n	801367a <xQueueGenericSend+0x18a>
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	2200      	movs	r2, #0
 8013676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801367a:	f002 faef 	bl	8015c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801367e:	1d3a      	adds	r2, r7, #4
 8013680:	f107 0314 	add.w	r3, r7, #20
 8013684:	4611      	mov	r1, r2
 8013686:	4618      	mov	r0, r3
 8013688:	f001 fb20 	bl	8014ccc <xTaskCheckForTimeOut>
 801368c:	4603      	mov	r3, r0
 801368e:	2b00      	cmp	r3, #0
 8013690:	d124      	bne.n	80136dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013694:	f000 fd05 	bl	80140a2 <prvIsQueueFull>
 8013698:	4603      	mov	r3, r0
 801369a:	2b00      	cmp	r3, #0
 801369c:	d018      	beq.n	80136d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a0:	3310      	adds	r3, #16
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	4611      	mov	r1, r2
 80136a6:	4618      	mov	r0, r3
 80136a8:	f001 fa44 	bl	8014b34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80136ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136ae:	f000 fc90 	bl	8013fd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80136b2:	f001 f867 	bl	8014784 <xTaskResumeAll>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f47f af7c 	bne.w	80135b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80136be:	4b0c      	ldr	r3, [pc, #48]	; (80136f0 <xQueueGenericSend+0x200>)
 80136c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136c4:	601a      	str	r2, [r3, #0]
 80136c6:	f3bf 8f4f 	dsb	sy
 80136ca:	f3bf 8f6f 	isb	sy
 80136ce:	e772      	b.n	80135b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80136d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136d2:	f000 fc7e 	bl	8013fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80136d6:	f001 f855 	bl	8014784 <xTaskResumeAll>
 80136da:	e76c      	b.n	80135b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80136dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136de:	f000 fc78 	bl	8013fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80136e2:	f001 f84f 	bl	8014784 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80136e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3738      	adds	r7, #56	; 0x38
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	e000ed04 	.word	0xe000ed04

080136f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b08e      	sub	sp, #56	; 0x38
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	607a      	str	r2, [r7, #4]
 8013700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013708:	2b00      	cmp	r3, #0
 801370a:	d10b      	bne.n	8013724 <xQueueGenericSendFromISR+0x30>
 801370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013710:	b672      	cpsid	i
 8013712:	f383 8811 	msr	BASEPRI, r3
 8013716:	f3bf 8f6f 	isb	sy
 801371a:	f3bf 8f4f 	dsb	sy
 801371e:	b662      	cpsie	i
 8013720:	627b      	str	r3, [r7, #36]	; 0x24
 8013722:	e7fe      	b.n	8013722 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d103      	bne.n	8013732 <xQueueGenericSendFromISR+0x3e>
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801372e:	2b00      	cmp	r3, #0
 8013730:	d101      	bne.n	8013736 <xQueueGenericSendFromISR+0x42>
 8013732:	2301      	movs	r3, #1
 8013734:	e000      	b.n	8013738 <xQueueGenericSendFromISR+0x44>
 8013736:	2300      	movs	r3, #0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d10b      	bne.n	8013754 <xQueueGenericSendFromISR+0x60>
 801373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013740:	b672      	cpsid	i
 8013742:	f383 8811 	msr	BASEPRI, r3
 8013746:	f3bf 8f6f 	isb	sy
 801374a:	f3bf 8f4f 	dsb	sy
 801374e:	b662      	cpsie	i
 8013750:	623b      	str	r3, [r7, #32]
 8013752:	e7fe      	b.n	8013752 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	2b02      	cmp	r3, #2
 8013758:	d103      	bne.n	8013762 <xQueueGenericSendFromISR+0x6e>
 801375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801375e:	2b01      	cmp	r3, #1
 8013760:	d101      	bne.n	8013766 <xQueueGenericSendFromISR+0x72>
 8013762:	2301      	movs	r3, #1
 8013764:	e000      	b.n	8013768 <xQueueGenericSendFromISR+0x74>
 8013766:	2300      	movs	r3, #0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d10b      	bne.n	8013784 <xQueueGenericSendFromISR+0x90>
 801376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013770:	b672      	cpsid	i
 8013772:	f383 8811 	msr	BASEPRI, r3
 8013776:	f3bf 8f6f 	isb	sy
 801377a:	f3bf 8f4f 	dsb	sy
 801377e:	b662      	cpsie	i
 8013780:	61fb      	str	r3, [r7, #28]
 8013782:	e7fe      	b.n	8013782 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013784:	f002 fb18 	bl	8015db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013788:	f3ef 8211 	mrs	r2, BASEPRI
 801378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013790:	b672      	cpsid	i
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	b662      	cpsie	i
 80137a0:	61ba      	str	r2, [r7, #24]
 80137a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80137a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80137a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80137a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d302      	bcc.n	80137ba <xQueueGenericSendFromISR+0xc6>
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	2b02      	cmp	r3, #2
 80137b8:	d12c      	bne.n	8013814 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80137ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80137c4:	683a      	ldr	r2, [r7, #0]
 80137c6:	68b9      	ldr	r1, [r7, #8]
 80137c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137ca:	f000 fb72 	bl	8013eb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80137ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80137d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d6:	d112      	bne.n	80137fe <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d016      	beq.n	801380e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e2:	3324      	adds	r3, #36	; 0x24
 80137e4:	4618      	mov	r0, r3
 80137e6:	f001 f9f7 	bl	8014bd8 <xTaskRemoveFromEventList>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d00e      	beq.n	801380e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d00b      	beq.n	801380e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2201      	movs	r2, #1
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	e007      	b.n	801380e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80137fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013802:	3301      	adds	r3, #1
 8013804:	b2db      	uxtb	r3, r3
 8013806:	b25a      	sxtb	r2, r3
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801380e:	2301      	movs	r3, #1
 8013810:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013812:	e001      	b.n	8013818 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013814:	2300      	movs	r3, #0
 8013816:	637b      	str	r3, [r7, #52]	; 0x34
 8013818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013824:	4618      	mov	r0, r3
 8013826:	3738      	adds	r7, #56	; 0x38
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}

0801382c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b08e      	sub	sp, #56	; 0x38
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10b      	bne.n	8013858 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013844:	b672      	cpsid	i
 8013846:	f383 8811 	msr	BASEPRI, r3
 801384a:	f3bf 8f6f 	isb	sy
 801384e:	f3bf 8f4f 	dsb	sy
 8013852:	b662      	cpsie	i
 8013854:	623b      	str	r3, [r7, #32]
 8013856:	e7fe      	b.n	8013856 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801385c:	2b00      	cmp	r3, #0
 801385e:	d00b      	beq.n	8013878 <xQueueGiveFromISR+0x4c>
 8013860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013864:	b672      	cpsid	i
 8013866:	f383 8811 	msr	BASEPRI, r3
 801386a:	f3bf 8f6f 	isb	sy
 801386e:	f3bf 8f4f 	dsb	sy
 8013872:	b662      	cpsie	i
 8013874:	61fb      	str	r3, [r7, #28]
 8013876:	e7fe      	b.n	8013876 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d103      	bne.n	8013888 <xQueueGiveFromISR+0x5c>
 8013880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013882:	689b      	ldr	r3, [r3, #8]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d101      	bne.n	801388c <xQueueGiveFromISR+0x60>
 8013888:	2301      	movs	r3, #1
 801388a:	e000      	b.n	801388e <xQueueGiveFromISR+0x62>
 801388c:	2300      	movs	r3, #0
 801388e:	2b00      	cmp	r3, #0
 8013890:	d10b      	bne.n	80138aa <xQueueGiveFromISR+0x7e>
 8013892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013896:	b672      	cpsid	i
 8013898:	f383 8811 	msr	BASEPRI, r3
 801389c:	f3bf 8f6f 	isb	sy
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	b662      	cpsie	i
 80138a6:	61bb      	str	r3, [r7, #24]
 80138a8:	e7fe      	b.n	80138a8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80138aa:	f002 fa85 	bl	8015db8 <vPortValidateInterruptPriority>
	__asm volatile
 80138ae:	f3ef 8211 	mrs	r2, BASEPRI
 80138b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138b6:	b672      	cpsid	i
 80138b8:	f383 8811 	msr	BASEPRI, r3
 80138bc:	f3bf 8f6f 	isb	sy
 80138c0:	f3bf 8f4f 	dsb	sy
 80138c4:	b662      	cpsie	i
 80138c6:	617a      	str	r2, [r7, #20]
 80138c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80138ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80138cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80138d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138da:	429a      	cmp	r2, r3
 80138dc:	d22b      	bcs.n	8013936 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80138de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80138e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80138e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ea:	1c5a      	adds	r2, r3, #1
 80138ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80138f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80138f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f8:	d112      	bne.n	8013920 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d016      	beq.n	8013930 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013904:	3324      	adds	r3, #36	; 0x24
 8013906:	4618      	mov	r0, r3
 8013908:	f001 f966 	bl	8014bd8 <xTaskRemoveFromEventList>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00e      	beq.n	8013930 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d00b      	beq.n	8013930 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	2201      	movs	r2, #1
 801391c:	601a      	str	r2, [r3, #0]
 801391e:	e007      	b.n	8013930 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013924:	3301      	adds	r3, #1
 8013926:	b2db      	uxtb	r3, r3
 8013928:	b25a      	sxtb	r2, r3
 801392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013930:	2301      	movs	r3, #1
 8013932:	637b      	str	r3, [r7, #52]	; 0x34
 8013934:	e001      	b.n	801393a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013936:	2300      	movs	r3, #0
 8013938:	637b      	str	r3, [r7, #52]	; 0x34
 801393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013946:	4618      	mov	r0, r3
 8013948:	3738      	adds	r7, #56	; 0x38
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
	...

08013950 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b08c      	sub	sp, #48	; 0x30
 8013954:	af00      	add	r7, sp, #0
 8013956:	60f8      	str	r0, [r7, #12]
 8013958:	60b9      	str	r1, [r7, #8]
 801395a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801395c:	2300      	movs	r3, #0
 801395e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013966:	2b00      	cmp	r3, #0
 8013968:	d10b      	bne.n	8013982 <xQueueReceive+0x32>
	__asm volatile
 801396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396e:	b672      	cpsid	i
 8013970:	f383 8811 	msr	BASEPRI, r3
 8013974:	f3bf 8f6f 	isb	sy
 8013978:	f3bf 8f4f 	dsb	sy
 801397c:	b662      	cpsie	i
 801397e:	623b      	str	r3, [r7, #32]
 8013980:	e7fe      	b.n	8013980 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d103      	bne.n	8013990 <xQueueReceive+0x40>
 8013988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801398c:	2b00      	cmp	r3, #0
 801398e:	d101      	bne.n	8013994 <xQueueReceive+0x44>
 8013990:	2301      	movs	r3, #1
 8013992:	e000      	b.n	8013996 <xQueueReceive+0x46>
 8013994:	2300      	movs	r3, #0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10b      	bne.n	80139b2 <xQueueReceive+0x62>
 801399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801399e:	b672      	cpsid	i
 80139a0:	f383 8811 	msr	BASEPRI, r3
 80139a4:	f3bf 8f6f 	isb	sy
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	b662      	cpsie	i
 80139ae:	61fb      	str	r3, [r7, #28]
 80139b0:	e7fe      	b.n	80139b0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139b2:	f001 fadf 	bl	8014f74 <xTaskGetSchedulerState>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d102      	bne.n	80139c2 <xQueueReceive+0x72>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d101      	bne.n	80139c6 <xQueueReceive+0x76>
 80139c2:	2301      	movs	r3, #1
 80139c4:	e000      	b.n	80139c8 <xQueueReceive+0x78>
 80139c6:	2300      	movs	r3, #0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d10b      	bne.n	80139e4 <xQueueReceive+0x94>
 80139cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d0:	b672      	cpsid	i
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	b662      	cpsie	i
 80139e0:	61bb      	str	r3, [r7, #24]
 80139e2:	e7fe      	b.n	80139e2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80139e4:	f002 f908 	bl	8015bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80139ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d01f      	beq.n	8013a34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80139f4:	68b9      	ldr	r1, [r7, #8]
 80139f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139f8:	f000 fac5 	bl	8013f86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80139fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fe:	1e5a      	subs	r2, r3, #1
 8013a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a06:	691b      	ldr	r3, [r3, #16]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d00f      	beq.n	8013a2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0e:	3310      	adds	r3, #16
 8013a10:	4618      	mov	r0, r3
 8013a12:	f001 f8e1 	bl	8014bd8 <xTaskRemoveFromEventList>
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d007      	beq.n	8013a2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a1c:	4b3c      	ldr	r3, [pc, #240]	; (8013b10 <xQueueReceive+0x1c0>)
 8013a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a22:	601a      	str	r2, [r3, #0]
 8013a24:	f3bf 8f4f 	dsb	sy
 8013a28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013a2c:	f002 f916 	bl	8015c5c <vPortExitCritical>
				return pdPASS;
 8013a30:	2301      	movs	r3, #1
 8013a32:	e069      	b.n	8013b08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d103      	bne.n	8013a42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a3a:	f002 f90f 	bl	8015c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	e062      	b.n	8013b08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d106      	bne.n	8013a56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a48:	f107 0310 	add.w	r3, r7, #16
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f001 f927 	bl	8014ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a52:	2301      	movs	r3, #1
 8013a54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a56:	f002 f901 	bl	8015c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a5a:	f000 fe85 	bl	8014768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a5e:	f002 f8cb 	bl	8015bf8 <vPortEnterCritical>
 8013a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a68:	b25b      	sxtb	r3, r3
 8013a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a6e:	d103      	bne.n	8013a78 <xQueueReceive+0x128>
 8013a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a72:	2200      	movs	r2, #0
 8013a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a7e:	b25b      	sxtb	r3, r3
 8013a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a84:	d103      	bne.n	8013a8e <xQueueReceive+0x13e>
 8013a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a88:	2200      	movs	r2, #0
 8013a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a8e:	f002 f8e5 	bl	8015c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a92:	1d3a      	adds	r2, r7, #4
 8013a94:	f107 0310 	add.w	r3, r7, #16
 8013a98:	4611      	mov	r1, r2
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f001 f916 	bl	8014ccc <xTaskCheckForTimeOut>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d123      	bne.n	8013aee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aa8:	f000 fae5 	bl	8014076 <prvIsQueueEmpty>
 8013aac:	4603      	mov	r3, r0
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d017      	beq.n	8013ae2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab4:	3324      	adds	r3, #36	; 0x24
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	4611      	mov	r1, r2
 8013aba:	4618      	mov	r0, r3
 8013abc:	f001 f83a 	bl	8014b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ac2:	f000 fa86 	bl	8013fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013ac6:	f000 fe5d 	bl	8014784 <xTaskResumeAll>
 8013aca:	4603      	mov	r3, r0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d189      	bne.n	80139e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013ad0:	4b0f      	ldr	r3, [pc, #60]	; (8013b10 <xQueueReceive+0x1c0>)
 8013ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ad6:	601a      	str	r2, [r3, #0]
 8013ad8:	f3bf 8f4f 	dsb	sy
 8013adc:	f3bf 8f6f 	isb	sy
 8013ae0:	e780      	b.n	80139e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ae4:	f000 fa75 	bl	8013fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ae8:	f000 fe4c 	bl	8014784 <xTaskResumeAll>
 8013aec:	e77a      	b.n	80139e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013af0:	f000 fa6f 	bl	8013fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013af4:	f000 fe46 	bl	8014784 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013afa:	f000 fabc 	bl	8014076 <prvIsQueueEmpty>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f43f af6f 	beq.w	80139e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3730      	adds	r7, #48	; 0x30
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	e000ed04 	.word	0xe000ed04

08013b14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b08e      	sub	sp, #56	; 0x38
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013b26:	2300      	movs	r3, #0
 8013b28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10b      	bne.n	8013b48 <xQueueSemaphoreTake+0x34>
 8013b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b34:	b672      	cpsid	i
 8013b36:	f383 8811 	msr	BASEPRI, r3
 8013b3a:	f3bf 8f6f 	isb	sy
 8013b3e:	f3bf 8f4f 	dsb	sy
 8013b42:	b662      	cpsie	i
 8013b44:	623b      	str	r3, [r7, #32]
 8013b46:	e7fe      	b.n	8013b46 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d00b      	beq.n	8013b68 <xQueueSemaphoreTake+0x54>
 8013b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b54:	b672      	cpsid	i
 8013b56:	f383 8811 	msr	BASEPRI, r3
 8013b5a:	f3bf 8f6f 	isb	sy
 8013b5e:	f3bf 8f4f 	dsb	sy
 8013b62:	b662      	cpsie	i
 8013b64:	61fb      	str	r3, [r7, #28]
 8013b66:	e7fe      	b.n	8013b66 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b68:	f001 fa04 	bl	8014f74 <xTaskGetSchedulerState>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d102      	bne.n	8013b78 <xQueueSemaphoreTake+0x64>
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d101      	bne.n	8013b7c <xQueueSemaphoreTake+0x68>
 8013b78:	2301      	movs	r3, #1
 8013b7a:	e000      	b.n	8013b7e <xQueueSemaphoreTake+0x6a>
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10b      	bne.n	8013b9a <xQueueSemaphoreTake+0x86>
 8013b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b86:	b672      	cpsid	i
 8013b88:	f383 8811 	msr	BASEPRI, r3
 8013b8c:	f3bf 8f6f 	isb	sy
 8013b90:	f3bf 8f4f 	dsb	sy
 8013b94:	b662      	cpsie	i
 8013b96:	61bb      	str	r3, [r7, #24]
 8013b98:	e7fe      	b.n	8013b98 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b9a:	f002 f82d 	bl	8015bf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d024      	beq.n	8013bf4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bac:	1e5a      	subs	r2, r3, #1
 8013bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d104      	bne.n	8013bc4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013bba:	f001 fb55 	bl	8015268 <pvTaskIncrementMutexHeldCount>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc6:	691b      	ldr	r3, [r3, #16]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00f      	beq.n	8013bec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bce:	3310      	adds	r3, #16
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f001 f801 	bl	8014bd8 <xTaskRemoveFromEventList>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d007      	beq.n	8013bec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013bdc:	4b54      	ldr	r3, [pc, #336]	; (8013d30 <xQueueSemaphoreTake+0x21c>)
 8013bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013be2:	601a      	str	r2, [r3, #0]
 8013be4:	f3bf 8f4f 	dsb	sy
 8013be8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013bec:	f002 f836 	bl	8015c5c <vPortExitCritical>
				return pdPASS;
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	e098      	b.n	8013d26 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d112      	bne.n	8013c20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d00b      	beq.n	8013c18 <xQueueSemaphoreTake+0x104>
 8013c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c04:	b672      	cpsid	i
 8013c06:	f383 8811 	msr	BASEPRI, r3
 8013c0a:	f3bf 8f6f 	isb	sy
 8013c0e:	f3bf 8f4f 	dsb	sy
 8013c12:	b662      	cpsie	i
 8013c14:	617b      	str	r3, [r7, #20]
 8013c16:	e7fe      	b.n	8013c16 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013c18:	f002 f820 	bl	8015c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	e082      	b.n	8013d26 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d106      	bne.n	8013c34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c26:	f107 030c 	add.w	r3, r7, #12
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f001 f838 	bl	8014ca0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c30:	2301      	movs	r3, #1
 8013c32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c34:	f002 f812 	bl	8015c5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013c38:	f000 fd96 	bl	8014768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013c3c:	f001 ffdc 	bl	8015bf8 <vPortEnterCritical>
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c46:	b25b      	sxtb	r3, r3
 8013c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c4c:	d103      	bne.n	8013c56 <xQueueSemaphoreTake+0x142>
 8013c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c50:	2200      	movs	r2, #0
 8013c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c5c:	b25b      	sxtb	r3, r3
 8013c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c62:	d103      	bne.n	8013c6c <xQueueSemaphoreTake+0x158>
 8013c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c66:	2200      	movs	r2, #0
 8013c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c6c:	f001 fff6 	bl	8015c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c70:	463a      	mov	r2, r7
 8013c72:	f107 030c 	add.w	r3, r7, #12
 8013c76:	4611      	mov	r1, r2
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f001 f827 	bl	8014ccc <xTaskCheckForTimeOut>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d132      	bne.n	8013cea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c86:	f000 f9f6 	bl	8014076 <prvIsQueueEmpty>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d026      	beq.n	8013cde <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d109      	bne.n	8013cac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013c98:	f001 ffae 	bl	8015bf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c9e:	689b      	ldr	r3, [r3, #8]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f001 f985 	bl	8014fb0 <xTaskPriorityInherit>
 8013ca6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013ca8:	f001 ffd8 	bl	8015c5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cae:	3324      	adds	r3, #36	; 0x24
 8013cb0:	683a      	ldr	r2, [r7, #0]
 8013cb2:	4611      	mov	r1, r2
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f000 ff3d 	bl	8014b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013cbc:	f000 f989 	bl	8013fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013cc0:	f000 fd60 	bl	8014784 <xTaskResumeAll>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	f47f af67 	bne.w	8013b9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013ccc:	4b18      	ldr	r3, [pc, #96]	; (8013d30 <xQueueSemaphoreTake+0x21c>)
 8013cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cd2:	601a      	str	r2, [r3, #0]
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	f3bf 8f6f 	isb	sy
 8013cdc:	e75d      	b.n	8013b9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ce0:	f000 f977 	bl	8013fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ce4:	f000 fd4e 	bl	8014784 <xTaskResumeAll>
 8013ce8:	e757      	b.n	8013b9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013cec:	f000 f971 	bl	8013fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013cf0:	f000 fd48 	bl	8014784 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013cf6:	f000 f9be 	bl	8014076 <prvIsQueueEmpty>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	f43f af4c 	beq.w	8013b9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00d      	beq.n	8013d24 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013d08:	f001 ff76 	bl	8015bf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d0e:	f000 f8b8 	bl	8013e82 <prvGetDisinheritPriorityAfterTimeout>
 8013d12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d16:	689b      	ldr	r3, [r3, #8]
 8013d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f001 fa20 	bl	8015160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013d20:	f001 ff9c 	bl	8015c5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3738      	adds	r7, #56	; 0x38
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	e000ed04 	.word	0xe000ed04

08013d34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b08e      	sub	sp, #56	; 0x38
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d10b      	bne.n	8013d62 <xQueueReceiveFromISR+0x2e>
 8013d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4e:	b672      	cpsid	i
 8013d50:	f383 8811 	msr	BASEPRI, r3
 8013d54:	f3bf 8f6f 	isb	sy
 8013d58:	f3bf 8f4f 	dsb	sy
 8013d5c:	b662      	cpsie	i
 8013d5e:	623b      	str	r3, [r7, #32]
 8013d60:	e7fe      	b.n	8013d60 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d103      	bne.n	8013d70 <xQueueReceiveFromISR+0x3c>
 8013d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d101      	bne.n	8013d74 <xQueueReceiveFromISR+0x40>
 8013d70:	2301      	movs	r3, #1
 8013d72:	e000      	b.n	8013d76 <xQueueReceiveFromISR+0x42>
 8013d74:	2300      	movs	r3, #0
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d10b      	bne.n	8013d92 <xQueueReceiveFromISR+0x5e>
 8013d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d7e:	b672      	cpsid	i
 8013d80:	f383 8811 	msr	BASEPRI, r3
 8013d84:	f3bf 8f6f 	isb	sy
 8013d88:	f3bf 8f4f 	dsb	sy
 8013d8c:	b662      	cpsie	i
 8013d8e:	61fb      	str	r3, [r7, #28]
 8013d90:	e7fe      	b.n	8013d90 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d92:	f002 f811 	bl	8015db8 <vPortValidateInterruptPriority>
	__asm volatile
 8013d96:	f3ef 8211 	mrs	r2, BASEPRI
 8013d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9e:	b672      	cpsid	i
 8013da0:	f383 8811 	msr	BASEPRI, r3
 8013da4:	f3bf 8f6f 	isb	sy
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	b662      	cpsie	i
 8013dae:	61ba      	str	r2, [r7, #24]
 8013db0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013db2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013db4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d02f      	beq.n	8013e22 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013dcc:	68b9      	ldr	r1, [r7, #8]
 8013dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dd0:	f000 f8d9 	bl	8013f86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd6:	1e5a      	subs	r2, r3, #1
 8013dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013de4:	d112      	bne.n	8013e0c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de8:	691b      	ldr	r3, [r3, #16]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d016      	beq.n	8013e1c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	3310      	adds	r3, #16
 8013df2:	4618      	mov	r0, r3
 8013df4:	f000 fef0 	bl	8014bd8 <xTaskRemoveFromEventList>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00e      	beq.n	8013e1c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d00b      	beq.n	8013e1c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2201      	movs	r2, #1
 8013e08:	601a      	str	r2, [r3, #0]
 8013e0a:	e007      	b.n	8013e1c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e10:	3301      	adds	r3, #1
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	b25a      	sxtb	r2, r3
 8013e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8013e20:	e001      	b.n	8013e26 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8013e22:	2300      	movs	r3, #0
 8013e24:	637b      	str	r3, [r7, #52]	; 0x34
 8013e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3738      	adds	r7, #56	; 0x38
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}

08013e3a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b084      	sub	sp, #16
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d10b      	bne.n	8013e64 <vQueueDelete+0x2a>
	__asm volatile
 8013e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e50:	b672      	cpsid	i
 8013e52:	f383 8811 	msr	BASEPRI, r3
 8013e56:	f3bf 8f6f 	isb	sy
 8013e5a:	f3bf 8f4f 	dsb	sy
 8013e5e:	b662      	cpsie	i
 8013e60:	60bb      	str	r3, [r7, #8]
 8013e62:	e7fe      	b.n	8013e62 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f000 f95d 	bl	8014124 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d102      	bne.n	8013e7a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013e74:	68f8      	ldr	r0, [r7, #12]
 8013e76:	f002 f8a9 	bl	8015fcc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013e7a:	bf00      	nop
 8013e7c:	3710      	adds	r7, #16
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}

08013e82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013e82:	b480      	push	{r7}
 8013e84:	b085      	sub	sp, #20
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d006      	beq.n	8013ea0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013e9c:	60fb      	str	r3, [r7, #12]
 8013e9e:	e001      	b.n	8013ea4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
	}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3714      	adds	r7, #20
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb0:	4770      	bx	lr

08013eb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	b086      	sub	sp, #24
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	60f8      	str	r0, [r7, #12]
 8013eba:	60b9      	str	r1, [r7, #8]
 8013ebc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ec6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d10d      	bne.n	8013eec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d14d      	bne.n	8013f74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	689b      	ldr	r3, [r3, #8]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f001 f8cf 	bl	8015080 <xTaskPriorityDisinherit>
 8013ee2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	609a      	str	r2, [r3, #8]
 8013eea:	e043      	b.n	8013f74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d119      	bne.n	8013f26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	6858      	ldr	r0, [r3, #4]
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efa:	461a      	mov	r2, r3
 8013efc:	68b9      	ldr	r1, [r7, #8]
 8013efe:	f002 ff1f 	bl	8016d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	685a      	ldr	r2, [r3, #4]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f0a:	441a      	add	r2, r3
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	685a      	ldr	r2, [r3, #4]
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	689b      	ldr	r3, [r3, #8]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d32b      	bcc.n	8013f74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	605a      	str	r2, [r3, #4]
 8013f24:	e026      	b.n	8013f74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	68d8      	ldr	r0, [r3, #12]
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f2e:	461a      	mov	r2, r3
 8013f30:	68b9      	ldr	r1, [r7, #8]
 8013f32:	f002 ff05 	bl	8016d40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	68da      	ldr	r2, [r3, #12]
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f3e:	425b      	negs	r3, r3
 8013f40:	441a      	add	r2, r3
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	68da      	ldr	r2, [r3, #12]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d207      	bcs.n	8013f62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	689a      	ldr	r2, [r3, #8]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f5a:	425b      	negs	r3, r3
 8013f5c:	441a      	add	r2, r3
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d105      	bne.n	8013f74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d002      	beq.n	8013f74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	3b01      	subs	r3, #1
 8013f72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	1c5a      	adds	r2, r3, #1
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013f7c:	697b      	ldr	r3, [r7, #20]
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3718      	adds	r7, #24
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}

08013f86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013f86:	b580      	push	{r7, lr}
 8013f88:	b082      	sub	sp, #8
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
 8013f8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d018      	beq.n	8013fca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fa0:	441a      	add	r2, r3
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	68da      	ldr	r2, [r3, #12]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	689b      	ldr	r3, [r3, #8]
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d303      	bcc.n	8013fba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	68d9      	ldr	r1, [r3, #12]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	6838      	ldr	r0, [r7, #0]
 8013fc6:	f002 febb 	bl	8016d40 <memcpy>
	}
}
 8013fca:	bf00      	nop
 8013fcc:	3708      	adds	r7, #8
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b084      	sub	sp, #16
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013fda:	f001 fe0d 	bl	8015bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fe4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013fe6:	e011      	b.n	801400c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d012      	beq.n	8014016 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	3324      	adds	r3, #36	; 0x24
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f000 fdef 	bl	8014bd8 <xTaskRemoveFromEventList>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d001      	beq.n	8014004 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014000:	f000 fec8 	bl	8014d94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014004:	7bfb      	ldrb	r3, [r7, #15]
 8014006:	3b01      	subs	r3, #1
 8014008:	b2db      	uxtb	r3, r3
 801400a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801400c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014010:	2b00      	cmp	r3, #0
 8014012:	dce9      	bgt.n	8013fe8 <prvUnlockQueue+0x16>
 8014014:	e000      	b.n	8014018 <prvUnlockQueue+0x46>
					break;
 8014016:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	22ff      	movs	r2, #255	; 0xff
 801401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014020:	f001 fe1c 	bl	8015c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014024:	f001 fde8 	bl	8015bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801402e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014030:	e011      	b.n	8014056 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	691b      	ldr	r3, [r3, #16]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d012      	beq.n	8014060 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	3310      	adds	r3, #16
 801403e:	4618      	mov	r0, r3
 8014040:	f000 fdca 	bl	8014bd8 <xTaskRemoveFromEventList>
 8014044:	4603      	mov	r3, r0
 8014046:	2b00      	cmp	r3, #0
 8014048:	d001      	beq.n	801404e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801404a:	f000 fea3 	bl	8014d94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801404e:	7bbb      	ldrb	r3, [r7, #14]
 8014050:	3b01      	subs	r3, #1
 8014052:	b2db      	uxtb	r3, r3
 8014054:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801405a:	2b00      	cmp	r3, #0
 801405c:	dce9      	bgt.n	8014032 <prvUnlockQueue+0x60>
 801405e:	e000      	b.n	8014062 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014060:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	22ff      	movs	r2, #255	; 0xff
 8014066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801406a:	f001 fdf7 	bl	8015c5c <vPortExitCritical>
}
 801406e:	bf00      	nop
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}

08014076 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014076:	b580      	push	{r7, lr}
 8014078:	b084      	sub	sp, #16
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801407e:	f001 fdbb 	bl	8015bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014086:	2b00      	cmp	r3, #0
 8014088:	d102      	bne.n	8014090 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801408a:	2301      	movs	r3, #1
 801408c:	60fb      	str	r3, [r7, #12]
 801408e:	e001      	b.n	8014094 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014090:	2300      	movs	r3, #0
 8014092:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014094:	f001 fde2 	bl	8015c5c <vPortExitCritical>

	return xReturn;
 8014098:	68fb      	ldr	r3, [r7, #12]
}
 801409a:	4618      	mov	r0, r3
 801409c:	3710      	adds	r7, #16
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80140a2:	b580      	push	{r7, lr}
 80140a4:	b084      	sub	sp, #16
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80140aa:	f001 fda5 	bl	8015bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d102      	bne.n	80140c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80140ba:	2301      	movs	r3, #1
 80140bc:	60fb      	str	r3, [r7, #12]
 80140be:	e001      	b.n	80140c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80140c0:	2300      	movs	r3, #0
 80140c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80140c4:	f001 fdca 	bl	8015c5c <vPortExitCritical>

	return xReturn;
 80140c8:	68fb      	ldr	r3, [r7, #12]
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3710      	adds	r7, #16
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
	...

080140d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80140d4:	b480      	push	{r7}
 80140d6:	b085      	sub	sp, #20
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140de:	2300      	movs	r3, #0
 80140e0:	60fb      	str	r3, [r7, #12]
 80140e2:	e014      	b.n	801410e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80140e4:	4a0e      	ldr	r2, [pc, #56]	; (8014120 <vQueueAddToRegistry+0x4c>)
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d10b      	bne.n	8014108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80140f0:	490b      	ldr	r1, [pc, #44]	; (8014120 <vQueueAddToRegistry+0x4c>)
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	683a      	ldr	r2, [r7, #0]
 80140f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80140fa:	4a09      	ldr	r2, [pc, #36]	; (8014120 <vQueueAddToRegistry+0x4c>)
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	4413      	add	r3, r2
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014106:	e005      	b.n	8014114 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	3301      	adds	r3, #1
 801410c:	60fb      	str	r3, [r7, #12]
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2b07      	cmp	r3, #7
 8014112:	d9e7      	bls.n	80140e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014114:	bf00      	nop
 8014116:	3714      	adds	r7, #20
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	200157a8 	.word	0x200157a8

08014124 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014124:	b480      	push	{r7}
 8014126:	b085      	sub	sp, #20
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801412c:	2300      	movs	r3, #0
 801412e:	60fb      	str	r3, [r7, #12]
 8014130:	e016      	b.n	8014160 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014132:	4a10      	ldr	r2, [pc, #64]	; (8014174 <vQueueUnregisterQueue+0x50>)
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	00db      	lsls	r3, r3, #3
 8014138:	4413      	add	r3, r2
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	687a      	ldr	r2, [r7, #4]
 801413e:	429a      	cmp	r2, r3
 8014140:	d10b      	bne.n	801415a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014142:	4a0c      	ldr	r2, [pc, #48]	; (8014174 <vQueueUnregisterQueue+0x50>)
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2100      	movs	r1, #0
 8014148:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801414c:	4a09      	ldr	r2, [pc, #36]	; (8014174 <vQueueUnregisterQueue+0x50>)
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	4413      	add	r3, r2
 8014154:	2200      	movs	r2, #0
 8014156:	605a      	str	r2, [r3, #4]
				break;
 8014158:	e005      	b.n	8014166 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	3301      	adds	r3, #1
 801415e:	60fb      	str	r3, [r7, #12]
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2b07      	cmp	r3, #7
 8014164:	d9e5      	bls.n	8014132 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014166:	bf00      	nop
 8014168:	3714      	adds	r7, #20
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	200157a8 	.word	0x200157a8

08014178 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014178:	b580      	push	{r7, lr}
 801417a:	b086      	sub	sp, #24
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014188:	f001 fd36 	bl	8015bf8 <vPortEnterCritical>
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014192:	b25b      	sxtb	r3, r3
 8014194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014198:	d103      	bne.n	80141a2 <vQueueWaitForMessageRestricted+0x2a>
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	2200      	movs	r2, #0
 801419e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141a8:	b25b      	sxtb	r3, r3
 80141aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ae:	d103      	bne.n	80141b8 <vQueueWaitForMessageRestricted+0x40>
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2200      	movs	r2, #0
 80141b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141b8:	f001 fd50 	bl	8015c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d106      	bne.n	80141d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	3324      	adds	r3, #36	; 0x24
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	68b9      	ldr	r1, [r7, #8]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f000 fcd7 	bl	8014b80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80141d2:	6978      	ldr	r0, [r7, #20]
 80141d4:	f7ff fefd 	bl	8013fd2 <prvUnlockQueue>
	}
 80141d8:	bf00      	nop
 80141da:	3718      	adds	r7, #24
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b08e      	sub	sp, #56	; 0x38
 80141e4:	af04      	add	r7, sp, #16
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	607a      	str	r2, [r7, #4]
 80141ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80141ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d10b      	bne.n	801420c <xTaskCreateStatic+0x2c>
 80141f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f8:	b672      	cpsid	i
 80141fa:	f383 8811 	msr	BASEPRI, r3
 80141fe:	f3bf 8f6f 	isb	sy
 8014202:	f3bf 8f4f 	dsb	sy
 8014206:	b662      	cpsie	i
 8014208:	623b      	str	r3, [r7, #32]
 801420a:	e7fe      	b.n	801420a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420e:	2b00      	cmp	r3, #0
 8014210:	d10b      	bne.n	801422a <xTaskCreateStatic+0x4a>
 8014212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014216:	b672      	cpsid	i
 8014218:	f383 8811 	msr	BASEPRI, r3
 801421c:	f3bf 8f6f 	isb	sy
 8014220:	f3bf 8f4f 	dsb	sy
 8014224:	b662      	cpsie	i
 8014226:	61fb      	str	r3, [r7, #28]
 8014228:	e7fe      	b.n	8014228 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801422a:	235c      	movs	r3, #92	; 0x5c
 801422c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	2b5c      	cmp	r3, #92	; 0x5c
 8014232:	d00b      	beq.n	801424c <xTaskCreateStatic+0x6c>
 8014234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014238:	b672      	cpsid	i
 801423a:	f383 8811 	msr	BASEPRI, r3
 801423e:	f3bf 8f6f 	isb	sy
 8014242:	f3bf 8f4f 	dsb	sy
 8014246:	b662      	cpsie	i
 8014248:	61bb      	str	r3, [r7, #24]
 801424a:	e7fe      	b.n	801424a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801424c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014250:	2b00      	cmp	r3, #0
 8014252:	d01e      	beq.n	8014292 <xTaskCreateStatic+0xb2>
 8014254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014256:	2b00      	cmp	r3, #0
 8014258:	d01b      	beq.n	8014292 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014262:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014266:	2202      	movs	r2, #2
 8014268:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801426c:	2300      	movs	r3, #0
 801426e:	9303      	str	r3, [sp, #12]
 8014270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014272:	9302      	str	r3, [sp, #8]
 8014274:	f107 0314 	add.w	r3, r7, #20
 8014278:	9301      	str	r3, [sp, #4]
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	9300      	str	r3, [sp, #0]
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	68b9      	ldr	r1, [r7, #8]
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	f000 f850 	bl	801432a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801428a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801428c:	f000 f8de 	bl	801444c <prvAddNewTaskToReadyList>
 8014290:	e001      	b.n	8014296 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014292:	2300      	movs	r3, #0
 8014294:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014296:	697b      	ldr	r3, [r7, #20]
	}
 8014298:	4618      	mov	r0, r3
 801429a:	3728      	adds	r7, #40	; 0x28
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b08c      	sub	sp, #48	; 0x30
 80142a4:	af04      	add	r7, sp, #16
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	60b9      	str	r1, [r7, #8]
 80142aa:	603b      	str	r3, [r7, #0]
 80142ac:	4613      	mov	r3, r2
 80142ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80142b0:	88fb      	ldrh	r3, [r7, #6]
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	4618      	mov	r0, r3
 80142b6:	f001 fdc1 	bl	8015e3c <pvPortMalloc>
 80142ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d00e      	beq.n	80142e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80142c2:	205c      	movs	r0, #92	; 0x5c
 80142c4:	f001 fdba 	bl	8015e3c <pvPortMalloc>
 80142c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d003      	beq.n	80142d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	697a      	ldr	r2, [r7, #20]
 80142d4:	631a      	str	r2, [r3, #48]	; 0x30
 80142d6:	e005      	b.n	80142e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80142d8:	6978      	ldr	r0, [r7, #20]
 80142da:	f001 fe77 	bl	8015fcc <vPortFree>
 80142de:	e001      	b.n	80142e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80142e0:	2300      	movs	r3, #0
 80142e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d017      	beq.n	801431a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80142ea:	69fb      	ldr	r3, [r7, #28]
 80142ec:	2200      	movs	r2, #0
 80142ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80142f2:	88fa      	ldrh	r2, [r7, #6]
 80142f4:	2300      	movs	r3, #0
 80142f6:	9303      	str	r3, [sp, #12]
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	9302      	str	r3, [sp, #8]
 80142fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142fe:	9301      	str	r3, [sp, #4]
 8014300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014302:	9300      	str	r3, [sp, #0]
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	68b9      	ldr	r1, [r7, #8]
 8014308:	68f8      	ldr	r0, [r7, #12]
 801430a:	f000 f80e 	bl	801432a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801430e:	69f8      	ldr	r0, [r7, #28]
 8014310:	f000 f89c 	bl	801444c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014314:	2301      	movs	r3, #1
 8014316:	61bb      	str	r3, [r7, #24]
 8014318:	e002      	b.n	8014320 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801431a:	f04f 33ff 	mov.w	r3, #4294967295
 801431e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014320:	69bb      	ldr	r3, [r7, #24]
	}
 8014322:	4618      	mov	r0, r3
 8014324:	3720      	adds	r7, #32
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}

0801432a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801432a:	b580      	push	{r7, lr}
 801432c:	b088      	sub	sp, #32
 801432e:	af00      	add	r7, sp, #0
 8014330:	60f8      	str	r0, [r7, #12]
 8014332:	60b9      	str	r1, [r7, #8]
 8014334:	607a      	str	r2, [r7, #4]
 8014336:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	461a      	mov	r2, r3
 8014342:	21a5      	movs	r1, #165	; 0xa5
 8014344:	f002 fd07 	bl	8016d56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801434c:	6879      	ldr	r1, [r7, #4]
 801434e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014352:	440b      	add	r3, r1
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	4413      	add	r3, r2
 8014358:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	f023 0307 	bic.w	r3, r3, #7
 8014360:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	f003 0307 	and.w	r3, r3, #7
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00b      	beq.n	8014384 <prvInitialiseNewTask+0x5a>
 801436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014370:	b672      	cpsid	i
 8014372:	f383 8811 	msr	BASEPRI, r3
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	b662      	cpsie	i
 8014380:	617b      	str	r3, [r7, #20]
 8014382:	e7fe      	b.n	8014382 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d01f      	beq.n	80143ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801438a:	2300      	movs	r3, #0
 801438c:	61fb      	str	r3, [r7, #28]
 801438e:	e012      	b.n	80143b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014390:	68ba      	ldr	r2, [r7, #8]
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	4413      	add	r3, r2
 8014396:	7819      	ldrb	r1, [r3, #0]
 8014398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	4413      	add	r3, r2
 801439e:	3334      	adds	r3, #52	; 0x34
 80143a0:	460a      	mov	r2, r1
 80143a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80143a4:	68ba      	ldr	r2, [r7, #8]
 80143a6:	69fb      	ldr	r3, [r7, #28]
 80143a8:	4413      	add	r3, r2
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d006      	beq.n	80143be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	3301      	adds	r3, #1
 80143b4:	61fb      	str	r3, [r7, #28]
 80143b6:	69fb      	ldr	r3, [r7, #28]
 80143b8:	2b0f      	cmp	r3, #15
 80143ba:	d9e9      	bls.n	8014390 <prvInitialiseNewTask+0x66>
 80143bc:	e000      	b.n	80143c0 <prvInitialiseNewTask+0x96>
			{
				break;
 80143be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80143c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143c2:	2200      	movs	r2, #0
 80143c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80143c8:	e003      	b.n	80143d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80143ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143cc:	2200      	movs	r2, #0
 80143ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80143d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d4:	2b37      	cmp	r3, #55	; 0x37
 80143d6:	d901      	bls.n	80143dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80143d8:	2337      	movs	r3, #55	; 0x37
 80143da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80143dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80143e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80143e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ea:	2200      	movs	r2, #0
 80143ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80143ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f0:	3304      	adds	r3, #4
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fe fd5c 	bl	8012eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80143f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fa:	3318      	adds	r3, #24
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7fe fd57 	bl	8012eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014406:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801440a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014410:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014416:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801441a:	2200      	movs	r2, #0
 801441c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014420:	2200      	movs	r2, #0
 8014422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014426:	683a      	ldr	r2, [r7, #0]
 8014428:	68f9      	ldr	r1, [r7, #12]
 801442a:	69b8      	ldr	r0, [r7, #24]
 801442c:	f001 fad8 	bl	80159e0 <pxPortInitialiseStack>
 8014430:	4602      	mov	r2, r0
 8014432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014438:	2b00      	cmp	r3, #0
 801443a:	d002      	beq.n	8014442 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014442:	bf00      	nop
 8014444:	3720      	adds	r7, #32
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}
	...

0801444c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b082      	sub	sp, #8
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014454:	f001 fbd0 	bl	8015bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014458:	4b2d      	ldr	r3, [pc, #180]	; (8014510 <prvAddNewTaskToReadyList+0xc4>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	3301      	adds	r3, #1
 801445e:	4a2c      	ldr	r2, [pc, #176]	; (8014510 <prvAddNewTaskToReadyList+0xc4>)
 8014460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014462:	4b2c      	ldr	r3, [pc, #176]	; (8014514 <prvAddNewTaskToReadyList+0xc8>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d109      	bne.n	801447e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801446a:	4a2a      	ldr	r2, [pc, #168]	; (8014514 <prvAddNewTaskToReadyList+0xc8>)
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014470:	4b27      	ldr	r3, [pc, #156]	; (8014510 <prvAddNewTaskToReadyList+0xc4>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	2b01      	cmp	r3, #1
 8014476:	d110      	bne.n	801449a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014478:	f000 fcb0 	bl	8014ddc <prvInitialiseTaskLists>
 801447c:	e00d      	b.n	801449a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801447e:	4b26      	ldr	r3, [pc, #152]	; (8014518 <prvAddNewTaskToReadyList+0xcc>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d109      	bne.n	801449a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014486:	4b23      	ldr	r3, [pc, #140]	; (8014514 <prvAddNewTaskToReadyList+0xc8>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014490:	429a      	cmp	r2, r3
 8014492:	d802      	bhi.n	801449a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014494:	4a1f      	ldr	r2, [pc, #124]	; (8014514 <prvAddNewTaskToReadyList+0xc8>)
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801449a:	4b20      	ldr	r3, [pc, #128]	; (801451c <prvAddNewTaskToReadyList+0xd0>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	3301      	adds	r3, #1
 80144a0:	4a1e      	ldr	r2, [pc, #120]	; (801451c <prvAddNewTaskToReadyList+0xd0>)
 80144a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80144a4:	4b1d      	ldr	r3, [pc, #116]	; (801451c <prvAddNewTaskToReadyList+0xd0>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144b0:	4b1b      	ldr	r3, [pc, #108]	; (8014520 <prvAddNewTaskToReadyList+0xd4>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d903      	bls.n	80144c0 <prvAddNewTaskToReadyList+0x74>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144bc:	4a18      	ldr	r2, [pc, #96]	; (8014520 <prvAddNewTaskToReadyList+0xd4>)
 80144be:	6013      	str	r3, [r2, #0]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144c4:	4613      	mov	r3, r2
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	4413      	add	r3, r2
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	4a15      	ldr	r2, [pc, #84]	; (8014524 <prvAddNewTaskToReadyList+0xd8>)
 80144ce:	441a      	add	r2, r3
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	3304      	adds	r3, #4
 80144d4:	4619      	mov	r1, r3
 80144d6:	4610      	mov	r0, r2
 80144d8:	f7fe fcf7 	bl	8012eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80144dc:	f001 fbbe 	bl	8015c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80144e0:	4b0d      	ldr	r3, [pc, #52]	; (8014518 <prvAddNewTaskToReadyList+0xcc>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d00e      	beq.n	8014506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80144e8:	4b0a      	ldr	r3, [pc, #40]	; (8014514 <prvAddNewTaskToReadyList+0xc8>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d207      	bcs.n	8014506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80144f6:	4b0c      	ldr	r3, [pc, #48]	; (8014528 <prvAddNewTaskToReadyList+0xdc>)
 80144f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	f3bf 8f4f 	dsb	sy
 8014502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014506:	bf00      	nop
 8014508:	3708      	adds	r7, #8
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	20000ef4 	.word	0x20000ef4
 8014514:	20000a20 	.word	0x20000a20
 8014518:	20000f00 	.word	0x20000f00
 801451c:	20000f10 	.word	0x20000f10
 8014520:	20000efc 	.word	0x20000efc
 8014524:	20000a24 	.word	0x20000a24
 8014528:	e000ed04 	.word	0xe000ed04

0801452c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801452c:	b580      	push	{r7, lr}
 801452e:	b08a      	sub	sp, #40	; 0x28
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014536:	2300      	movs	r3, #0
 8014538:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d10b      	bne.n	8014558 <vTaskDelayUntil+0x2c>
 8014540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014544:	b672      	cpsid	i
 8014546:	f383 8811 	msr	BASEPRI, r3
 801454a:	f3bf 8f6f 	isb	sy
 801454e:	f3bf 8f4f 	dsb	sy
 8014552:	b662      	cpsie	i
 8014554:	617b      	str	r3, [r7, #20]
 8014556:	e7fe      	b.n	8014556 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d10b      	bne.n	8014576 <vTaskDelayUntil+0x4a>
 801455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014562:	b672      	cpsid	i
 8014564:	f383 8811 	msr	BASEPRI, r3
 8014568:	f3bf 8f6f 	isb	sy
 801456c:	f3bf 8f4f 	dsb	sy
 8014570:	b662      	cpsie	i
 8014572:	613b      	str	r3, [r7, #16]
 8014574:	e7fe      	b.n	8014574 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8014576:	4b2a      	ldr	r3, [pc, #168]	; (8014620 <vTaskDelayUntil+0xf4>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00b      	beq.n	8014596 <vTaskDelayUntil+0x6a>
 801457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014582:	b672      	cpsid	i
 8014584:	f383 8811 	msr	BASEPRI, r3
 8014588:	f3bf 8f6f 	isb	sy
 801458c:	f3bf 8f4f 	dsb	sy
 8014590:	b662      	cpsie	i
 8014592:	60fb      	str	r3, [r7, #12]
 8014594:	e7fe      	b.n	8014594 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8014596:	f000 f8e7 	bl	8014768 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801459a:	4b22      	ldr	r3, [pc, #136]	; (8014624 <vTaskDelayUntil+0xf8>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	683a      	ldr	r2, [r7, #0]
 80145a6:	4413      	add	r3, r2
 80145a8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	6a3a      	ldr	r2, [r7, #32]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d20b      	bcs.n	80145cc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	69fa      	ldr	r2, [r7, #28]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d211      	bcs.n	80145e2 <vTaskDelayUntil+0xb6>
 80145be:	69fa      	ldr	r2, [r7, #28]
 80145c0:	6a3b      	ldr	r3, [r7, #32]
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d90d      	bls.n	80145e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80145c6:	2301      	movs	r3, #1
 80145c8:	627b      	str	r3, [r7, #36]	; 0x24
 80145ca:	e00a      	b.n	80145e2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	69fa      	ldr	r2, [r7, #28]
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d303      	bcc.n	80145de <vTaskDelayUntil+0xb2>
 80145d6:	69fa      	ldr	r2, [r7, #28]
 80145d8:	6a3b      	ldr	r3, [r7, #32]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d901      	bls.n	80145e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80145de:	2301      	movs	r3, #1
 80145e0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	69fa      	ldr	r2, [r7, #28]
 80145e6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80145e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d006      	beq.n	80145fc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80145ee:	69fa      	ldr	r2, [r7, #28]
 80145f0:	6a3b      	ldr	r3, [r7, #32]
 80145f2:	1ad3      	subs	r3, r2, r3
 80145f4:	2100      	movs	r1, #0
 80145f6:	4618      	mov	r0, r3
 80145f8:	f000 fe4a 	bl	8015290 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80145fc:	f000 f8c2 	bl	8014784 <xTaskResumeAll>
 8014600:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d107      	bne.n	8014618 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8014608:	4b07      	ldr	r3, [pc, #28]	; (8014628 <vTaskDelayUntil+0xfc>)
 801460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801460e:	601a      	str	r2, [r3, #0]
 8014610:	f3bf 8f4f 	dsb	sy
 8014614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014618:	bf00      	nop
 801461a:	3728      	adds	r7, #40	; 0x28
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	20000f1c 	.word	0x20000f1c
 8014624:	20000ef8 	.word	0x20000ef8
 8014628:	e000ed04 	.word	0xe000ed04

0801462c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014634:	2300      	movs	r3, #0
 8014636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d018      	beq.n	8014670 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801463e:	4b14      	ldr	r3, [pc, #80]	; (8014690 <vTaskDelay+0x64>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d00b      	beq.n	801465e <vTaskDelay+0x32>
 8014646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464a:	b672      	cpsid	i
 801464c:	f383 8811 	msr	BASEPRI, r3
 8014650:	f3bf 8f6f 	isb	sy
 8014654:	f3bf 8f4f 	dsb	sy
 8014658:	b662      	cpsie	i
 801465a:	60bb      	str	r3, [r7, #8]
 801465c:	e7fe      	b.n	801465c <vTaskDelay+0x30>
			vTaskSuspendAll();
 801465e:	f000 f883 	bl	8014768 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014662:	2100      	movs	r1, #0
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f000 fe13 	bl	8015290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801466a:	f000 f88b 	bl	8014784 <xTaskResumeAll>
 801466e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d107      	bne.n	8014686 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014676:	4b07      	ldr	r3, [pc, #28]	; (8014694 <vTaskDelay+0x68>)
 8014678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	f3bf 8f4f 	dsb	sy
 8014682:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014686:	bf00      	nop
 8014688:	3710      	adds	r7, #16
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
 801468e:	bf00      	nop
 8014690:	20000f1c 	.word	0x20000f1c
 8014694:	e000ed04 	.word	0xe000ed04

08014698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b08a      	sub	sp, #40	; 0x28
 801469c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801469e:	2300      	movs	r3, #0
 80146a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80146a2:	2300      	movs	r3, #0
 80146a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80146a6:	463a      	mov	r2, r7
 80146a8:	1d39      	adds	r1, r7, #4
 80146aa:	f107 0308 	add.w	r3, r7, #8
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7fe fbaa 	bl	8012e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80146b4:	6839      	ldr	r1, [r7, #0]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	9202      	str	r2, [sp, #8]
 80146bc:	9301      	str	r3, [sp, #4]
 80146be:	2300      	movs	r3, #0
 80146c0:	9300      	str	r3, [sp, #0]
 80146c2:	2300      	movs	r3, #0
 80146c4:	460a      	mov	r2, r1
 80146c6:	4922      	ldr	r1, [pc, #136]	; (8014750 <vTaskStartScheduler+0xb8>)
 80146c8:	4822      	ldr	r0, [pc, #136]	; (8014754 <vTaskStartScheduler+0xbc>)
 80146ca:	f7ff fd89 	bl	80141e0 <xTaskCreateStatic>
 80146ce:	4602      	mov	r2, r0
 80146d0:	4b21      	ldr	r3, [pc, #132]	; (8014758 <vTaskStartScheduler+0xc0>)
 80146d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80146d4:	4b20      	ldr	r3, [pc, #128]	; (8014758 <vTaskStartScheduler+0xc0>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d002      	beq.n	80146e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80146dc:	2301      	movs	r3, #1
 80146de:	617b      	str	r3, [r7, #20]
 80146e0:	e001      	b.n	80146e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80146e2:	2300      	movs	r3, #0
 80146e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d102      	bne.n	80146f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80146ec:	f000 fe24 	bl	8015338 <xTimerCreateTimerTask>
 80146f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	2b01      	cmp	r3, #1
 80146f6:	d117      	bne.n	8014728 <vTaskStartScheduler+0x90>
 80146f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fc:	b672      	cpsid	i
 80146fe:	f383 8811 	msr	BASEPRI, r3
 8014702:	f3bf 8f6f 	isb	sy
 8014706:	f3bf 8f4f 	dsb	sy
 801470a:	b662      	cpsie	i
 801470c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801470e:	4b13      	ldr	r3, [pc, #76]	; (801475c <vTaskStartScheduler+0xc4>)
 8014710:	f04f 32ff 	mov.w	r2, #4294967295
 8014714:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014716:	4b12      	ldr	r3, [pc, #72]	; (8014760 <vTaskStartScheduler+0xc8>)
 8014718:	2201      	movs	r2, #1
 801471a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801471c:	4b11      	ldr	r3, [pc, #68]	; (8014764 <vTaskStartScheduler+0xcc>)
 801471e:	2200      	movs	r2, #0
 8014720:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014722:	f001 f9ed 	bl	8015b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014726:	e00f      	b.n	8014748 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801472e:	d10b      	bne.n	8014748 <vTaskStartScheduler+0xb0>
 8014730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014734:	b672      	cpsid	i
 8014736:	f383 8811 	msr	BASEPRI, r3
 801473a:	f3bf 8f6f 	isb	sy
 801473e:	f3bf 8f4f 	dsb	sy
 8014742:	b662      	cpsie	i
 8014744:	60fb      	str	r3, [r7, #12]
 8014746:	e7fe      	b.n	8014746 <vTaskStartScheduler+0xae>
}
 8014748:	bf00      	nop
 801474a:	3718      	adds	r7, #24
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}
 8014750:	08019f1c 	.word	0x08019f1c
 8014754:	08014dad 	.word	0x08014dad
 8014758:	20000f18 	.word	0x20000f18
 801475c:	20000f14 	.word	0x20000f14
 8014760:	20000f00 	.word	0x20000f00
 8014764:	20000ef8 	.word	0x20000ef8

08014768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014768:	b480      	push	{r7}
 801476a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801476c:	4b04      	ldr	r3, [pc, #16]	; (8014780 <vTaskSuspendAll+0x18>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	3301      	adds	r3, #1
 8014772:	4a03      	ldr	r2, [pc, #12]	; (8014780 <vTaskSuspendAll+0x18>)
 8014774:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014776:	bf00      	nop
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	20000f1c 	.word	0x20000f1c

08014784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801478a:	2300      	movs	r3, #0
 801478c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801478e:	2300      	movs	r3, #0
 8014790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014792:	4b42      	ldr	r3, [pc, #264]	; (801489c <xTaskResumeAll+0x118>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d10b      	bne.n	80147b2 <xTaskResumeAll+0x2e>
 801479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801479e:	b672      	cpsid	i
 80147a0:	f383 8811 	msr	BASEPRI, r3
 80147a4:	f3bf 8f6f 	isb	sy
 80147a8:	f3bf 8f4f 	dsb	sy
 80147ac:	b662      	cpsie	i
 80147ae:	603b      	str	r3, [r7, #0]
 80147b0:	e7fe      	b.n	80147b0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80147b2:	f001 fa21 	bl	8015bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80147b6:	4b39      	ldr	r3, [pc, #228]	; (801489c <xTaskResumeAll+0x118>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	3b01      	subs	r3, #1
 80147bc:	4a37      	ldr	r2, [pc, #220]	; (801489c <xTaskResumeAll+0x118>)
 80147be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80147c0:	4b36      	ldr	r3, [pc, #216]	; (801489c <xTaskResumeAll+0x118>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d162      	bne.n	801488e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80147c8:	4b35      	ldr	r3, [pc, #212]	; (80148a0 <xTaskResumeAll+0x11c>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d05e      	beq.n	801488e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80147d0:	e02f      	b.n	8014832 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147d2:	4b34      	ldr	r3, [pc, #208]	; (80148a4 <xTaskResumeAll+0x120>)
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	3318      	adds	r3, #24
 80147de:	4618      	mov	r0, r3
 80147e0:	f7fe fbd0 	bl	8012f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	3304      	adds	r3, #4
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fe fbcb 	bl	8012f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147f2:	4b2d      	ldr	r3, [pc, #180]	; (80148a8 <xTaskResumeAll+0x124>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d903      	bls.n	8014802 <xTaskResumeAll+0x7e>
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147fe:	4a2a      	ldr	r2, [pc, #168]	; (80148a8 <xTaskResumeAll+0x124>)
 8014800:	6013      	str	r3, [r2, #0]
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014806:	4613      	mov	r3, r2
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	4413      	add	r3, r2
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	4a27      	ldr	r2, [pc, #156]	; (80148ac <xTaskResumeAll+0x128>)
 8014810:	441a      	add	r2, r3
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	3304      	adds	r3, #4
 8014816:	4619      	mov	r1, r3
 8014818:	4610      	mov	r0, r2
 801481a:	f7fe fb56 	bl	8012eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014822:	4b23      	ldr	r3, [pc, #140]	; (80148b0 <xTaskResumeAll+0x12c>)
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014828:	429a      	cmp	r2, r3
 801482a:	d302      	bcc.n	8014832 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801482c:	4b21      	ldr	r3, [pc, #132]	; (80148b4 <xTaskResumeAll+0x130>)
 801482e:	2201      	movs	r2, #1
 8014830:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014832:	4b1c      	ldr	r3, [pc, #112]	; (80148a4 <xTaskResumeAll+0x120>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d1cb      	bne.n	80147d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d001      	beq.n	8014844 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014840:	f000 fb68 	bl	8014f14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014844:	4b1c      	ldr	r3, [pc, #112]	; (80148b8 <xTaskResumeAll+0x134>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d010      	beq.n	8014872 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014850:	f000 f858 	bl	8014904 <xTaskIncrementTick>
 8014854:	4603      	mov	r3, r0
 8014856:	2b00      	cmp	r3, #0
 8014858:	d002      	beq.n	8014860 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801485a:	4b16      	ldr	r3, [pc, #88]	; (80148b4 <xTaskResumeAll+0x130>)
 801485c:	2201      	movs	r2, #1
 801485e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	3b01      	subs	r3, #1
 8014864:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d1f1      	bne.n	8014850 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801486c:	4b12      	ldr	r3, [pc, #72]	; (80148b8 <xTaskResumeAll+0x134>)
 801486e:	2200      	movs	r2, #0
 8014870:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014872:	4b10      	ldr	r3, [pc, #64]	; (80148b4 <xTaskResumeAll+0x130>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d009      	beq.n	801488e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801487a:	2301      	movs	r3, #1
 801487c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801487e:	4b0f      	ldr	r3, [pc, #60]	; (80148bc <xTaskResumeAll+0x138>)
 8014880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014884:	601a      	str	r2, [r3, #0]
 8014886:	f3bf 8f4f 	dsb	sy
 801488a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801488e:	f001 f9e5 	bl	8015c5c <vPortExitCritical>

	return xAlreadyYielded;
 8014892:	68bb      	ldr	r3, [r7, #8]
}
 8014894:	4618      	mov	r0, r3
 8014896:	3710      	adds	r7, #16
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}
 801489c:	20000f1c 	.word	0x20000f1c
 80148a0:	20000ef4 	.word	0x20000ef4
 80148a4:	20000eb4 	.word	0x20000eb4
 80148a8:	20000efc 	.word	0x20000efc
 80148ac:	20000a24 	.word	0x20000a24
 80148b0:	20000a20 	.word	0x20000a20
 80148b4:	20000f08 	.word	0x20000f08
 80148b8:	20000f04 	.word	0x20000f04
 80148bc:	e000ed04 	.word	0xe000ed04

080148c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80148c0:	b480      	push	{r7}
 80148c2:	b083      	sub	sp, #12
 80148c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80148c6:	4b05      	ldr	r3, [pc, #20]	; (80148dc <xTaskGetTickCount+0x1c>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80148cc:	687b      	ldr	r3, [r7, #4]
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	370c      	adds	r7, #12
 80148d2:	46bd      	mov	sp, r7
 80148d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d8:	4770      	bx	lr
 80148da:	bf00      	nop
 80148dc:	20000ef8 	.word	0x20000ef8

080148e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80148e6:	f001 fa67 	bl	8015db8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80148ea:	2300      	movs	r3, #0
 80148ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80148ee:	4b04      	ldr	r3, [pc, #16]	; (8014900 <xTaskGetTickCountFromISR+0x20>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80148f4:	683b      	ldr	r3, [r7, #0]
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3708      	adds	r7, #8
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	20000ef8 	.word	0x20000ef8

08014904 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b086      	sub	sp, #24
 8014908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801490a:	2300      	movs	r3, #0
 801490c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801490e:	4b4f      	ldr	r3, [pc, #316]	; (8014a4c <xTaskIncrementTick+0x148>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	f040 808a 	bne.w	8014a2c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014918:	4b4d      	ldr	r3, [pc, #308]	; (8014a50 <xTaskIncrementTick+0x14c>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	3301      	adds	r3, #1
 801491e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014920:	4a4b      	ldr	r2, [pc, #300]	; (8014a50 <xTaskIncrementTick+0x14c>)
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d121      	bne.n	8014970 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801492c:	4b49      	ldr	r3, [pc, #292]	; (8014a54 <xTaskIncrementTick+0x150>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00b      	beq.n	801494e <xTaskIncrementTick+0x4a>
 8014936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801493a:	b672      	cpsid	i
 801493c:	f383 8811 	msr	BASEPRI, r3
 8014940:	f3bf 8f6f 	isb	sy
 8014944:	f3bf 8f4f 	dsb	sy
 8014948:	b662      	cpsie	i
 801494a:	603b      	str	r3, [r7, #0]
 801494c:	e7fe      	b.n	801494c <xTaskIncrementTick+0x48>
 801494e:	4b41      	ldr	r3, [pc, #260]	; (8014a54 <xTaskIncrementTick+0x150>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	60fb      	str	r3, [r7, #12]
 8014954:	4b40      	ldr	r3, [pc, #256]	; (8014a58 <xTaskIncrementTick+0x154>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	4a3e      	ldr	r2, [pc, #248]	; (8014a54 <xTaskIncrementTick+0x150>)
 801495a:	6013      	str	r3, [r2, #0]
 801495c:	4a3e      	ldr	r2, [pc, #248]	; (8014a58 <xTaskIncrementTick+0x154>)
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	6013      	str	r3, [r2, #0]
 8014962:	4b3e      	ldr	r3, [pc, #248]	; (8014a5c <xTaskIncrementTick+0x158>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	3301      	adds	r3, #1
 8014968:	4a3c      	ldr	r2, [pc, #240]	; (8014a5c <xTaskIncrementTick+0x158>)
 801496a:	6013      	str	r3, [r2, #0]
 801496c:	f000 fad2 	bl	8014f14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014970:	4b3b      	ldr	r3, [pc, #236]	; (8014a60 <xTaskIncrementTick+0x15c>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	693a      	ldr	r2, [r7, #16]
 8014976:	429a      	cmp	r2, r3
 8014978:	d349      	bcc.n	8014a0e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801497a:	4b36      	ldr	r3, [pc, #216]	; (8014a54 <xTaskIncrementTick+0x150>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d104      	bne.n	801498e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014984:	4b36      	ldr	r3, [pc, #216]	; (8014a60 <xTaskIncrementTick+0x15c>)
 8014986:	f04f 32ff 	mov.w	r2, #4294967295
 801498a:	601a      	str	r2, [r3, #0]
					break;
 801498c:	e03f      	b.n	8014a0e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801498e:	4b31      	ldr	r3, [pc, #196]	; (8014a54 <xTaskIncrementTick+0x150>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	68db      	ldr	r3, [r3, #12]
 8014996:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801499e:	693a      	ldr	r2, [r7, #16]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d203      	bcs.n	80149ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80149a6:	4a2e      	ldr	r2, [pc, #184]	; (8014a60 <xTaskIncrementTick+0x15c>)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149ac:	e02f      	b.n	8014a0e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	3304      	adds	r3, #4
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fe fae6 	bl	8012f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d004      	beq.n	80149ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	3318      	adds	r3, #24
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7fe fadd 	bl	8012f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149ce:	4b25      	ldr	r3, [pc, #148]	; (8014a64 <xTaskIncrementTick+0x160>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d903      	bls.n	80149de <xTaskIncrementTick+0xda>
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149da:	4a22      	ldr	r2, [pc, #136]	; (8014a64 <xTaskIncrementTick+0x160>)
 80149dc:	6013      	str	r3, [r2, #0]
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e2:	4613      	mov	r3, r2
 80149e4:	009b      	lsls	r3, r3, #2
 80149e6:	4413      	add	r3, r2
 80149e8:	009b      	lsls	r3, r3, #2
 80149ea:	4a1f      	ldr	r2, [pc, #124]	; (8014a68 <xTaskIncrementTick+0x164>)
 80149ec:	441a      	add	r2, r3
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	3304      	adds	r3, #4
 80149f2:	4619      	mov	r1, r3
 80149f4:	4610      	mov	r0, r2
 80149f6:	f7fe fa68 	bl	8012eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149fe:	4b1b      	ldr	r3, [pc, #108]	; (8014a6c <xTaskIncrementTick+0x168>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d3b8      	bcc.n	801497a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a0c:	e7b5      	b.n	801497a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a0e:	4b17      	ldr	r3, [pc, #92]	; (8014a6c <xTaskIncrementTick+0x168>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a14:	4914      	ldr	r1, [pc, #80]	; (8014a68 <xTaskIncrementTick+0x164>)
 8014a16:	4613      	mov	r3, r2
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	4413      	add	r3, r2
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	440b      	add	r3, r1
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	2b01      	cmp	r3, #1
 8014a24:	d907      	bls.n	8014a36 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8014a26:	2301      	movs	r3, #1
 8014a28:	617b      	str	r3, [r7, #20]
 8014a2a:	e004      	b.n	8014a36 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014a2c:	4b10      	ldr	r3, [pc, #64]	; (8014a70 <xTaskIncrementTick+0x16c>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	3301      	adds	r3, #1
 8014a32:	4a0f      	ldr	r2, [pc, #60]	; (8014a70 <xTaskIncrementTick+0x16c>)
 8014a34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014a36:	4b0f      	ldr	r3, [pc, #60]	; (8014a74 <xTaskIncrementTick+0x170>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d001      	beq.n	8014a42 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014a42:	697b      	ldr	r3, [r7, #20]
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3718      	adds	r7, #24
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	20000f1c 	.word	0x20000f1c
 8014a50:	20000ef8 	.word	0x20000ef8
 8014a54:	20000eac 	.word	0x20000eac
 8014a58:	20000eb0 	.word	0x20000eb0
 8014a5c:	20000f0c 	.word	0x20000f0c
 8014a60:	20000f14 	.word	0x20000f14
 8014a64:	20000efc 	.word	0x20000efc
 8014a68:	20000a24 	.word	0x20000a24
 8014a6c:	20000a20 	.word	0x20000a20
 8014a70:	20000f04 	.word	0x20000f04
 8014a74:	20000f08 	.word	0x20000f08

08014a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b085      	sub	sp, #20
 8014a7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014a7e:	4b28      	ldr	r3, [pc, #160]	; (8014b20 <vTaskSwitchContext+0xa8>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d003      	beq.n	8014a8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014a86:	4b27      	ldr	r3, [pc, #156]	; (8014b24 <vTaskSwitchContext+0xac>)
 8014a88:	2201      	movs	r2, #1
 8014a8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014a8c:	e042      	b.n	8014b14 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8014a8e:	4b25      	ldr	r3, [pc, #148]	; (8014b24 <vTaskSwitchContext+0xac>)
 8014a90:	2200      	movs	r2, #0
 8014a92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a94:	4b24      	ldr	r3, [pc, #144]	; (8014b28 <vTaskSwitchContext+0xb0>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	60fb      	str	r3, [r7, #12]
 8014a9a:	e011      	b.n	8014ac0 <vTaskSwitchContext+0x48>
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d10b      	bne.n	8014aba <vTaskSwitchContext+0x42>
 8014aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa6:	b672      	cpsid	i
 8014aa8:	f383 8811 	msr	BASEPRI, r3
 8014aac:	f3bf 8f6f 	isb	sy
 8014ab0:	f3bf 8f4f 	dsb	sy
 8014ab4:	b662      	cpsie	i
 8014ab6:	607b      	str	r3, [r7, #4]
 8014ab8:	e7fe      	b.n	8014ab8 <vTaskSwitchContext+0x40>
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	3b01      	subs	r3, #1
 8014abe:	60fb      	str	r3, [r7, #12]
 8014ac0:	491a      	ldr	r1, [pc, #104]	; (8014b2c <vTaskSwitchContext+0xb4>)
 8014ac2:	68fa      	ldr	r2, [r7, #12]
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	4413      	add	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	440b      	add	r3, r1
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d0e3      	beq.n	8014a9c <vTaskSwitchContext+0x24>
 8014ad4:	68fa      	ldr	r2, [r7, #12]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4413      	add	r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	4a13      	ldr	r2, [pc, #76]	; (8014b2c <vTaskSwitchContext+0xb4>)
 8014ae0:	4413      	add	r3, r2
 8014ae2:	60bb      	str	r3, [r7, #8]
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	685a      	ldr	r2, [r3, #4]
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	605a      	str	r2, [r3, #4]
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	685a      	ldr	r2, [r3, #4]
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	3308      	adds	r3, #8
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d104      	bne.n	8014b04 <vTaskSwitchContext+0x8c>
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	685a      	ldr	r2, [r3, #4]
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	605a      	str	r2, [r3, #4]
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	4a09      	ldr	r2, [pc, #36]	; (8014b30 <vTaskSwitchContext+0xb8>)
 8014b0c:	6013      	str	r3, [r2, #0]
 8014b0e:	4a06      	ldr	r2, [pc, #24]	; (8014b28 <vTaskSwitchContext+0xb0>)
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	6013      	str	r3, [r2, #0]
}
 8014b14:	bf00      	nop
 8014b16:	3714      	adds	r7, #20
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1e:	4770      	bx	lr
 8014b20:	20000f1c 	.word	0x20000f1c
 8014b24:	20000f08 	.word	0x20000f08
 8014b28:	20000efc 	.word	0x20000efc
 8014b2c:	20000a24 	.word	0x20000a24
 8014b30:	20000a20 	.word	0x20000a20

08014b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d10b      	bne.n	8014b5c <vTaskPlaceOnEventList+0x28>
 8014b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b48:	b672      	cpsid	i
 8014b4a:	f383 8811 	msr	BASEPRI, r3
 8014b4e:	f3bf 8f6f 	isb	sy
 8014b52:	f3bf 8f4f 	dsb	sy
 8014b56:	b662      	cpsie	i
 8014b58:	60fb      	str	r3, [r7, #12]
 8014b5a:	e7fe      	b.n	8014b5a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014b5c:	4b07      	ldr	r3, [pc, #28]	; (8014b7c <vTaskPlaceOnEventList+0x48>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	3318      	adds	r3, #24
 8014b62:	4619      	mov	r1, r3
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7fe f9d4 	bl	8012f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b6a:	2101      	movs	r1, #1
 8014b6c:	6838      	ldr	r0, [r7, #0]
 8014b6e:	f000 fb8f 	bl	8015290 <prvAddCurrentTaskToDelayedList>
}
 8014b72:	bf00      	nop
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	20000a20 	.word	0x20000a20

08014b80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b086      	sub	sp, #24
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	60f8      	str	r0, [r7, #12]
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d10b      	bne.n	8014baa <vTaskPlaceOnEventListRestricted+0x2a>
 8014b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b96:	b672      	cpsid	i
 8014b98:	f383 8811 	msr	BASEPRI, r3
 8014b9c:	f3bf 8f6f 	isb	sy
 8014ba0:	f3bf 8f4f 	dsb	sy
 8014ba4:	b662      	cpsie	i
 8014ba6:	617b      	str	r3, [r7, #20]
 8014ba8:	e7fe      	b.n	8014ba8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014baa:	4b0a      	ldr	r3, [pc, #40]	; (8014bd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	3318      	adds	r3, #24
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	68f8      	ldr	r0, [r7, #12]
 8014bb4:	f7fe f989 	bl	8012eca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d002      	beq.n	8014bc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8014bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014bc4:	6879      	ldr	r1, [r7, #4]
 8014bc6:	68b8      	ldr	r0, [r7, #8]
 8014bc8:	f000 fb62 	bl	8015290 <prvAddCurrentTaskToDelayedList>
	}
 8014bcc:	bf00      	nop
 8014bce:	3718      	adds	r7, #24
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}
 8014bd4:	20000a20 	.word	0x20000a20

08014bd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b086      	sub	sp, #24
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	68db      	ldr	r3, [r3, #12]
 8014be4:	68db      	ldr	r3, [r3, #12]
 8014be6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d10b      	bne.n	8014c06 <xTaskRemoveFromEventList+0x2e>
 8014bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf2:	b672      	cpsid	i
 8014bf4:	f383 8811 	msr	BASEPRI, r3
 8014bf8:	f3bf 8f6f 	isb	sy
 8014bfc:	f3bf 8f4f 	dsb	sy
 8014c00:	b662      	cpsie	i
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	e7fe      	b.n	8014c04 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	3318      	adds	r3, #24
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fe f9ba 	bl	8012f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c10:	4b1d      	ldr	r3, [pc, #116]	; (8014c88 <xTaskRemoveFromEventList+0xb0>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d11d      	bne.n	8014c54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	3304      	adds	r3, #4
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7fe f9b1 	bl	8012f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c26:	4b19      	ldr	r3, [pc, #100]	; (8014c8c <xTaskRemoveFromEventList+0xb4>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d903      	bls.n	8014c36 <xTaskRemoveFromEventList+0x5e>
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c32:	4a16      	ldr	r2, [pc, #88]	; (8014c8c <xTaskRemoveFromEventList+0xb4>)
 8014c34:	6013      	str	r3, [r2, #0]
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	4413      	add	r3, r2
 8014c40:	009b      	lsls	r3, r3, #2
 8014c42:	4a13      	ldr	r2, [pc, #76]	; (8014c90 <xTaskRemoveFromEventList+0xb8>)
 8014c44:	441a      	add	r2, r3
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	3304      	adds	r3, #4
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	4610      	mov	r0, r2
 8014c4e:	f7fe f93c 	bl	8012eca <vListInsertEnd>
 8014c52:	e005      	b.n	8014c60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	3318      	adds	r3, #24
 8014c58:	4619      	mov	r1, r3
 8014c5a:	480e      	ldr	r0, [pc, #56]	; (8014c94 <xTaskRemoveFromEventList+0xbc>)
 8014c5c:	f7fe f935 	bl	8012eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c64:	4b0c      	ldr	r3, [pc, #48]	; (8014c98 <xTaskRemoveFromEventList+0xc0>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d905      	bls.n	8014c7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014c6e:	2301      	movs	r3, #1
 8014c70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014c72:	4b0a      	ldr	r3, [pc, #40]	; (8014c9c <xTaskRemoveFromEventList+0xc4>)
 8014c74:	2201      	movs	r2, #1
 8014c76:	601a      	str	r2, [r3, #0]
 8014c78:	e001      	b.n	8014c7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014c7e:	697b      	ldr	r3, [r7, #20]
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3718      	adds	r7, #24
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	20000f1c 	.word	0x20000f1c
 8014c8c:	20000efc 	.word	0x20000efc
 8014c90:	20000a24 	.word	0x20000a24
 8014c94:	20000eb4 	.word	0x20000eb4
 8014c98:	20000a20 	.word	0x20000a20
 8014c9c:	20000f08 	.word	0x20000f08

08014ca0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014ca8:	4b06      	ldr	r3, [pc, #24]	; (8014cc4 <vTaskInternalSetTimeOutState+0x24>)
 8014caa:	681a      	ldr	r2, [r3, #0]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014cb0:	4b05      	ldr	r3, [pc, #20]	; (8014cc8 <vTaskInternalSetTimeOutState+0x28>)
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	605a      	str	r2, [r3, #4]
}
 8014cb8:	bf00      	nop
 8014cba:	370c      	adds	r7, #12
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr
 8014cc4:	20000f0c 	.word	0x20000f0c
 8014cc8:	20000ef8 	.word	0x20000ef8

08014ccc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b088      	sub	sp, #32
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10b      	bne.n	8014cf4 <xTaskCheckForTimeOut+0x28>
 8014cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce0:	b672      	cpsid	i
 8014ce2:	f383 8811 	msr	BASEPRI, r3
 8014ce6:	f3bf 8f6f 	isb	sy
 8014cea:	f3bf 8f4f 	dsb	sy
 8014cee:	b662      	cpsie	i
 8014cf0:	613b      	str	r3, [r7, #16]
 8014cf2:	e7fe      	b.n	8014cf2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d10b      	bne.n	8014d12 <xTaskCheckForTimeOut+0x46>
 8014cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cfe:	b672      	cpsid	i
 8014d00:	f383 8811 	msr	BASEPRI, r3
 8014d04:	f3bf 8f6f 	isb	sy
 8014d08:	f3bf 8f4f 	dsb	sy
 8014d0c:	b662      	cpsie	i
 8014d0e:	60fb      	str	r3, [r7, #12]
 8014d10:	e7fe      	b.n	8014d10 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8014d12:	f000 ff71 	bl	8015bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014d16:	4b1d      	ldr	r3, [pc, #116]	; (8014d8c <xTaskCheckForTimeOut+0xc0>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	685b      	ldr	r3, [r3, #4]
 8014d20:	69ba      	ldr	r2, [r7, #24]
 8014d22:	1ad3      	subs	r3, r2, r3
 8014d24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d2e:	d102      	bne.n	8014d36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014d30:	2300      	movs	r3, #0
 8014d32:	61fb      	str	r3, [r7, #28]
 8014d34:	e023      	b.n	8014d7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	4b15      	ldr	r3, [pc, #84]	; (8014d90 <xTaskCheckForTimeOut+0xc4>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d007      	beq.n	8014d52 <xTaskCheckForTimeOut+0x86>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	69ba      	ldr	r2, [r7, #24]
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d302      	bcc.n	8014d52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	61fb      	str	r3, [r7, #28]
 8014d50:	e015      	b.n	8014d7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	697a      	ldr	r2, [r7, #20]
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d20b      	bcs.n	8014d74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	1ad2      	subs	r2, r2, r3
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f7ff ff99 	bl	8014ca0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	61fb      	str	r3, [r7, #28]
 8014d72:	e004      	b.n	8014d7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	2200      	movs	r2, #0
 8014d78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014d7e:	f000 ff6d 	bl	8015c5c <vPortExitCritical>

	return xReturn;
 8014d82:	69fb      	ldr	r3, [r7, #28]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3720      	adds	r7, #32
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}
 8014d8c:	20000ef8 	.word	0x20000ef8
 8014d90:	20000f0c 	.word	0x20000f0c

08014d94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014d94:	b480      	push	{r7}
 8014d96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014d98:	4b03      	ldr	r3, [pc, #12]	; (8014da8 <vTaskMissedYield+0x14>)
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	601a      	str	r2, [r3, #0]
}
 8014d9e:	bf00      	nop
 8014da0:	46bd      	mov	sp, r7
 8014da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da6:	4770      	bx	lr
 8014da8:	20000f08 	.word	0x20000f08

08014dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014db4:	f000 f852 	bl	8014e5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014db8:	4b06      	ldr	r3, [pc, #24]	; (8014dd4 <prvIdleTask+0x28>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d9f9      	bls.n	8014db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014dc0:	4b05      	ldr	r3, [pc, #20]	; (8014dd8 <prvIdleTask+0x2c>)
 8014dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dc6:	601a      	str	r2, [r3, #0]
 8014dc8:	f3bf 8f4f 	dsb	sy
 8014dcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014dd0:	e7f0      	b.n	8014db4 <prvIdleTask+0x8>
 8014dd2:	bf00      	nop
 8014dd4:	20000a24 	.word	0x20000a24
 8014dd8:	e000ed04 	.word	0xe000ed04

08014ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014de2:	2300      	movs	r3, #0
 8014de4:	607b      	str	r3, [r7, #4]
 8014de6:	e00c      	b.n	8014e02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014de8:	687a      	ldr	r2, [r7, #4]
 8014dea:	4613      	mov	r3, r2
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	4413      	add	r3, r2
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	4a12      	ldr	r2, [pc, #72]	; (8014e3c <prvInitialiseTaskLists+0x60>)
 8014df4:	4413      	add	r3, r2
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7fe f83a 	bl	8012e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	3301      	adds	r3, #1
 8014e00:	607b      	str	r3, [r7, #4]
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2b37      	cmp	r3, #55	; 0x37
 8014e06:	d9ef      	bls.n	8014de8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014e08:	480d      	ldr	r0, [pc, #52]	; (8014e40 <prvInitialiseTaskLists+0x64>)
 8014e0a:	f7fe f831 	bl	8012e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014e0e:	480d      	ldr	r0, [pc, #52]	; (8014e44 <prvInitialiseTaskLists+0x68>)
 8014e10:	f7fe f82e 	bl	8012e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014e14:	480c      	ldr	r0, [pc, #48]	; (8014e48 <prvInitialiseTaskLists+0x6c>)
 8014e16:	f7fe f82b 	bl	8012e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014e1a:	480c      	ldr	r0, [pc, #48]	; (8014e4c <prvInitialiseTaskLists+0x70>)
 8014e1c:	f7fe f828 	bl	8012e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014e20:	480b      	ldr	r0, [pc, #44]	; (8014e50 <prvInitialiseTaskLists+0x74>)
 8014e22:	f7fe f825 	bl	8012e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014e26:	4b0b      	ldr	r3, [pc, #44]	; (8014e54 <prvInitialiseTaskLists+0x78>)
 8014e28:	4a05      	ldr	r2, [pc, #20]	; (8014e40 <prvInitialiseTaskLists+0x64>)
 8014e2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014e2c:	4b0a      	ldr	r3, [pc, #40]	; (8014e58 <prvInitialiseTaskLists+0x7c>)
 8014e2e:	4a05      	ldr	r2, [pc, #20]	; (8014e44 <prvInitialiseTaskLists+0x68>)
 8014e30:	601a      	str	r2, [r3, #0]
}
 8014e32:	bf00      	nop
 8014e34:	3708      	adds	r7, #8
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}
 8014e3a:	bf00      	nop
 8014e3c:	20000a24 	.word	0x20000a24
 8014e40:	20000e84 	.word	0x20000e84
 8014e44:	20000e98 	.word	0x20000e98
 8014e48:	20000eb4 	.word	0x20000eb4
 8014e4c:	20000ec8 	.word	0x20000ec8
 8014e50:	20000ee0 	.word	0x20000ee0
 8014e54:	20000eac 	.word	0x20000eac
 8014e58:	20000eb0 	.word	0x20000eb0

08014e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e62:	e019      	b.n	8014e98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014e64:	f000 fec8 	bl	8015bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e68:	4b0f      	ldr	r3, [pc, #60]	; (8014ea8 <prvCheckTasksWaitingTermination+0x4c>)
 8014e6a:	68db      	ldr	r3, [r3, #12]
 8014e6c:	68db      	ldr	r3, [r3, #12]
 8014e6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	3304      	adds	r3, #4
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fe f885 	bl	8012f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014e7a:	4b0c      	ldr	r3, [pc, #48]	; (8014eac <prvCheckTasksWaitingTermination+0x50>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	4a0a      	ldr	r2, [pc, #40]	; (8014eac <prvCheckTasksWaitingTermination+0x50>)
 8014e82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014e84:	4b0a      	ldr	r3, [pc, #40]	; (8014eb0 <prvCheckTasksWaitingTermination+0x54>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	3b01      	subs	r3, #1
 8014e8a:	4a09      	ldr	r2, [pc, #36]	; (8014eb0 <prvCheckTasksWaitingTermination+0x54>)
 8014e8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014e8e:	f000 fee5 	bl	8015c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f000 f80e 	bl	8014eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e98:	4b05      	ldr	r3, [pc, #20]	; (8014eb0 <prvCheckTasksWaitingTermination+0x54>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d1e1      	bne.n	8014e64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ea0:	bf00      	nop
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	20000ec8 	.word	0x20000ec8
 8014eac:	20000ef4 	.word	0x20000ef4
 8014eb0:	20000edc 	.word	0x20000edc

08014eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b084      	sub	sp, #16
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d108      	bne.n	8014ed8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f001 f87e 	bl	8015fcc <vPortFree>
				vPortFree( pxTCB );
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f001 f87b 	bl	8015fcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014ed6:	e019      	b.n	8014f0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	d103      	bne.n	8014eea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f001 f872 	bl	8015fcc <vPortFree>
	}
 8014ee8:	e010      	b.n	8014f0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014ef0:	2b02      	cmp	r3, #2
 8014ef2:	d00b      	beq.n	8014f0c <prvDeleteTCB+0x58>
 8014ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef8:	b672      	cpsid	i
 8014efa:	f383 8811 	msr	BASEPRI, r3
 8014efe:	f3bf 8f6f 	isb	sy
 8014f02:	f3bf 8f4f 	dsb	sy
 8014f06:	b662      	cpsie	i
 8014f08:	60fb      	str	r3, [r7, #12]
 8014f0a:	e7fe      	b.n	8014f0a <prvDeleteTCB+0x56>
	}
 8014f0c:	bf00      	nop
 8014f0e:	3710      	adds	r7, #16
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f1a:	4b0c      	ldr	r3, [pc, #48]	; (8014f4c <prvResetNextTaskUnblockTime+0x38>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d104      	bne.n	8014f2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014f24:	4b0a      	ldr	r3, [pc, #40]	; (8014f50 <prvResetNextTaskUnblockTime+0x3c>)
 8014f26:	f04f 32ff 	mov.w	r2, #4294967295
 8014f2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014f2c:	e008      	b.n	8014f40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f2e:	4b07      	ldr	r3, [pc, #28]	; (8014f4c <prvResetNextTaskUnblockTime+0x38>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	4a04      	ldr	r2, [pc, #16]	; (8014f50 <prvResetNextTaskUnblockTime+0x3c>)
 8014f3e:	6013      	str	r3, [r2, #0]
}
 8014f40:	bf00      	nop
 8014f42:	370c      	adds	r7, #12
 8014f44:	46bd      	mov	sp, r7
 8014f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4a:	4770      	bx	lr
 8014f4c:	20000eac 	.word	0x20000eac
 8014f50:	20000f14 	.word	0x20000f14

08014f54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014f54:	b480      	push	{r7}
 8014f56:	b083      	sub	sp, #12
 8014f58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014f5a:	4b05      	ldr	r3, [pc, #20]	; (8014f70 <xTaskGetCurrentTaskHandle+0x1c>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014f60:	687b      	ldr	r3, [r7, #4]
	}
 8014f62:	4618      	mov	r0, r3
 8014f64:	370c      	adds	r7, #12
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr
 8014f6e:	bf00      	nop
 8014f70:	20000a20 	.word	0x20000a20

08014f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014f7a:	4b0b      	ldr	r3, [pc, #44]	; (8014fa8 <xTaskGetSchedulerState+0x34>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d102      	bne.n	8014f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014f82:	2301      	movs	r3, #1
 8014f84:	607b      	str	r3, [r7, #4]
 8014f86:	e008      	b.n	8014f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f88:	4b08      	ldr	r3, [pc, #32]	; (8014fac <xTaskGetSchedulerState+0x38>)
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d102      	bne.n	8014f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014f90:	2302      	movs	r3, #2
 8014f92:	607b      	str	r3, [r7, #4]
 8014f94:	e001      	b.n	8014f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014f96:	2300      	movs	r3, #0
 8014f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014f9a:	687b      	ldr	r3, [r7, #4]
	}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	370c      	adds	r7, #12
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa6:	4770      	bx	lr
 8014fa8:	20000f00 	.word	0x20000f00
 8014fac:	20000f1c 	.word	0x20000f1c

08014fb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d051      	beq.n	801506a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fca:	4b2a      	ldr	r3, [pc, #168]	; (8015074 <xTaskPriorityInherit+0xc4>)
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d241      	bcs.n	8015058 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	699b      	ldr	r3, [r3, #24]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	db06      	blt.n	8014fea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fdc:	4b25      	ldr	r3, [pc, #148]	; (8015074 <xTaskPriorityInherit+0xc4>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	6959      	ldr	r1, [r3, #20]
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	4413      	add	r3, r2
 8014ff8:	009b      	lsls	r3, r3, #2
 8014ffa:	4a1f      	ldr	r2, [pc, #124]	; (8015078 <xTaskPriorityInherit+0xc8>)
 8014ffc:	4413      	add	r3, r2
 8014ffe:	4299      	cmp	r1, r3
 8015000:	d122      	bne.n	8015048 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	3304      	adds	r3, #4
 8015006:	4618      	mov	r0, r3
 8015008:	f7fd ffbc 	bl	8012f84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801500c:	4b19      	ldr	r3, [pc, #100]	; (8015074 <xTaskPriorityInherit+0xc4>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801501a:	4b18      	ldr	r3, [pc, #96]	; (801507c <xTaskPriorityInherit+0xcc>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	429a      	cmp	r2, r3
 8015020:	d903      	bls.n	801502a <xTaskPriorityInherit+0x7a>
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015026:	4a15      	ldr	r2, [pc, #84]	; (801507c <xTaskPriorityInherit+0xcc>)
 8015028:	6013      	str	r3, [r2, #0]
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801502e:	4613      	mov	r3, r2
 8015030:	009b      	lsls	r3, r3, #2
 8015032:	4413      	add	r3, r2
 8015034:	009b      	lsls	r3, r3, #2
 8015036:	4a10      	ldr	r2, [pc, #64]	; (8015078 <xTaskPriorityInherit+0xc8>)
 8015038:	441a      	add	r2, r3
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	3304      	adds	r3, #4
 801503e:	4619      	mov	r1, r3
 8015040:	4610      	mov	r0, r2
 8015042:	f7fd ff42 	bl	8012eca <vListInsertEnd>
 8015046:	e004      	b.n	8015052 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015048:	4b0a      	ldr	r3, [pc, #40]	; (8015074 <xTaskPriorityInherit+0xc4>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015052:	2301      	movs	r3, #1
 8015054:	60fb      	str	r3, [r7, #12]
 8015056:	e008      	b.n	801506a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801505c:	4b05      	ldr	r3, [pc, #20]	; (8015074 <xTaskPriorityInherit+0xc4>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015062:	429a      	cmp	r2, r3
 8015064:	d201      	bcs.n	801506a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015066:	2301      	movs	r3, #1
 8015068:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801506a:	68fb      	ldr	r3, [r7, #12]
	}
 801506c:	4618      	mov	r0, r3
 801506e:	3710      	adds	r7, #16
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}
 8015074:	20000a20 	.word	0x20000a20
 8015078:	20000a24 	.word	0x20000a24
 801507c:	20000efc 	.word	0x20000efc

08015080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015080:	b580      	push	{r7, lr}
 8015082:	b086      	sub	sp, #24
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801508c:	2300      	movs	r3, #0
 801508e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d058      	beq.n	8015148 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015096:	4b2f      	ldr	r3, [pc, #188]	; (8015154 <xTaskPriorityDisinherit+0xd4>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	693a      	ldr	r2, [r7, #16]
 801509c:	429a      	cmp	r2, r3
 801509e:	d00b      	beq.n	80150b8 <xTaskPriorityDisinherit+0x38>
 80150a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a4:	b672      	cpsid	i
 80150a6:	f383 8811 	msr	BASEPRI, r3
 80150aa:	f3bf 8f6f 	isb	sy
 80150ae:	f3bf 8f4f 	dsb	sy
 80150b2:	b662      	cpsie	i
 80150b4:	60fb      	str	r3, [r7, #12]
 80150b6:	e7fe      	b.n	80150b6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d10b      	bne.n	80150d8 <xTaskPriorityDisinherit+0x58>
 80150c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c4:	b672      	cpsid	i
 80150c6:	f383 8811 	msr	BASEPRI, r3
 80150ca:	f3bf 8f6f 	isb	sy
 80150ce:	f3bf 8f4f 	dsb	sy
 80150d2:	b662      	cpsie	i
 80150d4:	60bb      	str	r3, [r7, #8]
 80150d6:	e7fe      	b.n	80150d6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150dc:	1e5a      	subs	r2, r3, #1
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d02c      	beq.n	8015148 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d128      	bne.n	8015148 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	3304      	adds	r3, #4
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7fd ff42 	bl	8012f84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015118:	4b0f      	ldr	r3, [pc, #60]	; (8015158 <xTaskPriorityDisinherit+0xd8>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	429a      	cmp	r2, r3
 801511e:	d903      	bls.n	8015128 <xTaskPriorityDisinherit+0xa8>
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015124:	4a0c      	ldr	r2, [pc, #48]	; (8015158 <xTaskPriorityDisinherit+0xd8>)
 8015126:	6013      	str	r3, [r2, #0]
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801512c:	4613      	mov	r3, r2
 801512e:	009b      	lsls	r3, r3, #2
 8015130:	4413      	add	r3, r2
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	4a09      	ldr	r2, [pc, #36]	; (801515c <xTaskPriorityDisinherit+0xdc>)
 8015136:	441a      	add	r2, r3
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	3304      	adds	r3, #4
 801513c:	4619      	mov	r1, r3
 801513e:	4610      	mov	r0, r2
 8015140:	f7fd fec3 	bl	8012eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015144:	2301      	movs	r3, #1
 8015146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015148:	697b      	ldr	r3, [r7, #20]
	}
 801514a:	4618      	mov	r0, r3
 801514c:	3718      	adds	r7, #24
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop
 8015154:	20000a20 	.word	0x20000a20
 8015158:	20000efc 	.word	0x20000efc
 801515c:	20000a24 	.word	0x20000a24

08015160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015160:	b580      	push	{r7, lr}
 8015162:	b088      	sub	sp, #32
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801516e:	2301      	movs	r3, #1
 8015170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d06c      	beq.n	8015252 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015178:	69bb      	ldr	r3, [r7, #24]
 801517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801517c:	2b00      	cmp	r3, #0
 801517e:	d10b      	bne.n	8015198 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8015180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015184:	b672      	cpsid	i
 8015186:	f383 8811 	msr	BASEPRI, r3
 801518a:	f3bf 8f6f 	isb	sy
 801518e:	f3bf 8f4f 	dsb	sy
 8015192:	b662      	cpsie	i
 8015194:	60fb      	str	r3, [r7, #12]
 8015196:	e7fe      	b.n	8015196 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015198:	69bb      	ldr	r3, [r7, #24]
 801519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801519c:	683a      	ldr	r2, [r7, #0]
 801519e:	429a      	cmp	r2, r3
 80151a0:	d902      	bls.n	80151a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	61fb      	str	r3, [r7, #28]
 80151a6:	e002      	b.n	80151ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80151a8:	69bb      	ldr	r3, [r7, #24]
 80151aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80151ae:	69bb      	ldr	r3, [r7, #24]
 80151b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151b2:	69fa      	ldr	r2, [r7, #28]
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d04c      	beq.n	8015252 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80151b8:	69bb      	ldr	r3, [r7, #24]
 80151ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151bc:	697a      	ldr	r2, [r7, #20]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d147      	bne.n	8015252 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80151c2:	4b26      	ldr	r3, [pc, #152]	; (801525c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	69ba      	ldr	r2, [r7, #24]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d10b      	bne.n	80151e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
 80151cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d0:	b672      	cpsid	i
 80151d2:	f383 8811 	msr	BASEPRI, r3
 80151d6:	f3bf 8f6f 	isb	sy
 80151da:	f3bf 8f4f 	dsb	sy
 80151de:	b662      	cpsie	i
 80151e0:	60bb      	str	r3, [r7, #8]
 80151e2:	e7fe      	b.n	80151e2 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80151ea:	69bb      	ldr	r3, [r7, #24]
 80151ec:	69fa      	ldr	r2, [r7, #28]
 80151ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80151f0:	69bb      	ldr	r3, [r7, #24]
 80151f2:	699b      	ldr	r3, [r3, #24]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	db04      	blt.n	8015202 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	6959      	ldr	r1, [r3, #20]
 8015206:	693a      	ldr	r2, [r7, #16]
 8015208:	4613      	mov	r3, r2
 801520a:	009b      	lsls	r3, r3, #2
 801520c:	4413      	add	r3, r2
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	4a13      	ldr	r2, [pc, #76]	; (8015260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015212:	4413      	add	r3, r2
 8015214:	4299      	cmp	r1, r3
 8015216:	d11c      	bne.n	8015252 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015218:	69bb      	ldr	r3, [r7, #24]
 801521a:	3304      	adds	r3, #4
 801521c:	4618      	mov	r0, r3
 801521e:	f7fd feb1 	bl	8012f84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015222:	69bb      	ldr	r3, [r7, #24]
 8015224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015226:	4b0f      	ldr	r3, [pc, #60]	; (8015264 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	429a      	cmp	r2, r3
 801522c:	d903      	bls.n	8015236 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801522e:	69bb      	ldr	r3, [r7, #24]
 8015230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015232:	4a0c      	ldr	r2, [pc, #48]	; (8015264 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015234:	6013      	str	r3, [r2, #0]
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801523a:	4613      	mov	r3, r2
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	4413      	add	r3, r2
 8015240:	009b      	lsls	r3, r3, #2
 8015242:	4a07      	ldr	r2, [pc, #28]	; (8015260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015244:	441a      	add	r2, r3
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	3304      	adds	r3, #4
 801524a:	4619      	mov	r1, r3
 801524c:	4610      	mov	r0, r2
 801524e:	f7fd fe3c 	bl	8012eca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015252:	bf00      	nop
 8015254:	3720      	adds	r7, #32
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	20000a20 	.word	0x20000a20
 8015260:	20000a24 	.word	0x20000a24
 8015264:	20000efc 	.word	0x20000efc

08015268 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015268:	b480      	push	{r7}
 801526a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801526c:	4b07      	ldr	r3, [pc, #28]	; (801528c <pvTaskIncrementMutexHeldCount+0x24>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d004      	beq.n	801527e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015274:	4b05      	ldr	r3, [pc, #20]	; (801528c <pvTaskIncrementMutexHeldCount+0x24>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801527a:	3201      	adds	r2, #1
 801527c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801527e:	4b03      	ldr	r3, [pc, #12]	; (801528c <pvTaskIncrementMutexHeldCount+0x24>)
 8015280:	681b      	ldr	r3, [r3, #0]
	}
 8015282:	4618      	mov	r0, r3
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr
 801528c:	20000a20 	.word	0x20000a20

08015290 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801529a:	4b21      	ldr	r3, [pc, #132]	; (8015320 <prvAddCurrentTaskToDelayedList+0x90>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152a0:	4b20      	ldr	r3, [pc, #128]	; (8015324 <prvAddCurrentTaskToDelayedList+0x94>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	3304      	adds	r3, #4
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7fd fe6c 	bl	8012f84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152b2:	d10a      	bne.n	80152ca <prvAddCurrentTaskToDelayedList+0x3a>
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d007      	beq.n	80152ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152ba:	4b1a      	ldr	r3, [pc, #104]	; (8015324 <prvAddCurrentTaskToDelayedList+0x94>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	3304      	adds	r3, #4
 80152c0:	4619      	mov	r1, r3
 80152c2:	4819      	ldr	r0, [pc, #100]	; (8015328 <prvAddCurrentTaskToDelayedList+0x98>)
 80152c4:	f7fd fe01 	bl	8012eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80152c8:	e026      	b.n	8015318 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80152ca:	68fa      	ldr	r2, [r7, #12]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	4413      	add	r3, r2
 80152d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80152d2:	4b14      	ldr	r3, [pc, #80]	; (8015324 <prvAddCurrentTaskToDelayedList+0x94>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	68ba      	ldr	r2, [r7, #8]
 80152d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80152da:	68ba      	ldr	r2, [r7, #8]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	429a      	cmp	r2, r3
 80152e0:	d209      	bcs.n	80152f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152e2:	4b12      	ldr	r3, [pc, #72]	; (801532c <prvAddCurrentTaskToDelayedList+0x9c>)
 80152e4:	681a      	ldr	r2, [r3, #0]
 80152e6:	4b0f      	ldr	r3, [pc, #60]	; (8015324 <prvAddCurrentTaskToDelayedList+0x94>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	3304      	adds	r3, #4
 80152ec:	4619      	mov	r1, r3
 80152ee:	4610      	mov	r0, r2
 80152f0:	f7fd fe0f 	bl	8012f12 <vListInsert>
}
 80152f4:	e010      	b.n	8015318 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152f6:	4b0e      	ldr	r3, [pc, #56]	; (8015330 <prvAddCurrentTaskToDelayedList+0xa0>)
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	4b0a      	ldr	r3, [pc, #40]	; (8015324 <prvAddCurrentTaskToDelayedList+0x94>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	3304      	adds	r3, #4
 8015300:	4619      	mov	r1, r3
 8015302:	4610      	mov	r0, r2
 8015304:	f7fd fe05 	bl	8012f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015308:	4b0a      	ldr	r3, [pc, #40]	; (8015334 <prvAddCurrentTaskToDelayedList+0xa4>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	68ba      	ldr	r2, [r7, #8]
 801530e:	429a      	cmp	r2, r3
 8015310:	d202      	bcs.n	8015318 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015312:	4a08      	ldr	r2, [pc, #32]	; (8015334 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	6013      	str	r3, [r2, #0]
}
 8015318:	bf00      	nop
 801531a:	3710      	adds	r7, #16
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	20000ef8 	.word	0x20000ef8
 8015324:	20000a20 	.word	0x20000a20
 8015328:	20000ee0 	.word	0x20000ee0
 801532c:	20000eb0 	.word	0x20000eb0
 8015330:	20000eac 	.word	0x20000eac
 8015334:	20000f14 	.word	0x20000f14

08015338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b08a      	sub	sp, #40	; 0x28
 801533c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801533e:	2300      	movs	r3, #0
 8015340:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015342:	f000 fb0d 	bl	8015960 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015346:	4b1d      	ldr	r3, [pc, #116]	; (80153bc <xTimerCreateTimerTask+0x84>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d021      	beq.n	8015392 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801534e:	2300      	movs	r3, #0
 8015350:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015352:	2300      	movs	r3, #0
 8015354:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015356:	1d3a      	adds	r2, r7, #4
 8015358:	f107 0108 	add.w	r1, r7, #8
 801535c:	f107 030c 	add.w	r3, r7, #12
 8015360:	4618      	mov	r0, r3
 8015362:	f7fd fd6b 	bl	8012e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015366:	6879      	ldr	r1, [r7, #4]
 8015368:	68bb      	ldr	r3, [r7, #8]
 801536a:	68fa      	ldr	r2, [r7, #12]
 801536c:	9202      	str	r2, [sp, #8]
 801536e:	9301      	str	r3, [sp, #4]
 8015370:	2302      	movs	r3, #2
 8015372:	9300      	str	r3, [sp, #0]
 8015374:	2300      	movs	r3, #0
 8015376:	460a      	mov	r2, r1
 8015378:	4911      	ldr	r1, [pc, #68]	; (80153c0 <xTimerCreateTimerTask+0x88>)
 801537a:	4812      	ldr	r0, [pc, #72]	; (80153c4 <xTimerCreateTimerTask+0x8c>)
 801537c:	f7fe ff30 	bl	80141e0 <xTaskCreateStatic>
 8015380:	4602      	mov	r2, r0
 8015382:	4b11      	ldr	r3, [pc, #68]	; (80153c8 <xTimerCreateTimerTask+0x90>)
 8015384:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015386:	4b10      	ldr	r3, [pc, #64]	; (80153c8 <xTimerCreateTimerTask+0x90>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d001      	beq.n	8015392 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801538e:	2301      	movs	r3, #1
 8015390:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d10b      	bne.n	80153b0 <xTimerCreateTimerTask+0x78>
 8015398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801539c:	b672      	cpsid	i
 801539e:	f383 8811 	msr	BASEPRI, r3
 80153a2:	f3bf 8f6f 	isb	sy
 80153a6:	f3bf 8f4f 	dsb	sy
 80153aa:	b662      	cpsie	i
 80153ac:	613b      	str	r3, [r7, #16]
 80153ae:	e7fe      	b.n	80153ae <xTimerCreateTimerTask+0x76>
	return xReturn;
 80153b0:	697b      	ldr	r3, [r7, #20]
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3718      	adds	r7, #24
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	20000f50 	.word	0x20000f50
 80153c0:	08019f24 	.word	0x08019f24
 80153c4:	08015505 	.word	0x08015505
 80153c8:	20000f54 	.word	0x20000f54

080153cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b08a      	sub	sp, #40	; 0x28
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
 80153d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80153da:	2300      	movs	r3, #0
 80153dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d10b      	bne.n	80153fc <xTimerGenericCommand+0x30>
 80153e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e8:	b672      	cpsid	i
 80153ea:	f383 8811 	msr	BASEPRI, r3
 80153ee:	f3bf 8f6f 	isb	sy
 80153f2:	f3bf 8f4f 	dsb	sy
 80153f6:	b662      	cpsie	i
 80153f8:	623b      	str	r3, [r7, #32]
 80153fa:	e7fe      	b.n	80153fa <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80153fc:	4b19      	ldr	r3, [pc, #100]	; (8015464 <xTimerGenericCommand+0x98>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d02a      	beq.n	801545a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	2b05      	cmp	r3, #5
 8015414:	dc18      	bgt.n	8015448 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015416:	f7ff fdad 	bl	8014f74 <xTaskGetSchedulerState>
 801541a:	4603      	mov	r3, r0
 801541c:	2b02      	cmp	r3, #2
 801541e:	d109      	bne.n	8015434 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015420:	4b10      	ldr	r3, [pc, #64]	; (8015464 <xTimerGenericCommand+0x98>)
 8015422:	6818      	ldr	r0, [r3, #0]
 8015424:	f107 0110 	add.w	r1, r7, #16
 8015428:	2300      	movs	r3, #0
 801542a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801542c:	f7fe f860 	bl	80134f0 <xQueueGenericSend>
 8015430:	6278      	str	r0, [r7, #36]	; 0x24
 8015432:	e012      	b.n	801545a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015434:	4b0b      	ldr	r3, [pc, #44]	; (8015464 <xTimerGenericCommand+0x98>)
 8015436:	6818      	ldr	r0, [r3, #0]
 8015438:	f107 0110 	add.w	r1, r7, #16
 801543c:	2300      	movs	r3, #0
 801543e:	2200      	movs	r2, #0
 8015440:	f7fe f856 	bl	80134f0 <xQueueGenericSend>
 8015444:	6278      	str	r0, [r7, #36]	; 0x24
 8015446:	e008      	b.n	801545a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015448:	4b06      	ldr	r3, [pc, #24]	; (8015464 <xTimerGenericCommand+0x98>)
 801544a:	6818      	ldr	r0, [r3, #0]
 801544c:	f107 0110 	add.w	r1, r7, #16
 8015450:	2300      	movs	r3, #0
 8015452:	683a      	ldr	r2, [r7, #0]
 8015454:	f7fe f94e 	bl	80136f4 <xQueueGenericSendFromISR>
 8015458:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801545c:	4618      	mov	r0, r3
 801545e:	3728      	adds	r7, #40	; 0x28
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	20000f50 	.word	0x20000f50

08015468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b088      	sub	sp, #32
 801546c:	af02      	add	r7, sp, #8
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015472:	4b23      	ldr	r3, [pc, #140]	; (8015500 <prvProcessExpiredTimer+0x98>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	68db      	ldr	r3, [r3, #12]
 801547a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	3304      	adds	r3, #4
 8015480:	4618      	mov	r0, r3
 8015482:	f7fd fd7f 	bl	8012f84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801548c:	f003 0304 	and.w	r3, r3, #4
 8015490:	2b00      	cmp	r3, #0
 8015492:	d023      	beq.n	80154dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	699a      	ldr	r2, [r3, #24]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	18d1      	adds	r1, r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	683a      	ldr	r2, [r7, #0]
 80154a0:	6978      	ldr	r0, [r7, #20]
 80154a2:	f000 f8d3 	bl	801564c <prvInsertTimerInActiveList>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d020      	beq.n	80154ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80154ac:	2300      	movs	r3, #0
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	2300      	movs	r3, #0
 80154b2:	687a      	ldr	r2, [r7, #4]
 80154b4:	2100      	movs	r1, #0
 80154b6:	6978      	ldr	r0, [r7, #20]
 80154b8:	f7ff ff88 	bl	80153cc <xTimerGenericCommand>
 80154bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d114      	bne.n	80154ee <prvProcessExpiredTimer+0x86>
 80154c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c8:	b672      	cpsid	i
 80154ca:	f383 8811 	msr	BASEPRI, r3
 80154ce:	f3bf 8f6f 	isb	sy
 80154d2:	f3bf 8f4f 	dsb	sy
 80154d6:	b662      	cpsie	i
 80154d8:	60fb      	str	r3, [r7, #12]
 80154da:	e7fe      	b.n	80154da <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154e2:	f023 0301 	bic.w	r3, r3, #1
 80154e6:	b2da      	uxtb	r2, r3
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	6a1b      	ldr	r3, [r3, #32]
 80154f2:	6978      	ldr	r0, [r7, #20]
 80154f4:	4798      	blx	r3
}
 80154f6:	bf00      	nop
 80154f8:	3718      	adds	r7, #24
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	20000f48 	.word	0x20000f48

08015504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b084      	sub	sp, #16
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801550c:	f107 0308 	add.w	r3, r7, #8
 8015510:	4618      	mov	r0, r3
 8015512:	f000 f857 	bl	80155c4 <prvGetNextExpireTime>
 8015516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	4619      	mov	r1, r3
 801551c:	68f8      	ldr	r0, [r7, #12]
 801551e:	f000 f803 	bl	8015528 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015522:	f000 f8d5 	bl	80156d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015526:	e7f1      	b.n	801550c <prvTimerTask+0x8>

08015528 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b084      	sub	sp, #16
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015532:	f7ff f919 	bl	8014768 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015536:	f107 0308 	add.w	r3, r7, #8
 801553a:	4618      	mov	r0, r3
 801553c:	f000 f866 	bl	801560c <prvSampleTimeNow>
 8015540:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d130      	bne.n	80155aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d10a      	bne.n	8015564 <prvProcessTimerOrBlockTask+0x3c>
 801554e:	687a      	ldr	r2, [r7, #4]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	429a      	cmp	r2, r3
 8015554:	d806      	bhi.n	8015564 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015556:	f7ff f915 	bl	8014784 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801555a:	68f9      	ldr	r1, [r7, #12]
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f7ff ff83 	bl	8015468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015562:	e024      	b.n	80155ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d008      	beq.n	801557c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801556a:	4b13      	ldr	r3, [pc, #76]	; (80155b8 <prvProcessTimerOrBlockTask+0x90>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d101      	bne.n	8015578 <prvProcessTimerOrBlockTask+0x50>
 8015574:	2301      	movs	r3, #1
 8015576:	e000      	b.n	801557a <prvProcessTimerOrBlockTask+0x52>
 8015578:	2300      	movs	r3, #0
 801557a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801557c:	4b0f      	ldr	r3, [pc, #60]	; (80155bc <prvProcessTimerOrBlockTask+0x94>)
 801557e:	6818      	ldr	r0, [r3, #0]
 8015580:	687a      	ldr	r2, [r7, #4]
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	1ad3      	subs	r3, r2, r3
 8015586:	683a      	ldr	r2, [r7, #0]
 8015588:	4619      	mov	r1, r3
 801558a:	f7fe fdf5 	bl	8014178 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801558e:	f7ff f8f9 	bl	8014784 <xTaskResumeAll>
 8015592:	4603      	mov	r3, r0
 8015594:	2b00      	cmp	r3, #0
 8015596:	d10a      	bne.n	80155ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015598:	4b09      	ldr	r3, [pc, #36]	; (80155c0 <prvProcessTimerOrBlockTask+0x98>)
 801559a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801559e:	601a      	str	r2, [r3, #0]
 80155a0:	f3bf 8f4f 	dsb	sy
 80155a4:	f3bf 8f6f 	isb	sy
}
 80155a8:	e001      	b.n	80155ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80155aa:	f7ff f8eb 	bl	8014784 <xTaskResumeAll>
}
 80155ae:	bf00      	nop
 80155b0:	3710      	adds	r7, #16
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	20000f4c 	.word	0x20000f4c
 80155bc:	20000f50 	.word	0x20000f50
 80155c0:	e000ed04 	.word	0xe000ed04

080155c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80155c4:	b480      	push	{r7}
 80155c6:	b085      	sub	sp, #20
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80155cc:	4b0e      	ldr	r3, [pc, #56]	; (8015608 <prvGetNextExpireTime+0x44>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d101      	bne.n	80155da <prvGetNextExpireTime+0x16>
 80155d6:	2201      	movs	r2, #1
 80155d8:	e000      	b.n	80155dc <prvGetNextExpireTime+0x18>
 80155da:	2200      	movs	r2, #0
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d105      	bne.n	80155f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80155e8:	4b07      	ldr	r3, [pc, #28]	; (8015608 <prvGetNextExpireTime+0x44>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	68db      	ldr	r3, [r3, #12]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	60fb      	str	r3, [r7, #12]
 80155f2:	e001      	b.n	80155f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80155f4:	2300      	movs	r3, #0
 80155f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80155f8:	68fb      	ldr	r3, [r7, #12]
}
 80155fa:	4618      	mov	r0, r3
 80155fc:	3714      	adds	r7, #20
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr
 8015606:	bf00      	nop
 8015608:	20000f48 	.word	0x20000f48

0801560c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015614:	f7ff f954 	bl	80148c0 <xTaskGetTickCount>
 8015618:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801561a:	4b0b      	ldr	r3, [pc, #44]	; (8015648 <prvSampleTimeNow+0x3c>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	68fa      	ldr	r2, [r7, #12]
 8015620:	429a      	cmp	r2, r3
 8015622:	d205      	bcs.n	8015630 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015624:	f000 f936 	bl	8015894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2201      	movs	r2, #1
 801562c:	601a      	str	r2, [r3, #0]
 801562e:	e002      	b.n	8015636 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2200      	movs	r2, #0
 8015634:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015636:	4a04      	ldr	r2, [pc, #16]	; (8015648 <prvSampleTimeNow+0x3c>)
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801563c:	68fb      	ldr	r3, [r7, #12]
}
 801563e:	4618      	mov	r0, r3
 8015640:	3710      	adds	r7, #16
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	20000f58 	.word	0x20000f58

0801564c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b086      	sub	sp, #24
 8015650:	af00      	add	r7, sp, #0
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
 8015658:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801565a:	2300      	movs	r3, #0
 801565c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	68ba      	ldr	r2, [r7, #8]
 8015662:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	68fa      	ldr	r2, [r7, #12]
 8015668:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801566a:	68ba      	ldr	r2, [r7, #8]
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	429a      	cmp	r2, r3
 8015670:	d812      	bhi.n	8015698 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015672:	687a      	ldr	r2, [r7, #4]
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	1ad2      	subs	r2, r2, r3
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	699b      	ldr	r3, [r3, #24]
 801567c:	429a      	cmp	r2, r3
 801567e:	d302      	bcc.n	8015686 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015680:	2301      	movs	r3, #1
 8015682:	617b      	str	r3, [r7, #20]
 8015684:	e01b      	b.n	80156be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015686:	4b10      	ldr	r3, [pc, #64]	; (80156c8 <prvInsertTimerInActiveList+0x7c>)
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	3304      	adds	r3, #4
 801568e:	4619      	mov	r1, r3
 8015690:	4610      	mov	r0, r2
 8015692:	f7fd fc3e 	bl	8012f12 <vListInsert>
 8015696:	e012      	b.n	80156be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	429a      	cmp	r2, r3
 801569e:	d206      	bcs.n	80156ae <prvInsertTimerInActiveList+0x62>
 80156a0:	68ba      	ldr	r2, [r7, #8]
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d302      	bcc.n	80156ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80156a8:	2301      	movs	r3, #1
 80156aa:	617b      	str	r3, [r7, #20]
 80156ac:	e007      	b.n	80156be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80156ae:	4b07      	ldr	r3, [pc, #28]	; (80156cc <prvInsertTimerInActiveList+0x80>)
 80156b0:	681a      	ldr	r2, [r3, #0]
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	3304      	adds	r3, #4
 80156b6:	4619      	mov	r1, r3
 80156b8:	4610      	mov	r0, r2
 80156ba:	f7fd fc2a 	bl	8012f12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80156be:	697b      	ldr	r3, [r7, #20]
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3718      	adds	r7, #24
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	20000f4c 	.word	0x20000f4c
 80156cc:	20000f48 	.word	0x20000f48

080156d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b08e      	sub	sp, #56	; 0x38
 80156d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80156d6:	e0cc      	b.n	8015872 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	da19      	bge.n	8015712 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80156de:	1d3b      	adds	r3, r7, #4
 80156e0:	3304      	adds	r3, #4
 80156e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80156e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d10b      	bne.n	8015702 <prvProcessReceivedCommands+0x32>
 80156ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ee:	b672      	cpsid	i
 80156f0:	f383 8811 	msr	BASEPRI, r3
 80156f4:	f3bf 8f6f 	isb	sy
 80156f8:	f3bf 8f4f 	dsb	sy
 80156fc:	b662      	cpsie	i
 80156fe:	61fb      	str	r3, [r7, #28]
 8015700:	e7fe      	b.n	8015700 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015708:	6850      	ldr	r0, [r2, #4]
 801570a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801570c:	6892      	ldr	r2, [r2, #8]
 801570e:	4611      	mov	r1, r2
 8015710:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2b00      	cmp	r3, #0
 8015716:	f2c0 80ab 	blt.w	8015870 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015720:	695b      	ldr	r3, [r3, #20]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d004      	beq.n	8015730 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015728:	3304      	adds	r3, #4
 801572a:	4618      	mov	r0, r3
 801572c:	f7fd fc2a 	bl	8012f84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015730:	463b      	mov	r3, r7
 8015732:	4618      	mov	r0, r3
 8015734:	f7ff ff6a 	bl	801560c <prvSampleTimeNow>
 8015738:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2b09      	cmp	r3, #9
 801573e:	f200 8098 	bhi.w	8015872 <prvProcessReceivedCommands+0x1a2>
 8015742:	a201      	add	r2, pc, #4	; (adr r2, 8015748 <prvProcessReceivedCommands+0x78>)
 8015744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015748:	08015771 	.word	0x08015771
 801574c:	08015771 	.word	0x08015771
 8015750:	08015771 	.word	0x08015771
 8015754:	080157e7 	.word	0x080157e7
 8015758:	080157fb 	.word	0x080157fb
 801575c:	08015847 	.word	0x08015847
 8015760:	08015771 	.word	0x08015771
 8015764:	08015771 	.word	0x08015771
 8015768:	080157e7 	.word	0x080157e7
 801576c:	080157fb 	.word	0x080157fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015776:	f043 0301 	orr.w	r3, r3, #1
 801577a:	b2da      	uxtb	r2, r3
 801577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015782:	68ba      	ldr	r2, [r7, #8]
 8015784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015786:	699b      	ldr	r3, [r3, #24]
 8015788:	18d1      	adds	r1, r2, r3
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801578e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015790:	f7ff ff5c 	bl	801564c <prvInsertTimerInActiveList>
 8015794:	4603      	mov	r3, r0
 8015796:	2b00      	cmp	r3, #0
 8015798:	d06b      	beq.n	8015872 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579c:	6a1b      	ldr	r3, [r3, #32]
 801579e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80157a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157a8:	f003 0304 	and.w	r3, r3, #4
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d060      	beq.n	8015872 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80157b0:	68ba      	ldr	r2, [r7, #8]
 80157b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b4:	699b      	ldr	r3, [r3, #24]
 80157b6:	441a      	add	r2, r3
 80157b8:	2300      	movs	r3, #0
 80157ba:	9300      	str	r3, [sp, #0]
 80157bc:	2300      	movs	r3, #0
 80157be:	2100      	movs	r1, #0
 80157c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157c2:	f7ff fe03 	bl	80153cc <xTimerGenericCommand>
 80157c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80157c8:	6a3b      	ldr	r3, [r7, #32]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d151      	bne.n	8015872 <prvProcessReceivedCommands+0x1a2>
 80157ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d2:	b672      	cpsid	i
 80157d4:	f383 8811 	msr	BASEPRI, r3
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	b662      	cpsie	i
 80157e2:	61bb      	str	r3, [r7, #24]
 80157e4:	e7fe      	b.n	80157e4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157ec:	f023 0301 	bic.w	r3, r3, #1
 80157f0:	b2da      	uxtb	r2, r3
 80157f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80157f8:	e03b      	b.n	8015872 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80157fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015800:	f043 0301 	orr.w	r3, r3, #1
 8015804:	b2da      	uxtb	r2, r3
 8015806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801580c:	68ba      	ldr	r2, [r7, #8]
 801580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015810:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015814:	699b      	ldr	r3, [r3, #24]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d10b      	bne.n	8015832 <prvProcessReceivedCommands+0x162>
 801581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801581e:	b672      	cpsid	i
 8015820:	f383 8811 	msr	BASEPRI, r3
 8015824:	f3bf 8f6f 	isb	sy
 8015828:	f3bf 8f4f 	dsb	sy
 801582c:	b662      	cpsie	i
 801582e:	617b      	str	r3, [r7, #20]
 8015830:	e7fe      	b.n	8015830 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015834:	699a      	ldr	r2, [r3, #24]
 8015836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015838:	18d1      	adds	r1, r2, r3
 801583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801583e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015840:	f7ff ff04 	bl	801564c <prvInsertTimerInActiveList>
					break;
 8015844:	e015      	b.n	8015872 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801584c:	f003 0302 	and.w	r3, r3, #2
 8015850:	2b00      	cmp	r3, #0
 8015852:	d103      	bne.n	801585c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015856:	f000 fbb9 	bl	8015fcc <vPortFree>
 801585a:	e00a      	b.n	8015872 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015862:	f023 0301 	bic.w	r3, r3, #1
 8015866:	b2da      	uxtb	r2, r3
 8015868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801586e:	e000      	b.n	8015872 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015870:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015872:	4b07      	ldr	r3, [pc, #28]	; (8015890 <prvProcessReceivedCommands+0x1c0>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	1d39      	adds	r1, r7, #4
 8015878:	2200      	movs	r2, #0
 801587a:	4618      	mov	r0, r3
 801587c:	f7fe f868 	bl	8013950 <xQueueReceive>
 8015880:	4603      	mov	r3, r0
 8015882:	2b00      	cmp	r3, #0
 8015884:	f47f af28 	bne.w	80156d8 <prvProcessReceivedCommands+0x8>
	}
}
 8015888:	bf00      	nop
 801588a:	3730      	adds	r7, #48	; 0x30
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	20000f50 	.word	0x20000f50

08015894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b088      	sub	sp, #32
 8015898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801589a:	e049      	b.n	8015930 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801589c:	4b2e      	ldr	r3, [pc, #184]	; (8015958 <prvSwitchTimerLists+0xc4>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158a6:	4b2c      	ldr	r3, [pc, #176]	; (8015958 <prvSwitchTimerLists+0xc4>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	68db      	ldr	r3, [r3, #12]
 80158ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	3304      	adds	r3, #4
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7fd fb65 	bl	8012f84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	6a1b      	ldr	r3, [r3, #32]
 80158be:	68f8      	ldr	r0, [r7, #12]
 80158c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158c8:	f003 0304 	and.w	r3, r3, #4
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d02f      	beq.n	8015930 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	699b      	ldr	r3, [r3, #24]
 80158d4:	693a      	ldr	r2, [r7, #16]
 80158d6:	4413      	add	r3, r2
 80158d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80158da:	68ba      	ldr	r2, [r7, #8]
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d90e      	bls.n	8015900 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	68ba      	ldr	r2, [r7, #8]
 80158e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80158ee:	4b1a      	ldr	r3, [pc, #104]	; (8015958 <prvSwitchTimerLists+0xc4>)
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	3304      	adds	r3, #4
 80158f6:	4619      	mov	r1, r3
 80158f8:	4610      	mov	r0, r2
 80158fa:	f7fd fb0a 	bl	8012f12 <vListInsert>
 80158fe:	e017      	b.n	8015930 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015900:	2300      	movs	r3, #0
 8015902:	9300      	str	r3, [sp, #0]
 8015904:	2300      	movs	r3, #0
 8015906:	693a      	ldr	r2, [r7, #16]
 8015908:	2100      	movs	r1, #0
 801590a:	68f8      	ldr	r0, [r7, #12]
 801590c:	f7ff fd5e 	bl	80153cc <xTimerGenericCommand>
 8015910:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d10b      	bne.n	8015930 <prvSwitchTimerLists+0x9c>
 8015918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801591c:	b672      	cpsid	i
 801591e:	f383 8811 	msr	BASEPRI, r3
 8015922:	f3bf 8f6f 	isb	sy
 8015926:	f3bf 8f4f 	dsb	sy
 801592a:	b662      	cpsie	i
 801592c:	603b      	str	r3, [r7, #0]
 801592e:	e7fe      	b.n	801592e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015930:	4b09      	ldr	r3, [pc, #36]	; (8015958 <prvSwitchTimerLists+0xc4>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d1b0      	bne.n	801589c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801593a:	4b07      	ldr	r3, [pc, #28]	; (8015958 <prvSwitchTimerLists+0xc4>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015940:	4b06      	ldr	r3, [pc, #24]	; (801595c <prvSwitchTimerLists+0xc8>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4a04      	ldr	r2, [pc, #16]	; (8015958 <prvSwitchTimerLists+0xc4>)
 8015946:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015948:	4a04      	ldr	r2, [pc, #16]	; (801595c <prvSwitchTimerLists+0xc8>)
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	6013      	str	r3, [r2, #0]
}
 801594e:	bf00      	nop
 8015950:	3718      	adds	r7, #24
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}
 8015956:	bf00      	nop
 8015958:	20000f48 	.word	0x20000f48
 801595c:	20000f4c 	.word	0x20000f4c

08015960 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015966:	f000 f947 	bl	8015bf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801596a:	4b15      	ldr	r3, [pc, #84]	; (80159c0 <prvCheckForValidListAndQueue+0x60>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d120      	bne.n	80159b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015972:	4814      	ldr	r0, [pc, #80]	; (80159c4 <prvCheckForValidListAndQueue+0x64>)
 8015974:	f7fd fa7c 	bl	8012e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015978:	4813      	ldr	r0, [pc, #76]	; (80159c8 <prvCheckForValidListAndQueue+0x68>)
 801597a:	f7fd fa79 	bl	8012e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801597e:	4b13      	ldr	r3, [pc, #76]	; (80159cc <prvCheckForValidListAndQueue+0x6c>)
 8015980:	4a10      	ldr	r2, [pc, #64]	; (80159c4 <prvCheckForValidListAndQueue+0x64>)
 8015982:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015984:	4b12      	ldr	r3, [pc, #72]	; (80159d0 <prvCheckForValidListAndQueue+0x70>)
 8015986:	4a10      	ldr	r2, [pc, #64]	; (80159c8 <prvCheckForValidListAndQueue+0x68>)
 8015988:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801598a:	2300      	movs	r3, #0
 801598c:	9300      	str	r3, [sp, #0]
 801598e:	4b11      	ldr	r3, [pc, #68]	; (80159d4 <prvCheckForValidListAndQueue+0x74>)
 8015990:	4a11      	ldr	r2, [pc, #68]	; (80159d8 <prvCheckForValidListAndQueue+0x78>)
 8015992:	2110      	movs	r1, #16
 8015994:	200a      	movs	r0, #10
 8015996:	f7fd fb89 	bl	80130ac <xQueueGenericCreateStatic>
 801599a:	4602      	mov	r2, r0
 801599c:	4b08      	ldr	r3, [pc, #32]	; (80159c0 <prvCheckForValidListAndQueue+0x60>)
 801599e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80159a0:	4b07      	ldr	r3, [pc, #28]	; (80159c0 <prvCheckForValidListAndQueue+0x60>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d005      	beq.n	80159b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80159a8:	4b05      	ldr	r3, [pc, #20]	; (80159c0 <prvCheckForValidListAndQueue+0x60>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	490b      	ldr	r1, [pc, #44]	; (80159dc <prvCheckForValidListAndQueue+0x7c>)
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7fe fb90 	bl	80140d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80159b4:	f000 f952 	bl	8015c5c <vPortExitCritical>
}
 80159b8:	bf00      	nop
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bd80      	pop	{r7, pc}
 80159be:	bf00      	nop
 80159c0:	20000f50 	.word	0x20000f50
 80159c4:	20000f20 	.word	0x20000f20
 80159c8:	20000f34 	.word	0x20000f34
 80159cc:	20000f48 	.word	0x20000f48
 80159d0:	20000f4c 	.word	0x20000f4c
 80159d4:	20000ffc 	.word	0x20000ffc
 80159d8:	20000f5c 	.word	0x20000f5c
 80159dc:	08019f2c 	.word	0x08019f2c

080159e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80159e0:	b480      	push	{r7}
 80159e2:	b085      	sub	sp, #20
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	60f8      	str	r0, [r7, #12]
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	3b04      	subs	r3, #4
 80159f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80159f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	3b04      	subs	r3, #4
 80159fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	f023 0201 	bic.w	r2, r3, #1
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	3b04      	subs	r3, #4
 8015a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015a10:	4a0c      	ldr	r2, [pc, #48]	; (8015a44 <pxPortInitialiseStack+0x64>)
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	3b14      	subs	r3, #20
 8015a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	3b04      	subs	r3, #4
 8015a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f06f 0202 	mvn.w	r2, #2
 8015a2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	3b20      	subs	r3, #32
 8015a34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a36:	68fb      	ldr	r3, [r7, #12]
}
 8015a38:	4618      	mov	r0, r3
 8015a3a:	3714      	adds	r7, #20
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr
 8015a44:	08015a49 	.word	0x08015a49

08015a48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b085      	sub	sp, #20
 8015a4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a52:	4b13      	ldr	r3, [pc, #76]	; (8015aa0 <prvTaskExitError+0x58>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a5a:	d00b      	beq.n	8015a74 <prvTaskExitError+0x2c>
 8015a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a60:	b672      	cpsid	i
 8015a62:	f383 8811 	msr	BASEPRI, r3
 8015a66:	f3bf 8f6f 	isb	sy
 8015a6a:	f3bf 8f4f 	dsb	sy
 8015a6e:	b662      	cpsie	i
 8015a70:	60fb      	str	r3, [r7, #12]
 8015a72:	e7fe      	b.n	8015a72 <prvTaskExitError+0x2a>
 8015a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a78:	b672      	cpsid	i
 8015a7a:	f383 8811 	msr	BASEPRI, r3
 8015a7e:	f3bf 8f6f 	isb	sy
 8015a82:	f3bf 8f4f 	dsb	sy
 8015a86:	b662      	cpsie	i
 8015a88:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015a8a:	bf00      	nop
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d0fc      	beq.n	8015a8c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015a92:	bf00      	nop
 8015a94:	3714      	adds	r7, #20
 8015a96:	46bd      	mov	sp, r7
 8015a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	2000011c 	.word	0x2000011c
	...

08015ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ab0:	4b07      	ldr	r3, [pc, #28]	; (8015ad0 <pxCurrentTCBConst2>)
 8015ab2:	6819      	ldr	r1, [r3, #0]
 8015ab4:	6808      	ldr	r0, [r1, #0]
 8015ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aba:	f380 8809 	msr	PSP, r0
 8015abe:	f3bf 8f6f 	isb	sy
 8015ac2:	f04f 0000 	mov.w	r0, #0
 8015ac6:	f380 8811 	msr	BASEPRI, r0
 8015aca:	4770      	bx	lr
 8015acc:	f3af 8000 	nop.w

08015ad0 <pxCurrentTCBConst2>:
 8015ad0:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015ad4:	bf00      	nop
 8015ad6:	bf00      	nop

08015ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015ad8:	4808      	ldr	r0, [pc, #32]	; (8015afc <prvPortStartFirstTask+0x24>)
 8015ada:	6800      	ldr	r0, [r0, #0]
 8015adc:	6800      	ldr	r0, [r0, #0]
 8015ade:	f380 8808 	msr	MSP, r0
 8015ae2:	f04f 0000 	mov.w	r0, #0
 8015ae6:	f380 8814 	msr	CONTROL, r0
 8015aea:	b662      	cpsie	i
 8015aec:	b661      	cpsie	f
 8015aee:	f3bf 8f4f 	dsb	sy
 8015af2:	f3bf 8f6f 	isb	sy
 8015af6:	df00      	svc	0
 8015af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015afa:	bf00      	nop
 8015afc:	e000ed08 	.word	0xe000ed08

08015b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b06:	4b36      	ldr	r3, [pc, #216]	; (8015be0 <xPortStartScheduler+0xe0>)
 8015b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	22ff      	movs	r2, #255	; 0xff
 8015b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b20:	78fb      	ldrb	r3, [r7, #3]
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b28:	b2da      	uxtb	r2, r3
 8015b2a:	4b2e      	ldr	r3, [pc, #184]	; (8015be4 <xPortStartScheduler+0xe4>)
 8015b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b2e:	4b2e      	ldr	r3, [pc, #184]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b30:	2207      	movs	r2, #7
 8015b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b34:	e009      	b.n	8015b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015b36:	4b2c      	ldr	r3, [pc, #176]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	3b01      	subs	r3, #1
 8015b3c:	4a2a      	ldr	r2, [pc, #168]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015b40:	78fb      	ldrb	r3, [r7, #3]
 8015b42:	b2db      	uxtb	r3, r3
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	b2db      	uxtb	r3, r3
 8015b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b4a:	78fb      	ldrb	r3, [r7, #3]
 8015b4c:	b2db      	uxtb	r3, r3
 8015b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b52:	2b80      	cmp	r3, #128	; 0x80
 8015b54:	d0ef      	beq.n	8015b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015b56:	4b24      	ldr	r3, [pc, #144]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	f1c3 0307 	rsb	r3, r3, #7
 8015b5e:	2b04      	cmp	r3, #4
 8015b60:	d00b      	beq.n	8015b7a <xPortStartScheduler+0x7a>
 8015b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b66:	b672      	cpsid	i
 8015b68:	f383 8811 	msr	BASEPRI, r3
 8015b6c:	f3bf 8f6f 	isb	sy
 8015b70:	f3bf 8f4f 	dsb	sy
 8015b74:	b662      	cpsie	i
 8015b76:	60bb      	str	r3, [r7, #8]
 8015b78:	e7fe      	b.n	8015b78 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015b7a:	4b1b      	ldr	r3, [pc, #108]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	021b      	lsls	r3, r3, #8
 8015b80:	4a19      	ldr	r2, [pc, #100]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015b84:	4b18      	ldr	r3, [pc, #96]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015b8c:	4a16      	ldr	r2, [pc, #88]	; (8015be8 <xPortStartScheduler+0xe8>)
 8015b8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	b2da      	uxtb	r2, r3
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015b98:	4b14      	ldr	r3, [pc, #80]	; (8015bec <xPortStartScheduler+0xec>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	4a13      	ldr	r2, [pc, #76]	; (8015bec <xPortStartScheduler+0xec>)
 8015b9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015ba2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015ba4:	4b11      	ldr	r3, [pc, #68]	; (8015bec <xPortStartScheduler+0xec>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	4a10      	ldr	r2, [pc, #64]	; (8015bec <xPortStartScheduler+0xec>)
 8015baa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015bae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015bb0:	f000 f8d4 	bl	8015d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015bb4:	4b0e      	ldr	r3, [pc, #56]	; (8015bf0 <xPortStartScheduler+0xf0>)
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015bba:	f000 f8f3 	bl	8015da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015bbe:	4b0d      	ldr	r3, [pc, #52]	; (8015bf4 <xPortStartScheduler+0xf4>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	4a0c      	ldr	r2, [pc, #48]	; (8015bf4 <xPortStartScheduler+0xf4>)
 8015bc4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015bc8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015bca:	f7ff ff85 	bl	8015ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015bce:	f7fe ff53 	bl	8014a78 <vTaskSwitchContext>
	prvTaskExitError();
 8015bd2:	f7ff ff39 	bl	8015a48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015bd6:	2300      	movs	r3, #0
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3710      	adds	r7, #16
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	e000e400 	.word	0xe000e400
 8015be4:	2000104c 	.word	0x2000104c
 8015be8:	20001050 	.word	0x20001050
 8015bec:	e000ed20 	.word	0xe000ed20
 8015bf0:	2000011c 	.word	0x2000011c
 8015bf4:	e000ef34 	.word	0xe000ef34

08015bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b083      	sub	sp, #12
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c02:	b672      	cpsid	i
 8015c04:	f383 8811 	msr	BASEPRI, r3
 8015c08:	f3bf 8f6f 	isb	sy
 8015c0c:	f3bf 8f4f 	dsb	sy
 8015c10:	b662      	cpsie	i
 8015c12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c14:	4b0f      	ldr	r3, [pc, #60]	; (8015c54 <vPortEnterCritical+0x5c>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	3301      	adds	r3, #1
 8015c1a:	4a0e      	ldr	r2, [pc, #56]	; (8015c54 <vPortEnterCritical+0x5c>)
 8015c1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c1e:	4b0d      	ldr	r3, [pc, #52]	; (8015c54 <vPortEnterCritical+0x5c>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	d110      	bne.n	8015c48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015c26:	4b0c      	ldr	r3, [pc, #48]	; (8015c58 <vPortEnterCritical+0x60>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	b2db      	uxtb	r3, r3
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d00b      	beq.n	8015c48 <vPortEnterCritical+0x50>
 8015c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c34:	b672      	cpsid	i
 8015c36:	f383 8811 	msr	BASEPRI, r3
 8015c3a:	f3bf 8f6f 	isb	sy
 8015c3e:	f3bf 8f4f 	dsb	sy
 8015c42:	b662      	cpsie	i
 8015c44:	603b      	str	r3, [r7, #0]
 8015c46:	e7fe      	b.n	8015c46 <vPortEnterCritical+0x4e>
	}
}
 8015c48:	bf00      	nop
 8015c4a:	370c      	adds	r7, #12
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr
 8015c54:	2000011c 	.word	0x2000011c
 8015c58:	e000ed04 	.word	0xe000ed04

08015c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015c5c:	b480      	push	{r7}
 8015c5e:	b083      	sub	sp, #12
 8015c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015c62:	4b12      	ldr	r3, [pc, #72]	; (8015cac <vPortExitCritical+0x50>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d10b      	bne.n	8015c82 <vPortExitCritical+0x26>
 8015c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6e:	b672      	cpsid	i
 8015c70:	f383 8811 	msr	BASEPRI, r3
 8015c74:	f3bf 8f6f 	isb	sy
 8015c78:	f3bf 8f4f 	dsb	sy
 8015c7c:	b662      	cpsie	i
 8015c7e:	607b      	str	r3, [r7, #4]
 8015c80:	e7fe      	b.n	8015c80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015c82:	4b0a      	ldr	r3, [pc, #40]	; (8015cac <vPortExitCritical+0x50>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	3b01      	subs	r3, #1
 8015c88:	4a08      	ldr	r2, [pc, #32]	; (8015cac <vPortExitCritical+0x50>)
 8015c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015c8c:	4b07      	ldr	r3, [pc, #28]	; (8015cac <vPortExitCritical+0x50>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d104      	bne.n	8015c9e <vPortExitCritical+0x42>
 8015c94:	2300      	movs	r3, #0
 8015c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8015c9e:	bf00      	nop
 8015ca0:	370c      	adds	r7, #12
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop
 8015cac:	2000011c 	.word	0x2000011c

08015cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015cb0:	f3ef 8009 	mrs	r0, PSP
 8015cb4:	f3bf 8f6f 	isb	sy
 8015cb8:	4b15      	ldr	r3, [pc, #84]	; (8015d10 <pxCurrentTCBConst>)
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	f01e 0f10 	tst.w	lr, #16
 8015cc0:	bf08      	it	eq
 8015cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cca:	6010      	str	r0, [r2, #0]
 8015ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015cd4:	b672      	cpsid	i
 8015cd6:	f380 8811 	msr	BASEPRI, r0
 8015cda:	f3bf 8f4f 	dsb	sy
 8015cde:	f3bf 8f6f 	isb	sy
 8015ce2:	b662      	cpsie	i
 8015ce4:	f7fe fec8 	bl	8014a78 <vTaskSwitchContext>
 8015ce8:	f04f 0000 	mov.w	r0, #0
 8015cec:	f380 8811 	msr	BASEPRI, r0
 8015cf0:	bc09      	pop	{r0, r3}
 8015cf2:	6819      	ldr	r1, [r3, #0]
 8015cf4:	6808      	ldr	r0, [r1, #0]
 8015cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfa:	f01e 0f10 	tst.w	lr, #16
 8015cfe:	bf08      	it	eq
 8015d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d04:	f380 8809 	msr	PSP, r0
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	4770      	bx	lr
 8015d0e:	bf00      	nop

08015d10 <pxCurrentTCBConst>:
 8015d10:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d14:	bf00      	nop
 8015d16:	bf00      	nop

08015d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d22:	b672      	cpsid	i
 8015d24:	f383 8811 	msr	BASEPRI, r3
 8015d28:	f3bf 8f6f 	isb	sy
 8015d2c:	f3bf 8f4f 	dsb	sy
 8015d30:	b662      	cpsie	i
 8015d32:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015d34:	f7fe fde6 	bl	8014904 <xTaskIncrementTick>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d003      	beq.n	8015d46 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015d3e:	4b06      	ldr	r3, [pc, #24]	; (8015d58 <SysTick_Handler+0x40>)
 8015d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d44:	601a      	str	r2, [r3, #0]
 8015d46:	2300      	movs	r3, #0
 8015d48:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015d50:	bf00      	nop
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	e000ed04 	.word	0xe000ed04

08015d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015d5c:	b480      	push	{r7}
 8015d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015d60:	4b0b      	ldr	r3, [pc, #44]	; (8015d90 <vPortSetupTimerInterrupt+0x34>)
 8015d62:	2200      	movs	r2, #0
 8015d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015d66:	4b0b      	ldr	r3, [pc, #44]	; (8015d94 <vPortSetupTimerInterrupt+0x38>)
 8015d68:	2200      	movs	r2, #0
 8015d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015d6c:	4b0a      	ldr	r3, [pc, #40]	; (8015d98 <vPortSetupTimerInterrupt+0x3c>)
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	4a0a      	ldr	r2, [pc, #40]	; (8015d9c <vPortSetupTimerInterrupt+0x40>)
 8015d72:	fba2 2303 	umull	r2, r3, r2, r3
 8015d76:	099b      	lsrs	r3, r3, #6
 8015d78:	4a09      	ldr	r2, [pc, #36]	; (8015da0 <vPortSetupTimerInterrupt+0x44>)
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015d7e:	4b04      	ldr	r3, [pc, #16]	; (8015d90 <vPortSetupTimerInterrupt+0x34>)
 8015d80:	2207      	movs	r2, #7
 8015d82:	601a      	str	r2, [r3, #0]
}
 8015d84:	bf00      	nop
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop
 8015d90:	e000e010 	.word	0xe000e010
 8015d94:	e000e018 	.word	0xe000e018
 8015d98:	20000000 	.word	0x20000000
 8015d9c:	10624dd3 	.word	0x10624dd3
 8015da0:	e000e014 	.word	0xe000e014

08015da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015db4 <vPortEnableVFP+0x10>
 8015da8:	6801      	ldr	r1, [r0, #0]
 8015daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015dae:	6001      	str	r1, [r0, #0]
 8015db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015db2:	bf00      	nop
 8015db4:	e000ed88 	.word	0xe000ed88

08015db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015db8:	b480      	push	{r7}
 8015dba:	b085      	sub	sp, #20
 8015dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015dbe:	f3ef 8305 	mrs	r3, IPSR
 8015dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	2b0f      	cmp	r3, #15
 8015dc8:	d915      	bls.n	8015df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015dca:	4a18      	ldr	r2, [pc, #96]	; (8015e2c <vPortValidateInterruptPriority+0x74>)
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	4413      	add	r3, r2
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015dd4:	4b16      	ldr	r3, [pc, #88]	; (8015e30 <vPortValidateInterruptPriority+0x78>)
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	7afa      	ldrb	r2, [r7, #11]
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d20b      	bcs.n	8015df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8015dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015de2:	b672      	cpsid	i
 8015de4:	f383 8811 	msr	BASEPRI, r3
 8015de8:	f3bf 8f6f 	isb	sy
 8015dec:	f3bf 8f4f 	dsb	sy
 8015df0:	b662      	cpsie	i
 8015df2:	607b      	str	r3, [r7, #4]
 8015df4:	e7fe      	b.n	8015df4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015df6:	4b0f      	ldr	r3, [pc, #60]	; (8015e34 <vPortValidateInterruptPriority+0x7c>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015dfe:	4b0e      	ldr	r3, [pc, #56]	; (8015e38 <vPortValidateInterruptPriority+0x80>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d90b      	bls.n	8015e1e <vPortValidateInterruptPriority+0x66>
 8015e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e0a:	b672      	cpsid	i
 8015e0c:	f383 8811 	msr	BASEPRI, r3
 8015e10:	f3bf 8f6f 	isb	sy
 8015e14:	f3bf 8f4f 	dsb	sy
 8015e18:	b662      	cpsie	i
 8015e1a:	603b      	str	r3, [r7, #0]
 8015e1c:	e7fe      	b.n	8015e1c <vPortValidateInterruptPriority+0x64>
	}
 8015e1e:	bf00      	nop
 8015e20:	3714      	adds	r7, #20
 8015e22:	46bd      	mov	sp, r7
 8015e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop
 8015e2c:	e000e3f0 	.word	0xe000e3f0
 8015e30:	2000104c 	.word	0x2000104c
 8015e34:	e000ed0c 	.word	0xe000ed0c
 8015e38:	20001050 	.word	0x20001050

08015e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b08a      	sub	sp, #40	; 0x28
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e44:	2300      	movs	r3, #0
 8015e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e48:	f7fe fc8e 	bl	8014768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e4c:	4b5a      	ldr	r3, [pc, #360]	; (8015fb8 <pvPortMalloc+0x17c>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d101      	bne.n	8015e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e54:	f000 f916 	bl	8016084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e58:	4b58      	ldr	r3, [pc, #352]	; (8015fbc <pvPortMalloc+0x180>)
 8015e5a:	681a      	ldr	r2, [r3, #0]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	4013      	ands	r3, r2
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	f040 8090 	bne.w	8015f86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d01e      	beq.n	8015eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8015e6c:	2208      	movs	r2, #8
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	4413      	add	r3, r2
 8015e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f003 0307 	and.w	r3, r3, #7
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d015      	beq.n	8015eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f023 0307 	bic.w	r3, r3, #7
 8015e84:	3308      	adds	r3, #8
 8015e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f003 0307 	and.w	r3, r3, #7
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00b      	beq.n	8015eaa <pvPortMalloc+0x6e>
 8015e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e96:	b672      	cpsid	i
 8015e98:	f383 8811 	msr	BASEPRI, r3
 8015e9c:	f3bf 8f6f 	isb	sy
 8015ea0:	f3bf 8f4f 	dsb	sy
 8015ea4:	b662      	cpsie	i
 8015ea6:	617b      	str	r3, [r7, #20]
 8015ea8:	e7fe      	b.n	8015ea8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d06a      	beq.n	8015f86 <pvPortMalloc+0x14a>
 8015eb0:	4b43      	ldr	r3, [pc, #268]	; (8015fc0 <pvPortMalloc+0x184>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	687a      	ldr	r2, [r7, #4]
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	d865      	bhi.n	8015f86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015eba:	4b42      	ldr	r3, [pc, #264]	; (8015fc4 <pvPortMalloc+0x188>)
 8015ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015ebe:	4b41      	ldr	r3, [pc, #260]	; (8015fc4 <pvPortMalloc+0x188>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015ec4:	e004      	b.n	8015ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	685b      	ldr	r3, [r3, #4]
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	d903      	bls.n	8015ee2 <pvPortMalloc+0xa6>
 8015eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d1f1      	bne.n	8015ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015ee2:	4b35      	ldr	r3, [pc, #212]	; (8015fb8 <pvPortMalloc+0x17c>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d04c      	beq.n	8015f86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015eec:	6a3b      	ldr	r3, [r7, #32]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	2208      	movs	r2, #8
 8015ef2:	4413      	add	r3, r2
 8015ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	6a3b      	ldr	r3, [r7, #32]
 8015efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f00:	685a      	ldr	r2, [r3, #4]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	1ad2      	subs	r2, r2, r3
 8015f06:	2308      	movs	r3, #8
 8015f08:	005b      	lsls	r3, r3, #1
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d920      	bls.n	8015f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	4413      	add	r3, r2
 8015f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	f003 0307 	and.w	r3, r3, #7
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d00b      	beq.n	8015f38 <pvPortMalloc+0xfc>
 8015f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f24:	b672      	cpsid	i
 8015f26:	f383 8811 	msr	BASEPRI, r3
 8015f2a:	f3bf 8f6f 	isb	sy
 8015f2e:	f3bf 8f4f 	dsb	sy
 8015f32:	b662      	cpsie	i
 8015f34:	613b      	str	r3, [r7, #16]
 8015f36:	e7fe      	b.n	8015f36 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3a:	685a      	ldr	r2, [r3, #4]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	1ad2      	subs	r2, r2, r3
 8015f40:	69bb      	ldr	r3, [r7, #24]
 8015f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	687a      	ldr	r2, [r7, #4]
 8015f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f4a:	69b8      	ldr	r0, [r7, #24]
 8015f4c:	f000 f8fc 	bl	8016148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f50:	4b1b      	ldr	r3, [pc, #108]	; (8015fc0 <pvPortMalloc+0x184>)
 8015f52:	681a      	ldr	r2, [r3, #0]
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	1ad3      	subs	r3, r2, r3
 8015f5a:	4a19      	ldr	r2, [pc, #100]	; (8015fc0 <pvPortMalloc+0x184>)
 8015f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f5e:	4b18      	ldr	r3, [pc, #96]	; (8015fc0 <pvPortMalloc+0x184>)
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	4b19      	ldr	r3, [pc, #100]	; (8015fc8 <pvPortMalloc+0x18c>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d203      	bcs.n	8015f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f6a:	4b15      	ldr	r3, [pc, #84]	; (8015fc0 <pvPortMalloc+0x184>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	4a16      	ldr	r2, [pc, #88]	; (8015fc8 <pvPortMalloc+0x18c>)
 8015f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f74:	685a      	ldr	r2, [r3, #4]
 8015f76:	4b11      	ldr	r3, [pc, #68]	; (8015fbc <pvPortMalloc+0x180>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	431a      	orrs	r2, r3
 8015f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f82:	2200      	movs	r2, #0
 8015f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015f86:	f7fe fbfd 	bl	8014784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	f003 0307 	and.w	r3, r3, #7
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d00b      	beq.n	8015fac <pvPortMalloc+0x170>
 8015f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f98:	b672      	cpsid	i
 8015f9a:	f383 8811 	msr	BASEPRI, r3
 8015f9e:	f3bf 8f6f 	isb	sy
 8015fa2:	f3bf 8f4f 	dsb	sy
 8015fa6:	b662      	cpsie	i
 8015fa8:	60fb      	str	r3, [r7, #12]
 8015faa:	e7fe      	b.n	8015faa <pvPortMalloc+0x16e>
	return pvReturn;
 8015fac:	69fb      	ldr	r3, [r7, #28]
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3728      	adds	r7, #40	; 0x28
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	2000885c 	.word	0x2000885c
 8015fbc:	20008868 	.word	0x20008868
 8015fc0:	20008860 	.word	0x20008860
 8015fc4:	20008854 	.word	0x20008854
 8015fc8:	20008864 	.word	0x20008864

08015fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b086      	sub	sp, #24
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d04a      	beq.n	8016074 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015fde:	2308      	movs	r3, #8
 8015fe0:	425b      	negs	r3, r3
 8015fe2:	697a      	ldr	r2, [r7, #20]
 8015fe4:	4413      	add	r3, r2
 8015fe6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	685a      	ldr	r2, [r3, #4]
 8015ff0:	4b22      	ldr	r3, [pc, #136]	; (801607c <vPortFree+0xb0>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	4013      	ands	r3, r2
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d10b      	bne.n	8016012 <vPortFree+0x46>
 8015ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ffe:	b672      	cpsid	i
 8016000:	f383 8811 	msr	BASEPRI, r3
 8016004:	f3bf 8f6f 	isb	sy
 8016008:	f3bf 8f4f 	dsb	sy
 801600c:	b662      	cpsie	i
 801600e:	60fb      	str	r3, [r7, #12]
 8016010:	e7fe      	b.n	8016010 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d00b      	beq.n	8016032 <vPortFree+0x66>
 801601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801601e:	b672      	cpsid	i
 8016020:	f383 8811 	msr	BASEPRI, r3
 8016024:	f3bf 8f6f 	isb	sy
 8016028:	f3bf 8f4f 	dsb	sy
 801602c:	b662      	cpsie	i
 801602e:	60bb      	str	r3, [r7, #8]
 8016030:	e7fe      	b.n	8016030 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	685a      	ldr	r2, [r3, #4]
 8016036:	4b11      	ldr	r3, [pc, #68]	; (801607c <vPortFree+0xb0>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	4013      	ands	r3, r2
 801603c:	2b00      	cmp	r3, #0
 801603e:	d019      	beq.n	8016074 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d115      	bne.n	8016074 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	685a      	ldr	r2, [r3, #4]
 801604c:	4b0b      	ldr	r3, [pc, #44]	; (801607c <vPortFree+0xb0>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	43db      	mvns	r3, r3
 8016052:	401a      	ands	r2, r3
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016058:	f7fe fb86 	bl	8014768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	685a      	ldr	r2, [r3, #4]
 8016060:	4b07      	ldr	r3, [pc, #28]	; (8016080 <vPortFree+0xb4>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	4413      	add	r3, r2
 8016066:	4a06      	ldr	r2, [pc, #24]	; (8016080 <vPortFree+0xb4>)
 8016068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801606a:	6938      	ldr	r0, [r7, #16]
 801606c:	f000 f86c 	bl	8016148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016070:	f7fe fb88 	bl	8014784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016074:	bf00      	nop
 8016076:	3718      	adds	r7, #24
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	20008868 	.word	0x20008868
 8016080:	20008860 	.word	0x20008860

08016084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016084:	b480      	push	{r7}
 8016086:	b085      	sub	sp, #20
 8016088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801608a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801608e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016090:	4b27      	ldr	r3, [pc, #156]	; (8016130 <prvHeapInit+0xac>)
 8016092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f003 0307 	and.w	r3, r3, #7
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00c      	beq.n	80160b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	3307      	adds	r3, #7
 80160a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	f023 0307 	bic.w	r3, r3, #7
 80160aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	1ad3      	subs	r3, r2, r3
 80160b2:	4a1f      	ldr	r2, [pc, #124]	; (8016130 <prvHeapInit+0xac>)
 80160b4:	4413      	add	r3, r2
 80160b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80160bc:	4a1d      	ldr	r2, [pc, #116]	; (8016134 <prvHeapInit+0xb0>)
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80160c2:	4b1c      	ldr	r3, [pc, #112]	; (8016134 <prvHeapInit+0xb0>)
 80160c4:	2200      	movs	r2, #0
 80160c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	68ba      	ldr	r2, [r7, #8]
 80160cc:	4413      	add	r3, r2
 80160ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80160d0:	2208      	movs	r2, #8
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	1a9b      	subs	r3, r3, r2
 80160d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f023 0307 	bic.w	r3, r3, #7
 80160de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	4a15      	ldr	r2, [pc, #84]	; (8016138 <prvHeapInit+0xb4>)
 80160e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80160e6:	4b14      	ldr	r3, [pc, #80]	; (8016138 <prvHeapInit+0xb4>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	2200      	movs	r2, #0
 80160ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80160ee:	4b12      	ldr	r3, [pc, #72]	; (8016138 <prvHeapInit+0xb4>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	2200      	movs	r2, #0
 80160f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	68fa      	ldr	r2, [r7, #12]
 80160fe:	1ad2      	subs	r2, r2, r3
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016104:	4b0c      	ldr	r3, [pc, #48]	; (8016138 <prvHeapInit+0xb4>)
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	4a0a      	ldr	r2, [pc, #40]	; (801613c <prvHeapInit+0xb8>)
 8016112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	4a09      	ldr	r2, [pc, #36]	; (8016140 <prvHeapInit+0xbc>)
 801611a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801611c:	4b09      	ldr	r3, [pc, #36]	; (8016144 <prvHeapInit+0xc0>)
 801611e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016122:	601a      	str	r2, [r3, #0]
}
 8016124:	bf00      	nop
 8016126:	3714      	adds	r7, #20
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr
 8016130:	20001054 	.word	0x20001054
 8016134:	20008854 	.word	0x20008854
 8016138:	2000885c 	.word	0x2000885c
 801613c:	20008864 	.word	0x20008864
 8016140:	20008860 	.word	0x20008860
 8016144:	20008868 	.word	0x20008868

08016148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016148:	b480      	push	{r7}
 801614a:	b085      	sub	sp, #20
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016150:	4b28      	ldr	r3, [pc, #160]	; (80161f4 <prvInsertBlockIntoFreeList+0xac>)
 8016152:	60fb      	str	r3, [r7, #12]
 8016154:	e002      	b.n	801615c <prvInsertBlockIntoFreeList+0x14>
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	60fb      	str	r3, [r7, #12]
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	687a      	ldr	r2, [r7, #4]
 8016162:	429a      	cmp	r2, r3
 8016164:	d8f7      	bhi.n	8016156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	4413      	add	r3, r2
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	429a      	cmp	r2, r3
 8016176:	d108      	bne.n	801618a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	685a      	ldr	r2, [r3, #4]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	441a      	add	r2, r3
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	68ba      	ldr	r2, [r7, #8]
 8016194:	441a      	add	r2, r3
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	429a      	cmp	r2, r3
 801619c:	d118      	bne.n	80161d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	4b15      	ldr	r3, [pc, #84]	; (80161f8 <prvInsertBlockIntoFreeList+0xb0>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d00d      	beq.n	80161c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	685a      	ldr	r2, [r3, #4]
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	685b      	ldr	r3, [r3, #4]
 80161b4:	441a      	add	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	601a      	str	r2, [r3, #0]
 80161c4:	e008      	b.n	80161d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80161c6:	4b0c      	ldr	r3, [pc, #48]	; (80161f8 <prvInsertBlockIntoFreeList+0xb0>)
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	601a      	str	r2, [r3, #0]
 80161ce:	e003      	b.n	80161d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681a      	ldr	r2, [r3, #0]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80161d8:	68fa      	ldr	r2, [r7, #12]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	429a      	cmp	r2, r3
 80161de:	d002      	beq.n	80161e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161e6:	bf00      	nop
 80161e8:	3714      	adds	r7, #20
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	20008854 	.word	0x20008854
 80161f8:	2000885c 	.word	0x2000885c

080161fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016200:	2200      	movs	r2, #0
 8016202:	4912      	ldr	r1, [pc, #72]	; (801624c <MX_USB_DEVICE_Init+0x50>)
 8016204:	4812      	ldr	r0, [pc, #72]	; (8016250 <MX_USB_DEVICE_Init+0x54>)
 8016206:	f7f7 ff29 	bl	800e05c <USBD_Init>
 801620a:	4603      	mov	r3, r0
 801620c:	2b00      	cmp	r3, #0
 801620e:	d001      	beq.n	8016214 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016210:	f7eb fb92 	bl	8001938 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016214:	490f      	ldr	r1, [pc, #60]	; (8016254 <MX_USB_DEVICE_Init+0x58>)
 8016216:	480e      	ldr	r0, [pc, #56]	; (8016250 <MX_USB_DEVICE_Init+0x54>)
 8016218:	f7f7 ff56 	bl	800e0c8 <USBD_RegisterClass>
 801621c:	4603      	mov	r3, r0
 801621e:	2b00      	cmp	r3, #0
 8016220:	d001      	beq.n	8016226 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016222:	f7eb fb89 	bl	8001938 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016226:	490c      	ldr	r1, [pc, #48]	; (8016258 <MX_USB_DEVICE_Init+0x5c>)
 8016228:	4809      	ldr	r0, [pc, #36]	; (8016250 <MX_USB_DEVICE_Init+0x54>)
 801622a:	f7f7 fe7b 	bl	800df24 <USBD_CDC_RegisterInterface>
 801622e:	4603      	mov	r3, r0
 8016230:	2b00      	cmp	r3, #0
 8016232:	d001      	beq.n	8016238 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016234:	f7eb fb80 	bl	8001938 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016238:	4805      	ldr	r0, [pc, #20]	; (8016250 <MX_USB_DEVICE_Init+0x54>)
 801623a:	f7f7 ff66 	bl	800e10a <USBD_Start>
 801623e:	4603      	mov	r3, r0
 8016240:	2b00      	cmp	r3, #0
 8016242:	d001      	beq.n	8016248 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016244:	f7eb fb78 	bl	8001938 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016248:	bf00      	nop
 801624a:	bd80      	pop	{r7, pc}
 801624c:	20000134 	.word	0x20000134
 8016250:	200157e8 	.word	0x200157e8
 8016254:	20000018 	.word	0x20000018
 8016258:	20000120 	.word	0x20000120

0801625c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016260:	2200      	movs	r2, #0
 8016262:	4905      	ldr	r1, [pc, #20]	; (8016278 <CDC_Init_FS+0x1c>)
 8016264:	4805      	ldr	r0, [pc, #20]	; (801627c <CDC_Init_FS+0x20>)
 8016266:	f7f7 fe72 	bl	800df4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801626a:	4905      	ldr	r1, [pc, #20]	; (8016280 <CDC_Init_FS+0x24>)
 801626c:	4803      	ldr	r0, [pc, #12]	; (801627c <CDC_Init_FS+0x20>)
 801626e:	f7f7 fe87 	bl	800df80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016274:	4618      	mov	r0, r3
 8016276:	bd80      	pop	{r7, pc}
 8016278:	200162b8 	.word	0x200162b8
 801627c:	200157e8 	.word	0x200157e8
 8016280:	20015ab8 	.word	0x20015ab8

08016284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016284:	b480      	push	{r7}
 8016286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801628a:	4618      	mov	r0, r3
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr

08016294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016294:	b480      	push	{r7}
 8016296:	b083      	sub	sp, #12
 8016298:	af00      	add	r7, sp, #0
 801629a:	4603      	mov	r3, r0
 801629c:	6039      	str	r1, [r7, #0]
 801629e:	71fb      	strb	r3, [r7, #7]
 80162a0:	4613      	mov	r3, r2
 80162a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80162a4:	79fb      	ldrb	r3, [r7, #7]
 80162a6:	2b23      	cmp	r3, #35	; 0x23
 80162a8:	d84a      	bhi.n	8016340 <CDC_Control_FS+0xac>
 80162aa:	a201      	add	r2, pc, #4	; (adr r2, 80162b0 <CDC_Control_FS+0x1c>)
 80162ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162b0:	08016341 	.word	0x08016341
 80162b4:	08016341 	.word	0x08016341
 80162b8:	08016341 	.word	0x08016341
 80162bc:	08016341 	.word	0x08016341
 80162c0:	08016341 	.word	0x08016341
 80162c4:	08016341 	.word	0x08016341
 80162c8:	08016341 	.word	0x08016341
 80162cc:	08016341 	.word	0x08016341
 80162d0:	08016341 	.word	0x08016341
 80162d4:	08016341 	.word	0x08016341
 80162d8:	08016341 	.word	0x08016341
 80162dc:	08016341 	.word	0x08016341
 80162e0:	08016341 	.word	0x08016341
 80162e4:	08016341 	.word	0x08016341
 80162e8:	08016341 	.word	0x08016341
 80162ec:	08016341 	.word	0x08016341
 80162f0:	08016341 	.word	0x08016341
 80162f4:	08016341 	.word	0x08016341
 80162f8:	08016341 	.word	0x08016341
 80162fc:	08016341 	.word	0x08016341
 8016300:	08016341 	.word	0x08016341
 8016304:	08016341 	.word	0x08016341
 8016308:	08016341 	.word	0x08016341
 801630c:	08016341 	.word	0x08016341
 8016310:	08016341 	.word	0x08016341
 8016314:	08016341 	.word	0x08016341
 8016318:	08016341 	.word	0x08016341
 801631c:	08016341 	.word	0x08016341
 8016320:	08016341 	.word	0x08016341
 8016324:	08016341 	.word	0x08016341
 8016328:	08016341 	.word	0x08016341
 801632c:	08016341 	.word	0x08016341
 8016330:	08016341 	.word	0x08016341
 8016334:	08016341 	.word	0x08016341
 8016338:	08016341 	.word	0x08016341
 801633c:	08016341 	.word	0x08016341
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016340:	bf00      	nop
  }

  return (USBD_OK);
 8016342:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016344:	4618      	mov	r0, r3
 8016346:	370c      	adds	r7, #12
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr

08016350 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801635a:	6879      	ldr	r1, [r7, #4]
 801635c:	4805      	ldr	r0, [pc, #20]	; (8016374 <CDC_Receive_FS+0x24>)
 801635e:	f7f7 fe0f 	bl	800df80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016362:	4804      	ldr	r0, [pc, #16]	; (8016374 <CDC_Receive_FS+0x24>)
 8016364:	f7f7 fe50 	bl	800e008 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016368:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801636a:	4618      	mov	r0, r3
 801636c:	3708      	adds	r7, #8
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	200157e8 	.word	0x200157e8

08016378 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b084      	sub	sp, #16
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	460b      	mov	r3, r1
 8016382:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016384:	2300      	movs	r3, #0
 8016386:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016388:	4b0d      	ldr	r3, [pc, #52]	; (80163c0 <CDC_Transmit_FS+0x48>)
 801638a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801638e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016396:	2b00      	cmp	r3, #0
 8016398:	d001      	beq.n	801639e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801639a:	2301      	movs	r3, #1
 801639c:	e00b      	b.n	80163b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801639e:	887b      	ldrh	r3, [r7, #2]
 80163a0:	461a      	mov	r2, r3
 80163a2:	6879      	ldr	r1, [r7, #4]
 80163a4:	4806      	ldr	r0, [pc, #24]	; (80163c0 <CDC_Transmit_FS+0x48>)
 80163a6:	f7f7 fdd2 	bl	800df4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80163aa:	4805      	ldr	r0, [pc, #20]	; (80163c0 <CDC_Transmit_FS+0x48>)
 80163ac:	f7f7 fdfc 	bl	800dfa8 <USBD_CDC_TransmitPacket>
 80163b0:	4603      	mov	r3, r0
 80163b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80163b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80163b6:	4618      	mov	r0, r3
 80163b8:	3710      	adds	r7, #16
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bd80      	pop	{r7, pc}
 80163be:	bf00      	nop
 80163c0:	200157e8 	.word	0x200157e8

080163c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b087      	sub	sp, #28
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	4613      	mov	r3, r2
 80163d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80163d2:	2300      	movs	r3, #0
 80163d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80163d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163da:	4618      	mov	r0, r3
 80163dc:	371c      	adds	r7, #28
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr
	...

080163e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	4603      	mov	r3, r0
 80163f0:	6039      	str	r1, [r7, #0]
 80163f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	2212      	movs	r2, #18
 80163f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80163fa:	4b03      	ldr	r3, [pc, #12]	; (8016408 <USBD_FS_DeviceDescriptor+0x20>)
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	370c      	adds	r7, #12
 8016400:	46bd      	mov	sp, r7
 8016402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016406:	4770      	bx	lr
 8016408:	20000154 	.word	0x20000154

0801640c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801640c:	b480      	push	{r7}
 801640e:	b083      	sub	sp, #12
 8016410:	af00      	add	r7, sp, #0
 8016412:	4603      	mov	r3, r0
 8016414:	6039      	str	r1, [r7, #0]
 8016416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016418:	683b      	ldr	r3, [r7, #0]
 801641a:	2204      	movs	r2, #4
 801641c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801641e:	4b03      	ldr	r3, [pc, #12]	; (801642c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016420:	4618      	mov	r0, r3
 8016422:	370c      	adds	r7, #12
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr
 801642c:	20000174 	.word	0x20000174

08016430 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	af00      	add	r7, sp, #0
 8016436:	4603      	mov	r3, r0
 8016438:	6039      	str	r1, [r7, #0]
 801643a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801643c:	79fb      	ldrb	r3, [r7, #7]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d105      	bne.n	801644e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016442:	683a      	ldr	r2, [r7, #0]
 8016444:	4907      	ldr	r1, [pc, #28]	; (8016464 <USBD_FS_ProductStrDescriptor+0x34>)
 8016446:	4808      	ldr	r0, [pc, #32]	; (8016468 <USBD_FS_ProductStrDescriptor+0x38>)
 8016448:	f7f8 fe57 	bl	800f0fa <USBD_GetString>
 801644c:	e004      	b.n	8016458 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801644e:	683a      	ldr	r2, [r7, #0]
 8016450:	4904      	ldr	r1, [pc, #16]	; (8016464 <USBD_FS_ProductStrDescriptor+0x34>)
 8016452:	4805      	ldr	r0, [pc, #20]	; (8016468 <USBD_FS_ProductStrDescriptor+0x38>)
 8016454:	f7f8 fe51 	bl	800f0fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8016458:	4b02      	ldr	r3, [pc, #8]	; (8016464 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801645a:	4618      	mov	r0, r3
 801645c:	3708      	adds	r7, #8
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}
 8016462:	bf00      	nop
 8016464:	20016ab8 	.word	0x20016ab8
 8016468:	08019f34 	.word	0x08019f34

0801646c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	4603      	mov	r3, r0
 8016474:	6039      	str	r1, [r7, #0]
 8016476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016478:	683a      	ldr	r2, [r7, #0]
 801647a:	4904      	ldr	r1, [pc, #16]	; (801648c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801647c:	4804      	ldr	r0, [pc, #16]	; (8016490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801647e:	f7f8 fe3c 	bl	800f0fa <USBD_GetString>
  return USBD_StrDesc;
 8016482:	4b02      	ldr	r3, [pc, #8]	; (801648c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016484:	4618      	mov	r0, r3
 8016486:	3708      	adds	r7, #8
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}
 801648c:	20016ab8 	.word	0x20016ab8
 8016490:	08019f4c 	.word	0x08019f4c

08016494 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	4603      	mov	r3, r0
 801649c:	6039      	str	r1, [r7, #0]
 801649e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	221a      	movs	r2, #26
 80164a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80164a6:	f000 f855 	bl	8016554 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80164aa:	4b02      	ldr	r3, [pc, #8]	; (80164b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3708      	adds	r7, #8
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	20000178 	.word	0x20000178

080164b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	4603      	mov	r3, r0
 80164c0:	6039      	str	r1, [r7, #0]
 80164c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80164c4:	79fb      	ldrb	r3, [r7, #7]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d105      	bne.n	80164d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164ca:	683a      	ldr	r2, [r7, #0]
 80164cc:	4907      	ldr	r1, [pc, #28]	; (80164ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80164ce:	4808      	ldr	r0, [pc, #32]	; (80164f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80164d0:	f7f8 fe13 	bl	800f0fa <USBD_GetString>
 80164d4:	e004      	b.n	80164e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164d6:	683a      	ldr	r2, [r7, #0]
 80164d8:	4904      	ldr	r1, [pc, #16]	; (80164ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80164da:	4805      	ldr	r0, [pc, #20]	; (80164f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80164dc:	f7f8 fe0d 	bl	800f0fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80164e0:	4b02      	ldr	r3, [pc, #8]	; (80164ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3708      	adds	r7, #8
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}
 80164ea:	bf00      	nop
 80164ec:	20016ab8 	.word	0x20016ab8
 80164f0:	08019f60 	.word	0x08019f60

080164f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	4603      	mov	r3, r0
 80164fc:	6039      	str	r1, [r7, #0]
 80164fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016500:	79fb      	ldrb	r3, [r7, #7]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d105      	bne.n	8016512 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016506:	683a      	ldr	r2, [r7, #0]
 8016508:	4907      	ldr	r1, [pc, #28]	; (8016528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801650a:	4808      	ldr	r0, [pc, #32]	; (801652c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801650c:	f7f8 fdf5 	bl	800f0fa <USBD_GetString>
 8016510:	e004      	b.n	801651c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016512:	683a      	ldr	r2, [r7, #0]
 8016514:	4904      	ldr	r1, [pc, #16]	; (8016528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016516:	4805      	ldr	r0, [pc, #20]	; (801652c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016518:	f7f8 fdef 	bl	800f0fa <USBD_GetString>
  }
  return USBD_StrDesc;
 801651c:	4b02      	ldr	r3, [pc, #8]	; (8016528 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801651e:	4618      	mov	r0, r3
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}
 8016526:	bf00      	nop
 8016528:	20016ab8 	.word	0x20016ab8
 801652c:	08019f6c 	.word	0x08019f6c

08016530 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	4603      	mov	r3, r0
 8016538:	6039      	str	r1, [r7, #0]
 801653a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801653c:	683b      	ldr	r3, [r7, #0]
 801653e:	220c      	movs	r2, #12
 8016540:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016542:	4b03      	ldr	r3, [pc, #12]	; (8016550 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016544:	4618      	mov	r0, r3
 8016546:	370c      	adds	r7, #12
 8016548:	46bd      	mov	sp, r7
 801654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654e:	4770      	bx	lr
 8016550:	20000168 	.word	0x20000168

08016554 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b084      	sub	sp, #16
 8016558:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801655a:	4b0f      	ldr	r3, [pc, #60]	; (8016598 <Get_SerialNum+0x44>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016560:	4b0e      	ldr	r3, [pc, #56]	; (801659c <Get_SerialNum+0x48>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016566:	4b0e      	ldr	r3, [pc, #56]	; (80165a0 <Get_SerialNum+0x4c>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801656c:	68fa      	ldr	r2, [r7, #12]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	4413      	add	r3, r2
 8016572:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d009      	beq.n	801658e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801657a:	2208      	movs	r2, #8
 801657c:	4909      	ldr	r1, [pc, #36]	; (80165a4 <Get_SerialNum+0x50>)
 801657e:	68f8      	ldr	r0, [r7, #12]
 8016580:	f000 f814 	bl	80165ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016584:	2204      	movs	r2, #4
 8016586:	4908      	ldr	r1, [pc, #32]	; (80165a8 <Get_SerialNum+0x54>)
 8016588:	68b8      	ldr	r0, [r7, #8]
 801658a:	f000 f80f 	bl	80165ac <IntToUnicode>
  }
}
 801658e:	bf00      	nop
 8016590:	3710      	adds	r7, #16
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	1ff0f420 	.word	0x1ff0f420
 801659c:	1ff0f424 	.word	0x1ff0f424
 80165a0:	1ff0f428 	.word	0x1ff0f428
 80165a4:	2000017a 	.word	0x2000017a
 80165a8:	2000018a 	.word	0x2000018a

080165ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80165ac:	b480      	push	{r7}
 80165ae:	b087      	sub	sp, #28
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	60b9      	str	r1, [r7, #8]
 80165b6:	4613      	mov	r3, r2
 80165b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80165be:	2300      	movs	r3, #0
 80165c0:	75fb      	strb	r3, [r7, #23]
 80165c2:	e027      	b.n	8016614 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	0f1b      	lsrs	r3, r3, #28
 80165c8:	2b09      	cmp	r3, #9
 80165ca:	d80b      	bhi.n	80165e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	0f1b      	lsrs	r3, r3, #28
 80165d0:	b2da      	uxtb	r2, r3
 80165d2:	7dfb      	ldrb	r3, [r7, #23]
 80165d4:	005b      	lsls	r3, r3, #1
 80165d6:	4619      	mov	r1, r3
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	440b      	add	r3, r1
 80165dc:	3230      	adds	r2, #48	; 0x30
 80165de:	b2d2      	uxtb	r2, r2
 80165e0:	701a      	strb	r2, [r3, #0]
 80165e2:	e00a      	b.n	80165fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	0f1b      	lsrs	r3, r3, #28
 80165e8:	b2da      	uxtb	r2, r3
 80165ea:	7dfb      	ldrb	r3, [r7, #23]
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	4619      	mov	r1, r3
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	440b      	add	r3, r1
 80165f4:	3237      	adds	r2, #55	; 0x37
 80165f6:	b2d2      	uxtb	r2, r2
 80165f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	011b      	lsls	r3, r3, #4
 80165fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016600:	7dfb      	ldrb	r3, [r7, #23]
 8016602:	005b      	lsls	r3, r3, #1
 8016604:	3301      	adds	r3, #1
 8016606:	68ba      	ldr	r2, [r7, #8]
 8016608:	4413      	add	r3, r2
 801660a:	2200      	movs	r2, #0
 801660c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801660e:	7dfb      	ldrb	r3, [r7, #23]
 8016610:	3301      	adds	r3, #1
 8016612:	75fb      	strb	r3, [r7, #23]
 8016614:	7dfa      	ldrb	r2, [r7, #23]
 8016616:	79fb      	ldrb	r3, [r7, #7]
 8016618:	429a      	cmp	r2, r3
 801661a:	d3d3      	bcc.n	80165c4 <IntToUnicode+0x18>
  }
}
 801661c:	bf00      	nop
 801661e:	371c      	adds	r7, #28
 8016620:	46bd      	mov	sp, r7
 8016622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016626:	4770      	bx	lr

08016628 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b08a      	sub	sp, #40	; 0x28
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016630:	f107 0314 	add.w	r3, r7, #20
 8016634:	2200      	movs	r2, #0
 8016636:	601a      	str	r2, [r3, #0]
 8016638:	605a      	str	r2, [r3, #4]
 801663a:	609a      	str	r2, [r3, #8]
 801663c:	60da      	str	r2, [r3, #12]
 801663e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016648:	d13c      	bne.n	80166c4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801664a:	4b20      	ldr	r3, [pc, #128]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 801664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801664e:	4a1f      	ldr	r2, [pc, #124]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 8016650:	f043 0301 	orr.w	r3, r3, #1
 8016654:	6313      	str	r3, [r2, #48]	; 0x30
 8016656:	4b1d      	ldr	r3, [pc, #116]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 8016658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801665a:	f003 0301 	and.w	r3, r3, #1
 801665e:	613b      	str	r3, [r7, #16]
 8016660:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016662:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016668:	2302      	movs	r3, #2
 801666a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801666c:	2300      	movs	r3, #0
 801666e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016670:	2303      	movs	r3, #3
 8016672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016674:	230a      	movs	r3, #10
 8016676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016678:	f107 0314 	add.w	r3, r7, #20
 801667c:	4619      	mov	r1, r3
 801667e:	4814      	ldr	r0, [pc, #80]	; (80166d0 <HAL_PCD_MspInit+0xa8>)
 8016680:	f7ef f92c 	bl	80058dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016684:	4b11      	ldr	r3, [pc, #68]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 8016686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016688:	4a10      	ldr	r2, [pc, #64]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 801668a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801668e:	6353      	str	r3, [r2, #52]	; 0x34
 8016690:	4b0e      	ldr	r3, [pc, #56]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 8016692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016698:	60fb      	str	r3, [r7, #12]
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	4b0b      	ldr	r3, [pc, #44]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 801669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166a0:	4a0a      	ldr	r2, [pc, #40]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 80166a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80166a6:	6453      	str	r3, [r2, #68]	; 0x44
 80166a8:	4b08      	ldr	r3, [pc, #32]	; (80166cc <HAL_PCD_MspInit+0xa4>)
 80166aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80166b0:	60bb      	str	r3, [r7, #8]
 80166b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80166b4:	2200      	movs	r2, #0
 80166b6:	2105      	movs	r1, #5
 80166b8:	2043      	movs	r0, #67	; 0x43
 80166ba:	f7ee fd41 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80166be:	2043      	movs	r0, #67	; 0x43
 80166c0:	f7ee fd5a 	bl	8005178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80166c4:	bf00      	nop
 80166c6:	3728      	adds	r7, #40	; 0x28
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	40023800 	.word	0x40023800
 80166d0:	40020000 	.word	0x40020000

080166d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80166e8:	4619      	mov	r1, r3
 80166ea:	4610      	mov	r0, r2
 80166ec:	f7f7 fd58 	bl	800e1a0 <USBD_LL_SetupStage>
}
 80166f0:	bf00      	nop
 80166f2:	3708      	adds	r7, #8
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
 8016700:	460b      	mov	r3, r1
 8016702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801670a:	78fa      	ldrb	r2, [r7, #3]
 801670c:	6879      	ldr	r1, [r7, #4]
 801670e:	4613      	mov	r3, r2
 8016710:	00db      	lsls	r3, r3, #3
 8016712:	1a9b      	subs	r3, r3, r2
 8016714:	009b      	lsls	r3, r3, #2
 8016716:	440b      	add	r3, r1
 8016718:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801671c:	681a      	ldr	r2, [r3, #0]
 801671e:	78fb      	ldrb	r3, [r7, #3]
 8016720:	4619      	mov	r1, r3
 8016722:	f7f7 fd90 	bl	800e246 <USBD_LL_DataOutStage>
}
 8016726:	bf00      	nop
 8016728:	3708      	adds	r7, #8
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}

0801672e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
 8016736:	460b      	mov	r3, r1
 8016738:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8016740:	78fa      	ldrb	r2, [r7, #3]
 8016742:	6879      	ldr	r1, [r7, #4]
 8016744:	4613      	mov	r3, r2
 8016746:	00db      	lsls	r3, r3, #3
 8016748:	1a9b      	subs	r3, r3, r2
 801674a:	009b      	lsls	r3, r3, #2
 801674c:	440b      	add	r3, r1
 801674e:	3348      	adds	r3, #72	; 0x48
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	78fb      	ldrb	r3, [r7, #3]
 8016754:	4619      	mov	r1, r3
 8016756:	f7f7 fdd9 	bl	800e30c <USBD_LL_DataInStage>
}
 801675a:	bf00      	nop
 801675c:	3708      	adds	r7, #8
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}

08016762 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016762:	b580      	push	{r7, lr}
 8016764:	b082      	sub	sp, #8
 8016766:	af00      	add	r7, sp, #0
 8016768:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016770:	4618      	mov	r0, r3
 8016772:	f7f7 fedd 	bl	800e530 <USBD_LL_SOF>
}
 8016776:	bf00      	nop
 8016778:	3708      	adds	r7, #8
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}

0801677e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801677e:	b580      	push	{r7, lr}
 8016780:	b084      	sub	sp, #16
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016786:	2301      	movs	r3, #1
 8016788:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	68db      	ldr	r3, [r3, #12]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d102      	bne.n	8016798 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016792:	2300      	movs	r3, #0
 8016794:	73fb      	strb	r3, [r7, #15]
 8016796:	e008      	b.n	80167aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	68db      	ldr	r3, [r3, #12]
 801679c:	2b02      	cmp	r3, #2
 801679e:	d102      	bne.n	80167a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80167a0:	2301      	movs	r3, #1
 80167a2:	73fb      	strb	r3, [r7, #15]
 80167a4:	e001      	b.n	80167aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80167a6:	f7eb f8c7 	bl	8001938 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80167b0:	7bfa      	ldrb	r2, [r7, #15]
 80167b2:	4611      	mov	r1, r2
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7f7 fe80 	bl	800e4ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7f7 fe39 	bl	800e438 <USBD_LL_Reset>
}
 80167c6:	bf00      	nop
 80167c8:	3710      	adds	r7, #16
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
	...

080167d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80167de:	4618      	mov	r0, r3
 80167e0:	f7f7 fe7b 	bl	800e4da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	687a      	ldr	r2, [r7, #4]
 80167f0:	6812      	ldr	r2, [r2, #0]
 80167f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80167f6:	f043 0301 	orr.w	r3, r3, #1
 80167fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6a1b      	ldr	r3, [r3, #32]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d005      	beq.n	8016810 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016804:	4b04      	ldr	r3, [pc, #16]	; (8016818 <HAL_PCD_SuspendCallback+0x48>)
 8016806:	691b      	ldr	r3, [r3, #16]
 8016808:	4a03      	ldr	r2, [pc, #12]	; (8016818 <HAL_PCD_SuspendCallback+0x48>)
 801680a:	f043 0306 	orr.w	r3, r3, #6
 801680e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016810:	bf00      	nop
 8016812:	3708      	adds	r7, #8
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	e000ed00 	.word	0xe000ed00

0801681c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801682a:	4618      	mov	r0, r3
 801682c:	f7f7 fe6a 	bl	800e504 <USBD_LL_Resume>
}
 8016830:	bf00      	nop
 8016832:	3708      	adds	r7, #8
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	460b      	mov	r3, r1
 8016842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801684a:	78fa      	ldrb	r2, [r7, #3]
 801684c:	4611      	mov	r1, r2
 801684e:	4618      	mov	r0, r3
 8016850:	f7f7 fe95 	bl	800e57e <USBD_LL_IsoOUTIncomplete>
}
 8016854:	bf00      	nop
 8016856:	3708      	adds	r7, #8
 8016858:	46bd      	mov	sp, r7
 801685a:	bd80      	pop	{r7, pc}

0801685c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	460b      	mov	r3, r1
 8016866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801686e:	78fa      	ldrb	r2, [r7, #3]
 8016870:	4611      	mov	r1, r2
 8016872:	4618      	mov	r0, r3
 8016874:	f7f7 fe76 	bl	800e564 <USBD_LL_IsoINIncomplete>
}
 8016878:	bf00      	nop
 801687a:	3708      	adds	r7, #8
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}

08016880 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b082      	sub	sp, #8
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801688e:	4618      	mov	r0, r3
 8016890:	f7f7 fe82 	bl	800e598 <USBD_LL_DevConnected>
}
 8016894:	bf00      	nop
 8016896:	3708      	adds	r7, #8
 8016898:	46bd      	mov	sp, r7
 801689a:	bd80      	pop	{r7, pc}

0801689c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b082      	sub	sp, #8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7f7 fe7f 	bl	800e5ae <USBD_LL_DevDisconnected>
}
 80168b0:	bf00      	nop
 80168b2:	3708      	adds	r7, #8
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	781b      	ldrb	r3, [r3, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d13c      	bne.n	8016942 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80168c8:	4a20      	ldr	r2, [pc, #128]	; (801694c <USBD_LL_Init+0x94>)
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	4a1e      	ldr	r2, [pc, #120]	; (801694c <USBD_LL_Init+0x94>)
 80168d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80168d8:	4b1c      	ldr	r3, [pc, #112]	; (801694c <USBD_LL_Init+0x94>)
 80168da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80168de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80168e0:	4b1a      	ldr	r3, [pc, #104]	; (801694c <USBD_LL_Init+0x94>)
 80168e2:	2206      	movs	r2, #6
 80168e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80168e6:	4b19      	ldr	r3, [pc, #100]	; (801694c <USBD_LL_Init+0x94>)
 80168e8:	2202      	movs	r2, #2
 80168ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80168ec:	4b17      	ldr	r3, [pc, #92]	; (801694c <USBD_LL_Init+0x94>)
 80168ee:	2200      	movs	r2, #0
 80168f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80168f2:	4b16      	ldr	r3, [pc, #88]	; (801694c <USBD_LL_Init+0x94>)
 80168f4:	2202      	movs	r2, #2
 80168f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80168f8:	4b14      	ldr	r3, [pc, #80]	; (801694c <USBD_LL_Init+0x94>)
 80168fa:	2200      	movs	r2, #0
 80168fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80168fe:	4b13      	ldr	r3, [pc, #76]	; (801694c <USBD_LL_Init+0x94>)
 8016900:	2200      	movs	r2, #0
 8016902:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016904:	4b11      	ldr	r3, [pc, #68]	; (801694c <USBD_LL_Init+0x94>)
 8016906:	2200      	movs	r2, #0
 8016908:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801690a:	4b10      	ldr	r3, [pc, #64]	; (801694c <USBD_LL_Init+0x94>)
 801690c:	2200      	movs	r2, #0
 801690e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016910:	4b0e      	ldr	r3, [pc, #56]	; (801694c <USBD_LL_Init+0x94>)
 8016912:	2200      	movs	r2, #0
 8016914:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016916:	480d      	ldr	r0, [pc, #52]	; (801694c <USBD_LL_Init+0x94>)
 8016918:	f7ef f9a3 	bl	8005c62 <HAL_PCD_Init>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d001      	beq.n	8016926 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016922:	f7eb f809 	bl	8001938 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016926:	2180      	movs	r1, #128	; 0x80
 8016928:	4808      	ldr	r0, [pc, #32]	; (801694c <USBD_LL_Init+0x94>)
 801692a:	f7f0 fb24 	bl	8006f76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801692e:	2240      	movs	r2, #64	; 0x40
 8016930:	2100      	movs	r1, #0
 8016932:	4806      	ldr	r0, [pc, #24]	; (801694c <USBD_LL_Init+0x94>)
 8016934:	f7f0 fad8 	bl	8006ee8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016938:	2280      	movs	r2, #128	; 0x80
 801693a:	2101      	movs	r1, #1
 801693c:	4803      	ldr	r0, [pc, #12]	; (801694c <USBD_LL_Init+0x94>)
 801693e:	f7f0 fad3 	bl	8006ee8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016942:	2300      	movs	r3, #0
}
 8016944:	4618      	mov	r0, r3
 8016946:	3708      	adds	r7, #8
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}
 801694c:	20016cb8 	.word	0x20016cb8

08016950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b084      	sub	sp, #16
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016958:	2300      	movs	r3, #0
 801695a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801695c:	2300      	movs	r3, #0
 801695e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016966:	4618      	mov	r0, r3
 8016968:	f7ef fa9f 	bl	8005eaa <HAL_PCD_Start>
 801696c:	4603      	mov	r3, r0
 801696e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016970:	7bfb      	ldrb	r3, [r7, #15]
 8016972:	4618      	mov	r0, r3
 8016974:	f000 f97e 	bl	8016c74 <USBD_Get_USB_Status>
 8016978:	4603      	mov	r3, r0
 801697a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801697c:	7bbb      	ldrb	r3, [r7, #14]
}
 801697e:	4618      	mov	r0, r3
 8016980:	3710      	adds	r7, #16
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016986:	b580      	push	{r7, lr}
 8016988:	b084      	sub	sp, #16
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
 801698e:	4608      	mov	r0, r1
 8016990:	4611      	mov	r1, r2
 8016992:	461a      	mov	r2, r3
 8016994:	4603      	mov	r3, r0
 8016996:	70fb      	strb	r3, [r7, #3]
 8016998:	460b      	mov	r3, r1
 801699a:	70bb      	strb	r3, [r7, #2]
 801699c:	4613      	mov	r3, r2
 801699e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169a0:	2300      	movs	r3, #0
 80169a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169a4:	2300      	movs	r3, #0
 80169a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80169ae:	78bb      	ldrb	r3, [r7, #2]
 80169b0:	883a      	ldrh	r2, [r7, #0]
 80169b2:	78f9      	ldrb	r1, [r7, #3]
 80169b4:	f7ef fe9f 	bl	80066f6 <HAL_PCD_EP_Open>
 80169b8:	4603      	mov	r3, r0
 80169ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169bc:	7bfb      	ldrb	r3, [r7, #15]
 80169be:	4618      	mov	r0, r3
 80169c0:	f000 f958 	bl	8016c74 <USBD_Get_USB_Status>
 80169c4:	4603      	mov	r3, r0
 80169c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80169c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b084      	sub	sp, #16
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	460b      	mov	r3, r1
 80169dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169de:	2300      	movs	r3, #0
 80169e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169e2:	2300      	movs	r3, #0
 80169e4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80169ec:	78fa      	ldrb	r2, [r7, #3]
 80169ee:	4611      	mov	r1, r2
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7ef fee8 	bl	80067c6 <HAL_PCD_EP_Close>
 80169f6:	4603      	mov	r3, r0
 80169f8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80169fa:	7bfb      	ldrb	r3, [r7, #15]
 80169fc:	4618      	mov	r0, r3
 80169fe:	f000 f939 	bl	8016c74 <USBD_Get_USB_Status>
 8016a02:	4603      	mov	r3, r0
 8016a04:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3710      	adds	r7, #16
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}

08016a10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b084      	sub	sp, #16
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
 8016a18:	460b      	mov	r3, r1
 8016a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a20:	2300      	movs	r3, #0
 8016a22:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a2a:	78fa      	ldrb	r2, [r7, #3]
 8016a2c:	4611      	mov	r1, r2
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7ef ffc0 	bl	80069b4 <HAL_PCD_EP_SetStall>
 8016a34:	4603      	mov	r3, r0
 8016a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a38:	7bfb      	ldrb	r3, [r7, #15]
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f000 f91a 	bl	8016c74 <USBD_Get_USB_Status>
 8016a40:	4603      	mov	r3, r0
 8016a42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3710      	adds	r7, #16
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}

08016a4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a4e:	b580      	push	{r7, lr}
 8016a50:	b084      	sub	sp, #16
 8016a52:	af00      	add	r7, sp, #0
 8016a54:	6078      	str	r0, [r7, #4]
 8016a56:	460b      	mov	r3, r1
 8016a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a68:	78fa      	ldrb	r2, [r7, #3]
 8016a6a:	4611      	mov	r1, r2
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7f0 f805 	bl	8006a7c <HAL_PCD_EP_ClrStall>
 8016a72:	4603      	mov	r3, r0
 8016a74:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016a76:	7bfb      	ldrb	r3, [r7, #15]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f000 f8fb 	bl	8016c74 <USBD_Get_USB_Status>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	3710      	adds	r7, #16
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}

08016a8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a8c:	b480      	push	{r7}
 8016a8e:	b085      	sub	sp, #20
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
 8016a94:	460b      	mov	r3, r1
 8016a96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a9e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	da0b      	bge.n	8016ac0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016aa8:	78fb      	ldrb	r3, [r7, #3]
 8016aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016aae:	68f9      	ldr	r1, [r7, #12]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	1a9b      	subs	r3, r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	440b      	add	r3, r1
 8016aba:	333e      	adds	r3, #62	; 0x3e
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	e00b      	b.n	8016ad8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016ac0:	78fb      	ldrb	r3, [r7, #3]
 8016ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ac6:	68f9      	ldr	r1, [r7, #12]
 8016ac8:	4613      	mov	r3, r2
 8016aca:	00db      	lsls	r3, r3, #3
 8016acc:	1a9b      	subs	r3, r3, r2
 8016ace:	009b      	lsls	r3, r3, #2
 8016ad0:	440b      	add	r3, r1
 8016ad2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016ad6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3714      	adds	r7, #20
 8016adc:	46bd      	mov	sp, r7
 8016ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae2:	4770      	bx	lr

08016ae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	460b      	mov	r3, r1
 8016aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016af4:	2300      	movs	r3, #0
 8016af6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016afe:	78fa      	ldrb	r2, [r7, #3]
 8016b00:	4611      	mov	r1, r2
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7ef fdd2 	bl	80066ac <HAL_PCD_SetAddress>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b0c:	7bfb      	ldrb	r3, [r7, #15]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f000 f8b0 	bl	8016c74 <USBD_Get_USB_Status>
 8016b14:	4603      	mov	r3, r0
 8016b16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3710      	adds	r7, #16
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}

08016b22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b086      	sub	sp, #24
 8016b26:	af00      	add	r7, sp, #0
 8016b28:	60f8      	str	r0, [r7, #12]
 8016b2a:	607a      	str	r2, [r7, #4]
 8016b2c:	603b      	str	r3, [r7, #0]
 8016b2e:	460b      	mov	r3, r1
 8016b30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b32:	2300      	movs	r3, #0
 8016b34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b36:	2300      	movs	r3, #0
 8016b38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016b40:	7af9      	ldrb	r1, [r7, #11]
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	f7ef feeb 	bl	8006920 <HAL_PCD_EP_Transmit>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016b4e:	7dfb      	ldrb	r3, [r7, #23]
 8016b50:	4618      	mov	r0, r3
 8016b52:	f000 f88f 	bl	8016c74 <USBD_Get_USB_Status>
 8016b56:	4603      	mov	r3, r0
 8016b58:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016b5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3718      	adds	r7, #24
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}

08016b64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b086      	sub	sp, #24
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60f8      	str	r0, [r7, #12]
 8016b6c:	607a      	str	r2, [r7, #4]
 8016b6e:	603b      	str	r3, [r7, #0]
 8016b70:	460b      	mov	r3, r1
 8016b72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b74:	2300      	movs	r3, #0
 8016b76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016b82:	7af9      	ldrb	r1, [r7, #11]
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	687a      	ldr	r2, [r7, #4]
 8016b88:	f7ef fe67 	bl	800685a <HAL_PCD_EP_Receive>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016b90:	7dfb      	ldrb	r3, [r7, #23]
 8016b92:	4618      	mov	r0, r3
 8016b94:	f000 f86e 	bl	8016c74 <USBD_Get_USB_Status>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016b9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3718      	adds	r7, #24
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b082      	sub	sp, #8
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
 8016bae:	460b      	mov	r3, r1
 8016bb0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bb8:	78fa      	ldrb	r2, [r7, #3]
 8016bba:	4611      	mov	r1, r2
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7ef fe97 	bl	80068f0 <HAL_PCD_EP_GetRxCount>
 8016bc2:	4603      	mov	r3, r0
}
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3708      	adds	r7, #8
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016bd8:	78fb      	ldrb	r3, [r7, #3]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d002      	beq.n	8016be4 <HAL_PCDEx_LPM_Callback+0x18>
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d01f      	beq.n	8016c22 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8016be2:	e03b      	b.n	8016c5c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	6a1b      	ldr	r3, [r3, #32]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d007      	beq.n	8016bfc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016bec:	f000 f83c 	bl	8016c68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016bf0:	4b1c      	ldr	r3, [pc, #112]	; (8016c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8016bf2:	691b      	ldr	r3, [r3, #16]
 8016bf4:	4a1b      	ldr	r2, [pc, #108]	; (8016c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8016bf6:	f023 0306 	bic.w	r3, r3, #6
 8016bfa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	687a      	ldr	r2, [r7, #4]
 8016c08:	6812      	ldr	r2, [r2, #0]
 8016c0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c0e:	f023 0301 	bic.w	r3, r3, #1
 8016c12:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7f7 fc72 	bl	800e504 <USBD_LL_Resume>
    break;
 8016c20:	e01c      	b.n	8016c5c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	687a      	ldr	r2, [r7, #4]
 8016c2e:	6812      	ldr	r2, [r2, #0]
 8016c30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c34:	f043 0301 	orr.w	r3, r3, #1
 8016c38:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f7 fc4a 	bl	800e4da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	6a1b      	ldr	r3, [r3, #32]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d005      	beq.n	8016c5a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c4e:	4b05      	ldr	r3, [pc, #20]	; (8016c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8016c50:	691b      	ldr	r3, [r3, #16]
 8016c52:	4a04      	ldr	r2, [pc, #16]	; (8016c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8016c54:	f043 0306 	orr.w	r3, r3, #6
 8016c58:	6113      	str	r3, [r2, #16]
    break;   
 8016c5a:	bf00      	nop
}
 8016c5c:	bf00      	nop
 8016c5e:	3708      	adds	r7, #8
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	e000ed00 	.word	0xe000ed00

08016c68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016c6c:	f7ea fc2a 	bl	80014c4 <SystemClock_Config>
}
 8016c70:	bf00      	nop
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c74:	b480      	push	{r7}
 8016c76:	b085      	sub	sp, #20
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c7e:	2300      	movs	r3, #0
 8016c80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c82:	79fb      	ldrb	r3, [r7, #7]
 8016c84:	2b03      	cmp	r3, #3
 8016c86:	d817      	bhi.n	8016cb8 <USBD_Get_USB_Status+0x44>
 8016c88:	a201      	add	r2, pc, #4	; (adr r2, 8016c90 <USBD_Get_USB_Status+0x1c>)
 8016c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c8e:	bf00      	nop
 8016c90:	08016ca1 	.word	0x08016ca1
 8016c94:	08016ca7 	.word	0x08016ca7
 8016c98:	08016cad 	.word	0x08016cad
 8016c9c:	08016cb3 	.word	0x08016cb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca4:	e00b      	b.n	8016cbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ca6:	2303      	movs	r3, #3
 8016ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8016caa:	e008      	b.n	8016cbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016cac:	2301      	movs	r3, #1
 8016cae:	73fb      	strb	r3, [r7, #15]
    break;
 8016cb0:	e005      	b.n	8016cbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016cb2:	2303      	movs	r3, #3
 8016cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8016cb6:	e002      	b.n	8016cbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016cb8:	2303      	movs	r3, #3
 8016cba:	73fb      	strb	r3, [r7, #15]
    break;
 8016cbc:	bf00      	nop
  }
  return usb_status;
 8016cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3714      	adds	r7, #20
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <__errno>:
 8016ccc:	4b01      	ldr	r3, [pc, #4]	; (8016cd4 <__errno+0x8>)
 8016cce:	6818      	ldr	r0, [r3, #0]
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop
 8016cd4:	20000194 	.word	0x20000194

08016cd8 <__libc_init_array>:
 8016cd8:	b570      	push	{r4, r5, r6, lr}
 8016cda:	4e0d      	ldr	r6, [pc, #52]	; (8016d10 <__libc_init_array+0x38>)
 8016cdc:	4c0d      	ldr	r4, [pc, #52]	; (8016d14 <__libc_init_array+0x3c>)
 8016cde:	1ba4      	subs	r4, r4, r6
 8016ce0:	10a4      	asrs	r4, r4, #2
 8016ce2:	2500      	movs	r5, #0
 8016ce4:	42a5      	cmp	r5, r4
 8016ce6:	d109      	bne.n	8016cfc <__libc_init_array+0x24>
 8016ce8:	4e0b      	ldr	r6, [pc, #44]	; (8016d18 <__libc_init_array+0x40>)
 8016cea:	4c0c      	ldr	r4, [pc, #48]	; (8016d1c <__libc_init_array+0x44>)
 8016cec:	f002 fe60 	bl	80199b0 <_init>
 8016cf0:	1ba4      	subs	r4, r4, r6
 8016cf2:	10a4      	asrs	r4, r4, #2
 8016cf4:	2500      	movs	r5, #0
 8016cf6:	42a5      	cmp	r5, r4
 8016cf8:	d105      	bne.n	8016d06 <__libc_init_array+0x2e>
 8016cfa:	bd70      	pop	{r4, r5, r6, pc}
 8016cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d00:	4798      	blx	r3
 8016d02:	3501      	adds	r5, #1
 8016d04:	e7ee      	b.n	8016ce4 <__libc_init_array+0xc>
 8016d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d0a:	4798      	blx	r3
 8016d0c:	3501      	adds	r5, #1
 8016d0e:	e7f2      	b.n	8016cf6 <__libc_init_array+0x1e>
 8016d10:	0801a240 	.word	0x0801a240
 8016d14:	0801a240 	.word	0x0801a240
 8016d18:	0801a240 	.word	0x0801a240
 8016d1c:	0801a244 	.word	0x0801a244

08016d20 <malloc>:
 8016d20:	4b02      	ldr	r3, [pc, #8]	; (8016d2c <malloc+0xc>)
 8016d22:	4601      	mov	r1, r0
 8016d24:	6818      	ldr	r0, [r3, #0]
 8016d26:	f000 b86d 	b.w	8016e04 <_malloc_r>
 8016d2a:	bf00      	nop
 8016d2c:	20000194 	.word	0x20000194

08016d30 <free>:
 8016d30:	4b02      	ldr	r3, [pc, #8]	; (8016d3c <free+0xc>)
 8016d32:	4601      	mov	r1, r0
 8016d34:	6818      	ldr	r0, [r3, #0]
 8016d36:	f000 b817 	b.w	8016d68 <_free_r>
 8016d3a:	bf00      	nop
 8016d3c:	20000194 	.word	0x20000194

08016d40 <memcpy>:
 8016d40:	b510      	push	{r4, lr}
 8016d42:	1e43      	subs	r3, r0, #1
 8016d44:	440a      	add	r2, r1
 8016d46:	4291      	cmp	r1, r2
 8016d48:	d100      	bne.n	8016d4c <memcpy+0xc>
 8016d4a:	bd10      	pop	{r4, pc}
 8016d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d54:	e7f7      	b.n	8016d46 <memcpy+0x6>

08016d56 <memset>:
 8016d56:	4402      	add	r2, r0
 8016d58:	4603      	mov	r3, r0
 8016d5a:	4293      	cmp	r3, r2
 8016d5c:	d100      	bne.n	8016d60 <memset+0xa>
 8016d5e:	4770      	bx	lr
 8016d60:	f803 1b01 	strb.w	r1, [r3], #1
 8016d64:	e7f9      	b.n	8016d5a <memset+0x4>
	...

08016d68 <_free_r>:
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4605      	mov	r5, r0
 8016d6c:	2900      	cmp	r1, #0
 8016d6e:	d045      	beq.n	8016dfc <_free_r+0x94>
 8016d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d74:	1f0c      	subs	r4, r1, #4
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	bfb8      	it	lt
 8016d7a:	18e4      	addlt	r4, r4, r3
 8016d7c:	f000 fc1c 	bl	80175b8 <__malloc_lock>
 8016d80:	4a1f      	ldr	r2, [pc, #124]	; (8016e00 <_free_r+0x98>)
 8016d82:	6813      	ldr	r3, [r2, #0]
 8016d84:	4610      	mov	r0, r2
 8016d86:	b933      	cbnz	r3, 8016d96 <_free_r+0x2e>
 8016d88:	6063      	str	r3, [r4, #4]
 8016d8a:	6014      	str	r4, [r2, #0]
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d92:	f000 bc12 	b.w	80175ba <__malloc_unlock>
 8016d96:	42a3      	cmp	r3, r4
 8016d98:	d90c      	bls.n	8016db4 <_free_r+0x4c>
 8016d9a:	6821      	ldr	r1, [r4, #0]
 8016d9c:	1862      	adds	r2, r4, r1
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	bf04      	itt	eq
 8016da2:	681a      	ldreq	r2, [r3, #0]
 8016da4:	685b      	ldreq	r3, [r3, #4]
 8016da6:	6063      	str	r3, [r4, #4]
 8016da8:	bf04      	itt	eq
 8016daa:	1852      	addeq	r2, r2, r1
 8016dac:	6022      	streq	r2, [r4, #0]
 8016dae:	6004      	str	r4, [r0, #0]
 8016db0:	e7ec      	b.n	8016d8c <_free_r+0x24>
 8016db2:	4613      	mov	r3, r2
 8016db4:	685a      	ldr	r2, [r3, #4]
 8016db6:	b10a      	cbz	r2, 8016dbc <_free_r+0x54>
 8016db8:	42a2      	cmp	r2, r4
 8016dba:	d9fa      	bls.n	8016db2 <_free_r+0x4a>
 8016dbc:	6819      	ldr	r1, [r3, #0]
 8016dbe:	1858      	adds	r0, r3, r1
 8016dc0:	42a0      	cmp	r0, r4
 8016dc2:	d10b      	bne.n	8016ddc <_free_r+0x74>
 8016dc4:	6820      	ldr	r0, [r4, #0]
 8016dc6:	4401      	add	r1, r0
 8016dc8:	1858      	adds	r0, r3, r1
 8016dca:	4282      	cmp	r2, r0
 8016dcc:	6019      	str	r1, [r3, #0]
 8016dce:	d1dd      	bne.n	8016d8c <_free_r+0x24>
 8016dd0:	6810      	ldr	r0, [r2, #0]
 8016dd2:	6852      	ldr	r2, [r2, #4]
 8016dd4:	605a      	str	r2, [r3, #4]
 8016dd6:	4401      	add	r1, r0
 8016dd8:	6019      	str	r1, [r3, #0]
 8016dda:	e7d7      	b.n	8016d8c <_free_r+0x24>
 8016ddc:	d902      	bls.n	8016de4 <_free_r+0x7c>
 8016dde:	230c      	movs	r3, #12
 8016de0:	602b      	str	r3, [r5, #0]
 8016de2:	e7d3      	b.n	8016d8c <_free_r+0x24>
 8016de4:	6820      	ldr	r0, [r4, #0]
 8016de6:	1821      	adds	r1, r4, r0
 8016de8:	428a      	cmp	r2, r1
 8016dea:	bf04      	itt	eq
 8016dec:	6811      	ldreq	r1, [r2, #0]
 8016dee:	6852      	ldreq	r2, [r2, #4]
 8016df0:	6062      	str	r2, [r4, #4]
 8016df2:	bf04      	itt	eq
 8016df4:	1809      	addeq	r1, r1, r0
 8016df6:	6021      	streq	r1, [r4, #0]
 8016df8:	605c      	str	r4, [r3, #4]
 8016dfa:	e7c7      	b.n	8016d8c <_free_r+0x24>
 8016dfc:	bd38      	pop	{r3, r4, r5, pc}
 8016dfe:	bf00      	nop
 8016e00:	2000886c 	.word	0x2000886c

08016e04 <_malloc_r>:
 8016e04:	b570      	push	{r4, r5, r6, lr}
 8016e06:	1ccd      	adds	r5, r1, #3
 8016e08:	f025 0503 	bic.w	r5, r5, #3
 8016e0c:	3508      	adds	r5, #8
 8016e0e:	2d0c      	cmp	r5, #12
 8016e10:	bf38      	it	cc
 8016e12:	250c      	movcc	r5, #12
 8016e14:	2d00      	cmp	r5, #0
 8016e16:	4606      	mov	r6, r0
 8016e18:	db01      	blt.n	8016e1e <_malloc_r+0x1a>
 8016e1a:	42a9      	cmp	r1, r5
 8016e1c:	d903      	bls.n	8016e26 <_malloc_r+0x22>
 8016e1e:	230c      	movs	r3, #12
 8016e20:	6033      	str	r3, [r6, #0]
 8016e22:	2000      	movs	r0, #0
 8016e24:	bd70      	pop	{r4, r5, r6, pc}
 8016e26:	f000 fbc7 	bl	80175b8 <__malloc_lock>
 8016e2a:	4a21      	ldr	r2, [pc, #132]	; (8016eb0 <_malloc_r+0xac>)
 8016e2c:	6814      	ldr	r4, [r2, #0]
 8016e2e:	4621      	mov	r1, r4
 8016e30:	b991      	cbnz	r1, 8016e58 <_malloc_r+0x54>
 8016e32:	4c20      	ldr	r4, [pc, #128]	; (8016eb4 <_malloc_r+0xb0>)
 8016e34:	6823      	ldr	r3, [r4, #0]
 8016e36:	b91b      	cbnz	r3, 8016e40 <_malloc_r+0x3c>
 8016e38:	4630      	mov	r0, r6
 8016e3a:	f000 f8a1 	bl	8016f80 <_sbrk_r>
 8016e3e:	6020      	str	r0, [r4, #0]
 8016e40:	4629      	mov	r1, r5
 8016e42:	4630      	mov	r0, r6
 8016e44:	f000 f89c 	bl	8016f80 <_sbrk_r>
 8016e48:	1c43      	adds	r3, r0, #1
 8016e4a:	d124      	bne.n	8016e96 <_malloc_r+0x92>
 8016e4c:	230c      	movs	r3, #12
 8016e4e:	6033      	str	r3, [r6, #0]
 8016e50:	4630      	mov	r0, r6
 8016e52:	f000 fbb2 	bl	80175ba <__malloc_unlock>
 8016e56:	e7e4      	b.n	8016e22 <_malloc_r+0x1e>
 8016e58:	680b      	ldr	r3, [r1, #0]
 8016e5a:	1b5b      	subs	r3, r3, r5
 8016e5c:	d418      	bmi.n	8016e90 <_malloc_r+0x8c>
 8016e5e:	2b0b      	cmp	r3, #11
 8016e60:	d90f      	bls.n	8016e82 <_malloc_r+0x7e>
 8016e62:	600b      	str	r3, [r1, #0]
 8016e64:	50cd      	str	r5, [r1, r3]
 8016e66:	18cc      	adds	r4, r1, r3
 8016e68:	4630      	mov	r0, r6
 8016e6a:	f000 fba6 	bl	80175ba <__malloc_unlock>
 8016e6e:	f104 000b 	add.w	r0, r4, #11
 8016e72:	1d23      	adds	r3, r4, #4
 8016e74:	f020 0007 	bic.w	r0, r0, #7
 8016e78:	1ac3      	subs	r3, r0, r3
 8016e7a:	d0d3      	beq.n	8016e24 <_malloc_r+0x20>
 8016e7c:	425a      	negs	r2, r3
 8016e7e:	50e2      	str	r2, [r4, r3]
 8016e80:	e7d0      	b.n	8016e24 <_malloc_r+0x20>
 8016e82:	428c      	cmp	r4, r1
 8016e84:	684b      	ldr	r3, [r1, #4]
 8016e86:	bf16      	itet	ne
 8016e88:	6063      	strne	r3, [r4, #4]
 8016e8a:	6013      	streq	r3, [r2, #0]
 8016e8c:	460c      	movne	r4, r1
 8016e8e:	e7eb      	b.n	8016e68 <_malloc_r+0x64>
 8016e90:	460c      	mov	r4, r1
 8016e92:	6849      	ldr	r1, [r1, #4]
 8016e94:	e7cc      	b.n	8016e30 <_malloc_r+0x2c>
 8016e96:	1cc4      	adds	r4, r0, #3
 8016e98:	f024 0403 	bic.w	r4, r4, #3
 8016e9c:	42a0      	cmp	r0, r4
 8016e9e:	d005      	beq.n	8016eac <_malloc_r+0xa8>
 8016ea0:	1a21      	subs	r1, r4, r0
 8016ea2:	4630      	mov	r0, r6
 8016ea4:	f000 f86c 	bl	8016f80 <_sbrk_r>
 8016ea8:	3001      	adds	r0, #1
 8016eaa:	d0cf      	beq.n	8016e4c <_malloc_r+0x48>
 8016eac:	6025      	str	r5, [r4, #0]
 8016eae:	e7db      	b.n	8016e68 <_malloc_r+0x64>
 8016eb0:	2000886c 	.word	0x2000886c
 8016eb4:	20008870 	.word	0x20008870

08016eb8 <_puts_r>:
 8016eb8:	b570      	push	{r4, r5, r6, lr}
 8016eba:	460e      	mov	r6, r1
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	b118      	cbz	r0, 8016ec8 <_puts_r+0x10>
 8016ec0:	6983      	ldr	r3, [r0, #24]
 8016ec2:	b90b      	cbnz	r3, 8016ec8 <_puts_r+0x10>
 8016ec4:	f000 fa8a 	bl	80173dc <__sinit>
 8016ec8:	69ab      	ldr	r3, [r5, #24]
 8016eca:	68ac      	ldr	r4, [r5, #8]
 8016ecc:	b913      	cbnz	r3, 8016ed4 <_puts_r+0x1c>
 8016ece:	4628      	mov	r0, r5
 8016ed0:	f000 fa84 	bl	80173dc <__sinit>
 8016ed4:	4b23      	ldr	r3, [pc, #140]	; (8016f64 <_puts_r+0xac>)
 8016ed6:	429c      	cmp	r4, r3
 8016ed8:	d117      	bne.n	8016f0a <_puts_r+0x52>
 8016eda:	686c      	ldr	r4, [r5, #4]
 8016edc:	89a3      	ldrh	r3, [r4, #12]
 8016ede:	071b      	lsls	r3, r3, #28
 8016ee0:	d51d      	bpl.n	8016f1e <_puts_r+0x66>
 8016ee2:	6923      	ldr	r3, [r4, #16]
 8016ee4:	b1db      	cbz	r3, 8016f1e <_puts_r+0x66>
 8016ee6:	3e01      	subs	r6, #1
 8016ee8:	68a3      	ldr	r3, [r4, #8]
 8016eea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016eee:	3b01      	subs	r3, #1
 8016ef0:	60a3      	str	r3, [r4, #8]
 8016ef2:	b9e9      	cbnz	r1, 8016f30 <_puts_r+0x78>
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	da2e      	bge.n	8016f56 <_puts_r+0x9e>
 8016ef8:	4622      	mov	r2, r4
 8016efa:	210a      	movs	r1, #10
 8016efc:	4628      	mov	r0, r5
 8016efe:	f000 f8bd 	bl	801707c <__swbuf_r>
 8016f02:	3001      	adds	r0, #1
 8016f04:	d011      	beq.n	8016f2a <_puts_r+0x72>
 8016f06:	200a      	movs	r0, #10
 8016f08:	e011      	b.n	8016f2e <_puts_r+0x76>
 8016f0a:	4b17      	ldr	r3, [pc, #92]	; (8016f68 <_puts_r+0xb0>)
 8016f0c:	429c      	cmp	r4, r3
 8016f0e:	d101      	bne.n	8016f14 <_puts_r+0x5c>
 8016f10:	68ac      	ldr	r4, [r5, #8]
 8016f12:	e7e3      	b.n	8016edc <_puts_r+0x24>
 8016f14:	4b15      	ldr	r3, [pc, #84]	; (8016f6c <_puts_r+0xb4>)
 8016f16:	429c      	cmp	r4, r3
 8016f18:	bf08      	it	eq
 8016f1a:	68ec      	ldreq	r4, [r5, #12]
 8016f1c:	e7de      	b.n	8016edc <_puts_r+0x24>
 8016f1e:	4621      	mov	r1, r4
 8016f20:	4628      	mov	r0, r5
 8016f22:	f000 f8fd 	bl	8017120 <__swsetup_r>
 8016f26:	2800      	cmp	r0, #0
 8016f28:	d0dd      	beq.n	8016ee6 <_puts_r+0x2e>
 8016f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f2e:	bd70      	pop	{r4, r5, r6, pc}
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	da04      	bge.n	8016f3e <_puts_r+0x86>
 8016f34:	69a2      	ldr	r2, [r4, #24]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	dc06      	bgt.n	8016f48 <_puts_r+0x90>
 8016f3a:	290a      	cmp	r1, #10
 8016f3c:	d004      	beq.n	8016f48 <_puts_r+0x90>
 8016f3e:	6823      	ldr	r3, [r4, #0]
 8016f40:	1c5a      	adds	r2, r3, #1
 8016f42:	6022      	str	r2, [r4, #0]
 8016f44:	7019      	strb	r1, [r3, #0]
 8016f46:	e7cf      	b.n	8016ee8 <_puts_r+0x30>
 8016f48:	4622      	mov	r2, r4
 8016f4a:	4628      	mov	r0, r5
 8016f4c:	f000 f896 	bl	801707c <__swbuf_r>
 8016f50:	3001      	adds	r0, #1
 8016f52:	d1c9      	bne.n	8016ee8 <_puts_r+0x30>
 8016f54:	e7e9      	b.n	8016f2a <_puts_r+0x72>
 8016f56:	6823      	ldr	r3, [r4, #0]
 8016f58:	200a      	movs	r0, #10
 8016f5a:	1c5a      	adds	r2, r3, #1
 8016f5c:	6022      	str	r2, [r4, #0]
 8016f5e:	7018      	strb	r0, [r3, #0]
 8016f60:	e7e5      	b.n	8016f2e <_puts_r+0x76>
 8016f62:	bf00      	nop
 8016f64:	0801a150 	.word	0x0801a150
 8016f68:	0801a170 	.word	0x0801a170
 8016f6c:	0801a130 	.word	0x0801a130

08016f70 <puts>:
 8016f70:	4b02      	ldr	r3, [pc, #8]	; (8016f7c <puts+0xc>)
 8016f72:	4601      	mov	r1, r0
 8016f74:	6818      	ldr	r0, [r3, #0]
 8016f76:	f7ff bf9f 	b.w	8016eb8 <_puts_r>
 8016f7a:	bf00      	nop
 8016f7c:	20000194 	.word	0x20000194

08016f80 <_sbrk_r>:
 8016f80:	b538      	push	{r3, r4, r5, lr}
 8016f82:	4c06      	ldr	r4, [pc, #24]	; (8016f9c <_sbrk_r+0x1c>)
 8016f84:	2300      	movs	r3, #0
 8016f86:	4605      	mov	r5, r0
 8016f88:	4608      	mov	r0, r1
 8016f8a:	6023      	str	r3, [r4, #0]
 8016f8c:	f7eb ff02 	bl	8002d94 <_sbrk>
 8016f90:	1c43      	adds	r3, r0, #1
 8016f92:	d102      	bne.n	8016f9a <_sbrk_r+0x1a>
 8016f94:	6823      	ldr	r3, [r4, #0]
 8016f96:	b103      	cbz	r3, 8016f9a <_sbrk_r+0x1a>
 8016f98:	602b      	str	r3, [r5, #0]
 8016f9a:	bd38      	pop	{r3, r4, r5, pc}
 8016f9c:	200170bc 	.word	0x200170bc

08016fa0 <sniprintf>:
 8016fa0:	b40c      	push	{r2, r3}
 8016fa2:	b530      	push	{r4, r5, lr}
 8016fa4:	4b17      	ldr	r3, [pc, #92]	; (8017004 <sniprintf+0x64>)
 8016fa6:	1e0c      	subs	r4, r1, #0
 8016fa8:	b09d      	sub	sp, #116	; 0x74
 8016faa:	681d      	ldr	r5, [r3, #0]
 8016fac:	da08      	bge.n	8016fc0 <sniprintf+0x20>
 8016fae:	238b      	movs	r3, #139	; 0x8b
 8016fb0:	602b      	str	r3, [r5, #0]
 8016fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fb6:	b01d      	add	sp, #116	; 0x74
 8016fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fbc:	b002      	add	sp, #8
 8016fbe:	4770      	bx	lr
 8016fc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016fc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016fc8:	bf14      	ite	ne
 8016fca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016fce:	4623      	moveq	r3, r4
 8016fd0:	9304      	str	r3, [sp, #16]
 8016fd2:	9307      	str	r3, [sp, #28]
 8016fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016fd8:	9002      	str	r0, [sp, #8]
 8016fda:	9006      	str	r0, [sp, #24]
 8016fdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016fe0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016fe2:	ab21      	add	r3, sp, #132	; 0x84
 8016fe4:	a902      	add	r1, sp, #8
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	9301      	str	r3, [sp, #4]
 8016fea:	f000 fb41 	bl	8017670 <_svfiprintf_r>
 8016fee:	1c43      	adds	r3, r0, #1
 8016ff0:	bfbc      	itt	lt
 8016ff2:	238b      	movlt	r3, #139	; 0x8b
 8016ff4:	602b      	strlt	r3, [r5, #0]
 8016ff6:	2c00      	cmp	r4, #0
 8016ff8:	d0dd      	beq.n	8016fb6 <sniprintf+0x16>
 8016ffa:	9b02      	ldr	r3, [sp, #8]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	701a      	strb	r2, [r3, #0]
 8017000:	e7d9      	b.n	8016fb6 <sniprintf+0x16>
 8017002:	bf00      	nop
 8017004:	20000194 	.word	0x20000194

08017008 <_vsniprintf_r>:
 8017008:	b530      	push	{r4, r5, lr}
 801700a:	1e14      	subs	r4, r2, #0
 801700c:	4605      	mov	r5, r0
 801700e:	b09b      	sub	sp, #108	; 0x6c
 8017010:	4618      	mov	r0, r3
 8017012:	da05      	bge.n	8017020 <_vsniprintf_r+0x18>
 8017014:	238b      	movs	r3, #139	; 0x8b
 8017016:	602b      	str	r3, [r5, #0]
 8017018:	f04f 30ff 	mov.w	r0, #4294967295
 801701c:	b01b      	add	sp, #108	; 0x6c
 801701e:	bd30      	pop	{r4, r5, pc}
 8017020:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017024:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017028:	bf14      	ite	ne
 801702a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801702e:	4623      	moveq	r3, r4
 8017030:	9302      	str	r3, [sp, #8]
 8017032:	9305      	str	r3, [sp, #20]
 8017034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017038:	9100      	str	r1, [sp, #0]
 801703a:	9104      	str	r1, [sp, #16]
 801703c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017040:	4602      	mov	r2, r0
 8017042:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017044:	4669      	mov	r1, sp
 8017046:	4628      	mov	r0, r5
 8017048:	f000 fb12 	bl	8017670 <_svfiprintf_r>
 801704c:	1c43      	adds	r3, r0, #1
 801704e:	bfbc      	itt	lt
 8017050:	238b      	movlt	r3, #139	; 0x8b
 8017052:	602b      	strlt	r3, [r5, #0]
 8017054:	2c00      	cmp	r4, #0
 8017056:	d0e1      	beq.n	801701c <_vsniprintf_r+0x14>
 8017058:	9b00      	ldr	r3, [sp, #0]
 801705a:	2200      	movs	r2, #0
 801705c:	701a      	strb	r2, [r3, #0]
 801705e:	e7dd      	b.n	801701c <_vsniprintf_r+0x14>

08017060 <vsniprintf>:
 8017060:	b507      	push	{r0, r1, r2, lr}
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	4613      	mov	r3, r2
 8017066:	460a      	mov	r2, r1
 8017068:	4601      	mov	r1, r0
 801706a:	4803      	ldr	r0, [pc, #12]	; (8017078 <vsniprintf+0x18>)
 801706c:	6800      	ldr	r0, [r0, #0]
 801706e:	f7ff ffcb 	bl	8017008 <_vsniprintf_r>
 8017072:	b003      	add	sp, #12
 8017074:	f85d fb04 	ldr.w	pc, [sp], #4
 8017078:	20000194 	.word	0x20000194

0801707c <__swbuf_r>:
 801707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801707e:	460e      	mov	r6, r1
 8017080:	4614      	mov	r4, r2
 8017082:	4605      	mov	r5, r0
 8017084:	b118      	cbz	r0, 801708e <__swbuf_r+0x12>
 8017086:	6983      	ldr	r3, [r0, #24]
 8017088:	b90b      	cbnz	r3, 801708e <__swbuf_r+0x12>
 801708a:	f000 f9a7 	bl	80173dc <__sinit>
 801708e:	4b21      	ldr	r3, [pc, #132]	; (8017114 <__swbuf_r+0x98>)
 8017090:	429c      	cmp	r4, r3
 8017092:	d12a      	bne.n	80170ea <__swbuf_r+0x6e>
 8017094:	686c      	ldr	r4, [r5, #4]
 8017096:	69a3      	ldr	r3, [r4, #24]
 8017098:	60a3      	str	r3, [r4, #8]
 801709a:	89a3      	ldrh	r3, [r4, #12]
 801709c:	071a      	lsls	r2, r3, #28
 801709e:	d52e      	bpl.n	80170fe <__swbuf_r+0x82>
 80170a0:	6923      	ldr	r3, [r4, #16]
 80170a2:	b363      	cbz	r3, 80170fe <__swbuf_r+0x82>
 80170a4:	6923      	ldr	r3, [r4, #16]
 80170a6:	6820      	ldr	r0, [r4, #0]
 80170a8:	1ac0      	subs	r0, r0, r3
 80170aa:	6963      	ldr	r3, [r4, #20]
 80170ac:	b2f6      	uxtb	r6, r6
 80170ae:	4283      	cmp	r3, r0
 80170b0:	4637      	mov	r7, r6
 80170b2:	dc04      	bgt.n	80170be <__swbuf_r+0x42>
 80170b4:	4621      	mov	r1, r4
 80170b6:	4628      	mov	r0, r5
 80170b8:	f000 f926 	bl	8017308 <_fflush_r>
 80170bc:	bb28      	cbnz	r0, 801710a <__swbuf_r+0x8e>
 80170be:	68a3      	ldr	r3, [r4, #8]
 80170c0:	3b01      	subs	r3, #1
 80170c2:	60a3      	str	r3, [r4, #8]
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	1c5a      	adds	r2, r3, #1
 80170c8:	6022      	str	r2, [r4, #0]
 80170ca:	701e      	strb	r6, [r3, #0]
 80170cc:	6963      	ldr	r3, [r4, #20]
 80170ce:	3001      	adds	r0, #1
 80170d0:	4283      	cmp	r3, r0
 80170d2:	d004      	beq.n	80170de <__swbuf_r+0x62>
 80170d4:	89a3      	ldrh	r3, [r4, #12]
 80170d6:	07db      	lsls	r3, r3, #31
 80170d8:	d519      	bpl.n	801710e <__swbuf_r+0x92>
 80170da:	2e0a      	cmp	r6, #10
 80170dc:	d117      	bne.n	801710e <__swbuf_r+0x92>
 80170de:	4621      	mov	r1, r4
 80170e0:	4628      	mov	r0, r5
 80170e2:	f000 f911 	bl	8017308 <_fflush_r>
 80170e6:	b190      	cbz	r0, 801710e <__swbuf_r+0x92>
 80170e8:	e00f      	b.n	801710a <__swbuf_r+0x8e>
 80170ea:	4b0b      	ldr	r3, [pc, #44]	; (8017118 <__swbuf_r+0x9c>)
 80170ec:	429c      	cmp	r4, r3
 80170ee:	d101      	bne.n	80170f4 <__swbuf_r+0x78>
 80170f0:	68ac      	ldr	r4, [r5, #8]
 80170f2:	e7d0      	b.n	8017096 <__swbuf_r+0x1a>
 80170f4:	4b09      	ldr	r3, [pc, #36]	; (801711c <__swbuf_r+0xa0>)
 80170f6:	429c      	cmp	r4, r3
 80170f8:	bf08      	it	eq
 80170fa:	68ec      	ldreq	r4, [r5, #12]
 80170fc:	e7cb      	b.n	8017096 <__swbuf_r+0x1a>
 80170fe:	4621      	mov	r1, r4
 8017100:	4628      	mov	r0, r5
 8017102:	f000 f80d 	bl	8017120 <__swsetup_r>
 8017106:	2800      	cmp	r0, #0
 8017108:	d0cc      	beq.n	80170a4 <__swbuf_r+0x28>
 801710a:	f04f 37ff 	mov.w	r7, #4294967295
 801710e:	4638      	mov	r0, r7
 8017110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017112:	bf00      	nop
 8017114:	0801a150 	.word	0x0801a150
 8017118:	0801a170 	.word	0x0801a170
 801711c:	0801a130 	.word	0x0801a130

08017120 <__swsetup_r>:
 8017120:	4b32      	ldr	r3, [pc, #200]	; (80171ec <__swsetup_r+0xcc>)
 8017122:	b570      	push	{r4, r5, r6, lr}
 8017124:	681d      	ldr	r5, [r3, #0]
 8017126:	4606      	mov	r6, r0
 8017128:	460c      	mov	r4, r1
 801712a:	b125      	cbz	r5, 8017136 <__swsetup_r+0x16>
 801712c:	69ab      	ldr	r3, [r5, #24]
 801712e:	b913      	cbnz	r3, 8017136 <__swsetup_r+0x16>
 8017130:	4628      	mov	r0, r5
 8017132:	f000 f953 	bl	80173dc <__sinit>
 8017136:	4b2e      	ldr	r3, [pc, #184]	; (80171f0 <__swsetup_r+0xd0>)
 8017138:	429c      	cmp	r4, r3
 801713a:	d10f      	bne.n	801715c <__swsetup_r+0x3c>
 801713c:	686c      	ldr	r4, [r5, #4]
 801713e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017142:	b29a      	uxth	r2, r3
 8017144:	0715      	lsls	r5, r2, #28
 8017146:	d42c      	bmi.n	80171a2 <__swsetup_r+0x82>
 8017148:	06d0      	lsls	r0, r2, #27
 801714a:	d411      	bmi.n	8017170 <__swsetup_r+0x50>
 801714c:	2209      	movs	r2, #9
 801714e:	6032      	str	r2, [r6, #0]
 8017150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017154:	81a3      	strh	r3, [r4, #12]
 8017156:	f04f 30ff 	mov.w	r0, #4294967295
 801715a:	e03e      	b.n	80171da <__swsetup_r+0xba>
 801715c:	4b25      	ldr	r3, [pc, #148]	; (80171f4 <__swsetup_r+0xd4>)
 801715e:	429c      	cmp	r4, r3
 8017160:	d101      	bne.n	8017166 <__swsetup_r+0x46>
 8017162:	68ac      	ldr	r4, [r5, #8]
 8017164:	e7eb      	b.n	801713e <__swsetup_r+0x1e>
 8017166:	4b24      	ldr	r3, [pc, #144]	; (80171f8 <__swsetup_r+0xd8>)
 8017168:	429c      	cmp	r4, r3
 801716a:	bf08      	it	eq
 801716c:	68ec      	ldreq	r4, [r5, #12]
 801716e:	e7e6      	b.n	801713e <__swsetup_r+0x1e>
 8017170:	0751      	lsls	r1, r2, #29
 8017172:	d512      	bpl.n	801719a <__swsetup_r+0x7a>
 8017174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017176:	b141      	cbz	r1, 801718a <__swsetup_r+0x6a>
 8017178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801717c:	4299      	cmp	r1, r3
 801717e:	d002      	beq.n	8017186 <__swsetup_r+0x66>
 8017180:	4630      	mov	r0, r6
 8017182:	f7ff fdf1 	bl	8016d68 <_free_r>
 8017186:	2300      	movs	r3, #0
 8017188:	6363      	str	r3, [r4, #52]	; 0x34
 801718a:	89a3      	ldrh	r3, [r4, #12]
 801718c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017190:	81a3      	strh	r3, [r4, #12]
 8017192:	2300      	movs	r3, #0
 8017194:	6063      	str	r3, [r4, #4]
 8017196:	6923      	ldr	r3, [r4, #16]
 8017198:	6023      	str	r3, [r4, #0]
 801719a:	89a3      	ldrh	r3, [r4, #12]
 801719c:	f043 0308 	orr.w	r3, r3, #8
 80171a0:	81a3      	strh	r3, [r4, #12]
 80171a2:	6923      	ldr	r3, [r4, #16]
 80171a4:	b94b      	cbnz	r3, 80171ba <__swsetup_r+0x9a>
 80171a6:	89a3      	ldrh	r3, [r4, #12]
 80171a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80171ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171b0:	d003      	beq.n	80171ba <__swsetup_r+0x9a>
 80171b2:	4621      	mov	r1, r4
 80171b4:	4630      	mov	r0, r6
 80171b6:	f000 f9bf 	bl	8017538 <__smakebuf_r>
 80171ba:	89a2      	ldrh	r2, [r4, #12]
 80171bc:	f012 0301 	ands.w	r3, r2, #1
 80171c0:	d00c      	beq.n	80171dc <__swsetup_r+0xbc>
 80171c2:	2300      	movs	r3, #0
 80171c4:	60a3      	str	r3, [r4, #8]
 80171c6:	6963      	ldr	r3, [r4, #20]
 80171c8:	425b      	negs	r3, r3
 80171ca:	61a3      	str	r3, [r4, #24]
 80171cc:	6923      	ldr	r3, [r4, #16]
 80171ce:	b953      	cbnz	r3, 80171e6 <__swsetup_r+0xc6>
 80171d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80171d8:	d1ba      	bne.n	8017150 <__swsetup_r+0x30>
 80171da:	bd70      	pop	{r4, r5, r6, pc}
 80171dc:	0792      	lsls	r2, r2, #30
 80171de:	bf58      	it	pl
 80171e0:	6963      	ldrpl	r3, [r4, #20]
 80171e2:	60a3      	str	r3, [r4, #8]
 80171e4:	e7f2      	b.n	80171cc <__swsetup_r+0xac>
 80171e6:	2000      	movs	r0, #0
 80171e8:	e7f7      	b.n	80171da <__swsetup_r+0xba>
 80171ea:	bf00      	nop
 80171ec:	20000194 	.word	0x20000194
 80171f0:	0801a150 	.word	0x0801a150
 80171f4:	0801a170 	.word	0x0801a170
 80171f8:	0801a130 	.word	0x0801a130

080171fc <__sflush_r>:
 80171fc:	898a      	ldrh	r2, [r1, #12]
 80171fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017202:	4605      	mov	r5, r0
 8017204:	0710      	lsls	r0, r2, #28
 8017206:	460c      	mov	r4, r1
 8017208:	d458      	bmi.n	80172bc <__sflush_r+0xc0>
 801720a:	684b      	ldr	r3, [r1, #4]
 801720c:	2b00      	cmp	r3, #0
 801720e:	dc05      	bgt.n	801721c <__sflush_r+0x20>
 8017210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017212:	2b00      	cmp	r3, #0
 8017214:	dc02      	bgt.n	801721c <__sflush_r+0x20>
 8017216:	2000      	movs	r0, #0
 8017218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801721c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801721e:	2e00      	cmp	r6, #0
 8017220:	d0f9      	beq.n	8017216 <__sflush_r+0x1a>
 8017222:	2300      	movs	r3, #0
 8017224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017228:	682f      	ldr	r7, [r5, #0]
 801722a:	6a21      	ldr	r1, [r4, #32]
 801722c:	602b      	str	r3, [r5, #0]
 801722e:	d032      	beq.n	8017296 <__sflush_r+0x9a>
 8017230:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017232:	89a3      	ldrh	r3, [r4, #12]
 8017234:	075a      	lsls	r2, r3, #29
 8017236:	d505      	bpl.n	8017244 <__sflush_r+0x48>
 8017238:	6863      	ldr	r3, [r4, #4]
 801723a:	1ac0      	subs	r0, r0, r3
 801723c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801723e:	b10b      	cbz	r3, 8017244 <__sflush_r+0x48>
 8017240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017242:	1ac0      	subs	r0, r0, r3
 8017244:	2300      	movs	r3, #0
 8017246:	4602      	mov	r2, r0
 8017248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801724a:	6a21      	ldr	r1, [r4, #32]
 801724c:	4628      	mov	r0, r5
 801724e:	47b0      	blx	r6
 8017250:	1c43      	adds	r3, r0, #1
 8017252:	89a3      	ldrh	r3, [r4, #12]
 8017254:	d106      	bne.n	8017264 <__sflush_r+0x68>
 8017256:	6829      	ldr	r1, [r5, #0]
 8017258:	291d      	cmp	r1, #29
 801725a:	d848      	bhi.n	80172ee <__sflush_r+0xf2>
 801725c:	4a29      	ldr	r2, [pc, #164]	; (8017304 <__sflush_r+0x108>)
 801725e:	40ca      	lsrs	r2, r1
 8017260:	07d6      	lsls	r6, r2, #31
 8017262:	d544      	bpl.n	80172ee <__sflush_r+0xf2>
 8017264:	2200      	movs	r2, #0
 8017266:	6062      	str	r2, [r4, #4]
 8017268:	04d9      	lsls	r1, r3, #19
 801726a:	6922      	ldr	r2, [r4, #16]
 801726c:	6022      	str	r2, [r4, #0]
 801726e:	d504      	bpl.n	801727a <__sflush_r+0x7e>
 8017270:	1c42      	adds	r2, r0, #1
 8017272:	d101      	bne.n	8017278 <__sflush_r+0x7c>
 8017274:	682b      	ldr	r3, [r5, #0]
 8017276:	b903      	cbnz	r3, 801727a <__sflush_r+0x7e>
 8017278:	6560      	str	r0, [r4, #84]	; 0x54
 801727a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801727c:	602f      	str	r7, [r5, #0]
 801727e:	2900      	cmp	r1, #0
 8017280:	d0c9      	beq.n	8017216 <__sflush_r+0x1a>
 8017282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017286:	4299      	cmp	r1, r3
 8017288:	d002      	beq.n	8017290 <__sflush_r+0x94>
 801728a:	4628      	mov	r0, r5
 801728c:	f7ff fd6c 	bl	8016d68 <_free_r>
 8017290:	2000      	movs	r0, #0
 8017292:	6360      	str	r0, [r4, #52]	; 0x34
 8017294:	e7c0      	b.n	8017218 <__sflush_r+0x1c>
 8017296:	2301      	movs	r3, #1
 8017298:	4628      	mov	r0, r5
 801729a:	47b0      	blx	r6
 801729c:	1c41      	adds	r1, r0, #1
 801729e:	d1c8      	bne.n	8017232 <__sflush_r+0x36>
 80172a0:	682b      	ldr	r3, [r5, #0]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d0c5      	beq.n	8017232 <__sflush_r+0x36>
 80172a6:	2b1d      	cmp	r3, #29
 80172a8:	d001      	beq.n	80172ae <__sflush_r+0xb2>
 80172aa:	2b16      	cmp	r3, #22
 80172ac:	d101      	bne.n	80172b2 <__sflush_r+0xb6>
 80172ae:	602f      	str	r7, [r5, #0]
 80172b0:	e7b1      	b.n	8017216 <__sflush_r+0x1a>
 80172b2:	89a3      	ldrh	r3, [r4, #12]
 80172b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172b8:	81a3      	strh	r3, [r4, #12]
 80172ba:	e7ad      	b.n	8017218 <__sflush_r+0x1c>
 80172bc:	690f      	ldr	r7, [r1, #16]
 80172be:	2f00      	cmp	r7, #0
 80172c0:	d0a9      	beq.n	8017216 <__sflush_r+0x1a>
 80172c2:	0793      	lsls	r3, r2, #30
 80172c4:	680e      	ldr	r6, [r1, #0]
 80172c6:	bf08      	it	eq
 80172c8:	694b      	ldreq	r3, [r1, #20]
 80172ca:	600f      	str	r7, [r1, #0]
 80172cc:	bf18      	it	ne
 80172ce:	2300      	movne	r3, #0
 80172d0:	eba6 0807 	sub.w	r8, r6, r7
 80172d4:	608b      	str	r3, [r1, #8]
 80172d6:	f1b8 0f00 	cmp.w	r8, #0
 80172da:	dd9c      	ble.n	8017216 <__sflush_r+0x1a>
 80172dc:	4643      	mov	r3, r8
 80172de:	463a      	mov	r2, r7
 80172e0:	6a21      	ldr	r1, [r4, #32]
 80172e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172e4:	4628      	mov	r0, r5
 80172e6:	47b0      	blx	r6
 80172e8:	2800      	cmp	r0, #0
 80172ea:	dc06      	bgt.n	80172fa <__sflush_r+0xfe>
 80172ec:	89a3      	ldrh	r3, [r4, #12]
 80172ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172f2:	81a3      	strh	r3, [r4, #12]
 80172f4:	f04f 30ff 	mov.w	r0, #4294967295
 80172f8:	e78e      	b.n	8017218 <__sflush_r+0x1c>
 80172fa:	4407      	add	r7, r0
 80172fc:	eba8 0800 	sub.w	r8, r8, r0
 8017300:	e7e9      	b.n	80172d6 <__sflush_r+0xda>
 8017302:	bf00      	nop
 8017304:	20400001 	.word	0x20400001

08017308 <_fflush_r>:
 8017308:	b538      	push	{r3, r4, r5, lr}
 801730a:	690b      	ldr	r3, [r1, #16]
 801730c:	4605      	mov	r5, r0
 801730e:	460c      	mov	r4, r1
 8017310:	b1db      	cbz	r3, 801734a <_fflush_r+0x42>
 8017312:	b118      	cbz	r0, 801731c <_fflush_r+0x14>
 8017314:	6983      	ldr	r3, [r0, #24]
 8017316:	b90b      	cbnz	r3, 801731c <_fflush_r+0x14>
 8017318:	f000 f860 	bl	80173dc <__sinit>
 801731c:	4b0c      	ldr	r3, [pc, #48]	; (8017350 <_fflush_r+0x48>)
 801731e:	429c      	cmp	r4, r3
 8017320:	d109      	bne.n	8017336 <_fflush_r+0x2e>
 8017322:	686c      	ldr	r4, [r5, #4]
 8017324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017328:	b17b      	cbz	r3, 801734a <_fflush_r+0x42>
 801732a:	4621      	mov	r1, r4
 801732c:	4628      	mov	r0, r5
 801732e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017332:	f7ff bf63 	b.w	80171fc <__sflush_r>
 8017336:	4b07      	ldr	r3, [pc, #28]	; (8017354 <_fflush_r+0x4c>)
 8017338:	429c      	cmp	r4, r3
 801733a:	d101      	bne.n	8017340 <_fflush_r+0x38>
 801733c:	68ac      	ldr	r4, [r5, #8]
 801733e:	e7f1      	b.n	8017324 <_fflush_r+0x1c>
 8017340:	4b05      	ldr	r3, [pc, #20]	; (8017358 <_fflush_r+0x50>)
 8017342:	429c      	cmp	r4, r3
 8017344:	bf08      	it	eq
 8017346:	68ec      	ldreq	r4, [r5, #12]
 8017348:	e7ec      	b.n	8017324 <_fflush_r+0x1c>
 801734a:	2000      	movs	r0, #0
 801734c:	bd38      	pop	{r3, r4, r5, pc}
 801734e:	bf00      	nop
 8017350:	0801a150 	.word	0x0801a150
 8017354:	0801a170 	.word	0x0801a170
 8017358:	0801a130 	.word	0x0801a130

0801735c <std>:
 801735c:	2300      	movs	r3, #0
 801735e:	b510      	push	{r4, lr}
 8017360:	4604      	mov	r4, r0
 8017362:	e9c0 3300 	strd	r3, r3, [r0]
 8017366:	6083      	str	r3, [r0, #8]
 8017368:	8181      	strh	r1, [r0, #12]
 801736a:	6643      	str	r3, [r0, #100]	; 0x64
 801736c:	81c2      	strh	r2, [r0, #14]
 801736e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017372:	6183      	str	r3, [r0, #24]
 8017374:	4619      	mov	r1, r3
 8017376:	2208      	movs	r2, #8
 8017378:	305c      	adds	r0, #92	; 0x5c
 801737a:	f7ff fcec 	bl	8016d56 <memset>
 801737e:	4b05      	ldr	r3, [pc, #20]	; (8017394 <std+0x38>)
 8017380:	6263      	str	r3, [r4, #36]	; 0x24
 8017382:	4b05      	ldr	r3, [pc, #20]	; (8017398 <std+0x3c>)
 8017384:	62a3      	str	r3, [r4, #40]	; 0x28
 8017386:	4b05      	ldr	r3, [pc, #20]	; (801739c <std+0x40>)
 8017388:	62e3      	str	r3, [r4, #44]	; 0x2c
 801738a:	4b05      	ldr	r3, [pc, #20]	; (80173a0 <std+0x44>)
 801738c:	6224      	str	r4, [r4, #32]
 801738e:	6323      	str	r3, [r4, #48]	; 0x30
 8017390:	bd10      	pop	{r4, pc}
 8017392:	bf00      	nop
 8017394:	08017b71 	.word	0x08017b71
 8017398:	08017b93 	.word	0x08017b93
 801739c:	08017bcb 	.word	0x08017bcb
 80173a0:	08017bef 	.word	0x08017bef

080173a4 <_cleanup_r>:
 80173a4:	4901      	ldr	r1, [pc, #4]	; (80173ac <_cleanup_r+0x8>)
 80173a6:	f000 b885 	b.w	80174b4 <_fwalk_reent>
 80173aa:	bf00      	nop
 80173ac:	08017309 	.word	0x08017309

080173b0 <__sfmoreglue>:
 80173b0:	b570      	push	{r4, r5, r6, lr}
 80173b2:	1e4a      	subs	r2, r1, #1
 80173b4:	2568      	movs	r5, #104	; 0x68
 80173b6:	4355      	muls	r5, r2
 80173b8:	460e      	mov	r6, r1
 80173ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80173be:	f7ff fd21 	bl	8016e04 <_malloc_r>
 80173c2:	4604      	mov	r4, r0
 80173c4:	b140      	cbz	r0, 80173d8 <__sfmoreglue+0x28>
 80173c6:	2100      	movs	r1, #0
 80173c8:	e9c0 1600 	strd	r1, r6, [r0]
 80173cc:	300c      	adds	r0, #12
 80173ce:	60a0      	str	r0, [r4, #8]
 80173d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80173d4:	f7ff fcbf 	bl	8016d56 <memset>
 80173d8:	4620      	mov	r0, r4
 80173da:	bd70      	pop	{r4, r5, r6, pc}

080173dc <__sinit>:
 80173dc:	6983      	ldr	r3, [r0, #24]
 80173de:	b510      	push	{r4, lr}
 80173e0:	4604      	mov	r4, r0
 80173e2:	bb33      	cbnz	r3, 8017432 <__sinit+0x56>
 80173e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80173e8:	6503      	str	r3, [r0, #80]	; 0x50
 80173ea:	4b12      	ldr	r3, [pc, #72]	; (8017434 <__sinit+0x58>)
 80173ec:	4a12      	ldr	r2, [pc, #72]	; (8017438 <__sinit+0x5c>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	6282      	str	r2, [r0, #40]	; 0x28
 80173f2:	4298      	cmp	r0, r3
 80173f4:	bf04      	itt	eq
 80173f6:	2301      	moveq	r3, #1
 80173f8:	6183      	streq	r3, [r0, #24]
 80173fa:	f000 f81f 	bl	801743c <__sfp>
 80173fe:	6060      	str	r0, [r4, #4]
 8017400:	4620      	mov	r0, r4
 8017402:	f000 f81b 	bl	801743c <__sfp>
 8017406:	60a0      	str	r0, [r4, #8]
 8017408:	4620      	mov	r0, r4
 801740a:	f000 f817 	bl	801743c <__sfp>
 801740e:	2200      	movs	r2, #0
 8017410:	60e0      	str	r0, [r4, #12]
 8017412:	2104      	movs	r1, #4
 8017414:	6860      	ldr	r0, [r4, #4]
 8017416:	f7ff ffa1 	bl	801735c <std>
 801741a:	2201      	movs	r2, #1
 801741c:	2109      	movs	r1, #9
 801741e:	68a0      	ldr	r0, [r4, #8]
 8017420:	f7ff ff9c 	bl	801735c <std>
 8017424:	2202      	movs	r2, #2
 8017426:	2112      	movs	r1, #18
 8017428:	68e0      	ldr	r0, [r4, #12]
 801742a:	f7ff ff97 	bl	801735c <std>
 801742e:	2301      	movs	r3, #1
 8017430:	61a3      	str	r3, [r4, #24]
 8017432:	bd10      	pop	{r4, pc}
 8017434:	0801a12c 	.word	0x0801a12c
 8017438:	080173a5 	.word	0x080173a5

0801743c <__sfp>:
 801743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743e:	4b1b      	ldr	r3, [pc, #108]	; (80174ac <__sfp+0x70>)
 8017440:	681e      	ldr	r6, [r3, #0]
 8017442:	69b3      	ldr	r3, [r6, #24]
 8017444:	4607      	mov	r7, r0
 8017446:	b913      	cbnz	r3, 801744e <__sfp+0x12>
 8017448:	4630      	mov	r0, r6
 801744a:	f7ff ffc7 	bl	80173dc <__sinit>
 801744e:	3648      	adds	r6, #72	; 0x48
 8017450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017454:	3b01      	subs	r3, #1
 8017456:	d503      	bpl.n	8017460 <__sfp+0x24>
 8017458:	6833      	ldr	r3, [r6, #0]
 801745a:	b133      	cbz	r3, 801746a <__sfp+0x2e>
 801745c:	6836      	ldr	r6, [r6, #0]
 801745e:	e7f7      	b.n	8017450 <__sfp+0x14>
 8017460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017464:	b16d      	cbz	r5, 8017482 <__sfp+0x46>
 8017466:	3468      	adds	r4, #104	; 0x68
 8017468:	e7f4      	b.n	8017454 <__sfp+0x18>
 801746a:	2104      	movs	r1, #4
 801746c:	4638      	mov	r0, r7
 801746e:	f7ff ff9f 	bl	80173b0 <__sfmoreglue>
 8017472:	6030      	str	r0, [r6, #0]
 8017474:	2800      	cmp	r0, #0
 8017476:	d1f1      	bne.n	801745c <__sfp+0x20>
 8017478:	230c      	movs	r3, #12
 801747a:	603b      	str	r3, [r7, #0]
 801747c:	4604      	mov	r4, r0
 801747e:	4620      	mov	r0, r4
 8017480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017482:	4b0b      	ldr	r3, [pc, #44]	; (80174b0 <__sfp+0x74>)
 8017484:	6665      	str	r5, [r4, #100]	; 0x64
 8017486:	e9c4 5500 	strd	r5, r5, [r4]
 801748a:	60a5      	str	r5, [r4, #8]
 801748c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017490:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017494:	2208      	movs	r2, #8
 8017496:	4629      	mov	r1, r5
 8017498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801749c:	f7ff fc5b 	bl	8016d56 <memset>
 80174a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80174a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80174a8:	e7e9      	b.n	801747e <__sfp+0x42>
 80174aa:	bf00      	nop
 80174ac:	0801a12c 	.word	0x0801a12c
 80174b0:	ffff0001 	.word	0xffff0001

080174b4 <_fwalk_reent>:
 80174b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174b8:	4680      	mov	r8, r0
 80174ba:	4689      	mov	r9, r1
 80174bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80174c0:	2600      	movs	r6, #0
 80174c2:	b914      	cbnz	r4, 80174ca <_fwalk_reent+0x16>
 80174c4:	4630      	mov	r0, r6
 80174c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80174ce:	3f01      	subs	r7, #1
 80174d0:	d501      	bpl.n	80174d6 <_fwalk_reent+0x22>
 80174d2:	6824      	ldr	r4, [r4, #0]
 80174d4:	e7f5      	b.n	80174c2 <_fwalk_reent+0xe>
 80174d6:	89ab      	ldrh	r3, [r5, #12]
 80174d8:	2b01      	cmp	r3, #1
 80174da:	d907      	bls.n	80174ec <_fwalk_reent+0x38>
 80174dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174e0:	3301      	adds	r3, #1
 80174e2:	d003      	beq.n	80174ec <_fwalk_reent+0x38>
 80174e4:	4629      	mov	r1, r5
 80174e6:	4640      	mov	r0, r8
 80174e8:	47c8      	blx	r9
 80174ea:	4306      	orrs	r6, r0
 80174ec:	3568      	adds	r5, #104	; 0x68
 80174ee:	e7ee      	b.n	80174ce <_fwalk_reent+0x1a>

080174f0 <__swhatbuf_r>:
 80174f0:	b570      	push	{r4, r5, r6, lr}
 80174f2:	460e      	mov	r6, r1
 80174f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174f8:	2900      	cmp	r1, #0
 80174fa:	b096      	sub	sp, #88	; 0x58
 80174fc:	4614      	mov	r4, r2
 80174fe:	461d      	mov	r5, r3
 8017500:	da07      	bge.n	8017512 <__swhatbuf_r+0x22>
 8017502:	2300      	movs	r3, #0
 8017504:	602b      	str	r3, [r5, #0]
 8017506:	89b3      	ldrh	r3, [r6, #12]
 8017508:	061a      	lsls	r2, r3, #24
 801750a:	d410      	bmi.n	801752e <__swhatbuf_r+0x3e>
 801750c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017510:	e00e      	b.n	8017530 <__swhatbuf_r+0x40>
 8017512:	466a      	mov	r2, sp
 8017514:	f000 fb92 	bl	8017c3c <_fstat_r>
 8017518:	2800      	cmp	r0, #0
 801751a:	dbf2      	blt.n	8017502 <__swhatbuf_r+0x12>
 801751c:	9a01      	ldr	r2, [sp, #4]
 801751e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017522:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017526:	425a      	negs	r2, r3
 8017528:	415a      	adcs	r2, r3
 801752a:	602a      	str	r2, [r5, #0]
 801752c:	e7ee      	b.n	801750c <__swhatbuf_r+0x1c>
 801752e:	2340      	movs	r3, #64	; 0x40
 8017530:	2000      	movs	r0, #0
 8017532:	6023      	str	r3, [r4, #0]
 8017534:	b016      	add	sp, #88	; 0x58
 8017536:	bd70      	pop	{r4, r5, r6, pc}

08017538 <__smakebuf_r>:
 8017538:	898b      	ldrh	r3, [r1, #12]
 801753a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801753c:	079d      	lsls	r5, r3, #30
 801753e:	4606      	mov	r6, r0
 8017540:	460c      	mov	r4, r1
 8017542:	d507      	bpl.n	8017554 <__smakebuf_r+0x1c>
 8017544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017548:	6023      	str	r3, [r4, #0]
 801754a:	6123      	str	r3, [r4, #16]
 801754c:	2301      	movs	r3, #1
 801754e:	6163      	str	r3, [r4, #20]
 8017550:	b002      	add	sp, #8
 8017552:	bd70      	pop	{r4, r5, r6, pc}
 8017554:	ab01      	add	r3, sp, #4
 8017556:	466a      	mov	r2, sp
 8017558:	f7ff ffca 	bl	80174f0 <__swhatbuf_r>
 801755c:	9900      	ldr	r1, [sp, #0]
 801755e:	4605      	mov	r5, r0
 8017560:	4630      	mov	r0, r6
 8017562:	f7ff fc4f 	bl	8016e04 <_malloc_r>
 8017566:	b948      	cbnz	r0, 801757c <__smakebuf_r+0x44>
 8017568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801756c:	059a      	lsls	r2, r3, #22
 801756e:	d4ef      	bmi.n	8017550 <__smakebuf_r+0x18>
 8017570:	f023 0303 	bic.w	r3, r3, #3
 8017574:	f043 0302 	orr.w	r3, r3, #2
 8017578:	81a3      	strh	r3, [r4, #12]
 801757a:	e7e3      	b.n	8017544 <__smakebuf_r+0xc>
 801757c:	4b0d      	ldr	r3, [pc, #52]	; (80175b4 <__smakebuf_r+0x7c>)
 801757e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017580:	89a3      	ldrh	r3, [r4, #12]
 8017582:	6020      	str	r0, [r4, #0]
 8017584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017588:	81a3      	strh	r3, [r4, #12]
 801758a:	9b00      	ldr	r3, [sp, #0]
 801758c:	6163      	str	r3, [r4, #20]
 801758e:	9b01      	ldr	r3, [sp, #4]
 8017590:	6120      	str	r0, [r4, #16]
 8017592:	b15b      	cbz	r3, 80175ac <__smakebuf_r+0x74>
 8017594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017598:	4630      	mov	r0, r6
 801759a:	f000 fb61 	bl	8017c60 <_isatty_r>
 801759e:	b128      	cbz	r0, 80175ac <__smakebuf_r+0x74>
 80175a0:	89a3      	ldrh	r3, [r4, #12]
 80175a2:	f023 0303 	bic.w	r3, r3, #3
 80175a6:	f043 0301 	orr.w	r3, r3, #1
 80175aa:	81a3      	strh	r3, [r4, #12]
 80175ac:	89a3      	ldrh	r3, [r4, #12]
 80175ae:	431d      	orrs	r5, r3
 80175b0:	81a5      	strh	r5, [r4, #12]
 80175b2:	e7cd      	b.n	8017550 <__smakebuf_r+0x18>
 80175b4:	080173a5 	.word	0x080173a5

080175b8 <__malloc_lock>:
 80175b8:	4770      	bx	lr

080175ba <__malloc_unlock>:
 80175ba:	4770      	bx	lr

080175bc <__ssputs_r>:
 80175bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175c0:	688e      	ldr	r6, [r1, #8]
 80175c2:	429e      	cmp	r6, r3
 80175c4:	4682      	mov	sl, r0
 80175c6:	460c      	mov	r4, r1
 80175c8:	4690      	mov	r8, r2
 80175ca:	4699      	mov	r9, r3
 80175cc:	d837      	bhi.n	801763e <__ssputs_r+0x82>
 80175ce:	898a      	ldrh	r2, [r1, #12]
 80175d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80175d4:	d031      	beq.n	801763a <__ssputs_r+0x7e>
 80175d6:	6825      	ldr	r5, [r4, #0]
 80175d8:	6909      	ldr	r1, [r1, #16]
 80175da:	1a6f      	subs	r7, r5, r1
 80175dc:	6965      	ldr	r5, [r4, #20]
 80175de:	2302      	movs	r3, #2
 80175e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80175e8:	f109 0301 	add.w	r3, r9, #1
 80175ec:	443b      	add	r3, r7
 80175ee:	429d      	cmp	r5, r3
 80175f0:	bf38      	it	cc
 80175f2:	461d      	movcc	r5, r3
 80175f4:	0553      	lsls	r3, r2, #21
 80175f6:	d530      	bpl.n	801765a <__ssputs_r+0x9e>
 80175f8:	4629      	mov	r1, r5
 80175fa:	f7ff fc03 	bl	8016e04 <_malloc_r>
 80175fe:	4606      	mov	r6, r0
 8017600:	b950      	cbnz	r0, 8017618 <__ssputs_r+0x5c>
 8017602:	230c      	movs	r3, #12
 8017604:	f8ca 3000 	str.w	r3, [sl]
 8017608:	89a3      	ldrh	r3, [r4, #12]
 801760a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801760e:	81a3      	strh	r3, [r4, #12]
 8017610:	f04f 30ff 	mov.w	r0, #4294967295
 8017614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017618:	463a      	mov	r2, r7
 801761a:	6921      	ldr	r1, [r4, #16]
 801761c:	f7ff fb90 	bl	8016d40 <memcpy>
 8017620:	89a3      	ldrh	r3, [r4, #12]
 8017622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801762a:	81a3      	strh	r3, [r4, #12]
 801762c:	6126      	str	r6, [r4, #16]
 801762e:	6165      	str	r5, [r4, #20]
 8017630:	443e      	add	r6, r7
 8017632:	1bed      	subs	r5, r5, r7
 8017634:	6026      	str	r6, [r4, #0]
 8017636:	60a5      	str	r5, [r4, #8]
 8017638:	464e      	mov	r6, r9
 801763a:	454e      	cmp	r6, r9
 801763c:	d900      	bls.n	8017640 <__ssputs_r+0x84>
 801763e:	464e      	mov	r6, r9
 8017640:	4632      	mov	r2, r6
 8017642:	4641      	mov	r1, r8
 8017644:	6820      	ldr	r0, [r4, #0]
 8017646:	f000 fb2d 	bl	8017ca4 <memmove>
 801764a:	68a3      	ldr	r3, [r4, #8]
 801764c:	1b9b      	subs	r3, r3, r6
 801764e:	60a3      	str	r3, [r4, #8]
 8017650:	6823      	ldr	r3, [r4, #0]
 8017652:	441e      	add	r6, r3
 8017654:	6026      	str	r6, [r4, #0]
 8017656:	2000      	movs	r0, #0
 8017658:	e7dc      	b.n	8017614 <__ssputs_r+0x58>
 801765a:	462a      	mov	r2, r5
 801765c:	f000 fb3b 	bl	8017cd6 <_realloc_r>
 8017660:	4606      	mov	r6, r0
 8017662:	2800      	cmp	r0, #0
 8017664:	d1e2      	bne.n	801762c <__ssputs_r+0x70>
 8017666:	6921      	ldr	r1, [r4, #16]
 8017668:	4650      	mov	r0, sl
 801766a:	f7ff fb7d 	bl	8016d68 <_free_r>
 801766e:	e7c8      	b.n	8017602 <__ssputs_r+0x46>

08017670 <_svfiprintf_r>:
 8017670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017674:	461d      	mov	r5, r3
 8017676:	898b      	ldrh	r3, [r1, #12]
 8017678:	061f      	lsls	r7, r3, #24
 801767a:	b09d      	sub	sp, #116	; 0x74
 801767c:	4680      	mov	r8, r0
 801767e:	460c      	mov	r4, r1
 8017680:	4616      	mov	r6, r2
 8017682:	d50f      	bpl.n	80176a4 <_svfiprintf_r+0x34>
 8017684:	690b      	ldr	r3, [r1, #16]
 8017686:	b96b      	cbnz	r3, 80176a4 <_svfiprintf_r+0x34>
 8017688:	2140      	movs	r1, #64	; 0x40
 801768a:	f7ff fbbb 	bl	8016e04 <_malloc_r>
 801768e:	6020      	str	r0, [r4, #0]
 8017690:	6120      	str	r0, [r4, #16]
 8017692:	b928      	cbnz	r0, 80176a0 <_svfiprintf_r+0x30>
 8017694:	230c      	movs	r3, #12
 8017696:	f8c8 3000 	str.w	r3, [r8]
 801769a:	f04f 30ff 	mov.w	r0, #4294967295
 801769e:	e0c8      	b.n	8017832 <_svfiprintf_r+0x1c2>
 80176a0:	2340      	movs	r3, #64	; 0x40
 80176a2:	6163      	str	r3, [r4, #20]
 80176a4:	2300      	movs	r3, #0
 80176a6:	9309      	str	r3, [sp, #36]	; 0x24
 80176a8:	2320      	movs	r3, #32
 80176aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176ae:	2330      	movs	r3, #48	; 0x30
 80176b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176b4:	9503      	str	r5, [sp, #12]
 80176b6:	f04f 0b01 	mov.w	fp, #1
 80176ba:	4637      	mov	r7, r6
 80176bc:	463d      	mov	r5, r7
 80176be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80176c2:	b10b      	cbz	r3, 80176c8 <_svfiprintf_r+0x58>
 80176c4:	2b25      	cmp	r3, #37	; 0x25
 80176c6:	d13e      	bne.n	8017746 <_svfiprintf_r+0xd6>
 80176c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80176cc:	d00b      	beq.n	80176e6 <_svfiprintf_r+0x76>
 80176ce:	4653      	mov	r3, sl
 80176d0:	4632      	mov	r2, r6
 80176d2:	4621      	mov	r1, r4
 80176d4:	4640      	mov	r0, r8
 80176d6:	f7ff ff71 	bl	80175bc <__ssputs_r>
 80176da:	3001      	adds	r0, #1
 80176dc:	f000 80a4 	beq.w	8017828 <_svfiprintf_r+0x1b8>
 80176e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176e2:	4453      	add	r3, sl
 80176e4:	9309      	str	r3, [sp, #36]	; 0x24
 80176e6:	783b      	ldrb	r3, [r7, #0]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	f000 809d 	beq.w	8017828 <_svfiprintf_r+0x1b8>
 80176ee:	2300      	movs	r3, #0
 80176f0:	f04f 32ff 	mov.w	r2, #4294967295
 80176f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176f8:	9304      	str	r3, [sp, #16]
 80176fa:	9307      	str	r3, [sp, #28]
 80176fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017700:	931a      	str	r3, [sp, #104]	; 0x68
 8017702:	462f      	mov	r7, r5
 8017704:	2205      	movs	r2, #5
 8017706:	f817 1b01 	ldrb.w	r1, [r7], #1
 801770a:	4850      	ldr	r0, [pc, #320]	; (801784c <_svfiprintf_r+0x1dc>)
 801770c:	f7e8 fd88 	bl	8000220 <memchr>
 8017710:	9b04      	ldr	r3, [sp, #16]
 8017712:	b9d0      	cbnz	r0, 801774a <_svfiprintf_r+0xda>
 8017714:	06d9      	lsls	r1, r3, #27
 8017716:	bf44      	itt	mi
 8017718:	2220      	movmi	r2, #32
 801771a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801771e:	071a      	lsls	r2, r3, #28
 8017720:	bf44      	itt	mi
 8017722:	222b      	movmi	r2, #43	; 0x2b
 8017724:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017728:	782a      	ldrb	r2, [r5, #0]
 801772a:	2a2a      	cmp	r2, #42	; 0x2a
 801772c:	d015      	beq.n	801775a <_svfiprintf_r+0xea>
 801772e:	9a07      	ldr	r2, [sp, #28]
 8017730:	462f      	mov	r7, r5
 8017732:	2000      	movs	r0, #0
 8017734:	250a      	movs	r5, #10
 8017736:	4639      	mov	r1, r7
 8017738:	f811 3b01 	ldrb.w	r3, [r1], #1
 801773c:	3b30      	subs	r3, #48	; 0x30
 801773e:	2b09      	cmp	r3, #9
 8017740:	d94d      	bls.n	80177de <_svfiprintf_r+0x16e>
 8017742:	b1b8      	cbz	r0, 8017774 <_svfiprintf_r+0x104>
 8017744:	e00f      	b.n	8017766 <_svfiprintf_r+0xf6>
 8017746:	462f      	mov	r7, r5
 8017748:	e7b8      	b.n	80176bc <_svfiprintf_r+0x4c>
 801774a:	4a40      	ldr	r2, [pc, #256]	; (801784c <_svfiprintf_r+0x1dc>)
 801774c:	1a80      	subs	r0, r0, r2
 801774e:	fa0b f000 	lsl.w	r0, fp, r0
 8017752:	4318      	orrs	r0, r3
 8017754:	9004      	str	r0, [sp, #16]
 8017756:	463d      	mov	r5, r7
 8017758:	e7d3      	b.n	8017702 <_svfiprintf_r+0x92>
 801775a:	9a03      	ldr	r2, [sp, #12]
 801775c:	1d11      	adds	r1, r2, #4
 801775e:	6812      	ldr	r2, [r2, #0]
 8017760:	9103      	str	r1, [sp, #12]
 8017762:	2a00      	cmp	r2, #0
 8017764:	db01      	blt.n	801776a <_svfiprintf_r+0xfa>
 8017766:	9207      	str	r2, [sp, #28]
 8017768:	e004      	b.n	8017774 <_svfiprintf_r+0x104>
 801776a:	4252      	negs	r2, r2
 801776c:	f043 0302 	orr.w	r3, r3, #2
 8017770:	9207      	str	r2, [sp, #28]
 8017772:	9304      	str	r3, [sp, #16]
 8017774:	783b      	ldrb	r3, [r7, #0]
 8017776:	2b2e      	cmp	r3, #46	; 0x2e
 8017778:	d10c      	bne.n	8017794 <_svfiprintf_r+0x124>
 801777a:	787b      	ldrb	r3, [r7, #1]
 801777c:	2b2a      	cmp	r3, #42	; 0x2a
 801777e:	d133      	bne.n	80177e8 <_svfiprintf_r+0x178>
 8017780:	9b03      	ldr	r3, [sp, #12]
 8017782:	1d1a      	adds	r2, r3, #4
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	9203      	str	r2, [sp, #12]
 8017788:	2b00      	cmp	r3, #0
 801778a:	bfb8      	it	lt
 801778c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017790:	3702      	adds	r7, #2
 8017792:	9305      	str	r3, [sp, #20]
 8017794:	4d2e      	ldr	r5, [pc, #184]	; (8017850 <_svfiprintf_r+0x1e0>)
 8017796:	7839      	ldrb	r1, [r7, #0]
 8017798:	2203      	movs	r2, #3
 801779a:	4628      	mov	r0, r5
 801779c:	f7e8 fd40 	bl	8000220 <memchr>
 80177a0:	b138      	cbz	r0, 80177b2 <_svfiprintf_r+0x142>
 80177a2:	2340      	movs	r3, #64	; 0x40
 80177a4:	1b40      	subs	r0, r0, r5
 80177a6:	fa03 f000 	lsl.w	r0, r3, r0
 80177aa:	9b04      	ldr	r3, [sp, #16]
 80177ac:	4303      	orrs	r3, r0
 80177ae:	3701      	adds	r7, #1
 80177b0:	9304      	str	r3, [sp, #16]
 80177b2:	7839      	ldrb	r1, [r7, #0]
 80177b4:	4827      	ldr	r0, [pc, #156]	; (8017854 <_svfiprintf_r+0x1e4>)
 80177b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177ba:	2206      	movs	r2, #6
 80177bc:	1c7e      	adds	r6, r7, #1
 80177be:	f7e8 fd2f 	bl	8000220 <memchr>
 80177c2:	2800      	cmp	r0, #0
 80177c4:	d038      	beq.n	8017838 <_svfiprintf_r+0x1c8>
 80177c6:	4b24      	ldr	r3, [pc, #144]	; (8017858 <_svfiprintf_r+0x1e8>)
 80177c8:	bb13      	cbnz	r3, 8017810 <_svfiprintf_r+0x1a0>
 80177ca:	9b03      	ldr	r3, [sp, #12]
 80177cc:	3307      	adds	r3, #7
 80177ce:	f023 0307 	bic.w	r3, r3, #7
 80177d2:	3308      	adds	r3, #8
 80177d4:	9303      	str	r3, [sp, #12]
 80177d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177d8:	444b      	add	r3, r9
 80177da:	9309      	str	r3, [sp, #36]	; 0x24
 80177dc:	e76d      	b.n	80176ba <_svfiprintf_r+0x4a>
 80177de:	fb05 3202 	mla	r2, r5, r2, r3
 80177e2:	2001      	movs	r0, #1
 80177e4:	460f      	mov	r7, r1
 80177e6:	e7a6      	b.n	8017736 <_svfiprintf_r+0xc6>
 80177e8:	2300      	movs	r3, #0
 80177ea:	3701      	adds	r7, #1
 80177ec:	9305      	str	r3, [sp, #20]
 80177ee:	4619      	mov	r1, r3
 80177f0:	250a      	movs	r5, #10
 80177f2:	4638      	mov	r0, r7
 80177f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177f8:	3a30      	subs	r2, #48	; 0x30
 80177fa:	2a09      	cmp	r2, #9
 80177fc:	d903      	bls.n	8017806 <_svfiprintf_r+0x196>
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d0c8      	beq.n	8017794 <_svfiprintf_r+0x124>
 8017802:	9105      	str	r1, [sp, #20]
 8017804:	e7c6      	b.n	8017794 <_svfiprintf_r+0x124>
 8017806:	fb05 2101 	mla	r1, r5, r1, r2
 801780a:	2301      	movs	r3, #1
 801780c:	4607      	mov	r7, r0
 801780e:	e7f0      	b.n	80177f2 <_svfiprintf_r+0x182>
 8017810:	ab03      	add	r3, sp, #12
 8017812:	9300      	str	r3, [sp, #0]
 8017814:	4622      	mov	r2, r4
 8017816:	4b11      	ldr	r3, [pc, #68]	; (801785c <_svfiprintf_r+0x1ec>)
 8017818:	a904      	add	r1, sp, #16
 801781a:	4640      	mov	r0, r8
 801781c:	f3af 8000 	nop.w
 8017820:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017824:	4681      	mov	r9, r0
 8017826:	d1d6      	bne.n	80177d6 <_svfiprintf_r+0x166>
 8017828:	89a3      	ldrh	r3, [r4, #12]
 801782a:	065b      	lsls	r3, r3, #25
 801782c:	f53f af35 	bmi.w	801769a <_svfiprintf_r+0x2a>
 8017830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017832:	b01d      	add	sp, #116	; 0x74
 8017834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017838:	ab03      	add	r3, sp, #12
 801783a:	9300      	str	r3, [sp, #0]
 801783c:	4622      	mov	r2, r4
 801783e:	4b07      	ldr	r3, [pc, #28]	; (801785c <_svfiprintf_r+0x1ec>)
 8017840:	a904      	add	r1, sp, #16
 8017842:	4640      	mov	r0, r8
 8017844:	f000 f882 	bl	801794c <_printf_i>
 8017848:	e7ea      	b.n	8017820 <_svfiprintf_r+0x1b0>
 801784a:	bf00      	nop
 801784c:	0801a190 	.word	0x0801a190
 8017850:	0801a196 	.word	0x0801a196
 8017854:	0801a19a 	.word	0x0801a19a
 8017858:	00000000 	.word	0x00000000
 801785c:	080175bd 	.word	0x080175bd

08017860 <_printf_common>:
 8017860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017864:	4691      	mov	r9, r2
 8017866:	461f      	mov	r7, r3
 8017868:	688a      	ldr	r2, [r1, #8]
 801786a:	690b      	ldr	r3, [r1, #16]
 801786c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017870:	4293      	cmp	r3, r2
 8017872:	bfb8      	it	lt
 8017874:	4613      	movlt	r3, r2
 8017876:	f8c9 3000 	str.w	r3, [r9]
 801787a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801787e:	4606      	mov	r6, r0
 8017880:	460c      	mov	r4, r1
 8017882:	b112      	cbz	r2, 801788a <_printf_common+0x2a>
 8017884:	3301      	adds	r3, #1
 8017886:	f8c9 3000 	str.w	r3, [r9]
 801788a:	6823      	ldr	r3, [r4, #0]
 801788c:	0699      	lsls	r1, r3, #26
 801788e:	bf42      	ittt	mi
 8017890:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017894:	3302      	addmi	r3, #2
 8017896:	f8c9 3000 	strmi.w	r3, [r9]
 801789a:	6825      	ldr	r5, [r4, #0]
 801789c:	f015 0506 	ands.w	r5, r5, #6
 80178a0:	d107      	bne.n	80178b2 <_printf_common+0x52>
 80178a2:	f104 0a19 	add.w	sl, r4, #25
 80178a6:	68e3      	ldr	r3, [r4, #12]
 80178a8:	f8d9 2000 	ldr.w	r2, [r9]
 80178ac:	1a9b      	subs	r3, r3, r2
 80178ae:	42ab      	cmp	r3, r5
 80178b0:	dc28      	bgt.n	8017904 <_printf_common+0xa4>
 80178b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80178b6:	6822      	ldr	r2, [r4, #0]
 80178b8:	3300      	adds	r3, #0
 80178ba:	bf18      	it	ne
 80178bc:	2301      	movne	r3, #1
 80178be:	0692      	lsls	r2, r2, #26
 80178c0:	d42d      	bmi.n	801791e <_printf_common+0xbe>
 80178c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80178c6:	4639      	mov	r1, r7
 80178c8:	4630      	mov	r0, r6
 80178ca:	47c0      	blx	r8
 80178cc:	3001      	adds	r0, #1
 80178ce:	d020      	beq.n	8017912 <_printf_common+0xb2>
 80178d0:	6823      	ldr	r3, [r4, #0]
 80178d2:	68e5      	ldr	r5, [r4, #12]
 80178d4:	f8d9 2000 	ldr.w	r2, [r9]
 80178d8:	f003 0306 	and.w	r3, r3, #6
 80178dc:	2b04      	cmp	r3, #4
 80178de:	bf08      	it	eq
 80178e0:	1aad      	subeq	r5, r5, r2
 80178e2:	68a3      	ldr	r3, [r4, #8]
 80178e4:	6922      	ldr	r2, [r4, #16]
 80178e6:	bf0c      	ite	eq
 80178e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178ec:	2500      	movne	r5, #0
 80178ee:	4293      	cmp	r3, r2
 80178f0:	bfc4      	itt	gt
 80178f2:	1a9b      	subgt	r3, r3, r2
 80178f4:	18ed      	addgt	r5, r5, r3
 80178f6:	f04f 0900 	mov.w	r9, #0
 80178fa:	341a      	adds	r4, #26
 80178fc:	454d      	cmp	r5, r9
 80178fe:	d11a      	bne.n	8017936 <_printf_common+0xd6>
 8017900:	2000      	movs	r0, #0
 8017902:	e008      	b.n	8017916 <_printf_common+0xb6>
 8017904:	2301      	movs	r3, #1
 8017906:	4652      	mov	r2, sl
 8017908:	4639      	mov	r1, r7
 801790a:	4630      	mov	r0, r6
 801790c:	47c0      	blx	r8
 801790e:	3001      	adds	r0, #1
 8017910:	d103      	bne.n	801791a <_printf_common+0xba>
 8017912:	f04f 30ff 	mov.w	r0, #4294967295
 8017916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801791a:	3501      	adds	r5, #1
 801791c:	e7c3      	b.n	80178a6 <_printf_common+0x46>
 801791e:	18e1      	adds	r1, r4, r3
 8017920:	1c5a      	adds	r2, r3, #1
 8017922:	2030      	movs	r0, #48	; 0x30
 8017924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017928:	4422      	add	r2, r4
 801792a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801792e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017932:	3302      	adds	r3, #2
 8017934:	e7c5      	b.n	80178c2 <_printf_common+0x62>
 8017936:	2301      	movs	r3, #1
 8017938:	4622      	mov	r2, r4
 801793a:	4639      	mov	r1, r7
 801793c:	4630      	mov	r0, r6
 801793e:	47c0      	blx	r8
 8017940:	3001      	adds	r0, #1
 8017942:	d0e6      	beq.n	8017912 <_printf_common+0xb2>
 8017944:	f109 0901 	add.w	r9, r9, #1
 8017948:	e7d8      	b.n	80178fc <_printf_common+0x9c>
	...

0801794c <_printf_i>:
 801794c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017950:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017954:	460c      	mov	r4, r1
 8017956:	7e09      	ldrb	r1, [r1, #24]
 8017958:	b085      	sub	sp, #20
 801795a:	296e      	cmp	r1, #110	; 0x6e
 801795c:	4617      	mov	r7, r2
 801795e:	4606      	mov	r6, r0
 8017960:	4698      	mov	r8, r3
 8017962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017964:	f000 80b3 	beq.w	8017ace <_printf_i+0x182>
 8017968:	d822      	bhi.n	80179b0 <_printf_i+0x64>
 801796a:	2963      	cmp	r1, #99	; 0x63
 801796c:	d036      	beq.n	80179dc <_printf_i+0x90>
 801796e:	d80a      	bhi.n	8017986 <_printf_i+0x3a>
 8017970:	2900      	cmp	r1, #0
 8017972:	f000 80b9 	beq.w	8017ae8 <_printf_i+0x19c>
 8017976:	2958      	cmp	r1, #88	; 0x58
 8017978:	f000 8083 	beq.w	8017a82 <_printf_i+0x136>
 801797c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017980:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017984:	e032      	b.n	80179ec <_printf_i+0xa0>
 8017986:	2964      	cmp	r1, #100	; 0x64
 8017988:	d001      	beq.n	801798e <_printf_i+0x42>
 801798a:	2969      	cmp	r1, #105	; 0x69
 801798c:	d1f6      	bne.n	801797c <_printf_i+0x30>
 801798e:	6820      	ldr	r0, [r4, #0]
 8017990:	6813      	ldr	r3, [r2, #0]
 8017992:	0605      	lsls	r5, r0, #24
 8017994:	f103 0104 	add.w	r1, r3, #4
 8017998:	d52a      	bpl.n	80179f0 <_printf_i+0xa4>
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	6011      	str	r1, [r2, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	da03      	bge.n	80179aa <_printf_i+0x5e>
 80179a2:	222d      	movs	r2, #45	; 0x2d
 80179a4:	425b      	negs	r3, r3
 80179a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80179aa:	486f      	ldr	r0, [pc, #444]	; (8017b68 <_printf_i+0x21c>)
 80179ac:	220a      	movs	r2, #10
 80179ae:	e039      	b.n	8017a24 <_printf_i+0xd8>
 80179b0:	2973      	cmp	r1, #115	; 0x73
 80179b2:	f000 809d 	beq.w	8017af0 <_printf_i+0x1a4>
 80179b6:	d808      	bhi.n	80179ca <_printf_i+0x7e>
 80179b8:	296f      	cmp	r1, #111	; 0x6f
 80179ba:	d020      	beq.n	80179fe <_printf_i+0xb2>
 80179bc:	2970      	cmp	r1, #112	; 0x70
 80179be:	d1dd      	bne.n	801797c <_printf_i+0x30>
 80179c0:	6823      	ldr	r3, [r4, #0]
 80179c2:	f043 0320 	orr.w	r3, r3, #32
 80179c6:	6023      	str	r3, [r4, #0]
 80179c8:	e003      	b.n	80179d2 <_printf_i+0x86>
 80179ca:	2975      	cmp	r1, #117	; 0x75
 80179cc:	d017      	beq.n	80179fe <_printf_i+0xb2>
 80179ce:	2978      	cmp	r1, #120	; 0x78
 80179d0:	d1d4      	bne.n	801797c <_printf_i+0x30>
 80179d2:	2378      	movs	r3, #120	; 0x78
 80179d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80179d8:	4864      	ldr	r0, [pc, #400]	; (8017b6c <_printf_i+0x220>)
 80179da:	e055      	b.n	8017a88 <_printf_i+0x13c>
 80179dc:	6813      	ldr	r3, [r2, #0]
 80179de:	1d19      	adds	r1, r3, #4
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	6011      	str	r1, [r2, #0]
 80179e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80179ec:	2301      	movs	r3, #1
 80179ee:	e08c      	b.n	8017b0a <_printf_i+0x1be>
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	6011      	str	r1, [r2, #0]
 80179f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80179f8:	bf18      	it	ne
 80179fa:	b21b      	sxthne	r3, r3
 80179fc:	e7cf      	b.n	801799e <_printf_i+0x52>
 80179fe:	6813      	ldr	r3, [r2, #0]
 8017a00:	6825      	ldr	r5, [r4, #0]
 8017a02:	1d18      	adds	r0, r3, #4
 8017a04:	6010      	str	r0, [r2, #0]
 8017a06:	0628      	lsls	r0, r5, #24
 8017a08:	d501      	bpl.n	8017a0e <_printf_i+0xc2>
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	e002      	b.n	8017a14 <_printf_i+0xc8>
 8017a0e:	0668      	lsls	r0, r5, #25
 8017a10:	d5fb      	bpl.n	8017a0a <_printf_i+0xbe>
 8017a12:	881b      	ldrh	r3, [r3, #0]
 8017a14:	4854      	ldr	r0, [pc, #336]	; (8017b68 <_printf_i+0x21c>)
 8017a16:	296f      	cmp	r1, #111	; 0x6f
 8017a18:	bf14      	ite	ne
 8017a1a:	220a      	movne	r2, #10
 8017a1c:	2208      	moveq	r2, #8
 8017a1e:	2100      	movs	r1, #0
 8017a20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a24:	6865      	ldr	r5, [r4, #4]
 8017a26:	60a5      	str	r5, [r4, #8]
 8017a28:	2d00      	cmp	r5, #0
 8017a2a:	f2c0 8095 	blt.w	8017b58 <_printf_i+0x20c>
 8017a2e:	6821      	ldr	r1, [r4, #0]
 8017a30:	f021 0104 	bic.w	r1, r1, #4
 8017a34:	6021      	str	r1, [r4, #0]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d13d      	bne.n	8017ab6 <_printf_i+0x16a>
 8017a3a:	2d00      	cmp	r5, #0
 8017a3c:	f040 808e 	bne.w	8017b5c <_printf_i+0x210>
 8017a40:	4665      	mov	r5, ip
 8017a42:	2a08      	cmp	r2, #8
 8017a44:	d10b      	bne.n	8017a5e <_printf_i+0x112>
 8017a46:	6823      	ldr	r3, [r4, #0]
 8017a48:	07db      	lsls	r3, r3, #31
 8017a4a:	d508      	bpl.n	8017a5e <_printf_i+0x112>
 8017a4c:	6923      	ldr	r3, [r4, #16]
 8017a4e:	6862      	ldr	r2, [r4, #4]
 8017a50:	429a      	cmp	r2, r3
 8017a52:	bfde      	ittt	le
 8017a54:	2330      	movle	r3, #48	; 0x30
 8017a56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017a5e:	ebac 0305 	sub.w	r3, ip, r5
 8017a62:	6123      	str	r3, [r4, #16]
 8017a64:	f8cd 8000 	str.w	r8, [sp]
 8017a68:	463b      	mov	r3, r7
 8017a6a:	aa03      	add	r2, sp, #12
 8017a6c:	4621      	mov	r1, r4
 8017a6e:	4630      	mov	r0, r6
 8017a70:	f7ff fef6 	bl	8017860 <_printf_common>
 8017a74:	3001      	adds	r0, #1
 8017a76:	d14d      	bne.n	8017b14 <_printf_i+0x1c8>
 8017a78:	f04f 30ff 	mov.w	r0, #4294967295
 8017a7c:	b005      	add	sp, #20
 8017a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a82:	4839      	ldr	r0, [pc, #228]	; (8017b68 <_printf_i+0x21c>)
 8017a84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017a88:	6813      	ldr	r3, [r2, #0]
 8017a8a:	6821      	ldr	r1, [r4, #0]
 8017a8c:	1d1d      	adds	r5, r3, #4
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	6015      	str	r5, [r2, #0]
 8017a92:	060a      	lsls	r2, r1, #24
 8017a94:	d50b      	bpl.n	8017aae <_printf_i+0x162>
 8017a96:	07ca      	lsls	r2, r1, #31
 8017a98:	bf44      	itt	mi
 8017a9a:	f041 0120 	orrmi.w	r1, r1, #32
 8017a9e:	6021      	strmi	r1, [r4, #0]
 8017aa0:	b91b      	cbnz	r3, 8017aaa <_printf_i+0x15e>
 8017aa2:	6822      	ldr	r2, [r4, #0]
 8017aa4:	f022 0220 	bic.w	r2, r2, #32
 8017aa8:	6022      	str	r2, [r4, #0]
 8017aaa:	2210      	movs	r2, #16
 8017aac:	e7b7      	b.n	8017a1e <_printf_i+0xd2>
 8017aae:	064d      	lsls	r5, r1, #25
 8017ab0:	bf48      	it	mi
 8017ab2:	b29b      	uxthmi	r3, r3
 8017ab4:	e7ef      	b.n	8017a96 <_printf_i+0x14a>
 8017ab6:	4665      	mov	r5, ip
 8017ab8:	fbb3 f1f2 	udiv	r1, r3, r2
 8017abc:	fb02 3311 	mls	r3, r2, r1, r3
 8017ac0:	5cc3      	ldrb	r3, [r0, r3]
 8017ac2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017ac6:	460b      	mov	r3, r1
 8017ac8:	2900      	cmp	r1, #0
 8017aca:	d1f5      	bne.n	8017ab8 <_printf_i+0x16c>
 8017acc:	e7b9      	b.n	8017a42 <_printf_i+0xf6>
 8017ace:	6813      	ldr	r3, [r2, #0]
 8017ad0:	6825      	ldr	r5, [r4, #0]
 8017ad2:	6961      	ldr	r1, [r4, #20]
 8017ad4:	1d18      	adds	r0, r3, #4
 8017ad6:	6010      	str	r0, [r2, #0]
 8017ad8:	0628      	lsls	r0, r5, #24
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	d501      	bpl.n	8017ae2 <_printf_i+0x196>
 8017ade:	6019      	str	r1, [r3, #0]
 8017ae0:	e002      	b.n	8017ae8 <_printf_i+0x19c>
 8017ae2:	066a      	lsls	r2, r5, #25
 8017ae4:	d5fb      	bpl.n	8017ade <_printf_i+0x192>
 8017ae6:	8019      	strh	r1, [r3, #0]
 8017ae8:	2300      	movs	r3, #0
 8017aea:	6123      	str	r3, [r4, #16]
 8017aec:	4665      	mov	r5, ip
 8017aee:	e7b9      	b.n	8017a64 <_printf_i+0x118>
 8017af0:	6813      	ldr	r3, [r2, #0]
 8017af2:	1d19      	adds	r1, r3, #4
 8017af4:	6011      	str	r1, [r2, #0]
 8017af6:	681d      	ldr	r5, [r3, #0]
 8017af8:	6862      	ldr	r2, [r4, #4]
 8017afa:	2100      	movs	r1, #0
 8017afc:	4628      	mov	r0, r5
 8017afe:	f7e8 fb8f 	bl	8000220 <memchr>
 8017b02:	b108      	cbz	r0, 8017b08 <_printf_i+0x1bc>
 8017b04:	1b40      	subs	r0, r0, r5
 8017b06:	6060      	str	r0, [r4, #4]
 8017b08:	6863      	ldr	r3, [r4, #4]
 8017b0a:	6123      	str	r3, [r4, #16]
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b12:	e7a7      	b.n	8017a64 <_printf_i+0x118>
 8017b14:	6923      	ldr	r3, [r4, #16]
 8017b16:	462a      	mov	r2, r5
 8017b18:	4639      	mov	r1, r7
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	47c0      	blx	r8
 8017b1e:	3001      	adds	r0, #1
 8017b20:	d0aa      	beq.n	8017a78 <_printf_i+0x12c>
 8017b22:	6823      	ldr	r3, [r4, #0]
 8017b24:	079b      	lsls	r3, r3, #30
 8017b26:	d413      	bmi.n	8017b50 <_printf_i+0x204>
 8017b28:	68e0      	ldr	r0, [r4, #12]
 8017b2a:	9b03      	ldr	r3, [sp, #12]
 8017b2c:	4298      	cmp	r0, r3
 8017b2e:	bfb8      	it	lt
 8017b30:	4618      	movlt	r0, r3
 8017b32:	e7a3      	b.n	8017a7c <_printf_i+0x130>
 8017b34:	2301      	movs	r3, #1
 8017b36:	464a      	mov	r2, r9
 8017b38:	4639      	mov	r1, r7
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	47c0      	blx	r8
 8017b3e:	3001      	adds	r0, #1
 8017b40:	d09a      	beq.n	8017a78 <_printf_i+0x12c>
 8017b42:	3501      	adds	r5, #1
 8017b44:	68e3      	ldr	r3, [r4, #12]
 8017b46:	9a03      	ldr	r2, [sp, #12]
 8017b48:	1a9b      	subs	r3, r3, r2
 8017b4a:	42ab      	cmp	r3, r5
 8017b4c:	dcf2      	bgt.n	8017b34 <_printf_i+0x1e8>
 8017b4e:	e7eb      	b.n	8017b28 <_printf_i+0x1dc>
 8017b50:	2500      	movs	r5, #0
 8017b52:	f104 0919 	add.w	r9, r4, #25
 8017b56:	e7f5      	b.n	8017b44 <_printf_i+0x1f8>
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d1ac      	bne.n	8017ab6 <_printf_i+0x16a>
 8017b5c:	7803      	ldrb	r3, [r0, #0]
 8017b5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b66:	e76c      	b.n	8017a42 <_printf_i+0xf6>
 8017b68:	0801a1a1 	.word	0x0801a1a1
 8017b6c:	0801a1b2 	.word	0x0801a1b2

08017b70 <__sread>:
 8017b70:	b510      	push	{r4, lr}
 8017b72:	460c      	mov	r4, r1
 8017b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b78:	f000 f8d4 	bl	8017d24 <_read_r>
 8017b7c:	2800      	cmp	r0, #0
 8017b7e:	bfab      	itete	ge
 8017b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017b82:	89a3      	ldrhlt	r3, [r4, #12]
 8017b84:	181b      	addge	r3, r3, r0
 8017b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017b8a:	bfac      	ite	ge
 8017b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017b8e:	81a3      	strhlt	r3, [r4, #12]
 8017b90:	bd10      	pop	{r4, pc}

08017b92 <__swrite>:
 8017b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b96:	461f      	mov	r7, r3
 8017b98:	898b      	ldrh	r3, [r1, #12]
 8017b9a:	05db      	lsls	r3, r3, #23
 8017b9c:	4605      	mov	r5, r0
 8017b9e:	460c      	mov	r4, r1
 8017ba0:	4616      	mov	r6, r2
 8017ba2:	d505      	bpl.n	8017bb0 <__swrite+0x1e>
 8017ba4:	2302      	movs	r3, #2
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bac:	f000 f868 	bl	8017c80 <_lseek_r>
 8017bb0:	89a3      	ldrh	r3, [r4, #12]
 8017bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017bba:	81a3      	strh	r3, [r4, #12]
 8017bbc:	4632      	mov	r2, r6
 8017bbe:	463b      	mov	r3, r7
 8017bc0:	4628      	mov	r0, r5
 8017bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bc6:	f000 b817 	b.w	8017bf8 <_write_r>

08017bca <__sseek>:
 8017bca:	b510      	push	{r4, lr}
 8017bcc:	460c      	mov	r4, r1
 8017bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bd2:	f000 f855 	bl	8017c80 <_lseek_r>
 8017bd6:	1c43      	adds	r3, r0, #1
 8017bd8:	89a3      	ldrh	r3, [r4, #12]
 8017bda:	bf15      	itete	ne
 8017bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8017bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017be6:	81a3      	strheq	r3, [r4, #12]
 8017be8:	bf18      	it	ne
 8017bea:	81a3      	strhne	r3, [r4, #12]
 8017bec:	bd10      	pop	{r4, pc}

08017bee <__sclose>:
 8017bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bf2:	f000 b813 	b.w	8017c1c <_close_r>
	...

08017bf8 <_write_r>:
 8017bf8:	b538      	push	{r3, r4, r5, lr}
 8017bfa:	4c07      	ldr	r4, [pc, #28]	; (8017c18 <_write_r+0x20>)
 8017bfc:	4605      	mov	r5, r0
 8017bfe:	4608      	mov	r0, r1
 8017c00:	4611      	mov	r1, r2
 8017c02:	2200      	movs	r2, #0
 8017c04:	6022      	str	r2, [r4, #0]
 8017c06:	461a      	mov	r2, r3
 8017c08:	f7eb f873 	bl	8002cf2 <_write>
 8017c0c:	1c43      	adds	r3, r0, #1
 8017c0e:	d102      	bne.n	8017c16 <_write_r+0x1e>
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	b103      	cbz	r3, 8017c16 <_write_r+0x1e>
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	bd38      	pop	{r3, r4, r5, pc}
 8017c18:	200170bc 	.word	0x200170bc

08017c1c <_close_r>:
 8017c1c:	b538      	push	{r3, r4, r5, lr}
 8017c1e:	4c06      	ldr	r4, [pc, #24]	; (8017c38 <_close_r+0x1c>)
 8017c20:	2300      	movs	r3, #0
 8017c22:	4605      	mov	r5, r0
 8017c24:	4608      	mov	r0, r1
 8017c26:	6023      	str	r3, [r4, #0]
 8017c28:	f7eb f87f 	bl	8002d2a <_close>
 8017c2c:	1c43      	adds	r3, r0, #1
 8017c2e:	d102      	bne.n	8017c36 <_close_r+0x1a>
 8017c30:	6823      	ldr	r3, [r4, #0]
 8017c32:	b103      	cbz	r3, 8017c36 <_close_r+0x1a>
 8017c34:	602b      	str	r3, [r5, #0]
 8017c36:	bd38      	pop	{r3, r4, r5, pc}
 8017c38:	200170bc 	.word	0x200170bc

08017c3c <_fstat_r>:
 8017c3c:	b538      	push	{r3, r4, r5, lr}
 8017c3e:	4c07      	ldr	r4, [pc, #28]	; (8017c5c <_fstat_r+0x20>)
 8017c40:	2300      	movs	r3, #0
 8017c42:	4605      	mov	r5, r0
 8017c44:	4608      	mov	r0, r1
 8017c46:	4611      	mov	r1, r2
 8017c48:	6023      	str	r3, [r4, #0]
 8017c4a:	f7eb f87a 	bl	8002d42 <_fstat>
 8017c4e:	1c43      	adds	r3, r0, #1
 8017c50:	d102      	bne.n	8017c58 <_fstat_r+0x1c>
 8017c52:	6823      	ldr	r3, [r4, #0]
 8017c54:	b103      	cbz	r3, 8017c58 <_fstat_r+0x1c>
 8017c56:	602b      	str	r3, [r5, #0]
 8017c58:	bd38      	pop	{r3, r4, r5, pc}
 8017c5a:	bf00      	nop
 8017c5c:	200170bc 	.word	0x200170bc

08017c60 <_isatty_r>:
 8017c60:	b538      	push	{r3, r4, r5, lr}
 8017c62:	4c06      	ldr	r4, [pc, #24]	; (8017c7c <_isatty_r+0x1c>)
 8017c64:	2300      	movs	r3, #0
 8017c66:	4605      	mov	r5, r0
 8017c68:	4608      	mov	r0, r1
 8017c6a:	6023      	str	r3, [r4, #0]
 8017c6c:	f7eb f879 	bl	8002d62 <_isatty>
 8017c70:	1c43      	adds	r3, r0, #1
 8017c72:	d102      	bne.n	8017c7a <_isatty_r+0x1a>
 8017c74:	6823      	ldr	r3, [r4, #0]
 8017c76:	b103      	cbz	r3, 8017c7a <_isatty_r+0x1a>
 8017c78:	602b      	str	r3, [r5, #0]
 8017c7a:	bd38      	pop	{r3, r4, r5, pc}
 8017c7c:	200170bc 	.word	0x200170bc

08017c80 <_lseek_r>:
 8017c80:	b538      	push	{r3, r4, r5, lr}
 8017c82:	4c07      	ldr	r4, [pc, #28]	; (8017ca0 <_lseek_r+0x20>)
 8017c84:	4605      	mov	r5, r0
 8017c86:	4608      	mov	r0, r1
 8017c88:	4611      	mov	r1, r2
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	6022      	str	r2, [r4, #0]
 8017c8e:	461a      	mov	r2, r3
 8017c90:	f7eb f872 	bl	8002d78 <_lseek>
 8017c94:	1c43      	adds	r3, r0, #1
 8017c96:	d102      	bne.n	8017c9e <_lseek_r+0x1e>
 8017c98:	6823      	ldr	r3, [r4, #0]
 8017c9a:	b103      	cbz	r3, 8017c9e <_lseek_r+0x1e>
 8017c9c:	602b      	str	r3, [r5, #0]
 8017c9e:	bd38      	pop	{r3, r4, r5, pc}
 8017ca0:	200170bc 	.word	0x200170bc

08017ca4 <memmove>:
 8017ca4:	4288      	cmp	r0, r1
 8017ca6:	b510      	push	{r4, lr}
 8017ca8:	eb01 0302 	add.w	r3, r1, r2
 8017cac:	d807      	bhi.n	8017cbe <memmove+0x1a>
 8017cae:	1e42      	subs	r2, r0, #1
 8017cb0:	4299      	cmp	r1, r3
 8017cb2:	d00a      	beq.n	8017cca <memmove+0x26>
 8017cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017cbc:	e7f8      	b.n	8017cb0 <memmove+0xc>
 8017cbe:	4283      	cmp	r3, r0
 8017cc0:	d9f5      	bls.n	8017cae <memmove+0xa>
 8017cc2:	1881      	adds	r1, r0, r2
 8017cc4:	1ad2      	subs	r2, r2, r3
 8017cc6:	42d3      	cmn	r3, r2
 8017cc8:	d100      	bne.n	8017ccc <memmove+0x28>
 8017cca:	bd10      	pop	{r4, pc}
 8017ccc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017cd4:	e7f7      	b.n	8017cc6 <memmove+0x22>

08017cd6 <_realloc_r>:
 8017cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cd8:	4607      	mov	r7, r0
 8017cda:	4614      	mov	r4, r2
 8017cdc:	460e      	mov	r6, r1
 8017cde:	b921      	cbnz	r1, 8017cea <_realloc_r+0x14>
 8017ce0:	4611      	mov	r1, r2
 8017ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ce6:	f7ff b88d 	b.w	8016e04 <_malloc_r>
 8017cea:	b922      	cbnz	r2, 8017cf6 <_realloc_r+0x20>
 8017cec:	f7ff f83c 	bl	8016d68 <_free_r>
 8017cf0:	4625      	mov	r5, r4
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cf6:	f000 f827 	bl	8017d48 <_malloc_usable_size_r>
 8017cfa:	42a0      	cmp	r0, r4
 8017cfc:	d20f      	bcs.n	8017d1e <_realloc_r+0x48>
 8017cfe:	4621      	mov	r1, r4
 8017d00:	4638      	mov	r0, r7
 8017d02:	f7ff f87f 	bl	8016e04 <_malloc_r>
 8017d06:	4605      	mov	r5, r0
 8017d08:	2800      	cmp	r0, #0
 8017d0a:	d0f2      	beq.n	8017cf2 <_realloc_r+0x1c>
 8017d0c:	4631      	mov	r1, r6
 8017d0e:	4622      	mov	r2, r4
 8017d10:	f7ff f816 	bl	8016d40 <memcpy>
 8017d14:	4631      	mov	r1, r6
 8017d16:	4638      	mov	r0, r7
 8017d18:	f7ff f826 	bl	8016d68 <_free_r>
 8017d1c:	e7e9      	b.n	8017cf2 <_realloc_r+0x1c>
 8017d1e:	4635      	mov	r5, r6
 8017d20:	e7e7      	b.n	8017cf2 <_realloc_r+0x1c>
	...

08017d24 <_read_r>:
 8017d24:	b538      	push	{r3, r4, r5, lr}
 8017d26:	4c07      	ldr	r4, [pc, #28]	; (8017d44 <_read_r+0x20>)
 8017d28:	4605      	mov	r5, r0
 8017d2a:	4608      	mov	r0, r1
 8017d2c:	4611      	mov	r1, r2
 8017d2e:	2200      	movs	r2, #0
 8017d30:	6022      	str	r2, [r4, #0]
 8017d32:	461a      	mov	r2, r3
 8017d34:	f7ea ffc0 	bl	8002cb8 <_read>
 8017d38:	1c43      	adds	r3, r0, #1
 8017d3a:	d102      	bne.n	8017d42 <_read_r+0x1e>
 8017d3c:	6823      	ldr	r3, [r4, #0]
 8017d3e:	b103      	cbz	r3, 8017d42 <_read_r+0x1e>
 8017d40:	602b      	str	r3, [r5, #0]
 8017d42:	bd38      	pop	{r3, r4, r5, pc}
 8017d44:	200170bc 	.word	0x200170bc

08017d48 <_malloc_usable_size_r>:
 8017d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d4c:	1f18      	subs	r0, r3, #4
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	bfbc      	itt	lt
 8017d52:	580b      	ldrlt	r3, [r1, r0]
 8017d54:	18c0      	addlt	r0, r0, r3
 8017d56:	4770      	bx	lr

08017d58 <fmax>:
 8017d58:	b508      	push	{r3, lr}
 8017d5a:	ed2d 8b04 	vpush	{d8-d9}
 8017d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8017d62:	eef0 8a60 	vmov.f32	s17, s1
 8017d66:	eeb0 9a41 	vmov.f32	s18, s2
 8017d6a:	eef0 9a61 	vmov.f32	s19, s3
 8017d6e:	f000 f841 	bl	8017df4 <__fpclassifyd>
 8017d72:	b168      	cbz	r0, 8017d90 <fmax+0x38>
 8017d74:	eeb0 0a49 	vmov.f32	s0, s18
 8017d78:	eef0 0a69 	vmov.f32	s1, s19
 8017d7c:	f000 f83a 	bl	8017df4 <__fpclassifyd>
 8017d80:	b150      	cbz	r0, 8017d98 <fmax+0x40>
 8017d82:	ec53 2b19 	vmov	r2, r3, d9
 8017d86:	ec51 0b18 	vmov	r0, r1, d8
 8017d8a:	f7e8 fee5 	bl	8000b58 <__aeabi_dcmpgt>
 8017d8e:	b918      	cbnz	r0, 8017d98 <fmax+0x40>
 8017d90:	eeb0 8a49 	vmov.f32	s16, s18
 8017d94:	eef0 8a69 	vmov.f32	s17, s19
 8017d98:	eeb0 0a48 	vmov.f32	s0, s16
 8017d9c:	eef0 0a68 	vmov.f32	s1, s17
 8017da0:	ecbd 8b04 	vpop	{d8-d9}
 8017da4:	bd08      	pop	{r3, pc}

08017da6 <fmin>:
 8017da6:	b508      	push	{r3, lr}
 8017da8:	ed2d 8b04 	vpush	{d8-d9}
 8017dac:	eeb0 8a40 	vmov.f32	s16, s0
 8017db0:	eef0 8a60 	vmov.f32	s17, s1
 8017db4:	eeb0 9a41 	vmov.f32	s18, s2
 8017db8:	eef0 9a61 	vmov.f32	s19, s3
 8017dbc:	f000 f81a 	bl	8017df4 <__fpclassifyd>
 8017dc0:	b168      	cbz	r0, 8017dde <fmin+0x38>
 8017dc2:	eeb0 0a49 	vmov.f32	s0, s18
 8017dc6:	eef0 0a69 	vmov.f32	s1, s19
 8017dca:	f000 f813 	bl	8017df4 <__fpclassifyd>
 8017dce:	b150      	cbz	r0, 8017de6 <fmin+0x40>
 8017dd0:	ec53 2b19 	vmov	r2, r3, d9
 8017dd4:	ec51 0b18 	vmov	r0, r1, d8
 8017dd8:	f7e8 fea0 	bl	8000b1c <__aeabi_dcmplt>
 8017ddc:	b918      	cbnz	r0, 8017de6 <fmin+0x40>
 8017dde:	eeb0 8a49 	vmov.f32	s16, s18
 8017de2:	eef0 8a69 	vmov.f32	s17, s19
 8017de6:	eeb0 0a48 	vmov.f32	s0, s16
 8017dea:	eef0 0a68 	vmov.f32	s1, s17
 8017dee:	ecbd 8b04 	vpop	{d8-d9}
 8017df2:	bd08      	pop	{r3, pc}

08017df4 <__fpclassifyd>:
 8017df4:	ec51 0b10 	vmov	r0, r1, d0
 8017df8:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 8017dfc:	b510      	push	{r4, lr}
 8017dfe:	460b      	mov	r3, r1
 8017e00:	d01b      	beq.n	8017e3a <__fpclassifyd+0x46>
 8017e02:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8017e06:	490f      	ldr	r1, [pc, #60]	; (8017e44 <__fpclassifyd+0x50>)
 8017e08:	428c      	cmp	r4, r1
 8017e0a:	d910      	bls.n	8017e2e <__fpclassifyd+0x3a>
 8017e0c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8017e10:	490c      	ldr	r1, [pc, #48]	; (8017e44 <__fpclassifyd+0x50>)
 8017e12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017e16:	428b      	cmp	r3, r1
 8017e18:	d909      	bls.n	8017e2e <__fpclassifyd+0x3a>
 8017e1a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8017e1e:	d308      	bcc.n	8017e32 <__fpclassifyd+0x3e>
 8017e20:	4b09      	ldr	r3, [pc, #36]	; (8017e48 <__fpclassifyd+0x54>)
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d107      	bne.n	8017e36 <__fpclassifyd+0x42>
 8017e26:	fab0 f080 	clz	r0, r0
 8017e2a:	0940      	lsrs	r0, r0, #5
 8017e2c:	bd10      	pop	{r4, pc}
 8017e2e:	2004      	movs	r0, #4
 8017e30:	e7fc      	b.n	8017e2c <__fpclassifyd+0x38>
 8017e32:	2003      	movs	r0, #3
 8017e34:	e7fa      	b.n	8017e2c <__fpclassifyd+0x38>
 8017e36:	2000      	movs	r0, #0
 8017e38:	e7f8      	b.n	8017e2c <__fpclassifyd+0x38>
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d1e6      	bne.n	8017e0c <__fpclassifyd+0x18>
 8017e3e:	2002      	movs	r0, #2
 8017e40:	e7f4      	b.n	8017e2c <__fpclassifyd+0x38>
 8017e42:	bf00      	nop
 8017e44:	7fdfffff 	.word	0x7fdfffff
 8017e48:	7ff00000 	.word	0x7ff00000

08017e4c <pow>:
 8017e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e50:	ed2d 8b04 	vpush	{d8-d9}
 8017e54:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8018128 <pow+0x2dc>
 8017e58:	b08d      	sub	sp, #52	; 0x34
 8017e5a:	ec57 6b10 	vmov	r6, r7, d0
 8017e5e:	ec55 4b11 	vmov	r4, r5, d1
 8017e62:	f000 fb21 	bl	80184a8 <__ieee754_pow>
 8017e66:	f999 3000 	ldrsb.w	r3, [r9]
 8017e6a:	9300      	str	r3, [sp, #0]
 8017e6c:	3301      	adds	r3, #1
 8017e6e:	eeb0 8a40 	vmov.f32	s16, s0
 8017e72:	eef0 8a60 	vmov.f32	s17, s1
 8017e76:	46c8      	mov	r8, r9
 8017e78:	d05f      	beq.n	8017f3a <pow+0xee>
 8017e7a:	4622      	mov	r2, r4
 8017e7c:	462b      	mov	r3, r5
 8017e7e:	4620      	mov	r0, r4
 8017e80:	4629      	mov	r1, r5
 8017e82:	f7e8 fe73 	bl	8000b6c <__aeabi_dcmpun>
 8017e86:	4683      	mov	fp, r0
 8017e88:	2800      	cmp	r0, #0
 8017e8a:	d156      	bne.n	8017f3a <pow+0xee>
 8017e8c:	4632      	mov	r2, r6
 8017e8e:	463b      	mov	r3, r7
 8017e90:	4630      	mov	r0, r6
 8017e92:	4639      	mov	r1, r7
 8017e94:	f7e8 fe6a 	bl	8000b6c <__aeabi_dcmpun>
 8017e98:	9001      	str	r0, [sp, #4]
 8017e9a:	b1e8      	cbz	r0, 8017ed8 <pow+0x8c>
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	4629      	mov	r1, r5
 8017ea4:	f7e8 fe30 	bl	8000b08 <__aeabi_dcmpeq>
 8017ea8:	2800      	cmp	r0, #0
 8017eaa:	d046      	beq.n	8017f3a <pow+0xee>
 8017eac:	2301      	movs	r3, #1
 8017eae:	9302      	str	r3, [sp, #8]
 8017eb0:	4b96      	ldr	r3, [pc, #600]	; (801810c <pow+0x2c0>)
 8017eb2:	9303      	str	r3, [sp, #12]
 8017eb4:	4b96      	ldr	r3, [pc, #600]	; (8018110 <pow+0x2c4>)
 8017eb6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017eba:	2200      	movs	r2, #0
 8017ebc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017ec0:	9b00      	ldr	r3, [sp, #0]
 8017ec2:	2b02      	cmp	r3, #2
 8017ec4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017ec8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017ecc:	d033      	beq.n	8017f36 <pow+0xea>
 8017ece:	a802      	add	r0, sp, #8
 8017ed0:	f001 fb7c 	bl	80195cc <matherr>
 8017ed4:	bb48      	cbnz	r0, 8017f2a <pow+0xde>
 8017ed6:	e05d      	b.n	8017f94 <pow+0x148>
 8017ed8:	f04f 0a00 	mov.w	sl, #0
 8017edc:	f04f 0b00 	mov.w	fp, #0
 8017ee0:	4652      	mov	r2, sl
 8017ee2:	465b      	mov	r3, fp
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	4639      	mov	r1, r7
 8017ee8:	f7e8 fe0e 	bl	8000b08 <__aeabi_dcmpeq>
 8017eec:	ec4b ab19 	vmov	d9, sl, fp
 8017ef0:	2800      	cmp	r0, #0
 8017ef2:	d054      	beq.n	8017f9e <pow+0x152>
 8017ef4:	4652      	mov	r2, sl
 8017ef6:	465b      	mov	r3, fp
 8017ef8:	4620      	mov	r0, r4
 8017efa:	4629      	mov	r1, r5
 8017efc:	f7e8 fe04 	bl	8000b08 <__aeabi_dcmpeq>
 8017f00:	4680      	mov	r8, r0
 8017f02:	b318      	cbz	r0, 8017f4c <pow+0x100>
 8017f04:	2301      	movs	r3, #1
 8017f06:	9302      	str	r3, [sp, #8]
 8017f08:	4b80      	ldr	r3, [pc, #512]	; (801810c <pow+0x2c0>)
 8017f0a:	9303      	str	r3, [sp, #12]
 8017f0c:	9b01      	ldr	r3, [sp, #4]
 8017f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8017f10:	9b00      	ldr	r3, [sp, #0]
 8017f12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017f16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017f1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d0d5      	beq.n	8017ece <pow+0x82>
 8017f22:	4b7b      	ldr	r3, [pc, #492]	; (8018110 <pow+0x2c4>)
 8017f24:	2200      	movs	r2, #0
 8017f26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f2c:	b11b      	cbz	r3, 8017f36 <pow+0xea>
 8017f2e:	f7fe fecd 	bl	8016ccc <__errno>
 8017f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f34:	6003      	str	r3, [r0, #0]
 8017f36:	ed9d 8b08 	vldr	d8, [sp, #32]
 8017f3a:	eeb0 0a48 	vmov.f32	s0, s16
 8017f3e:	eef0 0a68 	vmov.f32	s1, s17
 8017f42:	b00d      	add	sp, #52	; 0x34
 8017f44:	ecbd 8b04 	vpop	{d8-d9}
 8017f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4c:	ec45 4b10 	vmov	d0, r4, r5
 8017f50:	f001 fb34 	bl	80195bc <finite>
 8017f54:	2800      	cmp	r0, #0
 8017f56:	d0f0      	beq.n	8017f3a <pow+0xee>
 8017f58:	4652      	mov	r2, sl
 8017f5a:	465b      	mov	r3, fp
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	4629      	mov	r1, r5
 8017f60:	f7e8 fddc 	bl	8000b1c <__aeabi_dcmplt>
 8017f64:	2800      	cmp	r0, #0
 8017f66:	d0e8      	beq.n	8017f3a <pow+0xee>
 8017f68:	2301      	movs	r3, #1
 8017f6a:	9302      	str	r3, [sp, #8]
 8017f6c:	4b67      	ldr	r3, [pc, #412]	; (801810c <pow+0x2c0>)
 8017f6e:	9303      	str	r3, [sp, #12]
 8017f70:	f999 3000 	ldrsb.w	r3, [r9]
 8017f74:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8017f78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017f7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017f80:	b913      	cbnz	r3, 8017f88 <pow+0x13c>
 8017f82:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017f86:	e7a2      	b.n	8017ece <pow+0x82>
 8017f88:	4962      	ldr	r1, [pc, #392]	; (8018114 <pow+0x2c8>)
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017f90:	2b02      	cmp	r3, #2
 8017f92:	d19c      	bne.n	8017ece <pow+0x82>
 8017f94:	f7fe fe9a 	bl	8016ccc <__errno>
 8017f98:	2321      	movs	r3, #33	; 0x21
 8017f9a:	6003      	str	r3, [r0, #0]
 8017f9c:	e7c5      	b.n	8017f2a <pow+0xde>
 8017f9e:	eeb0 0a48 	vmov.f32	s0, s16
 8017fa2:	eef0 0a68 	vmov.f32	s1, s17
 8017fa6:	f001 fb09 	bl	80195bc <finite>
 8017faa:	9000      	str	r0, [sp, #0]
 8017fac:	2800      	cmp	r0, #0
 8017fae:	f040 8081 	bne.w	80180b4 <pow+0x268>
 8017fb2:	ec47 6b10 	vmov	d0, r6, r7
 8017fb6:	f001 fb01 	bl	80195bc <finite>
 8017fba:	2800      	cmp	r0, #0
 8017fbc:	d07a      	beq.n	80180b4 <pow+0x268>
 8017fbe:	ec45 4b10 	vmov	d0, r4, r5
 8017fc2:	f001 fafb 	bl	80195bc <finite>
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	d074      	beq.n	80180b4 <pow+0x268>
 8017fca:	ec53 2b18 	vmov	r2, r3, d8
 8017fce:	ee18 0a10 	vmov	r0, s16
 8017fd2:	4619      	mov	r1, r3
 8017fd4:	f7e8 fdca 	bl	8000b6c <__aeabi_dcmpun>
 8017fd8:	f999 9000 	ldrsb.w	r9, [r9]
 8017fdc:	4b4b      	ldr	r3, [pc, #300]	; (801810c <pow+0x2c0>)
 8017fde:	b1b0      	cbz	r0, 801800e <pow+0x1c2>
 8017fe0:	2201      	movs	r2, #1
 8017fe2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017fe6:	9b00      	ldr	r3, [sp, #0]
 8017fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8017fea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017fee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017ff2:	f1b9 0f00 	cmp.w	r9, #0
 8017ff6:	d0c4      	beq.n	8017f82 <pow+0x136>
 8017ff8:	4652      	mov	r2, sl
 8017ffa:	465b      	mov	r3, fp
 8017ffc:	4650      	mov	r0, sl
 8017ffe:	4659      	mov	r1, fp
 8018000:	f7e8 fc44 	bl	800088c <__aeabi_ddiv>
 8018004:	f1b9 0f02 	cmp.w	r9, #2
 8018008:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801800c:	e7c1      	b.n	8017f92 <pow+0x146>
 801800e:	2203      	movs	r2, #3
 8018010:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018014:	900a      	str	r0, [sp, #40]	; 0x28
 8018016:	4629      	mov	r1, r5
 8018018:	4620      	mov	r0, r4
 801801a:	2200      	movs	r2, #0
 801801c:	4b3e      	ldr	r3, [pc, #248]	; (8018118 <pow+0x2cc>)
 801801e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018022:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018026:	f7e8 fb07 	bl	8000638 <__aeabi_dmul>
 801802a:	4604      	mov	r4, r0
 801802c:	460d      	mov	r5, r1
 801802e:	f1b9 0f00 	cmp.w	r9, #0
 8018032:	d124      	bne.n	801807e <pow+0x232>
 8018034:	4b39      	ldr	r3, [pc, #228]	; (801811c <pow+0x2d0>)
 8018036:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801803a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801803e:	4630      	mov	r0, r6
 8018040:	4652      	mov	r2, sl
 8018042:	465b      	mov	r3, fp
 8018044:	4639      	mov	r1, r7
 8018046:	f7e8 fd69 	bl	8000b1c <__aeabi_dcmplt>
 801804a:	2800      	cmp	r0, #0
 801804c:	d056      	beq.n	80180fc <pow+0x2b0>
 801804e:	ec45 4b10 	vmov	d0, r4, r5
 8018052:	f001 fac5 	bl	80195e0 <rint>
 8018056:	4622      	mov	r2, r4
 8018058:	462b      	mov	r3, r5
 801805a:	ec51 0b10 	vmov	r0, r1, d0
 801805e:	f7e8 fd53 	bl	8000b08 <__aeabi_dcmpeq>
 8018062:	b920      	cbnz	r0, 801806e <pow+0x222>
 8018064:	4b2e      	ldr	r3, [pc, #184]	; (8018120 <pow+0x2d4>)
 8018066:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801806a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801806e:	f998 3000 	ldrsb.w	r3, [r8]
 8018072:	2b02      	cmp	r3, #2
 8018074:	d142      	bne.n	80180fc <pow+0x2b0>
 8018076:	f7fe fe29 	bl	8016ccc <__errno>
 801807a:	2322      	movs	r3, #34	; 0x22
 801807c:	e78d      	b.n	8017f9a <pow+0x14e>
 801807e:	4b29      	ldr	r3, [pc, #164]	; (8018124 <pow+0x2d8>)
 8018080:	2200      	movs	r2, #0
 8018082:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018086:	4630      	mov	r0, r6
 8018088:	4652      	mov	r2, sl
 801808a:	465b      	mov	r3, fp
 801808c:	4639      	mov	r1, r7
 801808e:	f7e8 fd45 	bl	8000b1c <__aeabi_dcmplt>
 8018092:	2800      	cmp	r0, #0
 8018094:	d0eb      	beq.n	801806e <pow+0x222>
 8018096:	ec45 4b10 	vmov	d0, r4, r5
 801809a:	f001 faa1 	bl	80195e0 <rint>
 801809e:	4622      	mov	r2, r4
 80180a0:	462b      	mov	r3, r5
 80180a2:	ec51 0b10 	vmov	r0, r1, d0
 80180a6:	f7e8 fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80180aa:	2800      	cmp	r0, #0
 80180ac:	d1df      	bne.n	801806e <pow+0x222>
 80180ae:	2200      	movs	r2, #0
 80180b0:	4b18      	ldr	r3, [pc, #96]	; (8018114 <pow+0x2c8>)
 80180b2:	e7da      	b.n	801806a <pow+0x21e>
 80180b4:	2200      	movs	r2, #0
 80180b6:	2300      	movs	r3, #0
 80180b8:	ec51 0b18 	vmov	r0, r1, d8
 80180bc:	f7e8 fd24 	bl	8000b08 <__aeabi_dcmpeq>
 80180c0:	2800      	cmp	r0, #0
 80180c2:	f43f af3a 	beq.w	8017f3a <pow+0xee>
 80180c6:	ec47 6b10 	vmov	d0, r6, r7
 80180ca:	f001 fa77 	bl	80195bc <finite>
 80180ce:	2800      	cmp	r0, #0
 80180d0:	f43f af33 	beq.w	8017f3a <pow+0xee>
 80180d4:	ec45 4b10 	vmov	d0, r4, r5
 80180d8:	f001 fa70 	bl	80195bc <finite>
 80180dc:	2800      	cmp	r0, #0
 80180de:	f43f af2c 	beq.w	8017f3a <pow+0xee>
 80180e2:	2304      	movs	r3, #4
 80180e4:	9302      	str	r3, [sp, #8]
 80180e6:	4b09      	ldr	r3, [pc, #36]	; (801810c <pow+0x2c0>)
 80180e8:	9303      	str	r3, [sp, #12]
 80180ea:	2300      	movs	r3, #0
 80180ec:	930a      	str	r3, [sp, #40]	; 0x28
 80180ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80180f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80180f6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80180fa:	e7b8      	b.n	801806e <pow+0x222>
 80180fc:	a802      	add	r0, sp, #8
 80180fe:	f001 fa65 	bl	80195cc <matherr>
 8018102:	2800      	cmp	r0, #0
 8018104:	f47f af11 	bne.w	8017f2a <pow+0xde>
 8018108:	e7b5      	b.n	8018076 <pow+0x22a>
 801810a:	bf00      	nop
 801810c:	0801a1c3 	.word	0x0801a1c3
 8018110:	3ff00000 	.word	0x3ff00000
 8018114:	fff00000 	.word	0xfff00000
 8018118:	3fe00000 	.word	0x3fe00000
 801811c:	47efffff 	.word	0x47efffff
 8018120:	c7efffff 	.word	0xc7efffff
 8018124:	7ff00000 	.word	0x7ff00000
 8018128:	200001f8 	.word	0x200001f8

0801812c <sqrt>:
 801812c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018130:	ed2d 8b02 	vpush	{d8}
 8018134:	b08b      	sub	sp, #44	; 0x2c
 8018136:	ec55 4b10 	vmov	r4, r5, d0
 801813a:	f000 fec3 	bl	8018ec4 <__ieee754_sqrt>
 801813e:	4b26      	ldr	r3, [pc, #152]	; (80181d8 <sqrt+0xac>)
 8018140:	eeb0 8a40 	vmov.f32	s16, s0
 8018144:	eef0 8a60 	vmov.f32	s17, s1
 8018148:	f993 6000 	ldrsb.w	r6, [r3]
 801814c:	1c73      	adds	r3, r6, #1
 801814e:	d02a      	beq.n	80181a6 <sqrt+0x7a>
 8018150:	4622      	mov	r2, r4
 8018152:	462b      	mov	r3, r5
 8018154:	4620      	mov	r0, r4
 8018156:	4629      	mov	r1, r5
 8018158:	f7e8 fd08 	bl	8000b6c <__aeabi_dcmpun>
 801815c:	4607      	mov	r7, r0
 801815e:	bb10      	cbnz	r0, 80181a6 <sqrt+0x7a>
 8018160:	f04f 0800 	mov.w	r8, #0
 8018164:	f04f 0900 	mov.w	r9, #0
 8018168:	4642      	mov	r2, r8
 801816a:	464b      	mov	r3, r9
 801816c:	4620      	mov	r0, r4
 801816e:	4629      	mov	r1, r5
 8018170:	f7e8 fcd4 	bl	8000b1c <__aeabi_dcmplt>
 8018174:	b1b8      	cbz	r0, 80181a6 <sqrt+0x7a>
 8018176:	2301      	movs	r3, #1
 8018178:	9300      	str	r3, [sp, #0]
 801817a:	4b18      	ldr	r3, [pc, #96]	; (80181dc <sqrt+0xb0>)
 801817c:	9301      	str	r3, [sp, #4]
 801817e:	9708      	str	r7, [sp, #32]
 8018180:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018184:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018188:	b9b6      	cbnz	r6, 80181b8 <sqrt+0x8c>
 801818a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801818e:	4668      	mov	r0, sp
 8018190:	f001 fa1c 	bl	80195cc <matherr>
 8018194:	b1d0      	cbz	r0, 80181cc <sqrt+0xa0>
 8018196:	9b08      	ldr	r3, [sp, #32]
 8018198:	b11b      	cbz	r3, 80181a2 <sqrt+0x76>
 801819a:	f7fe fd97 	bl	8016ccc <__errno>
 801819e:	9b08      	ldr	r3, [sp, #32]
 80181a0:	6003      	str	r3, [r0, #0]
 80181a2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80181a6:	eeb0 0a48 	vmov.f32	s0, s16
 80181aa:	eef0 0a68 	vmov.f32	s1, s17
 80181ae:	b00b      	add	sp, #44	; 0x2c
 80181b0:	ecbd 8b02 	vpop	{d8}
 80181b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181b8:	4642      	mov	r2, r8
 80181ba:	464b      	mov	r3, r9
 80181bc:	4640      	mov	r0, r8
 80181be:	4649      	mov	r1, r9
 80181c0:	f7e8 fb64 	bl	800088c <__aeabi_ddiv>
 80181c4:	2e02      	cmp	r6, #2
 80181c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80181ca:	d1e0      	bne.n	801818e <sqrt+0x62>
 80181cc:	f7fe fd7e 	bl	8016ccc <__errno>
 80181d0:	2321      	movs	r3, #33	; 0x21
 80181d2:	6003      	str	r3, [r0, #0]
 80181d4:	e7df      	b.n	8018196 <sqrt+0x6a>
 80181d6:	bf00      	nop
 80181d8:	200001f8 	.word	0x200001f8
 80181dc:	0801a1c7 	.word	0x0801a1c7

080181e0 <powf>:
 80181e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80181e4:	ed2d 8b04 	vpush	{d8-d9}
 80181e8:	4ca7      	ldr	r4, [pc, #668]	; (8018488 <powf+0x2a8>)
 80181ea:	b08a      	sub	sp, #40	; 0x28
 80181ec:	eef0 8a40 	vmov.f32	s17, s0
 80181f0:	eeb0 8a60 	vmov.f32	s16, s1
 80181f4:	f000 ff16 	bl	8019024 <__ieee754_powf>
 80181f8:	f994 5000 	ldrsb.w	r5, [r4]
 80181fc:	1c6b      	adds	r3, r5, #1
 80181fe:	eeb0 9a40 	vmov.f32	s18, s0
 8018202:	4626      	mov	r6, r4
 8018204:	d05f      	beq.n	80182c6 <powf+0xe6>
 8018206:	eeb4 8a48 	vcmp.f32	s16, s16
 801820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801820e:	d65a      	bvs.n	80182c6 <powf+0xe6>
 8018210:	eef4 8a68 	vcmp.f32	s17, s17
 8018214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018218:	d721      	bvc.n	801825e <powf+0x7e>
 801821a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801821e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018222:	d150      	bne.n	80182c6 <powf+0xe6>
 8018224:	2301      	movs	r3, #1
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	4b98      	ldr	r3, [pc, #608]	; (801848c <powf+0x2ac>)
 801822a:	9301      	str	r3, [sp, #4]
 801822c:	ee18 0a90 	vmov	r0, s17
 8018230:	2300      	movs	r3, #0
 8018232:	9308      	str	r3, [sp, #32]
 8018234:	f7e8 f9a8 	bl	8000588 <__aeabi_f2d>
 8018238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801823c:	ee18 0a10 	vmov	r0, s16
 8018240:	f7e8 f9a2 	bl	8000588 <__aeabi_f2d>
 8018244:	4b92      	ldr	r3, [pc, #584]	; (8018490 <powf+0x2b0>)
 8018246:	2200      	movs	r2, #0
 8018248:	2d02      	cmp	r5, #2
 801824a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801824e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018252:	d032      	beq.n	80182ba <powf+0xda>
 8018254:	4668      	mov	r0, sp
 8018256:	f001 f9b9 	bl	80195cc <matherr>
 801825a:	bb40      	cbnz	r0, 80182ae <powf+0xce>
 801825c:	e065      	b.n	801832a <powf+0x14a>
 801825e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8018494 <powf+0x2b4>
 8018262:	eef4 8a69 	vcmp.f32	s17, s19
 8018266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801826a:	d163      	bne.n	8018334 <powf+0x154>
 801826c:	eeb4 8a69 	vcmp.f32	s16, s19
 8018270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018274:	d12e      	bne.n	80182d4 <powf+0xf4>
 8018276:	2301      	movs	r3, #1
 8018278:	9300      	str	r3, [sp, #0]
 801827a:	4b84      	ldr	r3, [pc, #528]	; (801848c <powf+0x2ac>)
 801827c:	9301      	str	r3, [sp, #4]
 801827e:	ee18 0a90 	vmov	r0, s17
 8018282:	2300      	movs	r3, #0
 8018284:	9308      	str	r3, [sp, #32]
 8018286:	f7e8 f97f 	bl	8000588 <__aeabi_f2d>
 801828a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801828e:	ee18 0a10 	vmov	r0, s16
 8018292:	f7e8 f979 	bl	8000588 <__aeabi_f2d>
 8018296:	2200      	movs	r2, #0
 8018298:	2300      	movs	r3, #0
 801829a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801829e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80182a2:	2d00      	cmp	r5, #0
 80182a4:	d0d6      	beq.n	8018254 <powf+0x74>
 80182a6:	4b7a      	ldr	r3, [pc, #488]	; (8018490 <powf+0x2b0>)
 80182a8:	2200      	movs	r2, #0
 80182aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80182ae:	9b08      	ldr	r3, [sp, #32]
 80182b0:	b11b      	cbz	r3, 80182ba <powf+0xda>
 80182b2:	f7fe fd0b 	bl	8016ccc <__errno>
 80182b6:	9b08      	ldr	r3, [sp, #32]
 80182b8:	6003      	str	r3, [r0, #0]
 80182ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80182be:	f7e8 fc8b 	bl	8000bd8 <__aeabi_d2f>
 80182c2:	ee09 0a10 	vmov	s18, r0
 80182c6:	eeb0 0a49 	vmov.f32	s0, s18
 80182ca:	b00a      	add	sp, #40	; 0x28
 80182cc:	ecbd 8b04 	vpop	{d8-d9}
 80182d0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80182d4:	eeb0 0a48 	vmov.f32	s0, s16
 80182d8:	f001 fa83 	bl	80197e2 <finitef>
 80182dc:	2800      	cmp	r0, #0
 80182de:	d0f2      	beq.n	80182c6 <powf+0xe6>
 80182e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80182e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e8:	d5ed      	bpl.n	80182c6 <powf+0xe6>
 80182ea:	2301      	movs	r3, #1
 80182ec:	9300      	str	r3, [sp, #0]
 80182ee:	4b67      	ldr	r3, [pc, #412]	; (801848c <powf+0x2ac>)
 80182f0:	9301      	str	r3, [sp, #4]
 80182f2:	ee18 0a90 	vmov	r0, s17
 80182f6:	2300      	movs	r3, #0
 80182f8:	9308      	str	r3, [sp, #32]
 80182fa:	f7e8 f945 	bl	8000588 <__aeabi_f2d>
 80182fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018302:	ee18 0a10 	vmov	r0, s16
 8018306:	f7e8 f93f 	bl	8000588 <__aeabi_f2d>
 801830a:	f994 3000 	ldrsb.w	r3, [r4]
 801830e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018312:	b923      	cbnz	r3, 801831e <powf+0x13e>
 8018314:	2200      	movs	r2, #0
 8018316:	2300      	movs	r3, #0
 8018318:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801831c:	e79a      	b.n	8018254 <powf+0x74>
 801831e:	495e      	ldr	r1, [pc, #376]	; (8018498 <powf+0x2b8>)
 8018320:	2000      	movs	r0, #0
 8018322:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018326:	2b02      	cmp	r3, #2
 8018328:	d194      	bne.n	8018254 <powf+0x74>
 801832a:	f7fe fccf 	bl	8016ccc <__errno>
 801832e:	2321      	movs	r3, #33	; 0x21
 8018330:	6003      	str	r3, [r0, #0]
 8018332:	e7bc      	b.n	80182ae <powf+0xce>
 8018334:	f001 fa55 	bl	80197e2 <finitef>
 8018338:	4605      	mov	r5, r0
 801833a:	2800      	cmp	r0, #0
 801833c:	d173      	bne.n	8018426 <powf+0x246>
 801833e:	eeb0 0a68 	vmov.f32	s0, s17
 8018342:	f001 fa4e 	bl	80197e2 <finitef>
 8018346:	2800      	cmp	r0, #0
 8018348:	d06d      	beq.n	8018426 <powf+0x246>
 801834a:	eeb0 0a48 	vmov.f32	s0, s16
 801834e:	f001 fa48 	bl	80197e2 <finitef>
 8018352:	2800      	cmp	r0, #0
 8018354:	d067      	beq.n	8018426 <powf+0x246>
 8018356:	ee18 0a90 	vmov	r0, s17
 801835a:	f7e8 f915 	bl	8000588 <__aeabi_f2d>
 801835e:	4680      	mov	r8, r0
 8018360:	ee18 0a10 	vmov	r0, s16
 8018364:	4689      	mov	r9, r1
 8018366:	f7e8 f90f 	bl	8000588 <__aeabi_f2d>
 801836a:	eeb4 9a49 	vcmp.f32	s18, s18
 801836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018372:	f994 4000 	ldrsb.w	r4, [r4]
 8018376:	4b45      	ldr	r3, [pc, #276]	; (801848c <powf+0x2ac>)
 8018378:	d713      	bvc.n	80183a2 <powf+0x1c2>
 801837a:	2201      	movs	r2, #1
 801837c:	e9cd 2300 	strd	r2, r3, [sp]
 8018380:	9508      	str	r5, [sp, #32]
 8018382:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801838a:	2c00      	cmp	r4, #0
 801838c:	d0c2      	beq.n	8018314 <powf+0x134>
 801838e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8018392:	ee17 0a90 	vmov	r0, s15
 8018396:	f7e8 f8f7 	bl	8000588 <__aeabi_f2d>
 801839a:	2c02      	cmp	r4, #2
 801839c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80183a0:	e7c2      	b.n	8018328 <powf+0x148>
 80183a2:	2203      	movs	r2, #3
 80183a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80183a8:	e9cd 2300 	strd	r2, r3, [sp]
 80183ac:	9508      	str	r5, [sp, #32]
 80183ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80183b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80183b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80183ba:	b9fc      	cbnz	r4, 80183fc <powf+0x21c>
 80183bc:	4b37      	ldr	r3, [pc, #220]	; (801849c <powf+0x2bc>)
 80183be:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80183c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80183c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80183ce:	d553      	bpl.n	8018478 <powf+0x298>
 80183d0:	eeb0 0a48 	vmov.f32	s0, s16
 80183d4:	f001 fa16 	bl	8019804 <rintf>
 80183d8:	eeb4 0a48 	vcmp.f32	s0, s16
 80183dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183e0:	d004      	beq.n	80183ec <powf+0x20c>
 80183e2:	4b2f      	ldr	r3, [pc, #188]	; (80184a0 <powf+0x2c0>)
 80183e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80183e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80183ec:	f996 3000 	ldrsb.w	r3, [r6]
 80183f0:	2b02      	cmp	r3, #2
 80183f2:	d141      	bne.n	8018478 <powf+0x298>
 80183f4:	f7fe fc6a 	bl	8016ccc <__errno>
 80183f8:	2322      	movs	r3, #34	; 0x22
 80183fa:	e799      	b.n	8018330 <powf+0x150>
 80183fc:	4b29      	ldr	r3, [pc, #164]	; (80184a4 <powf+0x2c4>)
 80183fe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018402:	2200      	movs	r2, #0
 8018404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018408:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801840c:	d5ee      	bpl.n	80183ec <powf+0x20c>
 801840e:	eeb0 0a48 	vmov.f32	s0, s16
 8018412:	f001 f9f7 	bl	8019804 <rintf>
 8018416:	eeb4 0a48 	vcmp.f32	s0, s16
 801841a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801841e:	d0e5      	beq.n	80183ec <powf+0x20c>
 8018420:	2200      	movs	r2, #0
 8018422:	4b1d      	ldr	r3, [pc, #116]	; (8018498 <powf+0x2b8>)
 8018424:	e7e0      	b.n	80183e8 <powf+0x208>
 8018426:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801842a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801842e:	f47f af4a 	bne.w	80182c6 <powf+0xe6>
 8018432:	eeb0 0a68 	vmov.f32	s0, s17
 8018436:	f001 f9d4 	bl	80197e2 <finitef>
 801843a:	2800      	cmp	r0, #0
 801843c:	f43f af43 	beq.w	80182c6 <powf+0xe6>
 8018440:	eeb0 0a48 	vmov.f32	s0, s16
 8018444:	f001 f9cd 	bl	80197e2 <finitef>
 8018448:	2800      	cmp	r0, #0
 801844a:	f43f af3c 	beq.w	80182c6 <powf+0xe6>
 801844e:	2304      	movs	r3, #4
 8018450:	9300      	str	r3, [sp, #0]
 8018452:	4b0e      	ldr	r3, [pc, #56]	; (801848c <powf+0x2ac>)
 8018454:	9301      	str	r3, [sp, #4]
 8018456:	ee18 0a90 	vmov	r0, s17
 801845a:	2300      	movs	r3, #0
 801845c:	9308      	str	r3, [sp, #32]
 801845e:	f7e8 f893 	bl	8000588 <__aeabi_f2d>
 8018462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018466:	ee18 0a10 	vmov	r0, s16
 801846a:	f7e8 f88d 	bl	8000588 <__aeabi_f2d>
 801846e:	2200      	movs	r2, #0
 8018470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018474:	2300      	movs	r3, #0
 8018476:	e7b7      	b.n	80183e8 <powf+0x208>
 8018478:	4668      	mov	r0, sp
 801847a:	f001 f8a7 	bl	80195cc <matherr>
 801847e:	2800      	cmp	r0, #0
 8018480:	f47f af15 	bne.w	80182ae <powf+0xce>
 8018484:	e7b6      	b.n	80183f4 <powf+0x214>
 8018486:	bf00      	nop
 8018488:	200001f8 	.word	0x200001f8
 801848c:	0801a1cc 	.word	0x0801a1cc
 8018490:	3ff00000 	.word	0x3ff00000
 8018494:	00000000 	.word	0x00000000
 8018498:	fff00000 	.word	0xfff00000
 801849c:	47efffff 	.word	0x47efffff
 80184a0:	c7efffff 	.word	0xc7efffff
 80184a4:	7ff00000 	.word	0x7ff00000

080184a8 <__ieee754_pow>:
 80184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ac:	b091      	sub	sp, #68	; 0x44
 80184ae:	ed8d 1b00 	vstr	d1, [sp]
 80184b2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80184b6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80184ba:	ea58 0302 	orrs.w	r3, r8, r2
 80184be:	ec57 6b10 	vmov	r6, r7, d0
 80184c2:	f000 84be 	beq.w	8018e42 <__ieee754_pow+0x99a>
 80184c6:	4b7a      	ldr	r3, [pc, #488]	; (80186b0 <__ieee754_pow+0x208>)
 80184c8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80184cc:	429c      	cmp	r4, r3
 80184ce:	463d      	mov	r5, r7
 80184d0:	ee10 aa10 	vmov	sl, s0
 80184d4:	dc09      	bgt.n	80184ea <__ieee754_pow+0x42>
 80184d6:	d103      	bne.n	80184e0 <__ieee754_pow+0x38>
 80184d8:	b93e      	cbnz	r6, 80184ea <__ieee754_pow+0x42>
 80184da:	45a0      	cmp	r8, r4
 80184dc:	dc0d      	bgt.n	80184fa <__ieee754_pow+0x52>
 80184de:	e001      	b.n	80184e4 <__ieee754_pow+0x3c>
 80184e0:	4598      	cmp	r8, r3
 80184e2:	dc02      	bgt.n	80184ea <__ieee754_pow+0x42>
 80184e4:	4598      	cmp	r8, r3
 80184e6:	d10e      	bne.n	8018506 <__ieee754_pow+0x5e>
 80184e8:	b16a      	cbz	r2, 8018506 <__ieee754_pow+0x5e>
 80184ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80184ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80184f2:	ea54 030a 	orrs.w	r3, r4, sl
 80184f6:	f000 84a4 	beq.w	8018e42 <__ieee754_pow+0x99a>
 80184fa:	486e      	ldr	r0, [pc, #440]	; (80186b4 <__ieee754_pow+0x20c>)
 80184fc:	b011      	add	sp, #68	; 0x44
 80184fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018502:	f001 b865 	b.w	80195d0 <nan>
 8018506:	2d00      	cmp	r5, #0
 8018508:	da53      	bge.n	80185b2 <__ieee754_pow+0x10a>
 801850a:	4b6b      	ldr	r3, [pc, #428]	; (80186b8 <__ieee754_pow+0x210>)
 801850c:	4598      	cmp	r8, r3
 801850e:	dc4d      	bgt.n	80185ac <__ieee754_pow+0x104>
 8018510:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018514:	4598      	cmp	r8, r3
 8018516:	dd4c      	ble.n	80185b2 <__ieee754_pow+0x10a>
 8018518:	ea4f 5328 	mov.w	r3, r8, asr #20
 801851c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018520:	2b14      	cmp	r3, #20
 8018522:	dd26      	ble.n	8018572 <__ieee754_pow+0xca>
 8018524:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018528:	fa22 f103 	lsr.w	r1, r2, r3
 801852c:	fa01 f303 	lsl.w	r3, r1, r3
 8018530:	4293      	cmp	r3, r2
 8018532:	d13e      	bne.n	80185b2 <__ieee754_pow+0x10a>
 8018534:	f001 0101 	and.w	r1, r1, #1
 8018538:	f1c1 0b02 	rsb	fp, r1, #2
 801853c:	2a00      	cmp	r2, #0
 801853e:	d15b      	bne.n	80185f8 <__ieee754_pow+0x150>
 8018540:	4b5b      	ldr	r3, [pc, #364]	; (80186b0 <__ieee754_pow+0x208>)
 8018542:	4598      	cmp	r8, r3
 8018544:	d124      	bne.n	8018590 <__ieee754_pow+0xe8>
 8018546:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801854a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801854e:	ea53 030a 	orrs.w	r3, r3, sl
 8018552:	f000 8476 	beq.w	8018e42 <__ieee754_pow+0x99a>
 8018556:	4b59      	ldr	r3, [pc, #356]	; (80186bc <__ieee754_pow+0x214>)
 8018558:	429c      	cmp	r4, r3
 801855a:	dd2d      	ble.n	80185b8 <__ieee754_pow+0x110>
 801855c:	f1b9 0f00 	cmp.w	r9, #0
 8018560:	f280 8473 	bge.w	8018e4a <__ieee754_pow+0x9a2>
 8018564:	2000      	movs	r0, #0
 8018566:	2100      	movs	r1, #0
 8018568:	ec41 0b10 	vmov	d0, r0, r1
 801856c:	b011      	add	sp, #68	; 0x44
 801856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018572:	2a00      	cmp	r2, #0
 8018574:	d13e      	bne.n	80185f4 <__ieee754_pow+0x14c>
 8018576:	f1c3 0314 	rsb	r3, r3, #20
 801857a:	fa48 f103 	asr.w	r1, r8, r3
 801857e:	fa01 f303 	lsl.w	r3, r1, r3
 8018582:	4543      	cmp	r3, r8
 8018584:	f040 8469 	bne.w	8018e5a <__ieee754_pow+0x9b2>
 8018588:	f001 0101 	and.w	r1, r1, #1
 801858c:	f1c1 0b02 	rsb	fp, r1, #2
 8018590:	4b4b      	ldr	r3, [pc, #300]	; (80186c0 <__ieee754_pow+0x218>)
 8018592:	4598      	cmp	r8, r3
 8018594:	d118      	bne.n	80185c8 <__ieee754_pow+0x120>
 8018596:	f1b9 0f00 	cmp.w	r9, #0
 801859a:	f280 845a 	bge.w	8018e52 <__ieee754_pow+0x9aa>
 801859e:	4948      	ldr	r1, [pc, #288]	; (80186c0 <__ieee754_pow+0x218>)
 80185a0:	4632      	mov	r2, r6
 80185a2:	463b      	mov	r3, r7
 80185a4:	2000      	movs	r0, #0
 80185a6:	f7e8 f971 	bl	800088c <__aeabi_ddiv>
 80185aa:	e7dd      	b.n	8018568 <__ieee754_pow+0xc0>
 80185ac:	f04f 0b02 	mov.w	fp, #2
 80185b0:	e7c4      	b.n	801853c <__ieee754_pow+0x94>
 80185b2:	f04f 0b00 	mov.w	fp, #0
 80185b6:	e7c1      	b.n	801853c <__ieee754_pow+0x94>
 80185b8:	f1b9 0f00 	cmp.w	r9, #0
 80185bc:	dad2      	bge.n	8018564 <__ieee754_pow+0xbc>
 80185be:	e9dd 0300 	ldrd	r0, r3, [sp]
 80185c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80185c6:	e7cf      	b.n	8018568 <__ieee754_pow+0xc0>
 80185c8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80185cc:	d106      	bne.n	80185dc <__ieee754_pow+0x134>
 80185ce:	4632      	mov	r2, r6
 80185d0:	463b      	mov	r3, r7
 80185d2:	4610      	mov	r0, r2
 80185d4:	4619      	mov	r1, r3
 80185d6:	f7e8 f82f 	bl	8000638 <__aeabi_dmul>
 80185da:	e7c5      	b.n	8018568 <__ieee754_pow+0xc0>
 80185dc:	4b39      	ldr	r3, [pc, #228]	; (80186c4 <__ieee754_pow+0x21c>)
 80185de:	4599      	cmp	r9, r3
 80185e0:	d10a      	bne.n	80185f8 <__ieee754_pow+0x150>
 80185e2:	2d00      	cmp	r5, #0
 80185e4:	db08      	blt.n	80185f8 <__ieee754_pow+0x150>
 80185e6:	ec47 6b10 	vmov	d0, r6, r7
 80185ea:	b011      	add	sp, #68	; 0x44
 80185ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f0:	f000 bc68 	b.w	8018ec4 <__ieee754_sqrt>
 80185f4:	f04f 0b00 	mov.w	fp, #0
 80185f8:	ec47 6b10 	vmov	d0, r6, r7
 80185fc:	f000 ffd5 	bl	80195aa <fabs>
 8018600:	ec51 0b10 	vmov	r0, r1, d0
 8018604:	f1ba 0f00 	cmp.w	sl, #0
 8018608:	d127      	bne.n	801865a <__ieee754_pow+0x1b2>
 801860a:	b124      	cbz	r4, 8018616 <__ieee754_pow+0x16e>
 801860c:	4b2c      	ldr	r3, [pc, #176]	; (80186c0 <__ieee754_pow+0x218>)
 801860e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018612:	429a      	cmp	r2, r3
 8018614:	d121      	bne.n	801865a <__ieee754_pow+0x1b2>
 8018616:	f1b9 0f00 	cmp.w	r9, #0
 801861a:	da05      	bge.n	8018628 <__ieee754_pow+0x180>
 801861c:	4602      	mov	r2, r0
 801861e:	460b      	mov	r3, r1
 8018620:	2000      	movs	r0, #0
 8018622:	4927      	ldr	r1, [pc, #156]	; (80186c0 <__ieee754_pow+0x218>)
 8018624:	f7e8 f932 	bl	800088c <__aeabi_ddiv>
 8018628:	2d00      	cmp	r5, #0
 801862a:	da9d      	bge.n	8018568 <__ieee754_pow+0xc0>
 801862c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018630:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018634:	ea54 030b 	orrs.w	r3, r4, fp
 8018638:	d108      	bne.n	801864c <__ieee754_pow+0x1a4>
 801863a:	4602      	mov	r2, r0
 801863c:	460b      	mov	r3, r1
 801863e:	4610      	mov	r0, r2
 8018640:	4619      	mov	r1, r3
 8018642:	f7e7 fe41 	bl	80002c8 <__aeabi_dsub>
 8018646:	4602      	mov	r2, r0
 8018648:	460b      	mov	r3, r1
 801864a:	e7ac      	b.n	80185a6 <__ieee754_pow+0xfe>
 801864c:	f1bb 0f01 	cmp.w	fp, #1
 8018650:	d18a      	bne.n	8018568 <__ieee754_pow+0xc0>
 8018652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018656:	4619      	mov	r1, r3
 8018658:	e786      	b.n	8018568 <__ieee754_pow+0xc0>
 801865a:	0fed      	lsrs	r5, r5, #31
 801865c:	1e6b      	subs	r3, r5, #1
 801865e:	930d      	str	r3, [sp, #52]	; 0x34
 8018660:	ea5b 0303 	orrs.w	r3, fp, r3
 8018664:	d102      	bne.n	801866c <__ieee754_pow+0x1c4>
 8018666:	4632      	mov	r2, r6
 8018668:	463b      	mov	r3, r7
 801866a:	e7e8      	b.n	801863e <__ieee754_pow+0x196>
 801866c:	4b16      	ldr	r3, [pc, #88]	; (80186c8 <__ieee754_pow+0x220>)
 801866e:	4598      	cmp	r8, r3
 8018670:	f340 80fe 	ble.w	8018870 <__ieee754_pow+0x3c8>
 8018674:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018678:	4598      	cmp	r8, r3
 801867a:	dd0a      	ble.n	8018692 <__ieee754_pow+0x1ea>
 801867c:	4b0f      	ldr	r3, [pc, #60]	; (80186bc <__ieee754_pow+0x214>)
 801867e:	429c      	cmp	r4, r3
 8018680:	dc0d      	bgt.n	801869e <__ieee754_pow+0x1f6>
 8018682:	f1b9 0f00 	cmp.w	r9, #0
 8018686:	f6bf af6d 	bge.w	8018564 <__ieee754_pow+0xbc>
 801868a:	a307      	add	r3, pc, #28	; (adr r3, 80186a8 <__ieee754_pow+0x200>)
 801868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018690:	e79f      	b.n	80185d2 <__ieee754_pow+0x12a>
 8018692:	4b0e      	ldr	r3, [pc, #56]	; (80186cc <__ieee754_pow+0x224>)
 8018694:	429c      	cmp	r4, r3
 8018696:	ddf4      	ble.n	8018682 <__ieee754_pow+0x1da>
 8018698:	4b09      	ldr	r3, [pc, #36]	; (80186c0 <__ieee754_pow+0x218>)
 801869a:	429c      	cmp	r4, r3
 801869c:	dd18      	ble.n	80186d0 <__ieee754_pow+0x228>
 801869e:	f1b9 0f00 	cmp.w	r9, #0
 80186a2:	dcf2      	bgt.n	801868a <__ieee754_pow+0x1e2>
 80186a4:	e75e      	b.n	8018564 <__ieee754_pow+0xbc>
 80186a6:	bf00      	nop
 80186a8:	8800759c 	.word	0x8800759c
 80186ac:	7e37e43c 	.word	0x7e37e43c
 80186b0:	7ff00000 	.word	0x7ff00000
 80186b4:	0801a195 	.word	0x0801a195
 80186b8:	433fffff 	.word	0x433fffff
 80186bc:	3fefffff 	.word	0x3fefffff
 80186c0:	3ff00000 	.word	0x3ff00000
 80186c4:	3fe00000 	.word	0x3fe00000
 80186c8:	41e00000 	.word	0x41e00000
 80186cc:	3feffffe 	.word	0x3feffffe
 80186d0:	2200      	movs	r2, #0
 80186d2:	4b63      	ldr	r3, [pc, #396]	; (8018860 <__ieee754_pow+0x3b8>)
 80186d4:	f7e7 fdf8 	bl	80002c8 <__aeabi_dsub>
 80186d8:	a355      	add	r3, pc, #340	; (adr r3, 8018830 <__ieee754_pow+0x388>)
 80186da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186de:	4604      	mov	r4, r0
 80186e0:	460d      	mov	r5, r1
 80186e2:	f7e7 ffa9 	bl	8000638 <__aeabi_dmul>
 80186e6:	a354      	add	r3, pc, #336	; (adr r3, 8018838 <__ieee754_pow+0x390>)
 80186e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ec:	4606      	mov	r6, r0
 80186ee:	460f      	mov	r7, r1
 80186f0:	4620      	mov	r0, r4
 80186f2:	4629      	mov	r1, r5
 80186f4:	f7e7 ffa0 	bl	8000638 <__aeabi_dmul>
 80186f8:	2200      	movs	r2, #0
 80186fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186fe:	4b59      	ldr	r3, [pc, #356]	; (8018864 <__ieee754_pow+0x3bc>)
 8018700:	4620      	mov	r0, r4
 8018702:	4629      	mov	r1, r5
 8018704:	f7e7 ff98 	bl	8000638 <__aeabi_dmul>
 8018708:	4602      	mov	r2, r0
 801870a:	460b      	mov	r3, r1
 801870c:	a14c      	add	r1, pc, #304	; (adr r1, 8018840 <__ieee754_pow+0x398>)
 801870e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018712:	f7e7 fdd9 	bl	80002c8 <__aeabi_dsub>
 8018716:	4622      	mov	r2, r4
 8018718:	462b      	mov	r3, r5
 801871a:	f7e7 ff8d 	bl	8000638 <__aeabi_dmul>
 801871e:	4602      	mov	r2, r0
 8018720:	460b      	mov	r3, r1
 8018722:	2000      	movs	r0, #0
 8018724:	4950      	ldr	r1, [pc, #320]	; (8018868 <__ieee754_pow+0x3c0>)
 8018726:	f7e7 fdcf 	bl	80002c8 <__aeabi_dsub>
 801872a:	4622      	mov	r2, r4
 801872c:	462b      	mov	r3, r5
 801872e:	4680      	mov	r8, r0
 8018730:	4689      	mov	r9, r1
 8018732:	4620      	mov	r0, r4
 8018734:	4629      	mov	r1, r5
 8018736:	f7e7 ff7f 	bl	8000638 <__aeabi_dmul>
 801873a:	4602      	mov	r2, r0
 801873c:	460b      	mov	r3, r1
 801873e:	4640      	mov	r0, r8
 8018740:	4649      	mov	r1, r9
 8018742:	f7e7 ff79 	bl	8000638 <__aeabi_dmul>
 8018746:	a340      	add	r3, pc, #256	; (adr r3, 8018848 <__ieee754_pow+0x3a0>)
 8018748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801874c:	f7e7 ff74 	bl	8000638 <__aeabi_dmul>
 8018750:	4602      	mov	r2, r0
 8018752:	460b      	mov	r3, r1
 8018754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018758:	f7e7 fdb6 	bl	80002c8 <__aeabi_dsub>
 801875c:	4602      	mov	r2, r0
 801875e:	460b      	mov	r3, r1
 8018760:	4604      	mov	r4, r0
 8018762:	460d      	mov	r5, r1
 8018764:	4630      	mov	r0, r6
 8018766:	4639      	mov	r1, r7
 8018768:	f7e7 fdb0 	bl	80002cc <__adddf3>
 801876c:	2000      	movs	r0, #0
 801876e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018772:	4632      	mov	r2, r6
 8018774:	463b      	mov	r3, r7
 8018776:	f7e7 fda7 	bl	80002c8 <__aeabi_dsub>
 801877a:	4602      	mov	r2, r0
 801877c:	460b      	mov	r3, r1
 801877e:	4620      	mov	r0, r4
 8018780:	4629      	mov	r1, r5
 8018782:	f7e7 fda1 	bl	80002c8 <__aeabi_dsub>
 8018786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018788:	f10b 33ff 	add.w	r3, fp, #4294967295
 801878c:	4313      	orrs	r3, r2
 801878e:	4606      	mov	r6, r0
 8018790:	460f      	mov	r7, r1
 8018792:	f040 81eb 	bne.w	8018b6c <__ieee754_pow+0x6c4>
 8018796:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018850 <__ieee754_pow+0x3a8>
 801879a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801879e:	2400      	movs	r4, #0
 80187a0:	4622      	mov	r2, r4
 80187a2:	462b      	mov	r3, r5
 80187a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80187a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80187ac:	f7e7 fd8c 	bl	80002c8 <__aeabi_dsub>
 80187b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80187b4:	f7e7 ff40 	bl	8000638 <__aeabi_dmul>
 80187b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80187bc:	4680      	mov	r8, r0
 80187be:	4689      	mov	r9, r1
 80187c0:	4630      	mov	r0, r6
 80187c2:	4639      	mov	r1, r7
 80187c4:	f7e7 ff38 	bl	8000638 <__aeabi_dmul>
 80187c8:	4602      	mov	r2, r0
 80187ca:	460b      	mov	r3, r1
 80187cc:	4640      	mov	r0, r8
 80187ce:	4649      	mov	r1, r9
 80187d0:	f7e7 fd7c 	bl	80002cc <__adddf3>
 80187d4:	4622      	mov	r2, r4
 80187d6:	462b      	mov	r3, r5
 80187d8:	4680      	mov	r8, r0
 80187da:	4689      	mov	r9, r1
 80187dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80187e0:	f7e7 ff2a 	bl	8000638 <__aeabi_dmul>
 80187e4:	460b      	mov	r3, r1
 80187e6:	4604      	mov	r4, r0
 80187e8:	460d      	mov	r5, r1
 80187ea:	4602      	mov	r2, r0
 80187ec:	4649      	mov	r1, r9
 80187ee:	4640      	mov	r0, r8
 80187f0:	e9cd 4500 	strd	r4, r5, [sp]
 80187f4:	f7e7 fd6a 	bl	80002cc <__adddf3>
 80187f8:	4b1c      	ldr	r3, [pc, #112]	; (801886c <__ieee754_pow+0x3c4>)
 80187fa:	4299      	cmp	r1, r3
 80187fc:	4606      	mov	r6, r0
 80187fe:	460f      	mov	r7, r1
 8018800:	468b      	mov	fp, r1
 8018802:	f340 82f7 	ble.w	8018df4 <__ieee754_pow+0x94c>
 8018806:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801880a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801880e:	4303      	orrs	r3, r0
 8018810:	f000 81ea 	beq.w	8018be8 <__ieee754_pow+0x740>
 8018814:	a310      	add	r3, pc, #64	; (adr r3, 8018858 <__ieee754_pow+0x3b0>)
 8018816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801881a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801881e:	f7e7 ff0b 	bl	8000638 <__aeabi_dmul>
 8018822:	a30d      	add	r3, pc, #52	; (adr r3, 8018858 <__ieee754_pow+0x3b0>)
 8018824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018828:	e6d5      	b.n	80185d6 <__ieee754_pow+0x12e>
 801882a:	bf00      	nop
 801882c:	f3af 8000 	nop.w
 8018830:	60000000 	.word	0x60000000
 8018834:	3ff71547 	.word	0x3ff71547
 8018838:	f85ddf44 	.word	0xf85ddf44
 801883c:	3e54ae0b 	.word	0x3e54ae0b
 8018840:	55555555 	.word	0x55555555
 8018844:	3fd55555 	.word	0x3fd55555
 8018848:	652b82fe 	.word	0x652b82fe
 801884c:	3ff71547 	.word	0x3ff71547
 8018850:	00000000 	.word	0x00000000
 8018854:	bff00000 	.word	0xbff00000
 8018858:	8800759c 	.word	0x8800759c
 801885c:	7e37e43c 	.word	0x7e37e43c
 8018860:	3ff00000 	.word	0x3ff00000
 8018864:	3fd00000 	.word	0x3fd00000
 8018868:	3fe00000 	.word	0x3fe00000
 801886c:	408fffff 	.word	0x408fffff
 8018870:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018874:	f04f 0200 	mov.w	r2, #0
 8018878:	da05      	bge.n	8018886 <__ieee754_pow+0x3de>
 801887a:	4bd3      	ldr	r3, [pc, #844]	; (8018bc8 <__ieee754_pow+0x720>)
 801887c:	f7e7 fedc 	bl	8000638 <__aeabi_dmul>
 8018880:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018884:	460c      	mov	r4, r1
 8018886:	1523      	asrs	r3, r4, #20
 8018888:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801888c:	4413      	add	r3, r2
 801888e:	9309      	str	r3, [sp, #36]	; 0x24
 8018890:	4bce      	ldr	r3, [pc, #824]	; (8018bcc <__ieee754_pow+0x724>)
 8018892:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018896:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801889a:	429c      	cmp	r4, r3
 801889c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80188a0:	dd08      	ble.n	80188b4 <__ieee754_pow+0x40c>
 80188a2:	4bcb      	ldr	r3, [pc, #812]	; (8018bd0 <__ieee754_pow+0x728>)
 80188a4:	429c      	cmp	r4, r3
 80188a6:	f340 815e 	ble.w	8018b66 <__ieee754_pow+0x6be>
 80188aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ac:	3301      	adds	r3, #1
 80188ae:	9309      	str	r3, [sp, #36]	; 0x24
 80188b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80188b4:	f04f 0a00 	mov.w	sl, #0
 80188b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80188bc:	930c      	str	r3, [sp, #48]	; 0x30
 80188be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80188c0:	4bc4      	ldr	r3, [pc, #784]	; (8018bd4 <__ieee754_pow+0x72c>)
 80188c2:	4413      	add	r3, r2
 80188c4:	ed93 7b00 	vldr	d7, [r3]
 80188c8:	4629      	mov	r1, r5
 80188ca:	ec53 2b17 	vmov	r2, r3, d7
 80188ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80188d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80188d6:	f7e7 fcf7 	bl	80002c8 <__aeabi_dsub>
 80188da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80188de:	4606      	mov	r6, r0
 80188e0:	460f      	mov	r7, r1
 80188e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80188e6:	f7e7 fcf1 	bl	80002cc <__adddf3>
 80188ea:	4602      	mov	r2, r0
 80188ec:	460b      	mov	r3, r1
 80188ee:	2000      	movs	r0, #0
 80188f0:	49b9      	ldr	r1, [pc, #740]	; (8018bd8 <__ieee754_pow+0x730>)
 80188f2:	f7e7 ffcb 	bl	800088c <__aeabi_ddiv>
 80188f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80188fa:	4602      	mov	r2, r0
 80188fc:	460b      	mov	r3, r1
 80188fe:	4630      	mov	r0, r6
 8018900:	4639      	mov	r1, r7
 8018902:	f7e7 fe99 	bl	8000638 <__aeabi_dmul>
 8018906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801890a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801890e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8018912:	2300      	movs	r3, #0
 8018914:	9302      	str	r3, [sp, #8]
 8018916:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801891a:	106d      	asrs	r5, r5, #1
 801891c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018920:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018924:	2200      	movs	r2, #0
 8018926:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801892a:	4640      	mov	r0, r8
 801892c:	4649      	mov	r1, r9
 801892e:	4614      	mov	r4, r2
 8018930:	461d      	mov	r5, r3
 8018932:	f7e7 fe81 	bl	8000638 <__aeabi_dmul>
 8018936:	4602      	mov	r2, r0
 8018938:	460b      	mov	r3, r1
 801893a:	4630      	mov	r0, r6
 801893c:	4639      	mov	r1, r7
 801893e:	f7e7 fcc3 	bl	80002c8 <__aeabi_dsub>
 8018942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018946:	4606      	mov	r6, r0
 8018948:	460f      	mov	r7, r1
 801894a:	4620      	mov	r0, r4
 801894c:	4629      	mov	r1, r5
 801894e:	f7e7 fcbb 	bl	80002c8 <__aeabi_dsub>
 8018952:	4602      	mov	r2, r0
 8018954:	460b      	mov	r3, r1
 8018956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801895a:	f7e7 fcb5 	bl	80002c8 <__aeabi_dsub>
 801895e:	4642      	mov	r2, r8
 8018960:	464b      	mov	r3, r9
 8018962:	f7e7 fe69 	bl	8000638 <__aeabi_dmul>
 8018966:	4602      	mov	r2, r0
 8018968:	460b      	mov	r3, r1
 801896a:	4630      	mov	r0, r6
 801896c:	4639      	mov	r1, r7
 801896e:	f7e7 fcab 	bl	80002c8 <__aeabi_dsub>
 8018972:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018976:	f7e7 fe5f 	bl	8000638 <__aeabi_dmul>
 801897a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801897e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018982:	4610      	mov	r0, r2
 8018984:	4619      	mov	r1, r3
 8018986:	f7e7 fe57 	bl	8000638 <__aeabi_dmul>
 801898a:	a37b      	add	r3, pc, #492	; (adr r3, 8018b78 <__ieee754_pow+0x6d0>)
 801898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018990:	4604      	mov	r4, r0
 8018992:	460d      	mov	r5, r1
 8018994:	f7e7 fe50 	bl	8000638 <__aeabi_dmul>
 8018998:	a379      	add	r3, pc, #484	; (adr r3, 8018b80 <__ieee754_pow+0x6d8>)
 801899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801899e:	f7e7 fc95 	bl	80002cc <__adddf3>
 80189a2:	4622      	mov	r2, r4
 80189a4:	462b      	mov	r3, r5
 80189a6:	f7e7 fe47 	bl	8000638 <__aeabi_dmul>
 80189aa:	a377      	add	r3, pc, #476	; (adr r3, 8018b88 <__ieee754_pow+0x6e0>)
 80189ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189b0:	f7e7 fc8c 	bl	80002cc <__adddf3>
 80189b4:	4622      	mov	r2, r4
 80189b6:	462b      	mov	r3, r5
 80189b8:	f7e7 fe3e 	bl	8000638 <__aeabi_dmul>
 80189bc:	a374      	add	r3, pc, #464	; (adr r3, 8018b90 <__ieee754_pow+0x6e8>)
 80189be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c2:	f7e7 fc83 	bl	80002cc <__adddf3>
 80189c6:	4622      	mov	r2, r4
 80189c8:	462b      	mov	r3, r5
 80189ca:	f7e7 fe35 	bl	8000638 <__aeabi_dmul>
 80189ce:	a372      	add	r3, pc, #456	; (adr r3, 8018b98 <__ieee754_pow+0x6f0>)
 80189d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d4:	f7e7 fc7a 	bl	80002cc <__adddf3>
 80189d8:	4622      	mov	r2, r4
 80189da:	462b      	mov	r3, r5
 80189dc:	f7e7 fe2c 	bl	8000638 <__aeabi_dmul>
 80189e0:	a36f      	add	r3, pc, #444	; (adr r3, 8018ba0 <__ieee754_pow+0x6f8>)
 80189e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e6:	f7e7 fc71 	bl	80002cc <__adddf3>
 80189ea:	4622      	mov	r2, r4
 80189ec:	4606      	mov	r6, r0
 80189ee:	460f      	mov	r7, r1
 80189f0:	462b      	mov	r3, r5
 80189f2:	4620      	mov	r0, r4
 80189f4:	4629      	mov	r1, r5
 80189f6:	f7e7 fe1f 	bl	8000638 <__aeabi_dmul>
 80189fa:	4602      	mov	r2, r0
 80189fc:	460b      	mov	r3, r1
 80189fe:	4630      	mov	r0, r6
 8018a00:	4639      	mov	r1, r7
 8018a02:	f7e7 fe19 	bl	8000638 <__aeabi_dmul>
 8018a06:	4642      	mov	r2, r8
 8018a08:	4604      	mov	r4, r0
 8018a0a:	460d      	mov	r5, r1
 8018a0c:	464b      	mov	r3, r9
 8018a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a12:	f7e7 fc5b 	bl	80002cc <__adddf3>
 8018a16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a1a:	f7e7 fe0d 	bl	8000638 <__aeabi_dmul>
 8018a1e:	4622      	mov	r2, r4
 8018a20:	462b      	mov	r3, r5
 8018a22:	f7e7 fc53 	bl	80002cc <__adddf3>
 8018a26:	4642      	mov	r2, r8
 8018a28:	4606      	mov	r6, r0
 8018a2a:	460f      	mov	r7, r1
 8018a2c:	464b      	mov	r3, r9
 8018a2e:	4640      	mov	r0, r8
 8018a30:	4649      	mov	r1, r9
 8018a32:	f7e7 fe01 	bl	8000638 <__aeabi_dmul>
 8018a36:	2200      	movs	r2, #0
 8018a38:	4b68      	ldr	r3, [pc, #416]	; (8018bdc <__ieee754_pow+0x734>)
 8018a3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018a3e:	f7e7 fc45 	bl	80002cc <__adddf3>
 8018a42:	4632      	mov	r2, r6
 8018a44:	463b      	mov	r3, r7
 8018a46:	f7e7 fc41 	bl	80002cc <__adddf3>
 8018a4a:	9802      	ldr	r0, [sp, #8]
 8018a4c:	460d      	mov	r5, r1
 8018a4e:	4604      	mov	r4, r0
 8018a50:	4602      	mov	r2, r0
 8018a52:	460b      	mov	r3, r1
 8018a54:	4640      	mov	r0, r8
 8018a56:	4649      	mov	r1, r9
 8018a58:	f7e7 fdee 	bl	8000638 <__aeabi_dmul>
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	4680      	mov	r8, r0
 8018a60:	4689      	mov	r9, r1
 8018a62:	4b5e      	ldr	r3, [pc, #376]	; (8018bdc <__ieee754_pow+0x734>)
 8018a64:	4620      	mov	r0, r4
 8018a66:	4629      	mov	r1, r5
 8018a68:	f7e7 fc2e 	bl	80002c8 <__aeabi_dsub>
 8018a6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018a70:	f7e7 fc2a 	bl	80002c8 <__aeabi_dsub>
 8018a74:	4602      	mov	r2, r0
 8018a76:	460b      	mov	r3, r1
 8018a78:	4630      	mov	r0, r6
 8018a7a:	4639      	mov	r1, r7
 8018a7c:	f7e7 fc24 	bl	80002c8 <__aeabi_dsub>
 8018a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018a84:	f7e7 fdd8 	bl	8000638 <__aeabi_dmul>
 8018a88:	4622      	mov	r2, r4
 8018a8a:	4606      	mov	r6, r0
 8018a8c:	460f      	mov	r7, r1
 8018a8e:	462b      	mov	r3, r5
 8018a90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018a94:	f7e7 fdd0 	bl	8000638 <__aeabi_dmul>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	460b      	mov	r3, r1
 8018a9c:	4630      	mov	r0, r6
 8018a9e:	4639      	mov	r1, r7
 8018aa0:	f7e7 fc14 	bl	80002cc <__adddf3>
 8018aa4:	4606      	mov	r6, r0
 8018aa6:	460f      	mov	r7, r1
 8018aa8:	4602      	mov	r2, r0
 8018aaa:	460b      	mov	r3, r1
 8018aac:	4640      	mov	r0, r8
 8018aae:	4649      	mov	r1, r9
 8018ab0:	f7e7 fc0c 	bl	80002cc <__adddf3>
 8018ab4:	9802      	ldr	r0, [sp, #8]
 8018ab6:	a33c      	add	r3, pc, #240	; (adr r3, 8018ba8 <__ieee754_pow+0x700>)
 8018ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018abc:	4604      	mov	r4, r0
 8018abe:	460d      	mov	r5, r1
 8018ac0:	f7e7 fdba 	bl	8000638 <__aeabi_dmul>
 8018ac4:	4642      	mov	r2, r8
 8018ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018aca:	464b      	mov	r3, r9
 8018acc:	4620      	mov	r0, r4
 8018ace:	4629      	mov	r1, r5
 8018ad0:	f7e7 fbfa 	bl	80002c8 <__aeabi_dsub>
 8018ad4:	4602      	mov	r2, r0
 8018ad6:	460b      	mov	r3, r1
 8018ad8:	4630      	mov	r0, r6
 8018ada:	4639      	mov	r1, r7
 8018adc:	f7e7 fbf4 	bl	80002c8 <__aeabi_dsub>
 8018ae0:	a333      	add	r3, pc, #204	; (adr r3, 8018bb0 <__ieee754_pow+0x708>)
 8018ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ae6:	f7e7 fda7 	bl	8000638 <__aeabi_dmul>
 8018aea:	a333      	add	r3, pc, #204	; (adr r3, 8018bb8 <__ieee754_pow+0x710>)
 8018aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018af0:	4606      	mov	r6, r0
 8018af2:	460f      	mov	r7, r1
 8018af4:	4620      	mov	r0, r4
 8018af6:	4629      	mov	r1, r5
 8018af8:	f7e7 fd9e 	bl	8000638 <__aeabi_dmul>
 8018afc:	4602      	mov	r2, r0
 8018afe:	460b      	mov	r3, r1
 8018b00:	4630      	mov	r0, r6
 8018b02:	4639      	mov	r1, r7
 8018b04:	f7e7 fbe2 	bl	80002cc <__adddf3>
 8018b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b0a:	4b35      	ldr	r3, [pc, #212]	; (8018be0 <__ieee754_pow+0x738>)
 8018b0c:	4413      	add	r3, r2
 8018b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b12:	f7e7 fbdb 	bl	80002cc <__adddf3>
 8018b16:	4604      	mov	r4, r0
 8018b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b1a:	460d      	mov	r5, r1
 8018b1c:	f7e7 fd22 	bl	8000564 <__aeabi_i2d>
 8018b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b22:	4b30      	ldr	r3, [pc, #192]	; (8018be4 <__ieee754_pow+0x73c>)
 8018b24:	4413      	add	r3, r2
 8018b26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018b2a:	4606      	mov	r6, r0
 8018b2c:	460f      	mov	r7, r1
 8018b2e:	4622      	mov	r2, r4
 8018b30:	462b      	mov	r3, r5
 8018b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018b36:	f7e7 fbc9 	bl	80002cc <__adddf3>
 8018b3a:	4642      	mov	r2, r8
 8018b3c:	464b      	mov	r3, r9
 8018b3e:	f7e7 fbc5 	bl	80002cc <__adddf3>
 8018b42:	4632      	mov	r2, r6
 8018b44:	463b      	mov	r3, r7
 8018b46:	f7e7 fbc1 	bl	80002cc <__adddf3>
 8018b4a:	9802      	ldr	r0, [sp, #8]
 8018b4c:	4632      	mov	r2, r6
 8018b4e:	463b      	mov	r3, r7
 8018b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b54:	f7e7 fbb8 	bl	80002c8 <__aeabi_dsub>
 8018b58:	4642      	mov	r2, r8
 8018b5a:	464b      	mov	r3, r9
 8018b5c:	f7e7 fbb4 	bl	80002c8 <__aeabi_dsub>
 8018b60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b64:	e607      	b.n	8018776 <__ieee754_pow+0x2ce>
 8018b66:	f04f 0a01 	mov.w	sl, #1
 8018b6a:	e6a5      	b.n	80188b8 <__ieee754_pow+0x410>
 8018b6c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018bc0 <__ieee754_pow+0x718>
 8018b70:	e613      	b.n	801879a <__ieee754_pow+0x2f2>
 8018b72:	bf00      	nop
 8018b74:	f3af 8000 	nop.w
 8018b78:	4a454eef 	.word	0x4a454eef
 8018b7c:	3fca7e28 	.word	0x3fca7e28
 8018b80:	93c9db65 	.word	0x93c9db65
 8018b84:	3fcd864a 	.word	0x3fcd864a
 8018b88:	a91d4101 	.word	0xa91d4101
 8018b8c:	3fd17460 	.word	0x3fd17460
 8018b90:	518f264d 	.word	0x518f264d
 8018b94:	3fd55555 	.word	0x3fd55555
 8018b98:	db6fabff 	.word	0xdb6fabff
 8018b9c:	3fdb6db6 	.word	0x3fdb6db6
 8018ba0:	33333303 	.word	0x33333303
 8018ba4:	3fe33333 	.word	0x3fe33333
 8018ba8:	e0000000 	.word	0xe0000000
 8018bac:	3feec709 	.word	0x3feec709
 8018bb0:	dc3a03fd 	.word	0xdc3a03fd
 8018bb4:	3feec709 	.word	0x3feec709
 8018bb8:	145b01f5 	.word	0x145b01f5
 8018bbc:	be3e2fe0 	.word	0xbe3e2fe0
 8018bc0:	00000000 	.word	0x00000000
 8018bc4:	3ff00000 	.word	0x3ff00000
 8018bc8:	43400000 	.word	0x43400000
 8018bcc:	0003988e 	.word	0x0003988e
 8018bd0:	000bb679 	.word	0x000bb679
 8018bd4:	0801a1d8 	.word	0x0801a1d8
 8018bd8:	3ff00000 	.word	0x3ff00000
 8018bdc:	40080000 	.word	0x40080000
 8018be0:	0801a1f8 	.word	0x0801a1f8
 8018be4:	0801a1e8 	.word	0x0801a1e8
 8018be8:	a3b4      	add	r3, pc, #720	; (adr r3, 8018ebc <__ieee754_pow+0xa14>)
 8018bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bee:	4640      	mov	r0, r8
 8018bf0:	4649      	mov	r1, r9
 8018bf2:	f7e7 fb6b 	bl	80002cc <__adddf3>
 8018bf6:	4622      	mov	r2, r4
 8018bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bfc:	462b      	mov	r3, r5
 8018bfe:	4630      	mov	r0, r6
 8018c00:	4639      	mov	r1, r7
 8018c02:	f7e7 fb61 	bl	80002c8 <__aeabi_dsub>
 8018c06:	4602      	mov	r2, r0
 8018c08:	460b      	mov	r3, r1
 8018c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c0e:	f7e7 ffa3 	bl	8000b58 <__aeabi_dcmpgt>
 8018c12:	2800      	cmp	r0, #0
 8018c14:	f47f adfe 	bne.w	8018814 <__ieee754_pow+0x36c>
 8018c18:	4aa3      	ldr	r2, [pc, #652]	; (8018ea8 <__ieee754_pow+0xa00>)
 8018c1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018c1e:	4293      	cmp	r3, r2
 8018c20:	f340 810a 	ble.w	8018e38 <__ieee754_pow+0x990>
 8018c24:	151b      	asrs	r3, r3, #20
 8018c26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018c2a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018c2e:	fa4a f303 	asr.w	r3, sl, r3
 8018c32:	445b      	add	r3, fp
 8018c34:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018c38:	4e9c      	ldr	r6, [pc, #624]	; (8018eac <__ieee754_pow+0xa04>)
 8018c3a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018c3e:	4116      	asrs	r6, r2
 8018c40:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018c44:	2000      	movs	r0, #0
 8018c46:	ea23 0106 	bic.w	r1, r3, r6
 8018c4a:	f1c2 0214 	rsb	r2, r2, #20
 8018c4e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018c52:	fa4a fa02 	asr.w	sl, sl, r2
 8018c56:	f1bb 0f00 	cmp.w	fp, #0
 8018c5a:	4602      	mov	r2, r0
 8018c5c:	460b      	mov	r3, r1
 8018c5e:	4620      	mov	r0, r4
 8018c60:	4629      	mov	r1, r5
 8018c62:	bfb8      	it	lt
 8018c64:	f1ca 0a00 	rsblt	sl, sl, #0
 8018c68:	f7e7 fb2e 	bl	80002c8 <__aeabi_dsub>
 8018c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8018c70:	4642      	mov	r2, r8
 8018c72:	464b      	mov	r3, r9
 8018c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c78:	f7e7 fb28 	bl	80002cc <__adddf3>
 8018c7c:	2000      	movs	r0, #0
 8018c7e:	a378      	add	r3, pc, #480	; (adr r3, 8018e60 <__ieee754_pow+0x9b8>)
 8018c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c84:	4604      	mov	r4, r0
 8018c86:	460d      	mov	r5, r1
 8018c88:	f7e7 fcd6 	bl	8000638 <__aeabi_dmul>
 8018c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c90:	4606      	mov	r6, r0
 8018c92:	460f      	mov	r7, r1
 8018c94:	4620      	mov	r0, r4
 8018c96:	4629      	mov	r1, r5
 8018c98:	f7e7 fb16 	bl	80002c8 <__aeabi_dsub>
 8018c9c:	4602      	mov	r2, r0
 8018c9e:	460b      	mov	r3, r1
 8018ca0:	4640      	mov	r0, r8
 8018ca2:	4649      	mov	r1, r9
 8018ca4:	f7e7 fb10 	bl	80002c8 <__aeabi_dsub>
 8018ca8:	a36f      	add	r3, pc, #444	; (adr r3, 8018e68 <__ieee754_pow+0x9c0>)
 8018caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cae:	f7e7 fcc3 	bl	8000638 <__aeabi_dmul>
 8018cb2:	a36f      	add	r3, pc, #444	; (adr r3, 8018e70 <__ieee754_pow+0x9c8>)
 8018cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cb8:	4680      	mov	r8, r0
 8018cba:	4689      	mov	r9, r1
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	4629      	mov	r1, r5
 8018cc0:	f7e7 fcba 	bl	8000638 <__aeabi_dmul>
 8018cc4:	4602      	mov	r2, r0
 8018cc6:	460b      	mov	r3, r1
 8018cc8:	4640      	mov	r0, r8
 8018cca:	4649      	mov	r1, r9
 8018ccc:	f7e7 fafe 	bl	80002cc <__adddf3>
 8018cd0:	4604      	mov	r4, r0
 8018cd2:	460d      	mov	r5, r1
 8018cd4:	4602      	mov	r2, r0
 8018cd6:	460b      	mov	r3, r1
 8018cd8:	4630      	mov	r0, r6
 8018cda:	4639      	mov	r1, r7
 8018cdc:	f7e7 faf6 	bl	80002cc <__adddf3>
 8018ce0:	4632      	mov	r2, r6
 8018ce2:	463b      	mov	r3, r7
 8018ce4:	4680      	mov	r8, r0
 8018ce6:	4689      	mov	r9, r1
 8018ce8:	f7e7 faee 	bl	80002c8 <__aeabi_dsub>
 8018cec:	4602      	mov	r2, r0
 8018cee:	460b      	mov	r3, r1
 8018cf0:	4620      	mov	r0, r4
 8018cf2:	4629      	mov	r1, r5
 8018cf4:	f7e7 fae8 	bl	80002c8 <__aeabi_dsub>
 8018cf8:	4642      	mov	r2, r8
 8018cfa:	4606      	mov	r6, r0
 8018cfc:	460f      	mov	r7, r1
 8018cfe:	464b      	mov	r3, r9
 8018d00:	4640      	mov	r0, r8
 8018d02:	4649      	mov	r1, r9
 8018d04:	f7e7 fc98 	bl	8000638 <__aeabi_dmul>
 8018d08:	a35b      	add	r3, pc, #364	; (adr r3, 8018e78 <__ieee754_pow+0x9d0>)
 8018d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0e:	4604      	mov	r4, r0
 8018d10:	460d      	mov	r5, r1
 8018d12:	f7e7 fc91 	bl	8000638 <__aeabi_dmul>
 8018d16:	a35a      	add	r3, pc, #360	; (adr r3, 8018e80 <__ieee754_pow+0x9d8>)
 8018d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d1c:	f7e7 fad4 	bl	80002c8 <__aeabi_dsub>
 8018d20:	4622      	mov	r2, r4
 8018d22:	462b      	mov	r3, r5
 8018d24:	f7e7 fc88 	bl	8000638 <__aeabi_dmul>
 8018d28:	a357      	add	r3, pc, #348	; (adr r3, 8018e88 <__ieee754_pow+0x9e0>)
 8018d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d2e:	f7e7 facd 	bl	80002cc <__adddf3>
 8018d32:	4622      	mov	r2, r4
 8018d34:	462b      	mov	r3, r5
 8018d36:	f7e7 fc7f 	bl	8000638 <__aeabi_dmul>
 8018d3a:	a355      	add	r3, pc, #340	; (adr r3, 8018e90 <__ieee754_pow+0x9e8>)
 8018d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d40:	f7e7 fac2 	bl	80002c8 <__aeabi_dsub>
 8018d44:	4622      	mov	r2, r4
 8018d46:	462b      	mov	r3, r5
 8018d48:	f7e7 fc76 	bl	8000638 <__aeabi_dmul>
 8018d4c:	a352      	add	r3, pc, #328	; (adr r3, 8018e98 <__ieee754_pow+0x9f0>)
 8018d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d52:	f7e7 fabb 	bl	80002cc <__adddf3>
 8018d56:	4622      	mov	r2, r4
 8018d58:	462b      	mov	r3, r5
 8018d5a:	f7e7 fc6d 	bl	8000638 <__aeabi_dmul>
 8018d5e:	4602      	mov	r2, r0
 8018d60:	460b      	mov	r3, r1
 8018d62:	4640      	mov	r0, r8
 8018d64:	4649      	mov	r1, r9
 8018d66:	f7e7 faaf 	bl	80002c8 <__aeabi_dsub>
 8018d6a:	4604      	mov	r4, r0
 8018d6c:	460d      	mov	r5, r1
 8018d6e:	4602      	mov	r2, r0
 8018d70:	460b      	mov	r3, r1
 8018d72:	4640      	mov	r0, r8
 8018d74:	4649      	mov	r1, r9
 8018d76:	f7e7 fc5f 	bl	8000638 <__aeabi_dmul>
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8018d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018d84:	4620      	mov	r0, r4
 8018d86:	4629      	mov	r1, r5
 8018d88:	f7e7 fa9e 	bl	80002c8 <__aeabi_dsub>
 8018d8c:	4602      	mov	r2, r0
 8018d8e:	460b      	mov	r3, r1
 8018d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018d94:	f7e7 fd7a 	bl	800088c <__aeabi_ddiv>
 8018d98:	4632      	mov	r2, r6
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	460d      	mov	r5, r1
 8018d9e:	463b      	mov	r3, r7
 8018da0:	4640      	mov	r0, r8
 8018da2:	4649      	mov	r1, r9
 8018da4:	f7e7 fc48 	bl	8000638 <__aeabi_dmul>
 8018da8:	4632      	mov	r2, r6
 8018daa:	463b      	mov	r3, r7
 8018dac:	f7e7 fa8e 	bl	80002cc <__adddf3>
 8018db0:	4602      	mov	r2, r0
 8018db2:	460b      	mov	r3, r1
 8018db4:	4620      	mov	r0, r4
 8018db6:	4629      	mov	r1, r5
 8018db8:	f7e7 fa86 	bl	80002c8 <__aeabi_dsub>
 8018dbc:	4642      	mov	r2, r8
 8018dbe:	464b      	mov	r3, r9
 8018dc0:	f7e7 fa82 	bl	80002c8 <__aeabi_dsub>
 8018dc4:	4602      	mov	r2, r0
 8018dc6:	460b      	mov	r3, r1
 8018dc8:	2000      	movs	r0, #0
 8018dca:	4939      	ldr	r1, [pc, #228]	; (8018eb0 <__ieee754_pow+0xa08>)
 8018dcc:	f7e7 fa7c 	bl	80002c8 <__aeabi_dsub>
 8018dd0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8018dd4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018dd8:	4602      	mov	r2, r0
 8018dda:	460b      	mov	r3, r1
 8018ddc:	da2f      	bge.n	8018e3e <__ieee754_pow+0x996>
 8018dde:	4650      	mov	r0, sl
 8018de0:	ec43 2b10 	vmov	d0, r2, r3
 8018de4:	f000 fc80 	bl	80196e8 <scalbn>
 8018de8:	ec51 0b10 	vmov	r0, r1, d0
 8018dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018df0:	f7ff bbf1 	b.w	80185d6 <__ieee754_pow+0x12e>
 8018df4:	4b2f      	ldr	r3, [pc, #188]	; (8018eb4 <__ieee754_pow+0xa0c>)
 8018df6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018dfa:	429e      	cmp	r6, r3
 8018dfc:	f77f af0c 	ble.w	8018c18 <__ieee754_pow+0x770>
 8018e00:	4b2d      	ldr	r3, [pc, #180]	; (8018eb8 <__ieee754_pow+0xa10>)
 8018e02:	440b      	add	r3, r1
 8018e04:	4303      	orrs	r3, r0
 8018e06:	d00b      	beq.n	8018e20 <__ieee754_pow+0x978>
 8018e08:	a325      	add	r3, pc, #148	; (adr r3, 8018ea0 <__ieee754_pow+0x9f8>)
 8018e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018e12:	f7e7 fc11 	bl	8000638 <__aeabi_dmul>
 8018e16:	a322      	add	r3, pc, #136	; (adr r3, 8018ea0 <__ieee754_pow+0x9f8>)
 8018e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e1c:	f7ff bbdb 	b.w	80185d6 <__ieee754_pow+0x12e>
 8018e20:	4622      	mov	r2, r4
 8018e22:	462b      	mov	r3, r5
 8018e24:	f7e7 fa50 	bl	80002c8 <__aeabi_dsub>
 8018e28:	4642      	mov	r2, r8
 8018e2a:	464b      	mov	r3, r9
 8018e2c:	f7e7 fe8a 	bl	8000b44 <__aeabi_dcmpge>
 8018e30:	2800      	cmp	r0, #0
 8018e32:	f43f aef1 	beq.w	8018c18 <__ieee754_pow+0x770>
 8018e36:	e7e7      	b.n	8018e08 <__ieee754_pow+0x960>
 8018e38:	f04f 0a00 	mov.w	sl, #0
 8018e3c:	e718      	b.n	8018c70 <__ieee754_pow+0x7c8>
 8018e3e:	4621      	mov	r1, r4
 8018e40:	e7d4      	b.n	8018dec <__ieee754_pow+0x944>
 8018e42:	2000      	movs	r0, #0
 8018e44:	491a      	ldr	r1, [pc, #104]	; (8018eb0 <__ieee754_pow+0xa08>)
 8018e46:	f7ff bb8f 	b.w	8018568 <__ieee754_pow+0xc0>
 8018e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e4e:	f7ff bb8b 	b.w	8018568 <__ieee754_pow+0xc0>
 8018e52:	4630      	mov	r0, r6
 8018e54:	4639      	mov	r1, r7
 8018e56:	f7ff bb87 	b.w	8018568 <__ieee754_pow+0xc0>
 8018e5a:	4693      	mov	fp, r2
 8018e5c:	f7ff bb98 	b.w	8018590 <__ieee754_pow+0xe8>
 8018e60:	00000000 	.word	0x00000000
 8018e64:	3fe62e43 	.word	0x3fe62e43
 8018e68:	fefa39ef 	.word	0xfefa39ef
 8018e6c:	3fe62e42 	.word	0x3fe62e42
 8018e70:	0ca86c39 	.word	0x0ca86c39
 8018e74:	be205c61 	.word	0xbe205c61
 8018e78:	72bea4d0 	.word	0x72bea4d0
 8018e7c:	3e663769 	.word	0x3e663769
 8018e80:	c5d26bf1 	.word	0xc5d26bf1
 8018e84:	3ebbbd41 	.word	0x3ebbbd41
 8018e88:	af25de2c 	.word	0xaf25de2c
 8018e8c:	3f11566a 	.word	0x3f11566a
 8018e90:	16bebd93 	.word	0x16bebd93
 8018e94:	3f66c16c 	.word	0x3f66c16c
 8018e98:	5555553e 	.word	0x5555553e
 8018e9c:	3fc55555 	.word	0x3fc55555
 8018ea0:	c2f8f359 	.word	0xc2f8f359
 8018ea4:	01a56e1f 	.word	0x01a56e1f
 8018ea8:	3fe00000 	.word	0x3fe00000
 8018eac:	000fffff 	.word	0x000fffff
 8018eb0:	3ff00000 	.word	0x3ff00000
 8018eb4:	4090cbff 	.word	0x4090cbff
 8018eb8:	3f6f3400 	.word	0x3f6f3400
 8018ebc:	652b82fe 	.word	0x652b82fe
 8018ec0:	3c971547 	.word	0x3c971547

08018ec4 <__ieee754_sqrt>:
 8018ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec8:	4955      	ldr	r1, [pc, #340]	; (8019020 <__ieee754_sqrt+0x15c>)
 8018eca:	ec55 4b10 	vmov	r4, r5, d0
 8018ece:	43a9      	bics	r1, r5
 8018ed0:	462b      	mov	r3, r5
 8018ed2:	462a      	mov	r2, r5
 8018ed4:	d112      	bne.n	8018efc <__ieee754_sqrt+0x38>
 8018ed6:	ee10 2a10 	vmov	r2, s0
 8018eda:	ee10 0a10 	vmov	r0, s0
 8018ede:	4629      	mov	r1, r5
 8018ee0:	f7e7 fbaa 	bl	8000638 <__aeabi_dmul>
 8018ee4:	4602      	mov	r2, r0
 8018ee6:	460b      	mov	r3, r1
 8018ee8:	4620      	mov	r0, r4
 8018eea:	4629      	mov	r1, r5
 8018eec:	f7e7 f9ee 	bl	80002cc <__adddf3>
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	460d      	mov	r5, r1
 8018ef4:	ec45 4b10 	vmov	d0, r4, r5
 8018ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018efc:	2d00      	cmp	r5, #0
 8018efe:	ee10 0a10 	vmov	r0, s0
 8018f02:	4621      	mov	r1, r4
 8018f04:	dc0f      	bgt.n	8018f26 <__ieee754_sqrt+0x62>
 8018f06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018f0a:	4330      	orrs	r0, r6
 8018f0c:	d0f2      	beq.n	8018ef4 <__ieee754_sqrt+0x30>
 8018f0e:	b155      	cbz	r5, 8018f26 <__ieee754_sqrt+0x62>
 8018f10:	ee10 2a10 	vmov	r2, s0
 8018f14:	4620      	mov	r0, r4
 8018f16:	4629      	mov	r1, r5
 8018f18:	f7e7 f9d6 	bl	80002c8 <__aeabi_dsub>
 8018f1c:	4602      	mov	r2, r0
 8018f1e:	460b      	mov	r3, r1
 8018f20:	f7e7 fcb4 	bl	800088c <__aeabi_ddiv>
 8018f24:	e7e4      	b.n	8018ef0 <__ieee754_sqrt+0x2c>
 8018f26:	151b      	asrs	r3, r3, #20
 8018f28:	d073      	beq.n	8019012 <__ieee754_sqrt+0x14e>
 8018f2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018f2e:	07dd      	lsls	r5, r3, #31
 8018f30:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018f34:	bf48      	it	mi
 8018f36:	0fc8      	lsrmi	r0, r1, #31
 8018f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018f3c:	bf44      	itt	mi
 8018f3e:	0049      	lslmi	r1, r1, #1
 8018f40:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8018f44:	2500      	movs	r5, #0
 8018f46:	1058      	asrs	r0, r3, #1
 8018f48:	0fcb      	lsrs	r3, r1, #31
 8018f4a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018f4e:	0049      	lsls	r1, r1, #1
 8018f50:	2316      	movs	r3, #22
 8018f52:	462c      	mov	r4, r5
 8018f54:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8018f58:	19a7      	adds	r7, r4, r6
 8018f5a:	4297      	cmp	r7, r2
 8018f5c:	bfde      	ittt	le
 8018f5e:	19bc      	addle	r4, r7, r6
 8018f60:	1bd2      	suble	r2, r2, r7
 8018f62:	19ad      	addle	r5, r5, r6
 8018f64:	0fcf      	lsrs	r7, r1, #31
 8018f66:	3b01      	subs	r3, #1
 8018f68:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8018f6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018f70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018f74:	d1f0      	bne.n	8018f58 <__ieee754_sqrt+0x94>
 8018f76:	f04f 0c20 	mov.w	ip, #32
 8018f7a:	469e      	mov	lr, r3
 8018f7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018f80:	42a2      	cmp	r2, r4
 8018f82:	eb06 070e 	add.w	r7, r6, lr
 8018f86:	dc02      	bgt.n	8018f8e <__ieee754_sqrt+0xca>
 8018f88:	d112      	bne.n	8018fb0 <__ieee754_sqrt+0xec>
 8018f8a:	428f      	cmp	r7, r1
 8018f8c:	d810      	bhi.n	8018fb0 <__ieee754_sqrt+0xec>
 8018f8e:	2f00      	cmp	r7, #0
 8018f90:	eb07 0e06 	add.w	lr, r7, r6
 8018f94:	da42      	bge.n	801901c <__ieee754_sqrt+0x158>
 8018f96:	f1be 0f00 	cmp.w	lr, #0
 8018f9a:	db3f      	blt.n	801901c <__ieee754_sqrt+0x158>
 8018f9c:	f104 0801 	add.w	r8, r4, #1
 8018fa0:	1b12      	subs	r2, r2, r4
 8018fa2:	428f      	cmp	r7, r1
 8018fa4:	bf88      	it	hi
 8018fa6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018faa:	1bc9      	subs	r1, r1, r7
 8018fac:	4433      	add	r3, r6
 8018fae:	4644      	mov	r4, r8
 8018fb0:	0052      	lsls	r2, r2, #1
 8018fb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8018fb6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8018fba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018fbe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018fc2:	d1dd      	bne.n	8018f80 <__ieee754_sqrt+0xbc>
 8018fc4:	430a      	orrs	r2, r1
 8018fc6:	d006      	beq.n	8018fd6 <__ieee754_sqrt+0x112>
 8018fc8:	1c5c      	adds	r4, r3, #1
 8018fca:	bf13      	iteet	ne
 8018fcc:	3301      	addne	r3, #1
 8018fce:	3501      	addeq	r5, #1
 8018fd0:	4663      	moveq	r3, ip
 8018fd2:	f023 0301 	bicne.w	r3, r3, #1
 8018fd6:	106a      	asrs	r2, r5, #1
 8018fd8:	085b      	lsrs	r3, r3, #1
 8018fda:	07e9      	lsls	r1, r5, #31
 8018fdc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018fe0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8018fe4:	bf48      	it	mi
 8018fe6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8018fea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8018fee:	461c      	mov	r4, r3
 8018ff0:	e780      	b.n	8018ef4 <__ieee754_sqrt+0x30>
 8018ff2:	0aca      	lsrs	r2, r1, #11
 8018ff4:	3815      	subs	r0, #21
 8018ff6:	0549      	lsls	r1, r1, #21
 8018ff8:	2a00      	cmp	r2, #0
 8018ffa:	d0fa      	beq.n	8018ff2 <__ieee754_sqrt+0x12e>
 8018ffc:	02d6      	lsls	r6, r2, #11
 8018ffe:	d50a      	bpl.n	8019016 <__ieee754_sqrt+0x152>
 8019000:	f1c3 0420 	rsb	r4, r3, #32
 8019004:	fa21 f404 	lsr.w	r4, r1, r4
 8019008:	1e5d      	subs	r5, r3, #1
 801900a:	4099      	lsls	r1, r3
 801900c:	4322      	orrs	r2, r4
 801900e:	1b43      	subs	r3, r0, r5
 8019010:	e78b      	b.n	8018f2a <__ieee754_sqrt+0x66>
 8019012:	4618      	mov	r0, r3
 8019014:	e7f0      	b.n	8018ff8 <__ieee754_sqrt+0x134>
 8019016:	0052      	lsls	r2, r2, #1
 8019018:	3301      	adds	r3, #1
 801901a:	e7ef      	b.n	8018ffc <__ieee754_sqrt+0x138>
 801901c:	46a0      	mov	r8, r4
 801901e:	e7bf      	b.n	8018fa0 <__ieee754_sqrt+0xdc>
 8019020:	7ff00000 	.word	0x7ff00000

08019024 <__ieee754_powf>:
 8019024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019028:	ee10 5a90 	vmov	r5, s1
 801902c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8019030:	ed2d 8b02 	vpush	{d8}
 8019034:	eeb0 8a40 	vmov.f32	s16, s0
 8019038:	eef0 8a60 	vmov.f32	s17, s1
 801903c:	f000 8293 	beq.w	8019566 <__ieee754_powf+0x542>
 8019040:	ee10 8a10 	vmov	r8, s0
 8019044:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8019048:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801904c:	dc06      	bgt.n	801905c <__ieee754_powf+0x38>
 801904e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8019052:	dd0a      	ble.n	801906a <__ieee754_powf+0x46>
 8019054:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019058:	f000 8285 	beq.w	8019566 <__ieee754_powf+0x542>
 801905c:	ecbd 8b02 	vpop	{d8}
 8019060:	48d9      	ldr	r0, [pc, #868]	; (80193c8 <__ieee754_powf+0x3a4>)
 8019062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019066:	f000 bbc7 	b.w	80197f8 <nanf>
 801906a:	f1b8 0f00 	cmp.w	r8, #0
 801906e:	da1d      	bge.n	80190ac <__ieee754_powf+0x88>
 8019070:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8019074:	da2c      	bge.n	80190d0 <__ieee754_powf+0xac>
 8019076:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801907a:	db30      	blt.n	80190de <__ieee754_powf+0xba>
 801907c:	15fb      	asrs	r3, r7, #23
 801907e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8019082:	fa47 f603 	asr.w	r6, r7, r3
 8019086:	fa06 f303 	lsl.w	r3, r6, r3
 801908a:	42bb      	cmp	r3, r7
 801908c:	d127      	bne.n	80190de <__ieee754_powf+0xba>
 801908e:	f006 0601 	and.w	r6, r6, #1
 8019092:	f1c6 0602 	rsb	r6, r6, #2
 8019096:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801909a:	d122      	bne.n	80190e2 <__ieee754_powf+0xbe>
 801909c:	2d00      	cmp	r5, #0
 801909e:	f280 8268 	bge.w	8019572 <__ieee754_powf+0x54e>
 80190a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80190a6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80190aa:	e00d      	b.n	80190c8 <__ieee754_powf+0xa4>
 80190ac:	2600      	movs	r6, #0
 80190ae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80190b2:	d1f0      	bne.n	8019096 <__ieee754_powf+0x72>
 80190b4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80190b8:	f000 8255 	beq.w	8019566 <__ieee754_powf+0x542>
 80190bc:	dd0a      	ble.n	80190d4 <__ieee754_powf+0xb0>
 80190be:	2d00      	cmp	r5, #0
 80190c0:	f280 8254 	bge.w	801956c <__ieee754_powf+0x548>
 80190c4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80193cc <__ieee754_powf+0x3a8>
 80190c8:	ecbd 8b02 	vpop	{d8}
 80190cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190d0:	2602      	movs	r6, #2
 80190d2:	e7ec      	b.n	80190ae <__ieee754_powf+0x8a>
 80190d4:	2d00      	cmp	r5, #0
 80190d6:	daf5      	bge.n	80190c4 <__ieee754_powf+0xa0>
 80190d8:	eeb1 0a68 	vneg.f32	s0, s17
 80190dc:	e7f4      	b.n	80190c8 <__ieee754_powf+0xa4>
 80190de:	2600      	movs	r6, #0
 80190e0:	e7d9      	b.n	8019096 <__ieee754_powf+0x72>
 80190e2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80190e6:	d102      	bne.n	80190ee <__ieee754_powf+0xca>
 80190e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80190ec:	e7ec      	b.n	80190c8 <__ieee754_powf+0xa4>
 80190ee:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80190f2:	eeb0 0a48 	vmov.f32	s0, s16
 80190f6:	d108      	bne.n	801910a <__ieee754_powf+0xe6>
 80190f8:	f1b8 0f00 	cmp.w	r8, #0
 80190fc:	db05      	blt.n	801910a <__ieee754_powf+0xe6>
 80190fe:	ecbd 8b02 	vpop	{d8}
 8019102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019106:	f000 ba4d 	b.w	80195a4 <__ieee754_sqrtf>
 801910a:	f000 fb63 	bl	80197d4 <fabsf>
 801910e:	b124      	cbz	r4, 801911a <__ieee754_powf+0xf6>
 8019110:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8019114:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019118:	d117      	bne.n	801914a <__ieee754_powf+0x126>
 801911a:	2d00      	cmp	r5, #0
 801911c:	bfbc      	itt	lt
 801911e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8019122:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8019126:	f1b8 0f00 	cmp.w	r8, #0
 801912a:	dacd      	bge.n	80190c8 <__ieee754_powf+0xa4>
 801912c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8019130:	ea54 0306 	orrs.w	r3, r4, r6
 8019134:	d104      	bne.n	8019140 <__ieee754_powf+0x11c>
 8019136:	ee70 7a40 	vsub.f32	s15, s0, s0
 801913a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801913e:	e7c3      	b.n	80190c8 <__ieee754_powf+0xa4>
 8019140:	2e01      	cmp	r6, #1
 8019142:	d1c1      	bne.n	80190c8 <__ieee754_powf+0xa4>
 8019144:	eeb1 0a40 	vneg.f32	s0, s0
 8019148:	e7be      	b.n	80190c8 <__ieee754_powf+0xa4>
 801914a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801914e:	3801      	subs	r0, #1
 8019150:	ea56 0300 	orrs.w	r3, r6, r0
 8019154:	d104      	bne.n	8019160 <__ieee754_powf+0x13c>
 8019156:	ee38 8a48 	vsub.f32	s16, s16, s16
 801915a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801915e:	e7b3      	b.n	80190c8 <__ieee754_powf+0xa4>
 8019160:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8019164:	dd6d      	ble.n	8019242 <__ieee754_powf+0x21e>
 8019166:	4b9a      	ldr	r3, [pc, #616]	; (80193d0 <__ieee754_powf+0x3ac>)
 8019168:	429c      	cmp	r4, r3
 801916a:	dc06      	bgt.n	801917a <__ieee754_powf+0x156>
 801916c:	2d00      	cmp	r5, #0
 801916e:	daa9      	bge.n	80190c4 <__ieee754_powf+0xa0>
 8019170:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80193d4 <__ieee754_powf+0x3b0>
 8019174:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019178:	e7a6      	b.n	80190c8 <__ieee754_powf+0xa4>
 801917a:	4b97      	ldr	r3, [pc, #604]	; (80193d8 <__ieee754_powf+0x3b4>)
 801917c:	429c      	cmp	r4, r3
 801917e:	dd02      	ble.n	8019186 <__ieee754_powf+0x162>
 8019180:	2d00      	cmp	r5, #0
 8019182:	dcf5      	bgt.n	8019170 <__ieee754_powf+0x14c>
 8019184:	e79e      	b.n	80190c4 <__ieee754_powf+0xa0>
 8019186:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801918a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801918e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80193dc <__ieee754_powf+0x3b8>
 8019192:	eef1 6a40 	vneg.f32	s13, s0
 8019196:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801919a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801919e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80191a2:	eee7 7a40 	vfms.f32	s15, s14, s0
 80191a6:	ee60 0a00 	vmul.f32	s1, s0, s0
 80191aa:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80193e0 <__ieee754_powf+0x3bc>
 80191ae:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80191b2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80193e4 <__ieee754_powf+0x3c0>
 80191b6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80191ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80191be:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80193e8 <__ieee754_powf+0x3c4>
 80191c2:	eeb0 6a67 	vmov.f32	s12, s15
 80191c6:	eea0 6a07 	vfma.f32	s12, s0, s14
 80191ca:	ee16 3a10 	vmov	r3, s12
 80191ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80191d2:	f023 030f 	bic.w	r3, r3, #15
 80191d6:	ee00 3a90 	vmov	s1, r3
 80191da:	eee6 0a87 	vfma.f32	s1, s13, s14
 80191de:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80191e2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80191e6:	f025 050f 	bic.w	r5, r5, #15
 80191ea:	ee07 5a10 	vmov	s14, r5
 80191ee:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80191f2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80191f6:	ee07 3a90 	vmov	s15, r3
 80191fa:	eee7 0a27 	vfma.f32	s1, s14, s15
 80191fe:	3e01      	subs	r6, #1
 8019200:	ea56 0200 	orrs.w	r2, r6, r0
 8019204:	ee07 5a10 	vmov	s14, r5
 8019208:	ee67 7a87 	vmul.f32	s15, s15, s14
 801920c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8019210:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019214:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8019218:	ee17 4a10 	vmov	r4, s14
 801921c:	bf08      	it	eq
 801921e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8019222:	2c00      	cmp	r4, #0
 8019224:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019228:	f340 8184 	ble.w	8019534 <__ieee754_powf+0x510>
 801922c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8019230:	f340 80fc 	ble.w	801942c <__ieee754_powf+0x408>
 8019234:	eddf 7a67 	vldr	s15, [pc, #412]	; 80193d4 <__ieee754_powf+0x3b0>
 8019238:	ee28 0a27 	vmul.f32	s0, s16, s15
 801923c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019240:	e742      	b.n	80190c8 <__ieee754_powf+0xa4>
 8019242:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8019246:	bfbf      	itttt	lt
 8019248:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80193ec <__ieee754_powf+0x3c8>
 801924c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019250:	f06f 0217 	mvnlt.w	r2, #23
 8019254:	ee17 4a90 	vmovlt	r4, s15
 8019258:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801925c:	bfa8      	it	ge
 801925e:	2200      	movge	r2, #0
 8019260:	3b7f      	subs	r3, #127	; 0x7f
 8019262:	4413      	add	r3, r2
 8019264:	4a62      	ldr	r2, [pc, #392]	; (80193f0 <__ieee754_powf+0x3cc>)
 8019266:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801926a:	4294      	cmp	r4, r2
 801926c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8019270:	dd06      	ble.n	8019280 <__ieee754_powf+0x25c>
 8019272:	4a60      	ldr	r2, [pc, #384]	; (80193f4 <__ieee754_powf+0x3d0>)
 8019274:	4294      	cmp	r4, r2
 8019276:	f340 80a5 	ble.w	80193c4 <__ieee754_powf+0x3a0>
 801927a:	3301      	adds	r3, #1
 801927c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019280:	2400      	movs	r4, #0
 8019282:	4a5d      	ldr	r2, [pc, #372]	; (80193f8 <__ieee754_powf+0x3d4>)
 8019284:	00a7      	lsls	r7, r4, #2
 8019286:	443a      	add	r2, r7
 8019288:	ee07 1a90 	vmov	s15, r1
 801928c:	ed92 7a00 	vldr	s14, [r2]
 8019290:	4a5a      	ldr	r2, [pc, #360]	; (80193fc <__ieee754_powf+0x3d8>)
 8019292:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019296:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801929a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801929e:	1049      	asrs	r1, r1, #1
 80192a0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80192a4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80192a8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80192ac:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80192b0:	ee06 1a10 	vmov	s12, r1
 80192b4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 80192b8:	ee14 ca90 	vmov	ip, s9
 80192bc:	ea02 0c0c 	and.w	ip, r2, ip
 80192c0:	ee05 ca10 	vmov	s10, ip
 80192c4:	eeb1 4a45 	vneg.f32	s8, s10
 80192c8:	eee4 5a06 	vfma.f32	s11, s8, s12
 80192cc:	ee36 6a47 	vsub.f32	s12, s12, s14
 80192d0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019400 <__ieee754_powf+0x3dc>
 80192d4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80192d8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80192dc:	eee4 5a06 	vfma.f32	s11, s8, s12
 80192e0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80192e4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80192e8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019404 <__ieee754_powf+0x3e0>
 80192ec:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80192f0:	eddf 5a45 	vldr	s11, [pc, #276]	; 8019408 <__ieee754_powf+0x3e4>
 80192f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80192f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80193dc <__ieee754_powf+0x3b8>
 80192fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019300:	eddf 5a42 	vldr	s11, [pc, #264]	; 801940c <__ieee754_powf+0x3e8>
 8019304:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019308:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019410 <__ieee754_powf+0x3ec>
 801930c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8019310:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019314:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019318:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801931c:	eef0 7a65 	vmov.f32	s15, s11
 8019320:	eee3 6a87 	vfma.f32	s13, s7, s14
 8019324:	eee5 7a05 	vfma.f32	s15, s10, s10
 8019328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801932c:	ee17 1a90 	vmov	r1, s15
 8019330:	4011      	ands	r1, r2
 8019332:	ee07 1a90 	vmov	s15, r1
 8019336:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801933a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8019414 <__ieee754_powf+0x3f0>
 801933e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8019342:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019346:	ee27 7a24 	vmul.f32	s14, s14, s9
 801934a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801934e:	eeb0 6a47 	vmov.f32	s12, s14
 8019352:	eea5 6a27 	vfma.f32	s12, s10, s15
 8019356:	ee16 1a10 	vmov	r1, s12
 801935a:	4011      	ands	r1, r2
 801935c:	ee06 1a90 	vmov	s13, r1
 8019360:	eee4 6a27 	vfma.f32	s13, s8, s15
 8019364:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019418 <__ieee754_powf+0x3f4>
 8019368:	ee37 7a66 	vsub.f32	s14, s14, s13
 801936c:	ee06 1a10 	vmov	s12, r1
 8019370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019374:	eddf 7a29 	vldr	s15, [pc, #164]	; 801941c <__ieee754_powf+0x3f8>
 8019378:	4929      	ldr	r1, [pc, #164]	; (8019420 <__ieee754_powf+0x3fc>)
 801937a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801937e:	4439      	add	r1, r7
 8019380:	edd1 7a00 	vldr	s15, [r1]
 8019384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019388:	ee07 3a90 	vmov	s15, r3
 801938c:	eef0 0a47 	vmov.f32	s1, s14
 8019390:	4b24      	ldr	r3, [pc, #144]	; (8019424 <__ieee754_powf+0x400>)
 8019392:	eee6 0a25 	vfma.f32	s1, s12, s11
 8019396:	443b      	add	r3, r7
 8019398:	ed93 5a00 	vldr	s10, [r3]
 801939c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80193a0:	ee70 0a85 	vadd.f32	s1, s1, s10
 80193a4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 80193a8:	ee17 3a90 	vmov	r3, s15
 80193ac:	4013      	ands	r3, r2
 80193ae:	ee07 3a90 	vmov	s15, r3
 80193b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80193b6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80193ba:	eee6 7a65 	vfms.f32	s15, s12, s11
 80193be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193c2:	e70e      	b.n	80191e2 <__ieee754_powf+0x1be>
 80193c4:	2401      	movs	r4, #1
 80193c6:	e75c      	b.n	8019282 <__ieee754_powf+0x25e>
 80193c8:	0801a195 	.word	0x0801a195
 80193cc:	00000000 	.word	0x00000000
 80193d0:	3f7ffff7 	.word	0x3f7ffff7
 80193d4:	7149f2ca 	.word	0x7149f2ca
 80193d8:	3f800007 	.word	0x3f800007
 80193dc:	3eaaaaab 	.word	0x3eaaaaab
 80193e0:	36eca570 	.word	0x36eca570
 80193e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80193e8:	3fb8aa00 	.word	0x3fb8aa00
 80193ec:	4b800000 	.word	0x4b800000
 80193f0:	001cc471 	.word	0x001cc471
 80193f4:	005db3d6 	.word	0x005db3d6
 80193f8:	0801a208 	.word	0x0801a208
 80193fc:	fffff000 	.word	0xfffff000
 8019400:	3e6c3255 	.word	0x3e6c3255
 8019404:	3e53f142 	.word	0x3e53f142
 8019408:	3e8ba305 	.word	0x3e8ba305
 801940c:	3edb6db7 	.word	0x3edb6db7
 8019410:	3f19999a 	.word	0x3f19999a
 8019414:	3f763800 	.word	0x3f763800
 8019418:	3f76384f 	.word	0x3f76384f
 801941c:	369dc3a0 	.word	0x369dc3a0
 8019420:	0801a218 	.word	0x0801a218
 8019424:	0801a210 	.word	0x0801a210
 8019428:	3338aa3c 	.word	0x3338aa3c
 801942c:	f040 8092 	bne.w	8019554 <__ieee754_powf+0x530>
 8019430:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019428 <__ieee754_powf+0x404>
 8019434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019438:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801943c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019444:	f73f aef6 	bgt.w	8019234 <__ieee754_powf+0x210>
 8019448:	15db      	asrs	r3, r3, #23
 801944a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801944e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019452:	4103      	asrs	r3, r0
 8019454:	4423      	add	r3, r4
 8019456:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801945a:	4947      	ldr	r1, [pc, #284]	; (8019578 <__ieee754_powf+0x554>)
 801945c:	3a7f      	subs	r2, #127	; 0x7f
 801945e:	4111      	asrs	r1, r2
 8019460:	ea23 0101 	bic.w	r1, r3, r1
 8019464:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019468:	ee07 1a10 	vmov	s14, r1
 801946c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019470:	f1c2 0217 	rsb	r2, r2, #23
 8019474:	4110      	asrs	r0, r2
 8019476:	2c00      	cmp	r4, #0
 8019478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801947c:	bfb8      	it	lt
 801947e:	4240      	neglt	r0, r0
 8019480:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019484:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801957c <__ieee754_powf+0x558>
 8019488:	ee17 3a10 	vmov	r3, s14
 801948c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019490:	f023 030f 	bic.w	r3, r3, #15
 8019494:	ee07 3a10 	vmov	s14, r3
 8019498:	ee77 7a67 	vsub.f32	s15, s14, s15
 801949c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80194a0:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019580 <__ieee754_powf+0x55c>
 80194a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80194a8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80194ac:	eddf 6a35 	vldr	s13, [pc, #212]	; 8019584 <__ieee754_powf+0x560>
 80194b0:	eeb0 0a67 	vmov.f32	s0, s15
 80194b4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80194b8:	eeb0 6a40 	vmov.f32	s12, s0
 80194bc:	eea7 6a66 	vfms.f32	s12, s14, s13
 80194c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80194c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80194c8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019588 <__ieee754_powf+0x564>
 80194cc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801958c <__ieee754_powf+0x568>
 80194d0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80194d4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019590 <__ieee754_powf+0x56c>
 80194d8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80194dc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019594 <__ieee754_powf+0x570>
 80194e0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80194e4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019598 <__ieee754_powf+0x574>
 80194e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80194ec:	eeb0 6a40 	vmov.f32	s12, s0
 80194f0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80194f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80194f8:	eeb0 7a46 	vmov.f32	s14, s12
 80194fc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019500:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019504:	eee0 7a27 	vfma.f32	s15, s0, s15
 8019508:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801950c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019510:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019514:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019518:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801951c:	ee10 3a10 	vmov	r3, s0
 8019520:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019528:	da1a      	bge.n	8019560 <__ieee754_powf+0x53c>
 801952a:	f000 f9c5 	bl	80198b8 <scalbnf>
 801952e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019532:	e5c9      	b.n	80190c8 <__ieee754_powf+0xa4>
 8019534:	4a19      	ldr	r2, [pc, #100]	; (801959c <__ieee754_powf+0x578>)
 8019536:	4293      	cmp	r3, r2
 8019538:	dd02      	ble.n	8019540 <__ieee754_powf+0x51c>
 801953a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80195a0 <__ieee754_powf+0x57c>
 801953e:	e67b      	b.n	8019238 <__ieee754_powf+0x214>
 8019540:	d108      	bne.n	8019554 <__ieee754_powf+0x530>
 8019542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019546:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954e:	f6ff af7b 	blt.w	8019448 <__ieee754_powf+0x424>
 8019552:	e7f2      	b.n	801953a <__ieee754_powf+0x516>
 8019554:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019558:	f73f af76 	bgt.w	8019448 <__ieee754_powf+0x424>
 801955c:	2000      	movs	r0, #0
 801955e:	e78f      	b.n	8019480 <__ieee754_powf+0x45c>
 8019560:	ee00 3a10 	vmov	s0, r3
 8019564:	e7e3      	b.n	801952e <__ieee754_powf+0x50a>
 8019566:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801956a:	e5ad      	b.n	80190c8 <__ieee754_powf+0xa4>
 801956c:	eeb0 0a68 	vmov.f32	s0, s17
 8019570:	e5aa      	b.n	80190c8 <__ieee754_powf+0xa4>
 8019572:	eeb0 0a48 	vmov.f32	s0, s16
 8019576:	e5a7      	b.n	80190c8 <__ieee754_powf+0xa4>
 8019578:	007fffff 	.word	0x007fffff
 801957c:	3f317218 	.word	0x3f317218
 8019580:	35bfbe8c 	.word	0x35bfbe8c
 8019584:	3f317200 	.word	0x3f317200
 8019588:	3331bb4c 	.word	0x3331bb4c
 801958c:	b5ddea0e 	.word	0xb5ddea0e
 8019590:	388ab355 	.word	0x388ab355
 8019594:	bb360b61 	.word	0xbb360b61
 8019598:	3e2aaaab 	.word	0x3e2aaaab
 801959c:	43160000 	.word	0x43160000
 80195a0:	0da24260 	.word	0x0da24260

080195a4 <__ieee754_sqrtf>:
 80195a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80195a8:	4770      	bx	lr

080195aa <fabs>:
 80195aa:	ec51 0b10 	vmov	r0, r1, d0
 80195ae:	ee10 2a10 	vmov	r2, s0
 80195b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80195b6:	ec43 2b10 	vmov	d0, r2, r3
 80195ba:	4770      	bx	lr

080195bc <finite>:
 80195bc:	ee10 3a90 	vmov	r3, s1
 80195c0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80195c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80195c8:	0fc0      	lsrs	r0, r0, #31
 80195ca:	4770      	bx	lr

080195cc <matherr>:
 80195cc:	2000      	movs	r0, #0
 80195ce:	4770      	bx	lr

080195d0 <nan>:
 80195d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80195d8 <nan+0x8>
 80195d4:	4770      	bx	lr
 80195d6:	bf00      	nop
 80195d8:	00000000 	.word	0x00000000
 80195dc:	7ff80000 	.word	0x7ff80000

080195e0 <rint>:
 80195e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195e2:	ec51 0b10 	vmov	r0, r1, d0
 80195e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80195ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80195ee:	2e13      	cmp	r6, #19
 80195f0:	460b      	mov	r3, r1
 80195f2:	ee10 4a10 	vmov	r4, s0
 80195f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80195fa:	dc56      	bgt.n	80196aa <rint+0xca>
 80195fc:	2e00      	cmp	r6, #0
 80195fe:	da2b      	bge.n	8019658 <rint+0x78>
 8019600:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019604:	4302      	orrs	r2, r0
 8019606:	d023      	beq.n	8019650 <rint+0x70>
 8019608:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801960c:	4302      	orrs	r2, r0
 801960e:	4254      	negs	r4, r2
 8019610:	4314      	orrs	r4, r2
 8019612:	0c4b      	lsrs	r3, r1, #17
 8019614:	0b24      	lsrs	r4, r4, #12
 8019616:	045b      	lsls	r3, r3, #17
 8019618:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801961c:	ea44 0103 	orr.w	r1, r4, r3
 8019620:	460b      	mov	r3, r1
 8019622:	492f      	ldr	r1, [pc, #188]	; (80196e0 <rint+0x100>)
 8019624:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8019628:	e9d1 6700 	ldrd	r6, r7, [r1]
 801962c:	4602      	mov	r2, r0
 801962e:	4639      	mov	r1, r7
 8019630:	4630      	mov	r0, r6
 8019632:	f7e6 fe4b 	bl	80002cc <__adddf3>
 8019636:	e9cd 0100 	strd	r0, r1, [sp]
 801963a:	463b      	mov	r3, r7
 801963c:	4632      	mov	r2, r6
 801963e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019642:	f7e6 fe41 	bl	80002c8 <__aeabi_dsub>
 8019646:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801964a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801964e:	4639      	mov	r1, r7
 8019650:	ec41 0b10 	vmov	d0, r0, r1
 8019654:	b003      	add	sp, #12
 8019656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019658:	4a22      	ldr	r2, [pc, #136]	; (80196e4 <rint+0x104>)
 801965a:	4132      	asrs	r2, r6
 801965c:	ea01 0702 	and.w	r7, r1, r2
 8019660:	4307      	orrs	r7, r0
 8019662:	d0f5      	beq.n	8019650 <rint+0x70>
 8019664:	0852      	lsrs	r2, r2, #1
 8019666:	4011      	ands	r1, r2
 8019668:	430c      	orrs	r4, r1
 801966a:	d00b      	beq.n	8019684 <rint+0xa4>
 801966c:	ea23 0202 	bic.w	r2, r3, r2
 8019670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019674:	2e13      	cmp	r6, #19
 8019676:	fa43 f306 	asr.w	r3, r3, r6
 801967a:	bf0c      	ite	eq
 801967c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019680:	2400      	movne	r4, #0
 8019682:	4313      	orrs	r3, r2
 8019684:	4916      	ldr	r1, [pc, #88]	; (80196e0 <rint+0x100>)
 8019686:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801968a:	4622      	mov	r2, r4
 801968c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019690:	4620      	mov	r0, r4
 8019692:	4629      	mov	r1, r5
 8019694:	f7e6 fe1a 	bl	80002cc <__adddf3>
 8019698:	e9cd 0100 	strd	r0, r1, [sp]
 801969c:	4622      	mov	r2, r4
 801969e:	462b      	mov	r3, r5
 80196a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80196a4:	f7e6 fe10 	bl	80002c8 <__aeabi_dsub>
 80196a8:	e7d2      	b.n	8019650 <rint+0x70>
 80196aa:	2e33      	cmp	r6, #51	; 0x33
 80196ac:	dd07      	ble.n	80196be <rint+0xde>
 80196ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80196b2:	d1cd      	bne.n	8019650 <rint+0x70>
 80196b4:	ee10 2a10 	vmov	r2, s0
 80196b8:	f7e6 fe08 	bl	80002cc <__adddf3>
 80196bc:	e7c8      	b.n	8019650 <rint+0x70>
 80196be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80196c2:	f04f 32ff 	mov.w	r2, #4294967295
 80196c6:	40f2      	lsrs	r2, r6
 80196c8:	4210      	tst	r0, r2
 80196ca:	d0c1      	beq.n	8019650 <rint+0x70>
 80196cc:	0852      	lsrs	r2, r2, #1
 80196ce:	4210      	tst	r0, r2
 80196d0:	bf1f      	itttt	ne
 80196d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80196d6:	ea20 0202 	bicne.w	r2, r0, r2
 80196da:	4134      	asrne	r4, r6
 80196dc:	4314      	orrne	r4, r2
 80196de:	e7d1      	b.n	8019684 <rint+0xa4>
 80196e0:	0801a220 	.word	0x0801a220
 80196e4:	000fffff 	.word	0x000fffff

080196e8 <scalbn>:
 80196e8:	b570      	push	{r4, r5, r6, lr}
 80196ea:	ec55 4b10 	vmov	r4, r5, d0
 80196ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80196f2:	4606      	mov	r6, r0
 80196f4:	462b      	mov	r3, r5
 80196f6:	b9aa      	cbnz	r2, 8019724 <scalbn+0x3c>
 80196f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80196fc:	4323      	orrs	r3, r4
 80196fe:	d03b      	beq.n	8019778 <scalbn+0x90>
 8019700:	4b31      	ldr	r3, [pc, #196]	; (80197c8 <scalbn+0xe0>)
 8019702:	4629      	mov	r1, r5
 8019704:	2200      	movs	r2, #0
 8019706:	ee10 0a10 	vmov	r0, s0
 801970a:	f7e6 ff95 	bl	8000638 <__aeabi_dmul>
 801970e:	4b2f      	ldr	r3, [pc, #188]	; (80197cc <scalbn+0xe4>)
 8019710:	429e      	cmp	r6, r3
 8019712:	4604      	mov	r4, r0
 8019714:	460d      	mov	r5, r1
 8019716:	da12      	bge.n	801973e <scalbn+0x56>
 8019718:	a327      	add	r3, pc, #156	; (adr r3, 80197b8 <scalbn+0xd0>)
 801971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801971e:	f7e6 ff8b 	bl	8000638 <__aeabi_dmul>
 8019722:	e009      	b.n	8019738 <scalbn+0x50>
 8019724:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019728:	428a      	cmp	r2, r1
 801972a:	d10c      	bne.n	8019746 <scalbn+0x5e>
 801972c:	ee10 2a10 	vmov	r2, s0
 8019730:	4620      	mov	r0, r4
 8019732:	4629      	mov	r1, r5
 8019734:	f7e6 fdca 	bl	80002cc <__adddf3>
 8019738:	4604      	mov	r4, r0
 801973a:	460d      	mov	r5, r1
 801973c:	e01c      	b.n	8019778 <scalbn+0x90>
 801973e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019742:	460b      	mov	r3, r1
 8019744:	3a36      	subs	r2, #54	; 0x36
 8019746:	4432      	add	r2, r6
 8019748:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801974c:	428a      	cmp	r2, r1
 801974e:	dd0b      	ble.n	8019768 <scalbn+0x80>
 8019750:	ec45 4b11 	vmov	d1, r4, r5
 8019754:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80197c0 <scalbn+0xd8>
 8019758:	f000 f90e 	bl	8019978 <copysign>
 801975c:	a318      	add	r3, pc, #96	; (adr r3, 80197c0 <scalbn+0xd8>)
 801975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019762:	ec51 0b10 	vmov	r0, r1, d0
 8019766:	e7da      	b.n	801971e <scalbn+0x36>
 8019768:	2a00      	cmp	r2, #0
 801976a:	dd08      	ble.n	801977e <scalbn+0x96>
 801976c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019770:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019774:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019778:	ec45 4b10 	vmov	d0, r4, r5
 801977c:	bd70      	pop	{r4, r5, r6, pc}
 801977e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019782:	da0d      	bge.n	80197a0 <scalbn+0xb8>
 8019784:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019788:	429e      	cmp	r6, r3
 801978a:	ec45 4b11 	vmov	d1, r4, r5
 801978e:	dce1      	bgt.n	8019754 <scalbn+0x6c>
 8019790:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80197b8 <scalbn+0xd0>
 8019794:	f000 f8f0 	bl	8019978 <copysign>
 8019798:	a307      	add	r3, pc, #28	; (adr r3, 80197b8 <scalbn+0xd0>)
 801979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801979e:	e7e0      	b.n	8019762 <scalbn+0x7a>
 80197a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80197a4:	3236      	adds	r2, #54	; 0x36
 80197a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80197aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80197ae:	4620      	mov	r0, r4
 80197b0:	4629      	mov	r1, r5
 80197b2:	2200      	movs	r2, #0
 80197b4:	4b06      	ldr	r3, [pc, #24]	; (80197d0 <scalbn+0xe8>)
 80197b6:	e7b2      	b.n	801971e <scalbn+0x36>
 80197b8:	c2f8f359 	.word	0xc2f8f359
 80197bc:	01a56e1f 	.word	0x01a56e1f
 80197c0:	8800759c 	.word	0x8800759c
 80197c4:	7e37e43c 	.word	0x7e37e43c
 80197c8:	43500000 	.word	0x43500000
 80197cc:	ffff3cb0 	.word	0xffff3cb0
 80197d0:	3c900000 	.word	0x3c900000

080197d4 <fabsf>:
 80197d4:	ee10 3a10 	vmov	r3, s0
 80197d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80197dc:	ee00 3a10 	vmov	s0, r3
 80197e0:	4770      	bx	lr

080197e2 <finitef>:
 80197e2:	ee10 3a10 	vmov	r3, s0
 80197e6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80197ea:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80197ee:	bfac      	ite	ge
 80197f0:	2000      	movge	r0, #0
 80197f2:	2001      	movlt	r0, #1
 80197f4:	4770      	bx	lr
	...

080197f8 <nanf>:
 80197f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019800 <nanf+0x8>
 80197fc:	4770      	bx	lr
 80197fe:	bf00      	nop
 8019800:	7fc00000 	.word	0x7fc00000

08019804 <rintf>:
 8019804:	b513      	push	{r0, r1, r4, lr}
 8019806:	ee10 1a10 	vmov	r1, s0
 801980a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801980e:	0ddc      	lsrs	r4, r3, #23
 8019810:	3c7f      	subs	r4, #127	; 0x7f
 8019812:	2c16      	cmp	r4, #22
 8019814:	dc46      	bgt.n	80198a4 <rintf+0xa0>
 8019816:	b32b      	cbz	r3, 8019864 <rintf+0x60>
 8019818:	2c00      	cmp	r4, #0
 801981a:	ee10 2a10 	vmov	r2, s0
 801981e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8019822:	da21      	bge.n	8019868 <rintf+0x64>
 8019824:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8019828:	425b      	negs	r3, r3
 801982a:	4a21      	ldr	r2, [pc, #132]	; (80198b0 <rintf+0xac>)
 801982c:	0a5b      	lsrs	r3, r3, #9
 801982e:	0d09      	lsrs	r1, r1, #20
 8019830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019834:	0509      	lsls	r1, r1, #20
 8019836:	430b      	orrs	r3, r1
 8019838:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801983c:	ee07 3a90 	vmov	s15, r3
 8019840:	edd2 6a00 	vldr	s13, [r2]
 8019844:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019848:	ed8d 7a01 	vstr	s14, [sp, #4]
 801984c:	eddd 7a01 	vldr	s15, [sp, #4]
 8019850:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019854:	ee17 3a90 	vmov	r3, s15
 8019858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801985c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019860:	ee00 3a10 	vmov	s0, r3
 8019864:	b002      	add	sp, #8
 8019866:	bd10      	pop	{r4, pc}
 8019868:	4b12      	ldr	r3, [pc, #72]	; (80198b4 <rintf+0xb0>)
 801986a:	4123      	asrs	r3, r4
 801986c:	4219      	tst	r1, r3
 801986e:	d0f9      	beq.n	8019864 <rintf+0x60>
 8019870:	085b      	lsrs	r3, r3, #1
 8019872:	4219      	tst	r1, r3
 8019874:	d006      	beq.n	8019884 <rintf+0x80>
 8019876:	ea21 0203 	bic.w	r2, r1, r3
 801987a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801987e:	fa43 f404 	asr.w	r4, r3, r4
 8019882:	4322      	orrs	r2, r4
 8019884:	4b0a      	ldr	r3, [pc, #40]	; (80198b0 <rintf+0xac>)
 8019886:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801988a:	ed90 7a00 	vldr	s14, [r0]
 801988e:	ee07 2a90 	vmov	s15, r2
 8019892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019896:	edcd 7a01 	vstr	s15, [sp, #4]
 801989a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801989e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80198a2:	e7df      	b.n	8019864 <rintf+0x60>
 80198a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80198a8:	d3dc      	bcc.n	8019864 <rintf+0x60>
 80198aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80198ae:	e7d9      	b.n	8019864 <rintf+0x60>
 80198b0:	0801a230 	.word	0x0801a230
 80198b4:	007fffff 	.word	0x007fffff

080198b8 <scalbnf>:
 80198b8:	b508      	push	{r3, lr}
 80198ba:	ee10 2a10 	vmov	r2, s0
 80198be:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80198c2:	ed2d 8b02 	vpush	{d8}
 80198c6:	eef0 0a40 	vmov.f32	s1, s0
 80198ca:	d004      	beq.n	80198d6 <scalbnf+0x1e>
 80198cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80198d0:	d306      	bcc.n	80198e0 <scalbnf+0x28>
 80198d2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80198d6:	ecbd 8b02 	vpop	{d8}
 80198da:	eeb0 0a60 	vmov.f32	s0, s1
 80198de:	bd08      	pop	{r3, pc}
 80198e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80198e4:	d21c      	bcs.n	8019920 <scalbnf+0x68>
 80198e6:	4b1f      	ldr	r3, [pc, #124]	; (8019964 <scalbnf+0xac>)
 80198e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019968 <scalbnf+0xb0>
 80198ec:	4298      	cmp	r0, r3
 80198ee:	ee60 0a27 	vmul.f32	s1, s0, s15
 80198f2:	db10      	blt.n	8019916 <scalbnf+0x5e>
 80198f4:	ee10 2a90 	vmov	r2, s1
 80198f8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80198fc:	3b19      	subs	r3, #25
 80198fe:	4403      	add	r3, r0
 8019900:	2bfe      	cmp	r3, #254	; 0xfe
 8019902:	dd0f      	ble.n	8019924 <scalbnf+0x6c>
 8019904:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801996c <scalbnf+0xb4>
 8019908:	eeb0 0a48 	vmov.f32	s0, s16
 801990c:	f000 f843 	bl	8019996 <copysignf>
 8019910:	ee60 0a08 	vmul.f32	s1, s0, s16
 8019914:	e7df      	b.n	80198d6 <scalbnf+0x1e>
 8019916:	eddf 7a16 	vldr	s15, [pc, #88]	; 8019970 <scalbnf+0xb8>
 801991a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801991e:	e7da      	b.n	80198d6 <scalbnf+0x1e>
 8019920:	0ddb      	lsrs	r3, r3, #23
 8019922:	e7ec      	b.n	80198fe <scalbnf+0x46>
 8019924:	2b00      	cmp	r3, #0
 8019926:	dd06      	ble.n	8019936 <scalbnf+0x7e>
 8019928:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801992c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019930:	ee00 3a90 	vmov	s1, r3
 8019934:	e7cf      	b.n	80198d6 <scalbnf+0x1e>
 8019936:	f113 0f16 	cmn.w	r3, #22
 801993a:	da06      	bge.n	801994a <scalbnf+0x92>
 801993c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019940:	4298      	cmp	r0, r3
 8019942:	dcdf      	bgt.n	8019904 <scalbnf+0x4c>
 8019944:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8019970 <scalbnf+0xb8>
 8019948:	e7de      	b.n	8019908 <scalbnf+0x50>
 801994a:	3319      	adds	r3, #25
 801994c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019950:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019954:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019974 <scalbnf+0xbc>
 8019958:	ee07 3a10 	vmov	s14, r3
 801995c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8019960:	e7b9      	b.n	80198d6 <scalbnf+0x1e>
 8019962:	bf00      	nop
 8019964:	ffff3cb0 	.word	0xffff3cb0
 8019968:	4c000000 	.word	0x4c000000
 801996c:	7149f2ca 	.word	0x7149f2ca
 8019970:	0da24260 	.word	0x0da24260
 8019974:	33000000 	.word	0x33000000

08019978 <copysign>:
 8019978:	ec51 0b10 	vmov	r0, r1, d0
 801997c:	ee11 0a90 	vmov	r0, s3
 8019980:	ee10 2a10 	vmov	r2, s0
 8019984:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019988:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801998c:	ea41 0300 	orr.w	r3, r1, r0
 8019990:	ec43 2b10 	vmov	d0, r2, r3
 8019994:	4770      	bx	lr

08019996 <copysignf>:
 8019996:	ee10 3a10 	vmov	r3, s0
 801999a:	ee10 2a90 	vmov	r2, s1
 801999e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80199a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80199a6:	4313      	orrs	r3, r2
 80199a8:	ee00 3a10 	vmov	s0, r3
 80199ac:	4770      	bx	lr
	...

080199b0 <_init>:
 80199b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199b2:	bf00      	nop
 80199b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199b6:	bc08      	pop	{r3}
 80199b8:	469e      	mov	lr, r3
 80199ba:	4770      	bx	lr

080199bc <_fini>:
 80199bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199be:	bf00      	nop
 80199c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199c2:	bc08      	pop	{r3}
 80199c4:	469e      	mov	lr, r3
 80199c6:	4770      	bx	lr
