
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019878  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08019a48  08019a48  00029a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2d8  0801a2d8  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a2d8  0801a2d8  0002a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a2e0  0801a2e0  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a2e0  0801a2e0  0002a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a2e4  0801a2e4  0002a2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801a2e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ecc  200001fc  0801a4e4  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200170c8  0801a4e4  000370c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c21c  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000752d  00000000  00000000  0006c448  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002750  00000000  00000000  00073978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023f8  00000000  00000000  000760c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dc1b  00000000  00000000  000784c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000285c6  00000000  00000000  000860db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001053c7  00000000  00000000  000ae6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3a68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b258  00000000  00000000  001b3ae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019a30 	.word	0x08019a30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08019a30 	.word	0x08019a30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <init_env>:
#include <Helper_Functions/env.h>

void init_env(env *env) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	/* init constants */
	env->p_g = PRESSURE_REFERENCE; // ISA reference pressure at sea level [Pa]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <init_env+0x20>)
 8000f44:	601a      	str	r2, [r3, #0]
	env->T_g = 15.0 + T_0; // ISA reference temperature at sea level [K]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <init_env+0x24>)
 8000f4a:	605a      	str	r2, [r3, #4]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	47c5e680 	.word	0x47c5e680
 8000f5c:	43901333 	.word	0x43901333

08000f60 <update_env>:
void calibrate_env(env *env, float p_g, float T_g) {
	env->T_g = T_g + T_0; // input is temperature in °C
	env->p_g = p_g; //
}

void update_env(env *env, float T) {
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f7ff fb0b 	bl	8000588 <__aeabi_f2d>
 8000f72:	a317      	add	r3, pc, #92	; (adr r3, 8000fd0 <update_env+0x70>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff f9a8 	bl	80002cc <__adddf3>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4618      	mov	r0, r3
 8000f82:	4621      	mov	r1, r4
 8000f84:	f7ff fe08 	bl	8000b98 <__aeabi_d2f>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff faf8 	bl	8000588 <__aeabi_f2d>
 8000f98:	a30f      	add	r3, pc, #60	; (adr r3, 8000fd8 <update_env+0x78>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff fb4b 	bl	8000638 <__aeabi_dmul>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	4621      	mov	r1, r4
 8000faa:	f7ff fdf5 	bl	8000b98 <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000fb4:	ee00 3a10 	vmov	s0, r3
 8000fb8:	f017 f952 	bl	8018260 <powf>
 8000fbc:	eef0 7a40 	vmov.f32	s15, s0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	66666666 	.word	0x66666666
 8000fd4:	40711266 	.word	0x40711266
 8000fd8:	2f9873ff 	.word	0x2f9873ff
 8000fdc:	40791e2f 	.word	0x40791e2f

08000fe0 <mach_number>:

float mach_number(env *env, float V_x) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8000fec:	edd7 7a00 	vldr	s15, [r7]
 8000ff0:	eef0 6ae7 	vabs.f32	s13, s15
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffe:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	ee07 3a90 	vmov	s15, r3
}
 8001008:	eeb0 0a67 	vmov.f32	s0, s15
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e043      	b.n	80010b4 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d03a      	beq.n	80010ae <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff faa3 	bl	8000588 <__aeabi_f2d>
 8001042:	a322      	add	r3, pc, #136	; (adr r3, 80010cc <pressure2altitudeAGL+0xb4>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fc20 	bl	800088c <__aeabi_ddiv>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4625      	mov	r5, r4
 8001052:	461c      	mov	r4, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800106a:	eddf 0a17 	vldr	s1, [pc, #92]	; 80010c8 <pressure2altitudeAGL+0xb0>
 800106e:	eeb0 0a66 	vmov.f32	s0, s13
 8001072:	f017 f8f5 	bl	8018260 <powf>
 8001076:	eeb0 7a40 	vmov.f32	s14, s0
 800107a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800107e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001082:	ee17 0a90 	vmov	r0, s15
 8001086:	f7ff fa7f 	bl	8000588 <__aeabi_f2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4620      	mov	r0, r4
 8001090:	4629      	mov	r1, r5
 8001092:	f7ff fad1 	bl	8000638 <__aeabi_dmul>
 8001096:	4603      	mov	r3, r0
 8001098:	460c      	mov	r4, r1
 800109a:	4618      	mov	r0, r3
 800109c:	4621      	mov	r1, r4
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a4:	18d4      	adds	r4, r2, r3
 80010a6:	f7ff fd77 	bl	8000b98 <__aeabi_d2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbb7      	blt.n	800102c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}
 80010c4:	f3af 8000 	nop.w
 80010c8:	3e42d5e2 	.word	0x3e42d5e2
 80010cc:	76c8b439 	.word	0x76c8b439
 80010d0:	3f7a9fbe 	.word	0x3f7a9fbe
 80010d4:	00000000 	.word	0x00000000

080010d8 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env *env, int n, float h[n], bool h_active[n], float p[n]) {
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	ed2d 8b02 	vpush	{d8}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e047      	b.n	8001180 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d03e      	beq.n	800117a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	ed93 8a00 	vldr	s16, [r3]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa3b 	bl	8000588 <__aeabi_f2d>
 8001112:	a323      	add	r3, pc, #140	; (adr r3, 80011a0 <altitudeAGL2pressure+0xc8>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	f7ff fa8e 	bl	8000638 <__aeabi_dmul>
 800111c:	4603      	mov	r3, r0
 800111e:	460c      	mov	r4, r1
 8001120:	4625      	mov	r5, r4
 8001122:	461c      	mov	r4, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa2d 	bl	8000588 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fba9 	bl	800088c <__aeabi_ddiv>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	461a      	mov	r2, r3
 8001140:	4623      	mov	r3, r4
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4914      	ldr	r1, [pc, #80]	; (8001198 <altitudeAGL2pressure+0xc0>)
 8001148:	f7ff f8be 	bl	80002c8 <__aeabi_dsub>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	4618      	mov	r0, r3
 8001152:	4621      	mov	r1, r4
 8001154:	f7ff fd20 	bl	8000b98 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800119c <altitudeAGL2pressure+0xc4>
 800115e:	ee00 3a10 	vmov	s0, r3
 8001162:	f017 f87d 	bl	8018260 <powf>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001170:	4413      	add	r3, r2
 8001172:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001176:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbb3      	blt.n	80010f0 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	ecbd 8b02 	vpop	{d8}
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	f3af 8000 	nop.w
 8001198:	3ff00000 	.word	0x3ff00000
 800119c:	40a82ed4 	.word	0x40a82ed4
 80011a0:	76c8b439 	.word	0x76c8b439
 80011a4:	3f7a9fbe 	.word	0x3f7a9fbe

080011a8 <altitude_gradient>:

float altitude_gradient(env *env, float p) {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * T_GRAD / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / R_0 - 1);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9e5 	bl	8000588 <__aeabi_f2d>
 80011be:	a31f      	add	r3, pc, #124	; (adr r3, 800123c <altitude_gradient+0x94>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fa38 	bl	8000638 <__aeabi_dmul>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	a11c      	add	r1, pc, #112	; (adr r1, 8001244 <altitude_gradient+0x9c>)
 80011d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011d6:	f7ff fb59 	bl	800088c <__aeabi_ddiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	4625      	mov	r5, r4
 80011e0:	461c      	mov	r4, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ed97 7a00 	vldr	s14, [r7]
 80011ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011f0:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001238 <altitude_gradient+0x90>
 80011f4:	eeb0 0a66 	vmov.f32	s0, s13
 80011f8:	f017 f832 	bl	8018260 <powf>
 80011fc:	ee10 3a10 	vmov	r3, s0
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9c1 	bl	8000588 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff fa13 	bl	8000638 <__aeabi_dmul>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	4618      	mov	r0, r3
 8001218:	4621      	mov	r1, r4
 800121a:	f7ff fcbd 	bl	8000b98 <__aeabi_d2f>
 800121e:	4603      	mov	r3, r0
 8001220:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - env->R * env->T_g / (env->g * env->p_g) * expf(logf(p / env->p_g) * (env->R * env->T_grad / env->R - 1));
	return h_grad;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	ee07 3a90 	vmov	s15, r3
}
 8001228:	eeb0 0a67 	vmov.f32	s0, s15
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bdb0      	pop	{r4, r5, r7, pc}
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	bf7e5604 	.word	0xbf7e5604
 800123c:	3a92a305 	.word	0x3a92a305
 8001240:	40239d01 	.word	0x40239d01
 8001244:	bdb0d017 	.word	0xbdb0d017
 8001248:	bffddabb 	.word	0xbffddabb

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b0a1      	sub	sp, #132	; 0x84
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f003 feae 	bl	8004fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f927 	bl	80014a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 800125a:	4b68      	ldr	r3, [pc, #416]	; (80013fc <main+0x1b0>)
 800125c:	4a68      	ldr	r2, [pc, #416]	; (8001400 <main+0x1b4>)
 800125e:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 8001260:	4b66      	ldr	r3, [pc, #408]	; (80013fc <main+0x1b0>)
 8001262:	4a68      	ldr	r2, [pc, #416]	; (8001404 <main+0x1b8>)
 8001264:	60da      	str	r2, [r3, #12]
  init_env(&global_env);
 8001266:	4868      	ldr	r0, [pc, #416]	; (8001408 <main+0x1bc>)
 8001268:	f7ff fe66 	bl	8000f38 <init_env>
  reset_flight_phase_detection(&global_flight_phase_detection);
 800126c:	4867      	ldr	r0, [pc, #412]	; (800140c <main+0x1c0>)
 800126e:	f002 fa75 	bl	800375c <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 fac9 	bl	8001808 <MX_GPIO_Init>
  MX_DMA_Init();
 8001276:	f000 faa1 	bl	80017bc <MX_DMA_Init>
  MX_SPI3_Init();
 800127a:	f000 fa37 	bl	80016ec <MX_SPI3_Init>
  MX_SPI1_Init();
 800127e:	f000 f9c5 	bl	800160c <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8001282:	f000 f9a3 	bl	80015cc <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8001286:	f000 f9f9 	bl	800167c <MX_SPI2_Init>
  MX_FATFS_Init();
 800128a:	f00c f9c3 	bl	800d614 <MX_FATFS_Init>
  MX_UART7_Init();
 800128e:	f000 fa65 	bl	800175c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001292:	f014 fff3 	bl	801627c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001296:	f010 ffaf 	bl	80121f8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Sensor Board 1 Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <main+0x1c4>)
 800129c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 80012a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012aa:	4618      	mov	r0, r3
 80012ac:	f011 f976 	bl	801259c <osMutexNew>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <main+0x1c8>)
 80012b4:	601a      	str	r2, [r3, #0]

   /* Sensor Board 2 Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 80012b6:	4b58      	ldr	r3, [pc, #352]	; (8001418 <main+0x1cc>)
 80012b8:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80012bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 80012c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012c6:	4618      	mov	r0, r3
 80012c8:	f011 f968 	bl	801259c <osMutexNew>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <main+0x1d0>)
 80012d0:	601a      	str	r2, [r3, #0]

    /* Sensor Board 3 Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <main+0x1d4>)
 80012d4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 80012de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012e2:	4618      	mov	r0, r3
 80012e4:	f011 f95a 	bl	801259c <osMutexNew>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <main+0x1d8>)
 80012ec:	601a      	str	r2, [r3, #0]

     /* State Estimation Output Mutex */
      const osMutexAttr_t state_est_mutex_attr = {
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <main+0x1dc>)
 80012f0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80012f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexPrioInherit,    					 // attr_bits
        NULL,                                     // memory for control block
        0U                                        // size for control block
      };

      state_est_mutex = osMutexNew(&state_est_mutex_attr);
 80012fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012fe:	4618      	mov	r0, r3
 8001300:	f011 f94c 	bl	801259c <osMutexNew>
 8001304:	4602      	mov	r2, r0
 8001306:	4b49      	ldr	r3, [pc, #292]	; (800142c <main+0x1e0>)
 8001308:	601a      	str	r2, [r3, #0]

      /* Controller Output Mutex */
       const osMutexAttr_t controller_mutex_attr = {
 800130a:	4b49      	ldr	r3, [pc, #292]	; (8001430 <main+0x1e4>)
 800130c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         osMutexPrioInherit,    					 // attr_bits
         NULL,                                     // memory for control block
         0U                                        // size for control block
       };

       controller_mutex = osMutexNew(&controller_mutex_attr);
 8001316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800131a:	4618      	mov	r0, r3
 800131c:	f011 f93e 	bl	801259c <osMutexNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <main+0x1e8>)
 8001324:	601a      	str	r2, [r3, #0]

      /* FSM Output Mutex */
       const osMutexAttr_t fsm_mutex_attr = {
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <main+0x1ec>)
 8001328:	f107 0420 	add.w	r4, r7, #32
 800132c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         osMutexPrioInherit,    					 // attr_bits
         NULL,                                     // memory for control block
         0U                                        // size for control block
       };

       fsm_mutex = osMutexNew(&fsm_mutex_attr);
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	4618      	mov	r0, r3
 8001338:	f011 f930 	bl	801259c <osMutexNew>
 800133c:	4602      	mov	r2, r0
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <main+0x1f0>)
 8001340:	601a      	str	r2, [r3, #0]

       /* Environment Mutex */
        const osMutexAttr_t environment_mutex_attr = {
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <main+0x1f4>)
 8001344:	f107 0410 	add.w	r4, r7, #16
 8001348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800134a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          osMutexPrioInherit,    					 // attr_bits
          NULL,                                     // memory for control block
          0U                                        // size for control block
        };

        environment_mutex = osMutexNew(&environment_mutex_attr);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f011 f922 	bl	801259c <osMutexNew>
 8001358:	4602      	mov	r2, r0
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <main+0x1f8>)
 800135c:	601a      	str	r2, [r3, #0]

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 800135e:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <main+0x1fc>)
 8001360:	463c      	mov	r4, r7
 8001362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 8001368:	463b      	mov	r3, r7
 800136a:	4618      	mov	r0, r3
 800136c:	f011 f916 	bl	801259c <osMutexNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <main+0x200>)
 8001374:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8001376:	2200      	movs	r2, #0
 8001378:	2196      	movs	r1, #150	; 0x96
 800137a:	2080      	movs	r0, #128	; 0x80
 800137c:	f011 fc18 	bl	8012bb0 <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <main+0x204>)
 8001384:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001386:	4a33      	ldr	r2, [pc, #204]	; (8001454 <main+0x208>)
 8001388:	2100      	movs	r1, #0
 800138a:	4833      	ldr	r0, [pc, #204]	; (8001458 <main+0x20c>)
 800138c:	f010 fff2 	bl	8012374 <osThreadNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b32      	ldr	r3, [pc, #200]	; (800145c <main+0x210>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8001396:	4a32      	ldr	r2, [pc, #200]	; (8001460 <main+0x214>)
 8001398:	2100      	movs	r1, #0
 800139a:	4832      	ldr	r0, [pc, #200]	; (8001464 <main+0x218>)
 800139c:	f010 ffea 	bl	8012374 <osThreadNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <main+0x21c>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80013a6:	4a31      	ldr	r2, [pc, #196]	; (800146c <main+0x220>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4831      	ldr	r0, [pc, #196]	; (8001470 <main+0x224>)
 80013ac:	f010 ffe2 	bl	8012374 <osThreadNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <main+0x228>)
 80013b4:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80013b6:	4a30      	ldr	r2, [pc, #192]	; (8001478 <main+0x22c>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4830      	ldr	r0, [pc, #192]	; (800147c <main+0x230>)
 80013bc:	f010 ffda 	bl	8012374 <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <main+0x234>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <main+0x238>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	482f      	ldr	r0, [pc, #188]	; (8001488 <main+0x23c>)
 80013cc:	f010 ffd2 	bl	8012374 <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <main+0x240>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80013d6:	4a2e      	ldr	r2, [pc, #184]	; (8001490 <main+0x244>)
 80013d8:	2100      	movs	r1, #0
 80013da:	482e      	ldr	r0, [pc, #184]	; (8001494 <main+0x248>)
 80013dc:	f010 ffca 	bl	8012374 <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <main+0x24c>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <main+0x250>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	482d      	ldr	r0, [pc, #180]	; (80014a0 <main+0x254>)
 80013ec:	f010 ffc2 	bl	8012374 <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <main+0x258>)
 80013f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013f6:	f010 ff55 	bl	80122a4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <main+0x1ae>
 80013fc:	e0042000 	.word	0xe0042000
 8001400:	07e01bff 	.word	0x07e01bff
 8001404:	00070003 	.word	0x00070003
 8001408:	20000300 	.word	0x20000300
 800140c:	20000310 	.word	0x20000310
 8001410:	08019ab8 	.word	0x08019ab8
 8001414:	2000ab88 	.word	0x2000ab88
 8001418:	08019ad4 	.word	0x08019ad4
 800141c:	20014e94 	.word	0x20014e94
 8001420:	08019af0 	.word	0x08019af0
 8001424:	2000abec 	.word	0x2000abec
 8001428:	08019b10 	.word	0x08019b10
 800142c:	2000abf0 	.word	0x2000abf0
 8001430:	08019b34 	.word	0x08019b34
 8001434:	2000ab7c 	.word	0x2000ab7c
 8001438:	08019b50 	.word	0x08019b50
 800143c:	2000887c 	.word	0x2000887c
 8001440:	08019b74 	.word	0x08019b74
 8001444:	200089c4 	.word	0x200089c4
 8001448:	08019b90 	.word	0x08019b90
 800144c:	2000cc50 	.word	0x2000cc50
 8001450:	20010d74 	.word	0x20010d74
 8001454:	0801a020 	.word	0x0801a020
 8001458:	080018e5 	.word	0x080018e5
 800145c:	20008878 	.word	0x20008878
 8001460:	0801a044 	.word	0x0801a044
 8001464:	08003fa1 	.word	0x08003fa1
 8001468:	2000ab84 	.word	0x2000ab84
 800146c:	0801a068 	.word	0x0801a068
 8001470:	08003059 	.word	0x08003059
 8001474:	20014e90 	.word	0x20014e90
 8001478:	0801a08c 	.word	0x0801a08c
 800147c:	08003e01 	.word	0x08003e01
 8001480:	20008a4c 	.word	0x20008a4c
 8001484:	0801a0b0 	.word	0x0801a0b0
 8001488:	08003a79 	.word	0x08003a79
 800148c:	20008964 	.word	0x20008964
 8001490:	0801a0d4 	.word	0x0801a0d4
 8001494:	0800378d 	.word	0x0800378d
 8001498:	2000ab80 	.word	0x2000ab80
 800149c:	0801a0f8 	.word	0x0801a0f8
 80014a0:	080033e9 	.word	0x080033e9
 80014a4:	2000ab8c 	.word	0x2000ab8c

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0b4      	sub	sp, #208	; 0xd0
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f015 fc8d 	bl	8016dd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	2284      	movs	r2, #132	; 0x84
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f015 fc7e 	bl	8016dd6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <SystemClock_Config+0x118>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <SystemClock_Config+0x118>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <SystemClock_Config+0x118>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <SystemClock_Config+0x11c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <SystemClock_Config+0x11c>)
 80014fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <SystemClock_Config+0x11c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800150e:	2301      	movs	r3, #1
 8001510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152a:	2304      	movs	r3, #4
 800152c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001530:	23a8      	movs	r3, #168	; 0xa8
 8001532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800153c:	2307      	movs	r3, #7
 800153e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fd8a 	bl	8007060 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001552:	f000 f9e3 	bl	800191c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001568:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001578:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800157c:	2105      	movs	r1, #5
 800157e:	4618      	mov	r0, r3
 8001580:	f006 f812 	bl	80075a8 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800158a:	f000 f9c7 	bl	800191c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <SystemClock_Config+0x120>)
 8001590:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001592:	2300      	movs	r3, #0
 8001594:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 fa28 	bl	80079fc <HAL_RCCEx_PeriphCLKConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80015b2:	f000 f9b3 	bl	800191c <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	37d0      	adds	r7, #208	; 0xd0
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000
 80015c8:	00a01000 	.word	0x00a01000

080015cc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_SDMMC1_SD_Init+0x38>)
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <MX_SDMMC1_SD_Init+0x3c>)
 80015d4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_SDMMC1_SD_Init+0x38>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_SDMMC1_SD_Init+0x38>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_SDMMC1_SD_Init+0x38>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_SDMMC1_SD_Init+0x38>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <MX_SDMMC1_SD_Init+0x38>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <MX_SDMMC1_SD_Init+0x38>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	200089c8 	.word	0x200089c8
 8001608:	40012c00 	.word	0x40012c00

0800160c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_SPI1_Init+0x68>)
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <MX_SPI1_Init+0x6c>)
 8001614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_SPI1_Init+0x68>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_SPI1_Init+0x68>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_SPI1_Init+0x68>)
 8001624:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_SPI1_Init+0x68>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <MX_SPI1_Init+0x68>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_SPI1_Init+0x68>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <MX_SPI1_Init+0x68>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_SPI1_Init+0x68>)
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_SPI1_Init+0x68>)
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_SPI1_Init+0x68>)
 8001650:	2207      	movs	r2, #7
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MX_SPI1_Init+0x68>)
 8001656:	2200      	movs	r2, #0
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_SPI1_Init+0x68>)
 800165c:	2200      	movs	r2, #0
 800165e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_SPI1_Init+0x68>)
 8001662:	f008 f877 	bl	8009754 <HAL_SPI_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800166c:	f000 f956 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20010d10 	.word	0x20010d10
 8001678:	40013000 	.word	0x40013000

0800167c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <MX_SPI2_Init+0x6c>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_SPI2_Init+0x68>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001694:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001698:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_SPI2_Init+0x68>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016d2:	f008 f83f 	bl	8009754 <HAL_SPI_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80016dc:	f000 f91e 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20008880 	.word	0x20008880
 80016e8:	40003800 	.word	0x40003800

080016ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_SPI3_Init+0x68>)
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <MX_SPI3_Init+0x6c>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_SPI3_Init+0x68>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_SPI3_Init+0x68>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_SPI3_Init+0x68>)
 8001704:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001708:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_SPI3_Init+0x68>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <MX_SPI3_Init+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_SPI3_Init+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <MX_SPI3_Init+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_SPI3_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_SPI3_Init+0x68>)
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_SPI3_Init+0x68>)
 8001730:	2207      	movs	r2, #7
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_SPI3_Init+0x68>)
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_SPI3_Init+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_SPI3_Init+0x68>)
 8001742:	f008 f807 	bl	8009754 <HAL_SPI_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800174c:	f000 f8e6 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000aa50 	.word	0x2000aa50
 8001758:	40003c00 	.word	0x40003c00

0800175c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_UART7_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MX_UART7_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_UART7_Init+0x58>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_UART7_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_UART7_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_UART7_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_UART7_Init+0x58>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_UART7_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_UART7_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_UART7_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_UART7_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_UART7_Init+0x58>)
 80017a0:	f009 f890 	bl	800a8c4 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80017aa:	f000 f8b7 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200088e4 	.word	0x200088e4
 80017b8:	40007800 	.word	0x40007800

080017bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_DMA_Init+0x48>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <MX_DMA_Init+0x48>)
 80017c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <MX_DMA_Init+0x48>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2105      	movs	r1, #5
 80017de:	203b      	movs	r0, #59	; 0x3b
 80017e0:	f003 fcee 	bl	80051c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80017e4:	203b      	movs	r0, #59	; 0x3b
 80017e6:	f003 fd07 	bl	80051f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2105      	movs	r1, #5
 80017ee:	2045      	movs	r0, #69	; 0x45
 80017f0:	f003 fce6 	bl	80051c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80017f4:	2045      	movs	r0, #69	; 0x45
 80017f6:	f003 fcff 	bl	80051f8 <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a2e      	ldr	r2, [pc, #184]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <MX_GPIO_Init+0xd4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a28      	ldr	r2, [pc, #160]	; (80018dc <MX_GPIO_Init+0xd4>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a22      	ldr	r2, [pc, #136]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MX_GPIO_Init+0xd4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <MX_GPIO_Init+0xd4>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a16      	ldr	r2, [pc, #88]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_GPIO_Init+0xd4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_GPIO_Init+0xd4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <MX_GPIO_Init+0xd4>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_GPIO_Init+0xd4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2108      	movs	r1, #8
 80018b2:	480b      	ldr	r0, [pc, #44]	; (80018e0 <MX_GPIO_Init+0xd8>)
 80018b4:	f004 f9fc 	bl	8005cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018b8:	2308      	movs	r3, #8
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_GPIO_Init+0xd8>)
 80018d0:	f004 f844 	bl	800595c <HAL_GPIO_Init>

}
 80018d4:	bf00      	nop
 80018d6:	3730      	adds	r7, #48	; 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020800 	.word	0x40020800

080018e4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018ec:	f014 fcc6 	bl	801627c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f010 fde5 	bl	80124c0 <osDelay>
 80018f6:	e7fb      	b.n	80018f0 <StartDefaultTask+0xc>

080018f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800190a:	f003 fb5f 	bl	8004fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40010000 	.word	0x40010000

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <eye>:
#include "math_utils.h"


void eye(int dim, float A[dim][dim]) {
 800192a:	b490      	push	{r4, r7}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	1e43      	subs	r3, r0, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4603      	mov	r3, r0
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f04f 0400 	mov.w	r4, #0
 800194a:	0154      	lsls	r4, r2, #5
 800194c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001950:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e02b      	b.n	80019b0 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e021      	b.n	80019a2 <eye+0x78>
            if (i == j){
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	429a      	cmp	r2, r3
 8001964:	d10d      	bne.n	8001982 <eye+0x58>
				A[i][j] = 1;
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	fb03 f302 	mul.w	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	441a      	add	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e00c      	b.n	800199c <eye+0x72>
			} else {
				A[i][j] = 0;
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	fb03 f302 	mul.w	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	441a      	add	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	dbd9      	blt.n	800195e <eye+0x34>
	for(int i = 0; i < dim; i++){
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3301      	adds	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dbcf      	blt.n	8001958 <eye+0x2e>
			}
        }
    }
}
 80019b8:	bf00      	nop
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc90      	pop	{r4, r7}
 80019c0:	4770      	bx	lr

080019c2 <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 80019c2:	b4b0      	push	{r4, r5, r7}
 80019c4:	b089      	sub	sp, #36	; 0x24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	68b8      	ldr	r0, [r7, #8]
 80019d2:	1e43      	subs	r3, r0, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	f04f 0400 	mov.w	r4, #0
 80019e6:	0154      	lsls	r4, r2, #5
 80019e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ec:	014b      	lsls	r3, r1, #5
 80019ee:	68fd      	ldr	r5, [r7, #12]
 80019f0:	1e6b      	subs	r3, r5, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	462b      	mov	r3, r5
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	0154      	lsls	r4, r2, #5
 8001a06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a0a:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e022      	b.n	8001a58 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e018      	b.n	8001a4a <transpose+0x88>
			A_T[j][i] = A[i][j];
 8001a18:	4602      	mov	r2, r0
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	fb03 f302 	mul.w	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	441a      	add	r2, r3
 8001a26:	4629      	mov	r1, r5
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	fb03 f301 	mul.w	r3, r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4419      	add	r1, r3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbe2      	blt.n	8001a18 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbd8      	blt.n	8001a12 <transpose+0x50>
		}
	}
}
 8001a60:	bf00      	nop
 8001a62:	3724      	adds	r7, #36	; 0x24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bcb0      	pop	{r4, r5, r7}
 8001a68:	4770      	bx	lr

08001a6a <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8001a6a:	b480      	push	{r7}
 8001a6c:	b087      	sub	sp, #28
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e016      	b.n	8001aac <vecadd+0x42>
		c[i] = a[i] + b[i];
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	4413      	add	r3, r2
 8001a86:	ed93 7a00 	vldr	s14, [r3]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbe4      	blt.n	8001a7e <vecadd+0x14>
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e016      	b.n	8001b02 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	4413      	add	r3, r2
 8001adc:	ed93 7a00 	vldr	s14, [r3]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbe4      	blt.n	8001ad4 <vecsub+0x14>
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <matadd>:

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8001b16:	b4f0      	push	{r4, r5, r6, r7}
 8001b18:	b08a      	sub	sp, #40	; 0x28
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	68b8      	ldr	r0, [r7, #8]
 8001b26:	1e43      	subs	r3, r0, #1
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	f04f 0400 	mov.w	r4, #0
 8001b3a:	0154      	lsls	r4, r2, #5
 8001b3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b40:	014b      	lsls	r3, r1, #5
 8001b42:	68bd      	ldr	r5, [r7, #8]
 8001b44:	1e6b      	subs	r3, r5, #1
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	462b      	mov	r3, r5
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	f04f 0400 	mov.w	r4, #0
 8001b58:	0154      	lsls	r4, r2, #5
 8001b5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b5e:	014b      	lsls	r3, r1, #5
 8001b60:	68be      	ldr	r6, [r7, #8]
 8001b62:	1e73      	subs	r3, r6, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	4633      	mov	r3, r6
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	0154      	lsls	r4, r2, #5
 8001b78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b7c:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e032      	b.n	8001bea <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	e028      	b.n	8001bdc <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	fb03 f302 	mul.w	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	441a      	add	r2, r3
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	ed93 7a00 	vldr	s14, [r3]
 8001ba2:	462a      	mov	r2, r5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	fb03 f302 	mul.w	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	441a      	add	r2, r3
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	4632      	mov	r2, r6
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	fb03 f302 	mul.w	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bc6:	441a      	add	r2, r3
 8001bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbd2      	blt.n	8001b8a <matadd+0x74>
	for(int i = 0; i < m; i++){
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	3301      	adds	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbc8      	blt.n	8001b84 <matadd+0x6e>
        }
    }
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bcf0      	pop	{r4, r5, r6, r7}
 8001bfa:	4770      	bx	lr

08001bfc <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8001bfc:	b4f0      	push	{r4, r5, r6, r7}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	1e43      	subs	r3, r0, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	4603      	mov	r3, r0
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	f04f 0400 	mov.w	r4, #0
 8001c20:	0154      	lsls	r4, r2, #5
 8001c22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c26:	014b      	lsls	r3, r1, #5
 8001c28:	68bd      	ldr	r5, [r7, #8]
 8001c2a:	1e6b      	subs	r3, r5, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	462b      	mov	r3, r5
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	f04f 0400 	mov.w	r4, #0
 8001c3e:	0154      	lsls	r4, r2, #5
 8001c40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c44:	014b      	lsls	r3, r1, #5
 8001c46:	68be      	ldr	r6, [r7, #8]
 8001c48:	1e73      	subs	r3, r6, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	4633      	mov	r3, r6
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	f04f 0400 	mov.w	r4, #0
 8001c5c:	0154      	lsls	r4, r2, #5
 8001c5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c62:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e032      	b.n	8001cd0 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	e028      	b.n	8001cc2 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8001c70:	4602      	mov	r2, r0
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fb03 f302 	mul.w	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	462a      	mov	r2, r5
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fb03 f302 	mul.w	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	441a      	add	r2, r3
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	4632      	mov	r2, r6
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fb03 f302 	mul.w	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cac:	441a      	add	r2, r3
 8001cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3a      	ldr	r2, [r7, #32]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	dbd2      	blt.n	8001c70 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbc8      	blt.n	8001c6a <matsub+0x6e>
        }
    }
}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce0:	4770      	bx	lr

08001ce2 <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8001ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce4:	b08d      	sub	sp, #52	; 0x34
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6178      	str	r0, [r7, #20]
 8001cea:	6139      	str	r1, [r7, #16]
 8001cec:	60fa      	str	r2, [r7, #12]
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	693e      	ldr	r6, [r7, #16]
 8001cf2:	1e73      	subs	r3, r6, #1
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	4633      	mov	r3, r6
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	f04f 0400 	mov.w	r4, #0
 8001d06:	0154      	lsls	r4, r2, #5
 8001d08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d0c:	014b      	lsls	r3, r1, #5
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	3b01      	subs	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	f04f 0400 	mov.w	r4, #0
 8001d28:	0154      	lsls	r4, r2, #5
 8001d2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d2e:	014b      	lsls	r3, r1, #5
 8001d30:	68fd      	ldr	r5, [r7, #12]
 8001d32:	1e6b      	subs	r3, r5, #1
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	462b      	mov	r3, r5
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f04f 0400 	mov.w	r4, #0
 8001d46:	0154      	lsls	r4, r2, #5
 8001d48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d4c:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001d4e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	461a      	mov	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d66:	f015 f836 	bl	8016dd6 <memset>
	}
	for(int i = 0; i < m; i++){
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6e:	e04a      	b.n	8001e06 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d74:	e040      	b.n	8001df8 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d7a:	e036      	b.n	8001dea <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	fb03 f302 	mul.w	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	441a      	add	r2, r3
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	fb03 f302 	mul.w	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001da0:	441a      	add	r2, r3
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db0:	462a      	mov	r2, r5
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	fb03 f302 	mul.w	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dbc:	441a      	add	r2, r3
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	462a      	mov	r2, r5
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fb03 f302 	mul.w	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dd4:	441a      	add	r2, r3
 8001dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	3301      	adds	r3, #1
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbc4      	blt.n	8001d7c <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	3301      	adds	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbba      	blt.n	8001d76 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	3301      	adds	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbb0      	blt.n	8001d70 <matmul+0x8e>
            }
        }
    }
}
 8001e0e:	bf00      	nop
 8001e10:	3734      	adds	r7, #52	; 0x34
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e16 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8001e16:	b5b0      	push	{r4, r5, r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	68bd      	ldr	r5, [r7, #8]
 8001e26:	1e6b      	subs	r3, r5, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	462b      	mov	r3, r5
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	f04f 0400 	mov.w	r4, #0
 8001e3a:	0154      	lsls	r4, r2, #5
 8001e3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e40:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001e42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2100      	movs	r1, #0
 8001e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e54:	f014 ffbf 	bl	8016dd6 <memset>
	}
	for(int i = 0; i < m; i++){
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	e02e      	b.n	8001ebc <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e024      	b.n	8001eae <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8001e64:	462a      	mov	r2, r5
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	fb03 f302 	mul.w	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	441a      	add	r2, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	ed93 7a00 	vldr	s14, [r3]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e9e:	4413      	add	r3, r2
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbd6      	blt.n	8001e64 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbcc      	blt.n	8001e5e <matvecprod+0x48>
        }
    }
}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bdb0      	pop	{r4, r5, r7, pc}

08001ecc <scalarmatprod>:

void scalarmatprod(int m, int n, float scalar, float A[m][n], float B[m][n]) {
 8001ecc:	b4b0      	push	{r4, r5, r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6178      	str	r0, [r7, #20]
 8001ed4:	6139      	str	r1, [r7, #16]
 8001ed6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	6938      	ldr	r0, [r7, #16]
 8001ee0:	1e43      	subs	r3, r0, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	f04f 0400 	mov.w	r4, #0
 8001ef4:	0154      	lsls	r4, r2, #5
 8001ef6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001efa:	014b      	lsls	r3, r1, #5
 8001efc:	693d      	ldr	r5, [r7, #16]
 8001efe:	1e6b      	subs	r3, r5, #1
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	462b      	mov	r3, r5
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	f04f 0400 	mov.w	r4, #0
 8001f12:	0154      	lsls	r4, r2, #5
 8001f14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f18:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	e028      	b.n	8001f72 <scalarmatprod+0xa6>
        for(int j = 0; j < n; j++){
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	e01e      	b.n	8001f64 <scalarmatprod+0x98>
            B[i][j] = scalar * A[i][j];
 8001f26:	4602      	mov	r2, r0
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	fb03 f302 	mul.w	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	441a      	add	r2, r3
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	ed93 7a00 	vldr	s14, [r3]
 8001f3e:	462a      	mov	r2, r5
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	fb03 f302 	mul.w	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	441a      	add	r2, r3
 8001f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbdc      	blt.n	8001f26 <scalarmatprod+0x5a>
	for(int i = 0; i < m; i++){
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	6a3a      	ldr	r2, [r7, #32]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbd2      	blt.n	8001f20 <scalarmatprod+0x54>
        }
    }
}
 8001f7a:	bf00      	nop
 8001f7c:	372c      	adds	r7, #44	; 0x2c
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bcb0      	pop	{r4, r5, r7}
 8001f82:	4770      	bx	lr

08001f84 <cofactor>:
}

/* Function to get cofactor of A[p][q] in temp[][]. n is current dimension of A[][] */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
void cofactor(int dim, float A[dim][dim], float temp[dim][dim], int p, int q, int n)
{
 8001f84:	b4b0      	push	{r4, r5, r7}
 8001f86:	b08b      	sub	sp, #44	; 0x2c
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
void cofactor(int dim, float A[dim][dim], float temp[dim][dim], int p, int q, int n)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	1e43      	subs	r3, r0, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f04f 0400 	mov.w	r4, #0
 8001fa8:	0154      	lsls	r4, r2, #5
 8001faa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fae:	014b      	lsls	r3, r1, #5
 8001fb0:	68fd      	ldr	r5, [r7, #12]
 8001fb2:	1e6b      	subs	r3, r5, #1
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	462b      	mov	r3, r5
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	f04f 0400 	mov.w	r4, #0
 8001fc6:	0154      	lsls	r4, r2, #5
 8001fc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fcc:	014b      	lsls	r3, r1, #5
    int i = 0, j = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24

    // Looping for each element of the matrix
    for (int row = 0; row < n; row++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e036      	b.n	800204a <cofactor+0xc6>
    {
        for (int col = 0; col < n; col++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e02c      	b.n	800203c <cofactor+0xb8>
        {
            //  Copying into temporary matrix only those element
            //  which are not in given row and column
            if (row != p && col != q)
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d025      	beq.n	8002036 <cofactor+0xb2>
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d021      	beq.n	8002036 <cofactor+0xb2>
            {
                temp[i][j++] = A[row][col];
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	fb03 f302 	mul.w	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	18d4      	adds	r4, r2, r3
 8002000:	462a      	mov	r2, r5
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	fb03 f302 	mul.w	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	18d1      	adds	r1, r2, r3
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	627a      	str	r2, [r7, #36]	; 0x24
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4422      	add	r2, r4
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	601a      	str	r2, [r3, #0]

                // Row is filled, so increase row index and
                // reset col index
                if (j == n - 1)
 8002022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002024:	3b01      	subs	r3, #1
 8002026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002028:	429a      	cmp	r2, r3
 800202a:	d104      	bne.n	8002036 <cofactor+0xb2>
                {
                    j = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
                    i++;
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	3301      	adds	r3, #1
 8002034:	623b      	str	r3, [r7, #32]
        for (int col = 0; col < n; col++)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	3301      	adds	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002040:	429a      	cmp	r2, r3
 8002042:	dbce      	blt.n	8001fe2 <cofactor+0x5e>
    for (int row = 0; row < n; row++)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3301      	adds	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204e:	429a      	cmp	r2, r3
 8002050:	dbc4      	blt.n	8001fdc <cofactor+0x58>
                }
            }
        }
    }
}
 8002052:	bf00      	nop
 8002054:	372c      	adds	r7, #44	; 0x2c
 8002056:	46bd      	mov	sp, r7
 8002058:	bcb0      	pop	{r4, r5, r7}
 800205a:	4770      	bx	lr

0800205c <determinant>:

/* Recursive function for finding determinant of matrix. n is current dimension of A[][]. */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
float determinant(int dim, float A[dim][dim], int n)
{
 800205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002060:	ed2d 8b02 	vpush	{d8}
 8002064:	b08e      	sub	sp, #56	; 0x38
 8002066:	af02      	add	r7, sp, #8
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
float determinant(int dim, float A[dim][dim], int n)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	f04f 0400 	mov.w	r4, #0
 8002082:	0154      	lsls	r4, r2, #5
 8002084:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002088:	014b      	lsls	r3, r1, #5
{
 800208a:	466b      	mov	r3, sp
 800208c:	4698      	mov	r8, r3
    float D = 0; // Initialize result
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	623b      	str	r3, [r7, #32]

    //  Base case : if matrix contains single element
    if (n == 1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <determinant+0x44>
        return A[0][0];
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e089      	b.n	80021b4 <determinant+0x158>

    float temp[dim][dim]; // To store cofactors
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	68fd      	ldr	r5, [r7, #12]
 80020a4:	1e43      	subs	r3, r0, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	4603      	mov	r3, r0
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	0154      	lsls	r4, r2, #5
 80020ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020be:	014b      	lsls	r3, r1, #5
 80020c0:	1e6b      	subs	r3, r5, #1
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	4603      	mov	r3, r0
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	462b      	mov	r3, r5
 80020ce:	f04f 0400 	mov.w	r4, #0
 80020d2:	fb03 fc02 	mul.w	ip, r3, r2
 80020d6:	fb01 f604 	mul.w	r6, r1, r4
 80020da:	4466      	add	r6, ip
 80020dc:	fba1 3403 	umull	r3, r4, r1, r3
 80020e0:	1932      	adds	r2, r6, r4
 80020e2:	4614      	mov	r4, r2
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	0162      	lsls	r2, r4, #5
 80020ee:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80020f2:	0159      	lsls	r1, r3, #5
 80020f4:	4603      	mov	r3, r0
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	462b      	mov	r3, r5
 80020fe:	f04f 0400 	mov.w	r4, #0
 8002102:	fb03 fc02 	mul.w	ip, r3, r2
 8002106:	fb01 f604 	mul.w	r6, r1, r4
 800210a:	4466      	add	r6, ip
 800210c:	fba1 3403 	umull	r3, r4, r1, r3
 8002110:	1932      	adds	r2, r6, r4
 8002112:	4614      	mov	r4, r2
 8002114:	f04f 0100 	mov.w	r1, #0
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	0162      	lsls	r2, r4, #5
 800211e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002122:	0159      	lsls	r1, r3, #5
 8002124:	4603      	mov	r3, r0
 8002126:	462a      	mov	r2, r5
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	3303      	adds	r3, #3
 8002130:	3307      	adds	r3, #7
 8002132:	08db      	lsrs	r3, r3, #3
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	ebad 0d03 	sub.w	sp, sp, r3
 800213a:	ab02      	add	r3, sp, #8
 800213c:	3303      	adds	r3, #3
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	617b      	str	r3, [r7, #20]

    int sign = 1;  // To store sign multiplier
 8002144:	2301      	movs	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24

     // Iterate for each element of first row
    for (int f = 0; f < n; f++)
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
 800214c:	e02d      	b.n	80021aa <determinant+0x14e>
    {
        // Getting Cofactor of A[0][f]
        cofactor(dim, A, temp, 0, f, n);
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff ff11 	bl	8001f84 <cofactor>
        D += sign * A[0][f] * determinant(dim, temp, n - 1);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee27 8a27 	vmul.f32	s16, s14, s15
 800217c:	6979      	ldr	r1, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3b01      	subs	r3, #1
 8002182:	461a      	mov	r2, r3
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff ff69 	bl	800205c <determinant>
 800218a:	eef0 7a40 	vmov.f32	s15, s0
 800218e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002192:	ed97 7a08 	vldr	s14, [r7, #32]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	edc7 7a08 	vstr	s15, [r7, #32]

        // terms are to be added with alternate sign
        sign = -sign;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	425b      	negs	r3, r3
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    for (int f = 0; f < n; f++)
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	3301      	adds	r3, #1
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	dbcd      	blt.n	800214e <determinant+0xf2>
    }

    return D;
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	46c5      	mov	sp, r8
 80021b6:	ee07 3a90 	vmov	s15, r3
}
 80021ba:	eeb0 0a67 	vmov.f32	s0, s15
 80021be:	3730      	adds	r7, #48	; 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	ecbd 8b02 	vpop	{d8}
 80021c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021ca <adjoint>:

/* Function to get adjoint of A[dim][dim] in adj[dim][dim]. */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
void adjoint(int dim, float A[dim][dim], float adj[dim][dim])
{
 80021ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ce:	ed2d 8b02 	vpush	{d8}
 80021d2:	b08e      	sub	sp, #56	; 0x38
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
void adjoint(int dim, float A[dim][dim], float adj[dim][dim])
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	f04f 0400 	mov.w	r4, #0
 80021f0:	0154      	lsls	r4, r2, #5
 80021f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021f6:	014b      	lsls	r3, r1, #5
 80021f8:	68fe      	ldr	r6, [r7, #12]
 80021fa:	1e73      	subs	r3, r6, #1
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fe:	4633      	mov	r3, r6
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	0154      	lsls	r4, r2, #5
 8002210:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002214:	014b      	lsls	r3, r1, #5
{
 8002216:	466b      	mov	r3, sp
 8002218:	4698      	mov	r8, r3
    if (dim == 1)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <adjoint+0x64>
    {
        adj[0][0] = 1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002226:	601a      	str	r2, [r3, #0]
        return;
 8002228:	bf00      	nop
 800222a:	46c5      	mov	sp, r8
 800222c:	e09c      	b.n	8002368 <adjoint+0x19e>
    }

    // temp is used to store cofactors of A[][]
    int sign = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
	float temp[dim][dim];
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	68fd      	ldr	r5, [r7, #12]
 8002236:	1e43      	subs	r3, r0, #1
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	4603      	mov	r3, r0
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	f04f 0400 	mov.w	r4, #0
 800224a:	0154      	lsls	r4, r2, #5
 800224c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002250:	014b      	lsls	r3, r1, #5
 8002252:	1e6b      	subs	r3, r5, #1
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	4603      	mov	r3, r0
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	462b      	mov	r3, r5
 8002260:	f04f 0400 	mov.w	r4, #0
 8002264:	fb03 fe02 	mul.w	lr, r3, r2
 8002268:	fb01 fc04 	mul.w	ip, r1, r4
 800226c:	44f4      	add	ip, lr
 800226e:	fba1 3403 	umull	r3, r4, r1, r3
 8002272:	eb0c 0204 	add.w	r2, ip, r4
 8002276:	4614      	mov	r4, r2
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	0162      	lsls	r2, r4, #5
 8002282:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002286:	0159      	lsls	r1, r3, #5
 8002288:	4603      	mov	r3, r0
 800228a:	4619      	mov	r1, r3
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	462b      	mov	r3, r5
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	fb03 fe02 	mul.w	lr, r3, r2
 800229a:	fb01 fc04 	mul.w	ip, r1, r4
 800229e:	44f4      	add	ip, lr
 80022a0:	fba1 3403 	umull	r3, r4, r1, r3
 80022a4:	eb0c 0204 	add.w	r2, ip, r4
 80022a8:	4614      	mov	r4, r2
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	0162      	lsls	r2, r4, #5
 80022b4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80022b8:	0159      	lsls	r1, r3, #5
 80022ba:	4603      	mov	r3, r0
 80022bc:	462a      	mov	r2, r5
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	3303      	adds	r3, #3
 80022c6:	3307      	adds	r3, #7
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	ebad 0d03 	sub.w	sp, sp, r3
 80022d0:	ab02      	add	r3, sp, #8
 80022d2:	3303      	adds	r3, #3
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	613b      	str	r3, [r7, #16]

    for (int i=0; i<dim; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
 80022de:	e03e      	b.n	800235e <adjoint+0x194>
    {
        for (int j=0; j<dim; j++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
 80022e4:	e034      	b.n	8002350 <adjoint+0x186>
        {
            // Get cofactor of A[i][j]
            cofactor(dim, A, temp, i, j, dim);
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff fe45 	bl	8001f84 <cofactor>

            // sign of adj[j][i] positive if sum of row
            // and column indexes is even.
            sign = ((i+j)%2==0)? 1: -1;
 80022fa:	6a3a      	ldr	r2, [r7, #32]
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	4413      	add	r3, r2
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <adjoint+0x142>
 8002308:	2301      	movs	r3, #1
 800230a:	e001      	b.n	8002310 <adjoint+0x146>
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
 8002310:	61fb      	str	r3, [r7, #28]

            // Interchanging rows and columns to get the
            // transpose of the cofactor matrix
            adj[j][i] = (sign)*(determinant(dim, temp, dim-1));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800231c:	6939      	ldr	r1, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3b01      	subs	r3, #1
 8002322:	461a      	mov	r2, r3
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff fe99 	bl	800205c <determinant>
 800232a:	eef0 7a40 	vmov.f32	s15, s0
 800232e:	4632      	mov	r2, r6
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	fb03 f302 	mul.w	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	441a      	add	r2, r3
 800233c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<dim; j++)
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	3301      	adds	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbc6      	blt.n	80022e6 <adjoint+0x11c>
    for (int i=0; i<dim; i++)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	3301      	adds	r3, #1
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	6a3a      	ldr	r2, [r7, #32]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	429a      	cmp	r2, r3
 8002364:	dbbc      	blt.n	80022e0 <adjoint+0x116>
 8002366:	46c5      	mov	sp, r8
        }
    }
}
 8002368:	3730      	adds	r7, #48	; 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	ecbd 8b02 	vpop	{d8}
 8002370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002374 <inverse>:

/* Function to calculate and store inverse, returns false if matrix is singular */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
bool inverse(int dim, float A[dim][dim], float A_inv[dim][dim], float lambda)
{
 8002374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002378:	b095      	sub	sp, #84	; 0x54
 800237a:	af02      	add	r7, sp, #8
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	ed87 0a00 	vstr	s0, [r7]
bool inverse(int dim, float A[dim][dim], float A_inv[dim][dim], float lambda)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	63ba      	str	r2, [r7, #56]	; 0x38
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	f04f 0400 	mov.w	r4, #0
 800239a:	0154      	lsls	r4, r2, #5
 800239c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023a0:	014b      	lsls	r3, r1, #5
 80023a2:	68fe      	ldr	r6, [r7, #12]
 80023a4:	1e73      	subs	r3, r6, #1
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a8:	4633      	mov	r3, r6
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	0154      	lsls	r4, r2, #5
 80023ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023be:	014b      	lsls	r3, r1, #5
{
 80023c0:	466b      	mov	r3, sp
 80023c2:	4699      	mov	r9, r3
	/* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[dim][dim];
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	68fd      	ldr	r5, [r7, #12]
 80023c8:	1e43      	subs	r3, r0, #1
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
 80023cc:	4603      	mov	r3, r0
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	0154      	lsls	r4, r2, #5
 80023de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023e2:	014b      	lsls	r3, r1, #5
 80023e4:	1e6b      	subs	r3, r5, #1
 80023e6:	647b      	str	r3, [r7, #68]	; 0x44
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	462b      	mov	r3, r5
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	fb03 fe02 	mul.w	lr, r3, r2
 80023fa:	fb01 fc04 	mul.w	ip, r1, r4
 80023fe:	44f4      	add	ip, lr
 8002400:	fba1 3403 	umull	r3, r4, r1, r3
 8002404:	eb0c 0204 	add.w	r2, ip, r4
 8002408:	4614      	mov	r4, r2
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	0162      	lsls	r2, r4, #5
 8002414:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002418:	0159      	lsls	r1, r3, #5
 800241a:	4603      	mov	r3, r0
 800241c:	4619      	mov	r1, r3
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	462b      	mov	r3, r5
 8002424:	f04f 0400 	mov.w	r4, #0
 8002428:	fb03 fe02 	mul.w	lr, r3, r2
 800242c:	fb01 fc04 	mul.w	ip, r1, r4
 8002430:	44f4      	add	ip, lr
 8002432:	fba1 3403 	umull	r3, r4, r1, r3
 8002436:	eb0c 0204 	add.w	r2, ip, r4
 800243a:	4614      	mov	r4, r2
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	0162      	lsls	r2, r4, #5
 8002446:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800244a:	0159      	lsls	r1, r3, #5
 800244c:	4603      	mov	r3, r0
 800244e:	462a      	mov	r2, r5
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	3303      	adds	r3, #3
 8002458:	3307      	adds	r3, #7
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	ebad 0d03 	sub.w	sp, sp, r3
 8002462:	ab02      	add	r3, sp, #8
 8002464:	3303      	adds	r3, #3
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lambda_diag[dim][dim];
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	68fd      	ldr	r5, [r7, #12]
 8002470:	1e43      	subs	r3, r0, #1
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
 8002474:	4603      	mov	r3, r0
 8002476:	4619      	mov	r1, r3
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f04f 0400 	mov.w	r4, #0
 8002484:	0154      	lsls	r4, r2, #5
 8002486:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800248a:	014b      	lsls	r3, r1, #5
 800248c:	1e6b      	subs	r3, r5, #1
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	462b      	mov	r3, r5
 800249a:	f04f 0400 	mov.w	r4, #0
 800249e:	fb03 fe02 	mul.w	lr, r3, r2
 80024a2:	fb01 fc04 	mul.w	ip, r1, r4
 80024a6:	44f4      	add	ip, lr
 80024a8:	fba1 3403 	umull	r3, r4, r1, r3
 80024ac:	eb0c 0204 	add.w	r2, ip, r4
 80024b0:	4614      	mov	r4, r2
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	0162      	lsls	r2, r4, #5
 80024bc:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80024c0:	0159      	lsls	r1, r3, #5
 80024c2:	4603      	mov	r3, r0
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	462b      	mov	r3, r5
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	fb03 fe02 	mul.w	lr, r3, r2
 80024d4:	fb01 fc04 	mul.w	ip, r1, r4
 80024d8:	44f4      	add	ip, lr
 80024da:	fba1 3403 	umull	r3, r4, r1, r3
 80024de:	eb0c 0204 	add.w	r2, ip, r4
 80024e2:	4614      	mov	r4, r2
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	0162      	lsls	r2, r4, #5
 80024ee:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	4603      	mov	r3, r0
 80024f6:	462a      	mov	r2, r5
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	3303      	adds	r3, #3
 8002500:	3307      	adds	r3, #7
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	ebad 0d03 	sub.w	sp, sp, r3
 800250a:	ab02      	add	r3, sp, #8
 800250c:	3303      	adds	r3, #3
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	623b      	str	r3, [r7, #32]
	eye(dim, lambda_diag);
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	4619      	mov	r1, r3
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fa06 	bl	800192a <eye>
	scalarmatprod(dim, dim, lambda, lambda_diag, lambda_diag);
 800251e:	6a3a      	ldr	r2, [r7, #32]
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	ed97 0a00 	vldr	s0, [r7]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fccf 	bl	8001ecc <scalarmatprod>
	matadd(dim, dim, A, lambda_diag, A_dash);
 800252e:	6a3a      	ldr	r2, [r7, #32]
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff faeb 	bl	8001b16 <matadd>

    // Find determinant of A[][]
    float det = determinant(dim, A_dash, dim);
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4619      	mov	r1, r3
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff fd88 	bl	800205c <determinant>
 800254c:	ed87 0a07 	vstr	s0, [r7, #28]

    if (det == 0)
 8002550:	edd7 7a07 	vldr	s15, [r7, #28]
 8002554:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d104      	bne.n	8002568 <inverse+0x1f4>
    {
        printf("Singular matrix, can't find its inverse\n");
 800255e:	484c      	ldr	r0, [pc, #304]	; (8002690 <inverse+0x31c>)
 8002560:	f014 fd46 	bl	8016ff0 <puts>
        return false;
 8002564:	2300      	movs	r3, #0
 8002566:	e08d      	b.n	8002684 <inverse+0x310>
    }

    // Find adjoint
    float adj[dim][dim];
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	68fd      	ldr	r5, [r7, #12]
 800256c:	1e43      	subs	r3, r0, #1
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	4603      	mov	r3, r0
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	0154      	lsls	r4, r2, #5
 8002582:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002586:	014b      	lsls	r3, r1, #5
 8002588:	4603      	mov	r3, r0
 800258a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800258e:	1e6b      	subs	r3, r5, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	4603      	mov	r3, r0
 8002594:	4619      	mov	r1, r3
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	462b      	mov	r3, r5
 800259c:	f04f 0400 	mov.w	r4, #0
 80025a0:	fb03 fe02 	mul.w	lr, r3, r2
 80025a4:	fb01 fc04 	mul.w	ip, r1, r4
 80025a8:	44f4      	add	ip, lr
 80025aa:	fba1 3403 	umull	r3, r4, r1, r3
 80025ae:	eb0c 0204 	add.w	r2, ip, r4
 80025b2:	4614      	mov	r4, r2
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	0162      	lsls	r2, r4, #5
 80025be:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	462b      	mov	r3, r5
 80025ce:	f04f 0400 	mov.w	r4, #0
 80025d2:	fb03 fe02 	mul.w	lr, r3, r2
 80025d6:	fb01 fc04 	mul.w	ip, r1, r4
 80025da:	44f4      	add	ip, lr
 80025dc:	fba1 3403 	umull	r3, r4, r1, r3
 80025e0:	eb0c 0204 	add.w	r2, ip, r4
 80025e4:	4614      	mov	r4, r2
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	0162      	lsls	r2, r4, #5
 80025f0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80025f4:	0159      	lsls	r1, r3, #5
 80025f6:	4603      	mov	r3, r0
 80025f8:	462a      	mov	r2, r5
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	3303      	adds	r3, #3
 8002602:	3307      	adds	r3, #7
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	ebad 0d03 	sub.w	sp, sp, r3
 800260c:	ab02      	add	r3, sp, #8
 800260e:	3303      	adds	r3, #3
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	613b      	str	r3, [r7, #16]
    adjoint(dim, A_dash, adj);
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4619      	mov	r1, r3
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff fdd4 	bl	80021ca <adjoint>

    // Find Inverse using formula "inverse(A) = adj(A)/det(A)"
    for (int i=0; i<dim; i++) {
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
 8002626:	e028      	b.n	800267a <inverse+0x306>
        for (int j=0; j<dim; j++) {
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
 800262c:	e01e      	b.n	800266c <inverse+0x2f8>
            A_inv[i][j] = adj[i][j] / ((float) det);
 800262e:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002636:	fb01 f103 	mul.w	r1, r1, r3
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	440b      	add	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	edd3 6a00 	vldr	s13, [r3]
 8002646:	4632      	mov	r2, r6
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	fb03 f302 	mul.w	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	441a      	add	r2, r3
 8002654:	ed97 7a07 	vldr	s14, [r7, #28]
 8002658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<dim; j++) {
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	3301      	adds	r3, #1
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
 800266c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	dbdc      	blt.n	800262e <inverse+0x2ba>
    for (int i=0; i<dim; i++) {
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	3301      	adds	r3, #1
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
 800267a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	429a      	cmp	r2, r3
 8002680:	dbd2      	blt.n	8002628 <inverse+0x2b4>
		}
	}

    return true;
 8002682:	2301      	movs	r3, #1
 8002684:	46cd      	mov	sp, r9
}
 8002686:	4618      	mov	r0, r3
 8002688:	374c      	adds	r7, #76	; 0x4c
 800268a:	46bd      	mov	sp, r7
 800268c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002690:	08019ba0 	.word	0x08019ba0

08002694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_MspInit+0x4c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_MspInit+0x4c>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	210f      	movs	r1, #15
 80026ce:	f06f 0001 	mvn.w	r0, #1
 80026d2:	f002 fd75 	bl	80051c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_SD_MspInit+0x1b4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	f040 80c3 	bne.w	800288e <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_SD_MspInit+0x1b8>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_SD_MspInit+0x1b8>)
 800270e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002712:	6453      	str	r3, [r2, #68]	; 0x44
 8002714:	4b61      	ldr	r3, [pc, #388]	; (800289c <HAL_SD_MspInit+0x1b8>)
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002720:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_SD_MspInit+0x1b8>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a5d      	ldr	r2, [pc, #372]	; (800289c <HAL_SD_MspInit+0x1b8>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6313      	str	r3, [r2, #48]	; 0x30
 800272c:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_SD_MspInit+0x1b8>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002738:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_SD_MspInit+0x1b8>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_SD_MspInit+0x1b8>)
 800273e:	f043 0308 	orr.w	r3, r3, #8
 8002742:	6313      	str	r3, [r2, #48]	; 0x30
 8002744:	4b55      	ldr	r3, [pc, #340]	; (800289c <HAL_SD_MspInit+0x1b8>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002750:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002754:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002762:	230c      	movs	r3, #12
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	484c      	ldr	r0, [pc, #304]	; (80028a0 <HAL_SD_MspInit+0x1bc>)
 800276e:	f003 f8f5 	bl	800595c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002772:	2304      	movs	r3, #4
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002782:	230c      	movs	r3, #12
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	4845      	ldr	r0, [pc, #276]	; (80028a4 <HAL_SD_MspInit+0x1c0>)
 800278e:	f003 f8e5 	bl	800595c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002792:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 8002794:	4a45      	ldr	r2, [pc, #276]	; (80028ac <HAL_SD_MspInit+0x1c8>)
 8002796:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 800279a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800279e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a6:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027ac:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027b4:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ba:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027c2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80027c4:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027c6:	2220      	movs	r2, #32
 80027c8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027ca:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027d0:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027d2:	2204      	movs	r2, #4
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027d8:	2203      	movs	r2, #3
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80027ec:	482e      	ldr	r0, [pc, #184]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 80027ee:	f002 fd11 	bl	8005214 <HAL_DMA_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80027f8:	f7ff f890 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a2a      	ldr	r2, [pc, #168]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
 8002802:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <HAL_SD_MspInit+0x1c4>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_SD_MspInit+0x1d0>)
 800280c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002810:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002814:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002828:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 800282c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002830:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002838:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 800283c:	2220      	movs	r2, #32
 800283e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002848:	2204      	movs	r2, #4
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 800284e:	2203      	movs	r2, #3
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002854:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 800285c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002862:	4813      	ldr	r0, [pc, #76]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002864:	f002 fcd6 	bl	8005214 <HAL_DMA_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800286e:	f7ff f855 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <HAL_SD_MspInit+0x1cc>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2105      	movs	r1, #5
 8002882:	2031      	movs	r0, #49	; 0x31
 8002884:	f002 fc9c 	bl	80051c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002888:	2031      	movs	r0, #49	; 0x31
 800288a:	f002 fcb5 	bl	80051f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	2000ccb0 	.word	0x2000ccb0
 80028ac:	40026458 	.word	0x40026458
 80028b0:	20014e30 	.word	0x20014e30
 80028b4:	400264a0 	.word	0x400264a0

080028b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	; 0x38
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a68      	ldr	r2, [pc, #416]	; (8002a78 <HAL_SPI_MspInit+0x1c0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d131      	bne.n	800293e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028da:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a67      	ldr	r2, [pc, #412]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80028e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800290a:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800291c:	2305      	movs	r3, #5
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	4619      	mov	r1, r3
 8002926:	4856      	ldr	r0, [pc, #344]	; (8002a80 <HAL_SPI_MspInit+0x1c8>)
 8002928:	f003 f818 	bl	800595c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800292c:	2200      	movs	r2, #0
 800292e:	2105      	movs	r1, #5
 8002930:	2023      	movs	r0, #35	; 0x23
 8002932:	f002 fc45 	bl	80051c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002936:	2023      	movs	r0, #35	; 0x23
 8002938:	f002 fc5e 	bl	80051f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800293c:	e097      	b.n	8002a6e <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <HAL_SPI_MspInit+0x1cc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d131      	bne.n	80029ac <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002948:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	4a4b      	ldr	r2, [pc, #300]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 800294e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002952:	6413      	str	r3, [r2, #64]	; 0x40
 8002954:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a45      	ldr	r2, [pc, #276]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b43      	ldr	r3, [pc, #268]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002978:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800298a:	2305      	movs	r3, #5
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	4619      	mov	r1, r3
 8002994:	483c      	ldr	r0, [pc, #240]	; (8002a88 <HAL_SPI_MspInit+0x1d0>)
 8002996:	f002 ffe1 	bl	800595c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2105      	movs	r1, #5
 800299e:	2024      	movs	r0, #36	; 0x24
 80029a0:	f002 fc0e 	bl	80051c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80029a4:	2024      	movs	r0, #36	; 0x24
 80029a6:	f002 fc27 	bl	80051f8 <HAL_NVIC_EnableIRQ>
}
 80029aa:	e060      	b.n	8002a6e <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_SPI_MspInit+0x1d4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d15b      	bne.n	8002a6e <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029b6:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_SPI_MspInit+0x1c4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029fe:	2310      	movs	r3, #16
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a0e:	2306      	movs	r3, #6
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a16:	4619      	mov	r1, r3
 8002a18:	4819      	ldr	r0, [pc, #100]	; (8002a80 <HAL_SPI_MspInit+0x1c8>)
 8002a1a:	f002 ff9f 	bl	800595c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002a2e:	2307      	movs	r3, #7
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	4619      	mov	r1, r3
 8002a38:	4813      	ldr	r0, [pc, #76]	; (8002a88 <HAL_SPI_MspInit+0x1d0>)
 8002a3a:	f002 ff8f 	bl	800595c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a3e:	2318      	movs	r3, #24
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a4e:	2306      	movs	r3, #6
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	480b      	ldr	r0, [pc, #44]	; (8002a88 <HAL_SPI_MspInit+0x1d0>)
 8002a5a:	f002 ff7f 	bl	800595c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2105      	movs	r1, #5
 8002a62:	2033      	movs	r0, #51	; 0x33
 8002a64:	f002 fbac 	bl	80051c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002a68:	2033      	movs	r0, #51	; 0x33
 8002a6a:	f002 fbc5 	bl	80051f8 <HAL_NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3738      	adds	r7, #56	; 0x38
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40013000 	.word	0x40013000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40003800 	.word	0x40003800
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40003c00 	.word	0x40003c00

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <HAL_UART_MspInit+0x7c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d128      	bne.n	8002b04 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_UART_MspInit+0x80>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_UART_MspInit+0x80>)
 8002ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_UART_MspInit+0x80>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_UART_MspInit+0x80>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <HAL_UART_MspInit+0x80>)
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_UART_MspInit+0x80>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ae2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002af4:	2308      	movs	r3, #8
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <HAL_UART_MspInit+0x84>)
 8002b00:	f002 ff2c 	bl	800595c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40007800 	.word	0x40007800
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40021000 	.word	0x40021000

08002b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	2019      	movs	r0, #25
 8002b2e:	f002 fb47 	bl	80051c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002b32:	2019      	movs	r0, #25
 8002b34:	f002 fb60 	bl	80051f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <HAL_InitTick+0xa0>)
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_InitTick+0xa0>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6453      	str	r3, [r2, #68]	; 0x44
 8002b44:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <HAL_InitTick+0xa0>)
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b50:	f107 0210 	add.w	r2, r7, #16
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 ff1c 	bl	8007998 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002b60:	f004 ff06 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 8002b64:	4603      	mov	r3, r0
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <HAL_InitTick+0xa4>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0c9b      	lsrs	r3, r3, #18
 8002b74:	3b01      	subs	r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <HAL_InitTick+0xac>)
 8002b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002b98:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002b9a:	f007 fc2e 	bl	800a3fa <HAL_TIM_Base_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002ba4:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002ba6:	f007 fc5d 	bl	800a464 <HAL_TIM_Base_Start_IT>
 8002baa:	4603      	mov	r3, r0
 8002bac:	e000      	b.n	8002bb0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3730      	adds	r7, #48	; 0x30
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	20014e98 	.word	0x20014e98
 8002bc4:	40010000 	.word	0x40010000

08002bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <HardFault_Handler+0x4>

08002bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <MemManage_Handler+0x4>

08002be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <BusFault_Handler+0x4>

08002be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <UsageFault_Handler+0x4>

08002bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c02:	f007 fc59 	bl	800a4b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20014e98 	.word	0x20014e98

08002c10 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <SPI1_IRQHandler+0x10>)
 8002c16:	f006 ff87 	bl	8009b28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20010d10 	.word	0x20010d10

08002c24 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <SPI2_IRQHandler+0x10>)
 8002c2a:	f006 ff7d 	bl	8009b28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20008880 	.word	0x20008880

08002c38 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <SDMMC1_IRQHandler+0x10>)
 8002c3e:	f005 fd05 	bl	800864c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200089c8 	.word	0x200089c8

08002c4c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <SPI3_IRQHandler+0x10>)
 8002c52:	f006 ff69 	bl	8009b28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000aa50 	.word	0x2000aa50

08002c60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA2_Stream3_IRQHandler+0x10>)
 8002c66:	f002 fc05 	bl	8005474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000ccb0 	.word	0x2000ccb0

08002c74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <OTG_FS_IRQHandler+0x10>)
 8002c7a:	f003 f978 	bl	8005f6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20016cc0 	.word	0x20016cc0

08002c88 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <DMA2_Stream6_IRQHandler+0x10>)
 8002c8e:	f002 fbf1 	bl	8005474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20014e30 	.word	0x20014e30

08002c9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e00a      	b.n	8002cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cae:	f3af 8000 	nop.w
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	60ba      	str	r2, [r7, #8]
 8002cba:	b2ca      	uxtb	r2, r1
 8002cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	dbf0      	blt.n	8002cae <_read+0x12>
	}

return len;
 8002ccc:	687b      	ldr	r3, [r7, #4]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e009      	b.n	8002cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	60ba      	str	r2, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbf1      	blt.n	8002ce8 <_write+0x12>
	}
	return len;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_close>:

int _close(int file)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
	return -1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d36:	605a      	str	r2, [r3, #4]
	return 0;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_isatty>:

int _isatty(int file)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
	return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <_sbrk+0x50>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <_sbrk+0x16>
		heap_end = &end;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <_sbrk+0x50>)
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <_sbrk+0x54>)
 8002d8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <_sbrk+0x50>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <_sbrk+0x50>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	466a      	mov	r2, sp
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d907      	bls.n	8002db2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002da2:	f013 ffd3 	bl	8016d4c <__errno>
 8002da6:	4602      	mov	r2, r0
 8002da8:	230c      	movs	r3, #12
 8002daa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
 8002db0:	e006      	b.n	8002dc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <_sbrk+0x50>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	4a03      	ldr	r2, [pc, #12]	; (8002dc8 <_sbrk+0x50>)
 8002dbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	2000031c 	.word	0x2000031c
 8002dcc:	200170c8 	.word	0x200170c8

08002dd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <SystemInit+0x5c>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <SystemInit+0x5c>)
 8002ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <SystemInit+0x60>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <SystemInit+0x60>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <SystemInit+0x60>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <SystemInit+0x60>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	490d      	ldr	r1, [pc, #52]	; (8002e30 <SystemInit+0x60>)
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <SystemInit+0x64>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <SystemInit+0x60>)
 8002e04:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <SystemInit+0x68>)
 8002e06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <SystemInit+0x60>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <SystemInit+0x60>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <SystemInit+0x60>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SystemInit+0x5c>)
 8002e1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e20:	609a      	str	r2, [r3, #8]
#endif
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	fef6ffff 	.word	0xfef6ffff
 8002e38:	24003010 	.word	0x24003010

08002e3c <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b0b3      	sub	sp, #204	; 0xcc
 8002e40:	af06      	add	r7, sp, #24
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	72fb      	strb	r3, [r7, #11]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	2296      	movs	r2, #150	; 0x96
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f013 ffbd 	bl	8016dd6 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8002e5c:	7afb      	ldrb	r3, [r7, #11]
 8002e5e:	7aba      	ldrb	r2, [r7, #10]
 8002e60:	f107 0010 	add.w	r0, r7, #16
 8002e64:	9202      	str	r2, [sp, #8]
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2301      	movs	r3, #1
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a41      	ldr	r2, [pc, #260]	; (8002f74 <logSensor+0x138>)
 8002e70:	2196      	movs	r1, #150	; 0x96
 8002e72:	f014 f8d5 	bl	8017020 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8002e76:	7abb      	ldrb	r3, [r7, #10]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d002      	beq.n	8002e82 <logSensor+0x46>
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d01d      	beq.n	8002ebc <logSensor+0x80>
 8002e80:	e055      	b.n	8002f2e <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd f9bf 	bl	8000210 <strlen>
 8002e92:	4602      	mov	r2, r0
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	1898      	adds	r0, r3, r2
 8002e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	9201      	str	r2, [sp, #4]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <logSensor+0x13c>)
 8002eb4:	2196      	movs	r1, #150	; 0x96
 8002eb6:	f014 f8b3 	bl	8017020 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8002eba:	e04e      	b.n	8002f5a <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ec2:	f107 0310 	add.w	r3, r7, #16
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd f9a2 	bl	8000210 <strlen>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8002ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ed8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002edc:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ee6:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ef0:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002efa:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f04:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f0e:	461e      	mov	r6, r3
 8002f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	9305      	str	r3, [sp, #20]
 8002f18:	9604      	str	r6, [sp, #16]
 8002f1a:	9503      	str	r5, [sp, #12]
 8002f1c:	9402      	str	r4, [sp, #8]
 8002f1e:	9101      	str	r1, [sp, #4]
 8002f20:	9200      	str	r2, [sp, #0]
 8002f22:	4663      	mov	r3, ip
 8002f24:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <logSensor+0x140>)
 8002f26:	2196      	movs	r1, #150	; 0x96
 8002f28:	f014 f87a 	bl	8017020 <sniprintf>
	}
		break;
 8002f2c:	e015      	b.n	8002f5a <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd f96c 	bl	8000210 <strlen>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <logSensor+0x144>)
 8002f42:	461d      	mov	r5, r3
 8002f44:	4614      	mov	r4, r2
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	6028      	str	r0, [r5, #0]
 8002f4a:	6069      	str	r1, [r5, #4]
 8002f4c:	60aa      	str	r2, [r5, #8]
 8002f4e:	60eb      	str	r3, [r5, #12]
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	6128      	str	r0, [r5, #16]
 8002f54:	7923      	ldrb	r3, [r4, #4]
 8002f56:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8002f58:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <logSensor+0x148>)
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	f107 0110 	add.w	r1, r7, #16
 8002f62:	2300      	movs	r3, #0
 8002f64:	2200      	movs	r2, #0
 8002f66:	f00f fea9 	bl	8012cbc <osMessageQueuePut>
 8002f6a:	4603      	mov	r3, r0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	37b4      	adds	r7, #180	; 0xb4
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f74:	08019bc8 	.word	0x08019bc8
 8002f78:	08019bd8 	.word	0x08019bd8
 8002f7c:	08019be8 	.word	0x08019be8
 8002f80:	08019c08 	.word	0x08019c08
 8002f84:	20010d74 	.word	0x20010d74

08002f88 <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002f88:	b084      	sub	sp, #16
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b0ac      	sub	sp, #176	; 0xb0
 8002f8e:	af04      	add	r7, sp, #16
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	2296      	movs	r2, #150	; 0x96
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f013 ff17 	bl	8016dd6 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 8002fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fb0:	f107 0008 	add.w	r0, r7, #8
 8002fb4:	9202      	str	r2, [sp, #8]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	2303      	movs	r3, #3
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <logEstimatorVar+0x60>)
 8002fc0:	2196      	movs	r1, #150	; 0x96
 8002fc2:	f014 f82d 	bl	8017020 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <logEstimatorVar+0x64>)
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	f107 0108 	add.w	r1, r7, #8
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f00f fe73 	bl	8012cbc <osMessageQueuePut>
 8002fd6:	4603      	mov	r3, r0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	37a0      	adds	r7, #160	; 0xa0
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe2:	b004      	add	sp, #16
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	08019c2c 	.word	0x08019c2c
 8002fec:	20010d74 	.word	0x20010d74

08002ff0 <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8002ff0:	b40f      	push	{r0, r1, r2, r3}
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <UsbPrint+0x60>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f00f fb64 	bl	80126d0 <osMutexAcquire>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	21c8      	movs	r1, #200	; 0xc8
 800301a:	480e      	ldr	r0, [pc, #56]	; (8003054 <UsbPrint+0x64>)
 800301c:	f014 f860 	bl	80170e0 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <UsbPrint+0x64>)
 8003022:	f7fd f8f5 	bl	8000210 <strlen>
 8003026:	4603      	mov	r3, r0
 8003028:	b29b      	uxth	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	4809      	ldr	r0, [pc, #36]	; (8003054 <UsbPrint+0x64>)
 800302e:	f013 f9e3 	bl	80163f8 <CDC_Transmit_FS>
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <UsbPrint+0x60>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f00f fba6 	bl	801278c <osMutexRelease>
	}
#endif
	return ret;
 8003040:	79fb      	ldrb	r3, [r7, #7]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800304c:	b004      	add	sp, #16
 800304e:	4770      	bx	lr
 8003050:	2000cc50 	.word	0x2000cc50
 8003054:	2000aab4 	.word	0x2000aab4

08003058 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800305e:	af00      	add	r7, sp, #0
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 8003064:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003068:	4618      	mov	r0, r3
 800306a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800306e:	461a      	mov	r2, r3
 8003070:	2100      	movs	r1, #0
 8003072:	f013 feb0 	bl	8016dd6 <memset>

	state_est_data_t state_placeholder;

	/* State Estimation Values */
	float sf_velocity = 0;
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	float sf_height = 0;
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	461a      	mov	r2, r3
 800308c:	2300      	movs	r3, #0
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	6053      	str	r3, [r2, #4]
 8003092:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 8003094:	f107 0308 	add.w	r3, r7, #8
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	float control_input = 0;
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	float integrated_error = 0;
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	float previous_control_input = 0;
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 80030be:	2301      	movs	r3, #1
 80030c0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80030c4:	f00f f924 	bl	8012310 <osKernelGetTickCount>
 80030c8:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80030cc:	f00f f948 	bl	8012360 <osKernelGetTickFreq>
 80030d0:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80030d4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80030d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80030dc:	4413      	add	r3, r2
 80030de:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

		/* Update Sensor Fusion Variables */

		if (osMutexGetOwner(state_est_mutex) == NULL) {
 80030e2:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <vTaskController+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00f fba0 	bl	801282c <osMutexGetOwner>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d12b      	bne.n	800314a <vTaskController+0xf2>
			state_placeholder.position_world[2] = state_est_data.position_world[2];
 80030f2:	4b76      	ldr	r3, [pc, #472]	; (80032cc <vTaskController+0x274>)
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	609a      	str	r2, [r3, #8]
			state_placeholder.velocity_world[2] = state_est_data.velocity_world[2];
 80030fc:	4b73      	ldr	r3, [pc, #460]	; (80032cc <vTaskController+0x274>)
 80030fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003100:	f107 0318 	add.w	r3, r7, #24
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c
			if (osMutexGetOwner(state_est_mutex) == NULL) {
 8003106:	4b70      	ldr	r3, [pc, #448]	; (80032c8 <vTaskController+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f00f fb8e 	bl	801282c <osMutexGetOwner>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d119      	bne.n	800314a <vTaskController+0xf2>
				sf_velocity = ((float) state_placeholder.velocity_world[2]) / 1000;
 8003116:	f107 0318 	add.w	r3, r7, #24
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003124:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80032d0 <vTaskController+0x278>
 8003128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800312c:	edc7 7a94 	vstr	s15, [r7, #592]	; 0x250
				sf_height = ((float) state_placeholder.velocity_world[2]) / 1000;
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800313e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80032d0 <vTaskController+0x278>
 8003142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003146:	edc7 7a93 	vstr	s15, [r7, #588]	; 0x24c
			}
		}

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 800314a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800314e:	f107 010c 	add.w	r1, r7, #12
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	4618      	mov	r0, r3
 8003158:	ed97 0a93 	vldr	s0, [r7, #588]	; 0x24c
 800315c:	f000 f8be 	bl	80032dc <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	ed97 7a94 	vldr	s14, [r7, #592]	; 0x250
 800316c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003170:	edc7 7a90 	vstr	s15, [r7, #576]	; 0x240

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8003174:	f107 030c 	add.w	r3, r7, #12
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	eeb1 7a67 	vneg.f32	s14, s15
 8003180:	edd7 7a90 	vldr	s15, [r7, #576]	; 0x240
 8003184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003190:	edd7 7a92 	vldr	s15, [r7, #584]	; 0x248
 8003194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003198:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80031a4:	edd7 7a91 	vldr	s15, [r7, #580]	; 0x244
 80031a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ac:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 80031b0:	ed97 7a91 	vldr	s14, [r7, #580]	; 0x244
 80031b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b8:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 80031bc:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 80031c0:	f7fd f9e2 	bl	8000588 <__aeabi_f2d>
 80031c4:	4603      	mov	r3, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80032a8 <vTaskController+0x250>
 80031cc:	ec44 3b10 	vmov	d0, r3, r4
 80031d0:	f014 fe29 	bl	8017e26 <fmin>
 80031d4:	eeb0 7a40 	vmov.f32	s14, s0
 80031d8:	eef0 7a60 	vmov.f32	s15, s1
 80031dc:	eeb0 1a47 	vmov.f32	s2, s14
 80031e0:	eef0 1a67 	vmov.f32	s3, s15
 80031e4:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80032b0 <vTaskController+0x258>
 80031e8:	f014 fdf6 	bl	8017dd8 <fmax>
 80031ec:	ec54 3b10 	vmov	r3, r4, d0
 80031f0:	4618      	mov	r0, r3
 80031f2:	4621      	mov	r1, r4
 80031f4:	f7fd fcd0 	bl	8000b98 <__aeabi_d2f>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

		/* Write Control Input into Global Variable */
		if (osMutexAcquire(controller_mutex, 10) == osOK) {
 80031fe:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <vTaskController+0x27c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	210a      	movs	r1, #10
 8003204:	4618      	mov	r0, r3
 8003206:	f00f fa63 	bl	80126d0 <osMutexAcquire>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d110      	bne.n	8003232 <vTaskController+0x1da>
			controller_output = (int32_t) (control_input*1000);
 8003210:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 8003214:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80032d0 <vTaskController+0x278>
 8003218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003220:	ee17 2a90 	vmov	r2, s15
 8003224:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <vTaskController+0x280>)
 8003226:	601a      	str	r2, [r3, #0]
			osMutexRelease(controller_mutex);
 8003228:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <vTaskController+0x27c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f00f faad 	bl	801278c <osMutexRelease>
		}

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 8003232:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800323e:	edd7 7a90 	vldr	s15, [r7, #576]	; 0x240
 8003242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003246:	edd7 7a92 	vldr	s15, [r7, #584]	; 0x248
 800324a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324e:	ee17 0a90 	vmov	r0, s15
 8003252:	f7fd f999 	bl	8000588 <__aeabi_f2d>
 8003256:	4603      	mov	r3, r0
 8003258:	460c      	mov	r4, r1
 800325a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80032b8 <vTaskController+0x260>
 800325e:	ec44 3b10 	vmov	d0, r3, r4
 8003262:	f014 fde0 	bl	8017e26 <fmin>
 8003266:	eeb0 7a40 	vmov.f32	s14, s0
 800326a:	eef0 7a60 	vmov.f32	s15, s1
 800326e:	eeb0 1a47 	vmov.f32	s2, s14
 8003272:	eef0 1a67 	vmov.f32	s3, s15
 8003276:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80032c0 <vTaskController+0x268>
 800327a:	f014 fdad 	bl	8017dd8 <fmax>
 800327e:	ec54 3b10 	vmov	r3, r4, d0
 8003282:	4618      	mov	r0, r3
 8003284:	4621      	mov	r1, r4
 8003286:	f7fd fc87 	bl	8000b98 <__aeabi_d2f>
 800328a:	4603      	mov	r3, r0
 800328c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8003290:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003294:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

		/* Sleep */
		osDelayUntil(tick_count);
 8003298:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 800329c:	f00f f93e 	bl	801251c <osDelayUntil>
		tick_count += tick_update;
 80032a0:	e718      	b.n	80030d4 <vTaskController+0x7c>
 80032a2:	bf00      	nop
 80032a4:	f3af 8000 	nop.w
 80032a8:	00000000 	.word	0x00000000
 80032ac:	3ff00000 	.word	0x3ff00000
	...
 80032bc:	40240000 	.word	0x40240000
 80032c0:	00000000 	.word	0x00000000
 80032c4:	c0240000 	.word	0xc0240000
 80032c8:	2000abf0 	.word	0x2000abf0
 80032cc:	200002c0 	.word	0x200002c0
 80032d0:	447a0000 	.word	0x447a0000
 80032d4:	2000ab7c 	.word	0x2000ab7c
 80032d8:	200002fc 	.word	0x200002fc

080032dc <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80032e6:	60b8      	str	r0, [r7, #8]
 80032e8:	6079      	str	r1, [r7, #4]
 80032ea:	603a      	str	r2, [r7, #0]
	/* For Speed */
	float x_placeholder = 0;
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e06f      	b.n	80033d8 <CalcPolynomial+0xfc>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7fd f945 	bl	8000588 <__aeabi_f2d>
 80032fe:	4604      	mov	r4, r0
 8003300:	460d      	mov	r5, r1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f1c3 031d 	rsb	r3, r3, #29
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f92b 	bl	8000564 <__aeabi_i2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	ec43 2b11 	vmov	d1, r2, r3
 8003316:	ec45 4b10 	vmov	d0, r4, r5
 800331a:	f014 fdd7 	bl	8017ecc <pow>
 800331e:	ec54 3b10 	vmov	r3, r4, d0
 8003322:	4618      	mov	r0, r3
 8003324:	4621      	mov	r1, r4
 8003326:	f7fd fc37 	bl	8000b98 <__aeabi_d2f>
 800332a:	4603      	mov	r3, r0
 800332c:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	ed93 7a00 	vldr	s14, [r3]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	edd3 6a00 	vldr	s13, [r3]
 8003340:	edd7 7a04 	vldr	s15, [r7, #16]
 8003344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3304      	adds	r3, #4
 8003356:	ed93 7a00 	vldr	s14, [r3]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	edd3 6a00 	vldr	s13, [r3]
 800336a:	edd7 7a04 	vldr	s15, [r7, #16]
 800336e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3308      	adds	r3, #8
 8003382:	ed93 7a00 	vldr	s14, [r3]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	edd3 6a00 	vldr	s13, [r3]
 8003396:	edd7 7a04 	vldr	s15, [r7, #16]
 800339a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3308      	adds	r3, #8
 80033a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a6:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	ed93 7a00 	vldr	s14, [r3]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	edd3 6a00 	vldr	s13, [r3]
 80033c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80033c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3301      	adds	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b1d      	cmp	r3, #29
 80033dc:	dd8c      	ble.n	80032f8 <CalcPolynomial+0x1c>
	}

}
 80033de:	bf00      	nop
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033e8 <vTaskFSM>:
void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *env);

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection);


void vTaskFSM(void *argument) {
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b0ae      	sub	sp, #184	; 0xb8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80033f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 80033fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f9ab 	bl	800375c <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8003406:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800340a:	223c      	movs	r2, #60	; 0x3c
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f013 fce1 	bl	8016dd6 <memset>
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 8003414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003418:	223c      	movs	r2, #60	; 0x3c
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f013 fcda 	bl	8016dd6 <memset>

	/* environment data */
	env environment;
	env dummy_env;
	init_env(&dummy_env);
 8003422:	f107 030c 	add.w	r3, r7, #12
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fd86 	bl	8000f38 <init_env>
	init_env(&environment);
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd fd81 	bl	8000f38 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003436:	f00e ff6b 	bl	8012310 <osKernelGetTickCount>
 800343a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 800343e:	f00e ff8f 	bl	8012360 <osKernelGetTickFreq>
 8003442:	4602      	mov	r2, r0
 8003444:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <vTaskFSM+0x150>)
 8003446:	fba3 2302 	umull	r2, r3, r3, r2
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8003450:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003458:	4413      	add	r3, r2
 800345a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <vTaskFSM+0x154>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f00f f9e2 	bl	801282c <osMutexGetOwner>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d123      	bne.n	80034b6 <vTaskFSM+0xce>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data;
 800346e:	4b34      	ldr	r3, [pc, #208]	; (8003540 <vTaskFSM+0x158>)
 8003470:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003474:	461d      	mov	r5, r3
 8003476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800347a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800347c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800347e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003482:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003486:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 800348a:	4b2c      	ldr	r3, [pc, #176]	; (800353c <vTaskFSM+0x154>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f00f f9cc 	bl	801282c <osMutexGetOwner>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <vTaskFSM+0xce>
				state_est_data_fsm = state_est_data_fsm_dummy;
 800349a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800349e:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80034a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}
		/* Update Environment */
		if(osMutexGetOwner(environment_mutex) == NULL){
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <vTaskFSM+0x15c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f00f f9b6 	bl	801282c <osMutexGetOwner>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d114      	bne.n	80034f0 <vTaskFSM+0x108>
			dummy_env = global_env;
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <vTaskFSM+0x160>)
 80034c8:	f107 040c 	add.w	r4, r7, #12
 80034cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <vTaskFSM+0x154>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00f f9a8 	bl	801282c <osMutexGetOwner>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <vTaskFSM+0x108>
				environment = dummy_env;
 80034e2:	f107 041c 	add.w	r4, r7, #28
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 80034f0:	f107 021c 	add.w	r2, r7, #28
 80034f4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80034f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f82b 	bl	8003558 <detect_flight_phase>

		/* TODO Write NEW State in GLobal Variable */
		if(osMutexAcquire(fsm_mutex, 10) == osOK){
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <vTaskFSM+0x164>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	210a      	movs	r1, #10
 8003508:	4618      	mov	r0, r3
 800350a:	f00f f8e1 	bl	80126d0 <osMutexAcquire>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10c      	bne.n	800352e <vTaskFSM+0x146>
			global_flight_phase_detection = flight_phase_detection;
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <vTaskFSM+0x168>)
 8003516:	461c      	mov	r4, r3
 8003518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800351c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(fsm_mutex);
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <vTaskFSM+0x164>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f00f f92f 	bl	801278c <osMutexRelease>
		}

		/* Sleep */
		osDelayUntil(tick_count);
 800352e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003532:	f00e fff3 	bl	801251c <osDelayUntil>
		tick_count += tick_update;
 8003536:	e78b      	b.n	8003450 <vTaskFSM+0x68>
 8003538:	51eb851f 	.word	0x51eb851f
 800353c:	2000abf0 	.word	0x2000abf0
 8003540:	200002c0 	.word	0x200002c0
 8003544:	200089c4 	.word	0x200089c4
 8003548:	20000300 	.word	0x20000300
 800354c:	2000887c 	.word	0x2000887c
 8003550:	20000310 	.word	0x20000310
 8003554:	00000000 	.word	0x00000000

08003558 <detect_flight_phase>:
}


void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *environment)

{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3b01      	subs	r3, #1
 800356a:	2b04      	cmp	r3, #4
 800356c:	f200 80a6 	bhi.w	80036bc <detect_flight_phase+0x164>
 8003570:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <detect_flight_phase+0x20>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	0800358d 	.word	0x0800358d
 800357c:	080036bd 	.word	0x080036bd
 8003580:	080035db 	.word	0x080035db
 8003584:	08003625 	.word	0x08003625
 8003588:	0800366f 	.word	0x0800366f
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 > 20) {
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003598:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003758 <detect_flight_phase+0x200>
 800359c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80035a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	dc00      	bgt.n	80035b0 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80035ae:	e087      	b.n	80036c0 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	b25a      	sxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	dd79      	ble.n	80036c0 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2203      	movs	r2, #3
 80035d0:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	721a      	strb	r2, [r3, #8]
        break;
 80035d8:	e072      	b.n	80036c0 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 < 0) {
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e6:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003758 <detect_flight_phase+0x200>
 80035ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f6:	d400      	bmi.n	80035fa <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80035f8:	e064      	b.n	80036c4 <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	b25a      	sxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003612:	2b03      	cmp	r3, #3
 8003614:	dd56      	ble.n	80036c4 <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2204      	movs	r2, #4
 800361a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	721a      	strb	r2, [r3, #8]
        break;
 8003622:	e04f      	b.n	80036c4 <detect_flight_phase+0x16c>

        case COASTING:
            if (((float)(state_est_data->velocity_world[2]))/1000 < 0) {
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003630:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003758 <detect_flight_phase+0x200>
 8003634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	d400      	bmi.n	8003644 <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003642:	e041      	b.n	80036c8 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	b25a      	sxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800365c:	2b03      	cmp	r3, #3
 800365e:	dd33      	ble.n	80036c8 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2205      	movs	r2, #5
 8003664:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	721a      	strb	r2, [r3, #8]
        break;
 800366c:	e02c      	b.n	80036c8 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2]))/1000 < 20) {
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800367a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003758 <detect_flight_phase+0x200>
 800367e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003682:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	d400      	bmi.n	8003692 <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003690:	e01c      	b.n	80036cc <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3301      	adds	r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	b25a      	sxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	dd0e      	ble.n	80036cc <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2206      	movs	r2, #6
 80036b2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	721a      	strb	r2, [r3, #8]
        break;
 80036ba:	e007      	b.n	80036cc <detect_flight_phase+0x174>

        default:
        break;
 80036bc:	bf00      	nop
 80036be:	e006      	b.n	80036ce <detect_flight_phase+0x176>
        break;
 80036c0:	bf00      	nop
 80036c2:	e004      	b.n	80036ce <detect_flight_phase+0x176>
        break;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <detect_flight_phase+0x176>
        break;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <detect_flight_phase+0x176>
        break;
 80036cc:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(environment, ((float)state_est_data->velocity_rocket[0])/1000);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036da:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003758 <detect_flight_phase+0x200>
 80036de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036e2:	eeb0 0a66 	vmov.f32	s0, s13
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fc7a 	bl	8000fe0 <mach_number>
 80036ec:	eef0 7a40 	vmov.f32	s15, s0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff44 	bl	8000588 <__aeabi_f2d>
 8003700:	a311      	add	r3, pc, #68	; (adr r3, 8003748 <detect_flight_phase+0x1f0>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fd fa1d 	bl	8000b44 <__aeabi_dcmpge>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2203      	movs	r2, #3
 8003714:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }


}
 8003716:	e013      	b.n	8003740 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc ff33 	bl	8000588 <__aeabi_f2d>
 8003722:	a30b      	add	r3, pc, #44	; (adr r3, 8003750 <detect_flight_phase+0x1f8>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f7fd fa0c 	bl	8000b44 <__aeabi_dcmpge>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2202      	movs	r2, #2
 8003736:	705a      	strb	r2, [r3, #1]
}
 8003738:	e002      	b.n	8003740 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	705a      	strb	r2, [r3, #1]
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	cccccccd 	.word	0xcccccccd
 800374c:	3ff4cccc 	.word	0x3ff4cccc
 8003750:	9999999a 	.word	0x9999999a
 8003754:	3fe99999 	.word	0x3fe99999
 8003758:	447a0000 	.word	0x447a0000

0800375c <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	721a      	strb	r2, [r3, #8]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <vTaskMotorCont>:

uint16_t calculateCRC(uint8_t *data, uint8_t len);

uint8_t rx_data[10] = { 0 };

void vTaskMotorCont(void *argument) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b090      	sub	sp, #64	; 0x40
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003794:	f00e fdbc 	bl	8012310 <osKernelGetTickCount>
 8003798:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 800379a:	f00e fde1 	bl	8012360 <osKernelGetTickFreq>
 800379e:	6378      	str	r0, [r7, #52]	; 0x34
	uint8_t counter = 10;
 80037a0:	230a      	movs	r3, #10
 80037a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	for (;;) {
		tick_count += tick_update;
 80037a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	4413      	add	r3, r2
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Command */
		uint8_t byte_stream_read[10] = { 0 };
 80037ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	811a      	strh	r2, [r3, #8]
		byte_stream_read[0] = 0x90;		// DLE
 80037ba:	2390      	movs	r3, #144	; 0x90
 80037bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		byte_stream_read[1] = 0x02;		// STX
 80037c0:	2302      	movs	r3, #2
 80037c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		byte_stream_read[2] = 0x60;		// Read Object
 80037c6:	2360      	movs	r3, #96	; 0x60
 80037c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		byte_stream_read[3] = 0x02;		// Length of stuff sent
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		byte_stream_read[4] = 0x01;		// Node ID
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		byte_stream_read[5] = 0x7A;		// Index Low Byte
 80037d8:	237a      	movs	r3, #122	; 0x7a
 80037da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		byte_stream_read[6] = 0x60;		// Index High byte
 80037de:	2360      	movs	r3, #96	; 0x60
 80037e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		byte_stream_read[7] = 0x00;		// Subindex of object
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		/* CRC data array */
		uint8_t crc_data_array[6] = { 0 };
 80037ea:	f107 031c 	add.w	r3, r7, #28
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	809a      	strh	r2, [r3, #4]
		memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 80037f4:	f107 031c 	add.w	r3, r7, #28
 80037f8:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80037fc:	6810      	ldr	r0, [r2, #0]
 80037fe:	6018      	str	r0, [r3, #0]
 8003800:	8892      	ldrh	r2, [r2, #4]
 8003802:	809a      	strh	r2, [r3, #4]

		uint16_t crc_calc = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	867b      	strh	r3, [r7, #50]	; 0x32
		crc_calc = calculateCRC(crc_data_array, 6);
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	2106      	movs	r1, #6
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f8ca 	bl	80039a8 <calculateCRC>
 8003814:	4603      	mov	r3, r0
 8003816:	867b      	strh	r3, [r7, #50]	; 0x32

		byte_stream_read[8] = crc_calc & 0xFF;;		// CRC low byte
 8003818:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8003820:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b29b      	uxth	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		byte_stream_read[8] = 0x6C;		// CRC low byte
 800382c:	236c      	movs	r3, #108	; 0x6c
 800382e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		byte_stream_read[9] = 0xE6;		// CRC high byte
 8003832:	23e6      	movs	r3, #230	; 0xe6
 8003834:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


		/* rx buffer */
		HAL_StatusTypeDef status;
		status = HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 8003838:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800383c:	230a      	movs	r3, #10
 800383e:	220a      	movs	r2, #10
 8003840:	484e      	ldr	r0, [pc, #312]	; (800397c <vTaskMotorCont+0x1f0>)
 8003842:	f007 f88d 	bl	800a960 <HAL_UART_Transmit>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		HAL_UART_Receive_IT(&huart7, rx_data, 10);
 800384c:	220a      	movs	r2, #10
 800384e:	494c      	ldr	r1, [pc, #304]	; (8003980 <vTaskMotorCont+0x1f4>)
 8003850:	484a      	ldr	r0, [pc, #296]	; (800397c <vTaskMotorCont+0x1f0>)
 8003852:	f007 f917 	bl	800aa84 <HAL_UART_Receive_IT>

		uint8_t byte_stream_write[14] = { 0 };
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	819a      	strh	r2, [r3, #12]

		if (counter > 20){
 8003864:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003868:	2b14      	cmp	r3, #20
 800386a:	d907      	bls.n	800387c <vTaskMotorCont+0xf0>
			counter = 10;
 800386c:	230a      	movs	r3, #10
 800386e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			byte_stream_write[12] = 0x41;		// CRC low byte
 8003872:	2341      	movs	r3, #65	; 0x41
 8003874:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0xBF;		// CRC high byte
 8003876:	23bf      	movs	r3, #191	; 0xbf
 8003878:	767b      	strb	r3, [r7, #25]
 800387a:	e006      	b.n	800388a <vTaskMotorCont+0xfe>
		}
		else{
			byte_stream_write[12] = 0x87;		// CRC low byte
 800387c:	2387      	movs	r3, #135	; 0x87
 800387e:	763b      	strb	r3, [r7, #24]
			byte_stream_write[13] = 0x39;		// CRC high byte
 8003880:	2339      	movs	r3, #57	; 0x39
 8003882:	767b      	strb	r3, [r7, #25]
			counter = 30;
 8003884:	231e      	movs	r3, #30
 8003886:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		/* Write Command */

		byte_stream_write[0] = 0x90;		// DLE
 800388a:	2390      	movs	r3, #144	; 0x90
 800388c:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 800388e:	2302      	movs	r3, #2
 8003890:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 8003892:	2368      	movs	r3, #104	; 0x68
 8003894:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 8003896:	2304      	movs	r3, #4
 8003898:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 800389a:	2301      	movs	r3, #1
 800389c:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x7A;		// Index Low Byte
 800389e:	237a      	movs	r3, #122	; 0x7a
 80038a0:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 80038a2:	2360      	movs	r3, #96	; 0x60
 80038a4:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 80038a6:	2300      	movs	r3, #0
 80038a8:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = counter;		// Data LSB
 80038aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80038ae:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 80038b0:	2300      	movs	r3, #0
 80038b2:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 80038b4:	2300      	movs	r3, #0
 80038b6:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
//		byte_stream_write[12] = 0x41;		// CRC low byte
//		byte_stream_write[13] = 0xBF;		// CRC high byte
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 80038bc:	f107 010c 	add.w	r1, r7, #12
 80038c0:	230a      	movs	r3, #10
 80038c2:	220e      	movs	r2, #14
 80038c4:	482d      	ldr	r0, [pc, #180]	; (800397c <vTaskMotorCont+0x1f0>)
 80038c6:	f007 f84b 	bl	800a960 <HAL_UART_Transmit>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 80038d0:	2001      	movs	r0, #1
 80038d2:	f00e fdf5 	bl	80124c0 <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 80038d6:	2390      	movs	r3, #144	; 0x90
 80038d8:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 80038da:	2302      	movs	r3, #2
 80038dc:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 80038de:	2368      	movs	r3, #104	; 0x68
 80038e0:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 80038e2:	2304      	movs	r3, #4
 80038e4:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 80038e6:	2301      	movs	r3, #1
 80038e8:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 80038ea:	2340      	movs	r3, #64	; 0x40
 80038ec:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 80038ee:	2360      	movs	r3, #96	; 0x60
 80038f0:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 80038f2:	2300      	movs	r3, #0
 80038f4:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x3F;		// Data LSB
 80038f6:	233f      	movs	r3, #63	; 0x3f
 80038f8:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 80038fa:	2300      	movs	r3, #0
 80038fc:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 80038fe:	2300      	movs	r3, #0
 8003900:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0x16;		// CRC low byte
 8003906:	2316      	movs	r3, #22
 8003908:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0xC2;		// CRC high byte
 800390a:	23c2      	movs	r3, #194	; 0xc2
 800390c:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 800390e:	f107 010c 	add.w	r1, r7, #12
 8003912:	230a      	movs	r3, #10
 8003914:	220e      	movs	r2, #14
 8003916:	4819      	ldr	r0, [pc, #100]	; (800397c <vTaskMotorCont+0x1f0>)
 8003918:	f007 f822 	bl	800a960 <HAL_UART_Transmit>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		osDelay(1);
 8003922:	2001      	movs	r0, #1
 8003924:	f00e fdcc 	bl	80124c0 <osDelay>

		byte_stream_write[0] = 0x90;		// DLE
 8003928:	2390      	movs	r3, #144	; 0x90
 800392a:	733b      	strb	r3, [r7, #12]
		byte_stream_write[1] = 0x02;		// STX
 800392c:	2302      	movs	r3, #2
 800392e:	737b      	strb	r3, [r7, #13]
		byte_stream_write[2] = 0x68;		// Write Object
 8003930:	2368      	movs	r3, #104	; 0x68
 8003932:	73bb      	strb	r3, [r7, #14]
		byte_stream_write[3] = 0x04;		// Length of stuff sent
 8003934:	2304      	movs	r3, #4
 8003936:	73fb      	strb	r3, [r7, #15]
		byte_stream_write[4] = 0x01;		// Node ID
 8003938:	2301      	movs	r3, #1
 800393a:	743b      	strb	r3, [r7, #16]
		byte_stream_write[5] = 0x40;		// Index Low Byte
 800393c:	2340      	movs	r3, #64	; 0x40
 800393e:	747b      	strb	r3, [r7, #17]
		byte_stream_write[6] = 0x60;		// Index High byte
 8003940:	2360      	movs	r3, #96	; 0x60
 8003942:	74bb      	strb	r3, [r7, #18]
		byte_stream_write[7] = 0x00;		// Subindex of object
 8003944:	2300      	movs	r3, #0
 8003946:	74fb      	strb	r3, [r7, #19]
		byte_stream_write[8] = 0x0F;		// Data LSB
 8003948:	230f      	movs	r3, #15
 800394a:	753b      	strb	r3, [r7, #20]
		byte_stream_write[9] = 0x00;		//
 800394c:	2300      	movs	r3, #0
 800394e:	757b      	strb	r3, [r7, #21]
		byte_stream_write[10] = 0x00;		//
 8003950:	2300      	movs	r3, #0
 8003952:	75bb      	strb	r3, [r7, #22]
		byte_stream_write[11] = 0x00;		// Data MSB
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]
		byte_stream_write[12] = 0xB3;		// CRC low byte
 8003958:	23b3      	movs	r3, #179	; 0xb3
 800395a:	763b      	strb	r3, [r7, #24]
		byte_stream_write[13] = 0x07;		// CRC high byte
 800395c:	2307      	movs	r3, #7
 800395e:	767b      	strb	r3, [r7, #25]
		status = HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8003960:	f107 010c 	add.w	r1, r7, #12
 8003964:	230a      	movs	r3, #10
 8003966:	220e      	movs	r2, #14
 8003968:	4804      	ldr	r0, [pc, #16]	; (800397c <vTaskMotorCont+0x1f0>)
 800396a:	f006 fff9 	bl	800a960 <HAL_UART_Transmit>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31


		osDelayUntil(tick_count);
 8003974:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003976:	f00e fdd1 	bl	801251c <osDelayUntil>
	for (;;) {
 800397a:	e714      	b.n	80037a6 <vTaskMotorCont+0x1a>
 800397c:	200088e4 	.word	0x200088e4
 8003980:	20000320 	.word	0x20000320

08003984 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart7, rx_data, sizeof(rx_data));
 800398c:	220a      	movs	r2, #10
 800398e:	4904      	ldr	r1, [pc, #16]	; (80039a0 <HAL_UART_RxCpltCallback+0x1c>)
 8003990:	4804      	ldr	r0, [pc, #16]	; (80039a4 <HAL_UART_RxCpltCallback+0x20>)
 8003992:	f007 f877 	bl	800aa84 <HAL_UART_Receive_IT>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000320 	.word	0x20000320
 80039a4:	200088e4 	.word	0x200088e4

080039a8 <calculateCRC>:


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crcCalc = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	e04f      	b.n	8003a5e <calculateCRC+0xb6>
    shifter = 0x8000;
 80039be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c2:	82fb      	strh	r3, [r7, #22]
    if (i == 0) {
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <calculateCRC+0x42>
      c = data[i] << 8 | data[i+1];
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	b21a      	sxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3301      	adds	r3, #1
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	440b      	add	r3, r1
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	82bb      	strh	r3, [r7, #20]
 80039e8:	e015      	b.n	8003a16 <calculateCRC+0x6e>
    } else if (i == len) {
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d102      	bne.n	80039f8 <calculateCRC+0x50>
      c = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	82bb      	strh	r3, [r7, #20]
 80039f6:	e00e      	b.n	8003a16 <calculateCRC+0x6e>
    } else {
      c = data[i+1] << 8 | data[i];
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3301      	adds	r3, #1
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	b21a      	sxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	440b      	add	r3, r1
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b21b      	sxth	r3, r3
 8003a10:	4313      	orrs	r3, r2
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crcCalc & 0x8000;
 8003a16:	8a7b      	ldrh	r3, [r7, #18]
 8003a18:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a20:	817b      	strh	r3, [r7, #10]
      crcCalc <<= 1;
 8003a22:	8a7b      	ldrh	r3, [r7, #18]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crcCalc++;
 8003a28:	8aba      	ldrh	r2, [r7, #20]
 8003a2a:	8afb      	ldrh	r3, [r7, #22]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <calculateCRC+0x92>
 8003a34:	8a7b      	ldrh	r3, [r7, #18]
 8003a36:	3301      	adds	r3, #1
 8003a38:	827b      	strh	r3, [r7, #18]
      if(carry) crcCalc ^= 0x1021;
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <calculateCRC+0xa4>
 8003a40:	8a7b      	ldrh	r3, [r7, #18]
 8003a42:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003a46:	f083 0301 	eor.w	r3, r3, #1
 8003a4a:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8003a4c:	8afb      	ldrh	r3, [r7, #22]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8003a52:	8afb      	ldrh	r3, [r7, #22]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1de      	bne.n	8003a16 <calculateCRC+0x6e>
  for (int i = 0; i < len + 2; i += 2) {
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	3302      	adds	r3, #2
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	dbaa      	blt.n	80039be <calculateCRC+0x16>
  }
  return crcCalc;
 8003a68:	8a7b      	ldrh	r3, [r7, #18]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b0cc      	sub	sp, #304	; 0x130
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8003a82:	2300      	movs	r3, #0
 8003a84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003a88:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003a94:	48c1      	ldr	r0, [pc, #772]	; (8003d9c <vTaskSdCard+0x324>)
 8003a96:	f7ff faab 	bl	8002ff0 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8003a9a:	48c1      	ldr	r0, [pc, #772]	; (8003da0 <vTaskSdCard+0x328>)
 8003a9c:	f7ff faa8 	bl	8002ff0 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	49c0      	ldr	r1, [pc, #768]	; (8003da4 <vTaskSdCard+0x32c>)
 8003aa4:	48c0      	ldr	r0, [pc, #768]	; (8003da8 <vTaskSdCard+0x330>)
 8003aa6:	f00d fb27 	bl	80110f8 <f_mount>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003ab0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003ab8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003abc:	4619      	mov	r1, r3
 8003abe:	48bb      	ldr	r0, [pc, #748]	; (8003dac <vTaskSdCard+0x334>)
 8003ac0:	f7ff fa96 	bl	8002ff0 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8003ac4:	4bba      	ldr	r3, [pc, #744]	; (8003db0 <vTaskSdCard+0x338>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8003aca:	2064      	movs	r0, #100	; 0x64
 8003acc:	f00e fcf8 	bl	80124c0 <osDelay>
		}
	} while (res != FR_OK);
 8003ad0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e3      	bne.n	8003aa0 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8003ad8:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 80a9 	bne.w	8003c34 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8003ae2:	48b4      	ldr	r0, [pc, #720]	; (8003db4 <vTaskSdCard+0x33c>)
 8003ae4:	f7ff fa84 	bl	8002ff0 <UsbPrint>

		unsigned int file_number = 1;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003aee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003af2:	f107 0008 	add.w	r0, r7, #8
 8003af6:	4bb0      	ldr	r3, [pc, #704]	; (8003db8 <vTaskSdCard+0x340>)
 8003af8:	4aaa      	ldr	r2, [pc, #680]	; (8003da4 <vTaskSdCard+0x32c>)
 8003afa:	f00e fab5 	bl	8012068 <f_findfirst>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003b04:	e02b      	b.n	8003b5e <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003b06:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003b0a:	3b30      	subs	r3, #48	; 0x30
 8003b0c:	2264      	movs	r2, #100	; 0x64
 8003b0e:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003b12:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003b16:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	18ca      	adds	r2, r1, r3
 8003b24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b28:	3b30      	subs	r3, #48	; 0x30
 8003b2a:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003b2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8003b30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b34:	3301      	adds	r3, #1
 8003b36:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d204      	bcs.n	8003b48 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8003b3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b42:	3301      	adds	r3, #1
 8003b44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8003b48:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b4c:	f107 0308 	add.w	r3, r7, #8
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f00e fa60 	bl	8012018 <f_findnext>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003b5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <vTaskSdCard+0xf6>
 8003b66:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1cb      	bne.n	8003b06 <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8003b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8003b76:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	488f      	ldr	r0, [pc, #572]	; (8003dbc <vTaskSdCard+0x344>)
 8003b7e:	f7ff fa37 	bl	8002ff0 <UsbPrint>
					res);
			goto resetSDCard;
 8003b82:	e78a      	b.n	8003a9a <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8003b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b88:	4a8d      	ldr	r2, [pc, #564]	; (8003dc0 <vTaskSdCard+0x348>)
 8003b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003b90:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003b94:	4b8b      	ldr	r3, [pc, #556]	; (8003dc4 <vTaskSdCard+0x34c>)
 8003b96:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9a:	08da      	lsrs	r2, r3, #3
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	1aca      	subs	r2, r1, r3
 8003ba6:	b2d3      	uxtb	r3, r2
 8003ba8:	3330      	adds	r3, #48	; 0x30
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bb4:	4a83      	ldr	r2, [pc, #524]	; (8003dc4 <vTaskSdCard+0x34c>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	08d9      	lsrs	r1, r3, #3
 8003bbc:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <vTaskSdCard+0x34c>)
 8003bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	1aca      	subs	r2, r1, r3
 8003bce:	b2d3      	uxtb	r3, r2
 8003bd0:	3330      	adds	r3, #48	; 0x30
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8003bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bdc:	4a7a      	ldr	r2, [pc, #488]	; (8003dc8 <vTaskSdCard+0x350>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0959      	lsrs	r1, r3, #5
 8003be4:	4b77      	ldr	r3, [pc, #476]	; (8003dc4 <vTaskSdCard+0x34c>)
 8003be6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	1aca      	subs	r2, r1, r3
 8003bf6:	b2d3      	uxtb	r3, r2
 8003bf8:	3330      	adds	r3, #48	; 0x30
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8003c00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c04:	4619      	mov	r1, r3
 8003c06:	4871      	ldr	r0, [pc, #452]	; (8003dcc <vTaskSdCard+0x354>)
 8003c08:	f7ff f9f2 	bl	8002ff0 <UsbPrint>

		res = f_closedir(&dj);
 8003c0c:	f107 0308 	add.w	r3, r7, #8
 8003c10:	4618      	mov	r0, r3
 8003c12:	f00e f993 	bl	8011f3c <f_closedir>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003c1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8003c24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4869      	ldr	r0, [pc, #420]	; (8003dd0 <vTaskSdCard+0x358>)
 8003c2c:	f7ff f9e0 	bl	8002ff0 <UsbPrint>
			goto resetSDCard;
 8003c30:	bf00      	nop
 8003c32:	e732      	b.n	8003a9a <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8003c34:	4867      	ldr	r0, [pc, #412]	; (8003dd4 <vTaskSdCard+0x35c>)
 8003c36:	f7ff f9db 	bl	8002ff0 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c3e:	2212      	movs	r2, #18
 8003c40:	4619      	mov	r1, r3
 8003c42:	4865      	ldr	r0, [pc, #404]	; (8003dd8 <vTaskSdCard+0x360>)
 8003c44:	f00d fabc 	bl	80111c0 <f_open>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8003c4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8003c56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	485f      	ldr	r0, [pc, #380]	; (8003ddc <vTaskSdCard+0x364>)
 8003c5e:	f7ff f9c7 	bl	8002ff0 <UsbPrint>
		goto resetSDCard;
 8003c62:	e71a      	b.n	8003a9a <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8003c64:	485e      	ldr	r0, [pc, #376]	; (8003de0 <vTaskSdCard+0x368>)
 8003c66:	f7ff f9c3 	bl	8002ff0 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8003c6a:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <vTaskSdCard+0x360>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4859      	ldr	r0, [pc, #356]	; (8003dd8 <vTaskSdCard+0x360>)
 8003c72:	f00d fe97 	bl	80119a4 <f_lseek>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8003c7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d006      	beq.n	8003c92 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8003c84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4856      	ldr	r0, [pc, #344]	; (8003de4 <vTaskSdCard+0x36c>)
 8003c8c:	f7ff f9b0 	bl	8002ff0 <UsbPrint>
		goto resetSDCard;
 8003c90:	e703      	b.n	8003a9a <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <vTaskSdCard+0x370>)
 8003c9a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ca8:	c407      	stmia	r4!, {r0, r1, r2}
 8003caa:	8023      	strh	r3, [r4, #0]
 8003cac:	3402      	adds	r4, #2
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	7023      	strb	r3, [r4, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003cbe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc faa4 	bl	8000210 <strlen>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <vTaskSdCard+0x374>)
 8003cd0:	4841      	ldr	r0, [pc, #260]	; (8003dd8 <vTaskSdCard+0x360>)
 8003cd2:	f00d fc3a 	bl	801154a <f_write>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8003cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d006      	beq.n	8003cf2 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8003ce4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4841      	ldr	r0, [pc, #260]	; (8003df0 <vTaskSdCard+0x378>)
 8003cec:	f7ff f980 	bl	8002ff0 <UsbPrint>
		goto resetSDCard;
 8003cf0:	e6d3      	b.n	8003a9a <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8003cf2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cf6:	2296      	movs	r2, #150	; 0x96
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f013 f86b 	bl	8016dd6 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003d00:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <vTaskSdCard+0x37c>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f00f f849 	bl	8012da4 <osMessageQueueGet>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f3      	bne.n	8003d00 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8003d18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fa77 	bl	8000210 <strlen>
 8003d22:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 8003d26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003d2e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <vTaskSdCard+0x374>)
 8003d34:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003d38:	4827      	ldr	r0, [pc, #156]	; (8003dd8 <vTaskSdCard+0x360>)
 8003d3a:	f00d fc06 	bl	801154a <f_write>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8003d44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d006      	beq.n	8003d5a <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8003d4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d50:	4619      	mov	r1, r3
 8003d52:	4827      	ldr	r0, [pc, #156]	; (8003df0 <vTaskSdCard+0x378>)
 8003d54:	f7ff f94c 	bl	8002ff0 <UsbPrint>
							res);
					goto resetSDCard;
 8003d58:	e69f      	b.n	8003a9a <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8003d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8003d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d68:	2b7f      	cmp	r3, #127	; 0x7f
 8003d6a:	ddc9      	ble.n	8003d00 <vTaskSdCard+0x288>
				msgCounter = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8003d72:	4821      	ldr	r0, [pc, #132]	; (8003df8 <vTaskSdCard+0x380>)
 8003d74:	f7ff f93c 	bl	8002ff0 <UsbPrint>
				//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
				res = f_sync(&EULER_LOG_FILE);
 8003d78:	4817      	ldr	r0, [pc, #92]	; (8003dd8 <vTaskSdCard+0x360>)
 8003d7a:	f00d fd8a 	bl	8011892 <f_sync>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8003d84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0b9      	beq.n	8003d00 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8003d8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d90:	4619      	mov	r1, r3
 8003d92:	481a      	ldr	r0, [pc, #104]	; (8003dfc <vTaskSdCard+0x384>)
 8003d94:	f7ff f92c 	bl	8002ff0 <UsbPrint>
					goto resetSDCard;
 8003d98:	e67f      	b.n	8003a9a <vTaskSdCard+0x22>
 8003d9a:	bf00      	nop
 8003d9c:	08019c48 	.word	0x08019c48
 8003da0:	08019c70 	.word	0x08019c70
 8003da4:	08019c94 	.word	0x08019c94
 8003da8:	20015108 	.word	0x20015108
 8003dac:	08019c98 	.word	0x08019c98
 8003db0:	2000035c 	.word	0x2000035c
 8003db4:	08019cc4 	.word	0x08019cc4
 8003db8:	08019ce8 	.word	0x08019ce8
 8003dbc:	08019cf4 	.word	0x08019cf4
 8003dc0:	08019d2c 	.word	0x08019d2c
 8003dc4:	cccccccd 	.word	0xcccccccd
 8003dc8:	51eb851f 	.word	0x51eb851f
 8003dcc:	08019d38 	.word	0x08019d38
 8003dd0:	08019d5c 	.word	0x08019d5c
 8003dd4:	08019d8c 	.word	0x08019d8c
 8003dd8:	20014ed8 	.word	0x20014ed8
 8003ddc:	08019db0 	.word	0x08019db0
 8003de0:	08019ddc 	.word	0x08019ddc
 8003de4:	08019e04 	.word	0x08019e04
 8003de8:	08019ea8 	.word	0x08019ea8
 8003dec:	2001533c 	.word	0x2001533c
 8003df0:	08019e34 	.word	0x08019e34
 8003df4:	20010d74 	.word	0x20010d74
 8003df8:	08019e60 	.word	0x08019e60
 8003dfc:	08019e80 	.word	0x08019e80

08003e00 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af04      	add	r7, sp, #16
 8003e06:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003e08:	f00e fa82 	bl	8012310 <osKernelGetTickCount>
 8003e0c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8003e0e:	f00e faa7 	bl	8012360 <osKernelGetTickFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <vTaskSensRead+0x144>)
 8003e16:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	60bb      	str	r3, [r7, #8]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4413      	add	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8003e26:	221c      	movs	r2, #28
 8003e28:	4947      	ldr	r1, [pc, #284]	; (8003f48 <vTaskSensRead+0x148>)
 8003e2a:	4848      	ldr	r0, [pc, #288]	; (8003f4c <vTaskSensRead+0x14c>)
 8003e2c:	f005 fd24 	bl	8009878 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003e30:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <vTaskSensRead+0x150>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	211e      	movs	r1, #30
 8003e36:	4618      	mov	r0, r3
 8003e38:	f00e fc4a 	bl	80126d0 <osMutexAcquire>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d110      	bne.n	8003e64 <vTaskSensRead+0x64>
			sb3_baro = sb3_data.baro;
 8003e42:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <vTaskSensRead+0x154>)
 8003e44:	4a40      	ldr	r2, [pc, #256]	; (8003f48 <vTaskSensRead+0x148>)
 8003e46:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8003e4c:	4a42      	ldr	r2, [pc, #264]	; (8003f58 <vTaskSensRead+0x158>)
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <vTaskSensRead+0x148>)
 8003e50:	4614      	mov	r4, r2
 8003e52:	330c      	adds	r3, #12
 8003e54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <vTaskSensRead+0x150>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00e fc94 	bl	801278c <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003e64:	4b3d      	ldr	r3, [pc, #244]	; (8003f5c <vTaskSensRead+0x15c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	211e      	movs	r1, #30
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f00e fc30 	bl	80126d0 <osMutexAcquire>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d110      	bne.n	8003e98 <vTaskSensRead+0x98>
			sb2_baro = sb3_data.baro;
 8003e76:	4b3a      	ldr	r3, [pc, #232]	; (8003f60 <vTaskSensRead+0x160>)
 8003e78:	4a33      	ldr	r2, [pc, #204]	; (8003f48 <vTaskSensRead+0x148>)
 8003e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 8003e80:	4a38      	ldr	r2, [pc, #224]	; (8003f64 <vTaskSensRead+0x164>)
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <vTaskSensRead+0x148>)
 8003e84:	4614      	mov	r4, r2
 8003e86:	330c      	adds	r3, #12
 8003e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 8003e8e:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <vTaskSensRead+0x15c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f00e fc7a 	bl	801278c <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <vTaskSensRead+0x168>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	211e      	movs	r1, #30
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f00e fc16 	bl	80126d0 <osMutexAcquire>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d110      	bne.n	8003ecc <vTaskSensRead+0xcc>
			sb1_baro = sb3_data.baro;
 8003eaa:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <vTaskSensRead+0x16c>)
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <vTaskSensRead+0x148>)
 8003eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8003eb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8003eb4:	4a2e      	ldr	r2, [pc, #184]	; (8003f70 <vTaskSensRead+0x170>)
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <vTaskSensRead+0x148>)
 8003eb8:	4614      	mov	r4, r2
 8003eba:	330c      	adds	r3, #12
 8003ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <vTaskSensRead+0x168>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f00e fc60 	bl	801278c <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8003ecc:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <vTaskSensRead+0x154>)
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <vTaskSensRead+0x154>)
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4827      	ldr	r0, [pc, #156]	; (8003f74 <vTaskSensRead+0x174>)
 8003ed8:	f7ff f88a 	bl	8002ff0 <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <vTaskSensRead+0x158>)
 8003ede:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 8003ee2:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8003ee4:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <vTaskSensRead+0x158>)
 8003ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 8003eea:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <vTaskSensRead+0x158>)
 8003eee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 8003ef2:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003ef4:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <vTaskSensRead+0x158>)
 8003ef6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 8003efa:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8003efc:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <vTaskSensRead+0x158>)
 8003efe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 8003f02:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <vTaskSensRead+0x158>)
 8003f06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	9002      	str	r0, [sp, #8]
 8003f12:	9101      	str	r1, [sp, #4]
 8003f14:	9200      	str	r2, [sp, #0]
 8003f16:	4633      	mov	r3, r6
 8003f18:	462a      	mov	r2, r5
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	4816      	ldr	r0, [pc, #88]	; (8003f78 <vTaskSensRead+0x178>)
 8003f1e:	f7ff f867 	bl	8002ff0 <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <vTaskSensRead+0x154>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	2103      	movs	r1, #3
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7fe ff87 	bl	8002e3c <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <vTaskSensRead+0x158>)
 8003f30:	2202      	movs	r2, #2
 8003f32:	2103      	movs	r1, #3
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7fe ff81 	bl	8002e3c <logSensor>

		osDelayUntil(tick_count);
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f00e faee 	bl	801251c <osDelayUntil>
		tick_count += tick_update;
 8003f40:	e76d      	b.n	8003e1e <vTaskSensRead+0x1e>
 8003f42:	bf00      	nop
 8003f44:	51eb851f 	.word	0x51eb851f
 8003f48:	200002a4 	.word	0x200002a4
 8003f4c:	2000aa50 	.word	0x2000aa50
 8003f50:	2000abec 	.word	0x2000abec
 8003f54:	20000288 	.word	0x20000288
 8003f58:	20000294 	.word	0x20000294
 8003f5c:	20014e94 	.word	0x20014e94
 8003f60:	20000250 	.word	0x20000250
 8003f64:	2000025c 	.word	0x2000025c
 8003f68:	2000ab88 	.word	0x2000ab88
 8003f6c:	20000218 	.word	0x20000218
 8003f70:	20000224 	.word	0x20000224
 8003f74:	08019ec8 	.word	0x08019ec8
 8003f78:	08019ee8 	.word	0x08019ee8

08003f7c <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8003f84:	221c      	movs	r2, #28
 8003f86:	4904      	ldr	r1, [pc, #16]	; (8003f98 <HAL_SPI_RxCpltCallback+0x1c>)
 8003f88:	4804      	ldr	r0, [pc, #16]	; (8003f9c <HAL_SPI_RxCpltCallback+0x20>)
 8003f8a:	f005 fc75 	bl	8009878 <HAL_SPI_Receive_IT>

}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200002a4 	.word	0x200002a4
 8003f9c:	2000aa50 	.word	0x2000aa50

08003fa0 <vTaskStateEst>:
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]);




void vTaskStateEst(void *argument) {
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8003fa6:	af0c      	add	r7, sp, #48	; 0x30
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env environment;
	init_env(&environment);
 8003fac:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc ffc1 	bl	8000f38 <init_env>

	flight_phase_detection_t dummy_flight_phase_detection = { 0 };
 8003fb6:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8003fc2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8003fce:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fbc2 	bl	800375c <reset_flight_phase_detection>
	reset_flight_phase_detection(&dummy_flight_phase_detection);
 8003fd8:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fbbd 	bl	800375c <reset_flight_phase_detection>
	state_est_meas_t state_est_meas = { 0 };
 8003fe2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003fe6:	2278      	movs	r2, #120	; 0x78
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f012 fef3 	bl	8016dd6 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8003ff0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	2378      	movs	r3, #120	; 0x78
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f012 feeb 	bl	8016dd6 <memset>

	/* Initialise States */
	ekf_state_t ekf_state = { 0 };
 8004000:	f107 031c 	add.w	r3, r7, #28
 8004004:	4618      	mov	r0, r3
 8004006:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 800400a:	461a      	mov	r2, r3
 800400c:	2100      	movs	r1, #0
 800400e:	f012 fee2 	bl	8016dd6 <memset>
	reset_ekf_state(&ekf_state);
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa16 	bl	8004448 <reset_ekf_state>

	/* Initialise placeholder variables for sensor reading */
	float Placeholder_measurement[3] = { 0 };
 800401c:	f107 0310 	add.w	r3, r7, #16
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	6053      	str	r3, [r2, #4]
 8004028:	6093      	str	r3, [r2, #8]
	uint32_t Placeholder_timestamps[2] = { 0 };
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	461a      	mov	r2, r3
 8004030:	2300      	movs	r3, #0
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	6053      	str	r3, [r2, #4]



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004036:	f00e f96b 	bl	8012310 <osKernelGetTickCount>
 800403a:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 800403e:	f00e f98f 	bl	8012360 <osKernelGetTickFreq>
 8004042:	4602      	mov	r2, r0
 8004044:	4bc8      	ldr	r3, [pc, #800]	; (8004368 <vTaskStateEst+0x3c8>)
 8004046:	fba3 2302 	umull	r2, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
	for (;;) {
		tick_count += tick_update;
 8004050:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8004054:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004058:	4413      	add	r3, r2
 800405a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

		/* Acquire the Sensor data */
		/* Sensor Board 1 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 800405e:	4bc3      	ldr	r3, [pc, #780]	; (800436c <vTaskStateEst+0x3cc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f00e fbe2 	bl	801282c <osMutexGetOwner>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d160      	bne.n	8004130 <vTaskStateEst+0x190>
			Placeholder_measurement[0] = (float) (sb1_data.baro.pressure);
 800406e:	4bc0      	ldr	r3, [pc, #768]	; (8004370 <vTaskStateEst+0x3d0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407a:	f107 0310 	add.w	r3, r7, #16
 800407e:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb1_data.baro.ts;
 8004082:	4bbb      	ldr	r3, [pc, #748]	; (8004370 <vTaskStateEst+0x3d0>)
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	f107 0308 	add.w	r3, r7, #8
 800408a:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb1_data.imu.acc_z)) / 1024;
 800408c:	4bb8      	ldr	r3, [pc, #736]	; (8004370 <vTaskStateEst+0x3d0>)
 800408e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800409a:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8004374 <vTaskStateEst+0x3d4>
 800409e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a2:	f107 0310 	add.w	r3, r7, #16
 80040a6:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb1_data.imu.ts;
 80040aa:	4bb1      	ldr	r3, [pc, #708]	; (8004370 <vTaskStateEst+0x3d0>)
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb1_data.baro.temperature)) / 100;
 80040b4:	4bae      	ldr	r3, [pc, #696]	; (8004370 <vTaskStateEst+0x3d0>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c0:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004378 <vTaskStateEst+0x3d8>
 80040c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040c8:	f107 0310 	add.w	r3, r7, #16
 80040cc:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 80040d0:	4ba6      	ldr	r3, [pc, #664]	; (800436c <vTaskStateEst+0x3cc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f00e fba9 	bl	801282c <osMutexGetOwner>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d127      	bne.n	8004130 <vTaskStateEst+0x190>
				state_est_meas.baro_state_est[0].pressure = Placeholder_measurement[0];
 80040e0:	f107 0310 	add.w	r3, r7, #16
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
				state_est_meas.baro_state_est[0].temperature = Placeholder_measurement[2];
 80040ea:	f107 0310 	add.w	r3, r7, #16
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
				state_est_meas.baro_state_est[0].ts = Placeholder_timestamps[0];
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

				state_est_meas.imu_state_est[0].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80040fe:	f107 0310 	add.w	r3, r7, #16
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fa3f 	bl	8000588 <__aeabi_f2d>
 800410a:	a395      	add	r3, pc, #596	; (adr r3, 8004360 <vTaskStateEst+0x3c0>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc fa92 	bl	8000638 <__aeabi_dmul>
 8004114:	4603      	mov	r3, r0
 8004116:	460c      	mov	r4, r1
 8004118:	4618      	mov	r0, r3
 800411a:	4621      	mov	r1, r4
 800411c:	f7fc fd3c 	bl	8000b98 <__aeabi_d2f>
 8004120:	4603      	mov	r3, r0
 8004122:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
				state_est_meas.imu_state_est[0].ts = Placeholder_timestamps[1];
 8004126:	f107 0308 	add.w	r3, r7, #8
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
			}
		}

		/* Sensor Board 2 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004130:	4b8e      	ldr	r3, [pc, #568]	; (800436c <vTaskStateEst+0x3cc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f00e fb79 	bl	801282c <osMutexGetOwner>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d160      	bne.n	8004202 <vTaskStateEst+0x262>
			Placeholder_measurement[0] = (float) (sb2_data.baro.pressure);
 8004140:	4b8e      	ldr	r3, [pc, #568]	; (800437c <vTaskStateEst+0x3dc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb2_data.baro.ts;
 8004154:	4b89      	ldr	r3, [pc, #548]	; (800437c <vTaskStateEst+0x3dc>)
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb2_data.imu.acc_z)) / 1024;
 800415e:	4b87      	ldr	r3, [pc, #540]	; (800437c <vTaskStateEst+0x3dc>)
 8004160:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004164:	ee07 3a90 	vmov	s15, r3
 8004168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800416c:	eddf 6a81 	vldr	s13, [pc, #516]	; 8004374 <vTaskStateEst+0x3d4>
 8004170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004174:	f107 0310 	add.w	r3, r7, #16
 8004178:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb2_data.imu.ts;
 800417c:	4b7f      	ldr	r3, [pc, #508]	; (800437c <vTaskStateEst+0x3dc>)
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	f107 0308 	add.w	r3, r7, #8
 8004184:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb2_data.baro.temperature)) / 100;
 8004186:	4b7d      	ldr	r3, [pc, #500]	; (800437c <vTaskStateEst+0x3dc>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004192:	eddf 6a79 	vldr	s13, [pc, #484]	; 8004378 <vTaskStateEst+0x3d8>
 8004196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800419a:	f107 0310 	add.w	r3, r7, #16
 800419e:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 80041a2:	4b72      	ldr	r3, [pc, #456]	; (800436c <vTaskStateEst+0x3cc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f00e fb40 	bl	801282c <osMutexGetOwner>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d127      	bne.n	8004202 <vTaskStateEst+0x262>
				state_est_meas.baro_state_est[1].pressure = Placeholder_measurement[0];
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
				state_est_meas.baro_state_est[1].temperature = Placeholder_measurement[2];
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
				state_est_meas.baro_state_est[1].ts = Placeholder_timestamps[0];
 80041c6:	f107 0308 	add.w	r3, r7, #8
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354

				state_est_meas.imu_state_est[1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80041d0:	f107 0310 	add.w	r3, r7, #16
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc f9d6 	bl	8000588 <__aeabi_f2d>
 80041dc:	a360      	add	r3, pc, #384	; (adr r3, 8004360 <vTaskStateEst+0x3c0>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f7fc fa29 	bl	8000638 <__aeabi_dmul>
 80041e6:	4603      	mov	r3, r0
 80041e8:	460c      	mov	r4, r1
 80041ea:	4618      	mov	r0, r3
 80041ec:	4621      	mov	r1, r4
 80041ee:	f7fc fcd3 	bl	8000b98 <__aeabi_d2f>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
				state_est_meas.imu_state_est[1].ts = Placeholder_timestamps[1];
 80041f8:	f107 0308 	add.w	r3, r7, #8
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
			}
		}

		/* Sensor Board 3 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004202:	4b5a      	ldr	r3, [pc, #360]	; (800436c <vTaskStateEst+0x3cc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f00e fb10 	bl	801282c <osMutexGetOwner>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d160      	bne.n	80042d4 <vTaskStateEst+0x334>
			Placeholder_measurement[0] = (float)(sb3_data.baro.pressure);
 8004212:	4b5b      	ldr	r3, [pc, #364]	; (8004380 <vTaskStateEst+0x3e0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421e:	f107 0310 	add.w	r3, r7, #16
 8004222:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb3_data.baro.ts;
 8004226:	4b56      	ldr	r3, [pc, #344]	; (8004380 <vTaskStateEst+0x3e0>)
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	f107 0308 	add.w	r3, r7, #8
 800422e:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float)(sb3_data.imu.acc_z)) / 1024;
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <vTaskStateEst+0x3e0>)
 8004232:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800423e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8004374 <vTaskStateEst+0x3d4>
 8004242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004246:	f107 0310 	add.w	r3, r7, #16
 800424a:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb3_data.imu.ts;
 800424e:	4b4c      	ldr	r3, [pc, #304]	; (8004380 <vTaskStateEst+0x3e0>)
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float)(sb3_data.baro.temperature)) / 100;
 8004258:	4b49      	ldr	r3, [pc, #292]	; (8004380 <vTaskStateEst+0x3e0>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004264:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004378 <vTaskStateEst+0x3d8>
 8004268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800426c:	f107 0310 	add.w	r3, r7, #16
 8004270:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004274:	4b3d      	ldr	r3, [pc, #244]	; (800436c <vTaskStateEst+0x3cc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f00e fad7 	bl	801282c <osMutexGetOwner>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d127      	bne.n	80042d4 <vTaskStateEst+0x334>
				state_est_meas.baro_state_est[2].pressure = Placeholder_measurement[0];
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
				state_est_meas.baro_state_est[2].temperature = Placeholder_measurement[2];
 800428e:	f107 0310 	add.w	r3, r7, #16
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
				state_est_meas.baro_state_est[2].ts = Placeholder_timestamps[0];
 8004298:	f107 0308 	add.w	r3, r7, #8
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

				state_est_meas.imu_state_est[2].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80042a2:	f107 0310 	add.w	r3, r7, #16
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fc f96d 	bl	8000588 <__aeabi_f2d>
 80042ae:	a32c      	add	r3, pc, #176	; (adr r3, 8004360 <vTaskStateEst+0x3c0>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fc f9c0 	bl	8000638 <__aeabi_dmul>
 80042b8:	4603      	mov	r3, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4618      	mov	r0, r3
 80042be:	4621      	mov	r1, r4
 80042c0:	f7fc fc6a 	bl	8000b98 <__aeabi_d2f>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
				state_est_meas.imu_state_est[2].ts = Placeholder_timestamps[1];
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
			}
		}

		/* get new Phase Detection*/
		if(osMutexGetOwner(fsm_mutex) == NULL){
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <vTaskStateEst+0x3e4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f00e faa7 	bl	801282c <osMutexGetOwner>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d114      	bne.n	800430e <vTaskStateEst+0x36e>
			dummy_flight_phase_detection = global_flight_phase_detection;
 80042e4:	4a28      	ldr	r2, [pc, #160]	; (8004388 <vTaskStateEst+0x3e8>)
 80042e6:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80042ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80042ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(fsm_mutex) == NULL){
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <vTaskStateEst+0x3e4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f00e fa99 	bl	801282c <osMutexGetOwner>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d106      	bne.n	800430e <vTaskStateEst+0x36e>
				flight_phase_detection = dummy_flight_phase_detection;
 8004300:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8004304:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 8004308:	ca07      	ldmia	r2, {r0, r1, r2}
 800430a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			}
		}

		/* process measurements */
		process_measurements(&ekf_state, &state_est_meas, &state_est_meas_prior, &environment);
 800430e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004312:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8004316:	f507 7150 	add.w	r1, r7, #832	; 0x340
 800431a:	f107 001c 	add.w	r0, r7, #28
 800431e:	f000 fb0f 	bl	8004940 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&ekf_state, &flight_phase_detection, &environment);
 8004322:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8004326:	f507 716e 	add.w	r1, r7, #952	; 0x3b8
 800432a:	f107 031c 	add.w	r3, r7, #28
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fc92 	bl	8004c58 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		ekf_prediction(&ekf_state);
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f919 	bl	8004570 <ekf_prediction>

		/* update Step */
		if (ekf_state.num_z_active > 0) {
 800433e:	f107 031c 	add.w	r3, r7, #28
 8004342:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 8004346:	2b00      	cmp	r3, #0
 8004348:	d020      	beq.n	800438c <vTaskStateEst+0x3ec>
			select_ekf_observation_matrices(&ekf_state);
 800434a:	f107 031c 	add.w	r3, r7, #28
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f97e 	bl	8004650 <select_ekf_observation_matrices>
			ekf_update(&ekf_state);
 8004354:	f107 031c 	add.w	r3, r7, #28
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f9b7 	bl	80046cc <ekf_update>
 800435e:	e01f      	b.n	80043a0 <vTaskStateEst+0x400>
 8004360:	3a92a305 	.word	0x3a92a305
 8004364:	40239d01 	.word	0x40239d01
 8004368:	51eb851f 	.word	0x51eb851f
 800436c:	2000ab88 	.word	0x2000ab88
 8004370:	20000234 	.word	0x20000234
 8004374:	44800000 	.word	0x44800000
 8004378:	42c80000 	.word	0x42c80000
 800437c:	2000026c 	.word	0x2000026c
 8004380:	200002a4 	.word	0x200002a4
 8004384:	2000887c 	.word	0x2000887c
 8004388:	20000310 	.word	0x20000310
		}
		else
		{
			memcpy(ekf_state.x_est, ekf_state.x_priori, sizeof(ekf_state.x_priori));
 800438c:	f107 031c 	add.w	r3, r7, #28
 8004390:	f107 021c 	add.w	r2, r7, #28
 8004394:	33e0      	adds	r3, #224	; 0xe0
 8004396:	f502 7288 	add.w	r2, r2, #272	; 0x110
 800439a:	ca07      	ldmia	r2, {r0, r1, r2}
 800439c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 80043a0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80043a4:	4618      	mov	r0, r3
 80043a6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80043aa:	2278      	movs	r2, #120	; 0x78
 80043ac:	4619      	mov	r1, r3
 80043ae:	f012 fd07 	bl	8016dc0 <memcpy>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <vTaskStateEst+0x498>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	210a      	movs	r1, #10
 80043b8:	4618      	mov	r0, r3
 80043ba:	f00e f989 	bl	80126d0 <osMutexAcquire>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <vTaskStateEst+0x43a>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			update_state_est_data(&state_est_data, &ekf_state);
 80043c4:	f107 031c 	add.w	r3, r7, #28
 80043c8:	4619      	mov	r1, r3
 80043ca:	481c      	ldr	r0, [pc, #112]	; (800443c <vTaskStateEst+0x49c>)
 80043cc:	f000 fa6a 	bl	80048a4 <update_state_est_data>
			osMutexRelease(state_est_mutex);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <vTaskStateEst+0x498>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f00e f9d9 	bl	801278c <osMutexRelease>
		}

		/* Update Environment for FSM */
		if(osMutexAcquire(environment_mutex, 10) == osOK){
 80043da:	4b19      	ldr	r3, [pc, #100]	; (8004440 <vTaskStateEst+0x4a0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	210a      	movs	r1, #10
 80043e0:	4618      	mov	r0, r3
 80043e2:	f00e f975 	bl	80126d0 <osMutexAcquire>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <vTaskStateEst+0x464>
			global_env = environment;
 80043ec:	4b15      	ldr	r3, [pc, #84]	; (8004444 <vTaskStateEst+0x4a4>)
 80043ee:	461c      	mov	r4, r3
 80043f0:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80043f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(environment_mutex);
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <vTaskStateEst+0x4a0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f00e f9c4 	bl	801278c <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data);
 8004404:	f00d ff84 	bl	8012310 <osKernelGetTickCount>
 8004408:	4684      	mov	ip, r0
 800440a:	4e0c      	ldr	r6, [pc, #48]	; (800443c <vTaskStateEst+0x49c>)
 800440c:	466d      	mov	r5, sp
 800440e:	f106 040c 	add.w	r4, r6, #12
 8004412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800441a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800441e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004422:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004426:	4660      	mov	r0, ip
 8004428:	f7fe fdae 	bl	8002f88 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 800442c:	f8d7 03e4 	ldr.w	r0, [r7, #996]	; 0x3e4
 8004430:	f00e f874 	bl	801251c <osDelayUntil>
		tick_count += tick_update;
 8004434:	e60c      	b.n	8004050 <vTaskStateEst+0xb0>
 8004436:	bf00      	nop
 8004438:	2000abf0 	.word	0x2000abf0
 800443c:	200002c0 	.word	0x200002c0
 8004440:	200089c4 	.word	0x200089c4
 8004444:	20000300 	.word	0x20000300

08004448 <reset_ekf_state>:
	}
}


void reset_ekf_state(ekf_state_t *ekf_state){
 8004448:	b5b0      	push	{r4, r5, r7, lr}
 800444a:	b0b0      	sub	sp, #192	; 0xc0
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
        memcpy(ekf_state->Ad, A_init, sizeof(ekf_state->Ad));
        memcpy(ekf_state->Bd, B_init, sizeof(ekf_state->Bd));
        memcpy(ekf_state->Gd, G_init, sizeof(ekf_state->Gd));
    }
    else if (STATE_ESTIMATION_FREQUENCY == 100) {
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8004450:	4b44      	ldr	r3, [pc, #272]	; (8004564 <reset_ekf_state+0x11c>)
 8004452:	f107 040c 	add.w	r4, r7, #12
 8004456:	461d      	mov	r5, r3
 8004458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8004464:	4a40      	ldr	r2, [pc, #256]	; (8004568 <reset_ekf_state+0x120>)
 8004466:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800446a:	ca07      	ldmia	r2, {r0, r1, r2}
 800446c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8004470:	4a3d      	ldr	r2, [pc, #244]	; (8004568 <reset_ekf_state+0x120>)
 8004472:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004476:	ca07      	ldmia	r2, {r0, r1, r2}
 8004478:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(ekf_state->Ad, A_init, sizeof(ekf_state->Ad));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f107 010c 	add.w	r1, r7, #12
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	4618      	mov	r0, r3
 8004486:	f012 fc9b 	bl	8016dc0 <memcpy>
        memcpy(ekf_state->Bd, B_init, sizeof(ekf_state->Bd));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3348      	adds	r3, #72	; 0x48
 800448e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8004492:	220c      	movs	r2, #12
 8004494:	4618      	mov	r0, r3
 8004496:	f012 fc93 	bl	8016dc0 <memcpy>
        memcpy(ekf_state->Gd, G_init, sizeof(ekf_state->Gd));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3354      	adds	r3, #84	; 0x54
 800449e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80044a2:	220c      	movs	r2, #12
 80044a4:	4618      	mov	r0, r3
 80044a6:	f012 fc8b 	bl	8016dc0 <memcpy>
        memset(ekf_state->Ad, 0, sizeof(ekf_state->Ad));
        memset(ekf_state->Bd, 0, sizeof(ekf_state->Bd));
        memset(ekf_state->Gd, 0, sizeof(ekf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80044c2:	4b2a      	ldr	r3, [pc, #168]	; (800456c <reset_ekf_state+0x124>)
 80044c4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80044c8:	461d      	mov	r5, r3
 80044ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d2:	682b      	ldr	r3, [r5, #0]
 80044d4:	6023      	str	r3, [r4, #0]

    memcpy(ekf_state->x_est, x_est_init, sizeof(x_est_init));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	33e0      	adds	r3, #224	; 0xe0
 80044da:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80044de:	220c      	movs	r2, #12
 80044e0:	4618      	mov	r0, r3
 80044e2:	f012 fc6d 	bl	8016dc0 <memcpy>
    memcpy(ekf_state->P_est, P_est_init, sizeof(P_est_init));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	33ec      	adds	r3, #236	; 0xec
 80044ea:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80044ee:	2224      	movs	r2, #36	; 0x24
 80044f0:	4618      	mov	r0, r3
 80044f2:	f012 fc65 	bl	8016dc0 <memcpy>

    memset(ekf_state->Q, 0, NUMBER_NOISE*NUMBER_NOISE*sizeof(ekf_state->Q[0][0]));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	33b4      	adds	r3, #180	; 0xb4
 80044fa:	2204      	movs	r2, #4
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f012 fc69 	bl	8016dd6 <memset>
    memset(ekf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(ekf_state->R[0][0]));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	33b8      	adds	r3, #184	; 0xb8
 8004508:	2224      	movs	r2, #36	; 0x24
 800450a:	2100      	movs	r1, #0
 800450c:	4618      	mov	r0, r3
 800450e:	f012 fc62 	bl	8016dd6 <memset>

    memset(ekf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(ekf_state->z[0]));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004518:	220c      	movs	r2, #12
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f012 fc5a 	bl	8016dd6 <memset>
    memset(ekf_state->z_active, 0, NUMBER_MEASUREMENTS*sizeof(ekf_state->z_active[0]));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004528:	2203      	movs	r2, #3
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f012 fc52 	bl	8016dd6 <memset>
    ekf_state->num_z_active = 0;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7

    transpose(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->Ad_T);
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3324      	adds	r3, #36	; 0x24
 8004540:	2103      	movs	r1, #3
 8004542:	2003      	movs	r0, #3
 8004544:	f7fd fa3d 	bl	80019c2 <transpose>
    transpose(NUMBER_STATES, NUMBER_NOISE, ekf_state->Gd, ekf_state->Gd_T);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3360      	adds	r3, #96	; 0x60
 8004552:	2101      	movs	r1, #1
 8004554:	2003      	movs	r0, #3
 8004556:	f7fd fa34 	bl	80019c2 <transpose>
}
 800455a:	bf00      	nop
 800455c:	37c0      	adds	r7, #192	; 0xc0
 800455e:	46bd      	mov	sp, r7
 8004560:	bdb0      	pop	{r4, r5, r7, pc}
 8004562:	bf00      	nop
 8004564:	08019f28 	.word	0x08019f28
 8004568:	08019f4c 	.word	0x08019f4c
 800456c:	08019f58 	.word	0x08019f58

08004570 <ekf_prediction>:

void ekf_prediction(ekf_state_t *ekf_state){
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af04      	add	r7, sp, #16
 8004576:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->x_est, ekf_state->x_priori, true);
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004586:	2201      	movs	r2, #1
 8004588:	9201      	str	r2, [sp, #4]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4603      	mov	r3, r0
 800458e:	460a      	mov	r2, r1
 8004590:	2103      	movs	r1, #3
 8004592:	2003      	movs	r0, #3
 8004594:	f7fd fc3f 	bl	8001e16 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, ekf_state->Bd, ekf_state->u, ekf_state->x_priori, false);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80045aa:	2200      	movs	r2, #0
 80045ac:	9201      	str	r2, [sp, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4603      	mov	r3, r0
 80045b2:	460a      	mov	r2, r1
 80045b4:	2101      	movs	r1, #1
 80045b6:	2003      	movs	r0, #3
 80045b8:	f7fd fc2d 	bl	8001e16 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->P_est, ekf_state->Placeholder_Ad_mult_P_est, true);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	33ec      	adds	r3, #236	; 0xec
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 80045c8:	2101      	movs	r1, #1
 80045ca:	9102      	str	r1, [sp, #8]
 80045cc:	9201      	str	r2, [sp, #4]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	4603      	mov	r3, r0
 80045d2:	2203      	movs	r2, #3
 80045d4:	2103      	movs	r1, #3
 80045d6:	2003      	movs	r0, #3
 80045d8:	f7fd fb83 	bl	8001ce2 <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_NOISE, ekf_state->Gd, ekf_state->Q, ekf_state->Placeholder_Gd_mult_Q, true);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	33b4      	adds	r3, #180	; 0xb4
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
 80045ec:	2101      	movs	r1, #1
 80045ee:	9102      	str	r1, [sp, #8]
 80045f0:	9201      	str	r2, [sp, #4]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	4603      	mov	r3, r0
 80045f6:	2201      	movs	r2, #1
 80045f8:	2101      	movs	r1, #1
 80045fa:	2003      	movs	r0, #3
 80045fc:	f7fd fb71 	bl	8001ce2 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_Ad_mult_P_est, ekf_state->Ad_T, ekf_state->P_priori, true);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3324      	adds	r3, #36	; 0x24
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8004610:	2101      	movs	r1, #1
 8004612:	9102      	str	r1, [sp, #8]
 8004614:	9201      	str	r2, [sp, #4]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	4603      	mov	r3, r0
 800461a:	2203      	movs	r2, #3
 800461c:	2103      	movs	r1, #3
 800461e:	2003      	movs	r0, #3
 8004620:	f7fd fb5f 	bl	8001ce2 <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_STATES, ekf_state->Placeholder_Gd_mult_Q, ekf_state->Gd_T, ekf_state->P_priori, false);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 70f6 	add.w	r0, r3, #492	; 0x1ec
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3360      	adds	r3, #96	; 0x60
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8004634:	2100      	movs	r1, #0
 8004636:	9102      	str	r1, [sp, #8]
 8004638:	9201      	str	r2, [sp, #4]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	4603      	mov	r3, r0
 800463e:	2203      	movs	r2, #3
 8004640:	2101      	movs	r1, #1
 8004642:	2003      	movs	r0, #3
 8004644:	f7fd fb4d 	bl	8001ce2 <matmul>
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <select_ekf_observation_matrices>:

void select_ekf_observation_matrices(ekf_state_t *ekf_state){
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    memset(ekf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(ekf_state->H[0][0]));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	336c      	adds	r3, #108	; 0x6c
 800465c:	2224      	movs	r2, #36	; 0x24
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f012 fbb8 	bl	8016dd6 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e01e      	b.n	80046aa <select_ekf_observation_matrices+0x5a>
        if (ekf_state->z_active[i]) {
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <select_ekf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            ekf_state->H[i][0] = 1;
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	336c      	adds	r3, #108	; 0x6c
 800468c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e007      	b.n	80046a4 <select_ekf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            ekf_state->R[i][i] = 0;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	4413      	add	r3, r2
 800469c:	33b8      	adds	r3, #184	; 0xb8
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	dddd      	ble.n	800466c <select_ekf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->H, ekf_state->H_T);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3390      	adds	r3, #144	; 0x90
 80046ba:	2103      	movs	r1, #3
 80046bc:	2003      	movs	r0, #3
 80046be:	f7fd f980 	bl	80019c2 <transpose>
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <ekf_update>:

void ekf_update(ekf_state_t *ekf_state) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af04      	add	r7, sp, #16
 80046d2:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->H, ekf_state->x_priori, ekf_state->y, true);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 7088 	add.w	r0, r3, #272	; 0x110
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80046e6:	2201      	movs	r2, #1
 80046e8:	9201      	str	r2, [sp, #4]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	4603      	mov	r3, r0
 80046ee:	460a      	mov	r2, r1
 80046f0:	2103      	movs	r1, #3
 80046f2:	2003      	movs	r0, #3
 80046f4:	f7fd fb8f 	bl	8001e16 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->y, ekf_state->y);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800470a:	2003      	movs	r0, #3
 800470c:	f7fd f9d8 	bl	8001ac0 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, ekf_state->H, ekf_state->P_priori, ekf_state->Placeholder_H_mult_P_priori, true);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 8004722:	2101      	movs	r1, #1
 8004724:	9102      	str	r1, [sp, #8]
 8004726:	9201      	str	r2, [sp, #4]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	4603      	mov	r3, r0
 800472c:	2203      	movs	r2, #3
 800472e:	2103      	movs	r1, #3
 8004730:	2003      	movs	r0, #3
 8004732:	f7fd fad6 	bl	8001ce2 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->Placeholder_H_mult_P_priori, ekf_state->H_T, ekf_state->S, true);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3390      	adds	r3, #144	; 0x90
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 8004746:	2101      	movs	r1, #1
 8004748:	9102      	str	r1, [sp, #8]
 800474a:	9201      	str	r2, [sp, #4]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4603      	mov	r3, r0
 8004750:	2203      	movs	r2, #3
 8004752:	2103      	movs	r1, #3
 8004754:	2003      	movs	r0, #3
 8004756:	f7fd fac4 	bl	8001ce2 <matmul>
    matadd(NUMBER_MEASUREMENTS,  NUMBER_MEASUREMENTS, ekf_state->S, ekf_state->R, ekf_state->S);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	460b      	mov	r3, r1
 8004770:	2103      	movs	r1, #3
 8004772:	2003      	movs	r0, #3
 8004774:	f7fd f9cf 	bl	8001b16 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(ekf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(ekf_state->S_inv[0][0]));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800477e:	2224      	movs	r2, #36	; 0x24
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f012 fb27 	bl	8016dd6 <memset>
    inverse(NUMBER_MEASUREMENTS, ekf_state->S, ekf_state->S_inv, LAMBDA);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004794:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80048a0 <ekf_update+0x1d4>
 8004798:	461a      	mov	r2, r3
 800479a:	2003      	movs	r0, #3
 800479c:	f7fd fdea 	bl	8002374 <inverse>

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->P_priori, ekf_state->H_T, ekf_state->Placeholder_P_priori_mult_H_T, true);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3390      	adds	r3, #144	; 0x90
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 80047b0:	2101      	movs	r1, #1
 80047b2:	9102      	str	r1, [sp, #8]
 80047b4:	9201      	str	r2, [sp, #4]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	4603      	mov	r3, r0
 80047ba:	2203      	movs	r2, #3
 80047bc:	2103      	movs	r1, #3
 80047be:	2003      	movs	r0, #3
 80047c0:	f7fd fa8f 	bl	8001ce2 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, ekf_state->Placeholder_P_priori_mult_H_T, ekf_state->S_inv, ekf_state->K, true);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 80047d6:	2101      	movs	r1, #1
 80047d8:	9102      	str	r1, [sp, #8]
 80047da:	9201      	str	r2, [sp, #4]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4603      	mov	r3, r0
 80047e0:	2203      	movs	r2, #3
 80047e2:	2103      	movs	r1, #3
 80047e4:	2003      	movs	r0, #3
 80047e6:	f7fd fa7c 	bl	8001ce2 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->K, ekf_state->y, ekf_state->x_est, true);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f503 70a6 	add.w	r0, r3, #332	; 0x14c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	33e0      	adds	r3, #224	; 0xe0
 80047fa:	2201      	movs	r2, #1
 80047fc:	9201      	str	r2, [sp, #4]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4603      	mov	r3, r0
 8004802:	460a      	mov	r2, r1
 8004804:	2103      	movs	r1, #3
 8004806:	2003      	movs	r0, #3
 8004808:	f7fd fb05 	bl	8001e16 <matvecprod>
    vecadd(NUMBER_STATES, ekf_state->x_priori, ekf_state->x_est, ekf_state->x_est);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 7188 	add.w	r1, r3, #272	; 0x110
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	33e0      	adds	r3, #224	; 0xe0
 800481c:	2003      	movs	r0, #3
 800481e:	f7fd f924 	bl	8001a6a <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, ekf_state->Placeholder_eye);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004828:	4619      	mov	r1, r3
 800482a:	2003      	movs	r0, #3
 800482c:	f7fd f87d 	bl	800192a <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->K, ekf_state->H, ekf_state->Placeholder_K_mult_H, true);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	336c      	adds	r3, #108	; 0x6c
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8004840:	2101      	movs	r1, #1
 8004842:	9102      	str	r1, [sp, #8]
 8004844:	9201      	str	r2, [sp, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	4603      	mov	r3, r0
 800484a:	2203      	movs	r2, #3
 800484c:	2103      	movs	r1, #3
 800484e:	2003      	movs	r0, #3
 8004850:	f7fd fa47 	bl	8001ce2 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_eye, ekf_state->Placeholder_K_mult_H, ekf_state->Placeholder_P_est);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 7219 	add.w	r2, r3, #612	; 0x264
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 7122 	add.w	r1, r3, #648	; 0x288
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	460b      	mov	r3, r1
 800486a:	2103      	movs	r1, #3
 800486c:	2003      	movs	r0, #3
 800486e:	f7fd f9c5 	bl	8001bfc <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, ekf_state->Placeholder_P_est, ekf_state->P_priori, ekf_state->P_est, true);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f503 7010 	add.w	r0, r3, #576	; 0x240
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	32ec      	adds	r2, #236	; 0xec
 8004882:	2101      	movs	r1, #1
 8004884:	9102      	str	r1, [sp, #8]
 8004886:	9201      	str	r2, [sp, #4]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4603      	mov	r3, r0
 800488c:	2203      	movs	r2, #3
 800488e:	2103      	movs	r1, #3
 8004890:	2003      	movs	r0, #3
 8004892:	f7fd fa26 	bl	8001ce2 <matmul>
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	38d1b717 	.word	0x38d1b717

080048a4 <update_state_est_data>:

void update_state_est_data(state_est_data_t *state_est_data, ekf_state_t *ekf_state) {
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(ekf_state->x_est[0] * 1000);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80048b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800493c <update_state_est_data+0x98>
 80048b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c0:	ee17 2a90 	vmov	r2, s15
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(ekf_state->x_est[1] * 1000);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80048ce:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800493c <update_state_est_data+0x98>
 80048d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048da:	ee17 2a90 	vmov	r2, s15
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(ekf_state->x_est[1] * 1000);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80048e8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800493c <update_state_est_data+0x98>
 80048ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f4:	ee17 2a90 	vmov	r2, s15
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(ekf_state->u[0] * 1000);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8004902:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800493c <update_state_est_data+0x98>
 8004906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800490a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800490e:	ee17 2a90 	vmov	r2, s15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(ekf_state->u[0] * 1000);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800491c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800493c <update_state_est_data+0x98>
 8004920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004928:	ee17 2a90 	vmov	r2, s15
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	447a0000 	.word	0x447a0000

08004940 <process_measurements>:

void process_measurements(ekf_state_t *ekf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior, env *env) {
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b095      	sub	sp, #84	; 0x54
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
    float temp_meas[NUMBER_SENSORBOARDS];
    bool temp_meas_active[NUMBER_SENSORBOARDS];
    float acc_x_meas[NUMBER_SENSORBOARDS];
    bool acc_x_meas_active[NUMBER_SENSORBOARDS];

    for (int i = 0; i < NUMBER_SENSORBOARDS; i++){
 800494e:	2300      	movs	r3, #0
 8004950:	647b      	str	r3, [r7, #68]	; 0x44
 8004952:	e0b0      	b.n	8004ab6 <process_measurements+0x176>
        /* barometer */
        if (state_est_meas->baro_state_est[i].ts > state_est_meas_prior->baro_state_est[i].ts || state_est_meas->baro_state_est[i].ts == 0) {
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	3308      	adds	r3, #8
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4403      	add	r3, r0
 8004974:	3308      	adds	r3, #8
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4299      	cmp	r1, r3
 800497a:	d80a      	bhi.n	8004992 <process_measurements+0x52>
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	3308      	adds	r3, #8
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d12b      	bne.n	80049ea <process_measurements+0xaa>
            ekf_state->z[i] = state_est_meas->baro_state_est[i].pressure;
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004996:	4613      	mov	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68f9      	ldr	r1, [r7, #12]
 80049a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a6:	3350      	adds	r3, #80	; 0x50
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	601a      	str	r2, [r3, #0]
            ekf_state->z_active[i] = true;
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_state_est[i].temperature;
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c0:	4613      	mov	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	3304      	adds	r3, #4
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80049d6:	440b      	add	r3, r1
 80049d8:	3b20      	subs	r3, #32
 80049da:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 80049dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80049e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e2:	4413      	add	r3, r2
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e01d      	b.n	8004a26 <process_measurements+0xe6>
        } else {
            ekf_state->z[i] = 0;
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ee:	3350      	adds	r3, #80	; 0x50
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
            ekf_state->z_active[i] = false;
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a10:	4413      	add	r3, r2
 8004a12:	3b20      	subs	r3, #32
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8004a1a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a20:	4413      	add	r3, r2
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_state_est[i].ts > state_est_meas_prior->imu_state_est[i].ts || state_est_meas->imu_state_est[i].ts == 0) {
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	333c      	adds	r3, #60	; 0x3c
 8004a36:	6819      	ldr	r1, [r3, #0]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4403      	add	r3, r0
 8004a46:	333c      	adds	r3, #60	; 0x3c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	d80a      	bhi.n	8004a64 <process_measurements+0x124>
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	333c      	adds	r3, #60	; 0x3c
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <process_measurements+0x152>
            acc_x_meas[i] = state_est_meas->imu_state_est[i].acc_x;
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	3330      	adds	r3, #48	; 0x30
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004a7e:	440b      	add	r3, r1
 8004a80:	3b30      	subs	r3, #48	; 0x30
 8004a82:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8004a84:	f107 0214 	add.w	r2, r7, #20
 8004a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8a:	4413      	add	r3, r2
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e00e      	b.n	8004ab0 <process_measurements+0x170>
        } else {
            acc_x_meas[i] = 0;
 8004a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3b30      	subs	r3, #48	; 0x30
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8004aa4:	f107 0214 	add.w	r2, r7, #20
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aaa:	4413      	add	r3, r2
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUMBER_SENSORBOARDS; i++){
 8004ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f77f af4b 	ble.w	8004954 <process_measurements+0x14>
        }
    }

    /* eliminate barometer measurements */
    /* TODO @maxi: Replace with sensor elimination by extrapolation */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->z_active);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004aca:	461a      	mov	r2, r3
 8004acc:	2003      	movs	r0, #3
 8004ace:	f000 f973 	bl	8004db8 <sensor_elimination_by_stdev>

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8004ad2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ada:	4619      	mov	r1, r3
 8004adc:	2003      	movs	r0, #3
 8004ade:	f000 f96b 	bl	8004db8 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8004ae2:	f107 0214 	add.w	r2, r7, #20
 8004ae6:	f107 0318 	add.w	r3, r7, #24
 8004aea:	4619      	mov	r1, r3
 8004aec:	2003      	movs	r0, #3
 8004aee:	f000 f963 	bl	8004db8 <sensor_elimination_by_stdev>

    /* update num_z_active */
    ekf_state->num_z_active = 0;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    ekf_state->u[0] = 0;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    int32_t num_acc_x_meas_active = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	643b      	str	r3, [r7, #64]	; 0x40
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t num_temp_meas_active = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004b12:	2300      	movs	r3, #0
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
 8004b16:	e04a      	b.n	8004bae <process_measurements+0x26e>
        if (ekf_state->z_active[i]){
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <process_measurements+0x1f8>
            ekf_state->num_z_active += 1;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
        }
        if (acc_x_meas_active[i]) {
 8004b38:	f107 0214 	add.w	r2, r7, #20
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d012      	beq.n	8004b6c <process_measurements+0x22c>
            ekf_state->u[0] += acc_x_meas[i];
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b54:	4413      	add	r3, r2
 8004b56:	3b30      	subs	r3, #48	; 0x30
 8004b58:	edd3 7a00 	vldr	s15, [r3]
 8004b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
            num_acc_x_meas_active += 1;
 8004b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b68:	3301      	adds	r3, #1
 8004b6a:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b74:	4413      	add	r3, r2
 8004b76:	3b20      	subs	r3, #32
 8004b78:	edd3 7a00 	vldr	s15, [r3]
 8004b7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	d010      	beq.n	8004ba8 <process_measurements+0x268>
            temp_meas_mean += temp_meas[i];
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b8e:	4413      	add	r3, r2
 8004b90:	3b20      	subs	r3, #32
 8004b92:	edd3 7a00 	vldr	s15, [r3]
 8004b96:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_temp_meas_active += 1;
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	3301      	adds	r3, #1
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	ddb1      	ble.n	8004b18 <process_measurements+0x1d8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->z_active, ekf_state->z);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	2103      	movs	r1, #3
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f7fc fa23 	bl	8001018 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 8004bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dd21      	ble.n	8004c1c <process_measurements+0x2dc>
        ekf_state->u[0] /= num_acc_x_meas_active;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8004bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
        /* gravity compensation for accelerometer */
        ekf_state->u[0] -= GRAVITATION;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fb fcc5 	bl	8000588 <__aeabi_f2d>
 8004bfe:	a314      	add	r3, pc, #80	; (adr r3, 8004c50 <process_measurements+0x310>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fb60 	bl	80002c8 <__aeabi_dsub>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	4621      	mov	r1, r4
 8004c10:	f7fb ffc2 	bl	8000b98 <__aeabi_d2f>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }
    if (num_temp_meas_active > 0){
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dd0f      	ble.n	8004c42 <process_measurements+0x302>
        temp_meas_mean /= num_temp_meas_active;
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c2c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8004c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        update_env(env, temp_meas_mean);
 8004c38:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004c3c:	6838      	ldr	r0, [r7, #0]
 8004c3e:	f7fc f98f 	bl	8000f60 <update_env>
    }
}
 8004c42:	bf00      	nop
 8004c44:	374c      	adds	r7, #76	; 0x4c
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd90      	pop	{r4, r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	f3af 8000 	nop.w
 8004c50:	3a92a305 	.word	0x3a92a305
 8004c54:	40239d01 	.word	0x40239d01

08004c58 <select_noise_models>:

void select_noise_models(ekf_state_t *ekf_state, flight_phase_detection_t *flight_phase_detection, env *env){
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b091      	sub	sp, #68	; 0x44
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d822      	bhi.n	8004cb4 <select_noise_models+0x5c>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <select_noise_models+0x1c>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c8d 	.word	0x08004c8d
 8004c78:	08004c8d 	.word	0x08004c8d
 8004c7c:	08004c97 	.word	0x08004c97
 8004c80:	08004ca1 	.word	0x08004ca1
 8004c84:	08004cab 	.word	0x08004cab
 8004c88:	08004c8d 	.word	0x08004c8d
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8004c8c:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <select_noise_models+0x140>)
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8004c90:	4b42      	ldr	r3, [pc, #264]	; (8004d9c <select_noise_models+0x144>)
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004c94:	e00e      	b.n	8004cb4 <select_noise_models+0x5c>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8004c96:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <select_noise_models+0x148>)
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8004c9a:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <select_noise_models+0x14c>)
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004c9e:	e009      	b.n	8004cb4 <select_noise_models+0x5c>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8004ca0:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <select_noise_models+0x150>)
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8004ca4:	4b41      	ldr	r3, [pc, #260]	; (8004dac <select_noise_models+0x154>)
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004ca8:	e004      	b.n	8004cb4 <select_noise_models+0x5c>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8004caa:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <select_noise_models+0x158>)
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8004cae:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <select_noise_models+0x15c>)
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004cb2:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_NOISE; i++){
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb8:	e01b      	b.n	8004cf2 <select_noise_models+0x9a>
        ekf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8004cba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004cbc:	f7fb fc64 	bl	8000588 <__aeabi_f2d>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8004d90 <select_noise_models+0x138>
 8004cc8:	ec44 3b10 	vmov	d0, r3, r4
 8004ccc:	f013 f8fe 	bl	8017ecc <pow>
 8004cd0:	ec54 3b10 	vmov	r3, r4, d0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	f7fb ff5e 	bl	8000b98 <__aeabi_d2f>
 8004cdc:	4601      	mov	r1, r0
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	3316      	adds	r3, #22
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3304      	adds	r3, #4
 8004cea:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_NOISE; i++){
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dde0      	ble.n	8004cba <select_noise_models+0x62>
    }

    float p[1];
    float h[1] = {ekf_state->x_est[0]};
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cfe:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8004d00:	2301      	movs	r3, #1
 8004d02:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8004d04:	f107 0114 	add.w	r1, r7, #20
 8004d08:	f107 0218 	add.w	r2, r7, #24
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	460b      	mov	r3, r1
 8004d14:	2101      	movs	r1, #1
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc f9de 	bl	80010d8 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8004d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d20:	eeb0 0a67 	vmov.f32	s0, s15
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fc fa3f 	bl	80011a8 <altitude_gradient>
 8004d2a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8004d2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004d32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	eef0 7ae7 	vabs.f32	s15, s15
 8004d3e:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004d42:	2300      	movs	r3, #0
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	e01a      	b.n	8004d7e <select_noise_models+0x126>
        ekf_state->R[i][i] = pow(altitude_stdev, 2);
 8004d48:	6a38      	ldr	r0, [r7, #32]
 8004d4a:	f7fb fc1d 	bl	8000588 <__aeabi_f2d>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8004d90 <select_noise_models+0x138>
 8004d56:	ec44 3b10 	vmov	d0, r3, r4
 8004d5a:	f013 f8b7 	bl	8017ecc <pow>
 8004d5e:	ec54 3b10 	vmov	r3, r4, d0
 8004d62:	4618      	mov	r0, r3
 8004d64:	4621      	mov	r1, r4
 8004d66:	f7fb ff17 	bl	8000b98 <__aeabi_d2f>
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	4413      	add	r3, r2
 8004d74:	33b8      	adds	r3, #184	; 0xb8
 8004d76:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	dde1      	ble.n	8004d48 <select_noise_models+0xf0>
    }
}
 8004d84:	bf00      	nop
 8004d86:	373c      	adds	r7, #60	; 0x3c
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd90      	pop	{r4, r7, pc}
 8004d8c:	f3af 8000 	nop.w
 8004d90:	00000000 	.word	0x00000000
 8004d94:	40000000 	.word	0x40000000
 8004d98:	3c97e316 	.word	0x3c97e316
 8004d9c:	3fef3b64 	.word	0x3fef3b64
 8004da0:	3fa01965 	.word	0x3fa01965
 8004da4:	41500000 	.word	0x41500000
 8004da8:	3f1e3737 	.word	0x3f1e3737
 8004dac:	40ec28f6 	.word	0x40ec28f6
 8004db0:	3ffa41cc 	.word	0x3ffa41cc
 8004db4:	40795810 	.word	0x40795810

08004db8 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8004db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dba:	b08b      	sub	sp, #44	; 0x2c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	e017      	b.n	8004e04 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00e      	beq.n	8004dfe <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	3301      	adds	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	4413      	add	r3, r2
 8004dee:	edd3 7a00 	vldr	s15, [r3]
 8004df2:	ed97 7a08 	vldr	s14, [r7, #32]
 8004df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfa:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3301      	adds	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	dbe3      	blt.n	8004dd4 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dd0a      	ble.n	8004e28 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e1c:	edd7 6a08 	vldr	s13, [r7, #32]
 8004e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e24:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e033      	b.n	8004e9c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02a      	beq.n	8004e96 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4413      	add	r3, r2
 8004e48:	ed93 7a00 	vldr	s14, [r3]
 8004e4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e54:	ee17 0a90 	vmov	r0, s15
 8004e58:	f7fb fb96 	bl	8000588 <__aeabi_f2d>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8004f58 <sensor_elimination_by_stdev+0x1a0>
 8004e64:	ec44 3b10 	vmov	d0, r3, r4
 8004e68:	f013 f830 	bl	8017ecc <pow>
 8004e6c:	ec56 5b10 	vmov	r5, r6, d0
 8004e70:	69b8      	ldr	r0, [r7, #24]
 8004e72:	f7fb fb89 	bl	8000588 <__aeabi_f2d>
 8004e76:	4603      	mov	r3, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	4628      	mov	r0, r5
 8004e80:	4631      	mov	r1, r6
 8004e82:	f7fb fa23 	bl	80002cc <__adddf3>
 8004e86:	4603      	mov	r3, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	f7fb fe83 	bl	8000b98 <__aeabi_d2f>
 8004e92:	4603      	mov	r3, r0
 8004e94:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	dbc7      	blt.n	8004e34 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dd1a      	ble.n	8004ee0 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb4:	ed97 7a06 	vldr	s14, [r7, #24]
 8004eb8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ebc:	ee16 0a90 	vmov	r0, s13
 8004ec0:	f7fb fb62 	bl	8000588 <__aeabi_f2d>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	ec44 3b10 	vmov	d0, r3, r4
 8004ecc:	f013 f96e 	bl	80181ac <sqrt>
 8004ed0:	ec54 3b10 	vmov	r3, r4, d0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	f7fb fe5e 	bl	8000b98 <__aeabi_d2f>
 8004edc:	4603      	mov	r3, r0
 8004ede:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	e02f      	b.n	8004f46 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d026      	beq.n	8004f40 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4413      	add	r3, r2
 8004efa:	ed93 7a00 	vldr	s14, [r3]
 8004efe:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f06:	eef0 7ae7 	vabs.f32	s15, s15
 8004f0a:	ee17 0a90 	vmov	r0, s15
 8004f0e:	f7fb fb3b 	bl	8000588 <__aeabi_f2d>
 8004f12:	4604      	mov	r4, r0
 8004f14:	460d      	mov	r5, r1
 8004f16:	69b8      	ldr	r0, [r7, #24]
 8004f18:	f7fb fb36 	bl	8000588 <__aeabi_f2d>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	f7fb f9d4 	bl	80002cc <__adddf3>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f7fb fe14 	bl	8000b58 <__aeabi_dcmpgt>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	3301      	adds	r3, #1
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	dbcb      	blt.n	8004ee6 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8004f4e:	bf00      	nop
 8004f50:	372c      	adds	r7, #44	; 0x2c
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f56:	bf00      	nop
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	40000000 	.word	0x40000000

08004f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004f64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f66:	e003      	b.n	8004f70 <LoopCopyDataInit>

08004f68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f6e:	3104      	adds	r1, #4

08004f70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f70:	480b      	ldr	r0, [pc, #44]	; (8004fa0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f78:	d3f6      	bcc.n	8004f68 <CopyDataInit>
  ldr  r2, =_sbss
 8004f7a:	4a0b      	ldr	r2, [pc, #44]	; (8004fa8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f7c:	e002      	b.n	8004f84 <LoopFillZerobss>

08004f7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f80:	f842 3b04 	str.w	r3, [r2], #4

08004f84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f88:	d3f9      	bcc.n	8004f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f8a:	f7fd ff21 	bl	8002dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f8e:	f011 fee3 	bl	8016d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f92:	f7fc f95b 	bl	800124c <main>
  bx  lr    
 8004f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f98:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004f9c:	0801a2e8 	.word	0x0801a2e8
  ldr  r0, =_sdata
 8004fa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004fa4:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8004fa8:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8004fac:	200170c8 	.word	0x200170c8

08004fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fb0:	e7fe      	b.n	8004fb0 <ADC_IRQHandler>

08004fb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fb6:	2003      	movs	r0, #3
 8004fb8:	f000 f8f7 	bl	80051aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f7fd fdab 	bl	8002b18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004fc2:	f7fd fb67 	bl	8002694 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_IncTick+0x20>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_IncTick+0x24>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_IncTick+0x24>)
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000008 	.word	0x20000008
 8004ff0:	20015340 	.word	0x20015340

08004ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_GetTick+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20015340 	.word	0x20015340

0800500c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005014:	f7ff ffee 	bl	8004ff4 <HAL_GetTick>
 8005018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d005      	beq.n	8005032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_Delay+0x40>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005032:	bf00      	nop
 8005034:	f7ff ffde 	bl	8004ff4 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	429a      	cmp	r2, r3
 8005042:	d8f7      	bhi.n	8005034 <HAL_Delay+0x28>
  {
  }
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000008 	.word	0x20000008

08005050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <__NVIC_SetPriorityGrouping+0x40>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800506c:	4013      	ands	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <__NVIC_SetPriorityGrouping+0x44>)
 800507a:	4313      	orrs	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800507e:	4a04      	ldr	r2, [pc, #16]	; (8005090 <__NVIC_SetPriorityGrouping+0x40>)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	60d3      	str	r3, [r2, #12]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000ed00 	.word	0xe000ed00
 8005094:	05fa0000 	.word	0x05fa0000

08005098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <__NVIC_GetPriorityGrouping+0x18>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	f003 0307 	and.w	r3, r3, #7
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	e000ed00 	.word	0xe000ed00

080050b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	db0b      	blt.n	80050de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	f003 021f 	and.w	r2, r3, #31
 80050cc:	4907      	ldr	r1, [pc, #28]	; (80050ec <__NVIC_EnableIRQ+0x38>)
 80050ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2001      	movs	r0, #1
 80050d6:	fa00 f202 	lsl.w	r2, r0, r2
 80050da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000e100 	.word	0xe000e100

080050f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	6039      	str	r1, [r7, #0]
 80050fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005100:	2b00      	cmp	r3, #0
 8005102:	db0a      	blt.n	800511a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	b2da      	uxtb	r2, r3
 8005108:	490c      	ldr	r1, [pc, #48]	; (800513c <__NVIC_SetPriority+0x4c>)
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	0112      	lsls	r2, r2, #4
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	440b      	add	r3, r1
 8005114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005118:	e00a      	b.n	8005130 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4908      	ldr	r1, [pc, #32]	; (8005140 <__NVIC_SetPriority+0x50>)
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	3b04      	subs	r3, #4
 8005128:	0112      	lsls	r2, r2, #4
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	440b      	add	r3, r1
 800512e:	761a      	strb	r2, [r3, #24]
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	e000e100 	.word	0xe000e100
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f1c3 0307 	rsb	r3, r3, #7
 800515e:	2b04      	cmp	r3, #4
 8005160:	bf28      	it	cs
 8005162:	2304      	movcs	r3, #4
 8005164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3304      	adds	r3, #4
 800516a:	2b06      	cmp	r3, #6
 800516c:	d902      	bls.n	8005174 <NVIC_EncodePriority+0x30>
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3b03      	subs	r3, #3
 8005172:	e000      	b.n	8005176 <NVIC_EncodePriority+0x32>
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43da      	mvns	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	401a      	ands	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800518c:	f04f 31ff 	mov.w	r1, #4294967295
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	fa01 f303 	lsl.w	r3, r1, r3
 8005196:	43d9      	mvns	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800519c:	4313      	orrs	r3, r2
         );
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3724      	adds	r7, #36	; 0x24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff ff4c 	bl	8005050 <__NVIC_SetPriorityGrouping>
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051d2:	f7ff ff61 	bl	8005098 <__NVIC_GetPriorityGrouping>
 80051d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	6978      	ldr	r0, [r7, #20]
 80051de:	f7ff ffb1 	bl	8005144 <NVIC_EncodePriority>
 80051e2:	4602      	mov	r2, r0
 80051e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff ff80 	bl	80050f0 <__NVIC_SetPriority>
}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff ff54 	bl	80050b4 <__NVIC_EnableIRQ>
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005220:	f7ff fee8 	bl	8004ff4 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e099      	b.n	8005364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005250:	e00f      	b.n	8005272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005252:	f7ff fecf 	bl	8004ff4 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b05      	cmp	r3, #5
 800525e:	d908      	bls.n	8005272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2203      	movs	r2, #3
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e078      	b.n	8005364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e8      	bne.n	8005252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4b38      	ldr	r3, [pc, #224]	; (800536c <HAL_DMA_Init+0x158>)
 800528c:	4013      	ands	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800529e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d107      	bne.n	80052dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	4313      	orrs	r3, r2
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b04      	cmp	r3, #4
 8005304:	d117      	bne.n	8005336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00e      	beq.n	8005336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 faa5 	bl	8005868 <DMA_CheckFifoParam>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005332:	2301      	movs	r3, #1
 8005334:	e016      	b.n	8005364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa5c 	bl	80057fc <DMA_CalcBaseAndBitshift>
 8005344:	4603      	mov	r3, r0
 8005346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	223f      	movs	r2, #63	; 0x3f
 800534e:	409a      	lsls	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	f010803f 	.word	0xf010803f

08005370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_DMA_Start_IT+0x26>
 8005392:	2302      	movs	r3, #2
 8005394:	e048      	b.n	8005428 <HAL_DMA_Start_IT+0xb8>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d137      	bne.n	800541a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f9ee 	bl	80057a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c8:	223f      	movs	r2, #63	; 0x3f
 80053ca:	409a      	lsls	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0216 	orr.w	r2, r2, #22
 80053de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053ee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0208 	orr.w	r2, r2, #8
 8005406:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	e005      	b.n	8005426 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005422:	2302      	movs	r3, #2
 8005424:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005426:	7dfb      	ldrb	r3, [r7, #23]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d004      	beq.n	800544e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e00c      	b.n	8005468 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2205      	movs	r2, #5
 8005452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005480:	4b92      	ldr	r3, [pc, #584]	; (80056cc <HAL_DMA_IRQHandler+0x258>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a92      	ldr	r2, [pc, #584]	; (80056d0 <HAL_DMA_IRQHandler+0x25c>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	0a9b      	lsrs	r3, r3, #10
 800548c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005492:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549e:	2208      	movs	r2, #8
 80054a0:	409a      	lsls	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01a      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d013      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0204 	bic.w	r2, r2, #4
 80054c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054cc:	2208      	movs	r2, #8
 80054ce:	409a      	lsls	r2, r3
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	2201      	movs	r2, #1
 80054e6:	409a      	lsls	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d012      	beq.n	8005516 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005502:	2201      	movs	r2, #1
 8005504:	409a      	lsls	r2, r3
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	f043 0202 	orr.w	r2, r3, #2
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551a:	2204      	movs	r2, #4
 800551c:	409a      	lsls	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d012      	beq.n	800554c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	2204      	movs	r2, #4
 800553a:	409a      	lsls	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005544:	f043 0204 	orr.w	r2, r3, #4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005550:	2210      	movs	r2, #16
 8005552:	409a      	lsls	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d043      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d03c      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556e:	2210      	movs	r2, #16
 8005570:	409a      	lsls	r2, r3
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d018      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d024      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
 80055a2:	e01f      	b.n	80055e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01b      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
 80055b4:	e016      	b.n	80055e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0208 	bic.w	r2, r2, #8
 80055d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	2220      	movs	r2, #32
 80055ea:	409a      	lsls	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 808e 	beq.w	8005712 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8086 	beq.w	8005712 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	2220      	movs	r2, #32
 800560c:	409a      	lsls	r2, r3
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b05      	cmp	r3, #5
 800561c:	d136      	bne.n	800568c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0216 	bic.w	r2, r2, #22
 800562c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800563c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <HAL_DMA_IRQHandler+0x1da>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0208 	bic.w	r2, r2, #8
 800565c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005662:	223f      	movs	r2, #63	; 0x3f
 8005664:	409a      	lsls	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	2b00      	cmp	r3, #0
 8005680:	d07d      	beq.n	800577e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	4798      	blx	r3
        }
        return;
 800568a:	e078      	b.n	800577e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01c      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d108      	bne.n	80056ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d030      	beq.n	8005712 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
 80056b8:	e02b      	b.n	8005712 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d027      	beq.n	8005712 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
 80056ca:	e022      	b.n	8005712 <HAL_DMA_IRQHandler+0x29e>
 80056cc:	20000000 	.word	0x20000000
 80056d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10f      	bne.n	8005702 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0210 	bic.w	r2, r2, #16
 80056f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	2b00      	cmp	r3, #0
 8005718:	d032      	beq.n	8005780 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d022      	beq.n	800576c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2205      	movs	r2, #5
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	3301      	adds	r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	429a      	cmp	r2, r3
 8005748:	d307      	bcc.n	800575a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f2      	bne.n	800573e <HAL_DMA_IRQHandler+0x2ca>
 8005758:	e000      	b.n	800575c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800575a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
 800577c:	e000      	b.n	8005780 <HAL_DMA_IRQHandler+0x30c>
        return;
 800577e:	bf00      	nop
    }
  }
}
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop

08005788 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d108      	bne.n	80057e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057de:	e007      	b.n	80057f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	60da      	str	r2, [r3, #12]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	3b10      	subs	r3, #16
 800580c:	4a13      	ldr	r2, [pc, #76]	; (800585c <DMA_CalcBaseAndBitshift+0x60>)
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	091b      	lsrs	r3, r3, #4
 8005814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <DMA_CalcBaseAndBitshift+0x64>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d908      	bls.n	800583c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <DMA_CalcBaseAndBitshift+0x68>)
 8005832:	4013      	ands	r3, r2
 8005834:	1d1a      	adds	r2, r3, #4
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	659a      	str	r2, [r3, #88]	; 0x58
 800583a:	e006      	b.n	800584a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <DMA_CalcBaseAndBitshift+0x68>)
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	aaaaaaab 	.word	0xaaaaaaab
 8005860:	0801a134 	.word	0x0801a134
 8005864:	fffffc00 	.word	0xfffffc00

08005868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d11f      	bne.n	80058c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d855      	bhi.n	8005934 <DMA_CheckFifoParam+0xcc>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <DMA_CheckFifoParam+0x28>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058a1 	.word	0x080058a1
 8005894:	080058b3 	.word	0x080058b3
 8005898:	080058a1 	.word	0x080058a1
 800589c:	08005935 	.word	0x08005935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d045      	beq.n	8005938 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b0:	e042      	b.n	8005938 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ba:	d13f      	bne.n	800593c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c0:	e03c      	b.n	800593c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ca:	d121      	bne.n	8005910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d836      	bhi.n	8005940 <DMA_CheckFifoParam+0xd8>
 80058d2:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <DMA_CheckFifoParam+0x70>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	080058e9 	.word	0x080058e9
 80058dc:	080058ef 	.word	0x080058ef
 80058e0:	080058e9 	.word	0x080058e9
 80058e4:	08005901 	.word	0x08005901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
      break;
 80058ec:	e02f      	b.n	800594e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d024      	beq.n	8005944 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fe:	e021      	b.n	8005944 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005908:	d11e      	bne.n	8005948 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800590e:	e01b      	b.n	8005948 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <DMA_CheckFifoParam+0xb4>
 8005916:	2b03      	cmp	r3, #3
 8005918:	d003      	beq.n	8005922 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800591a:	e018      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	e015      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00e      	beq.n	800594c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      break;
 8005932:	e00b      	b.n	800594c <DMA_CheckFifoParam+0xe4>
      break;
 8005934:	bf00      	nop
 8005936:	e00a      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      break;
 8005938:	bf00      	nop
 800593a:	e008      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      break;
 800593c:	bf00      	nop
 800593e:	e006      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      break;
 8005940:	bf00      	nop
 8005942:	e004      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      break;
 8005944:	bf00      	nop
 8005946:	e002      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      break;   
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <DMA_CheckFifoParam+0xe6>
      break;
 800594c:	bf00      	nop
    }
  } 
  
  return status; 
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	; 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e175      	b.n	8005c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800597c:	2201      	movs	r2, #1
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	429a      	cmp	r2, r3
 8005996:	f040 8164 	bne.w	8005c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d00b      	beq.n	80059ba <HAL_GPIO_Init+0x5e>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d007      	beq.n	80059ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059ae:	2b11      	cmp	r3, #17
 80059b0:	d003      	beq.n	80059ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b12      	cmp	r3, #18
 80059b8:	d130      	bne.n	8005a1c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2203      	movs	r2, #3
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059f0:	2201      	movs	r2, #1
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 0201 	and.w	r2, r3, #1
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	2203      	movs	r2, #3
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x100>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b12      	cmp	r3, #18
 8005a5a:	d123      	bne.n	8005aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	08da      	lsrs	r2, r3, #3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3208      	adds	r2, #8
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	220f      	movs	r2, #15
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	08da      	lsrs	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	69b9      	ldr	r1, [r7, #24]
 8005aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0203 	and.w	r2, r3, #3
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80be 	beq.w	8005c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae6:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <HAL_GPIO_Init+0x320>)
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aea:	4a64      	ldr	r2, [pc, #400]	; (8005c7c <HAL_GPIO_Init+0x320>)
 8005aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af0:	6453      	str	r3, [r2, #68]	; 0x44
 8005af2:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <HAL_GPIO_Init+0x320>)
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005afe:	4a60      	ldr	r2, [pc, #384]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	3302      	adds	r3, #2
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	220f      	movs	r2, #15
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a57      	ldr	r2, [pc, #348]	; (8005c84 <HAL_GPIO_Init+0x328>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d037      	beq.n	8005b9a <HAL_GPIO_Init+0x23e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a56      	ldr	r2, [pc, #344]	; (8005c88 <HAL_GPIO_Init+0x32c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_GPIO_Init+0x23a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a55      	ldr	r2, [pc, #340]	; (8005c8c <HAL_GPIO_Init+0x330>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02b      	beq.n	8005b92 <HAL_GPIO_Init+0x236>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a54      	ldr	r2, [pc, #336]	; (8005c90 <HAL_GPIO_Init+0x334>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d025      	beq.n	8005b8e <HAL_GPIO_Init+0x232>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a53      	ldr	r2, [pc, #332]	; (8005c94 <HAL_GPIO_Init+0x338>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <HAL_GPIO_Init+0x22e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a52      	ldr	r2, [pc, #328]	; (8005c98 <HAL_GPIO_Init+0x33c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d019      	beq.n	8005b86 <HAL_GPIO_Init+0x22a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a51      	ldr	r2, [pc, #324]	; (8005c9c <HAL_GPIO_Init+0x340>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_GPIO_Init+0x226>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a50      	ldr	r2, [pc, #320]	; (8005ca0 <HAL_GPIO_Init+0x344>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00d      	beq.n	8005b7e <HAL_GPIO_Init+0x222>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a4f      	ldr	r2, [pc, #316]	; (8005ca4 <HAL_GPIO_Init+0x348>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <HAL_GPIO_Init+0x21e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a4e      	ldr	r2, [pc, #312]	; (8005ca8 <HAL_GPIO_Init+0x34c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_GPIO_Init+0x21a>
 8005b72:	2309      	movs	r3, #9
 8005b74:	e012      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b76:	230a      	movs	r3, #10
 8005b78:	e010      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	e00e      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7e:	2307      	movs	r3, #7
 8005b80:	e00c      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b82:	2306      	movs	r3, #6
 8005b84:	e00a      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b86:	2305      	movs	r3, #5
 8005b88:	e008      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8a:	2304      	movs	r3, #4
 8005b8c:	e006      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e004      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e002      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	f002 0203 	and.w	r2, r2, #3
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	4093      	lsls	r3, r2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bac:	4934      	ldr	r1, [pc, #208]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bba:	4b3c      	ldr	r3, [pc, #240]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bde:	4a33      	ldr	r2, [pc, #204]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005be4:	4b31      	ldr	r3, [pc, #196]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c0e:	4b27      	ldr	r3, [pc, #156]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c32:	4a1e      	ldr	r2, [pc, #120]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c38:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c5c:	4a13      	ldr	r2, [pc, #76]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	f67f ae86 	bls.w	800597c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c70:	bf00      	nop
 8005c72:	3724      	adds	r7, #36	; 0x24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	40013800 	.word	0x40013800
 8005c84:	40020000 	.word	0x40020000
 8005c88:	40020400 	.word	0x40020400
 8005c8c:	40020800 	.word	0x40020800
 8005c90:	40020c00 	.word	0x40020c00
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40021400 	.word	0x40021400
 8005c9c:	40021800 	.word	0x40021800
 8005ca0:	40021c00 	.word	0x40021c00
 8005ca4:	40022000 	.word	0x40022000
 8005ca8:	40022400 	.word	0x40022400
 8005cac:	40013c00 	.word	0x40013c00

08005cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cc0:	787b      	ldrb	r3, [r7, #1]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cc6:	887a      	ldrh	r2, [r7, #2]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ccc:	e003      	b.n	8005cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cce:	887b      	ldrh	r3, [r7, #2]
 8005cd0:	041a      	lsls	r2, r3, #16
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	619a      	str	r2, [r3, #24]
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce4:	b08f      	sub	sp, #60	; 0x3c
 8005ce6:	af0a      	add	r7, sp, #40	; 0x28
 8005ce8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e116      	b.n	8005f22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f010 fcca 	bl	80166a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2203      	movs	r2, #3
 8005d18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f006 fa57 	bl	800c1e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	687e      	ldr	r6, [r7, #4]
 8005d40:	466d      	mov	r5, sp
 8005d42:	f106 0410 	add.w	r4, r6, #16
 8005d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d52:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d56:	1d33      	adds	r3, r6, #4
 8005d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d5a:	6838      	ldr	r0, [r7, #0]
 8005d5c:	f006 f938 	bl	800bfd0 <USB_CoreInit>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e0d7      	b.n	8005f22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f006 fa45 	bl	800c208 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
 8005d82:	e04a      	b.n	8005e1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	333d      	adds	r3, #61	; 0x3d
 8005d94:	2201      	movs	r2, #1
 8005d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d98:	7bfa      	ldrb	r2, [r7, #15]
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	333c      	adds	r3, #60	; 0x3c
 8005da8:	7bfa      	ldrb	r2, [r7, #15]
 8005daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dac:	7bfa      	ldrb	r2, [r7, #15]
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	b298      	uxth	r0, r3
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	3342      	adds	r3, #66	; 0x42
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005dc4:	7bfa      	ldrb	r2, [r7, #15]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	333f      	adds	r3, #63	; 0x3f
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005dd8:	7bfa      	ldrb	r2, [r7, #15]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	3344      	adds	r3, #68	; 0x44
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005dec:	7bfa      	ldrb	r2, [r7, #15]
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	3348      	adds	r3, #72	; 0x48
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e00:	7bfa      	ldrb	r2, [r7, #15]
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	3350      	adds	r3, #80	; 0x50
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	3301      	adds	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
 8005e1a:	7bfa      	ldrb	r2, [r7, #15]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d3af      	bcc.n	8005d84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]
 8005e28:	e044      	b.n	8005eb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e2a:	7bfa      	ldrb	r2, [r7, #15]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e52:	7bfa      	ldrb	r2, [r7, #15]
 8005e54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e56:	7bfa      	ldrb	r2, [r7, #15]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e82:	7bfa      	ldrb	r2, [r7, #15]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d3b5      	bcc.n	8005e2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	687e      	ldr	r6, [r7, #4]
 8005ec6:	466d      	mov	r5, sp
 8005ec8:	f106 0410 	add.w	r4, r6, #16
 8005ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ed8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005edc:	1d33      	adds	r3, r6, #4
 8005ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ee0:	6838      	ldr	r0, [r7, #0]
 8005ee2:	f006 f9bb 	bl	800c25c <USB_DevInit>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e014      	b.n	8005f22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d102      	bne.n	8005f16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 f881 	bl	8007018 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f007 fa0a 	bl	800d334 <USB_DevDisconnect>

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_PCD_Start+0x16>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e012      	b.n	8005f66 <HAL_PCD_Start+0x3c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f007 f9d9 	bl	800d304 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f006 f934 	bl	800c1c4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005f6e:	b590      	push	{r4, r7, lr}
 8005f70:	b08d      	sub	sp, #52	; 0x34
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f007 fa80 	bl	800d48a <USB_GetMode>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 83ca 	bne.w	8006726 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f007 f9e4 	bl	800d364 <USB_ReadInterrupts>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 83c0 	beq.w	8006724 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f007 f9db 	bl	800d364 <USB_ReadInterrupts>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d107      	bne.n	8005fc8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f002 0202 	and.w	r2, r2, #2
 8005fc6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f007 f9c9 	bl	800d364 <USB_ReadInterrupts>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d161      	bne.n	80060a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0210 	bic.w	r2, r2, #16
 8005fea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	3304      	adds	r3, #4
 800600a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	0c5b      	lsrs	r3, r3, #17
 8006010:	f003 030f 	and.w	r3, r3, #15
 8006014:	2b02      	cmp	r3, #2
 8006016:	d124      	bne.n	8006062 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d035      	beq.n	8006090 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	091b      	lsrs	r3, r3, #4
 800602c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800602e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006032:	b29b      	uxth	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	6a38      	ldr	r0, [r7, #32]
 8006038:	f007 f841 	bl	800d0be <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006048:	441a      	add	r2, r3
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800605a:	441a      	add	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	619a      	str	r2, [r3, #24]
 8006060:	e016      	b.n	8006090 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	0c5b      	lsrs	r3, r3, #17
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	2b06      	cmp	r3, #6
 800606c:	d110      	bne.n	8006090 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006074:	2208      	movs	r2, #8
 8006076:	4619      	mov	r1, r3
 8006078:	6a38      	ldr	r0, [r7, #32]
 800607a:	f007 f820 	bl	800d0be <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800608a:	441a      	add	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0210 	orr.w	r2, r2, #16
 800609e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f007 f95d 	bl	800d364 <USB_ReadInterrupts>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060b4:	d16e      	bne.n	8006194 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f007 f963 	bl	800d38a <USB_ReadDevAllOutEpInterrupt>
 80060c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80060c6:	e062      	b.n	800618e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d057      	beq.n	8006182 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	4611      	mov	r1, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	f007 f988 	bl	800d3f2 <USB_ReadDevOutEPInterrupt>
 80060e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	2301      	movs	r3, #1
 80060fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fdde 	bl	8006cc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	461a      	mov	r2, r3
 8006120:	2308      	movs	r3, #8
 8006122:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fed8 	bl	8006edc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	461a      	mov	r2, r3
 8006144:	2310      	movs	r3, #16
 8006146:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	461a      	mov	r2, r3
 8006160:	2320      	movs	r3, #32
 8006162:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	461a      	mov	r2, r3
 800617c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006180:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	3301      	adds	r3, #1
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	2b00      	cmp	r3, #0
 8006192:	d199      	bne.n	80060c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f007 f8e3 	bl	800d364 <USB_ReadInterrupts>
 800619e:	4603      	mov	r3, r0
 80061a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061a8:	f040 80c0 	bne.w	800632c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f007 f904 	bl	800d3be <USB_ReadDevAllInEpInterrupt>
 80061b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80061bc:	e0b2      	b.n	8006324 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80a7 	beq.w	8006318 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f007 f92a 	bl	800d42e <USB_ReadDevInEPInterrupt>
 80061da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d057      	beq.n	8006296 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	2201      	movs	r2, #1
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	43db      	mvns	r3, r3
 8006200:	69f9      	ldr	r1, [r7, #28]
 8006202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006206:	4013      	ands	r3, r2
 8006208:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	461a      	mov	r2, r3
 8006218:	2301      	movs	r3, #1
 800621a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d132      	bne.n	800628a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3348      	adds	r3, #72	; 0x48
 8006234:	6819      	ldr	r1, [r3, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	4613      	mov	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4403      	add	r3, r0
 8006244:	3344      	adds	r3, #68	; 0x44
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4419      	add	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4403      	add	r3, r0
 8006258:	3348      	adds	r3, #72	; 0x48
 800625a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d113      	bne.n	800628a <HAL_PCD_IRQHandler+0x31c>
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006266:	4613      	mov	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	3350      	adds	r3, #80	; 0x50
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d108      	bne.n	800628a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006282:	461a      	mov	r2, r3
 8006284:	2101      	movs	r1, #1
 8006286:	f007 f933 	bl	800d4f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	b2db      	uxtb	r3, r3
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f010 fa8c 	bl	80167ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	461a      	mov	r2, r3
 80062ae:	2308      	movs	r3, #8
 80062b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	461a      	mov	r2, r3
 80062ca:	2310      	movs	r3, #16
 80062cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	461a      	mov	r2, r3
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	461a      	mov	r2, r3
 8006302:	2302      	movs	r3, #2
 8006304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc48 	bl	8006ba8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	3301      	adds	r3, #1
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	f47f af49 	bne.w	80061be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f007 f817 	bl	800d364 <USB_ReadInterrupts>
 8006336:	4603      	mov	r3, r0
 8006338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006340:	d122      	bne.n	8006388 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800635c:	2b01      	cmp	r3, #1
 800635e:	d108      	bne.n	8006372 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006368:	2100      	movs	r1, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f010 fc6e 	bl	8016c4c <HAL_PCDEx_LPM_Callback>
 8006370:	e002      	b.n	8006378 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f010 fa92 	bl	801689c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f006 ffe9 	bl	800d364 <USB_ReadInterrupts>
 8006392:	4603      	mov	r3, r0
 8006394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639c:	d112      	bne.n	80063c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d102      	bne.n	80063b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f010 fa4e 	bl	8016850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80063c2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f006 ffcb 	bl	800d364 <USB_ReadInterrupts>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063d8:	d121      	bne.n	800641e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80063e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d111      	bne.n	8006418 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	f003 020f 	and.w	r2, r3, #15
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800640e:	2101      	movs	r1, #1
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f010 fc1b 	bl	8016c4c <HAL_PCDEx_LPM_Callback>
 8006416:	e002      	b.n	800641e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f010 fa19 	bl	8016850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f006 ff9e 	bl	800d364 <USB_ReadInterrupts>
 8006428:	4603      	mov	r3, r0
 800642a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	f040 80c7 	bne.w	80065c4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2110      	movs	r1, #16
 8006450:	4618      	mov	r0, r3
 8006452:	f006 f871 	bl	800c538 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006456:	2300      	movs	r3, #0
 8006458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800645a:	e056      	b.n	800650a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	461a      	mov	r2, r3
 800646a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800646e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800648e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a0:	0151      	lsls	r1, r2, #5
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	440a      	add	r2, r1
 80064a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064bc:	461a      	mov	r2, r3
 80064be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006502:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	3301      	adds	r3, #1
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006510:	429a      	cmp	r2, r3
 8006512:	d3a3      	bcc.n	800645c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006522:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006526:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d016      	beq.n	800655e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006540:	f043 030b 	orr.w	r3, r3, #11
 8006544:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006556:	f043 030b 	orr.w	r3, r3, #11
 800655a:	6453      	str	r3, [r2, #68]	; 0x44
 800655c:	e015      	b.n	800658a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656c:	4619      	mov	r1, r3
 800656e:	f242 032b 	movw	r3, #8235	; 0x202b
 8006572:	4313      	orrs	r3, r2
 8006574:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006584:	f043 030b 	orr.w	r3, r3, #11
 8006588:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006598:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800659c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065ae:	461a      	mov	r2, r3
 80065b0:	f006 ff9e 	bl	800d4f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80065c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f006 fecb 	bl	800d364 <USB_ReadInterrupts>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d8:	d124      	bne.n	8006624 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f006 ff62 	bl	800d4a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f006 f806 	bl	800c5fa <USB_GetDevSpeed>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681c      	ldr	r4, [r3, #0]
 80065fa:	f001 f999 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 80065fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006604:	b2db      	uxtb	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	4620      	mov	r0, r4
 800660a:	f005 fd39 	bl	800c080 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f010 f8f5 	bl	80167fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695a      	ldr	r2, [r3, #20]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006622:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f006 fe9b 	bl	800d364 <USB_ReadInterrupts>
 800662e:	4603      	mov	r3, r0
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b08      	cmp	r3, #8
 8006636:	d10a      	bne.n	800664e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f010 f8d2 	bl	80167e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f002 0208 	and.w	r2, r2, #8
 800664c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f006 fe86 	bl	800d364 <USB_ReadInterrupts>
 8006658:	4603      	mov	r3, r0
 800665a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800665e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006662:	d10f      	bne.n	8006684 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	b2db      	uxtb	r3, r3
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f010 f934 	bl	80168dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f006 fe6b 	bl	800d364 <USB_ReadInterrupts>
 800668e:	4603      	mov	r3, r0
 8006690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006698:	d10f      	bne.n	80066ba <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f010 f907 	bl	80168b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80066b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f006 fe50 	bl	800d364 <USB_ReadInterrupts>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ce:	d10a      	bne.n	80066e6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f010 f915 	bl	8016900 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80066e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f006 fe3a 	bl	800d364 <USB_ReadInterrupts>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d115      	bne.n	8006726 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f010 f905 	bl	801691c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6859      	ldr	r1, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
 8006722:	e000      	b.n	8006726 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006724:	bf00      	nop
    }
  }
}
 8006726:	3734      	adds	r7, #52	; 0x34
 8006728:	46bd      	mov	sp, r7
 800672a:	bd90      	pop	{r4, r7, pc}

0800672c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_PCD_SetAddress+0x1a>
 8006742:	2302      	movs	r3, #2
 8006744:	e013      	b.n	800676e <HAL_PCD_SetAddress+0x42>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	4611      	mov	r1, r2
 800675e:	4618      	mov	r0, r3
 8006760:	f006 fdaa 	bl	800d2b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	4608      	mov	r0, r1
 8006780:	4611      	mov	r1, r2
 8006782:	461a      	mov	r2, r3
 8006784:	4603      	mov	r3, r0
 8006786:	70fb      	strb	r3, [r7, #3]
 8006788:	460b      	mov	r3, r1
 800678a:	803b      	strh	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006798:	2b00      	cmp	r3, #0
 800679a:	da0f      	bge.n	80067bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	f003 020f 	and.w	r2, r3, #15
 80067a2:	4613      	mov	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	3338      	adds	r3, #56	; 0x38
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	3304      	adds	r3, #4
 80067b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	705a      	strb	r2, [r3, #1]
 80067ba:	e00f      	b.n	80067dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	f003 020f 	and.w	r2, r3, #15
 80067c2:	4613      	mov	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	3304      	adds	r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80067e8:	883a      	ldrh	r2, [r7, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	78ba      	ldrb	r2, [r7, #2]
 80067f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006806:	78bb      	ldrb	r3, [r7, #2]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d102      	bne.n	8006812 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_PCD_EP_Open+0xaa>
 800681c:	2302      	movs	r3, #2
 800681e:	e00e      	b.n	800683e <HAL_PCD_EP_Open+0xc8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68f9      	ldr	r1, [r7, #12]
 800682e:	4618      	mov	r0, r3
 8006830:	f005 ff08 	bl	800c644 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800683c:	7afb      	ldrb	r3, [r7, #11]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006856:	2b00      	cmp	r3, #0
 8006858:	da0f      	bge.n	800687a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	f003 020f 	and.w	r2, r3, #15
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	3338      	adds	r3, #56	; 0x38
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	705a      	strb	r2, [r3, #1]
 8006878:	e00f      	b.n	800689a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	f003 020f 	and.w	r2, r3, #15
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_PCD_EP_Close+0x6e>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e00e      	b.n	80068d2 <HAL_PCD_EP_Close+0x8c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68f9      	ldr	r1, [r7, #12]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f005 ff46 	bl	800c754 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	460b      	mov	r3, r1
 80068e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	3304      	adds	r3, #4
 8006902:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	f003 030f 	and.w	r3, r3, #15
 8006922:	b2da      	uxtb	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d102      	bne.n	8006936 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	6979      	ldr	r1, [r7, #20]
 800694e:	f006 fa29 	bl	800cda4 <USB_EP0StartXfer>
 8006952:	e008      	b.n	8006966 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	6979      	ldr	r1, [r7, #20]
 8006962:	f005 ffd3 	bl	800c90c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	f003 020f 	and.w	r2, r3, #15
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	4613      	mov	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	1a9b      	subs	r3, r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006992:	681b      	ldr	r3, [r3, #0]
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	460b      	mov	r3, r1
 80069ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	f003 020f 	and.w	r2, r3, #15
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	3338      	adds	r3, #56	; 0x38
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	3304      	adds	r3, #4
 80069c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2200      	movs	r2, #0
 80069d8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2201      	movs	r2, #1
 80069de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d102      	bne.n	80069fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6979      	ldr	r1, [r7, #20]
 8006a12:	f006 f9c7 	bl	800cda4 <USB_EP0StartXfer>
 8006a16:	e008      	b.n	8006a2a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	6979      	ldr	r1, [r7, #20]
 8006a26:	f005 ff71 	bl	800c90c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	f003 020f 	and.w	r2, r3, #15
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d901      	bls.n	8006a52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e050      	b.n	8006af4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da0f      	bge.n	8006a7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 020f 	and.w	r2, r3, #15
 8006a60:	4613      	mov	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	3338      	adds	r3, #56	; 0x38
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3304      	adds	r3, #4
 8006a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	705a      	strb	r2, [r3, #1]
 8006a78:	e00d      	b.n	8006a96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_PCD_EP_SetStall+0x82>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e01e      	b.n	8006af4 <HAL_PCD_EP_SetStall+0xc0>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f006 fb23 	bl	800d110 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	b2d9      	uxtb	r1, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f006 fd03 	bl	800d4f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	f003 020f 	and.w	r2, r3, #15
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d901      	bls.n	8006b1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e042      	b.n	8006ba0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da0f      	bge.n	8006b42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	4613      	mov	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	3338      	adds	r3, #56	; 0x38
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	3304      	adds	r3, #4
 8006b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	705a      	strb	r2, [r3, #1]
 8006b40:	e00f      	b.n	8006b62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	f003 020f 	and.w	r2, r3, #15
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	4413      	add	r3, r2
 8006b58:	3304      	adds	r3, #4
 8006b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_PCD_EP_ClrStall+0x86>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e00e      	b.n	8006ba0 <HAL_PCD_EP_ClrStall+0xa4>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f006 fb2b 	bl	800d1ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	3338      	adds	r3, #56	; 0x38
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	3304      	adds	r3, #4
 8006bce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d901      	bls.n	8006be0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e06c      	b.n	8006cba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d902      	bls.n	8006bfc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3303      	adds	r3, #3
 8006c00:	089b      	lsrs	r3, r3, #2
 8006c02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c04:	e02b      	b.n	8006c5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d902      	bls.n	8006c22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3303      	adds	r3, #3
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68d9      	ldr	r1, [r3, #12]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4603      	mov	r3, r0
 8006c40:	6978      	ldr	r0, [r7, #20]
 8006c42:	f006 fa07 	bl	800d054 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	441a      	add	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	441a      	add	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d809      	bhi.n	8006c88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d203      	bcs.n	8006c88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1be      	bne.n	8006c06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	695a      	ldr	r2, [r3, #20]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d811      	bhi.n	8006cb8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	43db      	mvns	r3, r3
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	333c      	adds	r3, #60	; 0x3c
 8006cdc:	3304      	adds	r3, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	f040 80a0 	bne.w	8006e3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d015      	beq.n	8006d32 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a72      	ldr	r2, [pc, #456]	; (8006ed4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	f240 80dd 	bls.w	8006eca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80d7 	beq.w	8006eca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	6093      	str	r3, [r2, #8]
 8006d30:	e0cb      	b.n	8006eca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	6093      	str	r3, [r2, #8]
 8006d4e:	e0bc      	b.n	8006eca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f040 80b7 	bne.w	8006eca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a5d      	ldr	r2, [pc, #372]	; (8006ed4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d90f      	bls.n	8006d84 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d80:	6093      	str	r3, [r2, #8]
 8006d82:	e0a2      	b.n	8006eca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d96:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	0159      	lsls	r1, r3, #5
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	440b      	add	r3, r1
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006daa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4403      	add	r3, r0
 8006dba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006dbe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4403      	add	r3, r0
 8006de2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4419      	add	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4403      	add	r3, r0
 8006df8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006dfc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d114      	bne.n	8006e2e <PCD_EP_OutXfrComplete_int+0x16a>
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d108      	bne.n	8006e2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e26:	461a      	mov	r2, r3
 8006e28:	2101      	movs	r1, #1
 8006e2a:	f006 fb61 	bl	800d4f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f00f fc9f 	bl	8016778 <HAL_PCD_DataOutStageCallback>
 8006e3a:	e046      	b.n	8006eca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d124      	bne.n	8006e8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e60:	6093      	str	r3, [r2, #8]
 8006e62:	e032      	b.n	8006eca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f00f fc76 	bl	8016778 <HAL_PCD_DataOutStageCallback>
 8006e8c:	e01d      	b.n	8006eca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d114      	bne.n	8006ebe <PCD_EP_OutXfrComplete_int+0x1fa>
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d108      	bne.n	8006ebe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2100      	movs	r1, #0
 8006eba:	f006 fb19 	bl	800d4f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f00f fc57 	bl	8016778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	4f54300a 	.word	0x4f54300a
 8006ed8:	4f54310a 	.word	0x4f54310a

08006edc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	333c      	adds	r3, #60	; 0x3c
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d90e      	bls.n	8006f30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d009      	beq.n	8006f30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f00f fc0f 	bl	8016754 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a0a      	ldr	r2, [pc, #40]	; (8006f64 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d90c      	bls.n	8006f58 <PCD_EP_OutSetupPacket_int+0x7c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d108      	bne.n	8006f58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f50:	461a      	mov	r2, r3
 8006f52:	2101      	movs	r1, #1
 8006f54:	f006 facc 	bl	800d4f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	4f54300a 	.word	0x4f54300a

08006f68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
 8006f74:	4613      	mov	r3, r2
 8006f76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d107      	bne.n	8006f96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f86:	883b      	ldrh	r3, [r7, #0]
 8006f88:	0419      	lsls	r1, r3, #16
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	629a      	str	r2, [r3, #40]	; 0x28
 8006f94:	e028      	b.n	8006fe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]
 8006fa8:	e00d      	b.n	8006fc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	3340      	adds	r3, #64	; 0x40
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]
 8006fc6:	7bfa      	ldrb	r2, [r7, #15]
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d3ec      	bcc.n	8006faa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006fd0:	883b      	ldrh	r3, [r7, #0]
 8006fd2:	0418      	lsls	r0, r3, #16
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6819      	ldr	r1, [r3, #0]
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	4302      	orrs	r2, r0
 8006fe0:	3340      	adds	r3, #64	; 0x40
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	887a      	ldrh	r2, [r7, #2]
 8007008:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007046:	4b05      	ldr	r3, [pc, #20]	; (800705c <HAL_PCDEx_ActivateLPM+0x44>)
 8007048:	4313      	orrs	r3, r2
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	10000003 	.word	0x10000003

08007060 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007068:	2300      	movs	r3, #0
 800706a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e291      	b.n	800759a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 8087 	beq.w	8007192 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007084:	4b96      	ldr	r3, [pc, #600]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	2b04      	cmp	r3, #4
 800708e:	d00c      	beq.n	80070aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007090:	4b93      	ldr	r3, [pc, #588]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	2b08      	cmp	r3, #8
 800709a:	d112      	bne.n	80070c2 <HAL_RCC_OscConfig+0x62>
 800709c:	4b90      	ldr	r3, [pc, #576]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a8:	d10b      	bne.n	80070c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070aa:	4b8d      	ldr	r3, [pc, #564]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d06c      	beq.n	8007190 <HAL_RCC_OscConfig+0x130>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d168      	bne.n	8007190 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e26b      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ca:	d106      	bne.n	80070da <HAL_RCC_OscConfig+0x7a>
 80070cc:	4b84      	ldr	r3, [pc, #528]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a83      	ldr	r2, [pc, #524]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80070d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e02e      	b.n	8007138 <HAL_RCC_OscConfig+0xd8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10c      	bne.n	80070fc <HAL_RCC_OscConfig+0x9c>
 80070e2:	4b7f      	ldr	r3, [pc, #508]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a7e      	ldr	r2, [pc, #504]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80070e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	4b7c      	ldr	r3, [pc, #496]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a7b      	ldr	r2, [pc, #492]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80070f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e01d      	b.n	8007138 <HAL_RCC_OscConfig+0xd8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007104:	d10c      	bne.n	8007120 <HAL_RCC_OscConfig+0xc0>
 8007106:	4b76      	ldr	r3, [pc, #472]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a75      	ldr	r2, [pc, #468]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 800710c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	4b73      	ldr	r3, [pc, #460]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a72      	ldr	r2, [pc, #456]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e00b      	b.n	8007138 <HAL_RCC_OscConfig+0xd8>
 8007120:	4b6f      	ldr	r3, [pc, #444]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a6e      	ldr	r2, [pc, #440]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	4b6c      	ldr	r3, [pc, #432]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a6b      	ldr	r2, [pc, #428]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d013      	beq.n	8007168 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fd ff58 	bl	8004ff4 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007148:	f7fd ff54 	bl	8004ff4 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b64      	cmp	r3, #100	; 0x64
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e21f      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	4b61      	ldr	r3, [pc, #388]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f0      	beq.n	8007148 <HAL_RCC_OscConfig+0xe8>
 8007166:	e014      	b.n	8007192 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fd ff44 	bl	8004ff4 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007170:	f7fd ff40 	bl	8004ff4 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	; 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e20b      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007182:	4b57      	ldr	r3, [pc, #348]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0x110>
 800718e:	e000      	b.n	8007192 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d069      	beq.n	8007272 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800719e:	4b50      	ldr	r3, [pc, #320]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071aa:	4b4d      	ldr	r3, [pc, #308]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d11c      	bne.n	80071f0 <HAL_RCC_OscConfig+0x190>
 80071b6:	4b4a      	ldr	r3, [pc, #296]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d116      	bne.n	80071f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c2:	4b47      	ldr	r3, [pc, #284]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_RCC_OscConfig+0x17a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d001      	beq.n	80071da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e1df      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071da:	4b41      	ldr	r3, [pc, #260]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	493d      	ldr	r1, [pc, #244]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ee:	e040      	b.n	8007272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d023      	beq.n	8007240 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071f8:	4b39      	ldr	r3, [pc, #228]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a38      	ldr	r2, [pc, #224]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fd fef6 	bl	8004ff4 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800720c:	f7fd fef2 	bl	8004ff4 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e1bd      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721e:	4b30      	ldr	r3, [pc, #192]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722a:	4b2d      	ldr	r3, [pc, #180]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4929      	ldr	r1, [pc, #164]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 800723a:	4313      	orrs	r3, r2
 800723c:	600b      	str	r3, [r1, #0]
 800723e:	e018      	b.n	8007272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a26      	ldr	r2, [pc, #152]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fd fed2 	bl	8004ff4 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007254:	f7fd fece 	bl	8004ff4 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e199      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007266:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f0      	bne.n	8007254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d038      	beq.n	80072f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d019      	beq.n	80072ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007286:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 8007288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800728a:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 800728c:	f043 0301 	orr.w	r3, r3, #1
 8007290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007292:	f7fd feaf 	bl	8004ff4 <HAL_GetTick>
 8007296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007298:	e008      	b.n	80072ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800729a:	f7fd feab 	bl	8004ff4 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e176      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80072ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0f0      	beq.n	800729a <HAL_RCC_OscConfig+0x23a>
 80072b8:	e01a      	b.n	80072f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80072bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072be:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <HAL_RCC_OscConfig+0x280>)
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c6:	f7fd fe95 	bl	8004ff4 <HAL_GetTick>
 80072ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072cc:	e00a      	b.n	80072e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ce:	f7fd fe91 	bl	8004ff4 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d903      	bls.n	80072e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e15c      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
 80072e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e4:	4b91      	ldr	r3, [pc, #580]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80072e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1ee      	bne.n	80072ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80a4 	beq.w	8007446 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072fe:	4b8b      	ldr	r3, [pc, #556]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10d      	bne.n	8007326 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800730a:	4b88      	ldr	r3, [pc, #544]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	4a87      	ldr	r2, [pc, #540]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007314:	6413      	str	r3, [r2, #64]	; 0x40
 8007316:	4b85      	ldr	r3, [pc, #532]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007322:	2301      	movs	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007326:	4b82      	ldr	r3, [pc, #520]	; (8007530 <HAL_RCC_OscConfig+0x4d0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732e:	2b00      	cmp	r3, #0
 8007330:	d118      	bne.n	8007364 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007332:	4b7f      	ldr	r3, [pc, #508]	; (8007530 <HAL_RCC_OscConfig+0x4d0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a7e      	ldr	r2, [pc, #504]	; (8007530 <HAL_RCC_OscConfig+0x4d0>)
 8007338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800733c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800733e:	f7fd fe59 	bl	8004ff4 <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007346:	f7fd fe55 	bl	8004ff4 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b64      	cmp	r3, #100	; 0x64
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e120      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007358:	4b75      	ldr	r3, [pc, #468]	; (8007530 <HAL_RCC_OscConfig+0x4d0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f0      	beq.n	8007346 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d106      	bne.n	800737a <HAL_RCC_OscConfig+0x31a>
 800736c:	4b6f      	ldr	r3, [pc, #444]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 800736e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007370:	4a6e      	ldr	r2, [pc, #440]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	6713      	str	r3, [r2, #112]	; 0x70
 8007378:	e02d      	b.n	80073d6 <HAL_RCC_OscConfig+0x376>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10c      	bne.n	800739c <HAL_RCC_OscConfig+0x33c>
 8007382:	4b6a      	ldr	r3, [pc, #424]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	4a69      	ldr	r2, [pc, #420]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007388:	f023 0301 	bic.w	r3, r3, #1
 800738c:	6713      	str	r3, [r2, #112]	; 0x70
 800738e:	4b67      	ldr	r3, [pc, #412]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	4a66      	ldr	r2, [pc, #408]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007394:	f023 0304 	bic.w	r3, r3, #4
 8007398:	6713      	str	r3, [r2, #112]	; 0x70
 800739a:	e01c      	b.n	80073d6 <HAL_RCC_OscConfig+0x376>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d10c      	bne.n	80073be <HAL_RCC_OscConfig+0x35e>
 80073a4:	4b61      	ldr	r3, [pc, #388]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a8:	4a60      	ldr	r2, [pc, #384]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073aa:	f043 0304 	orr.w	r3, r3, #4
 80073ae:	6713      	str	r3, [r2, #112]	; 0x70
 80073b0:	4b5e      	ldr	r3, [pc, #376]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b4:	4a5d      	ldr	r2, [pc, #372]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	6713      	str	r3, [r2, #112]	; 0x70
 80073bc:	e00b      	b.n	80073d6 <HAL_RCC_OscConfig+0x376>
 80073be:	4b5b      	ldr	r3, [pc, #364]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	4a5a      	ldr	r2, [pc, #360]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	6713      	str	r3, [r2, #112]	; 0x70
 80073ca:	4b58      	ldr	r3, [pc, #352]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	4a57      	ldr	r2, [pc, #348]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073d0:	f023 0304 	bic.w	r3, r3, #4
 80073d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d015      	beq.n	800740a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073de:	f7fd fe09 	bl	8004ff4 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e4:	e00a      	b.n	80073fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073e6:	f7fd fe05 	bl	8004ff4 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e0ce      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073fc:	4b4b      	ldr	r3, [pc, #300]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80073fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0ee      	beq.n	80073e6 <HAL_RCC_OscConfig+0x386>
 8007408:	e014      	b.n	8007434 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800740a:	f7fd fdf3 	bl	8004ff4 <HAL_GetTick>
 800740e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007410:	e00a      	b.n	8007428 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007412:	f7fd fdef 	bl	8004ff4 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007420:	4293      	cmp	r3, r2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0b8      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007428:	4b40      	ldr	r3, [pc, #256]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1ee      	bne.n	8007412 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d105      	bne.n	8007446 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800743a:	4b3c      	ldr	r3, [pc, #240]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	4a3b      	ldr	r2, [pc, #236]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80a4 	beq.w	8007598 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007450:	4b36      	ldr	r3, [pc, #216]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 030c 	and.w	r3, r3, #12
 8007458:	2b08      	cmp	r3, #8
 800745a:	d06b      	beq.n	8007534 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d149      	bne.n	80074f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007464:	4b31      	ldr	r3, [pc, #196]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a30      	ldr	r2, [pc, #192]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 800746a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800746e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007470:	f7fd fdc0 	bl	8004ff4 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007478:	f7fd fdbc 	bl	8004ff4 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e087      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800748a:	4b28      	ldr	r3, [pc, #160]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1f0      	bne.n	8007478 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69da      	ldr	r2, [r3, #28]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	019b      	lsls	r3, r3, #6
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	3b01      	subs	r3, #1
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	061b      	lsls	r3, r3, #24
 80074ba:	4313      	orrs	r3, r2
 80074bc:	4a1b      	ldr	r2, [pc, #108]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80074be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074c4:	4b19      	ldr	r3, [pc, #100]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a18      	ldr	r2, [pc, #96]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80074ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d0:	f7fd fd90 	bl	8004ff4 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d8:	f7fd fd8c 	bl	8004ff4 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e057      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ea:	4b10      	ldr	r3, [pc, #64]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f0      	beq.n	80074d8 <HAL_RCC_OscConfig+0x478>
 80074f6:	e04f      	b.n	8007598 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a0b      	ldr	r2, [pc, #44]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 80074fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fd fd76 	bl	8004ff4 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750c:	f7fd fd72 	bl	8004ff4 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e03d      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751e:	4b03      	ldr	r3, [pc, #12]	; (800752c <HAL_RCC_OscConfig+0x4cc>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x4ac>
 800752a:	e035      	b.n	8007598 <HAL_RCC_OscConfig+0x538>
 800752c:	40023800 	.word	0x40023800
 8007530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007534:	4b1b      	ldr	r3, [pc, #108]	; (80075a4 <HAL_RCC_OscConfig+0x544>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d028      	beq.n	8007594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800754c:	429a      	cmp	r2, r3
 800754e:	d121      	bne.n	8007594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800755a:	429a      	cmp	r2, r3
 800755c:	d11a      	bne.n	8007594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007564:	4013      	ands	r3, r2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800756a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800756c:	4293      	cmp	r3, r2
 800756e:	d111      	bne.n	8007594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	3b01      	subs	r3, #1
 800757e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007580:	429a      	cmp	r2, r3
 8007582:	d107      	bne.n	8007594 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007590:	429a      	cmp	r2, r3
 8007592:	d001      	beq.n	8007598 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40023800 	.word	0x40023800

080075a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0d0      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075c0:	4b6a      	ldr	r3, [pc, #424]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d910      	bls.n	80075f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ce:	4b67      	ldr	r3, [pc, #412]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f023 020f 	bic.w	r2, r3, #15
 80075d6:	4965      	ldr	r1, [pc, #404]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	4313      	orrs	r3, r2
 80075dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075de:	4b63      	ldr	r3, [pc, #396]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d001      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0b8      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d020      	beq.n	800763e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007608:	4b59      	ldr	r3, [pc, #356]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4a58      	ldr	r2, [pc, #352]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800760e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007620:	4b53      	ldr	r3, [pc, #332]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	4a52      	ldr	r2, [pc, #328]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800762a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800762c:	4b50      	ldr	r3, [pc, #320]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	494d      	ldr	r1, [pc, #308]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800763a:	4313      	orrs	r3, r2
 800763c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d040      	beq.n	80076cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d107      	bne.n	8007662 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007652:	4b47      	ldr	r3, [pc, #284]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d115      	bne.n	800768a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e07f      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d107      	bne.n	800767a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766a:	4b41      	ldr	r3, [pc, #260]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e073      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800767a:	4b3d      	ldr	r3, [pc, #244]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e06b      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800768a:	4b39      	ldr	r3, [pc, #228]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f023 0203 	bic.w	r2, r3, #3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4936      	ldr	r1, [pc, #216]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007698:	4313      	orrs	r3, r2
 800769a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800769c:	f7fd fcaa 	bl	8004ff4 <HAL_GetTick>
 80076a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a2:	e00a      	b.n	80076ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a4:	f7fd fca6 	bl	8004ff4 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e053      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ba:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 020c 	and.w	r2, r3, #12
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d1eb      	bne.n	80076a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076cc:	4b27      	ldr	r3, [pc, #156]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d210      	bcs.n	80076fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f023 020f 	bic.w	r2, r3, #15
 80076e2:	4922      	ldr	r1, [pc, #136]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ea:	4b20      	ldr	r3, [pc, #128]	; (800776c <HAL_RCC_ClockConfig+0x1c4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d001      	beq.n	80076fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e032      	b.n	8007762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007708:	4b19      	ldr	r3, [pc, #100]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4916      	ldr	r1, [pc, #88]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	490e      	ldr	r1, [pc, #56]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007736:	4313      	orrs	r3, r2
 8007738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800773a:	f000 f821 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 800773e:	4601      	mov	r1, r0
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <HAL_RCC_ClockConfig+0x1c8>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	091b      	lsrs	r3, r3, #4
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	4a0a      	ldr	r2, [pc, #40]	; (8007774 <HAL_RCC_ClockConfig+0x1cc>)
 800774c:	5cd3      	ldrb	r3, [r2, r3]
 800774e:	fa21 f303 	lsr.w	r3, r1, r3
 8007752:	4a09      	ldr	r2, [pc, #36]	; (8007778 <HAL_RCC_ClockConfig+0x1d0>)
 8007754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <HAL_RCC_ClockConfig+0x1d4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f7fb f9dc 	bl	8002b18 <HAL_InitTick>

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40023c00 	.word	0x40023c00
 8007770:	40023800 	.word	0x40023800
 8007774:	0801a11c 	.word	0x0801a11c
 8007778:	20000000 	.word	0x20000000
 800777c:	20000004 	.word	0x20000004

08007780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	607b      	str	r3, [r7, #4]
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	2300      	movs	r3, #0
 8007790:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007796:	4b63      	ldr	r3, [pc, #396]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 030c 	and.w	r3, r3, #12
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d007      	beq.n	80077b2 <HAL_RCC_GetSysClockFreq+0x32>
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d008      	beq.n	80077b8 <HAL_RCC_GetSysClockFreq+0x38>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f040 80b4 	bne.w	8007914 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077ac:	4b5e      	ldr	r3, [pc, #376]	; (8007928 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80077ae:	60bb      	str	r3, [r7, #8]
      break;
 80077b0:	e0b3      	b.n	800791a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077b2:	4b5e      	ldr	r3, [pc, #376]	; (800792c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80077b4:	60bb      	str	r3, [r7, #8]
      break;
 80077b6:	e0b0      	b.n	800791a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077b8:	4b5a      	ldr	r3, [pc, #360]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80077c2:	4b58      	ldr	r3, [pc, #352]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d04a      	beq.n	8007864 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ce:	4b55      	ldr	r3, [pc, #340]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	099b      	lsrs	r3, r3, #6
 80077d4:	f04f 0400 	mov.w	r4, #0
 80077d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	ea03 0501 	and.w	r5, r3, r1
 80077e4:	ea04 0602 	and.w	r6, r4, r2
 80077e8:	4629      	mov	r1, r5
 80077ea:	4632      	mov	r2, r6
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	f04f 0400 	mov.w	r4, #0
 80077f4:	0154      	lsls	r4, r2, #5
 80077f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80077fa:	014b      	lsls	r3, r1, #5
 80077fc:	4619      	mov	r1, r3
 80077fe:	4622      	mov	r2, r4
 8007800:	1b49      	subs	r1, r1, r5
 8007802:	eb62 0206 	sbc.w	r2, r2, r6
 8007806:	f04f 0300 	mov.w	r3, #0
 800780a:	f04f 0400 	mov.w	r4, #0
 800780e:	0194      	lsls	r4, r2, #6
 8007810:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007814:	018b      	lsls	r3, r1, #6
 8007816:	1a5b      	subs	r3, r3, r1
 8007818:	eb64 0402 	sbc.w	r4, r4, r2
 800781c:	f04f 0100 	mov.w	r1, #0
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	00e2      	lsls	r2, r4, #3
 8007826:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800782a:	00d9      	lsls	r1, r3, #3
 800782c:	460b      	mov	r3, r1
 800782e:	4614      	mov	r4, r2
 8007830:	195b      	adds	r3, r3, r5
 8007832:	eb44 0406 	adc.w	r4, r4, r6
 8007836:	f04f 0100 	mov.w	r1, #0
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	0262      	lsls	r2, r4, #9
 8007840:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007844:	0259      	lsls	r1, r3, #9
 8007846:	460b      	mov	r3, r1
 8007848:	4614      	mov	r4, r2
 800784a:	4618      	mov	r0, r3
 800784c:	4621      	mov	r1, r4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f04f 0400 	mov.w	r4, #0
 8007854:	461a      	mov	r2, r3
 8007856:	4623      	mov	r3, r4
 8007858:	f7f9 f9ee 	bl	8000c38 <__aeabi_uldivmod>
 800785c:	4603      	mov	r3, r0
 800785e:	460c      	mov	r4, r1
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	e049      	b.n	80078f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007864:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	099b      	lsrs	r3, r3, #6
 800786a:	f04f 0400 	mov.w	r4, #0
 800786e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	ea03 0501 	and.w	r5, r3, r1
 800787a:	ea04 0602 	and.w	r6, r4, r2
 800787e:	4629      	mov	r1, r5
 8007880:	4632      	mov	r2, r6
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	f04f 0400 	mov.w	r4, #0
 800788a:	0154      	lsls	r4, r2, #5
 800788c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007890:	014b      	lsls	r3, r1, #5
 8007892:	4619      	mov	r1, r3
 8007894:	4622      	mov	r2, r4
 8007896:	1b49      	subs	r1, r1, r5
 8007898:	eb62 0206 	sbc.w	r2, r2, r6
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	f04f 0400 	mov.w	r4, #0
 80078a4:	0194      	lsls	r4, r2, #6
 80078a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80078aa:	018b      	lsls	r3, r1, #6
 80078ac:	1a5b      	subs	r3, r3, r1
 80078ae:	eb64 0402 	sbc.w	r4, r4, r2
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	00e2      	lsls	r2, r4, #3
 80078bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078c0:	00d9      	lsls	r1, r3, #3
 80078c2:	460b      	mov	r3, r1
 80078c4:	4614      	mov	r4, r2
 80078c6:	195b      	adds	r3, r3, r5
 80078c8:	eb44 0406 	adc.w	r4, r4, r6
 80078cc:	f04f 0100 	mov.w	r1, #0
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	02a2      	lsls	r2, r4, #10
 80078d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80078da:	0299      	lsls	r1, r3, #10
 80078dc:	460b      	mov	r3, r1
 80078de:	4614      	mov	r4, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	4621      	mov	r1, r4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f04f 0400 	mov.w	r4, #0
 80078ea:	461a      	mov	r2, r3
 80078ec:	4623      	mov	r3, r4
 80078ee:	f7f9 f9a3 	bl	8000c38 <__aeabi_uldivmod>
 80078f2:	4603      	mov	r3, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	0c1b      	lsrs	r3, r3, #16
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	3301      	adds	r3, #1
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	60bb      	str	r3, [r7, #8]
      break;
 8007912:	e002      	b.n	800791a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007916:	60bb      	str	r3, [r7, #8]
      break;
 8007918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800791a:	68bb      	ldr	r3, [r7, #8]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007924:	40023800 	.word	0x40023800
 8007928:	00f42400 	.word	0x00f42400
 800792c:	007a1200 	.word	0x007a1200

08007930 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007934:	4b03      	ldr	r3, [pc, #12]	; (8007944 <HAL_RCC_GetHCLKFreq+0x14>)
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000000 	.word	0x20000000

08007948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800794c:	f7ff fff0 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 8007950:	4601      	mov	r1, r0
 8007952:	4b05      	ldr	r3, [pc, #20]	; (8007968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	0a9b      	lsrs	r3, r3, #10
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	4a03      	ldr	r2, [pc, #12]	; (800796c <HAL_RCC_GetPCLK1Freq+0x24>)
 800795e:	5cd3      	ldrb	r3, [r2, r3]
 8007960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40023800 	.word	0x40023800
 800796c:	0801a12c 	.word	0x0801a12c

08007970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007974:	f7ff ffdc 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 8007978:	4601      	mov	r1, r0
 800797a:	4b05      	ldr	r3, [pc, #20]	; (8007990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	0b5b      	lsrs	r3, r3, #13
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	4a03      	ldr	r2, [pc, #12]	; (8007994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007986:	5cd3      	ldrb	r3, [r2, r3]
 8007988:	fa21 f303 	lsr.w	r3, r1, r3
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40023800 	.word	0x40023800
 8007994:	0801a12c 	.word	0x0801a12c

08007998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	220f      	movs	r2, #15
 80079a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079a8:	4b12      	ldr	r3, [pc, #72]	; (80079f4 <HAL_RCC_GetClockConfig+0x5c>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f003 0203 	and.w	r2, r3, #3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <HAL_RCC_GetClockConfig+0x5c>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079c0:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <HAL_RCC_GetClockConfig+0x5c>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80079cc:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <HAL_RCC_GetClockConfig+0x5c>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	08db      	lsrs	r3, r3, #3
 80079d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079da:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <HAL_RCC_GetClockConfig+0x60>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 020f 	and.w	r2, r3, #15
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	601a      	str	r2, [r3, #0]
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40023800 	.word	0x40023800
 80079f8:	40023c00 	.word	0x40023c00

080079fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d012      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a24:	4b69      	ldr	r3, [pc, #420]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	4a68      	ldr	r2, [pc, #416]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a2e:	6093      	str	r3, [r2, #8]
 8007a30:	4b66      	ldr	r3, [pc, #408]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	4964      	ldr	r1, [pc, #400]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d017      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a56:	4b5d      	ldr	r3, [pc, #372]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	4959      	ldr	r1, [pc, #356]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a74:	d101      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a76:	2301      	movs	r3, #1
 8007a78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a82:	2301      	movs	r3, #1
 8007a84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d017      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a92:	4b4e      	ldr	r3, [pc, #312]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa0:	494a      	ldr	r1, [pc, #296]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 808b 	beq.w	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ae0:	4b3a      	ldr	r3, [pc, #232]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	4a39      	ldr	r2, [pc, #228]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aea:	6413      	str	r3, [r2, #64]	; 0x40
 8007aec:	4b37      	ldr	r3, [pc, #220]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007af8:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a34      	ldr	r2, [pc, #208]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b04:	f7fd fa76 	bl	8004ff4 <HAL_GetTick>
 8007b08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b0c:	f7fd fa72 	bl	8004ff4 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b64      	cmp	r3, #100	; 0x64
 8007b18:	d901      	bls.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e31e      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b1e:	4b2c      	ldr	r3, [pc, #176]	; (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0f0      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b2a:	4b28      	ldr	r3, [pc, #160]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d035      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d02e      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b48:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b52:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b6a:	4a18      	ldr	r2, [pc, #96]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b70:	4b16      	ldr	r3, [pc, #88]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d114      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7c:	f7fd fa3a 	bl	8004ff4 <HAL_GetTick>
 8007b80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b82:	e00a      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b84:	f7fd fa36 	bl	8004ff4 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e2e0      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0ee      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb2:	d111      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bc0:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bc2:	400b      	ands	r3, r1
 8007bc4:	4901      	ldr	r1, [pc, #4]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	608b      	str	r3, [r1, #8]
 8007bca:	e00b      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007bcc:	40023800 	.word	0x40023800
 8007bd0:	40007000 	.word	0x40007000
 8007bd4:	0ffffcff 	.word	0x0ffffcff
 8007bd8:	4bac      	ldr	r3, [pc, #688]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	4aab      	ldr	r2, [pc, #684]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007be2:	6093      	str	r3, [r2, #8]
 8007be4:	4ba9      	ldr	r3, [pc, #676]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf0:	49a6      	ldr	r1, [pc, #664]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d010      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c02:	4ba2      	ldr	r3, [pc, #648]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c08:	4aa0      	ldr	r2, [pc, #640]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007c12:	4b9e      	ldr	r3, [pc, #632]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	499b      	ldr	r1, [pc, #620]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c30:	4b96      	ldr	r3, [pc, #600]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c3e:	4993      	ldr	r1, [pc, #588]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c52:	4b8e      	ldr	r3, [pc, #568]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c60:	498a      	ldr	r1, [pc, #552]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c74:	4b85      	ldr	r3, [pc, #532]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c82:	4982      	ldr	r1, [pc, #520]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c96:	4b7d      	ldr	r3, [pc, #500]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca4:	4979      	ldr	r1, [pc, #484]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cb8:	4b74      	ldr	r3, [pc, #464]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f023 0203 	bic.w	r2, r3, #3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc6:	4971      	ldr	r1, [pc, #452]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cda:	4b6c      	ldr	r3, [pc, #432]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce0:	f023 020c 	bic.w	r2, r3, #12
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ce8:	4968      	ldr	r1, [pc, #416]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cfc:	4b63      	ldr	r3, [pc, #396]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0a:	4960      	ldr	r1, [pc, #384]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d1e:	4b5b      	ldr	r3, [pc, #364]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2c:	4957      	ldr	r1, [pc, #348]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d40:	4b52      	ldr	r3, [pc, #328]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	494f      	ldr	r1, [pc, #316]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d62:	4b4a      	ldr	r3, [pc, #296]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d70:	4946      	ldr	r1, [pc, #280]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d84:	4b41      	ldr	r3, [pc, #260]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d92:	493e      	ldr	r1, [pc, #248]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007da6:	4b39      	ldr	r3, [pc, #228]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db4:	4935      	ldr	r1, [pc, #212]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dc8:	4b30      	ldr	r3, [pc, #192]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dd6:	492d      	ldr	r1, [pc, #180]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d011      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007dea:	4b28      	ldr	r3, [pc, #160]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df8:	4924      	ldr	r1, [pc, #144]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e08:	d101      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e1a:	4b1c      	ldr	r3, [pc, #112]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e28:	4918      	ldr	r1, [pc, #96]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e3c:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e4c:	490f      	ldr	r1, [pc, #60]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d005      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e62:	f040 80d8 	bne.w	8008016 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e72:	f7fd f8bf 	bl	8004ff4 <HAL_GetTick>
 8007e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e78:	e00a      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e7a:	f7fd f8bb 	bl	8004ff4 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b64      	cmp	r3, #100	; 0x64
 8007e86:	d903      	bls.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e167      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8007e8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e90:	4bad      	ldr	r3, [pc, #692]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ee      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d021      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d11d      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007eb0:	4ba5      	ldr	r3, [pc, #660]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb6:	0c1b      	lsrs	r3, r3, #16
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ebe:	4ba2      	ldr	r3, [pc, #648]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec4:	0e1b      	lsrs	r3, r3, #24
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	019a      	lsls	r2, r3, #6
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	061b      	lsls	r3, r3, #24
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	071b      	lsls	r3, r3, #28
 8007ee4:	4998      	ldr	r1, [pc, #608]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f00:	d00a      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d02e      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f16:	d129      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f18:	4b8b      	ldr	r3, [pc, #556]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f26:	4b88      	ldr	r3, [pc, #544]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2c:	0f1b      	lsrs	r3, r3, #28
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	019a      	lsls	r2, r3, #6
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	061b      	lsls	r3, r3, #24
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	071b      	lsls	r3, r3, #28
 8007f4c:	497e      	ldr	r1, [pc, #504]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f54:	4b7c      	ldr	r3, [pc, #496]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5a:	f023 021f 	bic.w	r2, r3, #31
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	3b01      	subs	r3, #1
 8007f64:	4978      	ldr	r1, [pc, #480]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01d      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f78:	4b73      	ldr	r3, [pc, #460]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7e:	0e1b      	lsrs	r3, r3, #24
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f86:	4b70      	ldr	r3, [pc, #448]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8c:	0f1b      	lsrs	r3, r3, #28
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	019a      	lsls	r2, r3, #6
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	071b      	lsls	r3, r3, #28
 8007fac:	4966      	ldr	r1, [pc, #408]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d011      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	019a      	lsls	r2, r3, #6
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	061b      	lsls	r3, r3, #24
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	071b      	lsls	r3, r3, #28
 8007fdc:	495a      	ldr	r1, [pc, #360]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fe4:	4b58      	ldr	r3, [pc, #352]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a57      	ldr	r2, [pc, #348]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff0:	f7fd f800 	bl	8004ff4 <HAL_GetTick>
 8007ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ff8:	f7fc fffc 	bl	8004ff4 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	; 0x64
 8008004:	d901      	bls.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e0a8      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800800a:	4b4f      	ldr	r3, [pc, #316]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0f0      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b01      	cmp	r3, #1
 800801a:	f040 809e 	bne.w	800815a <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800801e:	4b4a      	ldr	r3, [pc, #296]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a49      	ldr	r2, [pc, #292]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800802a:	f7fc ffe3 	bl	8004ff4 <HAL_GetTick>
 800802e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008030:	e008      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008032:	f7fc ffdf 	bl	8004ff4 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b64      	cmp	r3, #100	; 0x64
 800803e:	d901      	bls.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e08b      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008044:	4b40      	ldr	r3, [pc, #256]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800804c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008050:	d0ef      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02e      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d12a      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800807a:	4b33      	ldr	r3, [pc, #204]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800807c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008080:	0c1b      	lsrs	r3, r3, #16
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008088:	4b2f      	ldr	r3, [pc, #188]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808e:	0f1b      	lsrs	r3, r3, #28
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	019a      	lsls	r2, r3, #6
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	041b      	lsls	r3, r3, #16
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	061b      	lsls	r3, r3, #24
 80080a8:	431a      	orrs	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	071b      	lsls	r3, r3, #28
 80080ae:	4926      	ldr	r1, [pc, #152]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080b6:	4b24      	ldr	r3, [pc, #144]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	3b01      	subs	r3, #1
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	491f      	ldr	r1, [pc, #124]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d022      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080e4:	d11d      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080e6:	4b18      	ldr	r3, [pc, #96]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ec:	0e1b      	lsrs	r3, r3, #24
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080f4:	4b14      	ldr	r3, [pc, #80]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fa:	0f1b      	lsrs	r3, r3, #28
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	019a      	lsls	r2, r3, #6
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	041b      	lsls	r3, r3, #16
 800810e:	431a      	orrs	r2, r3
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	061b      	lsls	r3, r3, #24
 8008114:	431a      	orrs	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	071b      	lsls	r3, r3, #28
 800811a:	490b      	ldr	r1, [pc, #44]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a08      	ldr	r2, [pc, #32]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800812c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812e:	f7fc ff61 	bl	8004ff4 <HAL_GetTick>
 8008132:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008134:	e00a      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008136:	f7fc ff5d 	bl	8004ff4 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b64      	cmp	r3, #100	; 0x64
 8008142:	d903      	bls.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e009      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008148:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008158:	d1ed      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3720      	adds	r7, #32
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40023800 	.word	0x40023800

08008168 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e022      	b.n	80081c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d105      	bne.n	8008192 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7fa faa9 	bl	80026e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2203      	movs	r2, #3
 8008196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f814 	bl	80081c8 <HAL_SD_InitCard>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e00a      	b.n	80081c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081c8:	b5b0      	push	{r4, r5, r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af04      	add	r7, sp, #16
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80081d8:	2300      	movs	r3, #0
 80081da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80081e4:	2376      	movs	r3, #118	; 0x76
 80081e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681d      	ldr	r5, [r3, #0]
 80081ec:	466c      	mov	r4, sp
 80081ee:	f107 0314 	add.w	r3, r7, #20
 80081f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081fa:	f107 0308 	add.w	r3, r7, #8
 80081fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008200:	4628      	mov	r0, r5
 8008202:	f003 f97d 	bl	800b500 <SDMMC_Init>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800820c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e03b      	b.n	8008290 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008226:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4618      	mov	r0, r3
 800822e:	f003 f9b1 	bl	800b594 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008240:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 ffca 	bl	80091dc <SD_PowerON>
 8008248:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e013      	b.n	8008290 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fee9 	bl	8009040 <SD_InitCard>
 800826e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00b      	beq.n	800828e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3728      	adds	r7, #40	; 0x28
 8008294:	46bd      	mov	sp, r7
 8008296:	bdb0      	pop	{r4, r5, r7, pc}

08008298 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	; 0x30
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d107      	bne.n	80082c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e0cc      	b.n	800845a <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	f040 80c5 	bne.w	8008458 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	441a      	add	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082de:	429a      	cmp	r2, r3
 80082e0:	d907      	bls.n	80082f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e0b3      	b.n	800845a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2203      	movs	r2, #3
 80082f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2200      	movs	r2, #0
 8008300:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	4a53      	ldr	r2, [pc, #332]	; (8008464 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	4a52      	ldr	r2, [pc, #328]	; (8008468 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008320:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	2200      	movs	r2, #0
 8008328:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3380      	adds	r3, #128	; 0x80
 8008334:	4619      	mov	r1, r3
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	025b      	lsls	r3, r3, #9
 800833c:	089b      	lsrs	r3, r3, #2
 800833e:	f7fd f817 	bl	8005370 <HAL_DMA_Start_IT>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d017      	beq.n	8008378 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a43      	ldr	r2, [pc, #268]	; (800846c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e070      	b.n	800845a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0208 	orr.w	r2, r2, #8
 8008386:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838c:	2b01      	cmp	r3, #1
 800838e:	d002      	beq.n	8008396 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	025b      	lsls	r3, r3, #9
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800839e:	4618      	mov	r0, r3
 80083a0:	f003 f98c 	bl	800b6bc <SDMMC_CmdBlockLength>
 80083a4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00f      	beq.n	80083cc <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2e      	ldr	r2, [pc, #184]	; (800846c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ba:	431a      	orrs	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e046      	b.n	800845a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083cc:	f04f 33ff 	mov.w	r3, #4294967295
 80083d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	025b      	lsls	r3, r3, #9
 80083d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80083d8:	2390      	movs	r3, #144	; 0x90
 80083da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80083dc:	2302      	movs	r3, #2
 80083de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f107 0210 	add.w	r2, r7, #16
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f003 f936 	bl	800b664 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d90a      	bls.n	8008414 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2282      	movs	r2, #130	; 0x82
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840a:	4618      	mov	r0, r3
 800840c:	f003 f99a 	bl	800b744 <SDMMC_CmdReadMultiBlock>
 8008410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008412:	e009      	b.n	8008428 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2281      	movs	r2, #129	; 0x81
 8008418:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008420:	4618      	mov	r0, r3
 8008422:	f003 f96d 	bl	800b700 <SDMMC_CmdReadSingleBlock>
 8008426:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d012      	beq.n	8008454 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a0e      	ldr	r2, [pc, #56]	; (800846c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008434:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	431a      	orrs	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e002      	b.n	800845a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	e000      	b.n	800845a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008458:	2302      	movs	r3, #2
  }
}
 800845a:	4618      	mov	r0, r3
 800845c:	3730      	adds	r7, #48	; 0x30
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	08008e4f 	.word	0x08008e4f
 8008468:	08008ec1 	.word	0x08008ec1
 800846c:	004005ff 	.word	0x004005ff

08008470 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08c      	sub	sp, #48	; 0x30
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d107      	bne.n	8008498 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e0cf      	b.n	8008638 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	f040 80c8 	bne.w	8008636 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80084ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	441a      	add	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d907      	bls.n	80084ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e0b6      	b.n	8008638 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2203      	movs	r2, #3
 80084ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2200      	movs	r2, #0
 80084d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f042 021a 	orr.w	r2, r2, #26
 80084e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ee:	4a54      	ldr	r2, [pc, #336]	; (8008640 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80084f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f6:	4a53      	ldr	r2, [pc, #332]	; (8008644 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80084f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	2200      	movs	r2, #0
 8008500:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	2b01      	cmp	r3, #1
 8008508:	d002      	beq.n	8008510 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	025b      	lsls	r3, r3, #9
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008518:	4618      	mov	r0, r3
 800851a:	f003 f8cf 	bl	800b6bc <SDMMC_CmdBlockLength>
 800851e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00f      	beq.n	8008546 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a47      	ldr	r2, [pc, #284]	; (8008648 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	431a      	orrs	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e078      	b.n	8008638 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d90a      	bls.n	8008562 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	22a0      	movs	r2, #160	; 0xa0
 8008550:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008558:	4618      	mov	r0, r3
 800855a:	f003 f937 	bl	800b7cc <SDMMC_CmdWriteMultiBlock>
 800855e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008560:	e009      	b.n	8008576 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2290      	movs	r2, #144	; 0x90
 8008566:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800856e:	4618      	mov	r0, r3
 8008570:	f003 f90a 	bl	800b788 <SDMMC_CmdWriteSingleBlock>
 8008574:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d012      	beq.n	80085a2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a31      	ldr	r2, [pc, #196]	; (8008648 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	431a      	orrs	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e04a      	b.n	8008638 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0208 	orr.w	r2, r2, #8
 80085b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3380      	adds	r3, #128	; 0x80
 80085be:	461a      	mov	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	025b      	lsls	r3, r3, #9
 80085c4:	089b      	lsrs	r3, r3, #2
 80085c6:	f7fc fed3 	bl	8005370 <HAL_DMA_Start_IT>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01a      	beq.n	8008606 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 021a 	bic.w	r2, r2, #26
 80085de:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a18      	ldr	r2, [pc, #96]	; (8008648 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80085e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e018      	b.n	8008638 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008606:	f04f 33ff 	mov.w	r3, #4294967295
 800860a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	025b      	lsls	r3, r3, #9
 8008610:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008612:	2390      	movs	r3, #144	; 0x90
 8008614:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008616:	2300      	movs	r3, #0
 8008618:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800861a:	2300      	movs	r3, #0
 800861c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800861e:	2301      	movs	r3, #1
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f107 0210 	add.w	r2, r7, #16
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f003 f819 	bl	800b664 <SDMMC_ConfigData>

      return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e000      	b.n	8008638 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
  }
}
 8008638:	4618      	mov	r0, r3
 800863a:	3730      	adds	r7, #48	; 0x30
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	08008e25 	.word	0x08008e25
 8008644:	08008ec1 	.word	0x08008ec1
 8008648:	004005ff 	.word	0x004005ff

0800864c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <HAL_SD_IRQHandler+0x2e>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 ffc8 	bl	8009608 <SD_Read_IT>
 8008678:	e153      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 808d 	beq.w	80087a4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008692:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4ba3      	ldr	r3, [pc, #652]	; (800892c <HAL_SD_IRQHandler+0x2e0>)
 80086a0:	400b      	ands	r3, r1
 80086a2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0201 	bic.w	r2, r2, #1
 80086b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d039      	beq.n	8008732 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <HAL_SD_IRQHandler+0x86>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d011      	beq.n	80086f6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f003 f89a 	bl	800b810 <SDMMC_CmdStopTransfer>
 80086dc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f921 	bl	8008938 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80086fe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d104      	bne.n	8008722 <HAL_SD_IRQHandler+0xd6>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f005 f81c 	bl	800d760 <HAL_SD_RxCpltCallback>
 8008728:	e0fb      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f005 f80e 	bl	800d74c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008730:	e0f7      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 80f2 	beq.w	8008922 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d011      	beq.n	800876c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4618      	mov	r0, r3
 800874e:	f003 f85f 	bl	800b810 <SDMMC_CmdStopTransfer>
 8008752:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d008      	beq.n	800876c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	431a      	orrs	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8e6 	bl	8008938 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	f040 80d5 	bne.w	8008922 <HAL_SD_IRQHandler+0x2d6>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 80cf 	bne.w	8008922 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0208 	bic.w	r2, r2, #8
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f004 ffd5 	bl	800d74c <HAL_SD_TxCpltCallback>
}
 80087a2:	e0be      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d008      	beq.n	80087c4 <HAL_SD_IRQHandler+0x178>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 ff74 	bl	80096aa <SD_Write_IT>
 80087c2:	e0ae      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80a7 	beq.w	8008922 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	f043 0202 	orr.w	r2, r3, #2
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	f043 0208 	orr.w	r2, r3, #8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	f043 0220 	orr.w	r2, r3, #32
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	2b00      	cmp	r3, #0
 800882e:	d005      	beq.n	800883c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	f043 0210 	orr.w	r2, r3, #16
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f240 523a 	movw	r2, #1338	; 0x53a
 8008844:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008854:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f002 ffd8 	bl	800b810 <SDMMC_CmdStopTransfer>
 8008860:	4602      	mov	r2, r0
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	431a      	orrs	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f857 	bl	8008938 <HAL_SD_ErrorCallback>
}
 800888a:	e04a      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008892:	2b00      	cmp	r3, #0
 8008894:	d045      	beq.n	8008922 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 0310 	and.w	r3, r3, #16
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <HAL_SD_IRQHandler+0x25e>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d011      	beq.n	80088ce <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	4a20      	ldr	r2, [pc, #128]	; (8008930 <HAL_SD_IRQHandler+0x2e4>)
 80088b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fc fdba 	bl	8005430 <HAL_DMA_Abort_IT>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d02f      	beq.n	8008922 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fb4c 	bl	8008f64 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80088cc:	e029      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d104      	bne.n	80088e2 <HAL_SD_IRQHandler+0x296>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d011      	beq.n	8008906 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	4a13      	ldr	r2, [pc, #76]	; (8008934 <HAL_SD_IRQHandler+0x2e8>)
 80088e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fc fd9e 	bl	8005430 <HAL_DMA_Abort_IT>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d013      	beq.n	8008922 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fb67 	bl	8008fd2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008904:	e00d      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f004 ff0c 	bl	800d738 <HAL_SD_AbortCallback>
}
 8008920:	e7ff      	b.n	8008922 <HAL_SD_IRQHandler+0x2d6>
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	ffff3ec5 	.word	0xffff3ec5
 8008930:	08008f65 	.word	0x08008f65
 8008934:	08008fd3 	.word	0x08008fd3

08008938 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895a:	0f9b      	lsrs	r3, r3, #30
 800895c:	b2da      	uxtb	r2, r3
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008966:	0e9b      	lsrs	r3, r3, #26
 8008968:	b2db      	uxtb	r3, r3
 800896a:	f003 030f 	and.w	r3, r3, #15
 800896e:	b2da      	uxtb	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008978:	0e1b      	lsrs	r3, r3, #24
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	b2da      	uxtb	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800898a:	0c1b      	lsrs	r3, r3, #16
 800898c:	b2da      	uxtb	r2, r3
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008996:	0a1b      	lsrs	r3, r3, #8
 8008998:	b2da      	uxtb	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ac:	0d1b      	lsrs	r3, r3, #20
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b8:	0c1b      	lsrs	r3, r3, #16
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 030f 	and.w	r3, r3, #15
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ca:	0bdb      	lsrs	r3, r3, #15
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089dc:	0b9b      	lsrs	r3, r3, #14
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ee:	0b5b      	lsrs	r3, r3, #13
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a00:	0b1b      	lsrs	r3, r3, #12
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2200      	movs	r2, #0
 8008a12:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d163      	bne.n	8008ae4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a20:	009a      	lsls	r2, r3, #2
 8008a22:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a26:	4013      	ands	r3, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a2c:	0f92      	lsrs	r2, r2, #30
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a38:	0edb      	lsrs	r3, r3, #27
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4a:	0e1b      	lsrs	r3, r3, #24
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a5c:	0d5b      	lsrs	r3, r3, #21
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6e:	0c9b      	lsrs	r3, r3, #18
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a80:	0bdb      	lsrs	r3, r3, #15
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	7e1b      	ldrb	r3, [r3, #24]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	3302      	adds	r3, #2
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008aae:	fb02 f203 	mul.w	r2, r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	7a1b      	ldrb	r3, [r3, #8]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008ad0:	0a52      	lsrs	r2, r2, #9
 8008ad2:	fb02 f203 	mul.w	r2, r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae0:	661a      	str	r2, [r3, #96]	; 0x60
 8008ae2:	e031      	b.n	8008b48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d11d      	bne.n	8008b28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af0:	041b      	lsls	r3, r3, #16
 8008af2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afa:	0c1b      	lsrs	r3, r3, #16
 8008afc:	431a      	orrs	r2, r3
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	3301      	adds	r3, #1
 8008b08:	029a      	lsls	r2, r3, #10
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b1c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	661a      	str	r2, [r3, #96]	; 0x60
 8008b26:	e00f      	b.n	8008b48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a58      	ldr	r2, [pc, #352]	; (8008c90 <HAL_SD_GetCardCSD+0x344>)
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e09d      	b.n	8008c84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4c:	0b9b      	lsrs	r3, r3, #14
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b5e:	09db      	lsrs	r3, r3, #7
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	0fdb      	lsrs	r3, r3, #31
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8c:	0f5b      	lsrs	r3, r3, #29
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	0e9b      	lsrs	r3, r3, #26
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb0:	0d9b      	lsrs	r3, r3, #22
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	0d5b      	lsrs	r3, r3, #21
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bde:	0c1b      	lsrs	r3, r3, #16
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf2:	0bdb      	lsrs	r3, r3, #15
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c06:	0b9b      	lsrs	r3, r3, #14
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1a:	0b5b      	lsrs	r3, r3, #13
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2e:	0b1b      	lsrs	r3, r3, #12
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c42:	0a9b      	lsrs	r3, r3, #10
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	004005ff 	.word	0x004005ff

08008c94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008cec:	b5b0      	push	{r4, r5, r7, lr}
 8008cee:	b08e      	sub	sp, #56	; 0x38
 8008cf0:	af04      	add	r7, sp, #16
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d02e      	beq.n	8008d64 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d0c:	d106      	bne.n	8008d1c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38
 8008d1a:	e029      	b.n	8008d70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d22:	d10a      	bne.n	8008d3a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fb0f 	bl	8009348 <SD_WideBus_Enable>
 8008d2a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
 8008d38:	e01a      	b.n	8008d70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fb4c 	bl	80093de <SD_WideBus_Disable>
 8008d46:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
 8008d54:	e00c      	b.n	8008d70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
 8008d62:	e005      	b.n	8008d70 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e024      	b.n	8008dd6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681d      	ldr	r5, [r3, #0]
 8008db2:	466c      	mov	r4, sp
 8008db4:	f107 0318 	add.w	r3, r7, #24
 8008db8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dc0:	f107 030c 	add.w	r3, r7, #12
 8008dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f002 fb9a 	bl	800b500 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3728      	adds	r7, #40	; 0x28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8008dde:	bf00      	nop
 8008de0:	004005ff 	.word	0x004005ff

08008de4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008df0:	f107 030c 	add.w	r3, r7, #12
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa7e 	bl	80092f8 <SD_SendStatus>
 8008dfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	0a5b      	lsrs	r3, r3, #9
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e1a:	693b      	ldr	r3, [r7, #16]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008e42:	bf00      	nop
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	2b82      	cmp	r3, #130	; 0x82
 8008e62:	d111      	bne.n	8008e88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f002 fcd1 	bl	800b810 <SDMMC_CmdStopTransfer>
 8008e6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d008      	beq.n	8008e88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7ff fd58 	bl	8008938 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0208 	bic.w	r2, r2, #8
 8008e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f004 fc55 	bl	800d760 <HAL_SD_RxCpltCallback>
#endif
}
 8008eb6:	bf00      	nop
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7fc fc5a 	bl	8005788 <HAL_DMA_GetError>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d03e      	beq.n	8008f58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d002      	beq.n	8008ef6 <SD_DMAError+0x36>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d12d      	bne.n	8008f52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a19      	ldr	r2, [pc, #100]	; (8008f60 <SD_DMAError+0xa0>)
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f0c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f1a:	6978      	ldr	r0, [r7, #20]
 8008f1c:	f7ff ff62 	bl	8008de4 <HAL_SD_GetCardState>
 8008f20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b06      	cmp	r3, #6
 8008f26:	d002      	beq.n	8008f2e <SD_DMAError+0x6e>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d10a      	bne.n	8008f44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f002 fc6c 	bl	800b810 <SDMMC_CmdStopTransfer>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008f52:	6978      	ldr	r0, [r7, #20]
 8008f54:	f7ff fcf0 	bl	8008938 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008f58:	bf00      	nop
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	004005ff 	.word	0x004005ff

08008f64 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff ff31 	bl	8008de4 <HAL_SD_GetCardState>
 8008f82:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b06      	cmp	r3, #6
 8008f96:	d002      	beq.n	8008f9e <SD_DMATxAbort+0x3a>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b05      	cmp	r3, #5
 8008f9c:	d10a      	bne.n	8008fb4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f002 fc34 	bl	800b810 <SDMMC_CmdStopTransfer>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f004 fbbb 	bl	800d738 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008fc2:	e002      	b.n	8008fca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff fcb7 	bl	8008938 <HAL_SD_ErrorCallback>
}
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f240 523a 	movw	r2, #1338	; 0x53a
 8008fe8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f7ff fefa 	bl	8008de4 <HAL_SD_GetCardState>
 8008ff0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b06      	cmp	r3, #6
 8009004:	d002      	beq.n	800900c <SD_DMARxAbort+0x3a>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b05      	cmp	r3, #5
 800900a:	d10a      	bne.n	8009022 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4618      	mov	r0, r3
 8009012:	f002 fbfd 	bl	800b810 <SDMMC_CmdStopTransfer>
 8009016:	4602      	mov	r2, r0
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901c:	431a      	orrs	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	2b00      	cmp	r3, #0
 8009028:	d103      	bne.n	8009032 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f004 fb84 	bl	800d738 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009030:	e002      	b.n	8009038 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fc80 	bl	8008938 <HAL_SD_ErrorCallback>
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b094      	sub	sp, #80	; 0x50
 8009044:	af04      	add	r7, sp, #16
 8009046:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009048:	2301      	movs	r3, #1
 800904a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4618      	mov	r0, r3
 8009052:	f002 faae 	bl	800b5b2 <SDMMC_GetPowerState>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800905c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009060:	e0b7      	b.n	80091d2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009066:	2b03      	cmp	r3, #3
 8009068:	d02f      	beq.n	80090ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4618      	mov	r0, r3
 8009070:	f002 fcd9 	bl	800ba26 <SDMMC_CmdSendCID>
 8009074:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <SD_InitCard+0x40>
    {
      return errorstate;
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	e0a8      	b.n	80091d2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2100      	movs	r1, #0
 8009086:	4618      	mov	r0, r3
 8009088:	f002 fad9 	bl	800b63e <SDMMC_GetResponse>
 800908c:	4602      	mov	r2, r0
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2104      	movs	r1, #4
 8009098:	4618      	mov	r0, r3
 800909a:	f002 fad0 	bl	800b63e <SDMMC_GetResponse>
 800909e:	4602      	mov	r2, r0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2108      	movs	r1, #8
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 fac7 	bl	800b63e <SDMMC_GetResponse>
 80090b0:	4602      	mov	r2, r0
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	210c      	movs	r1, #12
 80090bc:	4618      	mov	r0, r3
 80090be:	f002 fabe 	bl	800b63e <SDMMC_GetResponse>
 80090c2:	4602      	mov	r2, r0
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d00d      	beq.n	80090ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f107 020e 	add.w	r2, r7, #14
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f002 fcdf 	bl	800baa0 <SDMMC_CmdSetRelAdd>
 80090e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <SD_InitCard+0xae>
    {
      return errorstate;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	e071      	b.n	80091d2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d036      	beq.n	8009164 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80090f6:	89fb      	ldrh	r3, [r7, #14]
 80090f8:	461a      	mov	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009106:	041b      	lsls	r3, r3, #16
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f002 fca9 	bl	800ba62 <SDMMC_CmdSendCSD>
 8009110:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911a:	e05a      	b.n	80091d2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f002 fa8b 	bl	800b63e <SDMMC_GetResponse>
 8009128:	4602      	mov	r2, r0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2104      	movs	r1, #4
 8009134:	4618      	mov	r0, r3
 8009136:	f002 fa82 	bl	800b63e <SDMMC_GetResponse>
 800913a:	4602      	mov	r2, r0
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2108      	movs	r1, #8
 8009146:	4618      	mov	r0, r3
 8009148:	f002 fa79 	bl	800b63e <SDMMC_GetResponse>
 800914c:	4602      	mov	r2, r0
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	210c      	movs	r1, #12
 8009158:	4618      	mov	r0, r3
 800915a:	f002 fa70 	bl	800b63e <SDMMC_GetResponse>
 800915e:	4602      	mov	r2, r0
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2104      	movs	r1, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f002 fa67 	bl	800b63e <SDMMC_GetResponse>
 8009170:	4603      	mov	r3, r0
 8009172:	0d1a      	lsrs	r2, r3, #20
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009178:	f107 0310 	add.w	r3, r7, #16
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff fbe4 	bl	800894c <HAL_SD_GetCardCSD>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800918a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800918e:	e020      	b.n	80091d2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6819      	ldr	r1, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	f04f 0400 	mov.w	r4, #0
 800919e:	461a      	mov	r2, r3
 80091a0:	4623      	mov	r3, r4
 80091a2:	4608      	mov	r0, r1
 80091a4:	f002 fb56 	bl	800b854 <SDMMC_CmdSelDesel>
 80091a8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80091aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <SD_InitCard+0x174>
  {
    return errorstate;
 80091b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b2:	e00e      	b.n	80091d2 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681d      	ldr	r5, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	466c      	mov	r4, sp
 80091bc:	f103 0210 	add.w	r2, r3, #16
 80091c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80091c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091c6:	3304      	adds	r3, #4
 80091c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091ca:	4628      	mov	r0, r5
 80091cc:	f002 f998 	bl	800b500 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3740      	adds	r7, #64	; 0x40
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080091dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 fb50 	bl	800b89a <SDMMC_CmdGoIdleState>
 80091fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	e072      	b.n	80092ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4618      	mov	r0, r3
 800920c:	f002 fb63 	bl	800b8d6 <SDMMC_CmdOperCond>
 8009210:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00d      	beq.n	8009234 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f002 fb39 	bl	800b89a <SDMMC_CmdGoIdleState>
 8009228:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	e05b      	b.n	80092ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923e:	2b01      	cmp	r3, #1
 8009240:	d137      	bne.n	80092b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f002 fb63 	bl	800b914 <SDMMC_CmdAppCommand>
 800924e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d02d      	beq.n	80092b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009256:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800925a:	e047      	b.n	80092ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f002 fb56 	bl	800b914 <SDMMC_CmdAppCommand>
 8009268:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <SD_PowerON+0x98>
    {
      return errorstate;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	e03b      	b.n	80092ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	491e      	ldr	r1, [pc, #120]	; (80092f4 <SD_PowerON+0x118>)
 800927a:	4618      	mov	r0, r3
 800927c:	f002 fb6c 	bl	800b958 <SDMMC_CmdAppOperCommand>
 8009280:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009288:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800928c:	e02e      	b.n	80092ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2100      	movs	r1, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f002 f9d2 	bl	800b63e <SDMMC_GetResponse>
 800929a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	0fdb      	lsrs	r3, r3, #31
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <SD_PowerON+0xcc>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <SD_PowerON+0xce>
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]

    count++;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	3301      	adds	r3, #1
 80092b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d802      	bhi.n	80092c2 <SD_PowerON+0xe6>
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0cc      	beq.n	800925c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d902      	bls.n	80092d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092d0:	e00c      	b.n	80092ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44
 80092e2:	e002      	b.n	80092ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	c1100000 	.word	0xc1100000

080092f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800930c:	e018      	b.n	8009340 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009316:	041b      	lsls	r3, r3, #16
 8009318:	4619      	mov	r1, r3
 800931a:	4610      	mov	r0, r2
 800931c:	f002 fbe1 	bl	800bae2 <SDMMC_CmdSendStatus>
 8009320:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	e009      	b.n	8009340 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f002 f983 	bl	800b63e <SDMMC_GetResponse>
 8009338:	4602      	mov	r2, r0
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f002 f96d 	bl	800b63e <SDMMC_GetResponse>
 8009364:	4603      	mov	r3, r0
 8009366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800936e:	d102      	bne.n	8009376 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009374:	e02f      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009376:	f107 030c 	add.w	r3, r7, #12
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f879 	bl	8009474 <SD_FindSCR>
 8009382:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	e023      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01c      	beq.n	80093d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	041b      	lsls	r3, r3, #16
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f002 fab5 	bl	800b914 <SDMMC_CmdAppCommand>
 80093aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e00f      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2102      	movs	r1, #2
 80093bc:	4618      	mov	r0, r3
 80093be:	f002 faef 	bl	800b9a0 <SDMMC_CmdBusWidth>
 80093c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	e003      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e001      	b.n	80093d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b086      	sub	sp, #24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f002 f922 	bl	800b63e <SDMMC_GetResponse>
 80093fa:	4603      	mov	r3, r0
 80093fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009404:	d102      	bne.n	800940c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800940a:	e02f      	b.n	800946c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800940c:	f107 030c 	add.w	r3, r7, #12
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f82e 	bl	8009474 <SD_FindSCR>
 8009418:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	e023      	b.n	800946c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01c      	beq.n	8009468 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f002 fa6a 	bl	800b914 <SDMMC_CmdAppCommand>
 8009440:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	e00f      	b.n	800946c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f002 faa4 	bl	800b9a0 <SDMMC_CmdBusWidth>
 8009458:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	e003      	b.n	800946c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009464:	2300      	movs	r3, #0
 8009466:	e001      	b.n	800946c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009468:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009474:	b590      	push	{r4, r7, lr}
 8009476:	b08f      	sub	sp, #60	; 0x3c
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800947e:	f7fb fdb9 	bl	8004ff4 <HAL_GetTick>
 8009482:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009488:	2300      	movs	r3, #0
 800948a:	60bb      	str	r3, [r7, #8]
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2108      	movs	r1, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f002 f90e 	bl	800b6bc <SDMMC_CmdBlockLength>
 80094a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	e0a9      	b.n	8009600 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f002 fa2b 	bl	800b914 <SDMMC_CmdAppCommand>
 80094be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	e09a      	b.n	8009600 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094ca:	f04f 33ff 	mov.w	r3, #4294967295
 80094ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80094d0:	2308      	movs	r3, #8
 80094d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80094d4:	2330      	movs	r3, #48	; 0x30
 80094d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094d8:	2302      	movs	r3, #2
 80094da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094dc:	2300      	movs	r3, #0
 80094de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80094e0:	2301      	movs	r3, #1
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f107 0210 	add.w	r2, r7, #16
 80094ec:	4611      	mov	r1, r2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f002 f8b8 	bl	800b664 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 fa73 	bl	800b9e4 <SDMMC_CmdSendSCR>
 80094fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	2b00      	cmp	r3, #0
 8009504:	d022      	beq.n	800954c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	e07a      	b.n	8009600 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00e      	beq.n	8009536 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6819      	ldr	r1, [r3, #0]
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	f107 0208 	add.w	r2, r7, #8
 8009524:	18d4      	adds	r4, r2, r3
 8009526:	4608      	mov	r0, r1
 8009528:	f002 f816 	bl	800b558 <SDMMC_ReadFIFO>
 800952c:	4603      	mov	r3, r0
 800952e:	6023      	str	r3, [r4, #0]
      index++;
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	3301      	adds	r3, #1
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009536:	f7fb fd5d 	bl	8004ff4 <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d102      	bne.n	800954c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009546:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800954a:	e059      	b.n	8009600 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009552:	f240 432a 	movw	r3, #1066	; 0x42a
 8009556:	4013      	ands	r3, r2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0d6      	beq.n	800950a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2208      	movs	r2, #8
 8009570:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009572:	2308      	movs	r3, #8
 8009574:	e044      	b.n	8009600 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2202      	movs	r2, #2
 800958a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800958c:	2302      	movs	r3, #2
 800958e:	e037      	b.n	8009600 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	d005      	beq.n	80095aa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2220      	movs	r2, #32
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80095a6:	2320      	movs	r3, #32
 80095a8:	e02a      	b.n	8009600 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	061a      	lsls	r2, r3, #24
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095c0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	0a1b      	lsrs	r3, r3, #8
 80095c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	0e1b      	lsrs	r3, r3, #24
 80095d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	601a      	str	r2, [r3, #0]
    scr++;
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	3304      	adds	r3, #4
 80095da:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	061a      	lsls	r2, r3, #24
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095e8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	0a1b      	lsrs	r3, r3, #8
 80095ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	0e1b      	lsrs	r3, r3, #24
 80095f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	373c      	adds	r7, #60	; 0x3c
 8009604:	46bd      	mov	sp, r7
 8009606:	bd90      	pop	{r4, r7, pc}

08009608 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d03f      	beq.n	80096a2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009622:	2300      	movs	r3, #0
 8009624:	617b      	str	r3, [r7, #20]
 8009626:	e033      	b.n	8009690 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	f001 ff93 	bl	800b558 <SDMMC_ReadFIFO>
 8009632:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3301      	adds	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	3b01      	subs	r3, #1
 8009646:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	0a1b      	lsrs	r3, r3, #8
 800964c:	b2da      	uxtb	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	3b01      	subs	r3, #1
 800965c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	b2da      	uxtb	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3301      	adds	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3b01      	subs	r3, #1
 8009672:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	0e1b      	lsrs	r3, r3, #24
 8009678:	b2da      	uxtb	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3301      	adds	r3, #1
 8009682:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	3b01      	subs	r3, #1
 8009688:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	3301      	adds	r3, #1
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b07      	cmp	r3, #7
 8009694:	d9c8      	bls.n	8009628 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80096a2:	bf00      	nop
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b086      	sub	sp, #24
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d043      	beq.n	800974c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80096c4:	2300      	movs	r3, #0
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	e037      	b.n	800973a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3301      	adds	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	3b01      	subs	r3, #1
 80096da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	021a      	lsls	r2, r3, #8
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	041a      	lsls	r2, r3, #16
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3b01      	subs	r3, #1
 800970a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	061a      	lsls	r2, r3, #24
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	4313      	orrs	r3, r2
 8009716:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3b01      	subs	r3, #1
 8009722:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f107 0208 	add.w	r2, r7, #8
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f001 ff1f 	bl	800b572 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	3301      	adds	r3, #1
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b07      	cmp	r3, #7
 800973e:	d9c4      	bls.n	80096ca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800974c:	bf00      	nop
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e084      	b.n	8009870 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7f9 f899 	bl	80028b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2202      	movs	r2, #2
 800978a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800979c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097a6:	d902      	bls.n	80097ae <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	e002      	b.n	80097b4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097bc:	d007      	beq.n	80097ce <HAL_SPI_Init+0x7a>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097c6:	d002      	beq.n	80097ce <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097de:	d903      	bls.n	80097e8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	631a      	str	r2, [r3, #48]	; 0x30
 80097e6:	e002      	b.n	80097ee <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	431a      	orrs	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	ea42 0103 	orr.w	r1, r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	0c1b      	lsrs	r3, r3, #16
 800982e:	f003 0204 	and.w	r2, r3, #4
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983c:	431a      	orrs	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	ea42 0103 	orr.w	r1, r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	430a      	orrs	r2, r1
 800984e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	69da      	ldr	r2, [r3, #28]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800985e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4613      	mov	r3, r2
 8009884:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d110      	bne.n	80098b4 <HAL_SPI_Receive_IT+0x3c>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800989a:	d10b      	bne.n	80098b4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2204      	movs	r2, #4
 80098a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80098a4:	88fb      	ldrh	r3, [r7, #6]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f88c 	bl	80099c8 <HAL_SPI_TransmitReceive_IT>
 80098b0:	4603      	mov	r3, r0
 80098b2:	e081      	b.n	80099b8 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_SPI_Receive_IT+0x4a>
 80098be:	2302      	movs	r3, #2
 80098c0:	e07a      	b.n	80099b8 <HAL_SPI_Receive_IT+0x140>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d002      	beq.n	80098dc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80098d6:	2302      	movs	r3, #2
 80098d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098da:	e068      	b.n	80099ae <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <HAL_SPI_Receive_IT+0x70>
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098ec:	e05f      	b.n	80099ae <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2204      	movs	r2, #4
 80098f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	88fa      	ldrh	r2, [r7, #6]
 8009906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	88fa      	ldrh	r2, [r7, #6]
 800990e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009932:	d90b      	bls.n	800994c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009942:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <HAL_SPI_Receive_IT+0x148>)
 8009948:	64da      	str	r2, [r3, #76]	; 0x4c
 800994a:	e00a      	b.n	8009962 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800995a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4a19      	ldr	r2, [pc, #100]	; (80099c4 <HAL_SPI_Receive_IT+0x14c>)
 8009960:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800996a:	d107      	bne.n	800997c <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800997a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800998a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b40      	cmp	r3, #64	; 0x40
 8009998:	d008      	beq.n	80099ac <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e000      	b.n	80099ae <HAL_SPI_Receive_IT+0x136>
  }

error :
 80099ac:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	08009fe1 	.word	0x08009fe1
 80099c4:	08009f91 	.word	0x08009f91

080099c8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <HAL_SPI_TransmitReceive_IT+0x20>
 80099e4:	2302      	movs	r3, #2
 80099e6:	e091      	b.n	8009b0c <HAL_SPI_TransmitReceive_IT+0x144>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099f6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099fe:	7dbb      	ldrb	r3, [r7, #22]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d00d      	beq.n	8009a20 <HAL_SPI_TransmitReceive_IT+0x58>
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a0a:	d106      	bne.n	8009a1a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <HAL_SPI_TransmitReceive_IT+0x52>
 8009a14:	7dbb      	ldrb	r3, [r7, #22]
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d002      	beq.n	8009a20 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a1e:	e070      	b.n	8009b02 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009a2c:	887b      	ldrh	r3, [r7, #2]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a36:	e064      	b.n	8009b02 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d003      	beq.n	8009a4c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2205      	movs	r2, #5
 8009a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	887a      	ldrh	r2, [r7, #2]
 8009a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	887a      	ldrh	r2, [r7, #2]
 8009a62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	887a      	ldrh	r2, [r7, #2]
 8009a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	887a      	ldrh	r2, [r7, #2]
 8009a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a82:	d906      	bls.n	8009a92 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4a24      	ldr	r2, [pc, #144]	; (8009b18 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009a88:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4a23      	ldr	r2, [pc, #140]	; (8009b1c <HAL_SPI_TransmitReceive_IT+0x154>)
 8009a8e:	651a      	str	r2, [r3, #80]	; 0x50
 8009a90:	e005      	b.n	8009a9e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4a22      	ldr	r2, [pc, #136]	; (8009b20 <HAL_SPI_TransmitReceive_IT+0x158>)
 8009a96:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4a22      	ldr	r2, [pc, #136]	; (8009b24 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009a9c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009aa6:	d802      	bhi.n	8009aae <HAL_SPI_TransmitReceive_IT+0xe6>
 8009aa8:	887b      	ldrh	r3, [r7, #2]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d908      	bls.n	8009ac0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009abc:	605a      	str	r2, [r3, #4]
 8009abe:	e007      	b.n	8009ad0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ace:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009ade:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d008      	beq.n	8009b00 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	e000      	b.n	8009b02 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009b00:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	371c      	adds	r7, #28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	08009ecb 	.word	0x08009ecb
 8009b1c:	08009f31 	.word	0x08009f31
 8009b20:	08009d7b 	.word	0x08009d7b
 8009b24:	08009e39 	.word	0x08009e39

08009b28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	099b      	lsrs	r3, r3, #6
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10f      	bne.n	8009b6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	099b      	lsrs	r3, r3, #6
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
    return;
 8009b6a:	e0d8      	b.n	8009d1e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <HAL_SPI_IRQHandler+0x66>
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	09db      	lsrs	r3, r3, #7
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d004      	beq.n	8009b8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
    return;
 8009b8c:	e0c7      	b.n	8009d1e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10c      	bne.n	8009bb4 <HAL_SPI_IRQHandler+0x8c>
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	099b      	lsrs	r3, r3, #6
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d106      	bne.n	8009bb4 <HAL_SPI_IRQHandler+0x8c>
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80b5 	beq.w	8009d1e <HAL_SPI_IRQHandler+0x1f6>
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	095b      	lsrs	r3, r3, #5
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80ae 	beq.w	8009d1e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	099b      	lsrs	r3, r3, #6
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d023      	beq.n	8009c16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d011      	beq.n	8009bfe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bde:	f043 0204 	orr.w	r2, r3, #4
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009be6:	2300      	movs	r3, #0
 8009be8:	617b      	str	r3, [r7, #20]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	e00b      	b.n	8009c16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bfe:	2300      	movs	r3, #0
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	613b      	str	r3, [r7, #16]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	613b      	str	r3, [r7, #16]
 8009c12:	693b      	ldr	r3, [r7, #16]
        return;
 8009c14:	e083      	b.n	8009d1e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	095b      	lsrs	r3, r3, #5
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d014      	beq.n	8009c4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c26:	f043 0201 	orr.w	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	0a1b      	lsrs	r3, r3, #8
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00c      	beq.n	8009c72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c5c:	f043 0208 	orr.w	r2, r3, #8
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c64:	2300      	movs	r3, #0
 8009c66:	60bb      	str	r3, [r7, #8]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	60bb      	str	r3, [r7, #8]
 8009c70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d050      	beq.n	8009d1c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <HAL_SPI_IRQHandler+0x17e>
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d034      	beq.n	8009d10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0203 	bic.w	r2, r2, #3
 8009cb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d011      	beq.n	8009ce2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc2:	4a18      	ldr	r2, [pc, #96]	; (8009d24 <HAL_SPI_IRQHandler+0x1fc>)
 8009cc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fb fbb0 	bl	8005430 <HAL_DMA_Abort_IT>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d016      	beq.n	8009d18 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	4a0d      	ldr	r2, [pc, #52]	; (8009d24 <HAL_SPI_IRQHandler+0x1fc>)
 8009cf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fb fb9a 	bl	8005430 <HAL_DMA_Abort_IT>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009d0e:	e003      	b.n	8009d18 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f813 	bl	8009d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009d16:	e000      	b.n	8009d1a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009d18:	bf00      	nop
    return;
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
  }
}
 8009d1e:	3720      	adds	r7, #32
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	08009d51 	.word	0x08009d51

08009d28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff ffe5 	bl	8009d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d72:	bf00      	nop
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d923      	bls.n	8009dd6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	b292      	uxth	r2, r2
 8009d9a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da0:	1c9a      	adds	r2, r3, #2
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	3b02      	subs	r3, #2
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d11f      	bne.n	8009e04 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009dd2:	605a      	str	r2, [r3, #4]
 8009dd4:	e016      	b.n	8009e04 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f103 020c 	add.w	r2, r3, #12
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10f      	bne.n	8009e30 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009e1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa73 	bl	800a316 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d912      	bls.n	8009e70 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	881a      	ldrh	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	1c9a      	adds	r2, r3, #2
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	3b02      	subs	r3, #2
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e6e:	e012      	b.n	8009e96 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	330c      	adds	r3, #12
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d110      	bne.n	8009ec2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fa2a 	bl	800a316 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009edc:	b292      	uxth	r2, r2
 8009ede:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee4:	1c9a      	adds	r2, r3, #2
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10f      	bne.n	8009f28 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f9f7 	bl	800a316 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009f28:	bf00      	nop
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	881a      	ldrh	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	1c9a      	adds	r2, r3, #2
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d110      	bne.n	8009f88 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f74:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d102      	bne.n	8009f88 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f9c7 	bl	800a316 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f103 020c 	add.w	r2, r3, #12
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa4:	7812      	ldrb	r2, [r2, #0]
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f9e1 	bl	800a39a <SPI_CloseRx_ISR>
  }
}
 8009fd8:	bf00      	nop
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	b292      	uxth	r2, r2
 8009ff4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffa:	1c9a      	adds	r2, r3, #2
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a006:	b29b      	uxth	r3, r3
 800a008:	3b01      	subs	r3, #1
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a018:	b29b      	uxth	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d102      	bne.n	800a024 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f9bb 	bl	800a39a <SPI_CloseRx_ISR>
  }
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	4613      	mov	r3, r2
 800a03a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a03c:	e04c      	b.n	800a0d8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a044:	d048      	beq.n	800a0d8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a046:	f7fa ffd5 	bl	8004ff4 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	429a      	cmp	r2, r3
 800a054:	d902      	bls.n	800a05c <SPI_WaitFlagStateUntilTimeout+0x30>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d13d      	bne.n	800a0d8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a06a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a074:	d111      	bne.n	800a09a <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a07e:	d004      	beq.n	800a08a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a088:	d107      	bne.n	800a09a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a098:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0a2:	d10f      	bne.n	800a0c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e00f      	b.n	800a0f8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	bf0c      	ite	eq
 800a0e8:	2301      	moveq	r3, #1
 800a0ea:	2300      	movne	r3, #0
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	79fb      	ldrb	r3, [r7, #7]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d1a3      	bne.n	800a03e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800a10e:	e057      	b.n	800a1c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a116:	d106      	bne.n	800a126 <SPI_WaitFifoStateUntilTimeout+0x26>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d103      	bne.n	800a126 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	330c      	adds	r3, #12
 800a124:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d048      	beq.n	800a1c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a12e:	f7fa ff61 	bl	8004ff4 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d902      	bls.n	800a144 <SPI_WaitFifoStateUntilTimeout+0x44>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d13d      	bne.n	800a1c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a152:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a15c:	d111      	bne.n	800a182 <SPI_WaitFifoStateUntilTimeout+0x82>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a166:	d004      	beq.n	800a172 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a170:	d107      	bne.n	800a182 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a180:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18a:	d10f      	bne.n	800a1ac <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e008      	b.n	800a1d2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d19f      	bne.n	800a110 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af02      	add	r7, sp, #8
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1ee:	d111      	bne.n	800a214 <SPI_EndRxTransaction+0x3a>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1f8:	d004      	beq.n	800a204 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a202:	d107      	bne.n	800a214 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a212:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2200      	movs	r2, #0
 800a21c:	2180      	movs	r1, #128	; 0x80
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff ff04 	bl	800a02c <SPI_WaitFlagStateUntilTimeout>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a22e:	f043 0220 	orr.w	r2, r3, #32
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e023      	b.n	800a282 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a242:	d11d      	bne.n	800a280 <SPI_EndRxTransaction+0xa6>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a24c:	d004      	beq.n	800a258 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a256:	d113      	bne.n	800a280 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2200      	movs	r2, #0
 800a260:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7ff ff4b 	bl	800a100 <SPI_WaitFifoStateUntilTimeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a274:	f043 0220 	orr.w	r2, r3, #32
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e000      	b.n	800a282 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af02      	add	r7, sp, #8
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7ff ff2c 	bl	800a100 <SPI_WaitFifoStateUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d007      	beq.n	800a2be <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b2:	f043 0220 	orr.w	r2, r3, #32
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e027      	b.n	800a30e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2180      	movs	r1, #128	; 0x80
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff feaf 	bl	800a02c <SPI_WaitFlagStateUntilTimeout>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d8:	f043 0220 	orr.w	r2, r3, #32
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e014      	b.n	800a30e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff ff05 	bl	800a100 <SPI_WaitFifoStateUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d007      	beq.n	800a30c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a300:	f043 0220 	orr.w	r2, r3, #32
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e000      	b.n	800a30e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a31e:	f7fa fe69 	bl	8004ff4 <HAL_GetTick>
 800a322:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f022 0220 	bic.w	r2, r2, #32
 800a332:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	2164      	movs	r1, #100	; 0x64
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff ffa6 	bl	800a28a <SPI_EndRxTxTransaction>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a348:	f043 0220 	orr.w	r2, r3, #32
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a354:	2b00      	cmp	r3, #0
 800a356:	d115      	bne.n	800a384 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b04      	cmp	r3, #4
 800a362:	d107      	bne.n	800a374 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7f9 fe05 	bl	8003f7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a372:	e00e      	b.n	800a392 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fcd3 	bl	8009d28 <HAL_SPI_TxRxCpltCallback>
}
 800a382:	e006      	b.n	800a392 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff fcd5 	bl	8009d3c <HAL_SPI_ErrorCallback>
}
 800a392:	bf00      	nop
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b082      	sub	sp, #8
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a3b0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a3b2:	f7fa fe1f 	bl	8004ff4 <HAL_GetTick>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	2164      	movs	r1, #100	; 0x64
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff ff0c 	bl	800a1da <SPI_EndRxTransaction>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3cc:	f043 0220 	orr.w	r2, r3, #32
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d103      	bne.n	800a3ec <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7f9 fdc9 	bl	8003f7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a3ea:	e002      	b.n	800a3f2 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff fca5 	bl	8009d3c <HAL_SPI_ErrorCallback>
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e01d      	b.n	800a448 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f815 	bl	800a450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2202      	movs	r2, #2
 800a42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	3304      	adds	r3, #4
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f000 f985 	bl	800a748 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689a      	ldr	r2, [r3, #8]
 800a482:	4b0c      	ldr	r3, [pc, #48]	; (800a4b4 <HAL_TIM_Base_Start_IT+0x50>)
 800a484:	4013      	ands	r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b06      	cmp	r3, #6
 800a48c:	d00b      	beq.n	800a4a6 <HAL_TIM_Base_Start_IT+0x42>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a494:	d007      	beq.n	800a4a6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f042 0201 	orr.w	r2, r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	00010007 	.word	0x00010007

0800a4b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0302 	and.w	r3, r3, #2
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d122      	bne.n	800a514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d11b      	bne.n	800a514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f06f 0202 	mvn.w	r2, #2
 800a4e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f003 0303 	and.w	r3, r3, #3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f905 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a500:	e005      	b.n	800a50e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f8f7 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f908 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d122      	bne.n	800a568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d11b      	bne.n	800a568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f06f 0204 	mvn.w	r2, #4
 800a538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2202      	movs	r2, #2
 800a53e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f8db 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a554:	e005      	b.n	800a562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f8cd 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f8de 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f003 0308 	and.w	r3, r3, #8
 800a572:	2b08      	cmp	r3, #8
 800a574:	d122      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f003 0308 	and.w	r3, r3, #8
 800a580:	2b08      	cmp	r3, #8
 800a582:	d11b      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f06f 0208 	mvn.w	r2, #8
 800a58c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2204      	movs	r2, #4
 800a592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	f003 0303 	and.w	r3, r3, #3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f8b1 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a5a8:	e005      	b.n	800a5b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f8a3 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f8b4 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f003 0310 	and.w	r3, r3, #16
 800a5c6:	2b10      	cmp	r3, #16
 800a5c8:	d122      	bne.n	800a610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0310 	and.w	r3, r3, #16
 800a5d4:	2b10      	cmp	r3, #16
 800a5d6:	d11b      	bne.n	800a610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f06f 0210 	mvn.w	r2, #16
 800a5e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2208      	movs	r2, #8
 800a5e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f887 	bl	800a70a <HAL_TIM_IC_CaptureCallback>
 800a5fc:	e005      	b.n	800a60a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f879 	bl	800a6f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f88a 	bl	800a71e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d10e      	bne.n	800a63c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d107      	bne.n	800a63c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f06f 0201 	mvn.w	r2, #1
 800a634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7f7 f95e 	bl	80018f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a646:	2b80      	cmp	r3, #128	; 0x80
 800a648:	d10e      	bne.n	800a668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a654:	2b80      	cmp	r3, #128	; 0x80
 800a656:	d107      	bne.n	800a668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f91a 	bl	800a89c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a676:	d10e      	bne.n	800a696 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a682:	2b80      	cmp	r3, #128	; 0x80
 800a684:	d107      	bne.n	800a696 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a68e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f90d 	bl	800a8b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d10e      	bne.n	800a6c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ae:	2b40      	cmp	r3, #64	; 0x40
 800a6b0:	d107      	bne.n	800a6c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f838 	bl	800a732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f003 0320 	and.w	r3, r3, #32
 800a6cc:	2b20      	cmp	r3, #32
 800a6ce:	d10e      	bne.n	800a6ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d107      	bne.n	800a6ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f06f 0220 	mvn.w	r2, #32
 800a6e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f8cd 	bl	800a888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b083      	sub	sp, #12
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
	...

0800a748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a40      	ldr	r2, [pc, #256]	; (800a85c <TIM_Base_SetConfig+0x114>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d013      	beq.n	800a788 <TIM_Base_SetConfig+0x40>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a766:	d00f      	beq.n	800a788 <TIM_Base_SetConfig+0x40>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a3d      	ldr	r2, [pc, #244]	; (800a860 <TIM_Base_SetConfig+0x118>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d00b      	beq.n	800a788 <TIM_Base_SetConfig+0x40>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a3c      	ldr	r2, [pc, #240]	; (800a864 <TIM_Base_SetConfig+0x11c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d007      	beq.n	800a788 <TIM_Base_SetConfig+0x40>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a3b      	ldr	r2, [pc, #236]	; (800a868 <TIM_Base_SetConfig+0x120>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d003      	beq.n	800a788 <TIM_Base_SetConfig+0x40>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a3a      	ldr	r2, [pc, #232]	; (800a86c <TIM_Base_SetConfig+0x124>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d108      	bne.n	800a79a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a2f      	ldr	r2, [pc, #188]	; (800a85c <TIM_Base_SetConfig+0x114>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d02b      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a8:	d027      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2c      	ldr	r2, [pc, #176]	; (800a860 <TIM_Base_SetConfig+0x118>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d023      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a2b      	ldr	r2, [pc, #172]	; (800a864 <TIM_Base_SetConfig+0x11c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01f      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a2a      	ldr	r2, [pc, #168]	; (800a868 <TIM_Base_SetConfig+0x120>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d01b      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a29      	ldr	r2, [pc, #164]	; (800a86c <TIM_Base_SetConfig+0x124>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d017      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a28      	ldr	r2, [pc, #160]	; (800a870 <TIM_Base_SetConfig+0x128>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d013      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a27      	ldr	r2, [pc, #156]	; (800a874 <TIM_Base_SetConfig+0x12c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00f      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a26      	ldr	r2, [pc, #152]	; (800a878 <TIM_Base_SetConfig+0x130>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d00b      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a25      	ldr	r2, [pc, #148]	; (800a87c <TIM_Base_SetConfig+0x134>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d007      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a24      	ldr	r2, [pc, #144]	; (800a880 <TIM_Base_SetConfig+0x138>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d003      	beq.n	800a7fa <TIM_Base_SetConfig+0xb2>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a23      	ldr	r2, [pc, #140]	; (800a884 <TIM_Base_SetConfig+0x13c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d108      	bne.n	800a80c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a0a      	ldr	r2, [pc, #40]	; (800a85c <TIM_Base_SetConfig+0x114>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d003      	beq.n	800a840 <TIM_Base_SetConfig+0xf8>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a0c      	ldr	r2, [pc, #48]	; (800a86c <TIM_Base_SetConfig+0x124>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d103      	bne.n	800a848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	615a      	str	r2, [r3, #20]
}
 800a84e:	bf00      	nop
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40010000 	.word	0x40010000
 800a860:	40000400 	.word	0x40000400
 800a864:	40000800 	.word	0x40000800
 800a868:	40000c00 	.word	0x40000c00
 800a86c:	40010400 	.word	0x40010400
 800a870:	40014000 	.word	0x40014000
 800a874:	40014400 	.word	0x40014400
 800a878:	40014800 	.word	0x40014800
 800a87c:	40001800 	.word	0x40001800
 800a880:	40001c00 	.word	0x40001c00
 800a884:	40002000 	.word	0x40002000

0800a888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e040      	b.n	800a958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7f8 f8d2 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2224      	movs	r2, #36	; 0x24
 800a8f0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 0201 	bic.w	r2, r2, #1
 800a900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f960 	bl	800abc8 <UART_SetConfig>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e022      	b.n	800a958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fbfe 	bl	800b11c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a92e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689a      	ldr	r2, [r3, #8]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a93e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f042 0201 	orr.w	r2, r2, #1
 800a94e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc85 	bl	800b260 <UART_CheckIdleState>
 800a956:	4603      	mov	r3, r0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	; 0x28
 800a964:	af02      	add	r7, sp, #8
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	4613      	mov	r3, r2
 800a96e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a974:	2b20      	cmp	r3, #32
 800a976:	d17f      	bne.n	800aa78 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <HAL_UART_Transmit+0x24>
 800a97e:	88fb      	ldrh	r3, [r7, #6]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e078      	b.n	800aa7a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <HAL_UART_Transmit+0x36>
 800a992:	2302      	movs	r3, #2
 800a994:	e071      	b.n	800aa7a <HAL_UART_Transmit+0x11a>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2221      	movs	r2, #33	; 0x21
 800a9a8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a9aa:	f7fa fb23 	bl	8004ff4 <HAL_GetTick>
 800a9ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	88fa      	ldrh	r2, [r7, #6]
 800a9b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	88fa      	ldrh	r2, [r7, #6]
 800a9bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c8:	d108      	bne.n	800a9dc <HAL_UART_Transmit+0x7c>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d104      	bne.n	800a9dc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	61bb      	str	r3, [r7, #24]
 800a9da:	e003      	b.n	800a9e4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a9ec:	e02c      	b.n	800aa48 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2180      	movs	r1, #128	; 0x80
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 fc60 	bl	800b2be <UART_WaitOnFlagUntilTimeout>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e038      	b.n	800aa7a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10b      	bne.n	800aa26 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	3302      	adds	r3, #2
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	e007      	b.n	800aa36 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	781a      	ldrb	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	3301      	adds	r3, #1
 800aa34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1cc      	bne.n	800a9ee <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2140      	movs	r1, #64	; 0x40
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 fc2d 	bl	800b2be <UART_WaitOnFlagUntilTimeout>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e005      	b.n	800aa7a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2220      	movs	r2, #32
 800aa72:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	e000      	b.n	800aa7a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800aa78:	2302      	movs	r3, #2
  }
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3720      	adds	r7, #32
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	f040 808a 	bne.w	800abb0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <HAL_UART_Receive_IT+0x24>
 800aaa2:	88fb      	ldrh	r3, [r7, #6]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e082      	b.n	800abb2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d101      	bne.n	800aaba <HAL_UART_Receive_IT+0x36>
 800aab6:	2302      	movs	r3, #2
 800aab8:	e07b      	b.n	800abb2 <HAL_UART_Receive_IT+0x12e>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	88fa      	ldrh	r2, [r7, #6]
 800aacc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	88fa      	ldrh	r2, [r7, #6]
 800aad4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae6:	d10e      	bne.n	800ab06 <HAL_UART_Receive_IT+0x82>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <HAL_UART_Receive_IT+0x78>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aaf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aafa:	e02d      	b.n	800ab58 <HAL_UART_Receive_IT+0xd4>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	22ff      	movs	r2, #255	; 0xff
 800ab00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab04:	e028      	b.n	800ab58 <HAL_UART_Receive_IT+0xd4>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10d      	bne.n	800ab2a <HAL_UART_Receive_IT+0xa6>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d104      	bne.n	800ab20 <HAL_UART_Receive_IT+0x9c>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	22ff      	movs	r2, #255	; 0xff
 800ab1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab1e:	e01b      	b.n	800ab58 <HAL_UART_Receive_IT+0xd4>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	227f      	movs	r2, #127	; 0x7f
 800ab24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab28:	e016      	b.n	800ab58 <HAL_UART_Receive_IT+0xd4>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab32:	d10d      	bne.n	800ab50 <HAL_UART_Receive_IT+0xcc>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <HAL_UART_Receive_IT+0xc2>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	227f      	movs	r2, #127	; 0x7f
 800ab40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab44:	e008      	b.n	800ab58 <HAL_UART_Receive_IT+0xd4>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	223f      	movs	r2, #63	; 0x3f
 800ab4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab4e:	e003      	b.n	800ab58 <HAL_UART_Receive_IT+0xd4>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2222      	movs	r2, #34	; 0x22
 800ab62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689a      	ldr	r2, [r3, #8]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0201 	orr.w	r2, r2, #1
 800ab72:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab7c:	d107      	bne.n	800ab8e <HAL_UART_Receive_IT+0x10a>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	4a0d      	ldr	r2, [pc, #52]	; (800abc0 <HAL_UART_Receive_IT+0x13c>)
 800ab8a:	661a      	str	r2, [r3, #96]	; 0x60
 800ab8c:	e002      	b.n	800ab94 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4a0c      	ldr	r2, [pc, #48]	; (800abc4 <HAL_UART_Receive_IT+0x140>)
 800ab92:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800abaa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e000      	b.n	800abb2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800abb0:	2302      	movs	r3, #2
  }
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	0800b45b 	.word	0x0800b45b
 800abc4:	0800b3b5 	.word	0x0800b3b5

0800abc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	431a      	orrs	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	431a      	orrs	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	4313      	orrs	r3, r2
 800abee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	4bb1      	ldr	r3, [pc, #708]	; (800aebc <UART_SetConfig+0x2f4>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	6812      	ldr	r2, [r2, #0]
 800abfe:	6939      	ldr	r1, [r7, #16]
 800ac00:	430b      	orrs	r3, r1
 800ac02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a9f      	ldr	r2, [pc, #636]	; (800aec0 <UART_SetConfig+0x2f8>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d121      	bne.n	800ac8c <UART_SetConfig+0xc4>
 800ac48:	4b9e      	ldr	r3, [pc, #632]	; (800aec4 <UART_SetConfig+0x2fc>)
 800ac4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d816      	bhi.n	800ac84 <UART_SetConfig+0xbc>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <UART_SetConfig+0x94>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac6d 	.word	0x0800ac6d
 800ac60:	0800ac79 	.word	0x0800ac79
 800ac64:	0800ac73 	.word	0x0800ac73
 800ac68:	0800ac7f 	.word	0x0800ac7f
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	77fb      	strb	r3, [r7, #31]
 800ac70:	e151      	b.n	800af16 <UART_SetConfig+0x34e>
 800ac72:	2302      	movs	r3, #2
 800ac74:	77fb      	strb	r3, [r7, #31]
 800ac76:	e14e      	b.n	800af16 <UART_SetConfig+0x34e>
 800ac78:	2304      	movs	r3, #4
 800ac7a:	77fb      	strb	r3, [r7, #31]
 800ac7c:	e14b      	b.n	800af16 <UART_SetConfig+0x34e>
 800ac7e:	2308      	movs	r3, #8
 800ac80:	77fb      	strb	r3, [r7, #31]
 800ac82:	e148      	b.n	800af16 <UART_SetConfig+0x34e>
 800ac84:	2310      	movs	r3, #16
 800ac86:	77fb      	strb	r3, [r7, #31]
 800ac88:	bf00      	nop
 800ac8a:	e144      	b.n	800af16 <UART_SetConfig+0x34e>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a8d      	ldr	r2, [pc, #564]	; (800aec8 <UART_SetConfig+0x300>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d134      	bne.n	800ad00 <UART_SetConfig+0x138>
 800ac96:	4b8b      	ldr	r3, [pc, #556]	; (800aec4 <UART_SetConfig+0x2fc>)
 800ac98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac9c:	f003 030c 	and.w	r3, r3, #12
 800aca0:	2b0c      	cmp	r3, #12
 800aca2:	d829      	bhi.n	800acf8 <UART_SetConfig+0x130>
 800aca4:	a201      	add	r2, pc, #4	; (adr r2, 800acac <UART_SetConfig+0xe4>)
 800aca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acaa:	bf00      	nop
 800acac:	0800ace1 	.word	0x0800ace1
 800acb0:	0800acf9 	.word	0x0800acf9
 800acb4:	0800acf9 	.word	0x0800acf9
 800acb8:	0800acf9 	.word	0x0800acf9
 800acbc:	0800aced 	.word	0x0800aced
 800acc0:	0800acf9 	.word	0x0800acf9
 800acc4:	0800acf9 	.word	0x0800acf9
 800acc8:	0800acf9 	.word	0x0800acf9
 800accc:	0800ace7 	.word	0x0800ace7
 800acd0:	0800acf9 	.word	0x0800acf9
 800acd4:	0800acf9 	.word	0x0800acf9
 800acd8:	0800acf9 	.word	0x0800acf9
 800acdc:	0800acf3 	.word	0x0800acf3
 800ace0:	2300      	movs	r3, #0
 800ace2:	77fb      	strb	r3, [r7, #31]
 800ace4:	e117      	b.n	800af16 <UART_SetConfig+0x34e>
 800ace6:	2302      	movs	r3, #2
 800ace8:	77fb      	strb	r3, [r7, #31]
 800acea:	e114      	b.n	800af16 <UART_SetConfig+0x34e>
 800acec:	2304      	movs	r3, #4
 800acee:	77fb      	strb	r3, [r7, #31]
 800acf0:	e111      	b.n	800af16 <UART_SetConfig+0x34e>
 800acf2:	2308      	movs	r3, #8
 800acf4:	77fb      	strb	r3, [r7, #31]
 800acf6:	e10e      	b.n	800af16 <UART_SetConfig+0x34e>
 800acf8:	2310      	movs	r3, #16
 800acfa:	77fb      	strb	r3, [r7, #31]
 800acfc:	bf00      	nop
 800acfe:	e10a      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a71      	ldr	r2, [pc, #452]	; (800aecc <UART_SetConfig+0x304>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d120      	bne.n	800ad4c <UART_SetConfig+0x184>
 800ad0a:	4b6e      	ldr	r3, [pc, #440]	; (800aec4 <UART_SetConfig+0x2fc>)
 800ad0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad14:	2b10      	cmp	r3, #16
 800ad16:	d00f      	beq.n	800ad38 <UART_SetConfig+0x170>
 800ad18:	2b10      	cmp	r3, #16
 800ad1a:	d802      	bhi.n	800ad22 <UART_SetConfig+0x15a>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d005      	beq.n	800ad2c <UART_SetConfig+0x164>
 800ad20:	e010      	b.n	800ad44 <UART_SetConfig+0x17c>
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	d005      	beq.n	800ad32 <UART_SetConfig+0x16a>
 800ad26:	2b30      	cmp	r3, #48	; 0x30
 800ad28:	d009      	beq.n	800ad3e <UART_SetConfig+0x176>
 800ad2a:	e00b      	b.n	800ad44 <UART_SetConfig+0x17c>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	77fb      	strb	r3, [r7, #31]
 800ad30:	e0f1      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad32:	2302      	movs	r3, #2
 800ad34:	77fb      	strb	r3, [r7, #31]
 800ad36:	e0ee      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad38:	2304      	movs	r3, #4
 800ad3a:	77fb      	strb	r3, [r7, #31]
 800ad3c:	e0eb      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad3e:	2308      	movs	r3, #8
 800ad40:	77fb      	strb	r3, [r7, #31]
 800ad42:	e0e8      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad44:	2310      	movs	r3, #16
 800ad46:	77fb      	strb	r3, [r7, #31]
 800ad48:	bf00      	nop
 800ad4a:	e0e4      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a5f      	ldr	r2, [pc, #380]	; (800aed0 <UART_SetConfig+0x308>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d120      	bne.n	800ad98 <UART_SetConfig+0x1d0>
 800ad56:	4b5b      	ldr	r3, [pc, #364]	; (800aec4 <UART_SetConfig+0x2fc>)
 800ad58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad60:	2b40      	cmp	r3, #64	; 0x40
 800ad62:	d00f      	beq.n	800ad84 <UART_SetConfig+0x1bc>
 800ad64:	2b40      	cmp	r3, #64	; 0x40
 800ad66:	d802      	bhi.n	800ad6e <UART_SetConfig+0x1a6>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <UART_SetConfig+0x1b0>
 800ad6c:	e010      	b.n	800ad90 <UART_SetConfig+0x1c8>
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d005      	beq.n	800ad7e <UART_SetConfig+0x1b6>
 800ad72:	2bc0      	cmp	r3, #192	; 0xc0
 800ad74:	d009      	beq.n	800ad8a <UART_SetConfig+0x1c2>
 800ad76:	e00b      	b.n	800ad90 <UART_SetConfig+0x1c8>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	77fb      	strb	r3, [r7, #31]
 800ad7c:	e0cb      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	77fb      	strb	r3, [r7, #31]
 800ad82:	e0c8      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad84:	2304      	movs	r3, #4
 800ad86:	77fb      	strb	r3, [r7, #31]
 800ad88:	e0c5      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad8a:	2308      	movs	r3, #8
 800ad8c:	77fb      	strb	r3, [r7, #31]
 800ad8e:	e0c2      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad90:	2310      	movs	r3, #16
 800ad92:	77fb      	strb	r3, [r7, #31]
 800ad94:	bf00      	nop
 800ad96:	e0be      	b.n	800af16 <UART_SetConfig+0x34e>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a4d      	ldr	r2, [pc, #308]	; (800aed4 <UART_SetConfig+0x30c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d124      	bne.n	800adec <UART_SetConfig+0x224>
 800ada2:	4b48      	ldr	r3, [pc, #288]	; (800aec4 <UART_SetConfig+0x2fc>)
 800ada4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ada8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb0:	d012      	beq.n	800add8 <UART_SetConfig+0x210>
 800adb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb6:	d802      	bhi.n	800adbe <UART_SetConfig+0x1f6>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d007      	beq.n	800adcc <UART_SetConfig+0x204>
 800adbc:	e012      	b.n	800ade4 <UART_SetConfig+0x21c>
 800adbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adc2:	d006      	beq.n	800add2 <UART_SetConfig+0x20a>
 800adc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adc8:	d009      	beq.n	800adde <UART_SetConfig+0x216>
 800adca:	e00b      	b.n	800ade4 <UART_SetConfig+0x21c>
 800adcc:	2300      	movs	r3, #0
 800adce:	77fb      	strb	r3, [r7, #31]
 800add0:	e0a1      	b.n	800af16 <UART_SetConfig+0x34e>
 800add2:	2302      	movs	r3, #2
 800add4:	77fb      	strb	r3, [r7, #31]
 800add6:	e09e      	b.n	800af16 <UART_SetConfig+0x34e>
 800add8:	2304      	movs	r3, #4
 800adda:	77fb      	strb	r3, [r7, #31]
 800addc:	e09b      	b.n	800af16 <UART_SetConfig+0x34e>
 800adde:	2308      	movs	r3, #8
 800ade0:	77fb      	strb	r3, [r7, #31]
 800ade2:	e098      	b.n	800af16 <UART_SetConfig+0x34e>
 800ade4:	2310      	movs	r3, #16
 800ade6:	77fb      	strb	r3, [r7, #31]
 800ade8:	bf00      	nop
 800adea:	e094      	b.n	800af16 <UART_SetConfig+0x34e>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a39      	ldr	r2, [pc, #228]	; (800aed8 <UART_SetConfig+0x310>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d124      	bne.n	800ae40 <UART_SetConfig+0x278>
 800adf6:	4b33      	ldr	r3, [pc, #204]	; (800aec4 <UART_SetConfig+0x2fc>)
 800adf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae04:	d012      	beq.n	800ae2c <UART_SetConfig+0x264>
 800ae06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae0a:	d802      	bhi.n	800ae12 <UART_SetConfig+0x24a>
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d007      	beq.n	800ae20 <UART_SetConfig+0x258>
 800ae10:	e012      	b.n	800ae38 <UART_SetConfig+0x270>
 800ae12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae16:	d006      	beq.n	800ae26 <UART_SetConfig+0x25e>
 800ae18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae1c:	d009      	beq.n	800ae32 <UART_SetConfig+0x26a>
 800ae1e:	e00b      	b.n	800ae38 <UART_SetConfig+0x270>
 800ae20:	2301      	movs	r3, #1
 800ae22:	77fb      	strb	r3, [r7, #31]
 800ae24:	e077      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae26:	2302      	movs	r3, #2
 800ae28:	77fb      	strb	r3, [r7, #31]
 800ae2a:	e074      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	77fb      	strb	r3, [r7, #31]
 800ae30:	e071      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae32:	2308      	movs	r3, #8
 800ae34:	77fb      	strb	r3, [r7, #31]
 800ae36:	e06e      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae38:	2310      	movs	r3, #16
 800ae3a:	77fb      	strb	r3, [r7, #31]
 800ae3c:	bf00      	nop
 800ae3e:	e06a      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a25      	ldr	r2, [pc, #148]	; (800aedc <UART_SetConfig+0x314>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d124      	bne.n	800ae94 <UART_SetConfig+0x2cc>
 800ae4a:	4b1e      	ldr	r3, [pc, #120]	; (800aec4 <UART_SetConfig+0x2fc>)
 800ae4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae50:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae58:	d012      	beq.n	800ae80 <UART_SetConfig+0x2b8>
 800ae5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae5e:	d802      	bhi.n	800ae66 <UART_SetConfig+0x29e>
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <UART_SetConfig+0x2ac>
 800ae64:	e012      	b.n	800ae8c <UART_SetConfig+0x2c4>
 800ae66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae6a:	d006      	beq.n	800ae7a <UART_SetConfig+0x2b2>
 800ae6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae70:	d009      	beq.n	800ae86 <UART_SetConfig+0x2be>
 800ae72:	e00b      	b.n	800ae8c <UART_SetConfig+0x2c4>
 800ae74:	2300      	movs	r3, #0
 800ae76:	77fb      	strb	r3, [r7, #31]
 800ae78:	e04d      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	77fb      	strb	r3, [r7, #31]
 800ae7e:	e04a      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae80:	2304      	movs	r3, #4
 800ae82:	77fb      	strb	r3, [r7, #31]
 800ae84:	e047      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae86:	2308      	movs	r3, #8
 800ae88:	77fb      	strb	r3, [r7, #31]
 800ae8a:	e044      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae8c:	2310      	movs	r3, #16
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	bf00      	nop
 800ae92:	e040      	b.n	800af16 <UART_SetConfig+0x34e>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a11      	ldr	r2, [pc, #68]	; (800aee0 <UART_SetConfig+0x318>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d139      	bne.n	800af12 <UART_SetConfig+0x34a>
 800ae9e:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <UART_SetConfig+0x2fc>)
 800aea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeac:	d027      	beq.n	800aefe <UART_SetConfig+0x336>
 800aeae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeb2:	d817      	bhi.n	800aee4 <UART_SetConfig+0x31c>
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d01c      	beq.n	800aef2 <UART_SetConfig+0x32a>
 800aeb8:	e027      	b.n	800af0a <UART_SetConfig+0x342>
 800aeba:	bf00      	nop
 800aebc:	efff69f3 	.word	0xefff69f3
 800aec0:	40011000 	.word	0x40011000
 800aec4:	40023800 	.word	0x40023800
 800aec8:	40004400 	.word	0x40004400
 800aecc:	40004800 	.word	0x40004800
 800aed0:	40004c00 	.word	0x40004c00
 800aed4:	40005000 	.word	0x40005000
 800aed8:	40011400 	.word	0x40011400
 800aedc:	40007800 	.word	0x40007800
 800aee0:	40007c00 	.word	0x40007c00
 800aee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aee8:	d006      	beq.n	800aef8 <UART_SetConfig+0x330>
 800aeea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeee:	d009      	beq.n	800af04 <UART_SetConfig+0x33c>
 800aef0:	e00b      	b.n	800af0a <UART_SetConfig+0x342>
 800aef2:	2300      	movs	r3, #0
 800aef4:	77fb      	strb	r3, [r7, #31]
 800aef6:	e00e      	b.n	800af16 <UART_SetConfig+0x34e>
 800aef8:	2302      	movs	r3, #2
 800aefa:	77fb      	strb	r3, [r7, #31]
 800aefc:	e00b      	b.n	800af16 <UART_SetConfig+0x34e>
 800aefe:	2304      	movs	r3, #4
 800af00:	77fb      	strb	r3, [r7, #31]
 800af02:	e008      	b.n	800af16 <UART_SetConfig+0x34e>
 800af04:	2308      	movs	r3, #8
 800af06:	77fb      	strb	r3, [r7, #31]
 800af08:	e005      	b.n	800af16 <UART_SetConfig+0x34e>
 800af0a:	2310      	movs	r3, #16
 800af0c:	77fb      	strb	r3, [r7, #31]
 800af0e:	bf00      	nop
 800af10:	e001      	b.n	800af16 <UART_SetConfig+0x34e>
 800af12:	2310      	movs	r3, #16
 800af14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af1e:	d17f      	bne.n	800b020 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800af20:	7ffb      	ldrb	r3, [r7, #31]
 800af22:	2b08      	cmp	r3, #8
 800af24:	d85c      	bhi.n	800afe0 <UART_SetConfig+0x418>
 800af26:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <UART_SetConfig+0x364>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800af51 	.word	0x0800af51
 800af30:	0800af71 	.word	0x0800af71
 800af34:	0800af91 	.word	0x0800af91
 800af38:	0800afe1 	.word	0x0800afe1
 800af3c:	0800afa9 	.word	0x0800afa9
 800af40:	0800afe1 	.word	0x0800afe1
 800af44:	0800afe1 	.word	0x0800afe1
 800af48:	0800afe1 	.word	0x0800afe1
 800af4c:	0800afc9 	.word	0x0800afc9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af50:	f7fc fcfa 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 800af54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	005a      	lsls	r2, r3, #1
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	085b      	lsrs	r3, r3, #1
 800af60:	441a      	add	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	61bb      	str	r3, [r7, #24]
        break;
 800af6e:	e03a      	b.n	800afe6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af70:	f7fc fcfe 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 800af74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	005a      	lsls	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	085b      	lsrs	r3, r3, #1
 800af80:	441a      	add	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	61bb      	str	r3, [r7, #24]
        break;
 800af8e:	e02a      	b.n	800afe6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	085a      	lsrs	r2, r3, #1
 800af96:	4b5f      	ldr	r3, [pc, #380]	; (800b114 <UART_SetConfig+0x54c>)
 800af98:	4413      	add	r3, r2
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6852      	ldr	r2, [r2, #4]
 800af9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	61bb      	str	r3, [r7, #24]
        break;
 800afa6:	e01e      	b.n	800afe6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afa8:	f7fc fbea 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 800afac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	005a      	lsls	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	085b      	lsrs	r3, r3, #1
 800afb8:	441a      	add	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	61bb      	str	r3, [r7, #24]
        break;
 800afc6:	e00e      	b.n	800afe6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	085b      	lsrs	r3, r3, #1
 800afce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afda:	b29b      	uxth	r3, r3
 800afdc:	61bb      	str	r3, [r7, #24]
        break;
 800afde:	e002      	b.n	800afe6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	75fb      	strb	r3, [r7, #23]
        break;
 800afe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2b0f      	cmp	r3, #15
 800afea:	d916      	bls.n	800b01a <UART_SetConfig+0x452>
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff2:	d212      	bcs.n	800b01a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	f023 030f 	bic.w	r3, r3, #15
 800affc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	085b      	lsrs	r3, r3, #1
 800b002:	b29b      	uxth	r3, r3
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	b29a      	uxth	r2, r3
 800b00a:	897b      	ldrh	r3, [r7, #10]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	897a      	ldrh	r2, [r7, #10]
 800b016:	60da      	str	r2, [r3, #12]
 800b018:	e070      	b.n	800b0fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	75fb      	strb	r3, [r7, #23]
 800b01e:	e06d      	b.n	800b0fc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b020:	7ffb      	ldrb	r3, [r7, #31]
 800b022:	2b08      	cmp	r3, #8
 800b024:	d859      	bhi.n	800b0da <UART_SetConfig+0x512>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x464>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b051 	.word	0x0800b051
 800b030:	0800b06f 	.word	0x0800b06f
 800b034:	0800b08d 	.word	0x0800b08d
 800b038:	0800b0db 	.word	0x0800b0db
 800b03c:	0800b0a5 	.word	0x0800b0a5
 800b040:	0800b0db 	.word	0x0800b0db
 800b044:	0800b0db 	.word	0x0800b0db
 800b048:	0800b0db 	.word	0x0800b0db
 800b04c:	0800b0c3 	.word	0x0800b0c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b050:	f7fc fc7a 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 800b054:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	085a      	lsrs	r2, r3, #1
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	441a      	add	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	b29b      	uxth	r3, r3
 800b06a:	61bb      	str	r3, [r7, #24]
        break;
 800b06c:	e038      	b.n	800b0e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b06e:	f7fc fc7f 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 800b072:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	085a      	lsrs	r2, r3, #1
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	441a      	add	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	fbb2 f3f3 	udiv	r3, r2, r3
 800b086:	b29b      	uxth	r3, r3
 800b088:	61bb      	str	r3, [r7, #24]
        break;
 800b08a:	e029      	b.n	800b0e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	085a      	lsrs	r2, r3, #1
 800b092:	4b21      	ldr	r3, [pc, #132]	; (800b118 <UART_SetConfig+0x550>)
 800b094:	4413      	add	r3, r2
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	6852      	ldr	r2, [r2, #4]
 800b09a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	61bb      	str	r3, [r7, #24]
        break;
 800b0a2:	e01d      	b.n	800b0e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0a4:	f7fc fb6c 	bl	8007780 <HAL_RCC_GetSysClockFreq>
 800b0a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	085a      	lsrs	r2, r3, #1
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	441a      	add	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	61bb      	str	r3, [r7, #24]
        break;
 800b0c0:	e00e      	b.n	800b0e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	085b      	lsrs	r3, r3, #1
 800b0c8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	61bb      	str	r3, [r7, #24]
        break;
 800b0d8:	e002      	b.n	800b0e0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	75fb      	strb	r3, [r7, #23]
        break;
 800b0de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b0f      	cmp	r3, #15
 800b0e4:	d908      	bls.n	800b0f8 <UART_SetConfig+0x530>
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0ec:	d204      	bcs.n	800b0f8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	60da      	str	r2, [r3, #12]
 800b0f6:	e001      	b.n	800b0fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b108:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	01e84800 	.word	0x01e84800
 800b118:	00f42400 	.word	0x00f42400

0800b11c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00a      	beq.n	800b146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00a      	beq.n	800b18a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	f003 0308 	and.w	r3, r3, #8
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00a      	beq.n	800b1ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	430a      	orrs	r2, r1
 800b1aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	f003 0310 	and.w	r3, r3, #16
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00a      	beq.n	800b1ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	430a      	orrs	r2, r1
 800b1cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	f003 0320 	and.w	r3, r3, #32
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	430a      	orrs	r2, r1
 800b1ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d01a      	beq.n	800b232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	430a      	orrs	r2, r1
 800b210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b21a:	d10a      	bne.n	800b232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	430a      	orrs	r2, r1
 800b230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00a      	beq.n	800b254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	430a      	orrs	r2, r1
 800b252:	605a      	str	r2, [r3, #4]
  }
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af02      	add	r7, sp, #8
 800b266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b26e:	f7f9 fec1 	bl	8004ff4 <HAL_GetTick>
 800b272:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0308 	and.w	r3, r3, #8
 800b27e:	2b08      	cmp	r3, #8
 800b280:	d10e      	bne.n	800b2a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b282:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f814 	bl	800b2be <UART_WaitOnFlagUntilTimeout>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e00a      	b.n	800b2b6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	60f8      	str	r0, [r7, #12]
 800b2c6:	60b9      	str	r1, [r7, #8]
 800b2c8:	603b      	str	r3, [r7, #0]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ce:	e05d      	b.n	800b38c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d6:	d059      	beq.n	800b38c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2d8:	f7f9 fe8c 	bl	8004ff4 <HAL_GetTick>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	69ba      	ldr	r2, [r7, #24]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d302      	bcc.n	800b2ee <UART_WaitOnFlagUntilTimeout+0x30>
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d11b      	bne.n	800b326 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689a      	ldr	r2, [r3, #8]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f022 0201 	bic.w	r2, r2, #1
 800b30c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2220      	movs	r2, #32
 800b312:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2220      	movs	r2, #32
 800b318:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e042      	b.n	800b3ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 0304 	and.w	r3, r3, #4
 800b330:	2b00      	cmp	r3, #0
 800b332:	d02b      	beq.n	800b38c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b33e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b342:	d123      	bne.n	800b38c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b34c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b35c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	689a      	ldr	r2, [r3, #8]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f022 0201 	bic.w	r2, r2, #1
 800b36c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2220      	movs	r2, #32
 800b372:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2220      	movs	r2, #32
 800b378:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2220      	movs	r2, #32
 800b37e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e00f      	b.n	800b3ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	69da      	ldr	r2, [r3, #28]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	4013      	ands	r3, r2
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	429a      	cmp	r2, r3
 800b39a:	bf0c      	ite	eq
 800b39c:	2301      	moveq	r3, #1
 800b39e:	2300      	movne	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d092      	beq.n	800b2d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3c8:	2b22      	cmp	r3, #34	; 0x22
 800b3ca:	d13a      	bne.n	800b442 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3d4:	89bb      	ldrh	r3, [r7, #12]
 800b3d6:	b2d9      	uxtb	r1, r3
 800b3d8:	89fb      	ldrh	r3, [r7, #14]
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e0:	400a      	ands	r2, r1
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b408:	b29b      	uxth	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d121      	bne.n	800b452 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b41c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f022 0201 	bic.w	r2, r2, #1
 800b42c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7f8 faa2 	bl	8003984 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b440:	e007      	b.n	800b452 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	699a      	ldr	r2, [r3, #24]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f042 0208 	orr.w	r2, r2, #8
 800b450:	619a      	str	r2, [r3, #24]
}
 800b452:	bf00      	nop
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b084      	sub	sp, #16
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b468:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b46e:	2b22      	cmp	r3, #34	; 0x22
 800b470:	d13a      	bne.n	800b4e8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b478:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b47e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b480:	89ba      	ldrh	r2, [r7, #12]
 800b482:	89fb      	ldrh	r3, [r7, #14]
 800b484:	4013      	ands	r3, r2
 800b486:	b29a      	uxth	r2, r3
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b490:	1c9a      	adds	r2, r3, #2
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d121      	bne.n	800b4f8 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b4c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f022 0201 	bic.w	r2, r2, #1
 800b4d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7f8 fa4f 	bl	8003984 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4e6:	e007      	b.n	800b4f8 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699a      	ldr	r2, [r3, #24]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f042 0208 	orr.w	r2, r2, #8
 800b4f6:	619a      	str	r2, [r3, #24]
}
 800b4f8:	bf00      	nop
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b500:	b084      	sub	sp, #16
 800b502:	b480      	push	{r7}
 800b504:	b085      	sub	sp, #20
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	f107 001c 	add.w	r0, r7, #28
 800b50e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b516:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b518:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b51a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b51e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b522:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b526:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b52a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	4313      	orrs	r3, r2
 800b530:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	4b07      	ldr	r3, [pc, #28]	; (800b554 <SDMMC_Init+0x54>)
 800b538:	4013      	ands	r3, r2
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	431a      	orrs	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	b004      	add	sp, #16
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	ffff8100 	.word	0xffff8100

0800b558 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b566:	4618      	mov	r0, r3
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2203      	movs	r2, #3
 800b5a0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b5a2:	2002      	movs	r0, #2
 800b5a4:	f7f9 fd32 	bl	800500c <HAL_Delay>
  
  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 0303 	and.w	r3, r3, #3
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b5f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b5fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	4b06      	ldr	r3, [pc, #24]	; (800b620 <SDMMC_SendCommand+0x50>)
 800b608:	4013      	ands	r3, r2
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	431a      	orrs	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	fffff000 	.word	0xfffff000

0800b624 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	b2db      	uxtb	r3, r3
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b63e:	b480      	push	{r7}
 800b640:	b085      	sub	sp, #20
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3314      	adds	r3, #20
 800b64c:	461a      	mov	r2, r3
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	4413      	add	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
}  
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b68a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b690:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b696:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	431a      	orrs	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b6ae:	2300      	movs	r3, #0

}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b6ca:	2310      	movs	r3, #16
 800b6cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ce:	2340      	movs	r3, #64	; 0x40
 800b6d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6dc:	f107 0308 	add.w	r3, r7, #8
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff ff74 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ec:	2110      	movs	r1, #16
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa42 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3720      	adds	r7, #32
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b70e:	2311      	movs	r3, #17
 800b710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b712:	2340      	movs	r3, #64	; 0x40
 800b714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b71a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b71e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b720:	f107 0308 	add.w	r3, r7, #8
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff ff52 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b72c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b730:	2111      	movs	r1, #17
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fa20 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b73a:	69fb      	ldr	r3, [r7, #28]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3720      	adds	r7, #32
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b752:	2312      	movs	r3, #18
 800b754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b756:	2340      	movs	r3, #64	; 0x40
 800b758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b75a:	2300      	movs	r3, #0
 800b75c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b75e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b764:	f107 0308 	add.w	r3, r7, #8
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff ff30 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b770:	f241 3288 	movw	r2, #5000	; 0x1388
 800b774:	2112      	movs	r1, #18
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f9fe 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b77c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b77e:	69fb      	ldr	r3, [r7, #28]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b796:	2318      	movs	r3, #24
 800b798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7a8:	f107 0308 	add.w	r3, r7, #8
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff ff0e 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b7b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b8:	2118      	movs	r1, #24
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f9dc 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b7c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c2:	69fb      	ldr	r3, [r7, #28]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3720      	adds	r7, #32
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b7da:	2319      	movs	r3, #25
 800b7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7de:	2340      	movs	r3, #64	; 0x40
 800b7e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ec:	f107 0308 	add.w	r3, r7, #8
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff feec 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7fc:	2119      	movs	r1, #25
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f9ba 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b806:	69fb      	ldr	r3, [r7, #28]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b818:	2300      	movs	r3, #0
 800b81a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b81c:	230c      	movs	r3, #12
 800b81e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b820:	2340      	movs	r3, #64	; 0x40
 800b822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b82c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b82e:	f107 0308 	add.w	r3, r7, #8
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff fecb 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b83a:	4a05      	ldr	r2, [pc, #20]	; (800b850 <SDMMC_CmdStopTransfer+0x40>)
 800b83c:	210c      	movs	r1, #12
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f99a 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b846:	69fb      	ldr	r3, [r7, #28]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3720      	adds	r7, #32
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	05f5e100 	.word	0x05f5e100

0800b854 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b864:	2307      	movs	r3, #7
 800b866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b868:	2340      	movs	r3, #64	; 0x40
 800b86a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b86c:	2300      	movs	r3, #0
 800b86e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b874:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b876:	f107 0310 	add.w	r3, r7, #16
 800b87a:	4619      	mov	r1, r3
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f7ff fea7 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b882:	f241 3288 	movw	r2, #5000	; 0x1388
 800b886:	2107      	movs	r1, #7
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f975 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b88e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b892:	4618      	mov	r0, r3
 800b894:	3728      	adds	r7, #40	; 0x28
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b088      	sub	sp, #32
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8b8:	f107 0308 	add.w	r3, r7, #8
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff fe86 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f92f 	bl	800bb28 <SDMMC_GetCmdError>
 800b8ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3720      	adds	r7, #32
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b088      	sub	sp, #32
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b8de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b8e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b8e4:	2308      	movs	r3, #8
 800b8e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e8:	2340      	movs	r3, #64	; 0x40
 800b8ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8f6:	f107 0308 	add.w	r3, r7, #8
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff fe67 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fb18 	bl	800bf38 <SDMMC_GetCmdResp7>
 800b908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b90a:	69fb      	ldr	r3, [r7, #28]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3720      	adds	r7, #32
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b088      	sub	sp, #32
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b922:	2337      	movs	r3, #55	; 0x37
 800b924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b926:	2340      	movs	r3, #64	; 0x40
 800b928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b92a:	2300      	movs	r3, #0
 800b92c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b92e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b932:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b934:	f107 0308 	add.w	r3, r7, #8
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff fe48 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b940:	f241 3288 	movw	r2, #5000	; 0x1388
 800b944:	2137      	movs	r1, #55	; 0x37
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f916 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b94c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b94e:	69fb      	ldr	r3, [r7, #28]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3720      	adds	r7, #32
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	4b0d      	ldr	r3, [pc, #52]	; (800b99c <SDMMC_CmdAppOperCommand+0x44>)
 800b966:	4313      	orrs	r3, r2
 800b968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b96a:	2329      	movs	r3, #41	; 0x29
 800b96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b96e:	2340      	movs	r3, #64	; 0x40
 800b970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b972:	2300      	movs	r3, #0
 800b974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b97a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b97c:	f107 0308 	add.w	r3, r7, #8
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fe24 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fa27 	bl	800bddc <SDMMC_GetCmdResp3>
 800b98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b990:	69fb      	ldr	r3, [r7, #28]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	80100000 	.word	0x80100000

0800b9a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b9ae:	2306      	movs	r3, #6
 800b9b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9b2:	2340      	movs	r3, #64	; 0x40
 800b9b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9c0:	f107 0308 	add.w	r3, r7, #8
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff fe02 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d0:	2106      	movs	r1, #6
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f8d0 	bl	800bb78 <SDMMC_GetCmdResp1>
 800b9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9da:	69fb      	ldr	r3, [r7, #28]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b9f0:	2333      	movs	r3, #51	; 0x33
 800b9f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9f4:	2340      	movs	r3, #64	; 0x40
 800b9f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba02:	f107 0308 	add.w	r3, r7, #8
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff fde1 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ba0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba12:	2133      	movs	r1, #51	; 0x33
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f8af 	bl	800bb78 <SDMMC_GetCmdResp1>
 800ba1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba1c:	69fb      	ldr	r3, [r7, #28]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b088      	sub	sp, #32
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ba32:	2302      	movs	r3, #2
 800ba34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ba36:	23c0      	movs	r3, #192	; 0xc0
 800ba38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba44:	f107 0308 	add.w	r3, r7, #8
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff fdc0 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f97d 	bl	800bd50 <SDMMC_GetCmdResp2>
 800ba56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba58:	69fb      	ldr	r3, [r7, #28]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3720      	adds	r7, #32
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b088      	sub	sp, #32
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ba70:	2309      	movs	r3, #9
 800ba72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ba74:	23c0      	movs	r3, #192	; 0xc0
 800ba76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba82:	f107 0308 	add.w	r3, r7, #8
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff fda1 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f95e 	bl	800bd50 <SDMMC_GetCmdResp2>
 800ba94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba96:	69fb      	ldr	r3, [r7, #28]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800baae:	2303      	movs	r3, #3
 800bab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bab2:	2340      	movs	r3, #64	; 0x40
 800bab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bab6:	2300      	movs	r3, #0
 800bab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800babe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bac0:	f107 0308 	add.w	r3, r7, #8
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff fd82 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	2103      	movs	r1, #3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f9bd 	bl	800be50 <SDMMC_GetCmdResp6>
 800bad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bad8:	69fb      	ldr	r3, [r7, #28]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b088      	sub	sp, #32
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800baf0:	230d      	movs	r3, #13
 800baf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baf4:	2340      	movs	r3, #64	; 0x40
 800baf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff fd61 	bl	800b5d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bb0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb12:	210d      	movs	r1, #13
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f82f 	bl	800bb78 <SDMMC_GetCmdResp1>
 800bb1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3720      	adds	r7, #32
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
	...

0800bb28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bb28:	b490      	push	{r4, r7}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb30:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <SDMMC_GetCmdError+0x48>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a0f      	ldr	r2, [pc, #60]	; (800bb74 <SDMMC_GetCmdError+0x4c>)
 800bb36:	fba2 2303 	umull	r2, r3, r2, r3
 800bb3a:	0a5b      	lsrs	r3, r3, #9
 800bb3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb44:	4623      	mov	r3, r4
 800bb46:	1e5c      	subs	r4, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb50:	e009      	b.n	800bb66 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0f2      	beq.n	800bb44 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	22c5      	movs	r2, #197	; 0xc5
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bc90      	pop	{r4, r7}
 800bb6e:	4770      	bx	lr
 800bb70:	20000000 	.word	0x20000000
 800bb74:	10624dd3 	.word	0x10624dd3

0800bb78 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bb78:	b590      	push	{r4, r7, lr}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	460b      	mov	r3, r1
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bb86:	4b6f      	ldr	r3, [pc, #444]	; (800bd44 <SDMMC_GetCmdResp1+0x1cc>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a6f      	ldr	r2, [pc, #444]	; (800bd48 <SDMMC_GetCmdResp1+0x1d0>)
 800bb8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb90:	0a5b      	lsrs	r3, r3, #9
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb98:	4623      	mov	r3, r4
 800bb9a:	1e5c      	subs	r4, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d102      	bne.n	800bba6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bba0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bba4:	e0c9      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbaa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0f0      	beq.n	800bb98 <SDMMC_GetCmdResp1+0x20>
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1eb      	bne.n	800bb98 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d004      	beq.n	800bbd6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2204      	movs	r2, #4
 800bbd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbd2:	2304      	movs	r3, #4
 800bbd4:	e0b1      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d004      	beq.n	800bbec <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e0a6      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	22c5      	movs	r2, #197	; 0xc5
 800bbf0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff fd16 	bl	800b624 <SDMMC_GetCommandResponse>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d001      	beq.n	800bc06 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e099      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc06:	2100      	movs	r1, #0
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f7ff fd18 	bl	800b63e <SDMMC_GetResponse>
 800bc0e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4b4e      	ldr	r3, [pc, #312]	; (800bd4c <SDMMC_GetCmdResp1+0x1d4>)
 800bc14:	4013      	ands	r3, r2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d101      	bne.n	800bc1e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e08d      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	da02      	bge.n	800bc2a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bc24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc28:	e087      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bc34:	2340      	movs	r3, #64	; 0x40
 800bc36:	e080      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bc42:	2380      	movs	r3, #128	; 0x80
 800bc44:	e079      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bc50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc54:	e071      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bc60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc64:	e069      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bc70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc74:	e061      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d002      	beq.n	800bc86 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc84:	e059      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc94:	e051      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bca4:	e049      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bcb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bcb4:	e041      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bcc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcc4:	e039      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bcd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bcd4:	e031      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bce4:	e029      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bcf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcf4:	e021      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bd00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd04:	e019      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bd14:	e011      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bd20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bd24:	e009      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f003 0308 	and.w	r3, r3, #8
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bd30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bd34:	e001      	b.n	800bd3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	371c      	adds	r7, #28
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd90      	pop	{r4, r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20000000 	.word	0x20000000
 800bd48:	10624dd3 	.word	0x10624dd3
 800bd4c:	fdffe008 	.word	0xfdffe008

0800bd50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bd50:	b490      	push	{r4, r7}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd58:	4b1e      	ldr	r3, [pc, #120]	; (800bdd4 <SDMMC_GetCmdResp2+0x84>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a1e      	ldr	r2, [pc, #120]	; (800bdd8 <SDMMC_GetCmdResp2+0x88>)
 800bd5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd62:	0a5b      	lsrs	r3, r3, #9
 800bd64:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd6c:	4623      	mov	r3, r4
 800bd6e:	1e5c      	subs	r4, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d102      	bne.n	800bd7a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd78:	e026      	b.n	800bdc8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0f0      	beq.n	800bd6c <SDMMC_GetCmdResp2+0x1c>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1eb      	bne.n	800bd6c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d004      	beq.n	800bdaa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2204      	movs	r2, #4
 800bda4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bda6:	2304      	movs	r3, #4
 800bda8:	e00e      	b.n	800bdc8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d004      	beq.n	800bdc0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e003      	b.n	800bdc8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	22c5      	movs	r2, #197	; 0xc5
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3710      	adds	r7, #16
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bc90      	pop	{r4, r7}
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	20000000 	.word	0x20000000
 800bdd8:	10624dd3 	.word	0x10624dd3

0800bddc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bddc:	b490      	push	{r4, r7}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bde4:	4b18      	ldr	r3, [pc, #96]	; (800be48 <SDMMC_GetCmdResp3+0x6c>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a18      	ldr	r2, [pc, #96]	; (800be4c <SDMMC_GetCmdResp3+0x70>)
 800bdea:	fba2 2303 	umull	r2, r3, r2, r3
 800bdee:	0a5b      	lsrs	r3, r3, #9
 800bdf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bdf8:	4623      	mov	r3, r4
 800bdfa:	1e5c      	subs	r4, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be04:	e01b      	b.n	800be3e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0f0      	beq.n	800bdf8 <SDMMC_GetCmdResp3+0x1c>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1eb      	bne.n	800bdf8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d004      	beq.n	800be36 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2204      	movs	r2, #4
 800be30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be32:	2304      	movs	r3, #4
 800be34:	e003      	b.n	800be3e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	22c5      	movs	r2, #197	; 0xc5
 800be3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bc90      	pop	{r4, r7}
 800be46:	4770      	bx	lr
 800be48:	20000000 	.word	0x20000000
 800be4c:	10624dd3 	.word	0x10624dd3

0800be50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800be50:	b590      	push	{r4, r7, lr}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	460b      	mov	r3, r1
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be5e:	4b34      	ldr	r3, [pc, #208]	; (800bf30 <SDMMC_GetCmdResp6+0xe0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a34      	ldr	r2, [pc, #208]	; (800bf34 <SDMMC_GetCmdResp6+0xe4>)
 800be64:	fba2 2303 	umull	r2, r3, r2, r3
 800be68:	0a5b      	lsrs	r3, r3, #9
 800be6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be6e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be72:	4623      	mov	r3, r4
 800be74:	1e5c      	subs	r4, r3, #1
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be7e:	e052      	b.n	800bf26 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be84:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0f0      	beq.n	800be72 <SDMMC_GetCmdResp6+0x22>
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1eb      	bne.n	800be72 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d004      	beq.n	800beb0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2204      	movs	r2, #4
 800beaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beac:	2304      	movs	r3, #4
 800beae:	e03a      	b.n	800bf26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2201      	movs	r2, #1
 800bec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e02f      	b.n	800bf26 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f7ff fbac 	bl	800b624 <SDMMC_GetCommandResponse>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	7afb      	ldrb	r3, [r7, #11]
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d001      	beq.n	800beda <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e025      	b.n	800bf26 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	22c5      	movs	r2, #197	; 0xc5
 800bede:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bee0:	2100      	movs	r1, #0
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f7ff fbab 	bl	800b63e <SDMMC_GetResponse>
 800bee8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d106      	bne.n	800bf02 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	0c1b      	lsrs	r3, r3, #16
 800bef8:	b29a      	uxth	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800befe:	2300      	movs	r3, #0
 800bf00:	e011      	b.n	800bf26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf10:	e009      	b.n	800bf26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf20:	e001      	b.n	800bf26 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	371c      	adds	r7, #28
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd90      	pop	{r4, r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000000 	.word	0x20000000
 800bf34:	10624dd3 	.word	0x10624dd3

0800bf38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bf38:	b490      	push	{r4, r7}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf40:	4b21      	ldr	r3, [pc, #132]	; (800bfc8 <SDMMC_GetCmdResp7+0x90>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a21      	ldr	r2, [pc, #132]	; (800bfcc <SDMMC_GetCmdResp7+0x94>)
 800bf46:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4a:	0a5b      	lsrs	r3, r3, #9
 800bf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf54:	4623      	mov	r3, r4
 800bf56:	1e5c      	subs	r4, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf60:	e02c      	b.n	800bfbc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0f0      	beq.n	800bf54 <SDMMC_GetCmdResp7+0x1c>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1eb      	bne.n	800bf54 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d004      	beq.n	800bf92 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2204      	movs	r2, #4
 800bf8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf8e:	2304      	movs	r3, #4
 800bf90:	e014      	b.n	800bfbc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d004      	beq.n	800bfa8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e009      	b.n	800bfbc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2240      	movs	r2, #64	; 0x40
 800bfb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bfba:	2300      	movs	r3, #0
  
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bc90      	pop	{r4, r7}
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	20000000 	.word	0x20000000
 800bfcc:	10624dd3 	.word	0x10624dd3

0800bfd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	f107 001c 	add.w	r0, r7, #28
 800bfde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d120      	bne.n	800c02a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68da      	ldr	r2, [r3, #12]
 800bff8:	4b20      	ldr	r3, [pc, #128]	; (800c07c <USB_CoreInit+0xac>)
 800bffa:	4013      	ands	r3, r2
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d105      	bne.n	800c01e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 fac4 	bl	800d5ac <USB_CoreReset>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e010      	b.n	800c04c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f001 fab8 	bl	800d5ac <USB_CoreReset>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d10b      	bne.n	800c06a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f043 0206 	orr.w	r2, r3, #6
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f043 0220 	orr.w	r2, r3, #32
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c076:	b004      	add	sp, #16
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	ffbdffbf 	.word	0xffbdffbf

0800c080 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	4613      	mov	r3, r2
 800c08c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	2b02      	cmp	r3, #2
 800c092:	d165      	bne.n	800c160 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	4a41      	ldr	r2, [pc, #260]	; (800c19c <USB_SetTurnaroundTime+0x11c>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d906      	bls.n	800c0aa <USB_SetTurnaroundTime+0x2a>
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	4a40      	ldr	r2, [pc, #256]	; (800c1a0 <USB_SetTurnaroundTime+0x120>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d802      	bhi.n	800c0aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c0a4:	230f      	movs	r3, #15
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	e062      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	4a3c      	ldr	r2, [pc, #240]	; (800c1a0 <USB_SetTurnaroundTime+0x120>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d906      	bls.n	800c0c0 <USB_SetTurnaroundTime+0x40>
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	4a3b      	ldr	r2, [pc, #236]	; (800c1a4 <USB_SetTurnaroundTime+0x124>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d802      	bhi.n	800c0c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c0ba:	230e      	movs	r3, #14
 800c0bc:	617b      	str	r3, [r7, #20]
 800c0be:	e057      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	4a38      	ldr	r2, [pc, #224]	; (800c1a4 <USB_SetTurnaroundTime+0x124>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d906      	bls.n	800c0d6 <USB_SetTurnaroundTime+0x56>
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	4a37      	ldr	r2, [pc, #220]	; (800c1a8 <USB_SetTurnaroundTime+0x128>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d802      	bhi.n	800c0d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c0d0:	230d      	movs	r3, #13
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	e04c      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	4a33      	ldr	r2, [pc, #204]	; (800c1a8 <USB_SetTurnaroundTime+0x128>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d906      	bls.n	800c0ec <USB_SetTurnaroundTime+0x6c>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	4a32      	ldr	r2, [pc, #200]	; (800c1ac <USB_SetTurnaroundTime+0x12c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d802      	bhi.n	800c0ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c0e6:	230c      	movs	r3, #12
 800c0e8:	617b      	str	r3, [r7, #20]
 800c0ea:	e041      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	4a2f      	ldr	r2, [pc, #188]	; (800c1ac <USB_SetTurnaroundTime+0x12c>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d906      	bls.n	800c102 <USB_SetTurnaroundTime+0x82>
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	4a2e      	ldr	r2, [pc, #184]	; (800c1b0 <USB_SetTurnaroundTime+0x130>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d802      	bhi.n	800c102 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c0fc:	230b      	movs	r3, #11
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	e036      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	4a2a      	ldr	r2, [pc, #168]	; (800c1b0 <USB_SetTurnaroundTime+0x130>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d906      	bls.n	800c118 <USB_SetTurnaroundTime+0x98>
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	4a29      	ldr	r2, [pc, #164]	; (800c1b4 <USB_SetTurnaroundTime+0x134>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d802      	bhi.n	800c118 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c112:	230a      	movs	r3, #10
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	e02b      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	4a26      	ldr	r2, [pc, #152]	; (800c1b4 <USB_SetTurnaroundTime+0x134>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d906      	bls.n	800c12e <USB_SetTurnaroundTime+0xae>
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	4a25      	ldr	r2, [pc, #148]	; (800c1b8 <USB_SetTurnaroundTime+0x138>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d802      	bhi.n	800c12e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c128:	2309      	movs	r3, #9
 800c12a:	617b      	str	r3, [r7, #20]
 800c12c:	e020      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	4a21      	ldr	r2, [pc, #132]	; (800c1b8 <USB_SetTurnaroundTime+0x138>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d906      	bls.n	800c144 <USB_SetTurnaroundTime+0xc4>
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	4a20      	ldr	r2, [pc, #128]	; (800c1bc <USB_SetTurnaroundTime+0x13c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d802      	bhi.n	800c144 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c13e:	2308      	movs	r3, #8
 800c140:	617b      	str	r3, [r7, #20]
 800c142:	e015      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	4a1d      	ldr	r2, [pc, #116]	; (800c1bc <USB_SetTurnaroundTime+0x13c>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d906      	bls.n	800c15a <USB_SetTurnaroundTime+0xda>
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	4a1c      	ldr	r2, [pc, #112]	; (800c1c0 <USB_SetTurnaroundTime+0x140>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d802      	bhi.n	800c15a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c154:	2307      	movs	r3, #7
 800c156:	617b      	str	r3, [r7, #20]
 800c158:	e00a      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c15a:	2306      	movs	r3, #6
 800c15c:	617b      	str	r3, [r7, #20]
 800c15e:	e007      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c166:	2309      	movs	r3, #9
 800c168:	617b      	str	r3, [r7, #20]
 800c16a:	e001      	b.n	800c170 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c16c:	2309      	movs	r3, #9
 800c16e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	68da      	ldr	r2, [r3, #12]
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	029b      	lsls	r3, r3, #10
 800c184:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c188:	431a      	orrs	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	371c      	adds	r7, #28
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	00d8acbf 	.word	0x00d8acbf
 800c1a0:	00e4e1bf 	.word	0x00e4e1bf
 800c1a4:	00f423ff 	.word	0x00f423ff
 800c1a8:	0106737f 	.word	0x0106737f
 800c1ac:	011a499f 	.word	0x011a499f
 800c1b0:	01312cff 	.word	0x01312cff
 800c1b4:	014ca43f 	.word	0x014ca43f
 800c1b8:	016e35ff 	.word	0x016e35ff
 800c1bc:	01a6ab1f 	.word	0x01a6ab1f
 800c1c0:	01e847ff 	.word	0x01e847ff

0800c1c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f043 0201 	orr.w	r2, r3, #1
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f023 0201 	bic.w	r2, r3, #1
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d106      	bne.n	800c234 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	60da      	str	r2, [r3, #12]
 800c232:	e00b      	b.n	800c24c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	60da      	str	r2, [r3, #12]
 800c246:	e001      	b.n	800c24c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	e003      	b.n	800c254 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c24c:	2032      	movs	r0, #50	; 0x32
 800c24e:	f7f8 fedd 	bl	800500c <HAL_Delay>

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c25c:	b084      	sub	sp, #16
 800c25e:	b580      	push	{r7, lr}
 800c260:	b086      	sub	sp, #24
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c26a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c276:	2300      	movs	r3, #0
 800c278:	613b      	str	r3, [r7, #16]
 800c27a:	e009      	b.n	800c290 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	3340      	adds	r3, #64	; 0x40
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	2200      	movs	r2, #0
 800c288:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	3301      	adds	r3, #1
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	2b0e      	cmp	r3, #14
 800c294:	d9f2      	bls.n	800c27c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d11c      	bne.n	800c2d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2aa:	f043 0302 	orr.w	r3, r3, #2
 800c2ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	e005      	b.n	800c2e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	680b      	ldr	r3, [r1, #0]
 800c300:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	2b01      	cmp	r3, #1
 800c306:	d10c      	bne.n	800c322 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d104      	bne.n	800c318 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c30e:	2100      	movs	r1, #0
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f959 	bl	800c5c8 <USB_SetDevSpeed>
 800c316:	e018      	b.n	800c34a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c318:	2101      	movs	r1, #1
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f954 	bl	800c5c8 <USB_SetDevSpeed>
 800c320:	e013      	b.n	800c34a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	2b03      	cmp	r3, #3
 800c326:	d10c      	bne.n	800c342 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d104      	bne.n	800c338 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c32e:	2100      	movs	r1, #0
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f949 	bl	800c5c8 <USB_SetDevSpeed>
 800c336:	e008      	b.n	800c34a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c338:	2101      	movs	r1, #1
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f944 	bl	800c5c8 <USB_SetDevSpeed>
 800c340:	e003      	b.n	800c34a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c342:	2103      	movs	r1, #3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f93f 	bl	800c5c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c34a:	2110      	movs	r1, #16
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f8f3 	bl	800c538 <USB_FlushTxFifo>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f911 	bl	800c584 <USB_FlushRxFifo>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c372:	461a      	mov	r2, r3
 800c374:	2300      	movs	r3, #0
 800c376:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37e:	461a      	mov	r2, r3
 800c380:	2300      	movs	r3, #0
 800c382:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c38a:	461a      	mov	r2, r3
 800c38c:	2300      	movs	r3, #0
 800c38e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c390:	2300      	movs	r3, #0
 800c392:	613b      	str	r3, [r7, #16]
 800c394:	e043      	b.n	800c41e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	015a      	lsls	r2, r3, #5
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4413      	add	r3, r2
 800c39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3ac:	d118      	bne.n	800c3e0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10a      	bne.n	800c3ca <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	015a      	lsls	r2, r3, #5
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	e013      	b.n	800c3f2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	015a      	lsls	r2, r3, #5
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	e008      	b.n	800c3f2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	015a      	lsls	r2, r3, #5
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3fe:	461a      	mov	r2, r3
 800c400:	2300      	movs	r3, #0
 800c402:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c410:	461a      	mov	r2, r3
 800c412:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	3301      	adds	r3, #1
 800c41c:	613b      	str	r3, [r7, #16]
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	429a      	cmp	r2, r3
 800c424:	d3b7      	bcc.n	800c396 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c426:	2300      	movs	r3, #0
 800c428:	613b      	str	r3, [r7, #16]
 800c42a:	e043      	b.n	800c4b4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c43e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c442:	d118      	bne.n	800c476 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10a      	bne.n	800c460 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c456:	461a      	mov	r2, r3
 800c458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	e013      	b.n	800c488 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c46c:	461a      	mov	r2, r3
 800c46e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	e008      	b.n	800c488 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c482:	461a      	mov	r2, r3
 800c484:	2300      	movs	r3, #0
 800c486:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	015a      	lsls	r2, r3, #5
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4413      	add	r3, r2
 800c490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c494:	461a      	mov	r2, r3
 800c496:	2300      	movs	r3, #0
 800c498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	015a      	lsls	r2, r3, #5
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c4ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	613b      	str	r3, [r7, #16]
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d3b7      	bcc.n	800c42c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c4dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d105      	bne.n	800c4f0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	f043 0210 	orr.w	r2, r3, #16
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	699a      	ldr	r2, [r3, #24]
 800c4f4:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <USB_DevInit+0x2d4>)
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d005      	beq.n	800c50e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	f043 0208 	orr.w	r2, r3, #8
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c510:	2b01      	cmp	r3, #1
 800c512:	d105      	bne.n	800c520 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	699a      	ldr	r2, [r3, #24]
 800c518:	4b06      	ldr	r3, [pc, #24]	; (800c534 <USB_DevInit+0x2d8>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c520:	7dfb      	ldrb	r3, [r7, #23]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c52c:	b004      	add	sp, #16
 800c52e:	4770      	bx	lr
 800c530:	803c3800 	.word	0x803c3800
 800c534:	40000004 	.word	0x40000004

0800c538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	019b      	lsls	r3, r3, #6
 800c54a:	f043 0220 	orr.w	r2, r3, #32
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3301      	adds	r3, #1
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4a09      	ldr	r2, [pc, #36]	; (800c580 <USB_FlushTxFifo+0x48>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d901      	bls.n	800c564 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e006      	b.n	800c572 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	f003 0320 	and.w	r3, r3, #32
 800c56c:	2b20      	cmp	r3, #32
 800c56e:	d0f0      	beq.n	800c552 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	00030d40 	.word	0x00030d40

0800c584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2210      	movs	r2, #16
 800c594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3301      	adds	r3, #1
 800c59a:	60fb      	str	r3, [r7, #12]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4a09      	ldr	r2, [pc, #36]	; (800c5c4 <USB_FlushRxFifo+0x40>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d901      	bls.n	800c5a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e006      	b.n	800c5b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	f003 0310 	and.w	r3, r3, #16
 800c5b0:	2b10      	cmp	r3, #16
 800c5b2:	d0f0      	beq.n	800c596 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	00030d40 	.word	0x00030d40

0800c5c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b087      	sub	sp, #28
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	f003 0306 	and.w	r3, r3, #6
 800c612:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d102      	bne.n	800c620 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c61a:	2300      	movs	r3, #0
 800c61c:	75fb      	strb	r3, [r7, #23]
 800c61e:	e00a      	b.n	800c636 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b02      	cmp	r3, #2
 800c624:	d002      	beq.n	800c62c <USB_GetDevSpeed+0x32>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b06      	cmp	r3, #6
 800c62a:	d102      	bne.n	800c632 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c62c:	2302      	movs	r3, #2
 800c62e:	75fb      	strb	r3, [r7, #23]
 800c630:	e001      	b.n	800c636 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c632:	230f      	movs	r3, #15
 800c634:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c636:	7dfb      	ldrb	r3, [r7, #23]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	371c      	adds	r7, #28
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	785b      	ldrb	r3, [r3, #1]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d139      	bne.n	800c6d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c666:	69da      	ldr	r2, [r3, #28]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	f003 030f 	and.w	r3, r3, #15
 800c670:	2101      	movs	r1, #1
 800c672:	fa01 f303 	lsl.w	r3, r1, r3
 800c676:	b29b      	uxth	r3, r3
 800c678:	68f9      	ldr	r1, [r7, #12]
 800c67a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c67e:	4313      	orrs	r3, r2
 800c680:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	015a      	lsls	r2, r3, #5
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	4413      	add	r3, r2
 800c68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c694:	2b00      	cmp	r3, #0
 800c696:	d153      	bne.n	800c740 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	78db      	ldrb	r3, [r3, #3]
 800c6b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c6b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	059b      	lsls	r3, r3, #22
 800c6ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c6bc:	431a      	orrs	r2, r3
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	0159      	lsls	r1, r3, #5
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	440b      	add	r3, r1
 800c6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	4b20      	ldr	r3, [pc, #128]	; (800c750 <USB_ActivateEndpoint+0x10c>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	600b      	str	r3, [r1, #0]
 800c6d2:	e035      	b.n	800c740 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6da:	69da      	ldr	r2, [r3, #28]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	f003 030f 	and.w	r3, r3, #15
 800c6e4:	2101      	movs	r1, #1
 800c6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ea:	041b      	lsls	r3, r3, #16
 800c6ec:	68f9      	ldr	r1, [r7, #12]
 800c6ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	015a      	lsls	r2, r3, #5
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d119      	bne.n	800c740 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	015a      	lsls	r2, r3, #5
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	4413      	add	r3, r2
 800c714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	78db      	ldrb	r3, [r3, #3]
 800c726:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c728:	430b      	orrs	r3, r1
 800c72a:	431a      	orrs	r2, r3
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	0159      	lsls	r1, r3, #5
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	440b      	add	r3, r1
 800c734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c738:	4619      	mov	r1, r3
 800c73a:	4b05      	ldr	r3, [pc, #20]	; (800c750 <USB_ActivateEndpoint+0x10c>)
 800c73c:	4313      	orrs	r3, r2
 800c73e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	10008000 	.word	0x10008000

0800c754 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	785b      	ldrb	r3, [r3, #1]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d161      	bne.n	800c834 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	4413      	add	r3, r2
 800c778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c786:	d11f      	bne.n	800c7c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	015a      	lsls	r2, r3, #5
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	0151      	lsls	r1, r2, #5
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	440a      	add	r2, r1
 800c79e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	0151      	lsls	r1, r2, #5
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	440a      	add	r2, r1
 800c7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f003 030f 	and.w	r3, r3, #15
 800c7d8:	2101      	movs	r1, #1
 800c7da:	fa01 f303 	lsl.w	r3, r1, r3
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	43db      	mvns	r3, r3
 800c7e2:	68f9      	ldr	r1, [r7, #12]
 800c7e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f2:	69da      	ldr	r2, [r3, #28]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	f003 030f 	and.w	r3, r3, #15
 800c7fc:	2101      	movs	r1, #1
 800c7fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c802:	b29b      	uxth	r3, r3
 800c804:	43db      	mvns	r3, r3
 800c806:	68f9      	ldr	r1, [r7, #12]
 800c808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c80c:	4013      	ands	r3, r2
 800c80e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	0159      	lsls	r1, r3, #5
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	440b      	add	r3, r1
 800c826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82a:	4619      	mov	r1, r3
 800c82c:	4b35      	ldr	r3, [pc, #212]	; (800c904 <USB_DeactivateEndpoint+0x1b0>)
 800c82e:	4013      	ands	r3, r2
 800c830:	600b      	str	r3, [r1, #0]
 800c832:	e060      	b.n	800c8f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c84a:	d11f      	bne.n	800c88c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	015a      	lsls	r2, r3, #5
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	4413      	add	r3, r2
 800c854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	0151      	lsls	r1, r2, #5
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	440a      	add	r2, r1
 800c862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c86a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	0151      	lsls	r1, r2, #5
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	440a      	add	r2, r1
 800c882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c88a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	2101      	movs	r1, #1
 800c89e:	fa01 f303 	lsl.w	r3, r1, r3
 800c8a2:	041b      	lsls	r3, r3, #16
 800c8a4:	43db      	mvns	r3, r3
 800c8a6:	68f9      	ldr	r1, [r7, #12]
 800c8a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b6:	69da      	ldr	r2, [r3, #28]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	f003 030f 	and.w	r3, r3, #15
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8c6:	041b      	lsls	r3, r3, #16
 800c8c8:	43db      	mvns	r3, r3
 800c8ca:	68f9      	ldr	r1, [r7, #12]
 800c8cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	015a      	lsls	r2, r3, #5
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	4413      	add	r3, r2
 800c8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	0159      	lsls	r1, r3, #5
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	440b      	add	r3, r1
 800c8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	4b05      	ldr	r3, [pc, #20]	; (800c908 <USB_DeactivateEndpoint+0x1b4>)
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	ec337800 	.word	0xec337800
 800c908:	eff37800 	.word	0xeff37800

0800c90c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08a      	sub	sp, #40	; 0x28
 800c910:	af02      	add	r7, sp, #8
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4613      	mov	r3, r2
 800c918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	f040 8163 	bne.w	800cbf4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	695b      	ldr	r3, [r3, #20]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d132      	bne.n	800c99c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	015a      	lsls	r2, r3, #5
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	4413      	add	r3, r2
 800c93e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c942:	691a      	ldr	r2, [r3, #16]
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	0159      	lsls	r1, r3, #5
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	440b      	add	r3, r1
 800c94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c950:	4619      	mov	r1, r3
 800c952:	4ba5      	ldr	r3, [pc, #660]	; (800cbe8 <USB_EPStartXfer+0x2dc>)
 800c954:	4013      	ands	r3, r2
 800c956:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	015a      	lsls	r2, r3, #5
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	4413      	add	r3, r2
 800c960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	69ba      	ldr	r2, [r7, #24]
 800c968:	0151      	lsls	r1, r2, #5
 800c96a:	69fa      	ldr	r2, [r7, #28]
 800c96c:	440a      	add	r2, r1
 800c96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c976:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	015a      	lsls	r2, r3, #5
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	4413      	add	r3, r2
 800c980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c984:	691a      	ldr	r2, [r3, #16]
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	0159      	lsls	r1, r3, #5
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	440b      	add	r3, r1
 800c98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c992:	4619      	mov	r1, r3
 800c994:	4b95      	ldr	r3, [pc, #596]	; (800cbec <USB_EPStartXfer+0x2e0>)
 800c996:	4013      	ands	r3, r2
 800c998:	610b      	str	r3, [r1, #16]
 800c99a:	e074      	b.n	800ca86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a8:	691a      	ldr	r2, [r3, #16]
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	0159      	lsls	r1, r3, #5
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	440b      	add	r3, r1
 800c9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4b8c      	ldr	r3, [pc, #560]	; (800cbec <USB_EPStartXfer+0x2e0>)
 800c9ba:	4013      	ands	r3, r2
 800c9bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	015a      	lsls	r2, r3, #5
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ca:	691a      	ldr	r2, [r3, #16]
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	0159      	lsls	r1, r3, #5
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	440b      	add	r3, r1
 800c9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4b83      	ldr	r3, [pc, #524]	; (800cbe8 <USB_EPStartXfer+0x2dc>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ec:	691a      	ldr	r2, [r3, #16]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	6959      	ldr	r1, [r3, #20]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	440b      	add	r3, r1
 800c9f8:	1e59      	subs	r1, r3, #1
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800ca02:	04d9      	lsls	r1, r3, #19
 800ca04:	4b7a      	ldr	r3, [pc, #488]	; (800cbf0 <USB_EPStartXfer+0x2e4>)
 800ca06:	400b      	ands	r3, r1
 800ca08:	69b9      	ldr	r1, [r7, #24]
 800ca0a:	0148      	lsls	r0, r1, #5
 800ca0c:	69f9      	ldr	r1, [r7, #28]
 800ca0e:	4401      	add	r1, r0
 800ca10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ca14:	4313      	orrs	r3, r2
 800ca16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	015a      	lsls	r2, r3, #5
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	4413      	add	r3, r2
 800ca20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca24:	691a      	ldr	r2, [r3, #16]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca2e:	69b9      	ldr	r1, [r7, #24]
 800ca30:	0148      	lsls	r0, r1, #5
 800ca32:	69f9      	ldr	r1, [r7, #28]
 800ca34:	4401      	add	r1, r0
 800ca36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	78db      	ldrb	r3, [r3, #3]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d11f      	bne.n	800ca86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	015a      	lsls	r2, r3, #5
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	0151      	lsls	r1, r2, #5
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	440a      	add	r2, r1
 800ca5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ca64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	015a      	lsls	r2, r3, #5
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	69ba      	ldr	r2, [r7, #24]
 800ca76:	0151      	lsls	r1, r2, #5
 800ca78:	69fa      	ldr	r2, [r7, #28]
 800ca7a:	440a      	add	r2, r1
 800ca7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ca86:	79fb      	ldrb	r3, [r7, #7]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d14b      	bne.n	800cb24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d009      	beq.n	800caa8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caa0:	461a      	mov	r2, r3
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	78db      	ldrb	r3, [r3, #3]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d128      	bne.n	800cb02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d110      	bne.n	800cae2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	015a      	lsls	r2, r3, #5
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	4413      	add	r3, r2
 800cac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	69ba      	ldr	r2, [r7, #24]
 800cad0:	0151      	lsls	r1, r2, #5
 800cad2:	69fa      	ldr	r2, [r7, #28]
 800cad4:	440a      	add	r2, r1
 800cad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	e00f      	b.n	800cb02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	015a      	lsls	r2, r3, #5
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	4413      	add	r3, r2
 800caea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	0151      	lsls	r1, r2, #5
 800caf4:	69fa      	ldr	r2, [r7, #28]
 800caf6:	440a      	add	r2, r1
 800caf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cafc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	015a      	lsls	r2, r3, #5
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	4413      	add	r3, r2
 800cb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69ba      	ldr	r2, [r7, #24]
 800cb12:	0151      	lsls	r1, r2, #5
 800cb14:	69fa      	ldr	r2, [r7, #28]
 800cb16:	440a      	add	r2, r1
 800cb18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	e133      	b.n	800cd8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	015a      	lsls	r2, r3, #5
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	0151      	lsls	r1, r2, #5
 800cb36:	69fa      	ldr	r2, [r7, #28]
 800cb38:	440a      	add	r2, r1
 800cb3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	78db      	ldrb	r3, [r3, #3]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d015      	beq.n	800cb78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 811b 	beq.w	800cd8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	2101      	movs	r1, #1
 800cb68:	fa01 f303 	lsl.w	r3, r1, r3
 800cb6c:	69f9      	ldr	r1, [r7, #28]
 800cb6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb72:	4313      	orrs	r3, r2
 800cb74:	634b      	str	r3, [r1, #52]	; 0x34
 800cb76:	e109      	b.n	800cd8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d110      	bne.n	800cbaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cb88:	69bb      	ldr	r3, [r7, #24]
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	0151      	lsls	r1, r2, #5
 800cb9a:	69fa      	ldr	r2, [r7, #28]
 800cb9c:	440a      	add	r2, r1
 800cb9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	e00f      	b.n	800cbca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	69ba      	ldr	r2, [r7, #24]
 800cbba:	0151      	lsls	r1, r2, #5
 800cbbc:	69fa      	ldr	r2, [r7, #28]
 800cbbe:	440a      	add	r2, r1
 800cbc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbc8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	68d9      	ldr	r1, [r3, #12]
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	781a      	ldrb	r2, [r3, #0]
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	b298      	uxth	r0, r3
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	4603      	mov	r3, r0
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 fa38 	bl	800d054 <USB_WritePacket>
 800cbe4:	e0d2      	b.n	800cd8c <USB_EPStartXfer+0x480>
 800cbe6:	bf00      	nop
 800cbe8:	e007ffff 	.word	0xe007ffff
 800cbec:	fff80000 	.word	0xfff80000
 800cbf0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc00:	691a      	ldr	r2, [r3, #16]
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	0159      	lsls	r1, r3, #5
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	440b      	add	r3, r1
 800cc0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0e:	4619      	mov	r1, r3
 800cc10:	4b61      	ldr	r3, [pc, #388]	; (800cd98 <USB_EPStartXfer+0x48c>)
 800cc12:	4013      	ands	r3, r2
 800cc14:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	015a      	lsls	r2, r3, #5
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc22:	691a      	ldr	r2, [r3, #16]
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	0159      	lsls	r1, r3, #5
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	440b      	add	r3, r1
 800cc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc30:	4619      	mov	r1, r3
 800cc32:	4b5a      	ldr	r3, [pc, #360]	; (800cd9c <USB_EPStartXfer+0x490>)
 800cc34:	4013      	ands	r3, r2
 800cc36:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d123      	bne.n	800cc88 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc4c:	691a      	ldr	r2, [r3, #16]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc56:	69b9      	ldr	r1, [r7, #24]
 800cc58:	0148      	lsls	r0, r1, #5
 800cc5a:	69f9      	ldr	r1, [r7, #28]
 800cc5c:	4401      	add	r1, r0
 800cc5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc62:	4313      	orrs	r3, r2
 800cc64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	015a      	lsls	r2, r3, #5
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	0151      	lsls	r1, r2, #5
 800cc78:	69fa      	ldr	r2, [r7, #28]
 800cc7a:	440a      	add	r2, r1
 800cc7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc84:	6113      	str	r3, [r2, #16]
 800cc86:	e033      	b.n	800ccf0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	695a      	ldr	r2, [r3, #20]
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	4413      	add	r3, r2
 800cc92:	1e5a      	subs	r2, r3, #1
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	015a      	lsls	r2, r3, #5
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	4413      	add	r3, r2
 800cca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccaa:	691a      	ldr	r2, [r3, #16]
 800ccac:	8afb      	ldrh	r3, [r7, #22]
 800ccae:	04d9      	lsls	r1, r3, #19
 800ccb0:	4b3b      	ldr	r3, [pc, #236]	; (800cda0 <USB_EPStartXfer+0x494>)
 800ccb2:	400b      	ands	r3, r1
 800ccb4:	69b9      	ldr	r1, [r7, #24]
 800ccb6:	0148      	lsls	r0, r1, #5
 800ccb8:	69f9      	ldr	r1, [r7, #28]
 800ccba:	4401      	add	r1, r0
 800ccbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	015a      	lsls	r2, r3, #5
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	4413      	add	r3, r2
 800cccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd0:	691a      	ldr	r2, [r3, #16]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	8af9      	ldrh	r1, [r7, #22]
 800ccd8:	fb01 f303 	mul.w	r3, r1, r3
 800ccdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cce0:	69b9      	ldr	r1, [r7, #24]
 800cce2:	0148      	lsls	r0, r1, #5
 800cce4:	69f9      	ldr	r1, [r7, #28]
 800cce6:	4401      	add	r1, r0
 800cce8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ccec:	4313      	orrs	r3, r2
 800ccee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d10d      	bne.n	800cd12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d009      	beq.n	800cd12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	68d9      	ldr	r1, [r3, #12]
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	015a      	lsls	r2, r3, #5
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	4413      	add	r3, r2
 800cd0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0e:	460a      	mov	r2, r1
 800cd10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	78db      	ldrb	r3, [r3, #3]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d128      	bne.n	800cd6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d110      	bne.n	800cd4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	69ba      	ldr	r2, [r7, #24]
 800cd3a:	0151      	lsls	r1, r2, #5
 800cd3c:	69fa      	ldr	r2, [r7, #28]
 800cd3e:	440a      	add	r2, r1
 800cd40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	e00f      	b.n	800cd6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	015a      	lsls	r2, r3, #5
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	4413      	add	r3, r2
 800cd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	69ba      	ldr	r2, [r7, #24]
 800cd5c:	0151      	lsls	r1, r2, #5
 800cd5e:	69fa      	ldr	r2, [r7, #28]
 800cd60:	440a      	add	r2, r1
 800cd62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	015a      	lsls	r2, r3, #5
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	4413      	add	r3, r2
 800cd74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	69ba      	ldr	r2, [r7, #24]
 800cd7c:	0151      	lsls	r1, r2, #5
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	440a      	add	r2, r1
 800cd82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3720      	adds	r7, #32
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	fff80000 	.word	0xfff80000
 800cd9c:	e007ffff 	.word	0xe007ffff
 800cda0:	1ff80000 	.word	0x1ff80000

0800cda4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b087      	sub	sp, #28
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	785b      	ldrb	r3, [r3, #1]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	f040 80cd 	bne.w	800cf60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	695b      	ldr	r3, [r3, #20]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d132      	bne.n	800ce34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	015a      	lsls	r2, r3, #5
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdda:	691a      	ldr	r2, [r3, #16]
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	0159      	lsls	r1, r3, #5
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	440b      	add	r3, r1
 800cde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde8:	4619      	mov	r1, r3
 800cdea:	4b98      	ldr	r3, [pc, #608]	; (800d04c <USB_EP0StartXfer+0x2a8>)
 800cdec:	4013      	ands	r3, r2
 800cdee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	0151      	lsls	r1, r2, #5
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	440a      	add	r2, r1
 800ce06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	015a      	lsls	r2, r3, #5
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	4413      	add	r3, r2
 800ce18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce1c:	691a      	ldr	r2, [r3, #16]
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	0159      	lsls	r1, r3, #5
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	440b      	add	r3, r1
 800ce26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	4b88      	ldr	r3, [pc, #544]	; (800d050 <USB_EP0StartXfer+0x2ac>)
 800ce2e:	4013      	ands	r3, r2
 800ce30:	610b      	str	r3, [r1, #16]
 800ce32:	e04e      	b.n	800ced2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce40:	691a      	ldr	r2, [r3, #16]
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	0159      	lsls	r1, r3, #5
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	440b      	add	r3, r1
 800ce4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4e:	4619      	mov	r1, r3
 800ce50:	4b7f      	ldr	r3, [pc, #508]	; (800d050 <USB_EP0StartXfer+0x2ac>)
 800ce52:	4013      	ands	r3, r2
 800ce54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	015a      	lsls	r2, r3, #5
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce62:	691a      	ldr	r2, [r3, #16]
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	0159      	lsls	r1, r3, #5
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	440b      	add	r3, r1
 800ce6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce70:	4619      	mov	r1, r3
 800ce72:	4b76      	ldr	r3, [pc, #472]	; (800d04c <USB_EP0StartXfer+0x2a8>)
 800ce74:	4013      	ands	r3, r2
 800ce76:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	695a      	ldr	r2, [r3, #20]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d903      	bls.n	800ce8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	689a      	ldr	r2, [r3, #8]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	015a      	lsls	r2, r3, #5
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	4413      	add	r3, r2
 800ce94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	693a      	ldr	r2, [r7, #16]
 800ce9c:	0151      	lsls	r1, r2, #5
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	440a      	add	r2, r1
 800cea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ceaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	015a      	lsls	r2, r3, #5
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb8:	691a      	ldr	r2, [r3, #16]
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cec2:	6939      	ldr	r1, [r7, #16]
 800cec4:	0148      	lsls	r0, r1, #5
 800cec6:	6979      	ldr	r1, [r7, #20]
 800cec8:	4401      	add	r1, r0
 800ceca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cece:	4313      	orrs	r3, r2
 800ced0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ced2:	79fb      	ldrb	r3, [r7, #7]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d11e      	bne.n	800cf16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d009      	beq.n	800cef4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	015a      	lsls	r2, r3, #5
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceec:	461a      	mov	r2, r3
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	693a      	ldr	r2, [r7, #16]
 800cf04:	0151      	lsls	r1, r2, #5
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	440a      	add	r2, r1
 800cf0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf12:	6013      	str	r3, [r2, #0]
 800cf14:	e092      	b.n	800d03c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	015a      	lsls	r2, r3, #5
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	0151      	lsls	r1, r2, #5
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	440a      	add	r2, r1
 800cf2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d07e      	beq.n	800d03c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	f003 030f 	and.w	r3, r3, #15
 800cf4e:	2101      	movs	r1, #1
 800cf50:	fa01 f303 	lsl.w	r3, r1, r3
 800cf54:	6979      	ldr	r1, [r7, #20]
 800cf56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	634b      	str	r3, [r1, #52]	; 0x34
 800cf5e:	e06d      	b.n	800d03c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	015a      	lsls	r2, r3, #5
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	4413      	add	r3, r2
 800cf68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf6c:	691a      	ldr	r2, [r3, #16]
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	0159      	lsls	r1, r3, #5
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	440b      	add	r3, r1
 800cf76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4b34      	ldr	r3, [pc, #208]	; (800d050 <USB_EP0StartXfer+0x2ac>)
 800cf7e:	4013      	ands	r3, r2
 800cf80:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	015a      	lsls	r2, r3, #5
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	4413      	add	r3, r2
 800cf8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf8e:	691a      	ldr	r2, [r3, #16]
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	0159      	lsls	r1, r3, #5
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	440b      	add	r3, r1
 800cf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4b2b      	ldr	r3, [pc, #172]	; (800d04c <USB_EP0StartXfer+0x2a8>)
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	695b      	ldr	r3, [r3, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	689a      	ldr	r2, [r3, #8]
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	015a      	lsls	r2, r3, #5
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	4413      	add	r3, r2
 800cfbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	693a      	ldr	r2, [r7, #16]
 800cfc4:	0151      	lsls	r1, r2, #5
 800cfc6:	697a      	ldr	r2, [r7, #20]
 800cfc8:	440a      	add	r2, r1
 800cfca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe0:	691a      	ldr	r2, [r3, #16]
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfea:	6939      	ldr	r1, [r7, #16]
 800cfec:	0148      	lsls	r0, r1, #5
 800cfee:	6979      	ldr	r1, [r7, #20]
 800cff0:	4401      	add	r1, r0
 800cff2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cff6:	4313      	orrs	r3, r2
 800cff8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cffa:	79fb      	ldrb	r3, [r7, #7]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d10d      	bne.n	800d01c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d009      	beq.n	800d01c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	68d9      	ldr	r1, [r3, #12]
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	4413      	add	r3, r2
 800d014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d018:	460a      	mov	r2, r1
 800d01a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	015a      	lsls	r2, r3, #5
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	4413      	add	r3, r2
 800d024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	0151      	lsls	r1, r2, #5
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	440a      	add	r2, r1
 800d032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d03a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	e007ffff 	.word	0xe007ffff
 800d050:	fff80000 	.word	0xfff80000

0800d054 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d054:	b480      	push	{r7}
 800d056:	b089      	sub	sp, #36	; 0x24
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	4611      	mov	r1, r2
 800d060:	461a      	mov	r2, r3
 800d062:	460b      	mov	r3, r1
 800d064:	71fb      	strb	r3, [r7, #7]
 800d066:	4613      	mov	r3, r2
 800d068:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d076:	2b00      	cmp	r3, #0
 800d078:	d11a      	bne.n	800d0b0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d07a:	88bb      	ldrh	r3, [r7, #4]
 800d07c:	3303      	adds	r3, #3
 800d07e:	089b      	lsrs	r3, r3, #2
 800d080:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d082:	2300      	movs	r3, #0
 800d084:	61bb      	str	r3, [r7, #24]
 800d086:	e00f      	b.n	800d0a8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	031a      	lsls	r2, r3, #12
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	4413      	add	r3, r2
 800d090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d094:	461a      	mov	r2, r3
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	3304      	adds	r3, #4
 800d0a0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	61bb      	str	r3, [r7, #24]
 800d0a8:	69ba      	ldr	r2, [r7, #24]
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d3eb      	bcc.n	800d088 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3724      	adds	r7, #36	; 0x24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b089      	sub	sp, #36	; 0x24
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	60f8      	str	r0, [r7, #12]
 800d0c6:	60b9      	str	r1, [r7, #8]
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d0d4:	88fb      	ldrh	r3, [r7, #6]
 800d0d6:	3303      	adds	r3, #3
 800d0d8:	089b      	lsrs	r3, r3, #2
 800d0da:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d0dc:	2300      	movs	r3, #0
 800d0de:	61bb      	str	r3, [r7, #24]
 800d0e0:	e00b      	b.n	800d0fa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	601a      	str	r2, [r3, #0]
    pDest++;
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	61bb      	str	r3, [r7, #24]
 800d0fa:	69ba      	ldr	r2, [r7, #24]
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d3ef      	bcc.n	800d0e2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d102:	69fb      	ldr	r3, [r7, #28]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3724      	adds	r7, #36	; 0x24
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	785b      	ldrb	r3, [r3, #1]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d12c      	bne.n	800d186 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	015a      	lsls	r2, r3, #5
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	4413      	add	r3, r2
 800d134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	db12      	blt.n	800d164 <USB_EPSetStall+0x54>
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00f      	beq.n	800d164 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	0151      	lsls	r1, r2, #5
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	440a      	add	r2, r1
 800d15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d162:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	015a      	lsls	r2, r3, #5
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	4413      	add	r3, r2
 800d16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	0151      	lsls	r1, r2, #5
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	440a      	add	r2, r1
 800d17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	e02b      	b.n	800d1de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	db12      	blt.n	800d1be <USB_EPSetStall+0xae>
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00f      	beq.n	800d1be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	015a      	lsls	r2, r3, #5
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	0151      	lsls	r1, r2, #5
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	440a      	add	r2, r1
 800d1b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	015a      	lsls	r2, r3, #5
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	0151      	lsls	r1, r2, #5
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	440a      	add	r2, r1
 800d1d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3714      	adds	r7, #20
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	785b      	ldrb	r3, [r3, #1]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d128      	bne.n	800d25a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	015a      	lsls	r2, r3, #5
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	4413      	add	r3, r2
 800d210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	0151      	lsls	r1, r2, #5
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	440a      	add	r2, r1
 800d21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d222:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d226:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	78db      	ldrb	r3, [r3, #3]
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d003      	beq.n	800d238 <USB_EPClearStall+0x4c>
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	78db      	ldrb	r3, [r3, #3]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d138      	bne.n	800d2aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	015a      	lsls	r2, r3, #5
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	4413      	add	r3, r2
 800d240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68ba      	ldr	r2, [r7, #8]
 800d248:	0151      	lsls	r1, r2, #5
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	440a      	add	r2, r1
 800d24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	e027      	b.n	800d2aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	0151      	lsls	r1, r2, #5
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	440a      	add	r2, r1
 800d270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d278:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	78db      	ldrb	r3, [r3, #3]
 800d27e:	2b03      	cmp	r3, #3
 800d280:	d003      	beq.n	800d28a <USB_EPClearStall+0x9e>
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	78db      	ldrb	r3, [r3, #3]
 800d286:	2b02      	cmp	r3, #2
 800d288:	d10f      	bne.n	800d2aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4413      	add	r3, r2
 800d292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	0151      	lsls	r1, r2, #5
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	440a      	add	r2, r1
 800d2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d2da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	78fb      	ldrb	r3, [r7, #3]
 800d2e6:	011b      	lsls	r3, r3, #4
 800d2e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d2ec:	68f9      	ldr	r1, [r7, #12]
 800d2ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d31e:	f023 0302 	bic.w	r3, r3, #2
 800d322:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d324:	2003      	movs	r0, #3
 800d326:	f7f7 fe71 	bl	800500c <HAL_Delay>

  return HAL_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d34e:	f043 0302 	orr.w	r3, r3, #2
 800d352:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d354:	2003      	movs	r0, #3
 800d356:	f7f7 fe59 	bl	800500c <HAL_Delay>

  return HAL_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d364:	b480      	push	{r7}
 800d366:	b085      	sub	sp, #20
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	4013      	ands	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d37c:	68fb      	ldr	r3, [r7, #12]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b085      	sub	sp, #20
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a6:	69db      	ldr	r3, [r3, #28]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	0c1b      	lsrs	r3, r3, #16
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3da:	69db      	ldr	r3, [r3, #28]
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	4013      	ands	r3, r2
 800d3e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	b29b      	uxth	r3, r3
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	b085      	sub	sp, #20
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d402:	78fb      	ldrb	r3, [r7, #3]
 800d404:	015a      	lsls	r2, r3, #5
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	4413      	add	r3, r2
 800d40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	68ba      	ldr	r2, [r7, #8]
 800d41c:	4013      	ands	r3, r2
 800d41e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d420:	68bb      	ldr	r3, [r7, #8]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d42e:	b480      	push	{r7}
 800d430:	b087      	sub	sp, #28
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
 800d436:	460b      	mov	r3, r1
 800d438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d450:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d452:	78fb      	ldrb	r3, [r7, #3]
 800d454:	f003 030f 	and.w	r3, r3, #15
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	fa22 f303 	lsr.w	r3, r2, r3
 800d45e:	01db      	lsls	r3, r3, #7
 800d460:	b2db      	uxtb	r3, r3
 800d462:	693a      	ldr	r2, [r7, #16]
 800d464:	4313      	orrs	r3, r2
 800d466:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d468:	78fb      	ldrb	r3, [r7, #3]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	4013      	ands	r3, r2
 800d47a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d47c:	68bb      	ldr	r3, [r7, #8]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	371c      	adds	r7, #28
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	f003 0301 	and.w	r3, r3, #1
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	370c      	adds	r7, #12
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
	...

0800d4a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <USB_ActivateSetup+0x44>)
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	fffff800 	.word	0xfffff800

0800d4f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	333c      	adds	r3, #60	; 0x3c
 800d506:	3304      	adds	r3, #4
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	4a26      	ldr	r2, [pc, #152]	; (800d5a8 <USB_EP0_OutStart+0xb8>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d90a      	bls.n	800d52a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d524:	d101      	bne.n	800d52a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d526:	2300      	movs	r3, #0
 800d528:	e037      	b.n	800d59a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d530:	461a      	mov	r2, r3
 800d532:	2300      	movs	r3, #0
 800d534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d558:	f043 0318 	orr.w	r3, r3, #24
 800d55c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d56c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d570:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d572:	7afb      	ldrb	r3, [r7, #11]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d10f      	bne.n	800d598 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d57e:	461a      	mov	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d592:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	371c      	adds	r7, #28
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	4f54300a 	.word	0x4f54300a

0800d5ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	4a13      	ldr	r2, [pc, #76]	; (800d610 <USB_CoreReset+0x64>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d901      	bls.n	800d5ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	e01b      	b.n	800d602 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	daf2      	bge.n	800d5b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	f043 0201 	orr.w	r2, r3, #1
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4a09      	ldr	r2, [pc, #36]	; (800d610 <USB_CoreReset+0x64>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d901      	bls.n	800d5f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e006      	b.n	800d602 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	f003 0301 	and.w	r3, r3, #1
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d0f0      	beq.n	800d5e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	00030d40 	.word	0x00030d40

0800d614 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d614:	b580      	push	{r7, lr}
 800d616:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d618:	4904      	ldr	r1, [pc, #16]	; (800d62c <MX_FATFS_Init+0x18>)
 800d61a:	4805      	ldr	r0, [pc, #20]	; (800d630 <MX_FATFS_Init+0x1c>)
 800d61c:	f004 fd8e 	bl	801213c <FATFS_LinkDriver>
 800d620:	4603      	mov	r3, r0
 800d622:	461a      	mov	r2, r3
 800d624:	4b03      	ldr	r3, [pc, #12]	; (800d634 <MX_FATFS_Init+0x20>)
 800d626:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d628:	bf00      	nop
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20015348 	.word	0x20015348
 800d630:	0801a13c 	.word	0x0801a13c
 800d634:	20015344 	.word	0x20015344

0800d638 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d638:	b480      	push	{r7}
 800d63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d63c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800d63e:	4618      	mov	r0, r3
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d652:	f000 f896 	bl	800d782 <BSP_SD_IsDetected>
 800d656:	4603      	mov	r3, r0
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d001      	beq.n	800d660 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d65c:	2302      	movs	r3, #2
 800d65e:	e012      	b.n	800d686 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d660:	480b      	ldr	r0, [pc, #44]	; (800d690 <BSP_SD_Init+0x48>)
 800d662:	f7fa fd81 	bl	8008168 <HAL_SD_Init>
 800d666:	4603      	mov	r3, r0
 800d668:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d109      	bne.n	800d684 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d674:	4806      	ldr	r0, [pc, #24]	; (800d690 <BSP_SD_Init+0x48>)
 800d676:	f7fb fb39 	bl	8008cec <HAL_SD_ConfigWideBusOperation>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d684:	79fb      	ldrb	r3, [r7, #7]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	200089c8 	.word	0x200089c8

0800d694 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	68f9      	ldr	r1, [r7, #12]
 800d6aa:	4806      	ldr	r0, [pc, #24]	; (800d6c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d6ac:	f7fa fdf4 	bl	8008298 <HAL_SD_ReadBlocks_DMA>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	200089c8 	.word	0x200089c8

0800d6c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	68f9      	ldr	r1, [r7, #12]
 800d6de:	4806      	ldr	r0, [pc, #24]	; (800d6f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d6e0:	f7fa fec6 	bl	8008470 <HAL_SD_WriteBlocks_DMA>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3718      	adds	r7, #24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	200089c8 	.word	0x200089c8

0800d6fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d700:	4805      	ldr	r0, [pc, #20]	; (800d718 <BSP_SD_GetCardState+0x1c>)
 800d702:	f7fb fb6f 	bl	8008de4 <HAL_SD_GetCardState>
 800d706:	4603      	mov	r3, r0
 800d708:	2b04      	cmp	r3, #4
 800d70a:	bf14      	ite	ne
 800d70c:	2301      	movne	r3, #1
 800d70e:	2300      	moveq	r3, #0
 800d710:	b2db      	uxtb	r3, r3
}
 800d712:	4618      	mov	r0, r3
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	200089c8 	.word	0x200089c8

0800d71c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d724:	6879      	ldr	r1, [r7, #4]
 800d726:	4803      	ldr	r0, [pc, #12]	; (800d734 <BSP_SD_GetCardInfo+0x18>)
 800d728:	f7fb fab4 	bl	8008c94 <HAL_SD_GetCardInfo>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	200089c8 	.word	0x200089c8

0800d738 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d740:	f000 f818 	bl	800d774 <BSP_SD_AbortCallback>
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d754:	f000 f998 	bl	800da88 <BSP_SD_WriteCpltCallback>
}
 800d758:	bf00      	nop
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d768:	f000 f9a0 	bl	800daac <BSP_SD_ReadCpltCallback>
}
 800d76c:	bf00      	nop
 800d76e:	3708      	adds	r7, #8
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d774:	b480      	push	{r7}
 800d776:	af00      	add	r7, sp, #0

}
 800d778:	bf00      	nop
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d788:	2301      	movs	r3, #1
 800d78a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d78c:	79fb      	ldrb	r3, [r7, #7]
 800d78e:	b2db      	uxtb	r3, r3
}
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800d7a4:	f004 fdb4 	bl	8012310 <osKernelGetTickCount>
 800d7a8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800d7aa:	e006      	b.n	800d7ba <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7ac:	f7ff ffa6 	bl	800d6fc <BSP_SD_GetCardState>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d101      	bne.n	800d7ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	e009      	b.n	800d7ce <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800d7ba:	f004 fda9 	bl	8012310 <osKernelGetTickCount>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d8f0      	bhi.n	800d7ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d7ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
	...

0800d7d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d7e2:	4b0b      	ldr	r3, [pc, #44]	; (800d810 <SD_CheckStatus+0x38>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7e8:	f7ff ff88 	bl	800d6fc <BSP_SD_GetCardState>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d107      	bne.n	800d802 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d7f2:	4b07      	ldr	r3, [pc, #28]	; (800d810 <SD_CheckStatus+0x38>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	f023 0301 	bic.w	r3, r3, #1
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	4b04      	ldr	r3, [pc, #16]	; (800d810 <SD_CheckStatus+0x38>)
 800d800:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d802:	4b03      	ldr	r3, [pc, #12]	; (800d810 <SD_CheckStatus+0x38>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	b2db      	uxtb	r3, r3
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	20000009 	.word	0x20000009

0800d814 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800d81e:	4b1c      	ldr	r3, [pc, #112]	; (800d890 <SD_initialize+0x7c>)
 800d820:	2201      	movs	r2, #1
 800d822:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800d824:	f004 fd1c 	bl	8012260 <osKernelGetState>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d129      	bne.n	800d882 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d82e:	f7ff ff0b 	bl	800d648 <BSP_SD_Init>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d107      	bne.n	800d848 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff ffcc 	bl	800d7d8 <SD_CheckStatus>
 800d840:	4603      	mov	r3, r0
 800d842:	461a      	mov	r2, r3
 800d844:	4b12      	ldr	r3, [pc, #72]	; (800d890 <SD_initialize+0x7c>)
 800d846:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d848:	4b11      	ldr	r3, [pc, #68]	; (800d890 <SD_initialize+0x7c>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d017      	beq.n	800d882 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800d852:	4b10      	ldr	r3, [pc, #64]	; (800d894 <SD_initialize+0x80>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d107      	bne.n	800d86a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800d85a:	2200      	movs	r2, #0
 800d85c:	2102      	movs	r1, #2
 800d85e:	200a      	movs	r0, #10
 800d860:	f005 f9a6 	bl	8012bb0 <osMessageQueueNew>
 800d864:	4602      	mov	r2, r0
 800d866:	4b0b      	ldr	r3, [pc, #44]	; (800d894 <SD_initialize+0x80>)
 800d868:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800d86a:	4b0a      	ldr	r3, [pc, #40]	; (800d894 <SD_initialize+0x80>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d107      	bne.n	800d882 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800d872:	4b07      	ldr	r3, [pc, #28]	; (800d890 <SD_initialize+0x7c>)
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	f043 0301 	orr.w	r3, r3, #1
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	4b04      	ldr	r3, [pc, #16]	; (800d890 <SD_initialize+0x7c>)
 800d880:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d882:	4b03      	ldr	r3, [pc, #12]	; (800d890 <SD_initialize+0x7c>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	b2db      	uxtb	r3, r3
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	20000009 	.word	0x20000009
 800d894:	2000032c 	.word	0x2000032c

0800d898 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d8a2:	79fb      	ldrb	r3, [r7, #7]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff ff97 	bl	800d7d8 <SD_CheckStatus>
 800d8aa:	4603      	mov	r3, r0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60b9      	str	r1, [r7, #8]
 800d8bc:	607a      	str	r2, [r7, #4]
 800d8be:	603b      	str	r3, [r7, #0]
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d8c8:	f247 5030 	movw	r0, #30000	; 0x7530
 800d8cc:	f7ff ff66 	bl	800d79c <SD_CheckStatusWithTimeout>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	da01      	bge.n	800d8da <SD_read+0x26>
  {
    return res;
 800d8d6:	7ffb      	ldrb	r3, [r7, #31]
 800d8d8:	e02f      	b.n	800d93a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	68b8      	ldr	r0, [r7, #8]
 800d8e0:	f7ff fed8 	bl	800d694 <BSP_SD_ReadBlocks_DMA>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800d8e8:	7fbb      	ldrb	r3, [r7, #30]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d124      	bne.n	800d938 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d8ee:	4b15      	ldr	r3, [pc, #84]	; (800d944 <SD_read+0x90>)
 800d8f0:	6818      	ldr	r0, [r3, #0]
 800d8f2:	f107 0112 	add.w	r1, r7, #18
 800d8f6:	f247 5330 	movw	r3, #30000	; 0x7530
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f005 fa52 	bl	8012da4 <osMessageQueueGet>
 800d900:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d117      	bne.n	800d938 <SD_read+0x84>
 800d908:	8a7b      	ldrh	r3, [r7, #18]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d114      	bne.n	800d938 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800d90e:	f004 fcff 	bl	8012310 <osKernelGetTickCount>
 800d912:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d914:	e007      	b.n	800d926 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d916:	f7ff fef1 	bl	800d6fc <BSP_SD_GetCardState>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d102      	bne.n	800d926 <SD_read+0x72>
              {
                res = RES_OK;
 800d920:	2300      	movs	r3, #0
 800d922:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d924:	e008      	b.n	800d938 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d926:	f004 fcf3 	bl	8012310 <osKernelGetTickCount>
 800d92a:	4602      	mov	r2, r0
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	f247 522f 	movw	r2, #29999	; 0x752f
 800d934:	4293      	cmp	r3, r2
 800d936:	d9ee      	bls.n	800d916 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d938:	7ffb      	ldrb	r3, [r7, #31]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3720      	adds	r7, #32
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	2000032c 	.word	0x2000032c

0800d948 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	607a      	str	r2, [r7, #4]
 800d952:	603b      	str	r3, [r7, #0]
 800d954:	4603      	mov	r3, r0
 800d956:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d958:	2301      	movs	r3, #1
 800d95a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d95c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d960:	f7ff ff1c 	bl	800d79c <SD_CheckStatusWithTimeout>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	da01      	bge.n	800d96e <SD_write+0x26>
  {
    return res;
 800d96a:	7ffb      	ldrb	r3, [r7, #31]
 800d96c:	e02d      	b.n	800d9ca <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	68b8      	ldr	r0, [r7, #8]
 800d974:	f7ff fea8 	bl	800d6c8 <BSP_SD_WriteBlocks_DMA>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d124      	bne.n	800d9c8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d97e:	4b15      	ldr	r3, [pc, #84]	; (800d9d4 <SD_write+0x8c>)
 800d980:	6818      	ldr	r0, [r3, #0]
 800d982:	f107 0112 	add.w	r1, r7, #18
 800d986:	f247 5330 	movw	r3, #30000	; 0x7530
 800d98a:	2200      	movs	r2, #0
 800d98c:	f005 fa0a 	bl	8012da4 <osMessageQueueGet>
 800d990:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d117      	bne.n	800d9c8 <SD_write+0x80>
 800d998:	8a7b      	ldrh	r3, [r7, #18]
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d114      	bne.n	800d9c8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800d99e:	f004 fcb7 	bl	8012310 <osKernelGetTickCount>
 800d9a2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800d9a4:	e007      	b.n	800d9b6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d9a6:	f7ff fea9 	bl	800d6fc <BSP_SD_GetCardState>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d102      	bne.n	800d9b6 <SD_write+0x6e>
          {
            res = RES_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	77fb      	strb	r3, [r7, #31]
            break;
 800d9b4:	e008      	b.n	800d9c8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800d9b6:	f004 fcab 	bl	8012310 <osKernelGetTickCount>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d9ee      	bls.n	800d9a6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800d9c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3720      	adds	r7, #32
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	2000032c 	.word	0x2000032c

0800d9d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08c      	sub	sp, #48	; 0x30
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	603a      	str	r2, [r7, #0]
 800d9e2:	71fb      	strb	r3, [r7, #7]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d9ee:	4b25      	ldr	r3, [pc, #148]	; (800da84 <SD_ioctl+0xac>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <SD_ioctl+0x28>
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e03c      	b.n	800da7a <SD_ioctl+0xa2>

  switch (cmd)
 800da00:	79bb      	ldrb	r3, [r7, #6]
 800da02:	2b03      	cmp	r3, #3
 800da04:	d834      	bhi.n	800da70 <SD_ioctl+0x98>
 800da06:	a201      	add	r2, pc, #4	; (adr r2, 800da0c <SD_ioctl+0x34>)
 800da08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da0c:	0800da1d 	.word	0x0800da1d
 800da10:	0800da25 	.word	0x0800da25
 800da14:	0800da3d 	.word	0x0800da3d
 800da18:	0800da57 	.word	0x0800da57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da22:	e028      	b.n	800da76 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800da24:	f107 030c 	add.w	r3, r7, #12
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff fe77 	bl	800d71c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800da2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800da34:	2300      	movs	r3, #0
 800da36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da3a:	e01c      	b.n	800da76 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800da3c:	f107 030c 	add.w	r3, r7, #12
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff fe6b 	bl	800d71c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	b29a      	uxth	r2, r3
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800da4e:	2300      	movs	r3, #0
 800da50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da54:	e00f      	b.n	800da76 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800da56:	f107 030c 	add.w	r3, r7, #12
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff fe5e 	bl	800d71c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	0a5a      	lsrs	r2, r3, #9
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da6e:	e002      	b.n	800da76 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800da70:	2304      	movs	r3, #4
 800da72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800da76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3730      	adds	r7, #48	; 0x30
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	20000009 	.word	0x20000009

0800da88 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800da8e:	2302      	movs	r3, #2
 800da90:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800da92:	4b05      	ldr	r3, [pc, #20]	; (800daa8 <BSP_SD_WriteCpltCallback+0x20>)
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	1db9      	adds	r1, r7, #6
 800da98:	2300      	movs	r3, #0
 800da9a:	2200      	movs	r2, #0
 800da9c:	f005 f90e 	bl	8012cbc <osMessageQueuePut>
#endif
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	2000032c 	.word	0x2000032c

0800daac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800dab2:	2301      	movs	r3, #1
 800dab4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800dab6:	4b05      	ldr	r3, [pc, #20]	; (800dacc <BSP_SD_ReadCpltCallback+0x20>)
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	1db9      	adds	r1, r7, #6
 800dabc:	2300      	movs	r3, #0
 800dabe:	2200      	movs	r2, #0
 800dac0:	f005 f8fc 	bl	8012cbc <osMessageQueuePut>
#endif
}
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	2000032c 	.word	0x2000032c

0800dad0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dadc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dae0:	f009 f95e 	bl	8016da0 <malloc>
 800dae4:	4603      	mov	r3, r0
 800dae6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d105      	bne.n	800dafa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800daf6:	2302      	movs	r3, #2
 800daf8:	e066      	b.n	800dbc8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	7c1b      	ldrb	r3, [r3, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d119      	bne.n	800db3e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800db0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db0e:	2202      	movs	r2, #2
 800db10:	2181      	movs	r1, #129	; 0x81
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f008 ff77 	bl	8016a06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800db1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db22:	2202      	movs	r2, #2
 800db24:	2101      	movs	r1, #1
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f008 ff6d 	bl	8016a06 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2210      	movs	r2, #16
 800db38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800db3c:	e016      	b.n	800db6c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	2202      	movs	r2, #2
 800db42:	2181      	movs	r1, #129	; 0x81
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f008 ff5e 	bl	8016a06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2201      	movs	r2, #1
 800db4e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800db50:	2340      	movs	r3, #64	; 0x40
 800db52:	2202      	movs	r2, #2
 800db54:	2101      	movs	r1, #1
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f008 ff55 	bl	8016a06 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2210      	movs	r2, #16
 800db68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800db6c:	2308      	movs	r3, #8
 800db6e:	2203      	movs	r2, #3
 800db70:	2182      	movs	r1, #130	; 0x82
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f008 ff47 	bl	8016a06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	7c1b      	ldrb	r3, [r3, #16]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d109      	bne.n	800dbb6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbac:	2101      	movs	r1, #1
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f009 f818 	bl	8016be4 <USBD_LL_PrepareReceive>
 800dbb4:	e007      	b.n	800dbc6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dbbc:	2340      	movs	r3, #64	; 0x40
 800dbbe:	2101      	movs	r1, #1
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f009 f80f 	bl	8016be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dbe0:	2181      	movs	r1, #129	; 0x81
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f008 ff35 	bl	8016a52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dbee:	2101      	movs	r1, #1
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f008 ff2e 	bl	8016a52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dbfe:	2182      	movs	r1, #130	; 0x82
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f008 ff26 	bl	8016a52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00e      	beq.n	800dc3e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc30:	4618      	mov	r0, r3
 800dc32:	f009 f8bd 	bl	8016db0 <free>
    pdev->pClassData = NULL;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc58:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d03a      	beq.n	800dce8 <USBD_CDC_Setup+0xa0>
 800dc72:	2b20      	cmp	r3, #32
 800dc74:	f040 8097 	bne.w	800dda6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	88db      	ldrh	r3, [r3, #6]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d029      	beq.n	800dcd4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	b25b      	sxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	da11      	bge.n	800dcae <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800dc96:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	88d2      	ldrh	r2, [r2, #6]
 800dc9c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dc9e:	6939      	ldr	r1, [r7, #16]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	88db      	ldrh	r3, [r3, #6]
 800dca4:	461a      	mov	r2, r3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f001 fac7 	bl	800f23a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800dcac:	e082      	b.n	800ddb4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	785a      	ldrb	r2, [r3, #1]
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	88db      	ldrh	r3, [r3, #6]
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dcc4:	6939      	ldr	r1, [r7, #16]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	88db      	ldrh	r3, [r3, #6]
 800dcca:	461a      	mov	r2, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f001 fae0 	bl	800f292 <USBD_CtlPrepareRx>
    break;
 800dcd2:	e06f      	b.n	800ddb4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	683a      	ldr	r2, [r7, #0]
 800dcde:	7850      	ldrb	r0, [r2, #1]
 800dce0:	2200      	movs	r2, #0
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	4798      	blx	r3
    break;
 800dce6:	e065      	b.n	800ddb4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	785b      	ldrb	r3, [r3, #1]
 800dcec:	2b0b      	cmp	r3, #11
 800dcee:	d84f      	bhi.n	800dd90 <USBD_CDC_Setup+0x148>
 800dcf0:	a201      	add	r2, pc, #4	; (adr r2, 800dcf8 <USBD_CDC_Setup+0xb0>)
 800dcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf6:	bf00      	nop
 800dcf8:	0800dd29 	.word	0x0800dd29
 800dcfc:	0800dd9f 	.word	0x0800dd9f
 800dd00:	0800dd91 	.word	0x0800dd91
 800dd04:	0800dd91 	.word	0x0800dd91
 800dd08:	0800dd91 	.word	0x0800dd91
 800dd0c:	0800dd91 	.word	0x0800dd91
 800dd10:	0800dd91 	.word	0x0800dd91
 800dd14:	0800dd91 	.word	0x0800dd91
 800dd18:	0800dd91 	.word	0x0800dd91
 800dd1c:	0800dd91 	.word	0x0800dd91
 800dd20:	0800dd51 	.word	0x0800dd51
 800dd24:	0800dd79 	.word	0x0800dd79
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d107      	bne.n	800dd42 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dd32:	f107 030c 	add.w	r3, r7, #12
 800dd36:	2202      	movs	r2, #2
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f001 fa7d 	bl	800f23a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd40:	e030      	b.n	800dda4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f001 fa07 	bl	800f158 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd4a:	2303      	movs	r3, #3
 800dd4c:	75fb      	strb	r3, [r7, #23]
      break;
 800dd4e:	e029      	b.n	800dda4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd56:	2b03      	cmp	r3, #3
 800dd58:	d107      	bne.n	800dd6a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dd5a:	f107 030f 	add.w	r3, r7, #15
 800dd5e:	2201      	movs	r2, #1
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f001 fa69 	bl	800f23a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd68:	e01c      	b.n	800dda4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 f9f3 	bl	800f158 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd72:	2303      	movs	r3, #3
 800dd74:	75fb      	strb	r3, [r7, #23]
      break;
 800dd76:	e015      	b.n	800dda4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd7e:	2b03      	cmp	r3, #3
 800dd80:	d00f      	beq.n	800dda2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800dd82:	6839      	ldr	r1, [r7, #0]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f001 f9e7 	bl	800f158 <USBD_CtlError>
        ret = USBD_FAIL;
 800dd8a:	2303      	movs	r3, #3
 800dd8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800dd8e:	e008      	b.n	800dda2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800dd90:	6839      	ldr	r1, [r7, #0]
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f001 f9e0 	bl	800f158 <USBD_CtlError>
      ret = USBD_FAIL;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	75fb      	strb	r3, [r7, #23]
      break;
 800dd9c:	e002      	b.n	800dda4 <USBD_CDC_Setup+0x15c>
      break;
 800dd9e:	bf00      	nop
 800dda0:	e008      	b.n	800ddb4 <USBD_CDC_Setup+0x16c>
      break;
 800dda2:	bf00      	nop
    }
    break;
 800dda4:	e006      	b.n	800ddb4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800dda6:	6839      	ldr	r1, [r7, #0]
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f001 f9d5 	bl	800f158 <USBD_CtlError>
    ret = USBD_FAIL;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	75fb      	strb	r3, [r7, #23]
    break;
 800ddb2:	bf00      	nop
  }

  return (uint8_t)ret;
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3718      	adds	r7, #24
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop

0800ddc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ddd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ddde:	2303      	movs	r3, #3
 800dde0:	e049      	b.n	800de76 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dde8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ddea:	78fa      	ldrb	r2, [r7, #3]
 800ddec:	6879      	ldr	r1, [r7, #4]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	4413      	add	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	440b      	add	r3, r1
 800ddf8:	3318      	adds	r3, #24
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d029      	beq.n	800de54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800de00:	78fa      	ldrb	r2, [r7, #3]
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	4613      	mov	r3, r2
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	440b      	add	r3, r1
 800de0e:	3318      	adds	r3, #24
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	78f9      	ldrb	r1, [r7, #3]
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	460b      	mov	r3, r1
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	1a5b      	subs	r3, r3, r1
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4403      	add	r3, r0
 800de20:	3344      	adds	r3, #68	; 0x44
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	fbb2 f1f3 	udiv	r1, r2, r3
 800de28:	fb03 f301 	mul.w	r3, r3, r1
 800de2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d110      	bne.n	800de54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800de32:	78fa      	ldrb	r2, [r7, #3]
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	4613      	mov	r3, r2
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4413      	add	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	440b      	add	r3, r1
 800de40:	3318      	adds	r3, #24
 800de42:	2200      	movs	r2, #0
 800de44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800de46:	78f9      	ldrb	r1, [r7, #3]
 800de48:	2300      	movs	r3, #0
 800de4a:	2200      	movs	r2, #0
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f008 fea8 	bl	8016ba2 <USBD_LL_Transmit>
 800de52:	e00f      	b.n	800de74 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2200      	movs	r2, #0
 800de58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800de70:	78fa      	ldrb	r2, [r7, #3]
 800de72:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b084      	sub	sp, #16
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	460b      	mov	r3, r1
 800de88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d101      	bne.n	800dea0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800de9c:	2303      	movs	r3, #3
 800de9e:	e015      	b.n	800decc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dea0:	78fb      	ldrb	r3, [r7, #3]
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f008 febe 	bl	8016c26 <USBD_LL_GetRxDataSize>
 800deaa:	4602      	mov	r2, r0
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dec6:	4611      	mov	r1, r2
 800dec8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dee2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d015      	beq.n	800df1a <USBD_CDC_EP0_RxReady+0x46>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800def4:	2bff      	cmp	r3, #255	; 0xff
 800def6:	d010      	beq.n	800df1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800df06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800df0e:	b292      	uxth	r2, r2
 800df10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	22ff      	movs	r2, #255	; 0xff
 800df16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2243      	movs	r2, #67	; 0x43
 800df30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800df32:	4b03      	ldr	r3, [pc, #12]	; (800df40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800df34:	4618      	mov	r0, r3
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	20000094 	.word	0x20000094

0800df44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2243      	movs	r2, #67	; 0x43
 800df50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800df52:	4b03      	ldr	r3, [pc, #12]	; (800df60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800df54:	4618      	mov	r0, r3
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	20000050 	.word	0x20000050

0800df64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2243      	movs	r2, #67	; 0x43
 800df70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800df72:	4b03      	ldr	r3, [pc, #12]	; (800df80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800df74:	4618      	mov	r0, r3
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	200000d8 	.word	0x200000d8

0800df84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	220a      	movs	r2, #10
 800df90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800df92:	4b03      	ldr	r3, [pc, #12]	; (800dfa0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	2000000c 	.word	0x2000000c

0800dfa4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e004      	b.n	800dfc2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b087      	sub	sp, #28
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	60f8      	str	r0, [r7, #12]
 800dfd6:	60b9      	str	r1, [r7, #8]
 800dfd8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfe0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	371c      	adds	r7, #28
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e000:	b480      	push	{r7}
 800e002:	b085      	sub	sp, #20
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e010:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e036:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e038:	2301      	movs	r3, #1
 800e03a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e046:	2303      	movs	r3, #3
 800e048:	e01a      	b.n	800e080 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e050:	2b00      	cmp	r3, #0
 800e052:	d114      	bne.n	800e07e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	2201      	movs	r2, #1
 800e058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e072:	2181      	movs	r1, #129	; 0x81
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f008 fd94 	bl	8016ba2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e096:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d101      	bne.n	800e0a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e016      	b.n	800e0d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7c1b      	ldrb	r3, [r3, #16]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d109      	bne.n	800e0c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e0b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f008 fd92 	bl	8016be4 <USBD_LL_PrepareReceive>
 800e0c0:	e007      	b.n	800e0d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e0c8:	2340      	movs	r3, #64	; 0x40
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f008 fd89 	bl	8016be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e0d2:	2300      	movs	r3, #0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b086      	sub	sp, #24
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	e025      	b.n	800e140 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d003      	beq.n	800e106 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d003      	beq.n	800e118 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2200      	movs	r2, #0
 800e114:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d003      	beq.n	800e126 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	79fa      	ldrb	r2, [r7, #7]
 800e132:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f008 fbff 	bl	8016938 <USBD_LL_Init>
 800e13a:	4603      	mov	r3, r0
 800e13c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e152:	2300      	movs	r3, #0
 800e154:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d101      	bne.n	800e160 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e15c:	2303      	movs	r3, #3
 800e15e:	e010      	b.n	800e182 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	683a      	ldr	r2, [r7, #0]
 800e164:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e170:	f107 020e 	add.w	r2, r7, #14
 800e174:	4610      	mov	r0, r2
 800e176:	4798      	blx	r3
 800e178:	4602      	mov	r2, r0
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b082      	sub	sp, #8
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f008 fc1c 	bl	80169d0 <USBD_LL_Start>
 800e198:	4603      	mov	r3, r0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	b083      	sub	sp, #12
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d009      	beq.n	800e1e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	78fa      	ldrb	r2, [r7, #3]
 800e1dc:	4611      	mov	r1, r2
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	4798      	blx	r3
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3710      	adds	r7, #16
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	78fa      	ldrb	r2, [r7, #3]
 800e210:	4611      	mov	r1, r2
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	4798      	blx	r3
  }

  return USBD_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	4618      	mov	r0, r3
 800e234:	f000 ff56 	bl	800f0e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e246:	461a      	mov	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e254:	f003 031f 	and.w	r3, r3, #31
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d00e      	beq.n	800e27a <USBD_LL_SetupStage+0x5a>
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d302      	bcc.n	800e266 <USBD_LL_SetupStage+0x46>
 800e260:	2b02      	cmp	r3, #2
 800e262:	d014      	beq.n	800e28e <USBD_LL_SetupStage+0x6e>
 800e264:	e01d      	b.n	800e2a2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e26c:	4619      	mov	r1, r3
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa18 	bl	800e6a4 <USBD_StdDevReq>
 800e274:	4603      	mov	r3, r0
 800e276:	73fb      	strb	r3, [r7, #15]
      break;
 800e278:	e020      	b.n	800e2bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 fa7c 	bl	800e780 <USBD_StdItfReq>
 800e288:	4603      	mov	r3, r0
 800e28a:	73fb      	strb	r3, [r7, #15]
      break;
 800e28c:	e016      	b.n	800e2bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e294:	4619      	mov	r1, r3
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fab8 	bl	800e80c <USBD_StdEPReq>
 800e29c:	4603      	mov	r3, r0
 800e29e:	73fb      	strb	r3, [r7, #15]
      break;
 800e2a0:	e00c      	b.n	800e2bc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e2a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f008 fbed 	bl	8016a90 <USBD_LL_StallEP>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800e2ba:	bf00      	nop
  }

  return ret;
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b086      	sub	sp, #24
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	607a      	str	r2, [r7, #4]
 800e2d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e2d4:	7afb      	ldrb	r3, [r7, #11]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d137      	bne.n	800e34a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e2e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d14a      	bne.n	800e382 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	689a      	ldr	r2, [r3, #8]
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d913      	bls.n	800e320 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	689a      	ldr	r2, [r3, #8]
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	1ad2      	subs	r2, r2, r3
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	68da      	ldr	r2, [r3, #12]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	4293      	cmp	r3, r2
 800e310:	bf28      	it	cs
 800e312:	4613      	movcs	r3, r2
 800e314:	461a      	mov	r2, r3
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f000 ffd7 	bl	800f2cc <USBD_CtlContinueRx>
 800e31e:	e030      	b.n	800e382 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00a      	beq.n	800e342 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e332:	2b03      	cmp	r3, #3
 800e334:	d105      	bne.n	800e342 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 ffd3 	bl	800f2ee <USBD_CtlSendStatus>
 800e348:	e01b      	b.n	800e382 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e350:	699b      	ldr	r3, [r3, #24]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d013      	beq.n	800e37e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	d10e      	bne.n	800e37e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e366:	699b      	ldr	r3, [r3, #24]
 800e368:	7afa      	ldrb	r2, [r7, #11]
 800e36a:	4611      	mov	r1, r2
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	4798      	blx	r3
 800e370:	4603      	mov	r3, r0
 800e372:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e374:	7dfb      	ldrb	r3, [r7, #23]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d003      	beq.n	800e382 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e37a:	7dfb      	ldrb	r3, [r7, #23]
 800e37c:	e002      	b.n	800e384 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e37e:	2303      	movs	r3, #3
 800e380:	e000      	b.n	800e384 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3718      	adds	r7, #24
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	460b      	mov	r3, r1
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e39a:	7afb      	ldrb	r3, [r7, #11]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d16a      	bne.n	800e476 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	3314      	adds	r3, #20
 800e3a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d155      	bne.n	800e45c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	689a      	ldr	r2, [r3, #8]
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d914      	bls.n	800e3e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	689a      	ldr	r2, [r3, #8]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	1ad2      	subs	r2, r2, r3
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	6879      	ldr	r1, [r7, #4]
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f000 ff4c 	bl	800f270 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3d8:	2300      	movs	r3, #0
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2100      	movs	r1, #0
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f008 fc00 	bl	8016be4 <USBD_LL_PrepareReceive>
 800e3e4:	e03a      	b.n	800e45c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	68da      	ldr	r2, [r3, #12]
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d11c      	bne.n	800e42c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	685a      	ldr	r2, [r3, #4]
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d316      	bcc.n	800e42c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	685a      	ldr	r2, [r3, #4]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e408:	429a      	cmp	r2, r3
 800e40a:	d20f      	bcs.n	800e42c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e40c:	2200      	movs	r2, #0
 800e40e:	2100      	movs	r1, #0
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f000 ff2d 	bl	800f270 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2200      	movs	r2, #0
 800e41a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e41e:	2300      	movs	r3, #0
 800e420:	2200      	movs	r2, #0
 800e422:	2100      	movs	r1, #0
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f008 fbdd 	bl	8016be4 <USBD_LL_PrepareReceive>
 800e42a:	e017      	b.n	800e45c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d00a      	beq.n	800e44e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d105      	bne.n	800e44e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e44e:	2180      	movs	r1, #128	; 0x80
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f008 fb1d 	bl	8016a90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 ff5c 	bl	800f314 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e462:	2b01      	cmp	r3, #1
 800e464:	d123      	bne.n	800e4ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f7ff fe9b 	bl	800e1a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2200      	movs	r2, #0
 800e470:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e474:	e01b      	b.n	800e4ae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e47c:	695b      	ldr	r3, [r3, #20]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d013      	beq.n	800e4aa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e488:	2b03      	cmp	r3, #3
 800e48a:	d10e      	bne.n	800e4aa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	7afa      	ldrb	r2, [r7, #11]
 800e496:	4611      	mov	r1, r2
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	4798      	blx	r3
 800e49c:	4603      	mov	r3, r0
 800e49e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e4a6:	7dfb      	ldrb	r3, [r7, #23]
 800e4a8:	e002      	b.n	800e4b0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	e000      	b.n	800e4b0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d009      	beq.n	800e4fc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	6852      	ldr	r2, [r2, #4]
 800e4f4:	b2d2      	uxtb	r2, r2
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e4fc:	2340      	movs	r3, #64	; 0x40
 800e4fe:	2200      	movs	r2, #0
 800e500:	2100      	movs	r1, #0
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f008 fa7f 	bl	8016a06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2240      	movs	r2, #64	; 0x40
 800e514:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e518:	2340      	movs	r3, #64	; 0x40
 800e51a:	2200      	movs	r2, #0
 800e51c:	2180      	movs	r1, #128	; 0x80
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f008 fa71 	bl	8016a06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2240      	movs	r2, #64	; 0x40
 800e52e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b083      	sub	sp, #12
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	460b      	mov	r3, r1
 800e544:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	78fa      	ldrb	r2, [r7, #3]
 800e54a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	370c      	adds	r7, #12
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e55a:	b480      	push	{r7}
 800e55c:	b083      	sub	sp, #12
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2204      	movs	r2, #4
 800e572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e576:	2300      	movs	r3, #0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e592:	2b04      	cmp	r3, #4
 800e594:	d105      	bne.n	800e5a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5be:	2b03      	cmp	r3, #3
 800e5c0:	d10b      	bne.n	800e5da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5c8:	69db      	ldr	r3, [r3, #28]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d005      	beq.n	800e5da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5d4:	69db      	ldr	r3, [r3, #28]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	460b      	mov	r3, r1
 800e608:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b082      	sub	sp, #8
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e644:	2b00      	cmp	r3, #0
 800e646:	d009      	beq.n	800e65c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	6852      	ldr	r2, [r2, #4]
 800e654:	b2d2      	uxtb	r2, r2
 800e656:	4611      	mov	r1, r2
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	4798      	blx	r3
  }

  return USBD_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e666:	b480      	push	{r7}
 800e668:	b087      	sub	sp, #28
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	3301      	adds	r3, #1
 800e67c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e684:	8a3b      	ldrh	r3, [r7, #16]
 800e686:	021b      	lsls	r3, r3, #8
 800e688:	b21a      	sxth	r2, r3
 800e68a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e68e:	4313      	orrs	r3, r2
 800e690:	b21b      	sxth	r3, r3
 800e692:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e694:	89fb      	ldrh	r3, [r7, #14]
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
	...

0800e6a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e6ba:	2b20      	cmp	r3, #32
 800e6bc:	d004      	beq.n	800e6c8 <USBD_StdDevReq+0x24>
 800e6be:	2b40      	cmp	r3, #64	; 0x40
 800e6c0:	d002      	beq.n	800e6c8 <USBD_StdDevReq+0x24>
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00a      	beq.n	800e6dc <USBD_StdDevReq+0x38>
 800e6c6:	e050      	b.n	800e76a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	4798      	blx	r3
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e6da:	e04b      	b.n	800e774 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	785b      	ldrb	r3, [r3, #1]
 800e6e0:	2b09      	cmp	r3, #9
 800e6e2:	d83c      	bhi.n	800e75e <USBD_StdDevReq+0xba>
 800e6e4:	a201      	add	r2, pc, #4	; (adr r2, 800e6ec <USBD_StdDevReq+0x48>)
 800e6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ea:	bf00      	nop
 800e6ec:	0800e741 	.word	0x0800e741
 800e6f0:	0800e755 	.word	0x0800e755
 800e6f4:	0800e75f 	.word	0x0800e75f
 800e6f8:	0800e74b 	.word	0x0800e74b
 800e6fc:	0800e75f 	.word	0x0800e75f
 800e700:	0800e71f 	.word	0x0800e71f
 800e704:	0800e715 	.word	0x0800e715
 800e708:	0800e75f 	.word	0x0800e75f
 800e70c:	0800e737 	.word	0x0800e737
 800e710:	0800e729 	.word	0x0800e729
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800e714:	6839      	ldr	r1, [r7, #0]
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f9ce 	bl	800eab8 <USBD_GetDescriptor>
      break;
 800e71c:	e024      	b.n	800e768 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 fb5d 	bl	800ede0 <USBD_SetAddress>
      break;
 800e726:	e01f      	b.n	800e768 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 fb9a 	bl	800ee64 <USBD_SetConfig>
 800e730:	4603      	mov	r3, r0
 800e732:	73fb      	strb	r3, [r7, #15]
      break;
 800e734:	e018      	b.n	800e768 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fc37 	bl	800efac <USBD_GetConfig>
      break;
 800e73e:	e013      	b.n	800e768 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 fc66 	bl	800f014 <USBD_GetStatus>
      break;
 800e748:	e00e      	b.n	800e768 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800e74a:	6839      	ldr	r1, [r7, #0]
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 fc94 	bl	800f07a <USBD_SetFeature>
      break;
 800e752:	e009      	b.n	800e768 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 fca3 	bl	800f0a2 <USBD_ClrFeature>
      break;
 800e75c:	e004      	b.n	800e768 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800e75e:	6839      	ldr	r1, [r7, #0]
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 fcf9 	bl	800f158 <USBD_CtlError>
      break;
 800e766:	bf00      	nop
    }
    break;
 800e768:	e004      	b.n	800e774 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800e76a:	6839      	ldr	r1, [r7, #0]
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 fcf3 	bl	800f158 <USBD_CtlError>
    break;
 800e772:	bf00      	nop
  }

  return ret;
 800e774:	7bfb      	ldrb	r3, [r7, #15]
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop

0800e780 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e796:	2b20      	cmp	r3, #32
 800e798:	d003      	beq.n	800e7a2 <USBD_StdItfReq+0x22>
 800e79a:	2b40      	cmp	r3, #64	; 0x40
 800e79c:	d001      	beq.n	800e7a2 <USBD_StdItfReq+0x22>
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d12a      	bne.n	800e7f8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d81d      	bhi.n	800e7ea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	889b      	ldrh	r3, [r3, #4]
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d813      	bhi.n	800e7e0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	6839      	ldr	r1, [r7, #0]
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	4798      	blx	r3
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	88db      	ldrh	r3, [r3, #6]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d110      	bne.n	800e7f4 <USBD_StdItfReq+0x74>
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10d      	bne.n	800e7f4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fd88 	bl	800f2ee <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e7de:	e009      	b.n	800e7f4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fcb8 	bl	800f158 <USBD_CtlError>
      break;
 800e7e8:	e004      	b.n	800e7f4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e7ea:	6839      	ldr	r1, [r7, #0]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fcb3 	bl	800f158 <USBD_CtlError>
      break;
 800e7f2:	e000      	b.n	800e7f6 <USBD_StdItfReq+0x76>
      break;
 800e7f4:	bf00      	nop
    }
    break;
 800e7f6:	e004      	b.n	800e802 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e7f8:	6839      	ldr	r1, [r7, #0]
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 fcac 	bl	800f158 <USBD_CtlError>
    break;
 800e800:	bf00      	nop
  }

  return ret;
 800e802:	7bfb      	ldrb	r3, [r7, #15]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	889b      	ldrh	r3, [r3, #4]
 800e81e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e828:	2b20      	cmp	r3, #32
 800e82a:	d004      	beq.n	800e836 <USBD_StdEPReq+0x2a>
 800e82c:	2b40      	cmp	r3, #64	; 0x40
 800e82e:	d002      	beq.n	800e836 <USBD_StdEPReq+0x2a>
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00a      	beq.n	800e84a <USBD_StdEPReq+0x3e>
 800e834:	e135      	b.n	800eaa2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	4798      	blx	r3
 800e844:	4603      	mov	r3, r0
 800e846:	73fb      	strb	r3, [r7, #15]
    break;
 800e848:	e130      	b.n	800eaac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	785b      	ldrb	r3, [r3, #1]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d03e      	beq.n	800e8d0 <USBD_StdEPReq+0xc4>
 800e852:	2b03      	cmp	r3, #3
 800e854:	d002      	beq.n	800e85c <USBD_StdEPReq+0x50>
 800e856:	2b00      	cmp	r3, #0
 800e858:	d077      	beq.n	800e94a <USBD_StdEPReq+0x13e>
 800e85a:	e11c      	b.n	800ea96 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e862:	2b02      	cmp	r3, #2
 800e864:	d002      	beq.n	800e86c <USBD_StdEPReq+0x60>
 800e866:	2b03      	cmp	r3, #3
 800e868:	d015      	beq.n	800e896 <USBD_StdEPReq+0x8a>
 800e86a:	e02b      	b.n	800e8c4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e86c:	7bbb      	ldrb	r3, [r7, #14]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00c      	beq.n	800e88c <USBD_StdEPReq+0x80>
 800e872:	7bbb      	ldrb	r3, [r7, #14]
 800e874:	2b80      	cmp	r3, #128	; 0x80
 800e876:	d009      	beq.n	800e88c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e878:	7bbb      	ldrb	r3, [r7, #14]
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f008 f907 	bl	8016a90 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e882:	2180      	movs	r1, #128	; 0x80
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f008 f903 	bl	8016a90 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e88a:	e020      	b.n	800e8ce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800e88c:	6839      	ldr	r1, [r7, #0]
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fc62 	bl	800f158 <USBD_CtlError>
        break;
 800e894:	e01b      	b.n	800e8ce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	885b      	ldrh	r3, [r3, #2]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10e      	bne.n	800e8bc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e89e:	7bbb      	ldrb	r3, [r7, #14]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00b      	beq.n	800e8bc <USBD_StdEPReq+0xb0>
 800e8a4:	7bbb      	ldrb	r3, [r7, #14]
 800e8a6:	2b80      	cmp	r3, #128	; 0x80
 800e8a8:	d008      	beq.n	800e8bc <USBD_StdEPReq+0xb0>
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	88db      	ldrh	r3, [r3, #6]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d104      	bne.n	800e8bc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e8b2:	7bbb      	ldrb	r3, [r7, #14]
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f008 f8ea 	bl	8016a90 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 fd16 	bl	800f2ee <USBD_CtlSendStatus>

        break;
 800e8c2:	e004      	b.n	800e8ce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fc46 	bl	800f158 <USBD_CtlError>
        break;
 800e8cc:	bf00      	nop
      }
      break;
 800e8ce:	e0e7      	b.n	800eaa0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d002      	beq.n	800e8e0 <USBD_StdEPReq+0xd4>
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	d015      	beq.n	800e90a <USBD_StdEPReq+0xfe>
 800e8de:	e02d      	b.n	800e93c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e8e0:	7bbb      	ldrb	r3, [r7, #14]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00c      	beq.n	800e900 <USBD_StdEPReq+0xf4>
 800e8e6:	7bbb      	ldrb	r3, [r7, #14]
 800e8e8:	2b80      	cmp	r3, #128	; 0x80
 800e8ea:	d009      	beq.n	800e900 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e8ec:	7bbb      	ldrb	r3, [r7, #14]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f008 f8cd 	bl	8016a90 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8f6:	2180      	movs	r1, #128	; 0x80
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f008 f8c9 	bl	8016a90 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e8fe:	e023      	b.n	800e948 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800e900:	6839      	ldr	r1, [r7, #0]
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fc28 	bl	800f158 <USBD_CtlError>
        break;
 800e908:	e01e      	b.n	800e948 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	885b      	ldrh	r3, [r3, #2]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d119      	bne.n	800e946 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e912:	7bbb      	ldrb	r3, [r7, #14]
 800e914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d004      	beq.n	800e926 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f008 f8d4 	bl	8016ace <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 fce1 	bl	800f2ee <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	4798      	blx	r3
        }
        break;
 800e93a:	e004      	b.n	800e946 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fc0a 	bl	800f158 <USBD_CtlError>
        break;
 800e944:	e000      	b.n	800e948 <USBD_StdEPReq+0x13c>
        break;
 800e946:	bf00      	nop
      }
      break;
 800e948:	e0aa      	b.n	800eaa0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e950:	2b02      	cmp	r3, #2
 800e952:	d002      	beq.n	800e95a <USBD_StdEPReq+0x14e>
 800e954:	2b03      	cmp	r3, #3
 800e956:	d032      	beq.n	800e9be <USBD_StdEPReq+0x1b2>
 800e958:	e097      	b.n	800ea8a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d007      	beq.n	800e970 <USBD_StdEPReq+0x164>
 800e960:	7bbb      	ldrb	r3, [r7, #14]
 800e962:	2b80      	cmp	r3, #128	; 0x80
 800e964:	d004      	beq.n	800e970 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fbf5 	bl	800f158 <USBD_CtlError>
          break;
 800e96e:	e091      	b.n	800ea94 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e974:	2b00      	cmp	r3, #0
 800e976:	da0b      	bge.n	800e990 <USBD_StdEPReq+0x184>
 800e978:	7bbb      	ldrb	r3, [r7, #14]
 800e97a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e97e:	4613      	mov	r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4413      	add	r3, r2
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	3310      	adds	r3, #16
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	4413      	add	r3, r2
 800e98c:	3304      	adds	r3, #4
 800e98e:	e00b      	b.n	800e9a8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e990:	7bbb      	ldrb	r3, [r7, #14]
 800e992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e996:	4613      	mov	r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	4413      	add	r3, r2
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fc3f 	bl	800f23a <USBD_CtlSendData>
        break;
 800e9bc:	e06a      	b.n	800ea94 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e9be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	da11      	bge.n	800e9ea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e9c6:	7bbb      	ldrb	r3, [r7, #14]
 800e9c8:	f003 020f 	and.w	r2, r3, #15
 800e9cc:	6879      	ldr	r1, [r7, #4]
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	4413      	add	r3, r2
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	440b      	add	r3, r1
 800e9d8:	3324      	adds	r3, #36	; 0x24
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d117      	bne.n	800ea10 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e9e0:	6839      	ldr	r1, [r7, #0]
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 fbb8 	bl	800f158 <USBD_CtlError>
            break;
 800e9e8:	e054      	b.n	800ea94 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e9ea:	7bbb      	ldrb	r3, [r7, #14]
 800e9ec:	f003 020f 	and.w	r2, r3, #15
 800e9f0:	6879      	ldr	r1, [r7, #4]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	440b      	add	r3, r1
 800e9fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d104      	bne.n	800ea10 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ea06:	6839      	ldr	r1, [r7, #0]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fba5 	bl	800f158 <USBD_CtlError>
            break;
 800ea0e:	e041      	b.n	800ea94 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	da0b      	bge.n	800ea30 <USBD_StdEPReq+0x224>
 800ea18:	7bbb      	ldrb	r3, [r7, #14]
 800ea1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea1e:	4613      	mov	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	4413      	add	r3, r2
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	3310      	adds	r3, #16
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	e00b      	b.n	800ea48 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ea30:	7bbb      	ldrb	r3, [r7, #14]
 800ea32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea36:	4613      	mov	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	4413      	add	r3, r2
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	4413      	add	r3, r2
 800ea46:	3304      	adds	r3, #4
 800ea48:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ea4a:	7bbb      	ldrb	r3, [r7, #14]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <USBD_StdEPReq+0x24a>
 800ea50:	7bbb      	ldrb	r3, [r7, #14]
 800ea52:	2b80      	cmp	r3, #128	; 0x80
 800ea54:	d103      	bne.n	800ea5e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	e00e      	b.n	800ea7c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ea5e:	7bbb      	ldrb	r3, [r7, #14]
 800ea60:	4619      	mov	r1, r3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f008 f852 	bl	8016b0c <USBD_LL_IsStallEP>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d003      	beq.n	800ea76 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2201      	movs	r2, #1
 800ea72:	601a      	str	r2, [r3, #0]
 800ea74:	e002      	b.n	800ea7c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	2202      	movs	r2, #2
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fbd9 	bl	800f23a <USBD_CtlSendData>
          break;
 800ea88:	e004      	b.n	800ea94 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fb63 	bl	800f158 <USBD_CtlError>
        break;
 800ea92:	bf00      	nop
      }
      break;
 800ea94:	e004      	b.n	800eaa0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 fb5d 	bl	800f158 <USBD_CtlError>
      break;
 800ea9e:	bf00      	nop
    }
    break;
 800eaa0:	e004      	b.n	800eaac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 fb57 	bl	800f158 <USBD_CtlError>
    break;
 800eaaa:	bf00      	nop
  }

  return ret;
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
	...

0800eab8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eac2:	2300      	movs	r3, #0
 800eac4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800eac6:	2300      	movs	r3, #0
 800eac8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800eaca:	2300      	movs	r3, #0
 800eacc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	885b      	ldrh	r3, [r3, #2]
 800ead2:	0a1b      	lsrs	r3, r3, #8
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	3b01      	subs	r3, #1
 800ead8:	2b0e      	cmp	r3, #14
 800eada:	f200 8152 	bhi.w	800ed82 <USBD_GetDescriptor+0x2ca>
 800eade:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <USBD_GetDescriptor+0x2c>)
 800eae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae4:	0800eb55 	.word	0x0800eb55
 800eae8:	0800eb6d 	.word	0x0800eb6d
 800eaec:	0800ebad 	.word	0x0800ebad
 800eaf0:	0800ed83 	.word	0x0800ed83
 800eaf4:	0800ed83 	.word	0x0800ed83
 800eaf8:	0800ed23 	.word	0x0800ed23
 800eafc:	0800ed4f 	.word	0x0800ed4f
 800eb00:	0800ed83 	.word	0x0800ed83
 800eb04:	0800ed83 	.word	0x0800ed83
 800eb08:	0800ed83 	.word	0x0800ed83
 800eb0c:	0800ed83 	.word	0x0800ed83
 800eb10:	0800ed83 	.word	0x0800ed83
 800eb14:	0800ed83 	.word	0x0800ed83
 800eb18:	0800ed83 	.word	0x0800ed83
 800eb1c:	0800eb21 	.word	0x0800eb21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb26:	69db      	ldr	r3, [r3, #28]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00b      	beq.n	800eb44 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb32:	69db      	ldr	r3, [r3, #28]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	7c12      	ldrb	r2, [r2, #16]
 800eb38:	f107 0108 	add.w	r1, r7, #8
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	4798      	blx	r3
 800eb40:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800eb42:	e126      	b.n	800ed92 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800eb44:	6839      	ldr	r1, [r7, #0]
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 fb06 	bl	800f158 <USBD_CtlError>
      err++;
 800eb4c:	7afb      	ldrb	r3, [r7, #11]
 800eb4e:	3301      	adds	r3, #1
 800eb50:	72fb      	strb	r3, [r7, #11]
    break;
 800eb52:	e11e      	b.n	800ed92 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	7c12      	ldrb	r2, [r2, #16]
 800eb60:	f107 0108 	add.w	r1, r7, #8
 800eb64:	4610      	mov	r0, r2
 800eb66:	4798      	blx	r3
 800eb68:	60f8      	str	r0, [r7, #12]
    break;
 800eb6a:	e112      	b.n	800ed92 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	7c1b      	ldrb	r3, [r3, #16]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10d      	bne.n	800eb90 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb7c:	f107 0208 	add.w	r2, r7, #8
 800eb80:	4610      	mov	r0, r2
 800eb82:	4798      	blx	r3
 800eb84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800eb8e:	e100      	b.n	800ed92 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb98:	f107 0208 	add.w	r2, r7, #8
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	4798      	blx	r3
 800eba0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3301      	adds	r3, #1
 800eba6:	2202      	movs	r2, #2
 800eba8:	701a      	strb	r2, [r3, #0]
    break;
 800ebaa:	e0f2      	b.n	800ed92 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	885b      	ldrh	r3, [r3, #2]
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	2b05      	cmp	r3, #5
 800ebb4:	f200 80ac 	bhi.w	800ed10 <USBD_GetDescriptor+0x258>
 800ebb8:	a201      	add	r2, pc, #4	; (adr r2, 800ebc0 <USBD_GetDescriptor+0x108>)
 800ebba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebbe:	bf00      	nop
 800ebc0:	0800ebd9 	.word	0x0800ebd9
 800ebc4:	0800ec0d 	.word	0x0800ec0d
 800ebc8:	0800ec41 	.word	0x0800ec41
 800ebcc:	0800ec75 	.word	0x0800ec75
 800ebd0:	0800eca9 	.word	0x0800eca9
 800ebd4:	0800ecdd 	.word	0x0800ecdd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00b      	beq.n	800ebfc <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	7c12      	ldrb	r2, [r2, #16]
 800ebf0:	f107 0108 	add.w	r1, r7, #8
 800ebf4:	4610      	mov	r0, r2
 800ebf6:	4798      	blx	r3
 800ebf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebfa:	e091      	b.n	800ed20 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 faaa 	bl	800f158 <USBD_CtlError>
        err++;
 800ec04:	7afb      	ldrb	r3, [r7, #11]
 800ec06:	3301      	adds	r3, #1
 800ec08:	72fb      	strb	r3, [r7, #11]
      break;
 800ec0a:	e089      	b.n	800ed20 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00b      	beq.n	800ec30 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	7c12      	ldrb	r2, [r2, #16]
 800ec24:	f107 0108 	add.w	r1, r7, #8
 800ec28:	4610      	mov	r0, r2
 800ec2a:	4798      	blx	r3
 800ec2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec2e:	e077      	b.n	800ed20 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ec30:	6839      	ldr	r1, [r7, #0]
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 fa90 	bl	800f158 <USBD_CtlError>
        err++;
 800ec38:	7afb      	ldrb	r3, [r7, #11]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	72fb      	strb	r3, [r7, #11]
      break;
 800ec3e:	e06f      	b.n	800ed20 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec46:	68db      	ldr	r3, [r3, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00b      	beq.n	800ec64 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	7c12      	ldrb	r2, [r2, #16]
 800ec58:	f107 0108 	add.w	r1, r7, #8
 800ec5c:	4610      	mov	r0, r2
 800ec5e:	4798      	blx	r3
 800ec60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec62:	e05d      	b.n	800ed20 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fa76 	bl	800f158 <USBD_CtlError>
        err++;
 800ec6c:	7afb      	ldrb	r3, [r7, #11]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	72fb      	strb	r3, [r7, #11]
      break;
 800ec72:	e055      	b.n	800ed20 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d00b      	beq.n	800ec98 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	7c12      	ldrb	r2, [r2, #16]
 800ec8c:	f107 0108 	add.w	r1, r7, #8
 800ec90:	4610      	mov	r0, r2
 800ec92:	4798      	blx	r3
 800ec94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec96:	e043      	b.n	800ed20 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ec98:	6839      	ldr	r1, [r7, #0]
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fa5c 	bl	800f158 <USBD_CtlError>
        err++;
 800eca0:	7afb      	ldrb	r3, [r7, #11]
 800eca2:	3301      	adds	r3, #1
 800eca4:	72fb      	strb	r3, [r7, #11]
      break;
 800eca6:	e03b      	b.n	800ed20 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecae:	695b      	ldr	r3, [r3, #20]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00b      	beq.n	800eccc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecba:	695b      	ldr	r3, [r3, #20]
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	7c12      	ldrb	r2, [r2, #16]
 800ecc0:	f107 0108 	add.w	r1, r7, #8
 800ecc4:	4610      	mov	r0, r2
 800ecc6:	4798      	blx	r3
 800ecc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ecca:	e029      	b.n	800ed20 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800eccc:	6839      	ldr	r1, [r7, #0]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fa42 	bl	800f158 <USBD_CtlError>
        err++;
 800ecd4:	7afb      	ldrb	r3, [r7, #11]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	72fb      	strb	r3, [r7, #11]
      break;
 800ecda:	e021      	b.n	800ed20 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ece2:	699b      	ldr	r3, [r3, #24]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00b      	beq.n	800ed00 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	7c12      	ldrb	r2, [r2, #16]
 800ecf4:	f107 0108 	add.w	r1, r7, #8
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	4798      	blx	r3
 800ecfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ecfe:	e00f      	b.n	800ed20 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fa28 	bl	800f158 <USBD_CtlError>
        err++;
 800ed08:	7afb      	ldrb	r3, [r7, #11]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	72fb      	strb	r3, [r7, #11]
      break;
 800ed0e:	e007      	b.n	800ed20 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ed10:	6839      	ldr	r1, [r7, #0]
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 fa20 	bl	800f158 <USBD_CtlError>
      err++;
 800ed18:	7afb      	ldrb	r3, [r7, #11]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ed1e:	bf00      	nop
    }
    break;
 800ed20:	e037      	b.n	800ed92 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	7c1b      	ldrb	r3, [r3, #16]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d109      	bne.n	800ed3e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed32:	f107 0208 	add.w	r2, r7, #8
 800ed36:	4610      	mov	r0, r2
 800ed38:	4798      	blx	r3
 800ed3a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ed3c:	e029      	b.n	800ed92 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fa09 	bl	800f158 <USBD_CtlError>
      err++;
 800ed46:	7afb      	ldrb	r3, [r7, #11]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	72fb      	strb	r3, [r7, #11]
    break;
 800ed4c:	e021      	b.n	800ed92 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	7c1b      	ldrb	r3, [r3, #16]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d10d      	bne.n	800ed72 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5e:	f107 0208 	add.w	r2, r7, #8
 800ed62:	4610      	mov	r0, r2
 800ed64:	4798      	blx	r3
 800ed66:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	2207      	movs	r2, #7
 800ed6e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ed70:	e00f      	b.n	800ed92 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ed72:	6839      	ldr	r1, [r7, #0]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 f9ef 	bl	800f158 <USBD_CtlError>
      err++;
 800ed7a:	7afb      	ldrb	r3, [r7, #11]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	72fb      	strb	r3, [r7, #11]
    break;
 800ed80:	e007      	b.n	800ed92 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 f9e7 	bl	800f158 <USBD_CtlError>
    err++;
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	72fb      	strb	r3, [r7, #11]
    break;
 800ed90:	bf00      	nop
  }

  if (err != 0U)
 800ed92:	7afb      	ldrb	r3, [r7, #11]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d11e      	bne.n	800edd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	88db      	ldrh	r3, [r3, #6]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d016      	beq.n	800edce <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800eda0:	893b      	ldrh	r3, [r7, #8]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00e      	beq.n	800edc4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	88da      	ldrh	r2, [r3, #6]
 800edaa:	893b      	ldrh	r3, [r7, #8]
 800edac:	4293      	cmp	r3, r2
 800edae:	bf28      	it	cs
 800edb0:	4613      	movcs	r3, r2
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800edb6:	893b      	ldrh	r3, [r7, #8]
 800edb8:	461a      	mov	r2, r3
 800edba:	68f9      	ldr	r1, [r7, #12]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fa3c 	bl	800f23a <USBD_CtlSendData>
 800edc2:	e009      	b.n	800edd8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800edc4:	6839      	ldr	r1, [r7, #0]
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 f9c6 	bl	800f158 <USBD_CtlError>
 800edcc:	e004      	b.n	800edd8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fa8d 	bl	800f2ee <USBD_CtlSendStatus>
 800edd4:	e000      	b.n	800edd8 <USBD_GetDescriptor+0x320>
    return;
 800edd6:	bf00      	nop
    }
  }
}
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop

0800ede0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	889b      	ldrh	r3, [r3, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d130      	bne.n	800ee54 <USBD_SetAddress+0x74>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	88db      	ldrh	r3, [r3, #6]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d12c      	bne.n	800ee54 <USBD_SetAddress+0x74>
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	885b      	ldrh	r3, [r3, #2]
 800edfe:	2b7f      	cmp	r3, #127	; 0x7f
 800ee00:	d828      	bhi.n	800ee54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	885b      	ldrh	r3, [r3, #2]
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	d104      	bne.n	800ee22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f99c 	bl	800f158 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee20:	e01c      	b.n	800ee5c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	7bfa      	ldrb	r2, [r7, #15]
 800ee26:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f007 fe98 	bl	8016b64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 fa5a 	bl	800f2ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ee3a:	7bfb      	ldrb	r3, [r7, #15]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d004      	beq.n	800ee4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2202      	movs	r2, #2
 800ee44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee48:	e008      	b.n	800ee5c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee52:	e003      	b.n	800ee5c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ee54:	6839      	ldr	r1, [r7, #0]
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f97e 	bl	800f158 <USBD_CtlError>
  }
}
 800ee5c:	bf00      	nop
 800ee5e:	3710      	adds	r7, #16
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	885b      	ldrh	r3, [r3, #2]
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	4b4b      	ldr	r3, [pc, #300]	; (800efa8 <USBD_SetConfig+0x144>)
 800ee7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ee7c:	4b4a      	ldr	r3, [pc, #296]	; (800efa8 <USBD_SetConfig+0x144>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d905      	bls.n	800ee90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 f966 	bl	800f158 <USBD_CtlError>
    return USBD_FAIL;
 800ee8c:	2303      	movs	r3, #3
 800ee8e:	e087      	b.n	800efa0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	d002      	beq.n	800eea0 <USBD_SetConfig+0x3c>
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d025      	beq.n	800eeea <USBD_SetConfig+0x86>
 800ee9e:	e071      	b.n	800ef84 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800eea0:	4b41      	ldr	r3, [pc, #260]	; (800efa8 <USBD_SetConfig+0x144>)
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d01c      	beq.n	800eee2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800eea8:	4b3f      	ldr	r3, [pc, #252]	; (800efa8 <USBD_SetConfig+0x144>)
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	461a      	mov	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800eeb2:	4b3d      	ldr	r3, [pc, #244]	; (800efa8 <USBD_SetConfig+0x144>)
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7ff f97d 	bl	800e1b8 <USBD_SetClassConfig>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d004      	beq.n	800eed2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800eec8:	6839      	ldr	r1, [r7, #0]
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 f944 	bl	800f158 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800eed0:	e065      	b.n	800ef9e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fa0b 	bl	800f2ee <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2203      	movs	r2, #3
 800eedc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800eee0:	e05d      	b.n	800ef9e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fa03 	bl	800f2ee <USBD_CtlSendStatus>
    break;
 800eee8:	e059      	b.n	800ef9e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800eeea:	4b2f      	ldr	r3, [pc, #188]	; (800efa8 <USBD_SetConfig+0x144>)
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d112      	bne.n	800ef18 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2202      	movs	r2, #2
 800eef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800eefa:	4b2b      	ldr	r3, [pc, #172]	; (800efa8 <USBD_SetConfig+0x144>)
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	461a      	mov	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ef04:	4b28      	ldr	r3, [pc, #160]	; (800efa8 <USBD_SetConfig+0x144>)
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	4619      	mov	r1, r3
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7ff f970 	bl	800e1f0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 f9ec 	bl	800f2ee <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ef16:	e042      	b.n	800ef9e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ef18:	4b23      	ldr	r3, [pc, #140]	; (800efa8 <USBD_SetConfig+0x144>)
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d02a      	beq.n	800ef7c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f7ff f95e 	bl	800e1f0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ef34:	4b1c      	ldr	r3, [pc, #112]	; (800efa8 <USBD_SetConfig+0x144>)
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ef3e:	4b1a      	ldr	r3, [pc, #104]	; (800efa8 <USBD_SetConfig+0x144>)
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	4619      	mov	r1, r3
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff f937 	bl	800e1b8 <USBD_SetClassConfig>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00f      	beq.n	800ef74 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f8fe 	bl	800f158 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	4619      	mov	r1, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff f943 	bl	800e1f0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2202      	movs	r2, #2
 800ef6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ef72:	e014      	b.n	800ef9e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 f9ba 	bl	800f2ee <USBD_CtlSendStatus>
    break;
 800ef7a:	e010      	b.n	800ef9e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 f9b6 	bl	800f2ee <USBD_CtlSendStatus>
    break;
 800ef82:	e00c      	b.n	800ef9e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ef84:	6839      	ldr	r1, [r7, #0]
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 f8e6 	bl	800f158 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ef8c:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <USBD_SetConfig+0x144>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7ff f92c 	bl	800e1f0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ef98:	2303      	movs	r3, #3
 800ef9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef9c:	bf00      	nop
  }

  return ret;
 800ef9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	20000330 	.word	0x20000330

0800efac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	88db      	ldrh	r3, [r3, #6]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d004      	beq.n	800efc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 f8c9 	bl	800f158 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800efc6:	e021      	b.n	800f00c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efce:	2b01      	cmp	r3, #1
 800efd0:	db17      	blt.n	800f002 <USBD_GetConfig+0x56>
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	dd02      	ble.n	800efdc <USBD_GetConfig+0x30>
 800efd6:	2b03      	cmp	r3, #3
 800efd8:	d00b      	beq.n	800eff2 <USBD_GetConfig+0x46>
 800efda:	e012      	b.n	800f002 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	3308      	adds	r3, #8
 800efe6:	2201      	movs	r2, #1
 800efe8:	4619      	mov	r1, r3
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 f925 	bl	800f23a <USBD_CtlSendData>
      break;
 800eff0:	e00c      	b.n	800f00c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3304      	adds	r3, #4
 800eff6:	2201      	movs	r2, #1
 800eff8:	4619      	mov	r1, r3
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f91d 	bl	800f23a <USBD_CtlSendData>
      break;
 800f000:	e004      	b.n	800f00c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 f8a7 	bl	800f158 <USBD_CtlError>
      break;
 800f00a:	bf00      	nop
}
 800f00c:	bf00      	nop
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f024:	3b01      	subs	r3, #1
 800f026:	2b02      	cmp	r3, #2
 800f028:	d81e      	bhi.n	800f068 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	88db      	ldrh	r3, [r3, #6]
 800f02e:	2b02      	cmp	r3, #2
 800f030:	d004      	beq.n	800f03c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f88f 	bl	800f158 <USBD_CtlError>
      break;
 800f03a:	e01a      	b.n	800f072 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d005      	beq.n	800f058 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	f043 0202 	orr.w	r2, r3, #2
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	330c      	adds	r3, #12
 800f05c:	2202      	movs	r2, #2
 800f05e:	4619      	mov	r1, r3
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 f8ea 	bl	800f23a <USBD_CtlSendData>
    break;
 800f066:	e004      	b.n	800f072 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f068:	6839      	ldr	r1, [r7, #0]
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f874 	bl	800f158 <USBD_CtlError>
    break;
 800f070:	bf00      	nop
  }
}
 800f072:	bf00      	nop
 800f074:	3708      	adds	r7, #8
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b082      	sub	sp, #8
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	885b      	ldrh	r3, [r3, #2]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d106      	bne.n	800f09a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f92a 	bl	800f2ee <USBD_CtlSendStatus>
  }
}
 800f09a:	bf00      	nop
 800f09c:	3708      	adds	r7, #8
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	d80b      	bhi.n	800f0d0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	885b      	ldrh	r3, [r3, #2]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d10c      	bne.n	800f0da <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 f910 	bl	800f2ee <USBD_CtlSendStatus>
      }
      break;
 800f0ce:	e004      	b.n	800f0da <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f0d0:	6839      	ldr	r1, [r7, #0]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 f840 	bl	800f158 <USBD_CtlError>
      break;
 800f0d8:	e000      	b.n	800f0dc <USBD_ClrFeature+0x3a>
      break;
 800f0da:	bf00      	nop
  }
}
 800f0dc:	bf00      	nop
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	781a      	ldrb	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	781a      	ldrb	r2, [r3, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	3301      	adds	r3, #1
 800f10c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f7ff faa9 	bl	800e666 <SWAPBYTE>
 800f114:	4603      	mov	r3, r0
 800f116:	461a      	mov	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	3301      	adds	r3, #1
 800f120:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3301      	adds	r3, #1
 800f126:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f7ff fa9c 	bl	800e666 <SWAPBYTE>
 800f12e:	4603      	mov	r3, r0
 800f130:	461a      	mov	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	3301      	adds	r3, #1
 800f13a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3301      	adds	r3, #1
 800f140:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f7ff fa8f 	bl	800e666 <SWAPBYTE>
 800f148:	4603      	mov	r3, r0
 800f14a:	461a      	mov	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	80da      	strh	r2, [r3, #6]
}
 800f150:	bf00      	nop
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f162:	2180      	movs	r1, #128	; 0x80
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f007 fc93 	bl	8016a90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f16a:	2100      	movs	r1, #0
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f007 fc8f 	bl	8016a90 <USBD_LL_StallEP>
}
 800f172:	bf00      	nop
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}

0800f17a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f17a:	b580      	push	{r7, lr}
 800f17c:	b086      	sub	sp, #24
 800f17e:	af00      	add	r7, sp, #0
 800f180:	60f8      	str	r0, [r7, #12]
 800f182:	60b9      	str	r1, [r7, #8]
 800f184:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f186:	2300      	movs	r3, #0
 800f188:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d036      	beq.n	800f1fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f194:	6938      	ldr	r0, [r7, #16]
 800f196:	f000 f836 	bl	800f206 <USBD_GetLen>
 800f19a:	4603      	mov	r3, r0
 800f19c:	3301      	adds	r3, #1
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
 800f1aa:	68ba      	ldr	r2, [r7, #8]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	7812      	ldrb	r2, [r2, #0]
 800f1b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f1ba:	7dfb      	ldrb	r3, [r7, #23]
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	4413      	add	r3, r2
 800f1c0:	2203      	movs	r2, #3
 800f1c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800f1c4:	7dfb      	ldrb	r3, [r7, #23]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f1ca:	e013      	b.n	800f1f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f1cc:	7dfb      	ldrb	r3, [r7, #23]
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	7812      	ldrb	r2, [r2, #0]
 800f1d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	613b      	str	r3, [r7, #16]
    idx++;
 800f1de:	7dfb      	ldrb	r3, [r7, #23]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f1e4:	7dfb      	ldrb	r3, [r7, #23]
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	4413      	add	r3, r2
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800f1ee:	7dfb      	ldrb	r3, [r7, #23]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1e7      	bne.n	800f1cc <USBD_GetString+0x52>
 800f1fc:	e000      	b.n	800f200 <USBD_GetString+0x86>
    return;
 800f1fe:	bf00      	nop
  }
}
 800f200:	3718      	adds	r7, #24
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f206:	b480      	push	{r7}
 800f208:	b085      	sub	sp, #20
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f216:	e005      	b.n	800f224 <USBD_GetLen+0x1e>
  {
    len++;
 800f218:	7bfb      	ldrb	r3, [r7, #15]
 800f21a:	3301      	adds	r3, #1
 800f21c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	3301      	adds	r3, #1
 800f222:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1f5      	bne.n	800f218 <USBD_GetLen+0x12>
  }

  return len;
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3714      	adds	r7, #20
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr

0800f23a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	af00      	add	r7, sp, #0
 800f240:	60f8      	str	r0, [r7, #12]
 800f242:	60b9      	str	r1, [r7, #8]
 800f244:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2202      	movs	r2, #2
 800f24a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	2100      	movs	r1, #0
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f007 fc9e 	bl	8016ba2 <USBD_LL_Transmit>

  return USBD_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	2100      	movs	r1, #0
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f007 fc8d 	bl	8016ba2 <USBD_LL_Transmit>

  return USBD_OK;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b084      	sub	sp, #16
 800f296:	af00      	add	r7, sp, #0
 800f298:	60f8      	str	r0, [r7, #12]
 800f29a:	60b9      	str	r1, [r7, #8]
 800f29c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2203      	movs	r2, #3
 800f2a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f007 fc91 	bl	8016be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	68ba      	ldr	r2, [r7, #8]
 800f2dc:	2100      	movs	r1, #0
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f007 fc80 	bl	8016be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f2e4:	2300      	movs	r3, #0
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b082      	sub	sp, #8
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2204      	movs	r2, #4
 800f2fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f2fe:	2300      	movs	r3, #0
 800f300:	2200      	movs	r2, #0
 800f302:	2100      	movs	r1, #0
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f007 fc4c 	bl	8016ba2 <USBD_LL_Transmit>

  return USBD_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2205      	movs	r2, #5
 800f320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f324:	2300      	movs	r3, #0
 800f326:	2200      	movs	r2, #0
 800f328:	2100      	movs	r1, #0
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f007 fc5a 	bl	8016be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3708      	adds	r7, #8
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
	...

0800f33c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	4603      	mov	r3, r0
 800f344:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f346:	79fb      	ldrb	r3, [r7, #7]
 800f348:	4a08      	ldr	r2, [pc, #32]	; (800f36c <disk_status+0x30>)
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	79fa      	ldrb	r2, [r7, #7]
 800f354:	4905      	ldr	r1, [pc, #20]	; (800f36c <disk_status+0x30>)
 800f356:	440a      	add	r2, r1
 800f358:	7a12      	ldrb	r2, [r2, #8]
 800f35a:	4610      	mov	r0, r2
 800f35c:	4798      	blx	r3
 800f35e:	4603      	mov	r3, r0
 800f360:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f362:	7bfb      	ldrb	r3, [r7, #15]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	2000035c 	.word	0x2000035c

0800f370 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	4603      	mov	r3, r0
 800f378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	4a0d      	ldr	r2, [pc, #52]	; (800f3b8 <disk_initialize+0x48>)
 800f382:	5cd3      	ldrb	r3, [r2, r3]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d111      	bne.n	800f3ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f388:	79fb      	ldrb	r3, [r7, #7]
 800f38a:	4a0b      	ldr	r2, [pc, #44]	; (800f3b8 <disk_initialize+0x48>)
 800f38c:	2101      	movs	r1, #1
 800f38e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	4a09      	ldr	r2, [pc, #36]	; (800f3b8 <disk_initialize+0x48>)
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4413      	add	r3, r2
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	79fa      	ldrb	r2, [r7, #7]
 800f39e:	4906      	ldr	r1, [pc, #24]	; (800f3b8 <disk_initialize+0x48>)
 800f3a0:	440a      	add	r2, r1
 800f3a2:	7a12      	ldrb	r2, [r2, #8]
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	4798      	blx	r3
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	2000035c 	.word	0x2000035c

0800f3bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60b9      	str	r1, [r7, #8]
 800f3c4:	607a      	str	r2, [r7, #4]
 800f3c6:	603b      	str	r3, [r7, #0]
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f3cc:	7bfb      	ldrb	r3, [r7, #15]
 800f3ce:	4a0a      	ldr	r2, [pc, #40]	; (800f3f8 <disk_read+0x3c>)
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	689c      	ldr	r4, [r3, #8]
 800f3d8:	7bfb      	ldrb	r3, [r7, #15]
 800f3da:	4a07      	ldr	r2, [pc, #28]	; (800f3f8 <disk_read+0x3c>)
 800f3dc:	4413      	add	r3, r2
 800f3de:	7a18      	ldrb	r0, [r3, #8]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	47a0      	blx	r4
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	371c      	adds	r7, #28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd90      	pop	{r4, r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	2000035c 	.word	0x2000035c

0800f3fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f3fc:	b590      	push	{r4, r7, lr}
 800f3fe:	b087      	sub	sp, #28
 800f400:	af00      	add	r7, sp, #0
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	607a      	str	r2, [r7, #4]
 800f406:	603b      	str	r3, [r7, #0]
 800f408:	4603      	mov	r3, r0
 800f40a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
 800f40e:	4a0a      	ldr	r2, [pc, #40]	; (800f438 <disk_write+0x3c>)
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	68dc      	ldr	r4, [r3, #12]
 800f418:	7bfb      	ldrb	r3, [r7, #15]
 800f41a:	4a07      	ldr	r2, [pc, #28]	; (800f438 <disk_write+0x3c>)
 800f41c:	4413      	add	r3, r2
 800f41e:	7a18      	ldrb	r0, [r3, #8]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	68b9      	ldr	r1, [r7, #8]
 800f426:	47a0      	blx	r4
 800f428:	4603      	mov	r3, r0
 800f42a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	371c      	adds	r7, #28
 800f432:	46bd      	mov	sp, r7
 800f434:	bd90      	pop	{r4, r7, pc}
 800f436:	bf00      	nop
 800f438:	2000035c 	.word	0x2000035c

0800f43c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	4603      	mov	r3, r0
 800f444:	603a      	str	r2, [r7, #0]
 800f446:	71fb      	strb	r3, [r7, #7]
 800f448:	460b      	mov	r3, r1
 800f44a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f44c:	79fb      	ldrb	r3, [r7, #7]
 800f44e:	4a09      	ldr	r2, [pc, #36]	; (800f474 <disk_ioctl+0x38>)
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	691b      	ldr	r3, [r3, #16]
 800f458:	79fa      	ldrb	r2, [r7, #7]
 800f45a:	4906      	ldr	r1, [pc, #24]	; (800f474 <disk_ioctl+0x38>)
 800f45c:	440a      	add	r2, r1
 800f45e:	7a10      	ldrb	r0, [r2, #8]
 800f460:	79b9      	ldrb	r1, [r7, #6]
 800f462:	683a      	ldr	r2, [r7, #0]
 800f464:	4798      	blx	r3
 800f466:	4603      	mov	r3, r0
 800f468:	73fb      	strb	r3, [r7, #15]
  return res;
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	2000035c 	.word	0x2000035c

0800f478 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3301      	adds	r3, #1
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f488:	89fb      	ldrh	r3, [r7, #14]
 800f48a:	021b      	lsls	r3, r3, #8
 800f48c:	b21a      	sxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	b21b      	sxth	r3, r3
 800f494:	4313      	orrs	r3, r2
 800f496:	b21b      	sxth	r3, r3
 800f498:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f49a:	89fb      	ldrh	r3, [r7, #14]
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3714      	adds	r7, #20
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr

0800f4a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3303      	adds	r3, #3
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	021b      	lsls	r3, r3, #8
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	3202      	adds	r2, #2
 800f4c0:	7812      	ldrb	r2, [r2, #0]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	021b      	lsls	r3, r3, #8
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	3201      	adds	r2, #1
 800f4ce:	7812      	ldrb	r2, [r2, #0]
 800f4d0:	4313      	orrs	r3, r2
 800f4d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	021b      	lsls	r3, r3, #8
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	7812      	ldrb	r2, [r2, #0]
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	60fb      	str	r3, [r7, #12]
	return rv;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3714      	adds	r7, #20
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f4ee:	b480      	push	{r7}
 800f4f0:	b083      	sub	sp, #12
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	607a      	str	r2, [r7, #4]
 800f500:	887a      	ldrh	r2, [r7, #2]
 800f502:	b2d2      	uxtb	r2, r2
 800f504:	701a      	strb	r2, [r3, #0]
 800f506:	887b      	ldrh	r3, [r7, #2]
 800f508:	0a1b      	lsrs	r3, r3, #8
 800f50a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	1c5a      	adds	r2, r3, #1
 800f510:	607a      	str	r2, [r7, #4]
 800f512:	887a      	ldrh	r2, [r7, #2]
 800f514:	b2d2      	uxtb	r2, r2
 800f516:	701a      	strb	r2, [r3, #0]
}
 800f518:	bf00      	nop
 800f51a:	370c      	adds	r7, #12
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr

0800f524 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	1c5a      	adds	r2, r3, #1
 800f532:	607a      	str	r2, [r7, #4]
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	b2d2      	uxtb	r2, r2
 800f538:	701a      	strb	r2, [r3, #0]
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	0a1b      	lsrs	r3, r3, #8
 800f53e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	607a      	str	r2, [r7, #4]
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	b2d2      	uxtb	r2, r2
 800f54a:	701a      	strb	r2, [r3, #0]
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	0a1b      	lsrs	r3, r3, #8
 800f550:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	1c5a      	adds	r2, r3, #1
 800f556:	607a      	str	r2, [r7, #4]
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	b2d2      	uxtb	r2, r2
 800f55c:	701a      	strb	r2, [r3, #0]
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	0a1b      	lsrs	r3, r3, #8
 800f562:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	607a      	str	r2, [r7, #4]
 800f56a:	683a      	ldr	r2, [r7, #0]
 800f56c:	b2d2      	uxtb	r2, r2
 800f56e:	701a      	strb	r2, [r3, #0]
}
 800f570:	bf00      	nop
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f57c:	b480      	push	{r7}
 800f57e:	b087      	sub	sp, #28
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00d      	beq.n	800f5b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f596:	693a      	ldr	r2, [r7, #16]
 800f598:	1c53      	adds	r3, r2, #1
 800f59a:	613b      	str	r3, [r7, #16]
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	1c59      	adds	r1, r3, #1
 800f5a0:	6179      	str	r1, [r7, #20]
 800f5a2:	7812      	ldrb	r2, [r2, #0]
 800f5a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	607b      	str	r3, [r7, #4]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1f1      	bne.n	800f596 <mem_cpy+0x1a>
	}
}
 800f5b2:	bf00      	nop
 800f5b4:	371c      	adds	r7, #28
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr

0800f5be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f5be:	b480      	push	{r7}
 800f5c0:	b087      	sub	sp, #28
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	60f8      	str	r0, [r7, #12]
 800f5c6:	60b9      	str	r1, [r7, #8]
 800f5c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	617a      	str	r2, [r7, #20]
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	b2d2      	uxtb	r2, r2
 800f5d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	607b      	str	r3, [r7, #4]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d1f3      	bne.n	800f5ce <mem_set+0x10>
}
 800f5e6:	bf00      	nop
 800f5e8:	371c      	adds	r7, #28
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr

0800f5f2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f5f2:	b480      	push	{r7}
 800f5f4:	b089      	sub	sp, #36	; 0x24
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	60f8      	str	r0, [r7, #12]
 800f5fa:	60b9      	str	r1, [r7, #8]
 800f5fc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	61fb      	str	r3, [r7, #28]
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f606:	2300      	movs	r3, #0
 800f608:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f60a:	69fb      	ldr	r3, [r7, #28]
 800f60c:	1c5a      	adds	r2, r3, #1
 800f60e:	61fa      	str	r2, [r7, #28]
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	4619      	mov	r1, r3
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	61ba      	str	r2, [r7, #24]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	1acb      	subs	r3, r1, r3
 800f61e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	3b01      	subs	r3, #1
 800f624:	607b      	str	r3, [r7, #4]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d002      	beq.n	800f632 <mem_cmp+0x40>
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d0eb      	beq.n	800f60a <mem_cmp+0x18>

	return r;
 800f632:	697b      	ldr	r3, [r7, #20]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3724      	adds	r7, #36	; 0x24
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f64a:	e002      	b.n	800f652 <chk_chr+0x12>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	3301      	adds	r3, #1
 800f650:	607b      	str	r3, [r7, #4]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d005      	beq.n	800f666 <chk_chr+0x26>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	461a      	mov	r2, r3
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	4293      	cmp	r3, r2
 800f664:	d1f2      	bne.n	800f64c <chk_chr+0xc>
	return *str;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	781b      	ldrb	r3, [r3, #0]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d009      	beq.n	800f698 <lock_fs+0x22>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	4618      	mov	r0, r3
 800f68a:	f002 fd8d 	bl	80121a8 <ff_req_grant>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <lock_fs+0x22>
 800f694:	2301      	movs	r3, #1
 800f696:	e000      	b.n	800f69a <lock_fs+0x24>
 800f698:	2300      	movs	r3, #0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3708      	adds	r7, #8
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b082      	sub	sp, #8
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00d      	beq.n	800f6d0 <unlock_fs+0x2e>
 800f6b4:	78fb      	ldrb	r3, [r7, #3]
 800f6b6:	2b0c      	cmp	r3, #12
 800f6b8:	d00a      	beq.n	800f6d0 <unlock_fs+0x2e>
 800f6ba:	78fb      	ldrb	r3, [r7, #3]
 800f6bc:	2b0b      	cmp	r3, #11
 800f6be:	d007      	beq.n	800f6d0 <unlock_fs+0x2e>
 800f6c0:	78fb      	ldrb	r3, [r7, #3]
 800f6c2:	2b0f      	cmp	r3, #15
 800f6c4:	d004      	beq.n	800f6d0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f002 fd81 	bl	80121d2 <ff_rel_grant>
	}
}
 800f6d0:	bf00      	nop
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	60bb      	str	r3, [r7, #8]
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	e029      	b.n	800f740 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f6ec:	4a27      	ldr	r2, [pc, #156]	; (800f78c <chk_lock+0xb4>)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	011b      	lsls	r3, r3, #4
 800f6f2:	4413      	add	r3, r2
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d01d      	beq.n	800f736 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f6fa:	4a24      	ldr	r2, [pc, #144]	; (800f78c <chk_lock+0xb4>)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	4413      	add	r3, r2
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d116      	bne.n	800f73a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f70c:	4a1f      	ldr	r2, [pc, #124]	; (800f78c <chk_lock+0xb4>)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	011b      	lsls	r3, r3, #4
 800f712:	4413      	add	r3, r2
 800f714:	3304      	adds	r3, #4
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d10c      	bne.n	800f73a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f720:	4a1a      	ldr	r2, [pc, #104]	; (800f78c <chk_lock+0xb4>)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	011b      	lsls	r3, r3, #4
 800f726:	4413      	add	r3, r2
 800f728:	3308      	adds	r3, #8
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f730:	429a      	cmp	r2, r3
 800f732:	d102      	bne.n	800f73a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f734:	e007      	b.n	800f746 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f736:	2301      	movs	r3, #1
 800f738:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	3301      	adds	r3, #1
 800f73e:	60fb      	str	r3, [r7, #12]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2b01      	cmp	r3, #1
 800f744:	d9d2      	bls.n	800f6ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d109      	bne.n	800f760 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d102      	bne.n	800f758 <chk_lock+0x80>
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	2b02      	cmp	r3, #2
 800f756:	d101      	bne.n	800f75c <chk_lock+0x84>
 800f758:	2300      	movs	r3, #0
 800f75a:	e010      	b.n	800f77e <chk_lock+0xa6>
 800f75c:	2312      	movs	r3, #18
 800f75e:	e00e      	b.n	800f77e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d108      	bne.n	800f778 <chk_lock+0xa0>
 800f766:	4a09      	ldr	r2, [pc, #36]	; (800f78c <chk_lock+0xb4>)
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	011b      	lsls	r3, r3, #4
 800f76c:	4413      	add	r3, r2
 800f76e:	330c      	adds	r3, #12
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f776:	d101      	bne.n	800f77c <chk_lock+0xa4>
 800f778:	2310      	movs	r3, #16
 800f77a:	e000      	b.n	800f77e <chk_lock+0xa6>
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	2000033c 	.word	0x2000033c

0800f790 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f796:	2300      	movs	r3, #0
 800f798:	607b      	str	r3, [r7, #4]
 800f79a:	e002      	b.n	800f7a2 <enq_lock+0x12>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	607b      	str	r3, [r7, #4]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d806      	bhi.n	800f7b6 <enq_lock+0x26>
 800f7a8:	4a09      	ldr	r2, [pc, #36]	; (800f7d0 <enq_lock+0x40>)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	011b      	lsls	r3, r3, #4
 800f7ae:	4413      	add	r3, r2
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1f2      	bne.n	800f79c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	bf14      	ite	ne
 800f7bc:	2301      	movne	r3, #1
 800f7be:	2300      	moveq	r3, #0
 800f7c0:	b2db      	uxtb	r3, r3
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	2000033c 	.word	0x2000033c

0800f7d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f7de:	2300      	movs	r3, #0
 800f7e0:	60fb      	str	r3, [r7, #12]
 800f7e2:	e01f      	b.n	800f824 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f7e4:	4a41      	ldr	r2, [pc, #260]	; (800f8ec <inc_lock+0x118>)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	011b      	lsls	r3, r3, #4
 800f7ea:	4413      	add	r3, r2
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d113      	bne.n	800f81e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f7f6:	4a3d      	ldr	r2, [pc, #244]	; (800f8ec <inc_lock+0x118>)
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	011b      	lsls	r3, r3, #4
 800f7fc:	4413      	add	r3, r2
 800f7fe:	3304      	adds	r3, #4
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f806:	429a      	cmp	r2, r3
 800f808:	d109      	bne.n	800f81e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f80a:	4a38      	ldr	r2, [pc, #224]	; (800f8ec <inc_lock+0x118>)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	011b      	lsls	r3, r3, #4
 800f810:	4413      	add	r3, r2
 800f812:	3308      	adds	r3, #8
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d006      	beq.n	800f82c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	3301      	adds	r3, #1
 800f822:	60fb      	str	r3, [r7, #12]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2b01      	cmp	r3, #1
 800f828:	d9dc      	bls.n	800f7e4 <inc_lock+0x10>
 800f82a:	e000      	b.n	800f82e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f82c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b02      	cmp	r3, #2
 800f832:	d132      	bne.n	800f89a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f834:	2300      	movs	r3, #0
 800f836:	60fb      	str	r3, [r7, #12]
 800f838:	e002      	b.n	800f840 <inc_lock+0x6c>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	3301      	adds	r3, #1
 800f83e:	60fb      	str	r3, [r7, #12]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b01      	cmp	r3, #1
 800f844:	d806      	bhi.n	800f854 <inc_lock+0x80>
 800f846:	4a29      	ldr	r2, [pc, #164]	; (800f8ec <inc_lock+0x118>)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	011b      	lsls	r3, r3, #4
 800f84c:	4413      	add	r3, r2
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1f2      	bne.n	800f83a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2b02      	cmp	r3, #2
 800f858:	d101      	bne.n	800f85e <inc_lock+0x8a>
 800f85a:	2300      	movs	r3, #0
 800f85c:	e040      	b.n	800f8e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	4922      	ldr	r1, [pc, #136]	; (800f8ec <inc_lock+0x118>)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	011b      	lsls	r3, r3, #4
 800f868:	440b      	add	r3, r1
 800f86a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	689a      	ldr	r2, [r3, #8]
 800f870:	491e      	ldr	r1, [pc, #120]	; (800f8ec <inc_lock+0x118>)
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	011b      	lsls	r3, r3, #4
 800f876:	440b      	add	r3, r1
 800f878:	3304      	adds	r3, #4
 800f87a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	695a      	ldr	r2, [r3, #20]
 800f880:	491a      	ldr	r1, [pc, #104]	; (800f8ec <inc_lock+0x118>)
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	011b      	lsls	r3, r3, #4
 800f886:	440b      	add	r3, r1
 800f888:	3308      	adds	r3, #8
 800f88a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f88c:	4a17      	ldr	r2, [pc, #92]	; (800f8ec <inc_lock+0x118>)
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	011b      	lsls	r3, r3, #4
 800f892:	4413      	add	r3, r2
 800f894:	330c      	adds	r3, #12
 800f896:	2200      	movs	r2, #0
 800f898:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d009      	beq.n	800f8b4 <inc_lock+0xe0>
 800f8a0:	4a12      	ldr	r2, [pc, #72]	; (800f8ec <inc_lock+0x118>)
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	011b      	lsls	r3, r3, #4
 800f8a6:	4413      	add	r3, r2
 800f8a8:	330c      	adds	r3, #12
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d001      	beq.n	800f8b4 <inc_lock+0xe0>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	e015      	b.n	800f8e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d108      	bne.n	800f8cc <inc_lock+0xf8>
 800f8ba:	4a0c      	ldr	r2, [pc, #48]	; (800f8ec <inc_lock+0x118>)
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	011b      	lsls	r3, r3, #4
 800f8c0:	4413      	add	r3, r2
 800f8c2:	330c      	adds	r3, #12
 800f8c4:	881b      	ldrh	r3, [r3, #0]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	e001      	b.n	800f8d0 <inc_lock+0xfc>
 800f8cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f8d0:	4906      	ldr	r1, [pc, #24]	; (800f8ec <inc_lock+0x118>)
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	011b      	lsls	r3, r3, #4
 800f8d6:	440b      	add	r3, r1
 800f8d8:	330c      	adds	r3, #12
 800f8da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	3301      	adds	r3, #1
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3714      	adds	r7, #20
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	2000033c 	.word	0x2000033c

0800f8f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b085      	sub	sp, #20
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	607b      	str	r3, [r7, #4]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d825      	bhi.n	800f950 <dec_lock+0x60>
		n = Files[i].ctr;
 800f904:	4a17      	ldr	r2, [pc, #92]	; (800f964 <dec_lock+0x74>)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	011b      	lsls	r3, r3, #4
 800f90a:	4413      	add	r3, r2
 800f90c:	330c      	adds	r3, #12
 800f90e:	881b      	ldrh	r3, [r3, #0]
 800f910:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f912:	89fb      	ldrh	r3, [r7, #14]
 800f914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f918:	d101      	bne.n	800f91e <dec_lock+0x2e>
 800f91a:	2300      	movs	r3, #0
 800f91c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f91e:	89fb      	ldrh	r3, [r7, #14]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d002      	beq.n	800f92a <dec_lock+0x3a>
 800f924:	89fb      	ldrh	r3, [r7, #14]
 800f926:	3b01      	subs	r3, #1
 800f928:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f92a:	4a0e      	ldr	r2, [pc, #56]	; (800f964 <dec_lock+0x74>)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	011b      	lsls	r3, r3, #4
 800f930:	4413      	add	r3, r2
 800f932:	330c      	adds	r3, #12
 800f934:	89fa      	ldrh	r2, [r7, #14]
 800f936:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f938:	89fb      	ldrh	r3, [r7, #14]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d105      	bne.n	800f94a <dec_lock+0x5a>
 800f93e:	4a09      	ldr	r2, [pc, #36]	; (800f964 <dec_lock+0x74>)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	011b      	lsls	r3, r3, #4
 800f944:	4413      	add	r3, r2
 800f946:	2200      	movs	r2, #0
 800f948:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f94a:	2300      	movs	r3, #0
 800f94c:	737b      	strb	r3, [r7, #13]
 800f94e:	e001      	b.n	800f954 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f950:	2302      	movs	r3, #2
 800f952:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f954:	7b7b      	ldrb	r3, [r7, #13]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3714      	adds	r7, #20
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	2000033c 	.word	0x2000033c

0800f968 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f970:	2300      	movs	r3, #0
 800f972:	60fb      	str	r3, [r7, #12]
 800f974:	e010      	b.n	800f998 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f976:	4a0d      	ldr	r2, [pc, #52]	; (800f9ac <clear_lock+0x44>)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	011b      	lsls	r3, r3, #4
 800f97c:	4413      	add	r3, r2
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	429a      	cmp	r2, r3
 800f984:	d105      	bne.n	800f992 <clear_lock+0x2a>
 800f986:	4a09      	ldr	r2, [pc, #36]	; (800f9ac <clear_lock+0x44>)
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	011b      	lsls	r3, r3, #4
 800f98c:	4413      	add	r3, r2
 800f98e:	2200      	movs	r2, #0
 800f990:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	3301      	adds	r3, #1
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d9eb      	bls.n	800f976 <clear_lock+0xe>
	}
}
 800f99e:	bf00      	nop
 800f9a0:	3714      	adds	r7, #20
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	2000033c 	.word	0x2000033c

0800f9b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b086      	sub	sp, #24
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	78db      	ldrb	r3, [r3, #3]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d034      	beq.n	800fa2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	7858      	ldrb	r0, [r3, #1]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	f7ff fd10 	bl	800f3fc <disk_write>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d002      	beq.n	800f9e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	73fb      	strb	r3, [r7, #15]
 800f9e6:	e022      	b.n	800fa2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	1ad2      	subs	r2, r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	69db      	ldr	r3, [r3, #28]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d217      	bcs.n	800fa2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	789b      	ldrb	r3, [r3, #2]
 800fa02:	613b      	str	r3, [r7, #16]
 800fa04:	e010      	b.n	800fa28 <sync_window+0x78>
					wsect += fs->fsize;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	697a      	ldr	r2, [r7, #20]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	7858      	ldrb	r0, [r3, #1]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	697a      	ldr	r2, [r7, #20]
 800fa1e:	f7ff fced 	bl	800f3fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	3b01      	subs	r3, #1
 800fa26:	613b      	str	r3, [r7, #16]
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d8eb      	bhi.n	800fa06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fa2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3718      	adds	r7, #24
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fa42:	2300      	movs	r3, #0
 800fa44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d01b      	beq.n	800fa88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff ffad 	bl	800f9b0 <sync_window>
 800fa56:	4603      	mov	r3, r0
 800fa58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d113      	bne.n	800fa88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	7858      	ldrb	r0, [r3, #1]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	683a      	ldr	r2, [r7, #0]
 800fa6e:	f7ff fca5 	bl	800f3bc <disk_read>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d004      	beq.n	800fa82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fa78:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	683a      	ldr	r2, [r7, #0]
 800fa86:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fa88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
	...

0800fa94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff ff87 	bl	800f9b0 <sync_window>
 800faa2:	4603      	mov	r3, r0
 800faa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800faa6:	7bfb      	ldrb	r3, [r7, #15]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d158      	bne.n	800fb5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	2b03      	cmp	r3, #3
 800fab2:	d148      	bne.n	800fb46 <sync_fs+0xb2>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	791b      	ldrb	r3, [r3, #4]
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d144      	bne.n	800fb46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	3334      	adds	r3, #52	; 0x34
 800fac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fac4:	2100      	movs	r1, #0
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7ff fd79 	bl	800f5be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	3334      	adds	r3, #52	; 0x34
 800fad0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fad4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fad8:	4618      	mov	r0, r3
 800fada:	f7ff fd08 	bl	800f4ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3334      	adds	r3, #52	; 0x34
 800fae2:	4921      	ldr	r1, [pc, #132]	; (800fb68 <sync_fs+0xd4>)
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7ff fd1d 	bl	800f524 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	3334      	adds	r3, #52	; 0x34
 800faee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800faf2:	491e      	ldr	r1, [pc, #120]	; (800fb6c <sync_fs+0xd8>)
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff fd15 	bl	800f524 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	3334      	adds	r3, #52	; 0x34
 800fafe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	695b      	ldr	r3, [r3, #20]
 800fb06:	4619      	mov	r1, r3
 800fb08:	4610      	mov	r0, r2
 800fb0a:	f7ff fd0b 	bl	800f524 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	3334      	adds	r3, #52	; 0x34
 800fb12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	f7ff fd01 	bl	800f524 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6a1b      	ldr	r3, [r3, #32]
 800fb26:	1c5a      	adds	r2, r3, #1
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	7858      	ldrb	r0, [r3, #1]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	f7ff fc5e 	bl	800f3fc <disk_write>
			fs->fsi_flag = 0;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	785b      	ldrb	r3, [r3, #1]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff fc74 	bl	800f43c <disk_ioctl>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <sync_fs+0xca>
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	41615252 	.word	0x41615252
 800fb6c:	61417272 	.word	0x61417272

0800fb70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	3b02      	subs	r3, #2
 800fb7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	699b      	ldr	r3, [r3, #24]
 800fb84:	3b02      	subs	r3, #2
 800fb86:	683a      	ldr	r2, [r7, #0]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d301      	bcc.n	800fb90 <clust2sect+0x20>
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e008      	b.n	800fba2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	895b      	ldrh	r3, [r3, #10]
 800fb94:	461a      	mov	r2, r3
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	fb03 f202 	mul.w	r2, r3, r2
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba0:	4413      	add	r3, r2
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	370c      	adds	r7, #12
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr

0800fbae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b086      	sub	sp, #24
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d904      	bls.n	800fbce <get_fat+0x20>
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	699b      	ldr	r3, [r3, #24]
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d302      	bcc.n	800fbd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fbce:	2301      	movs	r3, #1
 800fbd0:	617b      	str	r3, [r7, #20]
 800fbd2:	e08c      	b.n	800fcee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	d045      	beq.n	800fc6e <get_fat+0xc0>
 800fbe2:	2b03      	cmp	r3, #3
 800fbe4:	d05d      	beq.n	800fca2 <get_fat+0xf4>
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d177      	bne.n	800fcda <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	60fb      	str	r3, [r7, #12]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	085b      	lsrs	r3, r3, #1
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	0a5b      	lsrs	r3, r3, #9
 800fc00:	4413      	add	r3, r2
 800fc02:	4619      	mov	r1, r3
 800fc04:	6938      	ldr	r0, [r7, #16]
 800fc06:	f7ff ff17 	bl	800fa38 <move_window>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d167      	bne.n	800fce0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	1c5a      	adds	r2, r3, #1
 800fc14:	60fa      	str	r2, [r7, #12]
 800fc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc22:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	0a5b      	lsrs	r3, r3, #9
 800fc2c:	4413      	add	r3, r2
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6938      	ldr	r0, [r7, #16]
 800fc32:	f7ff ff01 	bl	800fa38 <move_window>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d153      	bne.n	800fce4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc42:	693a      	ldr	r2, [r7, #16]
 800fc44:	4413      	add	r3, r2
 800fc46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc4a:	021b      	lsls	r3, r3, #8
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	4313      	orrs	r3, r2
 800fc52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	f003 0301 	and.w	r3, r3, #1
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d002      	beq.n	800fc64 <get_fat+0xb6>
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	091b      	lsrs	r3, r3, #4
 800fc62:	e002      	b.n	800fc6a <get_fat+0xbc>
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fc6a:	617b      	str	r3, [r7, #20]
			break;
 800fc6c:	e03f      	b.n	800fcee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	0a1b      	lsrs	r3, r3, #8
 800fc76:	4413      	add	r3, r2
 800fc78:	4619      	mov	r1, r3
 800fc7a:	6938      	ldr	r0, [r7, #16]
 800fc7c:	f7ff fedc 	bl	800fa38 <move_window>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d130      	bne.n	800fce8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fc94:	4413      	add	r3, r2
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7ff fbee 	bl	800f478 <ld_word>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	617b      	str	r3, [r7, #20]
			break;
 800fca0:	e025      	b.n	800fcee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	09db      	lsrs	r3, r3, #7
 800fcaa:	4413      	add	r3, r2
 800fcac:	4619      	mov	r1, r3
 800fcae:	6938      	ldr	r0, [r7, #16]
 800fcb0:	f7ff fec2 	bl	800fa38 <move_window>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d118      	bne.n	800fcec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fcc8:	4413      	add	r3, r2
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff fbec 	bl	800f4a8 <ld_dword>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fcd6:	617b      	str	r3, [r7, #20]
			break;
 800fcd8:	e009      	b.n	800fcee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fcda:	2301      	movs	r3, #1
 800fcdc:	617b      	str	r3, [r7, #20]
 800fcde:	e006      	b.n	800fcee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fce0:	bf00      	nop
 800fce2:	e004      	b.n	800fcee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fce4:	bf00      	nop
 800fce6:	e002      	b.n	800fcee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fce8:	bf00      	nop
 800fcea:	e000      	b.n	800fcee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fcec:	bf00      	nop
		}
	}

	return val;
 800fcee:	697b      	ldr	r3, [r7, #20]
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3718      	adds	r7, #24
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fcf8:	b590      	push	{r4, r7, lr}
 800fcfa:	b089      	sub	sp, #36	; 0x24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fd04:	2302      	movs	r3, #2
 800fd06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	f240 80d6 	bls.w	800febc <put_fat+0x1c4>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	f080 80d0 	bcs.w	800febc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	d073      	beq.n	800fe0c <put_fat+0x114>
 800fd24:	2b03      	cmp	r3, #3
 800fd26:	f000 8091 	beq.w	800fe4c <put_fat+0x154>
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	f040 80c6 	bne.w	800febc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	61bb      	str	r3, [r7, #24]
 800fd34:	69bb      	ldr	r3, [r7, #24]
 800fd36:	085b      	lsrs	r3, r3, #1
 800fd38:	69ba      	ldr	r2, [r7, #24]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	0a5b      	lsrs	r3, r3, #9
 800fd46:	4413      	add	r3, r2
 800fd48:	4619      	mov	r1, r3
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f7ff fe74 	bl	800fa38 <move_window>
 800fd50:	4603      	mov	r3, r0
 800fd52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd54:	7ffb      	ldrb	r3, [r7, #31]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f040 80a9 	bne.w	800feae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	1c59      	adds	r1, r3, #1
 800fd66:	61b9      	str	r1, [r7, #24]
 800fd68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd6c:	4413      	add	r3, r2
 800fd6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00d      	beq.n	800fd96 <put_fat+0x9e>
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	b25b      	sxtb	r3, r3
 800fd80:	f003 030f 	and.w	r3, r3, #15
 800fd84:	b25a      	sxtb	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	011b      	lsls	r3, r3, #4
 800fd8c:	b25b      	sxtb	r3, r3
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	b25b      	sxtb	r3, r3
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	e001      	b.n	800fd9a <put_fat+0xa2>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	697a      	ldr	r2, [r7, #20]
 800fd9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2201      	movs	r2, #1
 800fda2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	0a5b      	lsrs	r3, r3, #9
 800fdac:	4413      	add	r3, r2
 800fdae:	4619      	mov	r1, r3
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f7ff fe41 	bl	800fa38 <move_window>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdba:	7ffb      	ldrb	r3, [r7, #31]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d178      	bne.n	800feb2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdcc:	4413      	add	r3, r2
 800fdce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	f003 0301 	and.w	r3, r3, #1
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d003      	beq.n	800fde2 <put_fat+0xea>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	091b      	lsrs	r3, r3, #4
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	e00e      	b.n	800fe00 <put_fat+0x108>
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	b25b      	sxtb	r3, r3
 800fde8:	f023 030f 	bic.w	r3, r3, #15
 800fdec:	b25a      	sxtb	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	0a1b      	lsrs	r3, r3, #8
 800fdf2:	b25b      	sxtb	r3, r3
 800fdf4:	f003 030f 	and.w	r3, r3, #15
 800fdf8:	b25b      	sxtb	r3, r3
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	b25b      	sxtb	r3, r3
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	697a      	ldr	r2, [r7, #20]
 800fe02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2201      	movs	r2, #1
 800fe08:	70da      	strb	r2, [r3, #3]
			break;
 800fe0a:	e057      	b.n	800febc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	0a1b      	lsrs	r3, r3, #8
 800fe14:	4413      	add	r3, r2
 800fe16:	4619      	mov	r1, r3
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f7ff fe0d 	bl	800fa38 <move_window>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe22:	7ffb      	ldrb	r3, [r7, #31]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d146      	bne.n	800feb6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	005b      	lsls	r3, r3, #1
 800fe32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fe36:	4413      	add	r3, r2
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	b292      	uxth	r2, r2
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff fb55 	bl	800f4ee <st_word>
			fs->wflag = 1;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2201      	movs	r2, #1
 800fe48:	70da      	strb	r2, [r3, #3]
			break;
 800fe4a:	e037      	b.n	800febc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	09db      	lsrs	r3, r3, #7
 800fe54:	4413      	add	r3, r2
 800fe56:	4619      	mov	r1, r3
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f7ff fded 	bl	800fa38 <move_window>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe62:	7ffb      	ldrb	r3, [r7, #31]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d128      	bne.n	800feba <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fe7c:	4413      	add	r3, r2
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7ff fb12 	bl	800f4a8 <ld_dword>
 800fe84:	4603      	mov	r3, r0
 800fe86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fe8a:	4323      	orrs	r3, r4
 800fe8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fe9c:	4413      	add	r3, r2
 800fe9e:	6879      	ldr	r1, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff fb3f 	bl	800f524 <st_dword>
			fs->wflag = 1;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2201      	movs	r2, #1
 800feaa:	70da      	strb	r2, [r3, #3]
			break;
 800feac:	e006      	b.n	800febc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800feae:	bf00      	nop
 800feb0:	e004      	b.n	800febc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800feb2:	bf00      	nop
 800feb4:	e002      	b.n	800febc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800feb6:	bf00      	nop
 800feb8:	e000      	b.n	800febc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800feba:	bf00      	nop
		}
	}
	return res;
 800febc:	7ffb      	ldrb	r3, [r7, #31]
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3724      	adds	r7, #36	; 0x24
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd90      	pop	{r4, r7, pc}

0800fec6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b088      	sub	sp, #32
 800feca:	af00      	add	r7, sp, #0
 800fecc:	60f8      	str	r0, [r7, #12]
 800fece:	60b9      	str	r1, [r7, #8]
 800fed0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d904      	bls.n	800feec <remove_chain+0x26>
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	699b      	ldr	r3, [r3, #24]
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d301      	bcc.n	800fef0 <remove_chain+0x2a>
 800feec:	2302      	movs	r3, #2
 800feee:	e04b      	b.n	800ff88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00c      	beq.n	800ff10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fef6:	f04f 32ff 	mov.w	r2, #4294967295
 800fefa:	6879      	ldr	r1, [r7, #4]
 800fefc:	69b8      	ldr	r0, [r7, #24]
 800fefe:	f7ff fefb 	bl	800fcf8 <put_fat>
 800ff02:	4603      	mov	r3, r0
 800ff04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ff06:	7ffb      	ldrb	r3, [r7, #31]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <remove_chain+0x4a>
 800ff0c:	7ffb      	ldrb	r3, [r7, #31]
 800ff0e:	e03b      	b.n	800ff88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ff10:	68b9      	ldr	r1, [r7, #8]
 800ff12:	68f8      	ldr	r0, [r7, #12]
 800ff14:	f7ff fe4b 	bl	800fbae <get_fat>
 800ff18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d031      	beq.n	800ff84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d101      	bne.n	800ff2a <remove_chain+0x64>
 800ff26:	2302      	movs	r3, #2
 800ff28:	e02e      	b.n	800ff88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff30:	d101      	bne.n	800ff36 <remove_chain+0x70>
 800ff32:	2301      	movs	r3, #1
 800ff34:	e028      	b.n	800ff88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ff36:	2200      	movs	r2, #0
 800ff38:	68b9      	ldr	r1, [r7, #8]
 800ff3a:	69b8      	ldr	r0, [r7, #24]
 800ff3c:	f7ff fedc 	bl	800fcf8 <put_fat>
 800ff40:	4603      	mov	r3, r0
 800ff42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ff44:	7ffb      	ldrb	r3, [r7, #31]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d001      	beq.n	800ff4e <remove_chain+0x88>
 800ff4a:	7ffb      	ldrb	r3, [r7, #31]
 800ff4c:	e01c      	b.n	800ff88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	695a      	ldr	r2, [r3, #20]
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	699b      	ldr	r3, [r3, #24]
 800ff56:	3b02      	subs	r3, #2
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d20b      	bcs.n	800ff74 <remove_chain+0xae>
			fs->free_clst++;
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	695b      	ldr	r3, [r3, #20]
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	791b      	ldrb	r3, [r3, #4]
 800ff6a:	f043 0301 	orr.w	r3, r3, #1
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	69bb      	ldr	r3, [r7, #24]
 800ff72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	699b      	ldr	r3, [r3, #24]
 800ff7c:	68ba      	ldr	r2, [r7, #8]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d3c6      	bcc.n	800ff10 <remove_chain+0x4a>
 800ff82:	e000      	b.n	800ff86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ff84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3720      	adds	r7, #32
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b088      	sub	sp, #32
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d10d      	bne.n	800ffc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	691b      	ldr	r3, [r3, #16]
 800ffaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d004      	beq.n	800ffbc <create_chain+0x2c>
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	699b      	ldr	r3, [r3, #24]
 800ffb6:	69ba      	ldr	r2, [r7, #24]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d31b      	bcc.n	800fff4 <create_chain+0x64>
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	61bb      	str	r3, [r7, #24]
 800ffc0:	e018      	b.n	800fff4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7ff fdf2 	bl	800fbae <get_fat>
 800ffca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d801      	bhi.n	800ffd6 <create_chain+0x46>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e070      	b.n	80100b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffdc:	d101      	bne.n	800ffe2 <create_chain+0x52>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	e06a      	b.n	80100b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	699b      	ldr	r3, [r3, #24]
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d201      	bcs.n	800fff0 <create_chain+0x60>
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	e063      	b.n	80100b8 <create_chain+0x128>
		scl = clst;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	3301      	adds	r3, #1
 800fffc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	699b      	ldr	r3, [r3, #24]
 8010002:	69fa      	ldr	r2, [r7, #28]
 8010004:	429a      	cmp	r2, r3
 8010006:	d307      	bcc.n	8010018 <create_chain+0x88>
				ncl = 2;
 8010008:	2302      	movs	r3, #2
 801000a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801000c:	69fa      	ldr	r2, [r7, #28]
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	429a      	cmp	r2, r3
 8010012:	d901      	bls.n	8010018 <create_chain+0x88>
 8010014:	2300      	movs	r3, #0
 8010016:	e04f      	b.n	80100b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010018:	69f9      	ldr	r1, [r7, #28]
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f7ff fdc7 	bl	800fbae <get_fat>
 8010020:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d00e      	beq.n	8010046 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2b01      	cmp	r3, #1
 801002c:	d003      	beq.n	8010036 <create_chain+0xa6>
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010034:	d101      	bne.n	801003a <create_chain+0xaa>
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	e03e      	b.n	80100b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801003a:	69fa      	ldr	r2, [r7, #28]
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	429a      	cmp	r2, r3
 8010040:	d1da      	bne.n	800fff8 <create_chain+0x68>
 8010042:	2300      	movs	r3, #0
 8010044:	e038      	b.n	80100b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010046:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010048:	f04f 32ff 	mov.w	r2, #4294967295
 801004c:	69f9      	ldr	r1, [r7, #28]
 801004e:	6938      	ldr	r0, [r7, #16]
 8010050:	f7ff fe52 	bl	800fcf8 <put_fat>
 8010054:	4603      	mov	r3, r0
 8010056:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010058:	7dfb      	ldrb	r3, [r7, #23]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d109      	bne.n	8010072 <create_chain+0xe2>
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d006      	beq.n	8010072 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010064:	69fa      	ldr	r2, [r7, #28]
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6938      	ldr	r0, [r7, #16]
 801006a:	f7ff fe45 	bl	800fcf8 <put_fat>
 801006e:	4603      	mov	r3, r0
 8010070:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010072:	7dfb      	ldrb	r3, [r7, #23]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d116      	bne.n	80100a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	69fa      	ldr	r2, [r7, #28]
 801007c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	695a      	ldr	r2, [r3, #20]
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	699b      	ldr	r3, [r3, #24]
 8010086:	3b02      	subs	r3, #2
 8010088:	429a      	cmp	r2, r3
 801008a:	d804      	bhi.n	8010096 <create_chain+0x106>
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	695b      	ldr	r3, [r3, #20]
 8010090:	1e5a      	subs	r2, r3, #1
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	791b      	ldrb	r3, [r3, #4]
 801009a:	f043 0301 	orr.w	r3, r3, #1
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	711a      	strb	r2, [r3, #4]
 80100a4:	e007      	b.n	80100b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d102      	bne.n	80100b2 <create_chain+0x122>
 80100ac:	f04f 33ff 	mov.w	r3, #4294967295
 80100b0:	e000      	b.n	80100b4 <create_chain+0x124>
 80100b2:	2301      	movs	r3, #1
 80100b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80100b6:	69fb      	ldr	r3, [r7, #28]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3720      	adds	r7, #32
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b087      	sub	sp, #28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d4:	3304      	adds	r3, #4
 80100d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	0a5b      	lsrs	r3, r3, #9
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	8952      	ldrh	r2, [r2, #10]
 80100e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80100e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	1d1a      	adds	r2, r3, #4
 80100ea:	613a      	str	r2, [r7, #16]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <clmt_clust+0x3a>
 80100f6:	2300      	movs	r3, #0
 80100f8:	e010      	b.n	801011c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d307      	bcc.n	8010112 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010102:	697a      	ldr	r2, [r7, #20]
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	617b      	str	r3, [r7, #20]
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	3304      	adds	r3, #4
 801010e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010110:	e7e9      	b.n	80100e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010112:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	4413      	add	r3, r2
}
 801011c:	4618      	mov	r0, r3
 801011e:	371c      	adds	r7, #28
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b086      	sub	sp, #24
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801013e:	d204      	bcs.n	801014a <dir_sdi+0x22>
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	f003 031f 	and.w	r3, r3, #31
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <dir_sdi+0x26>
		return FR_INT_ERR;
 801014a:	2302      	movs	r3, #2
 801014c:	e063      	b.n	8010216 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	683a      	ldr	r2, [r7, #0]
 8010152:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d106      	bne.n	801016e <dir_sdi+0x46>
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	2b02      	cmp	r3, #2
 8010166:	d902      	bls.n	801016e <dir_sdi+0x46>
		clst = fs->dirbase;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801016c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10c      	bne.n	801018e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	095b      	lsrs	r3, r3, #5
 8010178:	693a      	ldr	r2, [r7, #16]
 801017a:	8912      	ldrh	r2, [r2, #8]
 801017c:	4293      	cmp	r3, r2
 801017e:	d301      	bcc.n	8010184 <dir_sdi+0x5c>
 8010180:	2302      	movs	r3, #2
 8010182:	e048      	b.n	8010216 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	61da      	str	r2, [r3, #28]
 801018c:	e029      	b.n	80101e2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	895b      	ldrh	r3, [r3, #10]
 8010192:	025b      	lsls	r3, r3, #9
 8010194:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010196:	e019      	b.n	80101cc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6979      	ldr	r1, [r7, #20]
 801019c:	4618      	mov	r0, r3
 801019e:	f7ff fd06 	bl	800fbae <get_fat>
 80101a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101aa:	d101      	bne.n	80101b0 <dir_sdi+0x88>
 80101ac:	2301      	movs	r3, #1
 80101ae:	e032      	b.n	8010216 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d904      	bls.n	80101c0 <dir_sdi+0x98>
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d301      	bcc.n	80101c4 <dir_sdi+0x9c>
 80101c0:	2302      	movs	r3, #2
 80101c2:	e028      	b.n	8010216 <dir_sdi+0xee>
			ofs -= csz;
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	1ad3      	subs	r3, r2, r3
 80101ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80101cc:	683a      	ldr	r2, [r7, #0]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d2e1      	bcs.n	8010198 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80101d4:	6979      	ldr	r1, [r7, #20]
 80101d6:	6938      	ldr	r0, [r7, #16]
 80101d8:	f7ff fcca 	bl	800fb70 <clust2sect>
 80101dc:	4602      	mov	r2, r0
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	697a      	ldr	r2, [r7, #20]
 80101e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	69db      	ldr	r3, [r3, #28]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d101      	bne.n	80101f4 <dir_sdi+0xcc>
 80101f0:	2302      	movs	r3, #2
 80101f2:	e010      	b.n	8010216 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	69da      	ldr	r2, [r3, #28]
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	0a5b      	lsrs	r3, r3, #9
 80101fc:	441a      	add	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801020e:	441a      	add	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	3718      	adds	r7, #24
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}

0801021e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b086      	sub	sp, #24
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
 8010226:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	695b      	ldr	r3, [r3, #20]
 8010232:	3320      	adds	r3, #32
 8010234:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	69db      	ldr	r3, [r3, #28]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d003      	beq.n	8010246 <dir_next+0x28>
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010244:	d301      	bcc.n	801024a <dir_next+0x2c>
 8010246:	2304      	movs	r3, #4
 8010248:	e0aa      	b.n	80103a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010250:	2b00      	cmp	r3, #0
 8010252:	f040 8098 	bne.w	8010386 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	69db      	ldr	r3, [r3, #28]
 801025a:	1c5a      	adds	r2, r3, #1
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	699b      	ldr	r3, [r3, #24]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d10b      	bne.n	8010280 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	095b      	lsrs	r3, r3, #5
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	8912      	ldrh	r2, [r2, #8]
 8010270:	4293      	cmp	r3, r2
 8010272:	f0c0 8088 	bcc.w	8010386 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	61da      	str	r2, [r3, #28]
 801027c:	2304      	movs	r3, #4
 801027e:	e08f      	b.n	80103a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	0a5b      	lsrs	r3, r3, #9
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	8952      	ldrh	r2, [r2, #10]
 8010288:	3a01      	subs	r2, #1
 801028a:	4013      	ands	r3, r2
 801028c:	2b00      	cmp	r3, #0
 801028e:	d17a      	bne.n	8010386 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	699b      	ldr	r3, [r3, #24]
 8010296:	4619      	mov	r1, r3
 8010298:	4610      	mov	r0, r2
 801029a:	f7ff fc88 	bl	800fbae <get_fat>
 801029e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d801      	bhi.n	80102aa <dir_next+0x8c>
 80102a6:	2302      	movs	r3, #2
 80102a8:	e07a      	b.n	80103a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b0:	d101      	bne.n	80102b6 <dir_next+0x98>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e074      	b.n	80103a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	697a      	ldr	r2, [r7, #20]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d358      	bcc.n	8010372 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d104      	bne.n	80102d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	61da      	str	r2, [r3, #28]
 80102cc:	2304      	movs	r3, #4
 80102ce:	e067      	b.n	80103a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	699b      	ldr	r3, [r3, #24]
 80102d6:	4619      	mov	r1, r3
 80102d8:	4610      	mov	r0, r2
 80102da:	f7ff fe59 	bl	800ff90 <create_chain>
 80102de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d101      	bne.n	80102ea <dir_next+0xcc>
 80102e6:	2307      	movs	r3, #7
 80102e8:	e05a      	b.n	80103a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d101      	bne.n	80102f4 <dir_next+0xd6>
 80102f0:	2302      	movs	r3, #2
 80102f2:	e055      	b.n	80103a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fa:	d101      	bne.n	8010300 <dir_next+0xe2>
 80102fc:	2301      	movs	r3, #1
 80102fe:	e04f      	b.n	80103a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f7ff fb55 	bl	800f9b0 <sync_window>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d001      	beq.n	8010310 <dir_next+0xf2>
 801030c:	2301      	movs	r3, #1
 801030e:	e047      	b.n	80103a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	3334      	adds	r3, #52	; 0x34
 8010314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010318:	2100      	movs	r1, #0
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff f94f 	bl	800f5be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010320:	2300      	movs	r3, #0
 8010322:	613b      	str	r3, [r7, #16]
 8010324:	6979      	ldr	r1, [r7, #20]
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f7ff fc22 	bl	800fb70 <clust2sect>
 801032c:	4602      	mov	r2, r0
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	631a      	str	r2, [r3, #48]	; 0x30
 8010332:	e012      	b.n	801035a <dir_next+0x13c>
						fs->wflag = 1;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2201      	movs	r2, #1
 8010338:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f7ff fb38 	bl	800f9b0 <sync_window>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d001      	beq.n	801034a <dir_next+0x12c>
 8010346:	2301      	movs	r3, #1
 8010348:	e02a      	b.n	80103a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	3301      	adds	r3, #1
 801034e:	613b      	str	r3, [r7, #16]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010354:	1c5a      	adds	r2, r3, #1
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	631a      	str	r2, [r3, #48]	; 0x30
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	895b      	ldrh	r3, [r3, #10]
 801035e:	461a      	mov	r2, r3
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	4293      	cmp	r3, r2
 8010364:	d3e6      	bcc.n	8010334 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	1ad2      	subs	r2, r2, r3
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	697a      	ldr	r2, [r7, #20]
 8010376:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010378:	6979      	ldr	r1, [r7, #20]
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f7ff fbf8 	bl	800fb70 <clust2sect>
 8010380:	4602      	mov	r2, r0
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	68ba      	ldr	r2, [r7, #8]
 801038a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010398:	441a      	add	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801039e:	2300      	movs	r3, #0
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3718      	adds	r7, #24
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b086      	sub	sp, #24
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80103b8:	2100      	movs	r1, #0
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7ff feb4 	bl	8010128 <dir_sdi>
 80103c0:	4603      	mov	r3, r0
 80103c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80103c4:	7dfb      	ldrb	r3, [r7, #23]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d12b      	bne.n	8010422 <dir_alloc+0x7a>
		n = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	69db      	ldr	r3, [r3, #28]
 80103d2:	4619      	mov	r1, r3
 80103d4:	68f8      	ldr	r0, [r7, #12]
 80103d6:	f7ff fb2f 	bl	800fa38 <move_window>
 80103da:	4603      	mov	r3, r0
 80103dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80103de:	7dfb      	ldrb	r3, [r7, #23]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d11d      	bne.n	8010420 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6a1b      	ldr	r3, [r3, #32]
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	2be5      	cmp	r3, #229	; 0xe5
 80103ec:	d004      	beq.n	80103f8 <dir_alloc+0x50>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d107      	bne.n	8010408 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	3301      	adds	r3, #1
 80103fc:	613b      	str	r3, [r7, #16]
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	429a      	cmp	r2, r3
 8010404:	d102      	bne.n	801040c <dir_alloc+0x64>
 8010406:	e00c      	b.n	8010422 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010408:	2300      	movs	r3, #0
 801040a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801040c:	2101      	movs	r1, #1
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7ff ff05 	bl	801021e <dir_next>
 8010414:	4603      	mov	r3, r0
 8010416:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010418:	7dfb      	ldrb	r3, [r7, #23]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d0d7      	beq.n	80103ce <dir_alloc+0x26>
 801041e:	e000      	b.n	8010422 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010420:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010422:	7dfb      	ldrb	r3, [r7, #23]
 8010424:	2b04      	cmp	r3, #4
 8010426:	d101      	bne.n	801042c <dir_alloc+0x84>
 8010428:	2307      	movs	r3, #7
 801042a:	75fb      	strb	r3, [r7, #23]
	return res;
 801042c:	7dfb      	ldrb	r3, [r7, #23]
}
 801042e:	4618      	mov	r0, r3
 8010430:	3718      	adds	r7, #24
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010436:	b580      	push	{r7, lr}
 8010438:	b084      	sub	sp, #16
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
 801043e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	331a      	adds	r3, #26
 8010444:	4618      	mov	r0, r3
 8010446:	f7ff f817 	bl	800f478 <ld_word>
 801044a:	4603      	mov	r3, r0
 801044c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	2b03      	cmp	r3, #3
 8010454:	d109      	bne.n	801046a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	3314      	adds	r3, #20
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff f80c 	bl	800f478 <ld_word>
 8010460:	4603      	mov	r3, r0
 8010462:	041b      	lsls	r3, r3, #16
 8010464:	68fa      	ldr	r2, [r7, #12]
 8010466:	4313      	orrs	r3, r2
 8010468:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801046a:	68fb      	ldr	r3, [r7, #12]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	331a      	adds	r3, #26
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	b292      	uxth	r2, r2
 8010488:	4611      	mov	r1, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f7ff f82f 	bl	800f4ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	2b03      	cmp	r3, #3
 8010496:	d109      	bne.n	80104ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	f103 0214 	add.w	r2, r3, #20
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	0c1b      	lsrs	r3, r3, #16
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4619      	mov	r1, r3
 80104a6:	4610      	mov	r0, r2
 80104a8:	f7ff f821 	bl	800f4ee <st_word>
	}
}
 80104ac:	bf00      	nop
 80104ae:	3710      	adds	r7, #16
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b086      	sub	sp, #24
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80104be:	2304      	movs	r3, #4
 80104c0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80104c8:	e03c      	b.n	8010544 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	69db      	ldr	r3, [r3, #28]
 80104ce:	4619      	mov	r1, r3
 80104d0:	6938      	ldr	r0, [r7, #16]
 80104d2:	f7ff fab1 	bl	800fa38 <move_window>
 80104d6:	4603      	mov	r3, r0
 80104d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104da:	7dfb      	ldrb	r3, [r7, #23]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d136      	bne.n	801054e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80104e8:	7bfb      	ldrb	r3, [r7, #15]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d102      	bne.n	80104f4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80104ee:	2304      	movs	r3, #4
 80104f0:	75fb      	strb	r3, [r7, #23]
 80104f2:	e031      	b.n	8010558 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a1b      	ldr	r3, [r3, #32]
 80104f8:	330b      	adds	r3, #11
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010500:	73bb      	strb	r3, [r7, #14]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	7bba      	ldrb	r2, [r7, #14]
 8010506:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010508:	7bfb      	ldrb	r3, [r7, #15]
 801050a:	2be5      	cmp	r3, #229	; 0xe5
 801050c:	d011      	beq.n	8010532 <dir_read+0x7e>
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	2b2e      	cmp	r3, #46	; 0x2e
 8010512:	d00e      	beq.n	8010532 <dir_read+0x7e>
 8010514:	7bbb      	ldrb	r3, [r7, #14]
 8010516:	2b0f      	cmp	r3, #15
 8010518:	d00b      	beq.n	8010532 <dir_read+0x7e>
 801051a:	7bbb      	ldrb	r3, [r7, #14]
 801051c:	f023 0320 	bic.w	r3, r3, #32
 8010520:	2b08      	cmp	r3, #8
 8010522:	bf0c      	ite	eq
 8010524:	2301      	moveq	r3, #1
 8010526:	2300      	movne	r3, #0
 8010528:	b2db      	uxtb	r3, r3
 801052a:	461a      	mov	r2, r3
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	4293      	cmp	r3, r2
 8010530:	d00f      	beq.n	8010552 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010532:	2100      	movs	r1, #0
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff fe72 	bl	801021e <dir_next>
 801053a:	4603      	mov	r3, r0
 801053c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801053e:	7dfb      	ldrb	r3, [r7, #23]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d108      	bne.n	8010556 <dir_read+0xa2>
	while (dp->sect) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	69db      	ldr	r3, [r3, #28]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1be      	bne.n	80104ca <dir_read+0x16>
 801054c:	e004      	b.n	8010558 <dir_read+0xa4>
		if (res != FR_OK) break;
 801054e:	bf00      	nop
 8010550:	e002      	b.n	8010558 <dir_read+0xa4>
				break;
 8010552:	bf00      	nop
 8010554:	e000      	b.n	8010558 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010556:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010558:	7dfb      	ldrb	r3, [r7, #23]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d002      	beq.n	8010564 <dir_read+0xb0>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	61da      	str	r2, [r3, #28]
	return res;
 8010564:	7dfb      	ldrb	r3, [r7, #23]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3718      	adds	r7, #24
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b086      	sub	sp, #24
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801057c:	2100      	movs	r1, #0
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7ff fdd2 	bl	8010128 <dir_sdi>
 8010584:	4603      	mov	r3, r0
 8010586:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010588:	7dfb      	ldrb	r3, [r7, #23]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d001      	beq.n	8010592 <dir_find+0x24>
 801058e:	7dfb      	ldrb	r3, [r7, #23]
 8010590:	e03e      	b.n	8010610 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	69db      	ldr	r3, [r3, #28]
 8010596:	4619      	mov	r1, r3
 8010598:	6938      	ldr	r0, [r7, #16]
 801059a:	f7ff fa4d 	bl	800fa38 <move_window>
 801059e:	4603      	mov	r3, r0
 80105a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80105a2:	7dfb      	ldrb	r3, [r7, #23]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d12f      	bne.n	8010608 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6a1b      	ldr	r3, [r3, #32]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d102      	bne.n	80105bc <dir_find+0x4e>
 80105b6:	2304      	movs	r3, #4
 80105b8:	75fb      	strb	r3, [r7, #23]
 80105ba:	e028      	b.n	801060e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a1b      	ldr	r3, [r3, #32]
 80105c0:	330b      	adds	r3, #11
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80105c8:	b2da      	uxtb	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a1b      	ldr	r3, [r3, #32]
 80105d2:	330b      	adds	r3, #11
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f003 0308 	and.w	r3, r3, #8
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d10a      	bne.n	80105f4 <dir_find+0x86>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6a18      	ldr	r0, [r3, #32]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	3324      	adds	r3, #36	; 0x24
 80105e6:	220b      	movs	r2, #11
 80105e8:	4619      	mov	r1, r3
 80105ea:	f7ff f802 	bl	800f5f2 <mem_cmp>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00b      	beq.n	801060c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80105f4:	2100      	movs	r1, #0
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7ff fe11 	bl	801021e <dir_next>
 80105fc:	4603      	mov	r3, r0
 80105fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010600:	7dfb      	ldrb	r3, [r7, #23]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d0c5      	beq.n	8010592 <dir_find+0x24>
 8010606:	e002      	b.n	801060e <dir_find+0xa0>
		if (res != FR_OK) break;
 8010608:	bf00      	nop
 801060a:	e000      	b.n	801060e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801060c:	bf00      	nop

	return res;
 801060e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3718      	adds	r7, #24
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010626:	2101      	movs	r1, #1
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff febd 	bl	80103a8 <dir_alloc>
 801062e:	4603      	mov	r3, r0
 8010630:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010632:	7bfb      	ldrb	r3, [r7, #15]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d11c      	bne.n	8010672 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	4619      	mov	r1, r3
 801063e:	68b8      	ldr	r0, [r7, #8]
 8010640:	f7ff f9fa 	bl	800fa38 <move_window>
 8010644:	4603      	mov	r3, r0
 8010646:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010648:	7bfb      	ldrb	r3, [r7, #15]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d111      	bne.n	8010672 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	2220      	movs	r2, #32
 8010654:	2100      	movs	r1, #0
 8010656:	4618      	mov	r0, r3
 8010658:	f7fe ffb1 	bl	800f5be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6a18      	ldr	r0, [r3, #32]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	3324      	adds	r3, #36	; 0x24
 8010664:	220b      	movs	r2, #11
 8010666:	4619      	mov	r1, r3
 8010668:	f7fe ff88 	bl	800f57c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2201      	movs	r2, #1
 8010670:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010672:	7bfb      	ldrb	r3, [r7, #15]
}
 8010674:	4618      	mov	r0, r3
 8010676:	3710      	adds	r7, #16
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b086      	sub	sp, #24
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	2200      	movs	r2, #0
 801068a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	69db      	ldr	r3, [r3, #28]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d04e      	beq.n	8010732 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010694:	2300      	movs	r3, #0
 8010696:	613b      	str	r3, [r7, #16]
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801069c:	e021      	b.n	80106e2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a1a      	ldr	r2, [r3, #32]
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	1c59      	adds	r1, r3, #1
 80106a6:	6179      	str	r1, [r7, #20]
 80106a8:	4413      	add	r3, r2
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
 80106b0:	2b20      	cmp	r3, #32
 80106b2:	d100      	bne.n	80106b6 <get_fileinfo+0x3a>
 80106b4:	e015      	b.n	80106e2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80106b6:	7bfb      	ldrb	r3, [r7, #15]
 80106b8:	2b05      	cmp	r3, #5
 80106ba:	d101      	bne.n	80106c0 <get_fileinfo+0x44>
 80106bc:	23e5      	movs	r3, #229	; 0xe5
 80106be:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	2b09      	cmp	r3, #9
 80106c4:	d106      	bne.n	80106d4 <get_fileinfo+0x58>
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	1c5a      	adds	r2, r3, #1
 80106ca:	613a      	str	r2, [r7, #16]
 80106cc:	683a      	ldr	r2, [r7, #0]
 80106ce:	4413      	add	r3, r2
 80106d0:	222e      	movs	r2, #46	; 0x2e
 80106d2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	613a      	str	r2, [r7, #16]
 80106da:	683a      	ldr	r2, [r7, #0]
 80106dc:	4413      	add	r3, r2
 80106de:	7bfa      	ldrb	r2, [r7, #15]
 80106e0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	2b0a      	cmp	r3, #10
 80106e6:	d9da      	bls.n	801069e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80106e8:	683a      	ldr	r2, [r7, #0]
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	4413      	add	r3, r2
 80106ee:	3309      	adds	r3, #9
 80106f0:	2200      	movs	r2, #0
 80106f2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a1b      	ldr	r3, [r3, #32]
 80106f8:	7ada      	ldrb	r2, [r3, #11]
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6a1b      	ldr	r3, [r3, #32]
 8010702:	331c      	adds	r3, #28
 8010704:	4618      	mov	r0, r3
 8010706:	f7fe fecf 	bl	800f4a8 <ld_dword>
 801070a:	4602      	mov	r2, r0
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a1b      	ldr	r3, [r3, #32]
 8010714:	3316      	adds	r3, #22
 8010716:	4618      	mov	r0, r3
 8010718:	f7fe fec6 	bl	800f4a8 <ld_dword>
 801071c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	b29a      	uxth	r2, r3
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	80da      	strh	r2, [r3, #6]
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	0c1b      	lsrs	r3, r3, #16
 801072a:	b29a      	uxth	r2, r3
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	809a      	strh	r2, [r3, #4]
 8010730:	e000      	b.n	8010734 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010732:	bf00      	nop
}
 8010734:	3718      	adds	r7, #24
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
	...

0801073c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	1c59      	adds	r1, r3, #1
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	6011      	str	r1, [r2, #0]
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010752:	89fb      	ldrh	r3, [r7, #14]
 8010754:	2b60      	cmp	r3, #96	; 0x60
 8010756:	d905      	bls.n	8010764 <get_achar+0x28>
 8010758:	89fb      	ldrh	r3, [r7, #14]
 801075a:	2b7a      	cmp	r3, #122	; 0x7a
 801075c:	d802      	bhi.n	8010764 <get_achar+0x28>
 801075e:	89fb      	ldrh	r3, [r7, #14]
 8010760:	3b20      	subs	r3, #32
 8010762:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010764:	89fb      	ldrh	r3, [r7, #14]
 8010766:	2b7f      	cmp	r3, #127	; 0x7f
 8010768:	d904      	bls.n	8010774 <get_achar+0x38>
 801076a:	89fb      	ldrh	r3, [r7, #14]
 801076c:	3b80      	subs	r3, #128	; 0x80
 801076e:	4a05      	ldr	r2, [pc, #20]	; (8010784 <get_achar+0x48>)
 8010770:	5cd3      	ldrb	r3, [r2, r3]
 8010772:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8010774:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8010776:	4618      	mov	r0, r3
 8010778:	3714      	adds	r7, #20
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop
 8010784:	0801a150 	.word	0x0801a150

08010788 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b08a      	sub	sp, #40	; 0x28
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]
 8010794:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8010796:	e009      	b.n	80107ac <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8010798:	f107 0308 	add.w	r3, r7, #8
 801079c:	4618      	mov	r0, r3
 801079e:	f7ff ffcd 	bl	801073c <get_achar>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d101      	bne.n	80107ac <pattern_matching+0x24>
 80107a8:	2300      	movs	r3, #0
 80107aa:	e064      	b.n	8010876 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	1e5a      	subs	r2, r3, #1
 80107b0:	607a      	str	r2, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1f0      	bne.n	8010798 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d104      	bne.n	80107c8 <pattern_matching+0x40>
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d001      	beq.n	80107c8 <pattern_matching+0x40>
 80107c4:	2301      	movs	r3, #1
 80107c6:	e056      	b.n	8010876 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	617b      	str	r3, [r7, #20]
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	2b3f      	cmp	r3, #63	; 0x3f
 80107d6:	d003      	beq.n	80107e0 <pattern_matching+0x58>
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b2a      	cmp	r3, #42	; 0x2a
 80107de:	d126      	bne.n	801082e <pattern_matching+0xa6>
				nm = nx = 0;
 80107e0:	2300      	movs	r3, #0
 80107e2:	61fb      	str	r3, [r7, #28]
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	1c5a      	adds	r2, r3, #1
 80107ec:	617a      	str	r2, [r7, #20]
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	2b3f      	cmp	r3, #63	; 0x3f
 80107f2:	d103      	bne.n	80107fc <pattern_matching+0x74>
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	3301      	adds	r3, #1
 80107f8:	623b      	str	r3, [r7, #32]
 80107fa:	e001      	b.n	8010800 <pattern_matching+0x78>
 80107fc:	2301      	movs	r3, #1
 80107fe:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b3f      	cmp	r3, #63	; 0x3f
 8010806:	d0ef      	beq.n	80107e8 <pattern_matching+0x60>
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	2b2a      	cmp	r3, #42	; 0x2a
 801080e:	d0eb      	beq.n	80107e8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8010810:	6978      	ldr	r0, [r7, #20]
 8010812:	6939      	ldr	r1, [r7, #16]
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	6a3a      	ldr	r2, [r7, #32]
 8010818:	f7ff ffb6 	bl	8010788 <pattern_matching>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d001      	beq.n	8010826 <pattern_matching+0x9e>
 8010822:	2301      	movs	r3, #1
 8010824:	e027      	b.n	8010876 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801082c:	e017      	b.n	801085e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801082e:	f107 0314 	add.w	r3, r7, #20
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff ff82 	bl	801073c <get_achar>
 8010838:	4603      	mov	r3, r0
 801083a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 801083c:	f107 0310 	add.w	r3, r7, #16
 8010840:	4618      	mov	r0, r3
 8010842:	f7ff ff7b 	bl	801073c <get_achar>
 8010846:	4603      	mov	r3, r0
 8010848:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801084a:	8b7a      	ldrh	r2, [r7, #26]
 801084c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801084e:	429a      	cmp	r2, r3
 8010850:	d104      	bne.n	801085c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8010852:	8b7b      	ldrh	r3, [r7, #26]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1bb      	bne.n	80107d0 <pattern_matching+0x48>
 8010858:	2301      	movs	r3, #1
 801085a:	e00c      	b.n	8010876 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 801085c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801085e:	f107 0308 	add.w	r3, r7, #8
 8010862:	4618      	mov	r0, r3
 8010864:	f7ff ff6a 	bl	801073c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <pattern_matching+0xec>
 801086e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010870:	2b00      	cmp	r3, #0
 8010872:	d1a9      	bne.n	80107c8 <pattern_matching+0x40>

	return 0;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3728      	adds	r7, #40	; 0x28
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
	...

08010880 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b088      	sub	sp, #32
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	60fb      	str	r3, [r7, #12]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3324      	adds	r3, #36	; 0x24
 8010894:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010896:	220b      	movs	r2, #11
 8010898:	2120      	movs	r1, #32
 801089a:	68b8      	ldr	r0, [r7, #8]
 801089c:	f7fe fe8f 	bl	800f5be <mem_set>
	si = i = 0; ni = 8;
 80108a0:	2300      	movs	r3, #0
 80108a2:	613b      	str	r3, [r7, #16]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	617b      	str	r3, [r7, #20]
 80108a8:	2308      	movs	r3, #8
 80108aa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	617a      	str	r2, [r7, #20]
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	4413      	add	r3, r2
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80108ba:	7ffb      	ldrb	r3, [r7, #31]
 80108bc:	2b20      	cmp	r3, #32
 80108be:	d94e      	bls.n	801095e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80108c0:	7ffb      	ldrb	r3, [r7, #31]
 80108c2:	2b2f      	cmp	r3, #47	; 0x2f
 80108c4:	d006      	beq.n	80108d4 <create_name+0x54>
 80108c6:	7ffb      	ldrb	r3, [r7, #31]
 80108c8:	2b5c      	cmp	r3, #92	; 0x5c
 80108ca:	d110      	bne.n	80108ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80108cc:	e002      	b.n	80108d4 <create_name+0x54>
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	3301      	adds	r3, #1
 80108d2:	617b      	str	r3, [r7, #20]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	4413      	add	r3, r2
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	2b2f      	cmp	r3, #47	; 0x2f
 80108de:	d0f6      	beq.n	80108ce <create_name+0x4e>
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	4413      	add	r3, r2
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	2b5c      	cmp	r3, #92	; 0x5c
 80108ea:	d0f0      	beq.n	80108ce <create_name+0x4e>
			break;
 80108ec:	e038      	b.n	8010960 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80108ee:	7ffb      	ldrb	r3, [r7, #31]
 80108f0:	2b2e      	cmp	r3, #46	; 0x2e
 80108f2:	d003      	beq.n	80108fc <create_name+0x7c>
 80108f4:	693a      	ldr	r2, [r7, #16]
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d30c      	bcc.n	8010916 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	2b0b      	cmp	r3, #11
 8010900:	d002      	beq.n	8010908 <create_name+0x88>
 8010902:	7ffb      	ldrb	r3, [r7, #31]
 8010904:	2b2e      	cmp	r3, #46	; 0x2e
 8010906:	d001      	beq.n	801090c <create_name+0x8c>
 8010908:	2306      	movs	r3, #6
 801090a:	e044      	b.n	8010996 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801090c:	2308      	movs	r3, #8
 801090e:	613b      	str	r3, [r7, #16]
 8010910:	230b      	movs	r3, #11
 8010912:	61bb      	str	r3, [r7, #24]
			continue;
 8010914:	e022      	b.n	801095c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010916:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801091a:	2b00      	cmp	r3, #0
 801091c:	da04      	bge.n	8010928 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801091e:	7ffb      	ldrb	r3, [r7, #31]
 8010920:	3b80      	subs	r3, #128	; 0x80
 8010922:	4a1f      	ldr	r2, [pc, #124]	; (80109a0 <create_name+0x120>)
 8010924:	5cd3      	ldrb	r3, [r2, r3]
 8010926:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010928:	7ffb      	ldrb	r3, [r7, #31]
 801092a:	4619      	mov	r1, r3
 801092c:	481d      	ldr	r0, [pc, #116]	; (80109a4 <create_name+0x124>)
 801092e:	f7fe fe87 	bl	800f640 <chk_chr>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d001      	beq.n	801093c <create_name+0xbc>
 8010938:	2306      	movs	r3, #6
 801093a:	e02c      	b.n	8010996 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801093c:	7ffb      	ldrb	r3, [r7, #31]
 801093e:	2b60      	cmp	r3, #96	; 0x60
 8010940:	d905      	bls.n	801094e <create_name+0xce>
 8010942:	7ffb      	ldrb	r3, [r7, #31]
 8010944:	2b7a      	cmp	r3, #122	; 0x7a
 8010946:	d802      	bhi.n	801094e <create_name+0xce>
 8010948:	7ffb      	ldrb	r3, [r7, #31]
 801094a:	3b20      	subs	r3, #32
 801094c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	1c5a      	adds	r2, r3, #1
 8010952:	613a      	str	r2, [r7, #16]
 8010954:	68ba      	ldr	r2, [r7, #8]
 8010956:	4413      	add	r3, r2
 8010958:	7ffa      	ldrb	r2, [r7, #31]
 801095a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801095c:	e7a6      	b.n	80108ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801095e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	441a      	add	r2, r3
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d101      	bne.n	8010974 <create_name+0xf4>
 8010970:	2306      	movs	r3, #6
 8010972:	e010      	b.n	8010996 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	2be5      	cmp	r3, #229	; 0xe5
 801097a:	d102      	bne.n	8010982 <create_name+0x102>
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	2205      	movs	r2, #5
 8010980:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010982:	7ffb      	ldrb	r3, [r7, #31]
 8010984:	2b20      	cmp	r3, #32
 8010986:	d801      	bhi.n	801098c <create_name+0x10c>
 8010988:	2204      	movs	r2, #4
 801098a:	e000      	b.n	801098e <create_name+0x10e>
 801098c:	2200      	movs	r2, #0
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	330b      	adds	r3, #11
 8010992:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010994:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010996:	4618      	mov	r0, r3
 8010998:	3720      	adds	r7, #32
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	0801a150 	.word	0x0801a150
 80109a4:	08019f7c 	.word	0x08019f7c

080109a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b086      	sub	sp, #24
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80109bc:	e002      	b.n	80109c4 <follow_path+0x1c>
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	3301      	adds	r3, #1
 80109c2:	603b      	str	r3, [r7, #0]
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2b2f      	cmp	r3, #47	; 0x2f
 80109ca:	d0f8      	beq.n	80109be <follow_path+0x16>
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	2b5c      	cmp	r3, #92	; 0x5c
 80109d2:	d0f4      	beq.n	80109be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	2200      	movs	r2, #0
 80109d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	2b1f      	cmp	r3, #31
 80109e0:	d80a      	bhi.n	80109f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2280      	movs	r2, #128	; 0x80
 80109e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80109ea:	2100      	movs	r1, #0
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7ff fb9b 	bl	8010128 <dir_sdi>
 80109f2:	4603      	mov	r3, r0
 80109f4:	75fb      	strb	r3, [r7, #23]
 80109f6:	e043      	b.n	8010a80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80109f8:	463b      	mov	r3, r7
 80109fa:	4619      	mov	r1, r3
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f7ff ff3f 	bl	8010880 <create_name>
 8010a02:	4603      	mov	r3, r0
 8010a04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010a06:	7dfb      	ldrb	r3, [r7, #23]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d134      	bne.n	8010a76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f7ff fdae 	bl	801056e <dir_find>
 8010a12:	4603      	mov	r3, r0
 8010a14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010a1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010a1e:	7dfb      	ldrb	r3, [r7, #23]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d00a      	beq.n	8010a3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010a24:	7dfb      	ldrb	r3, [r7, #23]
 8010a26:	2b04      	cmp	r3, #4
 8010a28:	d127      	bne.n	8010a7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010a2a:	7afb      	ldrb	r3, [r7, #11]
 8010a2c:	f003 0304 	and.w	r3, r3, #4
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d122      	bne.n	8010a7a <follow_path+0xd2>
 8010a34:	2305      	movs	r3, #5
 8010a36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010a38:	e01f      	b.n	8010a7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010a3a:	7afb      	ldrb	r3, [r7, #11]
 8010a3c:	f003 0304 	and.w	r3, r3, #4
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d11c      	bne.n	8010a7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	799b      	ldrb	r3, [r3, #6]
 8010a48:	f003 0310 	and.w	r3, r3, #16
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d102      	bne.n	8010a56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010a50:	2305      	movs	r3, #5
 8010a52:	75fb      	strb	r3, [r7, #23]
 8010a54:	e014      	b.n	8010a80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	695b      	ldr	r3, [r3, #20]
 8010a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a64:	4413      	add	r3, r2
 8010a66:	4619      	mov	r1, r3
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	f7ff fce4 	bl	8010436 <ld_clust>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a74:	e7c0      	b.n	80109f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8010a76:	bf00      	nop
 8010a78:	e002      	b.n	8010a80 <follow_path+0xd8>
				break;
 8010a7a:	bf00      	nop
 8010a7c:	e000      	b.n	8010a80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010a7e:	bf00      	nop
			}
		}
	}

	return res;
 8010a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3718      	adds	r7, #24
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010a8a:	b480      	push	{r7}
 8010a8c:	b087      	sub	sp, #28
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010a92:	f04f 33ff 	mov.w	r3, #4294967295
 8010a96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d031      	beq.n	8010b04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	617b      	str	r3, [r7, #20]
 8010aa6:	e002      	b.n	8010aae <get_ldnumber+0x24>
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	617b      	str	r3, [r7, #20]
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	2b20      	cmp	r3, #32
 8010ab4:	d903      	bls.n	8010abe <get_ldnumber+0x34>
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2b3a      	cmp	r3, #58	; 0x3a
 8010abc:	d1f4      	bne.n	8010aa8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	2b3a      	cmp	r3, #58	; 0x3a
 8010ac4:	d11c      	bne.n	8010b00 <get_ldnumber+0x76>
			tp = *path;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	1c5a      	adds	r2, r3, #1
 8010ad0:	60fa      	str	r2, [r7, #12]
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	3b30      	subs	r3, #48	; 0x30
 8010ad6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	2b09      	cmp	r3, #9
 8010adc:	d80e      	bhi.n	8010afc <get_ldnumber+0x72>
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d10a      	bne.n	8010afc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d107      	bne.n	8010afc <get_ldnumber+0x72>
					vol = (int)i;
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	3301      	adds	r3, #1
 8010af4:	617b      	str	r3, [r7, #20]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	697a      	ldr	r2, [r7, #20]
 8010afa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	e002      	b.n	8010b06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010b00:	2300      	movs	r3, #0
 8010b02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010b04:	693b      	ldr	r3, [r7, #16]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	371c      	adds	r7, #28
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
	...

08010b14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	70da      	strb	r2, [r3, #3]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f04f 32ff 	mov.w	r2, #4294967295
 8010b2a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010b2c:	6839      	ldr	r1, [r7, #0]
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f7fe ff82 	bl	800fa38 <move_window>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <check_fs+0x2a>
 8010b3a:	2304      	movs	r3, #4
 8010b3c:	e038      	b.n	8010bb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	3334      	adds	r3, #52	; 0x34
 8010b42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fe fc96 	bl	800f478 <ld_word>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	461a      	mov	r2, r3
 8010b50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d001      	beq.n	8010b5c <check_fs+0x48>
 8010b58:	2303      	movs	r3, #3
 8010b5a:	e029      	b.n	8010bb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b62:	2be9      	cmp	r3, #233	; 0xe9
 8010b64:	d009      	beq.n	8010b7a <check_fs+0x66>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b6c:	2beb      	cmp	r3, #235	; 0xeb
 8010b6e:	d11e      	bne.n	8010bae <check_fs+0x9a>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010b76:	2b90      	cmp	r3, #144	; 0x90
 8010b78:	d119      	bne.n	8010bae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	3334      	adds	r3, #52	; 0x34
 8010b7e:	3336      	adds	r3, #54	; 0x36
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fe fc91 	bl	800f4a8 <ld_dword>
 8010b86:	4603      	mov	r3, r0
 8010b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010b8c:	4a0a      	ldr	r2, [pc, #40]	; (8010bb8 <check_fs+0xa4>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d101      	bne.n	8010b96 <check_fs+0x82>
 8010b92:	2300      	movs	r3, #0
 8010b94:	e00c      	b.n	8010bb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	3334      	adds	r3, #52	; 0x34
 8010b9a:	3352      	adds	r3, #82	; 0x52
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fe fc83 	bl	800f4a8 <ld_dword>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	4b05      	ldr	r3, [pc, #20]	; (8010bbc <check_fs+0xa8>)
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d101      	bne.n	8010bae <check_fs+0x9a>
 8010baa:	2300      	movs	r3, #0
 8010bac:	e000      	b.n	8010bb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010bae:	2302      	movs	r3, #2
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	00544146 	.word	0x00544146
 8010bbc:	33544146 	.word	0x33544146

08010bc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b096      	sub	sp, #88	; 0x58
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	4613      	mov	r3, r2
 8010bcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f7ff ff58 	bl	8010a8a <get_ldnumber>
 8010bda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	da01      	bge.n	8010be6 <find_volume+0x26>
 8010be2:	230b      	movs	r3, #11
 8010be4:	e236      	b.n	8011054 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010be6:	4aac      	ldr	r2, [pc, #688]	; (8010e98 <find_volume+0x2d8>)
 8010be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d101      	bne.n	8010bfa <find_volume+0x3a>
 8010bf6:	230c      	movs	r3, #12
 8010bf8:	e22c      	b.n	8011054 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010bfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010bfc:	f7fe fd3b 	bl	800f676 <lock_fs>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d101      	bne.n	8010c0a <find_volume+0x4a>
 8010c06:	230f      	movs	r3, #15
 8010c08:	e224      	b.n	8011054 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010c10:	79fb      	ldrb	r3, [r7, #7]
 8010c12:	f023 0301 	bic.w	r3, r3, #1
 8010c16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d01a      	beq.n	8010c56 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c22:	785b      	ldrb	r3, [r3, #1]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fe fb89 	bl	800f33c <disk_status>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010c30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d10c      	bne.n	8010c56 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d007      	beq.n	8010c52 <find_volume+0x92>
 8010c42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c46:	f003 0304 	and.w	r3, r3, #4
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d001      	beq.n	8010c52 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010c4e:	230a      	movs	r3, #10
 8010c50:	e200      	b.n	8011054 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8010c52:	2300      	movs	r3, #0
 8010c54:	e1fe      	b.n	8011054 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c58:	2200      	movs	r2, #0
 8010c5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c66:	785b      	ldrb	r3, [r3, #1]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7fe fb81 	bl	800f370 <disk_initialize>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010c74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c78:	f003 0301 	and.w	r3, r3, #1
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d001      	beq.n	8010c84 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010c80:	2303      	movs	r3, #3
 8010c82:	e1e7      	b.n	8011054 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010c84:	79fb      	ldrb	r3, [r7, #7]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d007      	beq.n	8010c9a <find_volume+0xda>
 8010c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c8e:	f003 0304 	and.w	r3, r3, #4
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d001      	beq.n	8010c9a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010c96:	230a      	movs	r3, #10
 8010c98:	e1dc      	b.n	8011054 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010c9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ca2:	f7ff ff37 	bl	8010b14 <check_fs>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cb0:	2b02      	cmp	r3, #2
 8010cb2:	d14b      	bne.n	8010d4c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8010cb8:	e01f      	b.n	8010cfa <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cc2:	011b      	lsls	r3, r3, #4
 8010cc4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010cc8:	4413      	add	r3, r2
 8010cca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cce:	3304      	adds	r3, #4
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d006      	beq.n	8010ce4 <find_volume+0x124>
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	3308      	adds	r3, #8
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fe fbe4 	bl	800f4a8 <ld_dword>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	e000      	b.n	8010ce6 <find_volume+0x126>
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010cee:	440b      	add	r3, r1
 8010cf0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8010cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cfc:	2b03      	cmp	r3, #3
 8010cfe:	d9dc      	bls.n	8010cba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010d00:	2300      	movs	r3, #0
 8010d02:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d002      	beq.n	8010d10 <find_volume+0x150>
 8010d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010d18:	4413      	add	r3, r2
 8010d1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010d1e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d005      	beq.n	8010d32 <find_volume+0x172>
 8010d26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d2a:	f7ff fef3 	bl	8010b14 <check_fs>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	e000      	b.n	8010d34 <find_volume+0x174>
 8010d32:	2303      	movs	r3, #3
 8010d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010d38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d905      	bls.n	8010d4c <find_volume+0x18c>
 8010d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d42:	3301      	adds	r3, #1
 8010d44:	643b      	str	r3, [r7, #64]	; 0x40
 8010d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d48:	2b03      	cmp	r3, #3
 8010d4a:	d9e1      	bls.n	8010d10 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d50:	2b04      	cmp	r3, #4
 8010d52:	d101      	bne.n	8010d58 <find_volume+0x198>
 8010d54:	2301      	movs	r3, #1
 8010d56:	e17d      	b.n	8011054 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d901      	bls.n	8010d64 <find_volume+0x1a4>
 8010d60:	230d      	movs	r3, #13
 8010d62:	e177      	b.n	8011054 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d66:	3334      	adds	r3, #52	; 0x34
 8010d68:	330b      	adds	r3, #11
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fe fb84 	bl	800f478 <ld_word>
 8010d70:	4603      	mov	r3, r0
 8010d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d76:	d001      	beq.n	8010d7c <find_volume+0x1bc>
 8010d78:	230d      	movs	r3, #13
 8010d7a:	e16b      	b.n	8011054 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7e:	3334      	adds	r3, #52	; 0x34
 8010d80:	3316      	adds	r3, #22
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fe fb78 	bl	800f478 <ld_word>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d106      	bne.n	8010da0 <find_volume+0x1e0>
 8010d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d94:	3334      	adds	r3, #52	; 0x34
 8010d96:	3324      	adds	r3, #36	; 0x24
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fe fb85 	bl	800f4a8 <ld_dword>
 8010d9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010da4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db2:	789b      	ldrb	r3, [r3, #2]
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d005      	beq.n	8010dc4 <find_volume+0x204>
 8010db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dba:	789b      	ldrb	r3, [r3, #2]
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d001      	beq.n	8010dc4 <find_volume+0x204>
 8010dc0:	230d      	movs	r3, #13
 8010dc2:	e147      	b.n	8011054 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc6:	789b      	ldrb	r3, [r3, #2]
 8010dc8:	461a      	mov	r2, r3
 8010dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dcc:	fb02 f303 	mul.w	r3, r2, r3
 8010dd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ddc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de0:	895b      	ldrh	r3, [r3, #10]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d008      	beq.n	8010df8 <find_volume+0x238>
 8010de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de8:	895b      	ldrh	r3, [r3, #10]
 8010dea:	461a      	mov	r2, r3
 8010dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dee:	895b      	ldrh	r3, [r3, #10]
 8010df0:	3b01      	subs	r3, #1
 8010df2:	4013      	ands	r3, r2
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <find_volume+0x23c>
 8010df8:	230d      	movs	r3, #13
 8010dfa:	e12b      	b.n	8011054 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfe:	3334      	adds	r3, #52	; 0x34
 8010e00:	3311      	adds	r3, #17
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fb38 	bl	800f478 <ld_word>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e12:	891b      	ldrh	r3, [r3, #8]
 8010e14:	f003 030f 	and.w	r3, r3, #15
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d001      	beq.n	8010e22 <find_volume+0x262>
 8010e1e:	230d      	movs	r3, #13
 8010e20:	e118      	b.n	8011054 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e24:	3334      	adds	r3, #52	; 0x34
 8010e26:	3313      	adds	r3, #19
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7fe fb25 	bl	800f478 <ld_word>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d106      	bne.n	8010e46 <find_volume+0x286>
 8010e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3a:	3334      	adds	r3, #52	; 0x34
 8010e3c:	3320      	adds	r3, #32
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fe fb32 	bl	800f4a8 <ld_dword>
 8010e44:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e48:	3334      	adds	r3, #52	; 0x34
 8010e4a:	330e      	adds	r3, #14
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fe fb13 	bl	800f478 <ld_word>
 8010e52:	4603      	mov	r3, r0
 8010e54:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010e56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d101      	bne.n	8010e60 <find_volume+0x2a0>
 8010e5c:	230d      	movs	r3, #13
 8010e5e:	e0f9      	b.n	8011054 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010e60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e64:	4413      	add	r3, r2
 8010e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e68:	8912      	ldrh	r2, [r2, #8]
 8010e6a:	0912      	lsrs	r2, r2, #4
 8010e6c:	b292      	uxth	r2, r2
 8010e6e:	4413      	add	r3, r2
 8010e70:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d201      	bcs.n	8010e7e <find_volume+0x2be>
 8010e7a:	230d      	movs	r3, #13
 8010e7c:	e0ea      	b.n	8011054 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e86:	8952      	ldrh	r2, [r2, #10]
 8010e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d103      	bne.n	8010e9c <find_volume+0x2dc>
 8010e94:	230d      	movs	r3, #13
 8010e96:	e0dd      	b.n	8011054 <find_volume+0x494>
 8010e98:	20000334 	.word	0x20000334
		fmt = FS_FAT32;
 8010e9c:	2303      	movs	r3, #3
 8010e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d802      	bhi.n	8010eb2 <find_volume+0x2f2>
 8010eac:	2302      	movs	r3, #2
 8010eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d802      	bhi.n	8010ec2 <find_volume+0x302>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec4:	1c9a      	adds	r2, r3, #2
 8010ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ecc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ece:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010ed0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ed4:	441a      	add	r2, r3
 8010ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010eda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ede:	441a      	add	r2, r3
 8010ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ee8:	2b03      	cmp	r3, #3
 8010eea:	d11e      	bne.n	8010f2a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eee:	3334      	adds	r3, #52	; 0x34
 8010ef0:	332a      	adds	r3, #42	; 0x2a
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fe fac0 	bl	800f478 <ld_word>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <find_volume+0x342>
 8010efe:	230d      	movs	r3, #13
 8010f00:	e0a8      	b.n	8011054 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f04:	891b      	ldrh	r3, [r3, #8]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d001      	beq.n	8010f0e <find_volume+0x34e>
 8010f0a:	230d      	movs	r3, #13
 8010f0c:	e0a2      	b.n	8011054 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f10:	3334      	adds	r3, #52	; 0x34
 8010f12:	332c      	adds	r3, #44	; 0x2c
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fe fac7 	bl	800f4a8 <ld_dword>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f22:	699b      	ldr	r3, [r3, #24]
 8010f24:	009b      	lsls	r3, r3, #2
 8010f26:	647b      	str	r3, [r7, #68]	; 0x44
 8010f28:	e01f      	b.n	8010f6a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2c:	891b      	ldrh	r3, [r3, #8]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d101      	bne.n	8010f36 <find_volume+0x376>
 8010f32:	230d      	movs	r3, #13
 8010f34:	e08e      	b.n	8011054 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f3c:	441a      	add	r2, r3
 8010f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f40:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f46:	2b02      	cmp	r3, #2
 8010f48:	d103      	bne.n	8010f52 <find_volume+0x392>
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4c:	699b      	ldr	r3, [r3, #24]
 8010f4e:	005b      	lsls	r3, r3, #1
 8010f50:	e00a      	b.n	8010f68 <find_volume+0x3a8>
 8010f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f54:	699a      	ldr	r2, [r3, #24]
 8010f56:	4613      	mov	r3, r2
 8010f58:	005b      	lsls	r3, r3, #1
 8010f5a:	4413      	add	r3, r2
 8010f5c:	085a      	lsrs	r2, r3, #1
 8010f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	f003 0301 	and.w	r3, r3, #1
 8010f66:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010f68:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6c:	69da      	ldr	r2, [r3, #28]
 8010f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010f74:	0a5b      	lsrs	r3, r3, #9
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d201      	bcs.n	8010f7e <find_volume+0x3be>
 8010f7a:	230d      	movs	r3, #13
 8010f7c:	e06a      	b.n	8011054 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f80:	f04f 32ff 	mov.w	r2, #4294967295
 8010f84:	615a      	str	r2, [r3, #20]
 8010f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f88:	695a      	ldr	r2, [r3, #20]
 8010f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f90:	2280      	movs	r2, #128	; 0x80
 8010f92:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f98:	2b03      	cmp	r3, #3
 8010f9a:	d149      	bne.n	8011030 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9e:	3334      	adds	r3, #52	; 0x34
 8010fa0:	3330      	adds	r3, #48	; 0x30
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe fa68 	bl	800f478 <ld_word>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d140      	bne.n	8011030 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fb6:	f7fe fd3f 	bl	800fa38 <move_window>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d137      	bne.n	8011030 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc8:	3334      	adds	r3, #52	; 0x34
 8010fca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe fa52 	bl	800f478 <ld_word>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d127      	bne.n	8011030 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe2:	3334      	adds	r3, #52	; 0x34
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fe fa5f 	bl	800f4a8 <ld_dword>
 8010fea:	4602      	mov	r2, r0
 8010fec:	4b1b      	ldr	r3, [pc, #108]	; (801105c <find_volume+0x49c>)
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d11e      	bne.n	8011030 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	3334      	adds	r3, #52	; 0x34
 8010ff6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fe fa54 	bl	800f4a8 <ld_dword>
 8011000:	4602      	mov	r2, r0
 8011002:	4b17      	ldr	r3, [pc, #92]	; (8011060 <find_volume+0x4a0>)
 8011004:	429a      	cmp	r2, r3
 8011006:	d113      	bne.n	8011030 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100a:	3334      	adds	r3, #52	; 0x34
 801100c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011010:	4618      	mov	r0, r3
 8011012:	f7fe fa49 	bl	800f4a8 <ld_dword>
 8011016:	4602      	mov	r2, r0
 8011018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101e:	3334      	adds	r3, #52	; 0x34
 8011020:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011024:	4618      	mov	r0, r3
 8011026:	f7fe fa3f 	bl	800f4a8 <ld_dword>
 801102a:	4602      	mov	r2, r0
 801102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011036:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011038:	4b0a      	ldr	r3, [pc, #40]	; (8011064 <find_volume+0x4a4>)
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	3301      	adds	r3, #1
 801103e:	b29a      	uxth	r2, r3
 8011040:	4b08      	ldr	r3, [pc, #32]	; (8011064 <find_volume+0x4a4>)
 8011042:	801a      	strh	r2, [r3, #0]
 8011044:	4b07      	ldr	r3, [pc, #28]	; (8011064 <find_volume+0x4a4>)
 8011046:	881a      	ldrh	r2, [r3, #0]
 8011048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801104c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801104e:	f7fe fc8b 	bl	800f968 <clear_lock>
#endif
	return FR_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3758      	adds	r7, #88	; 0x58
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	41615252 	.word	0x41615252
 8011060:	61417272 	.word	0x61417272
 8011064:	20000338 	.word	0x20000338

08011068 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011072:	2309      	movs	r3, #9
 8011074:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d02e      	beq.n	80110da <validate+0x72>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d02a      	beq.n	80110da <validate+0x72>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d025      	beq.n	80110da <validate+0x72>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	889a      	ldrh	r2, [r3, #4]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	88db      	ldrh	r3, [r3, #6]
 8011098:	429a      	cmp	r2, r3
 801109a:	d11e      	bne.n	80110da <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fe fae8 	bl	800f676 <lock_fs>
 80110a6:	4603      	mov	r3, r0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d014      	beq.n	80110d6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	785b      	ldrb	r3, [r3, #1]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fe f942 	bl	800f33c <disk_status>
 80110b8:	4603      	mov	r3, r0
 80110ba:	f003 0301 	and.w	r3, r3, #1
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d102      	bne.n	80110c8 <validate+0x60>
				res = FR_OK;
 80110c2:	2300      	movs	r3, #0
 80110c4:	73fb      	strb	r3, [r7, #15]
 80110c6:	e008      	b.n	80110da <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2100      	movs	r1, #0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fe fae7 	bl	800f6a2 <unlock_fs>
 80110d4:	e001      	b.n	80110da <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80110d6:	230f      	movs	r3, #15
 80110d8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80110da:	7bfb      	ldrb	r3, [r7, #15]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d102      	bne.n	80110e6 <validate+0x7e>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	e000      	b.n	80110e8 <validate+0x80>
 80110e6:	2300      	movs	r3, #0
 80110e8:	683a      	ldr	r2, [r7, #0]
 80110ea:	6013      	str	r3, [r2, #0]
	return res;
 80110ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3710      	adds	r7, #16
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
	...

080110f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	4613      	mov	r3, r2
 8011104:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801110a:	f107 0310 	add.w	r3, r7, #16
 801110e:	4618      	mov	r0, r3
 8011110:	f7ff fcbb 	bl	8010a8a <get_ldnumber>
 8011114:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011116:	69fb      	ldr	r3, [r7, #28]
 8011118:	2b00      	cmp	r3, #0
 801111a:	da01      	bge.n	8011120 <f_mount+0x28>
 801111c:	230b      	movs	r3, #11
 801111e:	e048      	b.n	80111b2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011120:	4a26      	ldr	r2, [pc, #152]	; (80111bc <f_mount+0xc4>)
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011128:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d00f      	beq.n	8011150 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011130:	69b8      	ldr	r0, [r7, #24]
 8011132:	f7fe fc19 	bl	800f968 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	4618      	mov	r0, r3
 801113c:	f001 f828 	bl	8012190 <ff_del_syncobj>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d101      	bne.n	801114a <f_mount+0x52>
 8011146:	2302      	movs	r3, #2
 8011148:	e033      	b.n	80111b2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801114a:	69bb      	ldr	r3, [r7, #24]
 801114c:	2200      	movs	r2, #0
 801114e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00f      	beq.n	8011176 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2200      	movs	r2, #0
 801115a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	b2da      	uxtb	r2, r3
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	330c      	adds	r3, #12
 8011164:	4619      	mov	r1, r3
 8011166:	4610      	mov	r0, r2
 8011168:	f000 fff7 	bl	801215a <ff_cre_syncobj>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <f_mount+0x7e>
 8011172:	2302      	movs	r3, #2
 8011174:	e01d      	b.n	80111b2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	4910      	ldr	r1, [pc, #64]	; (80111bc <f_mount+0xc4>)
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <f_mount+0x94>
 8011186:	79fb      	ldrb	r3, [r7, #7]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d001      	beq.n	8011190 <f_mount+0x98>
 801118c:	2300      	movs	r3, #0
 801118e:	e010      	b.n	80111b2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011190:	f107 010c 	add.w	r1, r7, #12
 8011194:	f107 0308 	add.w	r3, r7, #8
 8011198:	2200      	movs	r2, #0
 801119a:	4618      	mov	r0, r3
 801119c:	f7ff fd10 	bl	8010bc0 <find_volume>
 80111a0:	4603      	mov	r3, r0
 80111a2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	7dfa      	ldrb	r2, [r7, #23]
 80111a8:	4611      	mov	r1, r2
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe fa79 	bl	800f6a2 <unlock_fs>
 80111b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3720      	adds	r7, #32
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	20000334 	.word	0x20000334

080111c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b09a      	sub	sp, #104	; 0x68
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	4613      	mov	r3, r2
 80111cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d101      	bne.n	80111d8 <f_open+0x18>
 80111d4:	2309      	movs	r3, #9
 80111d6:	e1b4      	b.n	8011542 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80111d8:	79fb      	ldrb	r3, [r7, #7]
 80111da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80111e0:	79fa      	ldrb	r2, [r7, #7]
 80111e2:	f107 0114 	add.w	r1, r7, #20
 80111e6:	f107 0308 	add.w	r3, r7, #8
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7ff fce8 	bl	8010bc0 <find_volume>
 80111f0:	4603      	mov	r3, r0
 80111f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80111f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	f040 8191 	bne.w	8011522 <f_open+0x362>
		dj.obj.fs = fs;
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011204:	68ba      	ldr	r2, [r7, #8]
 8011206:	f107 0318 	add.w	r3, r7, #24
 801120a:	4611      	mov	r1, r2
 801120c:	4618      	mov	r0, r3
 801120e:	f7ff fbcb 	bl	80109a8 <follow_path>
 8011212:	4603      	mov	r3, r0
 8011214:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011218:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801121c:	2b00      	cmp	r3, #0
 801121e:	d11a      	bne.n	8011256 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011220:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011224:	b25b      	sxtb	r3, r3
 8011226:	2b00      	cmp	r3, #0
 8011228:	da03      	bge.n	8011232 <f_open+0x72>
				res = FR_INVALID_NAME;
 801122a:	2306      	movs	r3, #6
 801122c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011230:	e011      	b.n	8011256 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011232:	79fb      	ldrb	r3, [r7, #7]
 8011234:	f023 0301 	bic.w	r3, r3, #1
 8011238:	2b00      	cmp	r3, #0
 801123a:	bf14      	ite	ne
 801123c:	2301      	movne	r3, #1
 801123e:	2300      	moveq	r3, #0
 8011240:	b2db      	uxtb	r3, r3
 8011242:	461a      	mov	r2, r3
 8011244:	f107 0318 	add.w	r3, r7, #24
 8011248:	4611      	mov	r1, r2
 801124a:	4618      	mov	r0, r3
 801124c:	f7fe fa44 	bl	800f6d8 <chk_lock>
 8011250:	4603      	mov	r3, r0
 8011252:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011256:	79fb      	ldrb	r3, [r7, #7]
 8011258:	f003 031c 	and.w	r3, r3, #28
 801125c:	2b00      	cmp	r3, #0
 801125e:	d07f      	beq.n	8011360 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011260:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011264:	2b00      	cmp	r3, #0
 8011266:	d017      	beq.n	8011298 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011268:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801126c:	2b04      	cmp	r3, #4
 801126e:	d10e      	bne.n	801128e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011270:	f7fe fa8e 	bl	800f790 <enq_lock>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d006      	beq.n	8011288 <f_open+0xc8>
 801127a:	f107 0318 	add.w	r3, r7, #24
 801127e:	4618      	mov	r0, r3
 8011280:	f7ff f9ca 	bl	8010618 <dir_register>
 8011284:	4603      	mov	r3, r0
 8011286:	e000      	b.n	801128a <f_open+0xca>
 8011288:	2312      	movs	r3, #18
 801128a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	f043 0308 	orr.w	r3, r3, #8
 8011294:	71fb      	strb	r3, [r7, #7]
 8011296:	e010      	b.n	80112ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011298:	7fbb      	ldrb	r3, [r7, #30]
 801129a:	f003 0311 	and.w	r3, r3, #17
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d003      	beq.n	80112aa <f_open+0xea>
					res = FR_DENIED;
 80112a2:	2307      	movs	r3, #7
 80112a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80112a8:	e007      	b.n	80112ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80112aa:	79fb      	ldrb	r3, [r7, #7]
 80112ac:	f003 0304 	and.w	r3, r3, #4
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d002      	beq.n	80112ba <f_open+0xfa>
 80112b4:	2308      	movs	r3, #8
 80112b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80112ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d168      	bne.n	8011394 <f_open+0x1d4>
 80112c2:	79fb      	ldrb	r3, [r7, #7]
 80112c4:	f003 0308 	and.w	r3, r3, #8
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d063      	beq.n	8011394 <f_open+0x1d4>
				dw = GET_FATTIME();
 80112cc:	f7fc f9b4 	bl	800d638 <get_fattime>
 80112d0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80112d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d4:	330e      	adds	r3, #14
 80112d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fe f923 	bl	800f524 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	3316      	adds	r3, #22
 80112e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fe f91d 	bl	800f524 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80112ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ec:	330b      	adds	r3, #11
 80112ee:	2220      	movs	r2, #32
 80112f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112f6:	4611      	mov	r1, r2
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7ff f89c 	bl	8010436 <ld_clust>
 80112fe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011304:	2200      	movs	r2, #0
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff f8b4 	bl	8010474 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130e:	331c      	adds	r3, #28
 8011310:	2100      	movs	r1, #0
 8011312:	4618      	mov	r0, r3
 8011314:	f7fe f906 	bl	800f524 <st_dword>
					fs->wflag = 1;
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	2201      	movs	r2, #1
 801131c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011320:	2b00      	cmp	r3, #0
 8011322:	d037      	beq.n	8011394 <f_open+0x1d4>
						dw = fs->winsect;
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011328:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801132a:	f107 0318 	add.w	r3, r7, #24
 801132e:	2200      	movs	r2, #0
 8011330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe fdc7 	bl	800fec6 <remove_chain>
 8011338:	4603      	mov	r3, r0
 801133a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801133e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011342:	2b00      	cmp	r3, #0
 8011344:	d126      	bne.n	8011394 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801134a:	4618      	mov	r0, r3
 801134c:	f7fe fb74 	bl	800fa38 <move_window>
 8011350:	4603      	mov	r3, r0
 8011352:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801135a:	3a01      	subs	r2, #1
 801135c:	611a      	str	r2, [r3, #16]
 801135e:	e019      	b.n	8011394 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011364:	2b00      	cmp	r3, #0
 8011366:	d115      	bne.n	8011394 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011368:	7fbb      	ldrb	r3, [r7, #30]
 801136a:	f003 0310 	and.w	r3, r3, #16
 801136e:	2b00      	cmp	r3, #0
 8011370:	d003      	beq.n	801137a <f_open+0x1ba>
					res = FR_NO_FILE;
 8011372:	2304      	movs	r3, #4
 8011374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011378:	e00c      	b.n	8011394 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801137a:	79fb      	ldrb	r3, [r7, #7]
 801137c:	f003 0302 	and.w	r3, r3, #2
 8011380:	2b00      	cmp	r3, #0
 8011382:	d007      	beq.n	8011394 <f_open+0x1d4>
 8011384:	7fbb      	ldrb	r3, [r7, #30]
 8011386:	f003 0301 	and.w	r3, r3, #1
 801138a:	2b00      	cmp	r3, #0
 801138c:	d002      	beq.n	8011394 <f_open+0x1d4>
						res = FR_DENIED;
 801138e:	2307      	movs	r3, #7
 8011390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011398:	2b00      	cmp	r3, #0
 801139a:	d128      	bne.n	80113ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801139c:	79fb      	ldrb	r3, [r7, #7]
 801139e:	f003 0308 	and.w	r3, r3, #8
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d003      	beq.n	80113ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80113a6:	79fb      	ldrb	r3, [r7, #7]
 80113a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80113b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	f023 0301 	bic.w	r3, r3, #1
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	bf14      	ite	ne
 80113c6:	2301      	movne	r3, #1
 80113c8:	2300      	moveq	r3, #0
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	461a      	mov	r2, r3
 80113ce:	f107 0318 	add.w	r3, r7, #24
 80113d2:	4611      	mov	r1, r2
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fe f9fd 	bl	800f7d4 <inc_lock>
 80113da:	4602      	mov	r2, r0
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	691b      	ldr	r3, [r3, #16]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d102      	bne.n	80113ee <f_open+0x22e>
 80113e8:	2302      	movs	r3, #2
 80113ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80113ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f040 8095 	bne.w	8011522 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113fc:	4611      	mov	r1, r2
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff f819 	bl	8010436 <ld_clust>
 8011404:	4602      	mov	r2, r0
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801140a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140c:	331c      	adds	r3, #28
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe f84a 	bl	800f4a8 <ld_dword>
 8011414:	4602      	mov	r2, r0
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2200      	movs	r2, #0
 801141e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011420:	697a      	ldr	r2, [r7, #20]
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	88da      	ldrh	r2, [r3, #6]
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	79fa      	ldrb	r2, [r7, #7]
 8011432:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2200      	movs	r2, #0
 8011438:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2200      	movs	r2, #0
 801143e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2200      	movs	r2, #0
 8011444:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	3330      	adds	r3, #48	; 0x30
 801144a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801144e:	2100      	movs	r1, #0
 8011450:	4618      	mov	r0, r3
 8011452:	f7fe f8b4 	bl	800f5be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	f003 0320 	and.w	r3, r3, #32
 801145c:	2b00      	cmp	r3, #0
 801145e:	d060      	beq.n	8011522 <f_open+0x362>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d05c      	beq.n	8011522 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	68da      	ldr	r2, [r3, #12]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	895b      	ldrh	r3, [r3, #10]
 8011474:	025b      	lsls	r3, r3, #9
 8011476:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	689b      	ldr	r3, [r3, #8]
 801147c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011484:	e016      	b.n	80114b4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801148a:	4618      	mov	r0, r3
 801148c:	f7fe fb8f 	bl	800fbae <get_fat>
 8011490:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011494:	2b01      	cmp	r3, #1
 8011496:	d802      	bhi.n	801149e <f_open+0x2de>
 8011498:	2302      	movs	r3, #2
 801149a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801149e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80114a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114a4:	d102      	bne.n	80114ac <f_open+0x2ec>
 80114a6:	2301      	movs	r3, #1
 80114a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80114ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114b0:	1ad3      	subs	r3, r2, r3
 80114b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80114b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d103      	bne.n	80114c4 <f_open+0x304>
 80114bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d8e0      	bhi.n	8011486 <f_open+0x2c6>
				}
				fp->clust = clst;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80114ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d127      	bne.n	8011522 <f_open+0x362>
 80114d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d022      	beq.n	8011522 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7fe fb45 	bl	800fb70 <clust2sect>
 80114e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80114e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d103      	bne.n	80114f6 <f_open+0x336>
						res = FR_INT_ERR;
 80114ee:	2302      	movs	r3, #2
 80114f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80114f4:	e015      	b.n	8011522 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80114f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114f8:	0a5a      	lsrs	r2, r3, #9
 80114fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114fc:	441a      	add	r2, r3
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	7858      	ldrb	r0, [r3, #1]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	6a1a      	ldr	r2, [r3, #32]
 8011510:	2301      	movs	r3, #1
 8011512:	f7fd ff53 	bl	800f3bc <disk_read>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <f_open+0x362>
 801151c:	2301      	movs	r3, #1
 801151e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011526:	2b00      	cmp	r3, #0
 8011528:	d002      	beq.n	8011530 <f_open+0x370>
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2200      	movs	r2, #0
 801152e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8011536:	4611      	mov	r1, r2
 8011538:	4618      	mov	r0, r3
 801153a:	f7fe f8b2 	bl	800f6a2 <unlock_fs>
 801153e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011542:	4618      	mov	r0, r3
 8011544:	3768      	adds	r7, #104	; 0x68
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801154a:	b580      	push	{r7, lr}
 801154c:	b08c      	sub	sp, #48	; 0x30
 801154e:	af00      	add	r7, sp, #0
 8011550:	60f8      	str	r0, [r7, #12]
 8011552:	60b9      	str	r1, [r7, #8]
 8011554:	607a      	str	r2, [r7, #4]
 8011556:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	2200      	movs	r2, #0
 8011560:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f107 0210 	add.w	r2, r7, #16
 8011568:	4611      	mov	r1, r2
 801156a:	4618      	mov	r0, r3
 801156c:	f7ff fd7c 	bl	8011068 <validate>
 8011570:	4603      	mov	r3, r0
 8011572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801157a:	2b00      	cmp	r3, #0
 801157c:	d107      	bne.n	801158e <f_write+0x44>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	7d5b      	ldrb	r3, [r3, #21]
 8011582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801158a:	2b00      	cmp	r3, #0
 801158c:	d009      	beq.n	80115a2 <f_write+0x58>
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7fe f883 	bl	800f6a2 <unlock_fs>
 801159c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115a0:	e173      	b.n	801188a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	7d1b      	ldrb	r3, [r3, #20]
 80115a6:	f003 0302 	and.w	r3, r3, #2
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d106      	bne.n	80115bc <f_write+0x72>
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	2107      	movs	r1, #7
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fe f875 	bl	800f6a2 <unlock_fs>
 80115b8:	2307      	movs	r3, #7
 80115ba:	e166      	b.n	801188a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	699a      	ldr	r2, [r3, #24]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	441a      	add	r2, r3
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	699b      	ldr	r3, [r3, #24]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	f080 814b 	bcs.w	8011864 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	699b      	ldr	r3, [r3, #24]
 80115d2:	43db      	mvns	r3, r3
 80115d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80115d6:	e145      	b.n	8011864 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f040 8101 	bne.w	80117e8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	699b      	ldr	r3, [r3, #24]
 80115ea:	0a5b      	lsrs	r3, r3, #9
 80115ec:	693a      	ldr	r2, [r7, #16]
 80115ee:	8952      	ldrh	r2, [r2, #10]
 80115f0:	3a01      	subs	r2, #1
 80115f2:	4013      	ands	r3, r2
 80115f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d14d      	bne.n	8011698 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	699b      	ldr	r3, [r3, #24]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d10c      	bne.n	801161e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	689b      	ldr	r3, [r3, #8]
 8011608:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160c:	2b00      	cmp	r3, #0
 801160e:	d11a      	bne.n	8011646 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2100      	movs	r1, #0
 8011614:	4618      	mov	r0, r3
 8011616:	f7fe fcbb 	bl	800ff90 <create_chain>
 801161a:	62b8      	str	r0, [r7, #40]	; 0x28
 801161c:	e013      	b.n	8011646 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011622:	2b00      	cmp	r3, #0
 8011624:	d007      	beq.n	8011636 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	4619      	mov	r1, r3
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7fe fd47 	bl	80100c0 <clmt_clust>
 8011632:	62b8      	str	r0, [r7, #40]	; 0x28
 8011634:	e007      	b.n	8011646 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011636:	68fa      	ldr	r2, [r7, #12]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	69db      	ldr	r3, [r3, #28]
 801163c:	4619      	mov	r1, r3
 801163e:	4610      	mov	r0, r2
 8011640:	f7fe fca6 	bl	800ff90 <create_chain>
 8011644:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 8110 	beq.w	801186e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	2b01      	cmp	r3, #1
 8011652:	d109      	bne.n	8011668 <f_write+0x11e>
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2202      	movs	r2, #2
 8011658:	755a      	strb	r2, [r3, #21]
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	2102      	movs	r1, #2
 801165e:	4618      	mov	r0, r3
 8011660:	f7fe f81f 	bl	800f6a2 <unlock_fs>
 8011664:	2302      	movs	r3, #2
 8011666:	e110      	b.n	801188a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166e:	d109      	bne.n	8011684 <f_write+0x13a>
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2201      	movs	r2, #1
 8011674:	755a      	strb	r2, [r3, #21]
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	2101      	movs	r1, #1
 801167a:	4618      	mov	r0, r3
 801167c:	f7fe f811 	bl	800f6a2 <unlock_fs>
 8011680:	2301      	movs	r3, #1
 8011682:	e102      	b.n	801188a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011688:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d102      	bne.n	8011698 <f_write+0x14e>
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011696:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	7d1b      	ldrb	r3, [r3, #20]
 801169c:	b25b      	sxtb	r3, r3
 801169e:	2b00      	cmp	r3, #0
 80116a0:	da1d      	bge.n	80116de <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	7858      	ldrb	r0, [r3, #1]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6a1a      	ldr	r2, [r3, #32]
 80116b0:	2301      	movs	r3, #1
 80116b2:	f7fd fea3 	bl	800f3fc <disk_write>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d009      	beq.n	80116d0 <f_write+0x186>
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2201      	movs	r2, #1
 80116c0:	755a      	strb	r2, [r3, #21]
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	2101      	movs	r1, #1
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fd ffeb 	bl	800f6a2 <unlock_fs>
 80116cc:	2301      	movs	r3, #1
 80116ce:	e0dc      	b.n	801188a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	7d1b      	ldrb	r3, [r3, #20]
 80116d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80116de:	693a      	ldr	r2, [r7, #16]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	69db      	ldr	r3, [r3, #28]
 80116e4:	4619      	mov	r1, r3
 80116e6:	4610      	mov	r0, r2
 80116e8:	f7fe fa42 	bl	800fb70 <clust2sect>
 80116ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d109      	bne.n	8011708 <f_write+0x1be>
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2202      	movs	r2, #2
 80116f8:	755a      	strb	r2, [r3, #21]
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	2102      	movs	r1, #2
 80116fe:	4618      	mov	r0, r3
 8011700:	f7fd ffcf 	bl	800f6a2 <unlock_fs>
 8011704:	2302      	movs	r3, #2
 8011706:	e0c0      	b.n	801188a <f_write+0x340>
			sect += csect;
 8011708:	697a      	ldr	r2, [r7, #20]
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	4413      	add	r3, r2
 801170e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	0a5b      	lsrs	r3, r3, #9
 8011714:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011716:	6a3b      	ldr	r3, [r7, #32]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d041      	beq.n	80117a0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801171c:	69ba      	ldr	r2, [r7, #24]
 801171e:	6a3b      	ldr	r3, [r7, #32]
 8011720:	4413      	add	r3, r2
 8011722:	693a      	ldr	r2, [r7, #16]
 8011724:	8952      	ldrh	r2, [r2, #10]
 8011726:	4293      	cmp	r3, r2
 8011728:	d905      	bls.n	8011736 <f_write+0x1ec>
					cc = fs->csize - csect;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	895b      	ldrh	r3, [r3, #10]
 801172e:	461a      	mov	r2, r3
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	7858      	ldrb	r0, [r3, #1]
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	69f9      	ldr	r1, [r7, #28]
 8011740:	f7fd fe5c 	bl	800f3fc <disk_write>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d009      	beq.n	801175e <f_write+0x214>
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2201      	movs	r2, #1
 801174e:	755a      	strb	r2, [r3, #21]
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	2101      	movs	r1, #1
 8011754:	4618      	mov	r0, r3
 8011756:	f7fd ffa4 	bl	800f6a2 <unlock_fs>
 801175a:	2301      	movs	r3, #1
 801175c:	e095      	b.n	801188a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	6a1a      	ldr	r2, [r3, #32]
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	6a3a      	ldr	r2, [r7, #32]
 8011768:	429a      	cmp	r2, r3
 801176a:	d915      	bls.n	8011798 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6a1a      	ldr	r2, [r3, #32]
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	025b      	lsls	r3, r3, #9
 801177c:	69fa      	ldr	r2, [r7, #28]
 801177e:	4413      	add	r3, r2
 8011780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011784:	4619      	mov	r1, r3
 8011786:	f7fd fef9 	bl	800f57c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	7d1b      	ldrb	r3, [r3, #20]
 801178e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011792:	b2da      	uxtb	r2, r3
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	025b      	lsls	r3, r3, #9
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801179e:	e044      	b.n	801182a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	6a1b      	ldr	r3, [r3, #32]
 80117a4:	697a      	ldr	r2, [r7, #20]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d01b      	beq.n	80117e2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	699a      	ldr	r2, [r3, #24]
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d215      	bcs.n	80117e2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	7858      	ldrb	r0, [r3, #1]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117c0:	2301      	movs	r3, #1
 80117c2:	697a      	ldr	r2, [r7, #20]
 80117c4:	f7fd fdfa 	bl	800f3bc <disk_read>
 80117c8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d009      	beq.n	80117e2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2201      	movs	r2, #1
 80117d2:	755a      	strb	r2, [r3, #21]
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	2101      	movs	r1, #1
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fd ff62 	bl	800f6a2 <unlock_fs>
 80117de:	2301      	movs	r3, #1
 80117e0:	e053      	b.n	801188a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	697a      	ldr	r2, [r7, #20]
 80117e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80117f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80117f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d901      	bls.n	8011802 <f_write+0x2b8>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	699b      	ldr	r3, [r3, #24]
 801180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011810:	4413      	add	r3, r2
 8011812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011814:	69f9      	ldr	r1, [r7, #28]
 8011816:	4618      	mov	r0, r3
 8011818:	f7fd feb0 	bl	800f57c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	7d1b      	ldrb	r3, [r3, #20]
 8011820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011824:	b2da      	uxtb	r2, r3
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801182a:	69fa      	ldr	r2, [r7, #28]
 801182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182e:	4413      	add	r3, r2
 8011830:	61fb      	str	r3, [r7, #28]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	699a      	ldr	r2, [r3, #24]
 8011836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011838:	441a      	add	r2, r3
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	619a      	str	r2, [r3, #24]
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	68da      	ldr	r2, [r3, #12]
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	699b      	ldr	r3, [r3, #24]
 8011846:	429a      	cmp	r2, r3
 8011848:	bf38      	it	cc
 801184a:	461a      	movcc	r2, r3
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	60da      	str	r2, [r3, #12]
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011856:	441a      	add	r2, r3
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	601a      	str	r2, [r3, #0]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	f47f aeb6 	bne.w	80115d8 <f_write+0x8e>
 801186c:	e000      	b.n	8011870 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801186e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	7d1b      	ldrb	r3, [r3, #20]
 8011874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011878:	b2da      	uxtb	r2, r3
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	2100      	movs	r1, #0
 8011882:	4618      	mov	r0, r3
 8011884:	f7fd ff0d 	bl	800f6a2 <unlock_fs>
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3730      	adds	r7, #48	; 0x30
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b086      	sub	sp, #24
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f107 0208 	add.w	r2, r7, #8
 80118a0:	4611      	mov	r1, r2
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7ff fbe0 	bl	8011068 <validate>
 80118a8:	4603      	mov	r3, r0
 80118aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80118ac:	7dfb      	ldrb	r3, [r7, #23]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d16d      	bne.n	801198e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7d1b      	ldrb	r3, [r3, #20]
 80118b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d067      	beq.n	801198e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	7d1b      	ldrb	r3, [r3, #20]
 80118c2:	b25b      	sxtb	r3, r3
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	da1a      	bge.n	80118fe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	7858      	ldrb	r0, [r3, #1]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6a1a      	ldr	r2, [r3, #32]
 80118d6:	2301      	movs	r3, #1
 80118d8:	f7fd fd90 	bl	800f3fc <disk_write>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d006      	beq.n	80118f0 <f_sync+0x5e>
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2101      	movs	r1, #1
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fd fedb 	bl	800f6a2 <unlock_fs>
 80118ec:	2301      	movs	r3, #1
 80118ee:	e055      	b.n	801199c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	7d1b      	ldrb	r3, [r3, #20]
 80118f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80118fe:	f7fb fe9b 	bl	800d638 <get_fattime>
 8011902:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190a:	4619      	mov	r1, r3
 801190c:	4610      	mov	r0, r2
 801190e:	f7fe f893 	bl	800fa38 <move_window>
 8011912:	4603      	mov	r3, r0
 8011914:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011916:	7dfb      	ldrb	r3, [r7, #23]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d138      	bne.n	801198e <f_sync+0xfc>
					dir = fp->dir_ptr;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011920:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	330b      	adds	r3, #11
 8011926:	781a      	ldrb	r2, [r3, #0]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	330b      	adds	r3, #11
 801192c:	f042 0220 	orr.w	r2, r2, #32
 8011930:	b2d2      	uxtb	r2, r2
 8011932:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6818      	ldr	r0, [r3, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	461a      	mov	r2, r3
 801193e:	68f9      	ldr	r1, [r7, #12]
 8011940:	f7fe fd98 	bl	8010474 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	f103 021c 	add.w	r2, r3, #28
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	4619      	mov	r1, r3
 8011950:	4610      	mov	r0, r2
 8011952:	f7fd fde7 	bl	800f524 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	3316      	adds	r3, #22
 801195a:	6939      	ldr	r1, [r7, #16]
 801195c:	4618      	mov	r0, r3
 801195e:	f7fd fde1 	bl	800f524 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	3312      	adds	r3, #18
 8011966:	2100      	movs	r1, #0
 8011968:	4618      	mov	r0, r3
 801196a:	f7fd fdc0 	bl	800f4ee <st_word>
					fs->wflag = 1;
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	2201      	movs	r2, #1
 8011972:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	4618      	mov	r0, r3
 8011978:	f7fe f88c 	bl	800fa94 <sync_fs>
 801197c:	4603      	mov	r3, r0
 801197e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	7d1b      	ldrb	r3, [r3, #20]
 8011984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011988:	b2da      	uxtb	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	7dfa      	ldrb	r2, [r7, #23]
 8011992:	4611      	mov	r1, r2
 8011994:	4618      	mov	r0, r3
 8011996:	f7fd fe84 	bl	800f6a2 <unlock_fs>
 801199a:	7dfb      	ldrb	r3, [r7, #23]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3718      	adds	r7, #24
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b090      	sub	sp, #64	; 0x40
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f107 0208 	add.w	r2, r7, #8
 80119b4:	4611      	mov	r1, r2
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7ff fb56 	bl	8011068 <validate>
 80119bc:	4603      	mov	r3, r0
 80119be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80119c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d103      	bne.n	80119d2 <f_lseek+0x2e>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	7d5b      	ldrb	r3, [r3, #21]
 80119ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80119d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d009      	beq.n	80119ee <f_lseek+0x4a>
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80119e0:	4611      	mov	r1, r2
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fd fe5d 	bl	800f6a2 <unlock_fs>
 80119e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119ec:	e229      	b.n	8011e42 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	f000 80ea 	beq.w	8011bcc <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119fe:	d164      	bne.n	8011aca <f_lseek+0x126>
			tbl = fp->cltbl;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a04:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a08:	1d1a      	adds	r2, r3, #4
 8011a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	617b      	str	r3, [r7, #20]
 8011a10:	2302      	movs	r3, #2
 8011a12:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	689b      	ldr	r3, [r3, #8]
 8011a18:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d044      	beq.n	8011aaa <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a22:	613b      	str	r3, [r7, #16]
 8011a24:	2300      	movs	r3, #0
 8011a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2a:	3302      	adds	r3, #2
 8011a2c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a30:	60fb      	str	r3, [r7, #12]
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	3301      	adds	r3, #1
 8011a36:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fe f8b6 	bl	800fbae <get_fat>
 8011a42:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d809      	bhi.n	8011a5e <f_lseek+0xba>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2202      	movs	r2, #2
 8011a4e:	755a      	strb	r2, [r3, #21]
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	2102      	movs	r1, #2
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fd fe24 	bl	800f6a2 <unlock_fs>
 8011a5a:	2302      	movs	r3, #2
 8011a5c:	e1f1      	b.n	8011e42 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a64:	d109      	bne.n	8011a7a <f_lseek+0xd6>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	755a      	strb	r2, [r3, #21]
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	2101      	movs	r1, #1
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7fd fe16 	bl	800f6a2 <unlock_fs>
 8011a76:	2301      	movs	r3, #1
 8011a78:	e1e3      	b.n	8011e42 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d0d4      	beq.n	8011a2e <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d809      	bhi.n	8011aa0 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	1d1a      	adds	r2, r3, #4
 8011a90:	627a      	str	r2, [r7, #36]	; 0x24
 8011a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a94:	601a      	str	r2, [r3, #0]
 8011a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a98:	1d1a      	adds	r2, r3, #4
 8011a9a:	627a      	str	r2, [r7, #36]	; 0x24
 8011a9c:	693a      	ldr	r2, [r7, #16]
 8011a9e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	699b      	ldr	r3, [r3, #24]
 8011aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d3ba      	bcc.n	8011a20 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ab0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d803      	bhi.n	8011ac2 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abc:	2200      	movs	r2, #0
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	e1b6      	b.n	8011e30 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011ac2:	2311      	movs	r3, #17
 8011ac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011ac8:	e1b2      	b.n	8011e30 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	68db      	ldr	r3, [r3, #12]
 8011ace:	683a      	ldr	r2, [r7, #0]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d902      	bls.n	8011ada <f_lseek+0x136>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	f000 81a4 	beq.w	8011e30 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	3b01      	subs	r3, #1
 8011aec:	4619      	mov	r1, r3
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f7fe fae6 	bl	80100c0 <clmt_clust>
 8011af4:	4602      	mov	r2, r0
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011afa:	68ba      	ldr	r2, [r7, #8]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	69db      	ldr	r3, [r3, #28]
 8011b00:	4619      	mov	r1, r3
 8011b02:	4610      	mov	r0, r2
 8011b04:	f7fe f834 	bl	800fb70 <clust2sect>
 8011b08:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d109      	bne.n	8011b24 <f_lseek+0x180>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2202      	movs	r2, #2
 8011b14:	755a      	strb	r2, [r3, #21]
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	2102      	movs	r1, #2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fd fdc1 	bl	800f6a2 <unlock_fs>
 8011b20:	2302      	movs	r3, #2
 8011b22:	e18e      	b.n	8011e42 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	3b01      	subs	r3, #1
 8011b28:	0a5b      	lsrs	r3, r3, #9
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	8952      	ldrh	r2, [r2, #10]
 8011b2e:	3a01      	subs	r2, #1
 8011b30:	4013      	ands	r3, r2
 8011b32:	69ba      	ldr	r2, [r7, #24]
 8011b34:	4413      	add	r3, r2
 8011b36:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	699b      	ldr	r3, [r3, #24]
 8011b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f000 8175 	beq.w	8011e30 <f_lseek+0x48c>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6a1b      	ldr	r3, [r3, #32]
 8011b4a:	69ba      	ldr	r2, [r7, #24]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	f000 816f 	beq.w	8011e30 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	7d1b      	ldrb	r3, [r3, #20]
 8011b56:	b25b      	sxtb	r3, r3
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	da1d      	bge.n	8011b98 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	7858      	ldrb	r0, [r3, #1]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6a1a      	ldr	r2, [r3, #32]
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	f7fd fc46 	bl	800f3fc <disk_write>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d009      	beq.n	8011b8a <f_lseek+0x1e6>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	755a      	strb	r2, [r3, #21]
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	2101      	movs	r1, #1
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fd fd8e 	bl	800f6a2 <unlock_fs>
 8011b86:	2301      	movs	r3, #1
 8011b88:	e15b      	b.n	8011e42 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	7d1b      	ldrb	r3, [r3, #20]
 8011b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	7858      	ldrb	r0, [r3, #1]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	69ba      	ldr	r2, [r7, #24]
 8011ba6:	f7fd fc09 	bl	800f3bc <disk_read>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d009      	beq.n	8011bc4 <f_lseek+0x220>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	755a      	strb	r2, [r3, #21]
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	2101      	movs	r1, #1
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fd fd71 	bl	800f6a2 <unlock_fs>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e13e      	b.n	8011e42 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	69ba      	ldr	r2, [r7, #24]
 8011bc8:	621a      	str	r2, [r3, #32]
 8011bca:	e131      	b.n	8011e30 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	683a      	ldr	r2, [r7, #0]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d908      	bls.n	8011be8 <f_lseek+0x244>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	7d1b      	ldrb	r3, [r3, #20]
 8011bda:	f003 0302 	and.w	r3, r3, #2
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d102      	bne.n	8011be8 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	699b      	ldr	r3, [r3, #24]
 8011bec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bf6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	f000 80c0 	beq.w	8011d80 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	895b      	ldrh	r3, [r3, #10]
 8011c04:	025b      	lsls	r3, r3, #9
 8011c06:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011c08:	6a3b      	ldr	r3, [r7, #32]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d01b      	beq.n	8011c46 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	1e5a      	subs	r2, r3, #1
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c18:	6a3b      	ldr	r3, [r7, #32]
 8011c1a:	1e59      	subs	r1, r3, #1
 8011c1c:	69fb      	ldr	r3, [r7, #28]
 8011c1e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d30f      	bcc.n	8011c46 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	1e5a      	subs	r2, r3, #1
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	425b      	negs	r3, r3
 8011c2e:	401a      	ands	r2, r3
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	699b      	ldr	r3, [r3, #24]
 8011c38:	683a      	ldr	r2, [r7, #0]
 8011c3a:	1ad3      	subs	r3, r2, r3
 8011c3c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	69db      	ldr	r3, [r3, #28]
 8011c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c44:	e02c      	b.n	8011ca0 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	689b      	ldr	r3, [r3, #8]
 8011c4a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d123      	bne.n	8011c9a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2100      	movs	r1, #0
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fe f99a 	bl	800ff90 <create_chain>
 8011c5c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d109      	bne.n	8011c78 <f_lseek+0x2d4>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2202      	movs	r2, #2
 8011c68:	755a      	strb	r2, [r3, #21]
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	2102      	movs	r1, #2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7fd fd17 	bl	800f6a2 <unlock_fs>
 8011c74:	2302      	movs	r3, #2
 8011c76:	e0e4      	b.n	8011e42 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c7e:	d109      	bne.n	8011c94 <f_lseek+0x2f0>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2201      	movs	r2, #1
 8011c84:	755a      	strb	r2, [r3, #21]
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	2101      	movs	r1, #1
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7fd fd09 	bl	800f6a2 <unlock_fs>
 8011c90:	2301      	movs	r3, #1
 8011c92:	e0d6      	b.n	8011e42 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c98:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c9e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d06c      	beq.n	8011d80 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011ca6:	e044      	b.n	8011d32 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011ca8:	683a      	ldr	r2, [r7, #0]
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	603b      	str	r3, [r7, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	699a      	ldr	r2, [r3, #24]
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	441a      	add	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	7d1b      	ldrb	r3, [r3, #20]
 8011cc0:	f003 0302 	and.w	r3, r3, #2
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d00b      	beq.n	8011ce0 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fe f95f 	bl	800ff90 <create_chain>
 8011cd2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d108      	bne.n	8011cec <f_lseek+0x348>
							ofs = 0; break;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	603b      	str	r3, [r7, #0]
 8011cde:	e02c      	b.n	8011d3a <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fd ff62 	bl	800fbae <get_fat>
 8011cea:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cf2:	d109      	bne.n	8011d08 <f_lseek+0x364>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	755a      	strb	r2, [r3, #21]
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fd fccf 	bl	800f6a2 <unlock_fs>
 8011d04:	2301      	movs	r3, #1
 8011d06:	e09c      	b.n	8011e42 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d904      	bls.n	8011d18 <f_lseek+0x374>
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	699b      	ldr	r3, [r3, #24]
 8011d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d309      	bcc.n	8011d2c <f_lseek+0x388>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2202      	movs	r2, #2
 8011d1c:	755a      	strb	r2, [r3, #21]
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	2102      	movs	r1, #2
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fd fcbd 	bl	800f6a2 <unlock_fs>
 8011d28:	2302      	movs	r3, #2
 8011d2a:	e08a      	b.n	8011e42 <f_lseek+0x49e>
					fp->clust = clst;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d30:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011d32:	683a      	ldr	r2, [r7, #0]
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d8b6      	bhi.n	8011ca8 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	699a      	ldr	r2, [r3, #24]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	441a      	add	r2, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d017      	beq.n	8011d80 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fd ff0b 	bl	800fb70 <clust2sect>
 8011d5a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d109      	bne.n	8011d76 <f_lseek+0x3d2>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2202      	movs	r2, #2
 8011d66:	755a      	strb	r2, [r3, #21]
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	2102      	movs	r1, #2
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7fd fc98 	bl	800f6a2 <unlock_fs>
 8011d72:	2302      	movs	r3, #2
 8011d74:	e065      	b.n	8011e42 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	0a5b      	lsrs	r3, r3, #9
 8011d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d7c:	4413      	add	r3, r2
 8011d7e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	699a      	ldr	r2, [r3, #24]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d90a      	bls.n	8011da2 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	699a      	ldr	r2, [r3, #24]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	7d1b      	ldrb	r3, [r3, #20]
 8011d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d9c:	b2da      	uxtb	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	699b      	ldr	r3, [r3, #24]
 8011da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d040      	beq.n	8011e30 <f_lseek+0x48c>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6a1b      	ldr	r3, [r3, #32]
 8011db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d03b      	beq.n	8011e30 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	7d1b      	ldrb	r3, [r3, #20]
 8011dbc:	b25b      	sxtb	r3, r3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	da1d      	bge.n	8011dfe <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	7858      	ldrb	r0, [r3, #1]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6a1a      	ldr	r2, [r3, #32]
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	f7fd fb13 	bl	800f3fc <disk_write>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d009      	beq.n	8011df0 <f_lseek+0x44c>
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2201      	movs	r2, #1
 8011de0:	755a      	strb	r2, [r3, #21]
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2101      	movs	r1, #1
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fd fc5b 	bl	800f6a2 <unlock_fs>
 8011dec:	2301      	movs	r3, #1
 8011dee:	e028      	b.n	8011e42 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	7d1b      	ldrb	r3, [r3, #20]
 8011df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011df8:	b2da      	uxtb	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	7858      	ldrb	r0, [r3, #1]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e08:	2301      	movs	r3, #1
 8011e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e0c:	f7fd fad6 	bl	800f3bc <disk_read>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d009      	beq.n	8011e2a <f_lseek+0x486>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	755a      	strb	r2, [r3, #21]
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2101      	movs	r1, #1
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fd fc3e 	bl	800f6a2 <unlock_fs>
 8011e26:	2301      	movs	r3, #1
 8011e28:	e00b      	b.n	8011e42 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e2e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011e36:	4611      	mov	r1, r2
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7fd fc32 	bl	800f6a2 <unlock_fs>
 8011e3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3740      	adds	r7, #64	; 0x40
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011e4a:	b580      	push	{r7, lr}
 8011e4c:	b086      	sub	sp, #24
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
 8011e52:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d101      	bne.n	8011e5e <f_opendir+0x14>
 8011e5a:	2309      	movs	r3, #9
 8011e5c:	e06a      	b.n	8011f34 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011e62:	f107 010c 	add.w	r1, r7, #12
 8011e66:	463b      	mov	r3, r7
 8011e68:	2200      	movs	r2, #0
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7fe fea8 	bl	8010bc0 <find_volume>
 8011e70:	4603      	mov	r3, r0
 8011e72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011e74:	7dfb      	ldrb	r3, [r7, #23]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d14f      	bne.n	8011f1a <f_opendir+0xd0>
		obj->fs = fs;
 8011e7a:	68fa      	ldr	r2, [r7, #12]
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	4619      	mov	r1, r3
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7fe fd8f 	bl	80109a8 <follow_path>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011e8e:	7dfb      	ldrb	r3, [r7, #23]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d13d      	bne.n	8011f10 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e9a:	b25b      	sxtb	r3, r3
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	db12      	blt.n	8011ec6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	799b      	ldrb	r3, [r3, #6]
 8011ea4:	f003 0310 	and.w	r3, r3, #16
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00a      	beq.n	8011ec2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6a1b      	ldr	r3, [r3, #32]
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	4610      	mov	r0, r2
 8011eb6:	f7fe fabe 	bl	8010436 <ld_clust>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	609a      	str	r2, [r3, #8]
 8011ec0:	e001      	b.n	8011ec6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011ec2:	2305      	movs	r3, #5
 8011ec4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011ec6:	7dfb      	ldrb	r3, [r7, #23]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d121      	bne.n	8011f10 <f_opendir+0xc6>
				obj->id = fs->id;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	88da      	ldrh	r2, [r3, #6]
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011ed4:	2100      	movs	r1, #0
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7fe f926 	bl	8010128 <dir_sdi>
 8011edc:	4603      	mov	r3, r0
 8011ede:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011ee0:	7dfb      	ldrb	r3, [r7, #23]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d114      	bne.n	8011f10 <f_opendir+0xc6>
					if (obj->sclust) {
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d00d      	beq.n	8011f0a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011eee:	2100      	movs	r1, #0
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7fd fc6f 	bl	800f7d4 <inc_lock>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	691b      	ldr	r3, [r3, #16]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d105      	bne.n	8011f10 <f_opendir+0xc6>
 8011f04:	2312      	movs	r3, #18
 8011f06:	75fb      	strb	r3, [r7, #23]
 8011f08:	e002      	b.n	8011f10 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011f10:	7dfb      	ldrb	r3, [r7, #23]
 8011f12:	2b04      	cmp	r3, #4
 8011f14:	d101      	bne.n	8011f1a <f_opendir+0xd0>
 8011f16:	2305      	movs	r3, #5
 8011f18:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011f1a:	7dfb      	ldrb	r3, [r7, #23]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d002      	beq.n	8011f26 <f_opendir+0xdc>
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	2200      	movs	r2, #0
 8011f24:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	7dfa      	ldrb	r2, [r7, #23]
 8011f2a:	4611      	mov	r1, r2
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fd fbb8 	bl	800f6a2 <unlock_fs>
 8011f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f107 0208 	add.w	r2, r7, #8
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7ff f88b 	bl	8011068 <validate>
 8011f52:	4603      	mov	r3, r0
 8011f54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f56:	7bfb      	ldrb	r3, [r7, #15]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d115      	bne.n	8011f88 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	691b      	ldr	r3, [r3, #16]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d006      	beq.n	8011f72 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	691b      	ldr	r3, [r3, #16]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fd fcc1 	bl	800f8f0 <dec_lock>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011f72:	7bfb      	ldrb	r3, [r7, #15]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d102      	bne.n	8011f7e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	2100      	movs	r1, #0
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fd fb8d 	bl	800f6a2 <unlock_fs>
#endif
	}
	return res;
 8011f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b084      	sub	sp, #16
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
 8011f9a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f107 0208 	add.w	r2, r7, #8
 8011fa2:	4611      	mov	r1, r2
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ff f85f 	bl	8011068 <validate>
 8011faa:	4603      	mov	r3, r0
 8011fac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011fae:	7bfb      	ldrb	r3, [r7, #15]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d126      	bne.n	8012002 <f_readdir+0x70>
		if (!fno) {
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d106      	bne.n	8011fc8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011fba:	2100      	movs	r1, #0
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f7fe f8b3 	bl	8010128 <dir_sdi>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	73fb      	strb	r3, [r7, #15]
 8011fc6:	e01c      	b.n	8012002 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011fc8:	2100      	movs	r1, #0
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7fe fa72 	bl	80104b4 <dir_read>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011fd4:	7bfb      	ldrb	r3, [r7, #15]
 8011fd6:	2b04      	cmp	r3, #4
 8011fd8:	d101      	bne.n	8011fde <f_readdir+0x4c>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011fde:	7bfb      	ldrb	r3, [r7, #15]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10e      	bne.n	8012002 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011fe4:	6839      	ldr	r1, [r7, #0]
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f7fe fb48 	bl	801067c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011fec:	2100      	movs	r1, #0
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f7fe f915 	bl	801021e <dir_next>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
 8011ffa:	2b04      	cmp	r3, #4
 8011ffc:	d101      	bne.n	8012002 <f_readdir+0x70>
 8011ffe:	2300      	movs	r3, #0
 8012000:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	7bfa      	ldrb	r2, [r7, #15]
 8012006:	4611      	mov	r1, r2
 8012008:	4618      	mov	r0, r3
 801200a:	f7fd fb4a 	bl	800f6a2 <unlock_fs>
 801200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012010:	4618      	mov	r0, r3
 8012012:	3710      	adds	r7, #16
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012022:	6839      	ldr	r1, [r7, #0]
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7ff ffb4 	bl	8011f92 <f_readdir>
 801202a:	4603      	mov	r3, r0
 801202c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801202e:	7bfb      	ldrb	r3, [r7, #15]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d114      	bne.n	801205e <f_findnext+0x46>
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d011      	beq.n	801205e <f_findnext+0x46>
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	7a5b      	ldrb	r3, [r3, #9]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d00d      	beq.n	801205e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	f103 0109 	add.w	r1, r3, #9
 801204c:	2300      	movs	r3, #0
 801204e:	2200      	movs	r2, #0
 8012050:	f7fe fb9a 	bl	8010788 <pattern_matching>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d100      	bne.n	801205c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801205a:	e7e2      	b.n	8012022 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801205c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012060:	4618      	mov	r0, r3
 8012062:	3710      	adds	r7, #16
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b086      	sub	sp, #24
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	607a      	str	r2, [r7, #4]
 8012074:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	683a      	ldr	r2, [r7, #0]
 801207a:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 801207c:	6879      	ldr	r1, [r7, #4]
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f7ff fee3 	bl	8011e4a <f_opendir>
 8012084:	4603      	mov	r3, r0
 8012086:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012088:	7dfb      	ldrb	r3, [r7, #23]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d105      	bne.n	801209a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801208e:	68b9      	ldr	r1, [r7, #8]
 8012090:	68f8      	ldr	r0, [r7, #12]
 8012092:	f7ff ffc1 	bl	8012018 <f_findnext>
 8012096:	4603      	mov	r3, r0
 8012098:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801209a:	7dfb      	ldrb	r3, [r7, #23]
}
 801209c:	4618      	mov	r0, r3
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b087      	sub	sp, #28
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	4613      	mov	r3, r2
 80120b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80120b2:	2301      	movs	r3, #1
 80120b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80120b6:	2300      	movs	r3, #0
 80120b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80120ba:	4b1f      	ldr	r3, [pc, #124]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120bc:	7a5b      	ldrb	r3, [r3, #9]
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d131      	bne.n	8012128 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80120c4:	4b1c      	ldr	r3, [pc, #112]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120c6:	7a5b      	ldrb	r3, [r3, #9]
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	461a      	mov	r2, r3
 80120cc:	4b1a      	ldr	r3, [pc, #104]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120ce:	2100      	movs	r1, #0
 80120d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80120d2:	4b19      	ldr	r3, [pc, #100]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120d4:	7a5b      	ldrb	r3, [r3, #9]
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	4a17      	ldr	r2, [pc, #92]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	4413      	add	r3, r2
 80120de:	68fa      	ldr	r2, [r7, #12]
 80120e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80120e2:	4b15      	ldr	r3, [pc, #84]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120e4:	7a5b      	ldrb	r3, [r3, #9]
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	461a      	mov	r2, r3
 80120ea:	4b13      	ldr	r3, [pc, #76]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120ec:	4413      	add	r3, r2
 80120ee:	79fa      	ldrb	r2, [r7, #7]
 80120f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80120f2:	4b11      	ldr	r3, [pc, #68]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120f4:	7a5b      	ldrb	r3, [r3, #9]
 80120f6:	b2db      	uxtb	r3, r3
 80120f8:	1c5a      	adds	r2, r3, #1
 80120fa:	b2d1      	uxtb	r1, r2
 80120fc:	4a0e      	ldr	r2, [pc, #56]	; (8012138 <FATFS_LinkDriverEx+0x94>)
 80120fe:	7251      	strb	r1, [r2, #9]
 8012100:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012102:	7dbb      	ldrb	r3, [r7, #22]
 8012104:	3330      	adds	r3, #48	; 0x30
 8012106:	b2da      	uxtb	r2, r3
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	3301      	adds	r3, #1
 8012110:	223a      	movs	r2, #58	; 0x3a
 8012112:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	3302      	adds	r3, #2
 8012118:	222f      	movs	r2, #47	; 0x2f
 801211a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	3303      	adds	r3, #3
 8012120:	2200      	movs	r2, #0
 8012122:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012124:	2300      	movs	r3, #0
 8012126:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012128:	7dfb      	ldrb	r3, [r7, #23]
}
 801212a:	4618      	mov	r0, r3
 801212c:	371c      	adds	r7, #28
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop
 8012138:	2000035c 	.word	0x2000035c

0801213c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012146:	2200      	movs	r2, #0
 8012148:	6839      	ldr	r1, [r7, #0]
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f7ff ffaa 	bl	80120a4 <FATFS_LinkDriverEx>
 8012150:	4603      	mov	r3, r0
}
 8012152:	4618      	mov	r0, r3
 8012154:	3708      	adds	r7, #8
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}

0801215a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b084      	sub	sp, #16
 801215e:	af00      	add	r7, sp, #0
 8012160:	4603      	mov	r3, r0
 8012162:	6039      	str	r1, [r7, #0]
 8012164:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012166:	2200      	movs	r2, #0
 8012168:	2101      	movs	r1, #1
 801216a:	2001      	movs	r0, #1
 801216c:	f000 fb8e 	bl	801288c <osSemaphoreNew>
 8012170:	4602      	mov	r2, r0
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	bf14      	ite	ne
 801217e:	2301      	movne	r3, #1
 8012180:	2300      	moveq	r3, #0
 8012182:	b2db      	uxtb	r3, r3
 8012184:	60fb      	str	r3, [r7, #12]

    return ret;
 8012186:	68fb      	ldr	r3, [r7, #12]
}
 8012188:	4618      	mov	r0, r3
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f000 fcd3 	bl	8012b44 <osSemaphoreDelete>
#endif
    return 1;
 801219e:	2301      	movs	r3, #1
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80121b0:	2300      	movs	r3, #0
 80121b2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80121b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 fc05 	bl	80129c8 <osSemaphoreAcquire>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d101      	bne.n	80121c8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80121c4:	2301      	movs	r3, #1
 80121c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80121c8:	68fb      	ldr	r3, [r7, #12]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3710      	adds	r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b082      	sub	sp, #8
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 fc5a 	bl	8012a94 <osSemaphoreRelease>
#endif
}
 80121e0:	bf00      	nop
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80121e8:	b480      	push	{r7}
 80121ea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80121ec:	bf00      	nop
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr
	...

080121f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121fe:	f3ef 8305 	mrs	r3, IPSR
 8012202:	60bb      	str	r3, [r7, #8]
  return(result);
 8012204:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012206:	2b00      	cmp	r3, #0
 8012208:	d10f      	bne.n	801222a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801220a:	f3ef 8310 	mrs	r3, PRIMASK
 801220e:	607b      	str	r3, [r7, #4]
  return(result);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d105      	bne.n	8012222 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012216:	f3ef 8311 	mrs	r3, BASEPRI
 801221a:	603b      	str	r3, [r7, #0]
  return(result);
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d007      	beq.n	8012232 <osKernelInitialize+0x3a>
 8012222:	4b0e      	ldr	r3, [pc, #56]	; (801225c <osKernelInitialize+0x64>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2b02      	cmp	r3, #2
 8012228:	d103      	bne.n	8012232 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801222a:	f06f 0305 	mvn.w	r3, #5
 801222e:	60fb      	str	r3, [r7, #12]
 8012230:	e00c      	b.n	801224c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012232:	4b0a      	ldr	r3, [pc, #40]	; (801225c <osKernelInitialize+0x64>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d105      	bne.n	8012246 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801223a:	4b08      	ldr	r3, [pc, #32]	; (801225c <osKernelInitialize+0x64>)
 801223c:	2201      	movs	r2, #1
 801223e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012240:	2300      	movs	r3, #0
 8012242:	60fb      	str	r3, [r7, #12]
 8012244:	e002      	b.n	801224c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8012246:	f04f 33ff 	mov.w	r3, #4294967295
 801224a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801224c:	68fb      	ldr	r3, [r7, #12]
}
 801224e:	4618      	mov	r0, r3
 8012250:	3714      	adds	r7, #20
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	20000368 	.word	0x20000368

08012260 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8012266:	f002 fec5 	bl	8014ff4 <xTaskGetSchedulerState>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	d004      	beq.n	801227a <osKernelGetState+0x1a>
 8012270:	2b02      	cmp	r3, #2
 8012272:	d105      	bne.n	8012280 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8012274:	2302      	movs	r3, #2
 8012276:	607b      	str	r3, [r7, #4]
      break;
 8012278:	e00c      	b.n	8012294 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801227a:	2303      	movs	r3, #3
 801227c:	607b      	str	r3, [r7, #4]
      break;
 801227e:	e009      	b.n	8012294 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8012280:	4b07      	ldr	r3, [pc, #28]	; (80122a0 <osKernelGetState+0x40>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d102      	bne.n	801228e <osKernelGetState+0x2e>
        state = osKernelReady;
 8012288:	2301      	movs	r3, #1
 801228a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801228c:	e001      	b.n	8012292 <osKernelGetState+0x32>
        state = osKernelInactive;
 801228e:	2300      	movs	r3, #0
 8012290:	607b      	str	r3, [r7, #4]
      break;
 8012292:	bf00      	nop
  }

  return (state);
 8012294:	687b      	ldr	r3, [r7, #4]
}
 8012296:	4618      	mov	r0, r3
 8012298:	3708      	adds	r7, #8
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	20000368 	.word	0x20000368

080122a4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122aa:	f3ef 8305 	mrs	r3, IPSR
 80122ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80122b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d10f      	bne.n	80122d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122b6:	f3ef 8310 	mrs	r3, PRIMASK
 80122ba:	607b      	str	r3, [r7, #4]
  return(result);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d105      	bne.n	80122ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122c2:	f3ef 8311 	mrs	r3, BASEPRI
 80122c6:	603b      	str	r3, [r7, #0]
  return(result);
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d007      	beq.n	80122de <osKernelStart+0x3a>
 80122ce:	4b0f      	ldr	r3, [pc, #60]	; (801230c <osKernelStart+0x68>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2b02      	cmp	r3, #2
 80122d4:	d103      	bne.n	80122de <osKernelStart+0x3a>
    stat = osErrorISR;
 80122d6:	f06f 0305 	mvn.w	r3, #5
 80122da:	60fb      	str	r3, [r7, #12]
 80122dc:	e010      	b.n	8012300 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80122de:	4b0b      	ldr	r3, [pc, #44]	; (801230c <osKernelStart+0x68>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	d109      	bne.n	80122fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80122e6:	f7ff ff7f 	bl	80121e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80122ea:	4b08      	ldr	r3, [pc, #32]	; (801230c <osKernelStart+0x68>)
 80122ec:	2202      	movs	r2, #2
 80122ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80122f0:	f002 fa12 	bl	8014718 <vTaskStartScheduler>
      stat = osOK;
 80122f4:	2300      	movs	r3, #0
 80122f6:	60fb      	str	r3, [r7, #12]
 80122f8:	e002      	b.n	8012300 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80122fa:	f04f 33ff 	mov.w	r3, #4294967295
 80122fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012300:	68fb      	ldr	r3, [r7, #12]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	20000368 	.word	0x20000368

08012310 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012316:	f3ef 8305 	mrs	r3, IPSR
 801231a:	60bb      	str	r3, [r7, #8]
  return(result);
 801231c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801231e:	2b00      	cmp	r3, #0
 8012320:	d10f      	bne.n	8012342 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012322:	f3ef 8310 	mrs	r3, PRIMASK
 8012326:	607b      	str	r3, [r7, #4]
  return(result);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d105      	bne.n	801233a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801232e:	f3ef 8311 	mrs	r3, BASEPRI
 8012332:	603b      	str	r3, [r7, #0]
  return(result);
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d007      	beq.n	801234a <osKernelGetTickCount+0x3a>
 801233a:	4b08      	ldr	r3, [pc, #32]	; (801235c <osKernelGetTickCount+0x4c>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	2b02      	cmp	r3, #2
 8012340:	d103      	bne.n	801234a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8012342:	f002 fb0d 	bl	8014960 <xTaskGetTickCountFromISR>
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	e002      	b.n	8012350 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801234a:	f002 faf9 	bl	8014940 <xTaskGetTickCount>
 801234e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8012350:	68fb      	ldr	r3, [r7, #12]
}
 8012352:	4618      	mov	r0, r3
 8012354:	3710      	adds	r7, #16
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	20000368 	.word	0x20000368

08012360 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8012360:	b480      	push	{r7}
 8012362:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8012364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8012368:	4618      	mov	r0, r3
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr
	...

08012374 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012374:	b580      	push	{r7, lr}
 8012376:	b090      	sub	sp, #64	; 0x40
 8012378:	af04      	add	r7, sp, #16
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012380:	2300      	movs	r3, #0
 8012382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012384:	f3ef 8305 	mrs	r3, IPSR
 8012388:	61fb      	str	r3, [r7, #28]
  return(result);
 801238a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801238c:	2b00      	cmp	r3, #0
 801238e:	f040 808f 	bne.w	80124b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012392:	f3ef 8310 	mrs	r3, PRIMASK
 8012396:	61bb      	str	r3, [r7, #24]
  return(result);
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d105      	bne.n	80123aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801239e:	f3ef 8311 	mrs	r3, BASEPRI
 80123a2:	617b      	str	r3, [r7, #20]
  return(result);
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d003      	beq.n	80123b2 <osThreadNew+0x3e>
 80123aa:	4b44      	ldr	r3, [pc, #272]	; (80124bc <osThreadNew+0x148>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	2b02      	cmp	r3, #2
 80123b0:	d07e      	beq.n	80124b0 <osThreadNew+0x13c>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d07b      	beq.n	80124b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80123b8:	2380      	movs	r3, #128	; 0x80
 80123ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80123bc:	2318      	movs	r3, #24
 80123be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80123c0:	2300      	movs	r3, #0
 80123c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80123c4:	f04f 33ff 	mov.w	r3, #4294967295
 80123c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d045      	beq.n	801245c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <osThreadNew+0x6a>
        name = attr->name;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	699b      	ldr	r3, [r3, #24]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d002      	beq.n	80123ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	699b      	ldr	r3, [r3, #24]
 80123ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80123ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d008      	beq.n	8012404 <osThreadNew+0x90>
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	2b38      	cmp	r3, #56	; 0x38
 80123f6:	d805      	bhi.n	8012404 <osThreadNew+0x90>
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	f003 0301 	and.w	r3, r3, #1
 8012400:	2b00      	cmp	r3, #0
 8012402:	d001      	beq.n	8012408 <osThreadNew+0x94>
        return (NULL);
 8012404:	2300      	movs	r3, #0
 8012406:	e054      	b.n	80124b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	695b      	ldr	r3, [r3, #20]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d003      	beq.n	8012418 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	695b      	ldr	r3, [r3, #20]
 8012414:	089b      	lsrs	r3, r3, #2
 8012416:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	689b      	ldr	r3, [r3, #8]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d00e      	beq.n	801243e <osThreadNew+0xca>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	2b5b      	cmp	r3, #91	; 0x5b
 8012426:	d90a      	bls.n	801243e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801242c:	2b00      	cmp	r3, #0
 801242e:	d006      	beq.n	801243e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	695b      	ldr	r3, [r3, #20]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d002      	beq.n	801243e <osThreadNew+0xca>
        mem = 1;
 8012438:	2301      	movs	r3, #1
 801243a:	623b      	str	r3, [r7, #32]
 801243c:	e010      	b.n	8012460 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	689b      	ldr	r3, [r3, #8]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d10c      	bne.n	8012460 <osThreadNew+0xec>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d108      	bne.n	8012460 <osThreadNew+0xec>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	691b      	ldr	r3, [r3, #16]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d104      	bne.n	8012460 <osThreadNew+0xec>
          mem = 0;
 8012456:	2300      	movs	r3, #0
 8012458:	623b      	str	r3, [r7, #32]
 801245a:	e001      	b.n	8012460 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801245c:	2300      	movs	r3, #0
 801245e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012460:	6a3b      	ldr	r3, [r7, #32]
 8012462:	2b01      	cmp	r3, #1
 8012464:	d110      	bne.n	8012488 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801246e:	9202      	str	r2, [sp, #8]
 8012470:	9301      	str	r3, [sp, #4]
 8012472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012474:	9300      	str	r3, [sp, #0]
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801247a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801247c:	68f8      	ldr	r0, [r7, #12]
 801247e:	f001 feef 	bl	8014260 <xTaskCreateStatic>
 8012482:	4603      	mov	r3, r0
 8012484:	613b      	str	r3, [r7, #16]
 8012486:	e013      	b.n	80124b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012488:	6a3b      	ldr	r3, [r7, #32]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d110      	bne.n	80124b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012490:	b29a      	uxth	r2, r3
 8012492:	f107 0310 	add.w	r3, r7, #16
 8012496:	9301      	str	r3, [sp, #4]
 8012498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f001 ff3d 	bl	8014320 <xTaskCreate>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d001      	beq.n	80124b0 <osThreadNew+0x13c>
          hTask = NULL;
 80124ac:	2300      	movs	r3, #0
 80124ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80124b0:	693b      	ldr	r3, [r7, #16]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3730      	adds	r7, #48	; 0x30
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	20000368 	.word	0x20000368

080124c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b086      	sub	sp, #24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124c8:	f3ef 8305 	mrs	r3, IPSR
 80124cc:	613b      	str	r3, [r7, #16]
  return(result);
 80124ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d10f      	bne.n	80124f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124d4:	f3ef 8310 	mrs	r3, PRIMASK
 80124d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d105      	bne.n	80124ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80124e0:	f3ef 8311 	mrs	r3, BASEPRI
 80124e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d007      	beq.n	80124fc <osDelay+0x3c>
 80124ec:	4b0a      	ldr	r3, [pc, #40]	; (8012518 <osDelay+0x58>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d103      	bne.n	80124fc <osDelay+0x3c>
    stat = osErrorISR;
 80124f4:	f06f 0305 	mvn.w	r3, #5
 80124f8:	617b      	str	r3, [r7, #20]
 80124fa:	e007      	b.n	801250c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80124fc:	2300      	movs	r3, #0
 80124fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d002      	beq.n	801250c <osDelay+0x4c>
      vTaskDelay(ticks);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f002 f8d0 	bl	80146ac <vTaskDelay>
    }
  }

  return (stat);
 801250c:	697b      	ldr	r3, [r7, #20]
}
 801250e:	4618      	mov	r0, r3
 8012510:	3718      	adds	r7, #24
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	20000368 	.word	0x20000368

0801251c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 801251c:	b580      	push	{r7, lr}
 801251e:	b088      	sub	sp, #32
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012524:	f3ef 8305 	mrs	r3, IPSR
 8012528:	617b      	str	r3, [r7, #20]
  return(result);
 801252a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801252c:	2b00      	cmp	r3, #0
 801252e:	d10f      	bne.n	8012550 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012530:	f3ef 8310 	mrs	r3, PRIMASK
 8012534:	613b      	str	r3, [r7, #16]
  return(result);
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d105      	bne.n	8012548 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801253c:	f3ef 8311 	mrs	r3, BASEPRI
 8012540:	60fb      	str	r3, [r7, #12]
  return(result);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d007      	beq.n	8012558 <osDelayUntil+0x3c>
 8012548:	4b13      	ldr	r3, [pc, #76]	; (8012598 <osDelayUntil+0x7c>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b02      	cmp	r3, #2
 801254e:	d103      	bne.n	8012558 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8012550:	f06f 0305 	mvn.w	r3, #5
 8012554:	61fb      	str	r3, [r7, #28]
 8012556:	e019      	b.n	801258c <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8012558:	2300      	movs	r3, #0
 801255a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 801255c:	f002 f9f0 	bl	8014940 <xTaskGetTickCount>
 8012560:	4603      	mov	r3, r0
 8012562:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d009      	beq.n	8012586 <osDelayUntil+0x6a>
 8012572:	69bb      	ldr	r3, [r7, #24]
 8012574:	2b00      	cmp	r3, #0
 8012576:	db06      	blt.n	8012586 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8012578:	f107 0308 	add.w	r3, r7, #8
 801257c:	69b9      	ldr	r1, [r7, #24]
 801257e:	4618      	mov	r0, r3
 8012580:	f002 f814 	bl	80145ac <vTaskDelayUntil>
 8012584:	e002      	b.n	801258c <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8012586:	f06f 0303 	mvn.w	r3, #3
 801258a:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801258c:	69fb      	ldr	r3, [r7, #28]
}
 801258e:	4618      	mov	r0, r3
 8012590:	3720      	adds	r7, #32
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
 8012596:	bf00      	nop
 8012598:	20000368 	.word	0x20000368

0801259c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801259c:	b580      	push	{r7, lr}
 801259e:	b08a      	sub	sp, #40	; 0x28
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80125a4:	2300      	movs	r3, #0
 80125a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125a8:	f3ef 8305 	mrs	r3, IPSR
 80125ac:	613b      	str	r3, [r7, #16]
  return(result);
 80125ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f040 8085 	bne.w	80126c0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125b6:	f3ef 8310 	mrs	r3, PRIMASK
 80125ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d105      	bne.n	80125ce <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80125c2:	f3ef 8311 	mrs	r3, BASEPRI
 80125c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d003      	beq.n	80125d6 <osMutexNew+0x3a>
 80125ce:	4b3f      	ldr	r3, [pc, #252]	; (80126cc <osMutexNew+0x130>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	d074      	beq.n	80126c0 <osMutexNew+0x124>
    if (attr != NULL) {
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d003      	beq.n	80125e4 <osMutexNew+0x48>
      type = attr->attr_bits;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	623b      	str	r3, [r7, #32]
 80125e2:	e001      	b.n	80125e8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80125e4:	2300      	movs	r3, #0
 80125e6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80125e8:	6a3b      	ldr	r3, [r7, #32]
 80125ea:	f003 0301 	and.w	r3, r3, #1
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d002      	beq.n	80125f8 <osMutexNew+0x5c>
      rmtx = 1U;
 80125f2:	2301      	movs	r3, #1
 80125f4:	61fb      	str	r3, [r7, #28]
 80125f6:	e001      	b.n	80125fc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80125f8:	2300      	movs	r3, #0
 80125fa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80125fc:	6a3b      	ldr	r3, [r7, #32]
 80125fe:	f003 0308 	and.w	r3, r3, #8
 8012602:	2b00      	cmp	r3, #0
 8012604:	d15c      	bne.n	80126c0 <osMutexNew+0x124>
      mem = -1;
 8012606:	f04f 33ff 	mov.w	r3, #4294967295
 801260a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d015      	beq.n	801263e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	689b      	ldr	r3, [r3, #8]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d006      	beq.n	8012628 <osMutexNew+0x8c>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	2b4f      	cmp	r3, #79	; 0x4f
 8012620:	d902      	bls.n	8012628 <osMutexNew+0x8c>
          mem = 1;
 8012622:	2301      	movs	r3, #1
 8012624:	61bb      	str	r3, [r7, #24]
 8012626:	e00c      	b.n	8012642 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	689b      	ldr	r3, [r3, #8]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d108      	bne.n	8012642 <osMutexNew+0xa6>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d104      	bne.n	8012642 <osMutexNew+0xa6>
            mem = 0;
 8012638:	2300      	movs	r3, #0
 801263a:	61bb      	str	r3, [r7, #24]
 801263c:	e001      	b.n	8012642 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 801263e:	2300      	movs	r3, #0
 8012640:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d112      	bne.n	801266e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d007      	beq.n	801265e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	689b      	ldr	r3, [r3, #8]
 8012652:	4619      	mov	r1, r3
 8012654:	2004      	movs	r0, #4
 8012656:	f000 fe7c 	bl	8013352 <xQueueCreateMutexStatic>
 801265a:	6278      	str	r0, [r7, #36]	; 0x24
 801265c:	e016      	b.n	801268c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	4619      	mov	r1, r3
 8012664:	2001      	movs	r0, #1
 8012666:	f000 fe74 	bl	8013352 <xQueueCreateMutexStatic>
 801266a:	6278      	str	r0, [r7, #36]	; 0x24
 801266c:	e00e      	b.n	801268c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d10b      	bne.n	801268c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d004      	beq.n	8012684 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801267a:	2004      	movs	r0, #4
 801267c:	f000 fe51 	bl	8013322 <xQueueCreateMutex>
 8012680:	6278      	str	r0, [r7, #36]	; 0x24
 8012682:	e003      	b.n	801268c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012684:	2001      	movs	r0, #1
 8012686:	f000 fe4c 	bl	8013322 <xQueueCreateMutex>
 801268a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268e:	2b00      	cmp	r3, #0
 8012690:	d00c      	beq.n	80126ac <osMutexNew+0x110>
        if (attr != NULL) {
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d003      	beq.n	80126a0 <osMutexNew+0x104>
          name = attr->name;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	617b      	str	r3, [r7, #20]
 801269e:	e001      	b.n	80126a4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80126a0:	2300      	movs	r3, #0
 80126a2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80126a4:	6979      	ldr	r1, [r7, #20]
 80126a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126a8:	f001 fd54 	bl	8014154 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80126ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d006      	beq.n	80126c0 <osMutexNew+0x124>
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d003      	beq.n	80126c0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80126b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ba:	f043 0301 	orr.w	r3, r3, #1
 80126be:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80126c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3728      	adds	r7, #40	; 0x28
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	20000368 	.word	0x20000368

080126d0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b088      	sub	sp, #32
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f023 0301 	bic.w	r3, r3, #1
 80126e0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f003 0301 	and.w	r3, r3, #1
 80126e8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80126ea:	2300      	movs	r3, #0
 80126ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126ee:	f3ef 8305 	mrs	r3, IPSR
 80126f2:	613b      	str	r3, [r7, #16]
  return(result);
 80126f4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10f      	bne.n	801271a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126fa:	f3ef 8310 	mrs	r3, PRIMASK
 80126fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d105      	bne.n	8012712 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012706:	f3ef 8311 	mrs	r3, BASEPRI
 801270a:	60bb      	str	r3, [r7, #8]
  return(result);
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d007      	beq.n	8012722 <osMutexAcquire+0x52>
 8012712:	4b1d      	ldr	r3, [pc, #116]	; (8012788 <osMutexAcquire+0xb8>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2b02      	cmp	r3, #2
 8012718:	d103      	bne.n	8012722 <osMutexAcquire+0x52>
    stat = osErrorISR;
 801271a:	f06f 0305 	mvn.w	r3, #5
 801271e:	61fb      	str	r3, [r7, #28]
 8012720:	e02c      	b.n	801277c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d103      	bne.n	8012730 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8012728:	f06f 0303 	mvn.w	r3, #3
 801272c:	61fb      	str	r3, [r7, #28]
 801272e:	e025      	b.n	801277c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d011      	beq.n	801275a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8012736:	6839      	ldr	r1, [r7, #0]
 8012738:	69b8      	ldr	r0, [r7, #24]
 801273a:	f000 fe73 	bl	8013424 <xQueueTakeMutexRecursive>
 801273e:	4603      	mov	r3, r0
 8012740:	2b01      	cmp	r3, #1
 8012742:	d01b      	beq.n	801277c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d003      	beq.n	8012752 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801274a:	f06f 0301 	mvn.w	r3, #1
 801274e:	61fb      	str	r3, [r7, #28]
 8012750:	e014      	b.n	801277c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012752:	f06f 0302 	mvn.w	r3, #2
 8012756:	61fb      	str	r3, [r7, #28]
 8012758:	e010      	b.n	801277c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	69b8      	ldr	r0, [r7, #24]
 801275e:	f001 fa19 	bl	8013b94 <xQueueSemaphoreTake>
 8012762:	4603      	mov	r3, r0
 8012764:	2b01      	cmp	r3, #1
 8012766:	d009      	beq.n	801277c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d003      	beq.n	8012776 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801276e:	f06f 0301 	mvn.w	r3, #1
 8012772:	61fb      	str	r3, [r7, #28]
 8012774:	e002      	b.n	801277c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012776:	f06f 0302 	mvn.w	r3, #2
 801277a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801277c:	69fb      	ldr	r3, [r7, #28]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3720      	adds	r7, #32
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	20000368 	.word	0x20000368

0801278c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801278c:	b580      	push	{r7, lr}
 801278e:	b088      	sub	sp, #32
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f023 0301 	bic.w	r3, r3, #1
 801279a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f003 0301 	and.w	r3, r3, #1
 80127a2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80127a4:	2300      	movs	r3, #0
 80127a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127a8:	f3ef 8305 	mrs	r3, IPSR
 80127ac:	613b      	str	r3, [r7, #16]
  return(result);
 80127ae:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d10f      	bne.n	80127d4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127b4:	f3ef 8310 	mrs	r3, PRIMASK
 80127b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d105      	bne.n	80127cc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80127c0:	f3ef 8311 	mrs	r3, BASEPRI
 80127c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d007      	beq.n	80127dc <osMutexRelease+0x50>
 80127cc:	4b16      	ldr	r3, [pc, #88]	; (8012828 <osMutexRelease+0x9c>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b02      	cmp	r3, #2
 80127d2:	d103      	bne.n	80127dc <osMutexRelease+0x50>
    stat = osErrorISR;
 80127d4:	f06f 0305 	mvn.w	r3, #5
 80127d8:	61fb      	str	r3, [r7, #28]
 80127da:	e01f      	b.n	801281c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d103      	bne.n	80127ea <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80127e2:	f06f 0303 	mvn.w	r3, #3
 80127e6:	61fb      	str	r3, [r7, #28]
 80127e8:	e018      	b.n	801281c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d009      	beq.n	8012804 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80127f0:	69b8      	ldr	r0, [r7, #24]
 80127f2:	f000 fde2 	bl	80133ba <xQueueGiveMutexRecursive>
 80127f6:	4603      	mov	r3, r0
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d00f      	beq.n	801281c <osMutexRelease+0x90>
        stat = osErrorResource;
 80127fc:	f06f 0302 	mvn.w	r3, #2
 8012800:	61fb      	str	r3, [r7, #28]
 8012802:	e00b      	b.n	801281c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012804:	2300      	movs	r3, #0
 8012806:	2200      	movs	r2, #0
 8012808:	2100      	movs	r1, #0
 801280a:	69b8      	ldr	r0, [r7, #24]
 801280c:	f000 feb0 	bl	8013570 <xQueueGenericSend>
 8012810:	4603      	mov	r3, r0
 8012812:	2b01      	cmp	r3, #1
 8012814:	d002      	beq.n	801281c <osMutexRelease+0x90>
        stat = osErrorResource;
 8012816:	f06f 0302 	mvn.w	r3, #2
 801281a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801281c:	69fb      	ldr	r3, [r7, #28]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3720      	adds	r7, #32
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	20000368 	.word	0x20000368

0801282c <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 801282c:	b580      	push	{r7, lr}
 801282e:	b088      	sub	sp, #32
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f023 0301 	bic.w	r3, r3, #1
 801283a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801283c:	f3ef 8305 	mrs	r3, IPSR
 8012840:	617b      	str	r3, [r7, #20]
  return(result);
 8012842:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 8012844:	2b00      	cmp	r3, #0
 8012846:	d112      	bne.n	801286e <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012848:	f3ef 8310 	mrs	r3, PRIMASK
 801284c:	613b      	str	r3, [r7, #16]
  return(result);
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d105      	bne.n	8012860 <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012854:	f3ef 8311 	mrs	r3, BASEPRI
 8012858:	60fb      	str	r3, [r7, #12]
  return(result);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d003      	beq.n	8012868 <osMutexGetOwner+0x3c>
 8012860:	4b09      	ldr	r3, [pc, #36]	; (8012888 <osMutexGetOwner+0x5c>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2b02      	cmp	r3, #2
 8012866:	d002      	beq.n	801286e <osMutexGetOwner+0x42>
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d102      	bne.n	8012874 <osMutexGetOwner+0x48>
    owner = NULL;
 801286e:	2300      	movs	r3, #0
 8012870:	61fb      	str	r3, [r7, #28]
 8012872:	e003      	b.n	801287c <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8012874:	69b8      	ldr	r0, [r7, #24]
 8012876:	f000 fd87 	bl	8013388 <xQueueGetMutexHolder>
 801287a:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 801287c:	69fb      	ldr	r3, [r7, #28]
}
 801287e:	4618      	mov	r0, r3
 8012880:	3720      	adds	r7, #32
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
 8012886:	bf00      	nop
 8012888:	20000368 	.word	0x20000368

0801288c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801288c:	b580      	push	{r7, lr}
 801288e:	b08c      	sub	sp, #48	; 0x30
 8012890:	af02      	add	r7, sp, #8
 8012892:	60f8      	str	r0, [r7, #12]
 8012894:	60b9      	str	r1, [r7, #8]
 8012896:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012898:	2300      	movs	r3, #0
 801289a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801289c:	f3ef 8305 	mrs	r3, IPSR
 80128a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80128a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f040 8087 	bne.w	80129b8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128aa:	f3ef 8310 	mrs	r3, PRIMASK
 80128ae:	617b      	str	r3, [r7, #20]
  return(result);
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d105      	bne.n	80128c2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80128b6:	f3ef 8311 	mrs	r3, BASEPRI
 80128ba:	613b      	str	r3, [r7, #16]
  return(result);
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d003      	beq.n	80128ca <osSemaphoreNew+0x3e>
 80128c2:	4b40      	ldr	r3, [pc, #256]	; (80129c4 <osSemaphoreNew+0x138>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	2b02      	cmp	r3, #2
 80128c8:	d076      	beq.n	80129b8 <osSemaphoreNew+0x12c>
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d073      	beq.n	80129b8 <osSemaphoreNew+0x12c>
 80128d0:	68ba      	ldr	r2, [r7, #8]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d86f      	bhi.n	80129b8 <osSemaphoreNew+0x12c>
    mem = -1;
 80128d8:	f04f 33ff 	mov.w	r3, #4294967295
 80128dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d015      	beq.n	8012910 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d006      	beq.n	80128fa <osSemaphoreNew+0x6e>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	2b4f      	cmp	r3, #79	; 0x4f
 80128f2:	d902      	bls.n	80128fa <osSemaphoreNew+0x6e>
        mem = 1;
 80128f4:	2301      	movs	r3, #1
 80128f6:	623b      	str	r3, [r7, #32]
 80128f8:	e00c      	b.n	8012914 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	689b      	ldr	r3, [r3, #8]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d108      	bne.n	8012914 <osSemaphoreNew+0x88>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d104      	bne.n	8012914 <osSemaphoreNew+0x88>
          mem = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	623b      	str	r3, [r7, #32]
 801290e:	e001      	b.n	8012914 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8012914:	6a3b      	ldr	r3, [r7, #32]
 8012916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801291a:	d04d      	beq.n	80129b8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b01      	cmp	r3, #1
 8012920:	d129      	bne.n	8012976 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8012922:	6a3b      	ldr	r3, [r7, #32]
 8012924:	2b01      	cmp	r3, #1
 8012926:	d10b      	bne.n	8012940 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	689a      	ldr	r2, [r3, #8]
 801292c:	2303      	movs	r3, #3
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	4613      	mov	r3, r2
 8012932:	2200      	movs	r2, #0
 8012934:	2100      	movs	r1, #0
 8012936:	2001      	movs	r0, #1
 8012938:	f000 fbf8 	bl	801312c <xQueueGenericCreateStatic>
 801293c:	6278      	str	r0, [r7, #36]	; 0x24
 801293e:	e005      	b.n	801294c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8012940:	2203      	movs	r2, #3
 8012942:	2100      	movs	r1, #0
 8012944:	2001      	movs	r0, #1
 8012946:	f000 fc6e 	bl	8013226 <xQueueGenericCreate>
 801294a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294e:	2b00      	cmp	r3, #0
 8012950:	d022      	beq.n	8012998 <osSemaphoreNew+0x10c>
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d01f      	beq.n	8012998 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012958:	2300      	movs	r3, #0
 801295a:	2200      	movs	r2, #0
 801295c:	2100      	movs	r1, #0
 801295e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012960:	f000 fe06 	bl	8013570 <xQueueGenericSend>
 8012964:	4603      	mov	r3, r0
 8012966:	2b01      	cmp	r3, #1
 8012968:	d016      	beq.n	8012998 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 801296a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801296c:	f001 faa5 	bl	8013eba <vQueueDelete>
            hSemaphore = NULL;
 8012970:	2300      	movs	r3, #0
 8012972:	627b      	str	r3, [r7, #36]	; 0x24
 8012974:	e010      	b.n	8012998 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8012976:	6a3b      	ldr	r3, [r7, #32]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d108      	bne.n	801298e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	461a      	mov	r2, r3
 8012982:	68b9      	ldr	r1, [r7, #8]
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f000 fd84 	bl	8013492 <xQueueCreateCountingSemaphoreStatic>
 801298a:	6278      	str	r0, [r7, #36]	; 0x24
 801298c:	e004      	b.n	8012998 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801298e:	68b9      	ldr	r1, [r7, #8]
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f000 fdb7 	bl	8013504 <xQueueCreateCountingSemaphore>
 8012996:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299a:	2b00      	cmp	r3, #0
 801299c:	d00c      	beq.n	80129b8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d003      	beq.n	80129ac <osSemaphoreNew+0x120>
          name = attr->name;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	61fb      	str	r3, [r7, #28]
 80129aa:	e001      	b.n	80129b0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80129ac:	2300      	movs	r3, #0
 80129ae:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80129b0:	69f9      	ldr	r1, [r7, #28]
 80129b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129b4:	f001 fbce 	bl	8014154 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3728      	adds	r7, #40	; 0x28
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	20000368 	.word	0x20000368

080129c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b088      	sub	sp, #32
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80129d6:	2300      	movs	r3, #0
 80129d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80129da:	69bb      	ldr	r3, [r7, #24]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d103      	bne.n	80129e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80129e0:	f06f 0303 	mvn.w	r3, #3
 80129e4:	61fb      	str	r3, [r7, #28]
 80129e6:	e04b      	b.n	8012a80 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129e8:	f3ef 8305 	mrs	r3, IPSR
 80129ec:	617b      	str	r3, [r7, #20]
  return(result);
 80129ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d10f      	bne.n	8012a14 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129f4:	f3ef 8310 	mrs	r3, PRIMASK
 80129f8:	613b      	str	r3, [r7, #16]
  return(result);
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d105      	bne.n	8012a0c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a00:	f3ef 8311 	mrs	r3, BASEPRI
 8012a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d026      	beq.n	8012a5a <osSemaphoreAcquire+0x92>
 8012a0c:	4b1f      	ldr	r3, [pc, #124]	; (8012a8c <osSemaphoreAcquire+0xc4>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	2b02      	cmp	r3, #2
 8012a12:	d122      	bne.n	8012a5a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d003      	beq.n	8012a22 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8012a1a:	f06f 0303 	mvn.w	r3, #3
 8012a1e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012a20:	e02d      	b.n	8012a7e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8012a22:	2300      	movs	r3, #0
 8012a24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012a26:	f107 0308 	add.w	r3, r7, #8
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	69b8      	ldr	r0, [r7, #24]
 8012a30:	f001 f9c0 	bl	8013db4 <xQueueReceiveFromISR>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b01      	cmp	r3, #1
 8012a38:	d003      	beq.n	8012a42 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8012a3a:	f06f 0302 	mvn.w	r3, #2
 8012a3e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012a40:	e01d      	b.n	8012a7e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d01a      	beq.n	8012a7e <osSemaphoreAcquire+0xb6>
 8012a48:	4b11      	ldr	r3, [pc, #68]	; (8012a90 <osSemaphoreAcquire+0xc8>)
 8012a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a4e:	601a      	str	r2, [r3, #0]
 8012a50:	f3bf 8f4f 	dsb	sy
 8012a54:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8012a58:	e011      	b.n	8012a7e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012a5a:	6839      	ldr	r1, [r7, #0]
 8012a5c:	69b8      	ldr	r0, [r7, #24]
 8012a5e:	f001 f899 	bl	8013b94 <xQueueSemaphoreTake>
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d00b      	beq.n	8012a80 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d003      	beq.n	8012a76 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8012a6e:	f06f 0301 	mvn.w	r3, #1
 8012a72:	61fb      	str	r3, [r7, #28]
 8012a74:	e004      	b.n	8012a80 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8012a76:	f06f 0302 	mvn.w	r3, #2
 8012a7a:	61fb      	str	r3, [r7, #28]
 8012a7c:	e000      	b.n	8012a80 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8012a7e:	bf00      	nop
      }
    }
  }

  return (stat);
 8012a80:	69fb      	ldr	r3, [r7, #28]
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3720      	adds	r7, #32
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	20000368 	.word	0x20000368
 8012a90:	e000ed04 	.word	0xe000ed04

08012a94 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b088      	sub	sp, #32
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012aa4:	69bb      	ldr	r3, [r7, #24]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d103      	bne.n	8012ab2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012aaa:	f06f 0303 	mvn.w	r3, #3
 8012aae:	61fb      	str	r3, [r7, #28]
 8012ab0:	e03e      	b.n	8012b30 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ab2:	f3ef 8305 	mrs	r3, IPSR
 8012ab6:	617b      	str	r3, [r7, #20]
  return(result);
 8012ab8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d10f      	bne.n	8012ade <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012abe:	f3ef 8310 	mrs	r3, PRIMASK
 8012ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d105      	bne.n	8012ad6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012aca:	f3ef 8311 	mrs	r3, BASEPRI
 8012ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d01e      	beq.n	8012b14 <osSemaphoreRelease+0x80>
 8012ad6:	4b19      	ldr	r3, [pc, #100]	; (8012b3c <osSemaphoreRelease+0xa8>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b02      	cmp	r3, #2
 8012adc:	d11a      	bne.n	8012b14 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012ae2:	f107 0308 	add.w	r3, r7, #8
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	69b8      	ldr	r0, [r7, #24]
 8012aea:	f000 fedf 	bl	80138ac <xQueueGiveFromISR>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d003      	beq.n	8012afc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8012af4:	f06f 0302 	mvn.w	r3, #2
 8012af8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012afa:	e018      	b.n	8012b2e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d015      	beq.n	8012b2e <osSemaphoreRelease+0x9a>
 8012b02:	4b0f      	ldr	r3, [pc, #60]	; (8012b40 <osSemaphoreRelease+0xac>)
 8012b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012b12:	e00c      	b.n	8012b2e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012b14:	2300      	movs	r3, #0
 8012b16:	2200      	movs	r2, #0
 8012b18:	2100      	movs	r1, #0
 8012b1a:	69b8      	ldr	r0, [r7, #24]
 8012b1c:	f000 fd28 	bl	8013570 <xQueueGenericSend>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	d004      	beq.n	8012b30 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8012b26:	f06f 0302 	mvn.w	r3, #2
 8012b2a:	61fb      	str	r3, [r7, #28]
 8012b2c:	e000      	b.n	8012b30 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012b2e:	bf00      	nop
    }
  }

  return (stat);
 8012b30:	69fb      	ldr	r3, [r7, #28]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3720      	adds	r7, #32
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	20000368 	.word	0x20000368
 8012b40:	e000ed04 	.word	0xe000ed04

08012b44 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b088      	sub	sp, #32
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b50:	f3ef 8305 	mrs	r3, IPSR
 8012b54:	617b      	str	r3, [r7, #20]
  return(result);
 8012b56:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d10f      	bne.n	8012b7c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8012b60:	613b      	str	r3, [r7, #16]
  return(result);
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d105      	bne.n	8012b74 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b68:	f3ef 8311 	mrs	r3, BASEPRI
 8012b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d007      	beq.n	8012b84 <osSemaphoreDelete+0x40>
 8012b74:	4b0d      	ldr	r3, [pc, #52]	; (8012bac <osSemaphoreDelete+0x68>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b02      	cmp	r3, #2
 8012b7a:	d103      	bne.n	8012b84 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8012b7c:	f06f 0305 	mvn.w	r3, #5
 8012b80:	61fb      	str	r3, [r7, #28]
 8012b82:	e00e      	b.n	8012ba2 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d103      	bne.n	8012b92 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8012b8a:	f06f 0303 	mvn.w	r3, #3
 8012b8e:	61fb      	str	r3, [r7, #28]
 8012b90:	e007      	b.n	8012ba2 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012b92:	69b8      	ldr	r0, [r7, #24]
 8012b94:	f001 fb06 	bl	80141a4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8012b9c:	69b8      	ldr	r0, [r7, #24]
 8012b9e:	f001 f98c 	bl	8013eba <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012ba2:	69fb      	ldr	r3, [r7, #28]
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3720      	adds	r7, #32
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}
 8012bac:	20000368 	.word	0x20000368

08012bb0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b08c      	sub	sp, #48	; 0x30
 8012bb4:	af02      	add	r7, sp, #8
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bc0:	f3ef 8305 	mrs	r3, IPSR
 8012bc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8012bc6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d170      	bne.n	8012cae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8012bd0:	617b      	str	r3, [r7, #20]
  return(result);
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d105      	bne.n	8012be4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8012bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d003      	beq.n	8012bec <osMessageQueueNew+0x3c>
 8012be4:	4b34      	ldr	r3, [pc, #208]	; (8012cb8 <osMessageQueueNew+0x108>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b02      	cmp	r3, #2
 8012bea:	d060      	beq.n	8012cae <osMessageQueueNew+0xfe>
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d05d      	beq.n	8012cae <osMessageQueueNew+0xfe>
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d05a      	beq.n	8012cae <osMessageQueueNew+0xfe>
    mem = -1;
 8012bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d029      	beq.n	8012c58 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d012      	beq.n	8012c32 <osMessageQueueNew+0x82>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	2b4f      	cmp	r3, #79	; 0x4f
 8012c12:	d90e      	bls.n	8012c32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00a      	beq.n	8012c32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	695a      	ldr	r2, [r3, #20]
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	68b9      	ldr	r1, [r7, #8]
 8012c24:	fb01 f303 	mul.w	r3, r1, r3
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d302      	bcc.n	8012c32 <osMessageQueueNew+0x82>
        mem = 1;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	623b      	str	r3, [r7, #32]
 8012c30:	e014      	b.n	8012c5c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	689b      	ldr	r3, [r3, #8]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d110      	bne.n	8012c5c <osMessageQueueNew+0xac>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d10c      	bne.n	8012c5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d108      	bne.n	8012c5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	695b      	ldr	r3, [r3, #20]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d104      	bne.n	8012c5c <osMessageQueueNew+0xac>
          mem = 0;
 8012c52:	2300      	movs	r3, #0
 8012c54:	623b      	str	r3, [r7, #32]
 8012c56:	e001      	b.n	8012c5c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
 8012c5e:	2b01      	cmp	r3, #1
 8012c60:	d10c      	bne.n	8012c7c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	691a      	ldr	r2, [r3, #16]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6899      	ldr	r1, [r3, #8]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	9300      	str	r3, [sp, #0]
 8012c6e:	460b      	mov	r3, r1
 8012c70:	68b9      	ldr	r1, [r7, #8]
 8012c72:	68f8      	ldr	r0, [r7, #12]
 8012c74:	f000 fa5a 	bl	801312c <xQueueGenericCreateStatic>
 8012c78:	6278      	str	r0, [r7, #36]	; 0x24
 8012c7a:	e008      	b.n	8012c8e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012c7c:	6a3b      	ldr	r3, [r7, #32]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d105      	bne.n	8012c8e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012c82:	2200      	movs	r2, #0
 8012c84:	68b9      	ldr	r1, [r7, #8]
 8012c86:	68f8      	ldr	r0, [r7, #12]
 8012c88:	f000 facd 	bl	8013226 <xQueueGenericCreate>
 8012c8c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d00c      	beq.n	8012cae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d003      	beq.n	8012ca2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	61fb      	str	r3, [r7, #28]
 8012ca0:	e001      	b.n	8012ca6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012ca6:	69f9      	ldr	r1, [r7, #28]
 8012ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012caa:	f001 fa53 	bl	8014154 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3728      	adds	r7, #40	; 0x28
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	20000368 	.word	0x20000368

08012cbc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b08a      	sub	sp, #40	; 0x28
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	603b      	str	r3, [r7, #0]
 8012cc8:	4613      	mov	r3, r2
 8012cca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cd4:	f3ef 8305 	mrs	r3, IPSR
 8012cd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8012cda:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d10f      	bne.n	8012d00 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8012ce4:	61bb      	str	r3, [r7, #24]
  return(result);
 8012ce6:	69bb      	ldr	r3, [r7, #24]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d105      	bne.n	8012cf8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012cec:	f3ef 8311 	mrs	r3, BASEPRI
 8012cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d02c      	beq.n	8012d52 <osMessageQueuePut+0x96>
 8012cf8:	4b28      	ldr	r3, [pc, #160]	; (8012d9c <osMessageQueuePut+0xe0>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	2b02      	cmp	r3, #2
 8012cfe:	d128      	bne.n	8012d52 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d00:	6a3b      	ldr	r3, [r7, #32]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d005      	beq.n	8012d12 <osMessageQueuePut+0x56>
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <osMessageQueuePut+0x56>
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d003      	beq.n	8012d1a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012d12:	f06f 0303 	mvn.w	r3, #3
 8012d16:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d18:	e039      	b.n	8012d8e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012d1e:	f107 0210 	add.w	r2, r7, #16
 8012d22:	2300      	movs	r3, #0
 8012d24:	68b9      	ldr	r1, [r7, #8]
 8012d26:	6a38      	ldr	r0, [r7, #32]
 8012d28:	f000 fd24 	bl	8013774 <xQueueGenericSendFromISR>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d003      	beq.n	8012d3a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012d32:	f06f 0302 	mvn.w	r3, #2
 8012d36:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d38:	e029      	b.n	8012d8e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d026      	beq.n	8012d8e <osMessageQueuePut+0xd2>
 8012d40:	4b17      	ldr	r3, [pc, #92]	; (8012da0 <osMessageQueuePut+0xe4>)
 8012d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d46:	601a      	str	r2, [r3, #0]
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d50:	e01d      	b.n	8012d8e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012d52:	6a3b      	ldr	r3, [r7, #32]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <osMessageQueuePut+0xa2>
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d103      	bne.n	8012d66 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012d5e:	f06f 0303 	mvn.w	r3, #3
 8012d62:	627b      	str	r3, [r7, #36]	; 0x24
 8012d64:	e014      	b.n	8012d90 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012d66:	2300      	movs	r3, #0
 8012d68:	683a      	ldr	r2, [r7, #0]
 8012d6a:	68b9      	ldr	r1, [r7, #8]
 8012d6c:	6a38      	ldr	r0, [r7, #32]
 8012d6e:	f000 fbff 	bl	8013570 <xQueueGenericSend>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d00b      	beq.n	8012d90 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d003      	beq.n	8012d86 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012d7e:	f06f 0301 	mvn.w	r3, #1
 8012d82:	627b      	str	r3, [r7, #36]	; 0x24
 8012d84:	e004      	b.n	8012d90 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012d86:	f06f 0302 	mvn.w	r3, #2
 8012d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8012d8c:	e000      	b.n	8012d90 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d8e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3728      	adds	r7, #40	; 0x28
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	20000368 	.word	0x20000368
 8012da0:	e000ed04 	.word	0xe000ed04

08012da4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b08a      	sub	sp, #40	; 0x28
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
 8012db0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012db6:	2300      	movs	r3, #0
 8012db8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dba:	f3ef 8305 	mrs	r3, IPSR
 8012dbe:	61fb      	str	r3, [r7, #28]
  return(result);
 8012dc0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d10f      	bne.n	8012de6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8012dca:	61bb      	str	r3, [r7, #24]
  return(result);
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d105      	bne.n	8012dde <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8012dd6:	617b      	str	r3, [r7, #20]
  return(result);
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d02c      	beq.n	8012e38 <osMessageQueueGet+0x94>
 8012dde:	4b28      	ldr	r3, [pc, #160]	; (8012e80 <osMessageQueueGet+0xdc>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b02      	cmp	r3, #2
 8012de4:	d128      	bne.n	8012e38 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012de6:	6a3b      	ldr	r3, [r7, #32]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d005      	beq.n	8012df8 <osMessageQueueGet+0x54>
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d002      	beq.n	8012df8 <osMessageQueueGet+0x54>
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d003      	beq.n	8012e00 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012df8:	f06f 0303 	mvn.w	r3, #3
 8012dfc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012dfe:	e038      	b.n	8012e72 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012e00:	2300      	movs	r3, #0
 8012e02:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012e04:	f107 0310 	add.w	r3, r7, #16
 8012e08:	461a      	mov	r2, r3
 8012e0a:	68b9      	ldr	r1, [r7, #8]
 8012e0c:	6a38      	ldr	r0, [r7, #32]
 8012e0e:	f000 ffd1 	bl	8013db4 <xQueueReceiveFromISR>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	d003      	beq.n	8012e20 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012e18:	f06f 0302 	mvn.w	r3, #2
 8012e1c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e1e:	e028      	b.n	8012e72 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d025      	beq.n	8012e72 <osMessageQueueGet+0xce>
 8012e26:	4b17      	ldr	r3, [pc, #92]	; (8012e84 <osMessageQueueGet+0xe0>)
 8012e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e2c:	601a      	str	r2, [r3, #0]
 8012e2e:	f3bf 8f4f 	dsb	sy
 8012e32:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e36:	e01c      	b.n	8012e72 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e38:	6a3b      	ldr	r3, [r7, #32]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d002      	beq.n	8012e44 <osMessageQueueGet+0xa0>
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d103      	bne.n	8012e4c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012e44:	f06f 0303 	mvn.w	r3, #3
 8012e48:	627b      	str	r3, [r7, #36]	; 0x24
 8012e4a:	e013      	b.n	8012e74 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e4c:	683a      	ldr	r2, [r7, #0]
 8012e4e:	68b9      	ldr	r1, [r7, #8]
 8012e50:	6a38      	ldr	r0, [r7, #32]
 8012e52:	f000 fdbd 	bl	80139d0 <xQueueReceive>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d00b      	beq.n	8012e74 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d003      	beq.n	8012e6a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012e62:	f06f 0301 	mvn.w	r3, #1
 8012e66:	627b      	str	r3, [r7, #36]	; 0x24
 8012e68:	e004      	b.n	8012e74 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012e6a:	f06f 0302 	mvn.w	r3, #2
 8012e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8012e70:	e000      	b.n	8012e74 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e72:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3728      	adds	r7, #40	; 0x28
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	20000368 	.word	0x20000368
 8012e84:	e000ed04 	.word	0xe000ed04

08012e88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e88:	b480      	push	{r7}
 8012e8a:	b085      	sub	sp, #20
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	4a07      	ldr	r2, [pc, #28]	; (8012eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8012e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	4a06      	ldr	r2, [pc, #24]	; (8012eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8012e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2280      	movs	r2, #128	; 0x80
 8012ea4:	601a      	str	r2, [r3, #0]
}
 8012ea6:	bf00      	nop
 8012ea8:	3714      	adds	r7, #20
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	2000036c 	.word	0x2000036c
 8012eb8:	200003c8 	.word	0x200003c8

08012ebc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012ebc:	b480      	push	{r7}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	60f8      	str	r0, [r7, #12]
 8012ec4:	60b9      	str	r1, [r7, #8]
 8012ec6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	4a07      	ldr	r2, [pc, #28]	; (8012ee8 <vApplicationGetTimerTaskMemory+0x2c>)
 8012ecc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012ece:	68bb      	ldr	r3, [r7, #8]
 8012ed0:	4a06      	ldr	r2, [pc, #24]	; (8012eec <vApplicationGetTimerTaskMemory+0x30>)
 8012ed2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012eda:	601a      	str	r2, [r3, #0]
}
 8012edc:	bf00      	nop
 8012ede:	3714      	adds	r7, #20
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr
 8012ee8:	200005c8 	.word	0x200005c8
 8012eec:	20000624 	.word	0x20000624

08012ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012ef0:	b480      	push	{r7}
 8012ef2:	b083      	sub	sp, #12
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f103 0208 	add.w	r2, r3, #8
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f04f 32ff 	mov.w	r2, #4294967295
 8012f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f103 0208 	add.w	r2, r3, #8
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f103 0208 	add.w	r2, r3, #8
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2200      	movs	r2, #0
 8012f22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012f24:	bf00      	nop
 8012f26:	370c      	adds	r7, #12
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr

08012f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012f30:	b480      	push	{r7}
 8012f32:	b083      	sub	sp, #12
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012f3e:	bf00      	nop
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr

08012f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f4a:	b480      	push	{r7}
 8012f4c:	b085      	sub	sp, #20
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
 8012f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	68fa      	ldr	r2, [r7, #12]
 8012f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	689a      	ldr	r2, [r3, #8]
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	689b      	ldr	r3, [r3, #8]
 8012f6c:	683a      	ldr	r2, [r7, #0]
 8012f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	683a      	ldr	r2, [r7, #0]
 8012f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	1c5a      	adds	r2, r3, #1
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	601a      	str	r2, [r3, #0]
}
 8012f86:	bf00      	nop
 8012f88:	3714      	adds	r7, #20
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr

08012f92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f92:	b480      	push	{r7}
 8012f94:	b085      	sub	sp, #20
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
 8012f9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa8:	d103      	bne.n	8012fb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	691b      	ldr	r3, [r3, #16]
 8012fae:	60fb      	str	r3, [r7, #12]
 8012fb0:	e00c      	b.n	8012fcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	3308      	adds	r3, #8
 8012fb6:	60fb      	str	r3, [r7, #12]
 8012fb8:	e002      	b.n	8012fc0 <vListInsert+0x2e>
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	60fb      	str	r3, [r7, #12]
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	68ba      	ldr	r2, [r7, #8]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d2f6      	bcs.n	8012fba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	685a      	ldr	r2, [r3, #4]
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	683a      	ldr	r2, [r7, #0]
 8012fda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	68fa      	ldr	r2, [r7, #12]
 8012fe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	683a      	ldr	r2, [r7, #0]
 8012fe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	1c5a      	adds	r2, r3, #1
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	601a      	str	r2, [r3, #0]
}
 8012ff8:	bf00      	nop
 8012ffa:	3714      	adds	r7, #20
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013002:	4770      	bx	lr

08013004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013004:	b480      	push	{r7}
 8013006:	b085      	sub	sp, #20
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	691b      	ldr	r3, [r3, #16]
 8013010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	6892      	ldr	r2, [r2, #8]
 801301a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	689b      	ldr	r3, [r3, #8]
 8013020:	687a      	ldr	r2, [r7, #4]
 8013022:	6852      	ldr	r2, [r2, #4]
 8013024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	429a      	cmp	r2, r3
 801302e:	d103      	bne.n	8013038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	689a      	ldr	r2, [r3, #8]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2200      	movs	r2, #0
 801303c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	1e5a      	subs	r2, r3, #1
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681b      	ldr	r3, [r3, #0]
}
 801304c:	4618      	mov	r0, r3
 801304e:	3714      	adds	r7, #20
 8013050:	46bd      	mov	sp, r7
 8013052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013056:	4770      	bx	lr

08013058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b084      	sub	sp, #16
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d10b      	bne.n	8013084 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013070:	b672      	cpsid	i
 8013072:	f383 8811 	msr	BASEPRI, r3
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	b662      	cpsie	i
 8013080:	60bb      	str	r3, [r7, #8]
 8013082:	e7fe      	b.n	8013082 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013084:	f002 fdf8 	bl	8015c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013090:	68f9      	ldr	r1, [r7, #12]
 8013092:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013094:	fb01 f303 	mul.w	r3, r1, r3
 8013098:	441a      	add	r2, r3
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2200      	movs	r2, #0
 80130a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681a      	ldr	r2, [r3, #0]
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130b4:	3b01      	subs	r3, #1
 80130b6:	68f9      	ldr	r1, [r7, #12]
 80130b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80130ba:	fb01 f303 	mul.w	r3, r1, r3
 80130be:	441a      	add	r2, r3
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	22ff      	movs	r2, #255	; 0xff
 80130c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	22ff      	movs	r2, #255	; 0xff
 80130d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d114      	bne.n	8013104 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	691b      	ldr	r3, [r3, #16]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d01a      	beq.n	8013118 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	3310      	adds	r3, #16
 80130e6:	4618      	mov	r0, r3
 80130e8:	f001 fdb6 	bl	8014c58 <xTaskRemoveFromEventList>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d012      	beq.n	8013118 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80130f2:	4b0d      	ldr	r3, [pc, #52]	; (8013128 <xQueueGenericReset+0xd0>)
 80130f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130f8:	601a      	str	r2, [r3, #0]
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	e009      	b.n	8013118 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	3310      	adds	r3, #16
 8013108:	4618      	mov	r0, r3
 801310a:	f7ff fef1 	bl	8012ef0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	3324      	adds	r3, #36	; 0x24
 8013112:	4618      	mov	r0, r3
 8013114:	f7ff feec 	bl	8012ef0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013118:	f002 fde0 	bl	8015cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801311c:	2301      	movs	r3, #1
}
 801311e:	4618      	mov	r0, r3
 8013120:	3710      	adds	r7, #16
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	e000ed04 	.word	0xe000ed04

0801312c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801312c:	b580      	push	{r7, lr}
 801312e:	b08e      	sub	sp, #56	; 0x38
 8013130:	af02      	add	r7, sp, #8
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	607a      	str	r2, [r7, #4]
 8013138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d10b      	bne.n	8013158 <xQueueGenericCreateStatic+0x2c>
 8013140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013144:	b672      	cpsid	i
 8013146:	f383 8811 	msr	BASEPRI, r3
 801314a:	f3bf 8f6f 	isb	sy
 801314e:	f3bf 8f4f 	dsb	sy
 8013152:	b662      	cpsie	i
 8013154:	62bb      	str	r3, [r7, #40]	; 0x28
 8013156:	e7fe      	b.n	8013156 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d10b      	bne.n	8013176 <xQueueGenericCreateStatic+0x4a>
 801315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013162:	b672      	cpsid	i
 8013164:	f383 8811 	msr	BASEPRI, r3
 8013168:	f3bf 8f6f 	isb	sy
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	b662      	cpsie	i
 8013172:	627b      	str	r3, [r7, #36]	; 0x24
 8013174:	e7fe      	b.n	8013174 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d002      	beq.n	8013182 <xQueueGenericCreateStatic+0x56>
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <xQueueGenericCreateStatic+0x5a>
 8013182:	2301      	movs	r3, #1
 8013184:	e000      	b.n	8013188 <xQueueGenericCreateStatic+0x5c>
 8013186:	2300      	movs	r3, #0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d10b      	bne.n	80131a4 <xQueueGenericCreateStatic+0x78>
 801318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013190:	b672      	cpsid	i
 8013192:	f383 8811 	msr	BASEPRI, r3
 8013196:	f3bf 8f6f 	isb	sy
 801319a:	f3bf 8f4f 	dsb	sy
 801319e:	b662      	cpsie	i
 80131a0:	623b      	str	r3, [r7, #32]
 80131a2:	e7fe      	b.n	80131a2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d102      	bne.n	80131b0 <xQueueGenericCreateStatic+0x84>
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d101      	bne.n	80131b4 <xQueueGenericCreateStatic+0x88>
 80131b0:	2301      	movs	r3, #1
 80131b2:	e000      	b.n	80131b6 <xQueueGenericCreateStatic+0x8a>
 80131b4:	2300      	movs	r3, #0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d10b      	bne.n	80131d2 <xQueueGenericCreateStatic+0xa6>
 80131ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131be:	b672      	cpsid	i
 80131c0:	f383 8811 	msr	BASEPRI, r3
 80131c4:	f3bf 8f6f 	isb	sy
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	b662      	cpsie	i
 80131ce:	61fb      	str	r3, [r7, #28]
 80131d0:	e7fe      	b.n	80131d0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80131d2:	2350      	movs	r3, #80	; 0x50
 80131d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	2b50      	cmp	r3, #80	; 0x50
 80131da:	d00b      	beq.n	80131f4 <xQueueGenericCreateStatic+0xc8>
 80131dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e0:	b672      	cpsid	i
 80131e2:	f383 8811 	msr	BASEPRI, r3
 80131e6:	f3bf 8f6f 	isb	sy
 80131ea:	f3bf 8f4f 	dsb	sy
 80131ee:	b662      	cpsie	i
 80131f0:	61bb      	str	r3, [r7, #24]
 80131f2:	e7fe      	b.n	80131f2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80131f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80131fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00d      	beq.n	801321c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013202:	2201      	movs	r2, #1
 8013204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013208:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320e:	9300      	str	r3, [sp, #0]
 8013210:	4613      	mov	r3, r2
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	68b9      	ldr	r1, [r7, #8]
 8013216:	68f8      	ldr	r0, [r7, #12]
 8013218:	f000 f846 	bl	80132a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801321e:	4618      	mov	r0, r3
 8013220:	3730      	adds	r7, #48	; 0x30
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013226:	b580      	push	{r7, lr}
 8013228:	b08a      	sub	sp, #40	; 0x28
 801322a:	af02      	add	r7, sp, #8
 801322c:	60f8      	str	r0, [r7, #12]
 801322e:	60b9      	str	r1, [r7, #8]
 8013230:	4613      	mov	r3, r2
 8013232:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d10b      	bne.n	8013252 <xQueueGenericCreate+0x2c>
 801323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801323e:	b672      	cpsid	i
 8013240:	f383 8811 	msr	BASEPRI, r3
 8013244:	f3bf 8f6f 	isb	sy
 8013248:	f3bf 8f4f 	dsb	sy
 801324c:	b662      	cpsie	i
 801324e:	613b      	str	r3, [r7, #16]
 8013250:	e7fe      	b.n	8013250 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d102      	bne.n	801325e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013258:	2300      	movs	r3, #0
 801325a:	61fb      	str	r3, [r7, #28]
 801325c:	e004      	b.n	8013268 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	68ba      	ldr	r2, [r7, #8]
 8013262:	fb02 f303 	mul.w	r3, r2, r3
 8013266:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	3350      	adds	r3, #80	; 0x50
 801326c:	4618      	mov	r0, r3
 801326e:	f002 fe25 	bl	8015ebc <pvPortMalloc>
 8013272:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013274:	69bb      	ldr	r3, [r7, #24]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d011      	beq.n	801329e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	3350      	adds	r3, #80	; 0x50
 8013282:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	2200      	movs	r2, #0
 8013288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801328c:	79fa      	ldrb	r2, [r7, #7]
 801328e:	69bb      	ldr	r3, [r7, #24]
 8013290:	9300      	str	r3, [sp, #0]
 8013292:	4613      	mov	r3, r2
 8013294:	697a      	ldr	r2, [r7, #20]
 8013296:	68b9      	ldr	r1, [r7, #8]
 8013298:	68f8      	ldr	r0, [r7, #12]
 801329a:	f000 f805 	bl	80132a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801329e:	69bb      	ldr	r3, [r7, #24]
	}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3720      	adds	r7, #32
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	60b9      	str	r1, [r7, #8]
 80132b2:	607a      	str	r2, [r7, #4]
 80132b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d103      	bne.n	80132c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80132bc:	69bb      	ldr	r3, [r7, #24]
 80132be:	69ba      	ldr	r2, [r7, #24]
 80132c0:	601a      	str	r2, [r3, #0]
 80132c2:	e002      	b.n	80132ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	68fa      	ldr	r2, [r7, #12]
 80132ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	68ba      	ldr	r2, [r7, #8]
 80132d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80132d6:	2101      	movs	r1, #1
 80132d8:	69b8      	ldr	r0, [r7, #24]
 80132da:	f7ff febd 	bl	8013058 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	78fa      	ldrb	r2, [r7, #3]
 80132e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80132e6:	bf00      	nop
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b082      	sub	sp, #8
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d00e      	beq.n	801331a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2200      	movs	r2, #0
 8013300:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801330e:	2300      	movs	r3, #0
 8013310:	2200      	movs	r2, #0
 8013312:	2100      	movs	r1, #0
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f000 f92b 	bl	8013570 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801331a:	bf00      	nop
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013322:	b580      	push	{r7, lr}
 8013324:	b086      	sub	sp, #24
 8013326:	af00      	add	r7, sp, #0
 8013328:	4603      	mov	r3, r0
 801332a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801332c:	2301      	movs	r3, #1
 801332e:	617b      	str	r3, [r7, #20]
 8013330:	2300      	movs	r3, #0
 8013332:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013334:	79fb      	ldrb	r3, [r7, #7]
 8013336:	461a      	mov	r2, r3
 8013338:	6939      	ldr	r1, [r7, #16]
 801333a:	6978      	ldr	r0, [r7, #20]
 801333c:	f7ff ff73 	bl	8013226 <xQueueGenericCreate>
 8013340:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013342:	68f8      	ldr	r0, [r7, #12]
 8013344:	f7ff ffd3 	bl	80132ee <prvInitialiseMutex>

		return xNewQueue;
 8013348:	68fb      	ldr	r3, [r7, #12]
	}
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013352:	b580      	push	{r7, lr}
 8013354:	b088      	sub	sp, #32
 8013356:	af02      	add	r7, sp, #8
 8013358:	4603      	mov	r3, r0
 801335a:	6039      	str	r1, [r7, #0]
 801335c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801335e:	2301      	movs	r3, #1
 8013360:	617b      	str	r3, [r7, #20]
 8013362:	2300      	movs	r3, #0
 8013364:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013366:	79fb      	ldrb	r3, [r7, #7]
 8013368:	9300      	str	r3, [sp, #0]
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	2200      	movs	r2, #0
 801336e:	6939      	ldr	r1, [r7, #16]
 8013370:	6978      	ldr	r0, [r7, #20]
 8013372:	f7ff fedb 	bl	801312c <xQueueGenericCreateStatic>
 8013376:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013378:	68f8      	ldr	r0, [r7, #12]
 801337a:	f7ff ffb8 	bl	80132ee <prvInitialiseMutex>

		return xNewQueue;
 801337e:	68fb      	ldr	r3, [r7, #12]
	}
 8013380:	4618      	mov	r0, r3
 8013382:	3718      	adds	r7, #24
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8013394:	f002 fc70 	bl	8015c78 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d103      	bne.n	80133a8 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	60fb      	str	r3, [r7, #12]
 80133a6:	e001      	b.n	80133ac <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80133ac:	f002 fc96 	bl	8015cdc <vPortExitCritical>

		return pxReturn;
 80133b0:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 80133b2:	4618      	mov	r0, r3
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}

080133ba <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80133ba:	b590      	push	{r4, r7, lr}
 80133bc:	b087      	sub	sp, #28
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d10b      	bne.n	80133e4 <xQueueGiveMutexRecursive+0x2a>
 80133cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d0:	b672      	cpsid	i
 80133d2:	f383 8811 	msr	BASEPRI, r3
 80133d6:	f3bf 8f6f 	isb	sy
 80133da:	f3bf 8f4f 	dsb	sy
 80133de:	b662      	cpsie	i
 80133e0:	60fb      	str	r3, [r7, #12]
 80133e2:	e7fe      	b.n	80133e2 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	689c      	ldr	r4, [r3, #8]
 80133e8:	f001 fdf4 	bl	8014fd4 <xTaskGetCurrentTaskHandle>
 80133ec:	4603      	mov	r3, r0
 80133ee:	429c      	cmp	r4, r3
 80133f0:	d111      	bne.n	8013416 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	1e5a      	subs	r2, r3, #1
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d105      	bne.n	8013410 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8013404:	2300      	movs	r3, #0
 8013406:	2200      	movs	r2, #0
 8013408:	2100      	movs	r1, #0
 801340a:	6938      	ldr	r0, [r7, #16]
 801340c:	f000 f8b0 	bl	8013570 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8013410:	2301      	movs	r3, #1
 8013412:	617b      	str	r3, [r7, #20]
 8013414:	e001      	b.n	801341a <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8013416:	2300      	movs	r3, #0
 8013418:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801341a:	697b      	ldr	r3, [r7, #20]
	}
 801341c:	4618      	mov	r0, r3
 801341e:	371c      	adds	r7, #28
 8013420:	46bd      	mov	sp, r7
 8013422:	bd90      	pop	{r4, r7, pc}

08013424 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8013424:	b590      	push	{r4, r7, lr}
 8013426:	b087      	sub	sp, #28
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d10b      	bne.n	8013450 <xQueueTakeMutexRecursive+0x2c>
 8013438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343c:	b672      	cpsid	i
 801343e:	f383 8811 	msr	BASEPRI, r3
 8013442:	f3bf 8f6f 	isb	sy
 8013446:	f3bf 8f4f 	dsb	sy
 801344a:	b662      	cpsie	i
 801344c:	60fb      	str	r3, [r7, #12]
 801344e:	e7fe      	b.n	801344e <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	689c      	ldr	r4, [r3, #8]
 8013454:	f001 fdbe 	bl	8014fd4 <xTaskGetCurrentTaskHandle>
 8013458:	4603      	mov	r3, r0
 801345a:	429c      	cmp	r4, r3
 801345c:	d107      	bne.n	801346e <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	1c5a      	adds	r2, r3, #1
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8013468:	2301      	movs	r3, #1
 801346a:	617b      	str	r3, [r7, #20]
 801346c:	e00c      	b.n	8013488 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801346e:	6839      	ldr	r1, [r7, #0]
 8013470:	6938      	ldr	r0, [r7, #16]
 8013472:	f000 fb8f 	bl	8013b94 <xQueueSemaphoreTake>
 8013476:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d004      	beq.n	8013488 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	68db      	ldr	r3, [r3, #12]
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8013488:	697b      	ldr	r3, [r7, #20]
	}
 801348a:	4618      	mov	r0, r3
 801348c:	371c      	adds	r7, #28
 801348e:	46bd      	mov	sp, r7
 8013490:	bd90      	pop	{r4, r7, pc}

08013492 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013492:	b580      	push	{r7, lr}
 8013494:	b08a      	sub	sp, #40	; 0x28
 8013496:	af02      	add	r7, sp, #8
 8013498:	60f8      	str	r0, [r7, #12]
 801349a:	60b9      	str	r1, [r7, #8]
 801349c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d10b      	bne.n	80134bc <xQueueCreateCountingSemaphoreStatic+0x2a>
 80134a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a8:	b672      	cpsid	i
 80134aa:	f383 8811 	msr	BASEPRI, r3
 80134ae:	f3bf 8f6f 	isb	sy
 80134b2:	f3bf 8f4f 	dsb	sy
 80134b6:	b662      	cpsie	i
 80134b8:	61bb      	str	r3, [r7, #24]
 80134ba:	e7fe      	b.n	80134ba <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80134bc:	68ba      	ldr	r2, [r7, #8]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d90b      	bls.n	80134dc <xQueueCreateCountingSemaphoreStatic+0x4a>
 80134c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c8:	b672      	cpsid	i
 80134ca:	f383 8811 	msr	BASEPRI, r3
 80134ce:	f3bf 8f6f 	isb	sy
 80134d2:	f3bf 8f4f 	dsb	sy
 80134d6:	b662      	cpsie	i
 80134d8:	617b      	str	r3, [r7, #20]
 80134da:	e7fe      	b.n	80134da <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80134dc:	2302      	movs	r3, #2
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2200      	movs	r2, #0
 80134e4:	2100      	movs	r1, #0
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	f7ff fe20 	bl	801312c <xQueueGenericCreateStatic>
 80134ec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80134ee:	69fb      	ldr	r3, [r7, #28]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d002      	beq.n	80134fa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80134f4:	69fb      	ldr	r3, [r7, #28]
 80134f6:	68ba      	ldr	r2, [r7, #8]
 80134f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80134fa:	69fb      	ldr	r3, [r7, #28]
	}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3720      	adds	r7, #32
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8013504:	b580      	push	{r7, lr}
 8013506:	b086      	sub	sp, #24
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d10b      	bne.n	801352c <xQueueCreateCountingSemaphore+0x28>
 8013514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013518:	b672      	cpsid	i
 801351a:	f383 8811 	msr	BASEPRI, r3
 801351e:	f3bf 8f6f 	isb	sy
 8013522:	f3bf 8f4f 	dsb	sy
 8013526:	b662      	cpsie	i
 8013528:	613b      	str	r3, [r7, #16]
 801352a:	e7fe      	b.n	801352a <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801352c:	683a      	ldr	r2, [r7, #0]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	429a      	cmp	r2, r3
 8013532:	d90b      	bls.n	801354c <xQueueCreateCountingSemaphore+0x48>
 8013534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013538:	b672      	cpsid	i
 801353a:	f383 8811 	msr	BASEPRI, r3
 801353e:	f3bf 8f6f 	isb	sy
 8013542:	f3bf 8f4f 	dsb	sy
 8013546:	b662      	cpsie	i
 8013548:	60fb      	str	r3, [r7, #12]
 801354a:	e7fe      	b.n	801354a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801354c:	2202      	movs	r2, #2
 801354e:	2100      	movs	r1, #0
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff fe68 	bl	8013226 <xQueueGenericCreate>
 8013556:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d002      	beq.n	8013564 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	683a      	ldr	r2, [r7, #0]
 8013562:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013564:	697b      	ldr	r3, [r7, #20]
	}
 8013566:	4618      	mov	r0, r3
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
	...

08013570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b08e      	sub	sp, #56	; 0x38
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	607a      	str	r2, [r7, #4]
 801357c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801357e:	2300      	movs	r3, #0
 8013580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013588:	2b00      	cmp	r3, #0
 801358a:	d10b      	bne.n	80135a4 <xQueueGenericSend+0x34>
 801358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013590:	b672      	cpsid	i
 8013592:	f383 8811 	msr	BASEPRI, r3
 8013596:	f3bf 8f6f 	isb	sy
 801359a:	f3bf 8f4f 	dsb	sy
 801359e:	b662      	cpsie	i
 80135a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80135a2:	e7fe      	b.n	80135a2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d103      	bne.n	80135b2 <xQueueGenericSend+0x42>
 80135aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d101      	bne.n	80135b6 <xQueueGenericSend+0x46>
 80135b2:	2301      	movs	r3, #1
 80135b4:	e000      	b.n	80135b8 <xQueueGenericSend+0x48>
 80135b6:	2300      	movs	r3, #0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d10b      	bne.n	80135d4 <xQueueGenericSend+0x64>
 80135bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c0:	b672      	cpsid	i
 80135c2:	f383 8811 	msr	BASEPRI, r3
 80135c6:	f3bf 8f6f 	isb	sy
 80135ca:	f3bf 8f4f 	dsb	sy
 80135ce:	b662      	cpsie	i
 80135d0:	627b      	str	r3, [r7, #36]	; 0x24
 80135d2:	e7fe      	b.n	80135d2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	2b02      	cmp	r3, #2
 80135d8:	d103      	bne.n	80135e2 <xQueueGenericSend+0x72>
 80135da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d101      	bne.n	80135e6 <xQueueGenericSend+0x76>
 80135e2:	2301      	movs	r3, #1
 80135e4:	e000      	b.n	80135e8 <xQueueGenericSend+0x78>
 80135e6:	2300      	movs	r3, #0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d10b      	bne.n	8013604 <xQueueGenericSend+0x94>
 80135ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f0:	b672      	cpsid	i
 80135f2:	f383 8811 	msr	BASEPRI, r3
 80135f6:	f3bf 8f6f 	isb	sy
 80135fa:	f3bf 8f4f 	dsb	sy
 80135fe:	b662      	cpsie	i
 8013600:	623b      	str	r3, [r7, #32]
 8013602:	e7fe      	b.n	8013602 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013604:	f001 fcf6 	bl	8014ff4 <xTaskGetSchedulerState>
 8013608:	4603      	mov	r3, r0
 801360a:	2b00      	cmp	r3, #0
 801360c:	d102      	bne.n	8013614 <xQueueGenericSend+0xa4>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d101      	bne.n	8013618 <xQueueGenericSend+0xa8>
 8013614:	2301      	movs	r3, #1
 8013616:	e000      	b.n	801361a <xQueueGenericSend+0xaa>
 8013618:	2300      	movs	r3, #0
 801361a:	2b00      	cmp	r3, #0
 801361c:	d10b      	bne.n	8013636 <xQueueGenericSend+0xc6>
 801361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013622:	b672      	cpsid	i
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	b662      	cpsie	i
 8013632:	61fb      	str	r3, [r7, #28]
 8013634:	e7fe      	b.n	8013634 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013636:	f002 fb1f 	bl	8015c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013642:	429a      	cmp	r2, r3
 8013644:	d302      	bcc.n	801364c <xQueueGenericSend+0xdc>
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b02      	cmp	r3, #2
 801364a:	d129      	bne.n	80136a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801364c:	683a      	ldr	r2, [r7, #0]
 801364e:	68b9      	ldr	r1, [r7, #8]
 8013650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013652:	f000 fc6e 	bl	8013f32 <prvCopyDataToQueue>
 8013656:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801365c:	2b00      	cmp	r3, #0
 801365e:	d010      	beq.n	8013682 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013662:	3324      	adds	r3, #36	; 0x24
 8013664:	4618      	mov	r0, r3
 8013666:	f001 faf7 	bl	8014c58 <xTaskRemoveFromEventList>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d013      	beq.n	8013698 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013670:	4b3f      	ldr	r3, [pc, #252]	; (8013770 <xQueueGenericSend+0x200>)
 8013672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013676:	601a      	str	r2, [r3, #0]
 8013678:	f3bf 8f4f 	dsb	sy
 801367c:	f3bf 8f6f 	isb	sy
 8013680:	e00a      	b.n	8013698 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013684:	2b00      	cmp	r3, #0
 8013686:	d007      	beq.n	8013698 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013688:	4b39      	ldr	r3, [pc, #228]	; (8013770 <xQueueGenericSend+0x200>)
 801368a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801368e:	601a      	str	r2, [r3, #0]
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013698:	f002 fb20 	bl	8015cdc <vPortExitCritical>
				return pdPASS;
 801369c:	2301      	movs	r3, #1
 801369e:	e063      	b.n	8013768 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d103      	bne.n	80136ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136a6:	f002 fb19 	bl	8015cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80136aa:	2300      	movs	r3, #0
 80136ac:	e05c      	b.n	8013768 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d106      	bne.n	80136c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136b4:	f107 0314 	add.w	r3, r7, #20
 80136b8:	4618      	mov	r0, r3
 80136ba:	f001 fb31 	bl	8014d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136be:	2301      	movs	r3, #1
 80136c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136c2:	f002 fb0b 	bl	8015cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136c6:	f001 f88f 	bl	80147e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136ca:	f002 fad5 	bl	8015c78 <vPortEnterCritical>
 80136ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136d4:	b25b      	sxtb	r3, r3
 80136d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136da:	d103      	bne.n	80136e4 <xQueueGenericSend+0x174>
 80136dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136de:	2200      	movs	r2, #0
 80136e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136ea:	b25b      	sxtb	r3, r3
 80136ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f0:	d103      	bne.n	80136fa <xQueueGenericSend+0x18a>
 80136f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f4:	2200      	movs	r2, #0
 80136f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136fa:	f002 faef 	bl	8015cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136fe:	1d3a      	adds	r2, r7, #4
 8013700:	f107 0314 	add.w	r3, r7, #20
 8013704:	4611      	mov	r1, r2
 8013706:	4618      	mov	r0, r3
 8013708:	f001 fb20 	bl	8014d4c <xTaskCheckForTimeOut>
 801370c:	4603      	mov	r3, r0
 801370e:	2b00      	cmp	r3, #0
 8013710:	d124      	bne.n	801375c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013714:	f000 fd05 	bl	8014122 <prvIsQueueFull>
 8013718:	4603      	mov	r3, r0
 801371a:	2b00      	cmp	r3, #0
 801371c:	d018      	beq.n	8013750 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013720:	3310      	adds	r3, #16
 8013722:	687a      	ldr	r2, [r7, #4]
 8013724:	4611      	mov	r1, r2
 8013726:	4618      	mov	r0, r3
 8013728:	f001 fa44 	bl	8014bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801372c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801372e:	f000 fc90 	bl	8014052 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013732:	f001 f867 	bl	8014804 <xTaskResumeAll>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	f47f af7c 	bne.w	8013636 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801373e:	4b0c      	ldr	r3, [pc, #48]	; (8013770 <xQueueGenericSend+0x200>)
 8013740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	f3bf 8f4f 	dsb	sy
 801374a:	f3bf 8f6f 	isb	sy
 801374e:	e772      	b.n	8013636 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013752:	f000 fc7e 	bl	8014052 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013756:	f001 f855 	bl	8014804 <xTaskResumeAll>
 801375a:	e76c      	b.n	8013636 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801375c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801375e:	f000 fc78 	bl	8014052 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013762:	f001 f84f 	bl	8014804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013766:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013768:	4618      	mov	r0, r3
 801376a:	3738      	adds	r7, #56	; 0x38
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	e000ed04 	.word	0xe000ed04

08013774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b08e      	sub	sp, #56	; 0x38
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	607a      	str	r2, [r7, #4]
 8013780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013788:	2b00      	cmp	r3, #0
 801378a:	d10b      	bne.n	80137a4 <xQueueGenericSendFromISR+0x30>
 801378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013790:	b672      	cpsid	i
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	b662      	cpsie	i
 80137a0:	627b      	str	r3, [r7, #36]	; 0x24
 80137a2:	e7fe      	b.n	80137a2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d103      	bne.n	80137b2 <xQueueGenericSendFromISR+0x3e>
 80137aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d101      	bne.n	80137b6 <xQueueGenericSendFromISR+0x42>
 80137b2:	2301      	movs	r3, #1
 80137b4:	e000      	b.n	80137b8 <xQueueGenericSendFromISR+0x44>
 80137b6:	2300      	movs	r3, #0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d10b      	bne.n	80137d4 <xQueueGenericSendFromISR+0x60>
 80137bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c0:	b672      	cpsid	i
 80137c2:	f383 8811 	msr	BASEPRI, r3
 80137c6:	f3bf 8f6f 	isb	sy
 80137ca:	f3bf 8f4f 	dsb	sy
 80137ce:	b662      	cpsie	i
 80137d0:	623b      	str	r3, [r7, #32]
 80137d2:	e7fe      	b.n	80137d2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	d103      	bne.n	80137e2 <xQueueGenericSendFromISR+0x6e>
 80137da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137de:	2b01      	cmp	r3, #1
 80137e0:	d101      	bne.n	80137e6 <xQueueGenericSendFromISR+0x72>
 80137e2:	2301      	movs	r3, #1
 80137e4:	e000      	b.n	80137e8 <xQueueGenericSendFromISR+0x74>
 80137e6:	2300      	movs	r3, #0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d10b      	bne.n	8013804 <xQueueGenericSendFromISR+0x90>
 80137ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f0:	b672      	cpsid	i
 80137f2:	f383 8811 	msr	BASEPRI, r3
 80137f6:	f3bf 8f6f 	isb	sy
 80137fa:	f3bf 8f4f 	dsb	sy
 80137fe:	b662      	cpsie	i
 8013800:	61fb      	str	r3, [r7, #28]
 8013802:	e7fe      	b.n	8013802 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013804:	f002 fb18 	bl	8015e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013808:	f3ef 8211 	mrs	r2, BASEPRI
 801380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013810:	b672      	cpsid	i
 8013812:	f383 8811 	msr	BASEPRI, r3
 8013816:	f3bf 8f6f 	isb	sy
 801381a:	f3bf 8f4f 	dsb	sy
 801381e:	b662      	cpsie	i
 8013820:	61ba      	str	r2, [r7, #24]
 8013822:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013824:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013826:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013830:	429a      	cmp	r2, r3
 8013832:	d302      	bcc.n	801383a <xQueueGenericSendFromISR+0xc6>
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	2b02      	cmp	r3, #2
 8013838:	d12c      	bne.n	8013894 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013844:	683a      	ldr	r2, [r7, #0]
 8013846:	68b9      	ldr	r1, [r7, #8]
 8013848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801384a:	f000 fb72 	bl	8013f32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801384e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013856:	d112      	bne.n	801387e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801385c:	2b00      	cmp	r3, #0
 801385e:	d016      	beq.n	801388e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013862:	3324      	adds	r3, #36	; 0x24
 8013864:	4618      	mov	r0, r3
 8013866:	f001 f9f7 	bl	8014c58 <xTaskRemoveFromEventList>
 801386a:	4603      	mov	r3, r0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00e      	beq.n	801388e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00b      	beq.n	801388e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2201      	movs	r2, #1
 801387a:	601a      	str	r2, [r3, #0]
 801387c:	e007      	b.n	801388e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801387e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013882:	3301      	adds	r3, #1
 8013884:	b2db      	uxtb	r3, r3
 8013886:	b25a      	sxtb	r2, r3
 8013888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801388e:	2301      	movs	r3, #1
 8013890:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013892:	e001      	b.n	8013898 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013894:	2300      	movs	r3, #0
 8013896:	637b      	str	r3, [r7, #52]	; 0x34
 8013898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3738      	adds	r7, #56	; 0x38
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b08e      	sub	sp, #56	; 0x38
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80138ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d10b      	bne.n	80138d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80138c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c4:	b672      	cpsid	i
 80138c6:	f383 8811 	msr	BASEPRI, r3
 80138ca:	f3bf 8f6f 	isb	sy
 80138ce:	f3bf 8f4f 	dsb	sy
 80138d2:	b662      	cpsie	i
 80138d4:	623b      	str	r3, [r7, #32]
 80138d6:	e7fe      	b.n	80138d6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80138d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00b      	beq.n	80138f8 <xQueueGiveFromISR+0x4c>
 80138e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e4:	b672      	cpsid	i
 80138e6:	f383 8811 	msr	BASEPRI, r3
 80138ea:	f3bf 8f6f 	isb	sy
 80138ee:	f3bf 8f4f 	dsb	sy
 80138f2:	b662      	cpsie	i
 80138f4:	61fb      	str	r3, [r7, #28]
 80138f6:	e7fe      	b.n	80138f6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80138f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d103      	bne.n	8013908 <xQueueGiveFromISR+0x5c>
 8013900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013902:	689b      	ldr	r3, [r3, #8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d101      	bne.n	801390c <xQueueGiveFromISR+0x60>
 8013908:	2301      	movs	r3, #1
 801390a:	e000      	b.n	801390e <xQueueGiveFromISR+0x62>
 801390c:	2300      	movs	r3, #0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10b      	bne.n	801392a <xQueueGiveFromISR+0x7e>
 8013912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013916:	b672      	cpsid	i
 8013918:	f383 8811 	msr	BASEPRI, r3
 801391c:	f3bf 8f6f 	isb	sy
 8013920:	f3bf 8f4f 	dsb	sy
 8013924:	b662      	cpsie	i
 8013926:	61bb      	str	r3, [r7, #24]
 8013928:	e7fe      	b.n	8013928 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801392a:	f002 fa85 	bl	8015e38 <vPortValidateInterruptPriority>
	__asm volatile
 801392e:	f3ef 8211 	mrs	r2, BASEPRI
 8013932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013936:	b672      	cpsid	i
 8013938:	f383 8811 	msr	BASEPRI, r3
 801393c:	f3bf 8f6f 	isb	sy
 8013940:	f3bf 8f4f 	dsb	sy
 8013944:	b662      	cpsie	i
 8013946:	617a      	str	r2, [r7, #20]
 8013948:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801394a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801394c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013952:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801395a:	429a      	cmp	r2, r3
 801395c:	d22b      	bcs.n	80139b6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396a:	1c5a      	adds	r2, r3, #1
 801396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013970:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013978:	d112      	bne.n	80139a0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801397e:	2b00      	cmp	r3, #0
 8013980:	d016      	beq.n	80139b0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	3324      	adds	r3, #36	; 0x24
 8013986:	4618      	mov	r0, r3
 8013988:	f001 f966 	bl	8014c58 <xTaskRemoveFromEventList>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00e      	beq.n	80139b0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d00b      	beq.n	80139b0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	2201      	movs	r2, #1
 801399c:	601a      	str	r2, [r3, #0]
 801399e:	e007      	b.n	80139b0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80139a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139a4:	3301      	adds	r3, #1
 80139a6:	b2db      	uxtb	r3, r3
 80139a8:	b25a      	sxtb	r2, r3
 80139aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80139b0:	2301      	movs	r3, #1
 80139b2:	637b      	str	r3, [r7, #52]	; 0x34
 80139b4:	e001      	b.n	80139ba <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80139b6:	2300      	movs	r3, #0
 80139b8:	637b      	str	r3, [r7, #52]	; 0x34
 80139ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3738      	adds	r7, #56	; 0x38
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
	...

080139d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b08c      	sub	sp, #48	; 0x30
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80139dc:	2300      	movs	r3, #0
 80139de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80139e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d10b      	bne.n	8013a02 <xQueueReceive+0x32>
	__asm volatile
 80139ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ee:	b672      	cpsid	i
 80139f0:	f383 8811 	msr	BASEPRI, r3
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	b662      	cpsie	i
 80139fe:	623b      	str	r3, [r7, #32]
 8013a00:	e7fe      	b.n	8013a00 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d103      	bne.n	8013a10 <xQueueReceive+0x40>
 8013a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d101      	bne.n	8013a14 <xQueueReceive+0x44>
 8013a10:	2301      	movs	r3, #1
 8013a12:	e000      	b.n	8013a16 <xQueueReceive+0x46>
 8013a14:	2300      	movs	r3, #0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d10b      	bne.n	8013a32 <xQueueReceive+0x62>
 8013a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1e:	b672      	cpsid	i
 8013a20:	f383 8811 	msr	BASEPRI, r3
 8013a24:	f3bf 8f6f 	isb	sy
 8013a28:	f3bf 8f4f 	dsb	sy
 8013a2c:	b662      	cpsie	i
 8013a2e:	61fb      	str	r3, [r7, #28]
 8013a30:	e7fe      	b.n	8013a30 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a32:	f001 fadf 	bl	8014ff4 <xTaskGetSchedulerState>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d102      	bne.n	8013a42 <xQueueReceive+0x72>
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <xQueueReceive+0x76>
 8013a42:	2301      	movs	r3, #1
 8013a44:	e000      	b.n	8013a48 <xQueueReceive+0x78>
 8013a46:	2300      	movs	r3, #0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10b      	bne.n	8013a64 <xQueueReceive+0x94>
 8013a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a50:	b672      	cpsid	i
 8013a52:	f383 8811 	msr	BASEPRI, r3
 8013a56:	f3bf 8f6f 	isb	sy
 8013a5a:	f3bf 8f4f 	dsb	sy
 8013a5e:	b662      	cpsie	i
 8013a60:	61bb      	str	r3, [r7, #24]
 8013a62:	e7fe      	b.n	8013a62 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a64:	f002 f908 	bl	8015c78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d01f      	beq.n	8013ab4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a74:	68b9      	ldr	r1, [r7, #8]
 8013a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a78:	f000 fac5 	bl	8014006 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7e:	1e5a      	subs	r2, r3, #1
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a86:	691b      	ldr	r3, [r3, #16]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00f      	beq.n	8013aac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8e:	3310      	adds	r3, #16
 8013a90:	4618      	mov	r0, r3
 8013a92:	f001 f8e1 	bl	8014c58 <xTaskRemoveFromEventList>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d007      	beq.n	8013aac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a9c:	4b3c      	ldr	r3, [pc, #240]	; (8013b90 <xQueueReceive+0x1c0>)
 8013a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aa2:	601a      	str	r2, [r3, #0]
 8013aa4:	f3bf 8f4f 	dsb	sy
 8013aa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013aac:	f002 f916 	bl	8015cdc <vPortExitCritical>
				return pdPASS;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e069      	b.n	8013b88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d103      	bne.n	8013ac2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013aba:	f002 f90f 	bl	8015cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	e062      	b.n	8013b88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d106      	bne.n	8013ad6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ac8:	f107 0310 	add.w	r3, r7, #16
 8013acc:	4618      	mov	r0, r3
 8013ace:	f001 f927 	bl	8014d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ad6:	f002 f901 	bl	8015cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ada:	f000 fe85 	bl	80147e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ade:	f002 f8cb 	bl	8015c78 <vPortEnterCritical>
 8013ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ae8:	b25b      	sxtb	r3, r3
 8013aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aee:	d103      	bne.n	8013af8 <xQueueReceive+0x128>
 8013af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af2:	2200      	movs	r2, #0
 8013af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013afe:	b25b      	sxtb	r3, r3
 8013b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b04:	d103      	bne.n	8013b0e <xQueueReceive+0x13e>
 8013b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b08:	2200      	movs	r2, #0
 8013b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b0e:	f002 f8e5 	bl	8015cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013b12:	1d3a      	adds	r2, r7, #4
 8013b14:	f107 0310 	add.w	r3, r7, #16
 8013b18:	4611      	mov	r1, r2
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f001 f916 	bl	8014d4c <xTaskCheckForTimeOut>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d123      	bne.n	8013b6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b28:	f000 fae5 	bl	80140f6 <prvIsQueueEmpty>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d017      	beq.n	8013b62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b34:	3324      	adds	r3, #36	; 0x24
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	4611      	mov	r1, r2
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f001 f83a 	bl	8014bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b42:	f000 fa86 	bl	8014052 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b46:	f000 fe5d 	bl	8014804 <xTaskResumeAll>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d189      	bne.n	8013a64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013b50:	4b0f      	ldr	r3, [pc, #60]	; (8013b90 <xQueueReceive+0x1c0>)
 8013b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b56:	601a      	str	r2, [r3, #0]
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	f3bf 8f6f 	isb	sy
 8013b60:	e780      	b.n	8013a64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b64:	f000 fa75 	bl	8014052 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b68:	f000 fe4c 	bl	8014804 <xTaskResumeAll>
 8013b6c:	e77a      	b.n	8013a64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b70:	f000 fa6f 	bl	8014052 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b74:	f000 fe46 	bl	8014804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b7a:	f000 fabc 	bl	80140f6 <prvIsQueueEmpty>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	f43f af6f 	beq.w	8013a64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3730      	adds	r7, #48	; 0x30
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	e000ed04 	.word	0xe000ed04

08013b94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b08e      	sub	sp, #56	; 0x38
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d10b      	bne.n	8013bc8 <xQueueSemaphoreTake+0x34>
 8013bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bb4:	b672      	cpsid	i
 8013bb6:	f383 8811 	msr	BASEPRI, r3
 8013bba:	f3bf 8f6f 	isb	sy
 8013bbe:	f3bf 8f4f 	dsb	sy
 8013bc2:	b662      	cpsie	i
 8013bc4:	623b      	str	r3, [r7, #32]
 8013bc6:	e7fe      	b.n	8013bc6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00b      	beq.n	8013be8 <xQueueSemaphoreTake+0x54>
 8013bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bd4:	b672      	cpsid	i
 8013bd6:	f383 8811 	msr	BASEPRI, r3
 8013bda:	f3bf 8f6f 	isb	sy
 8013bde:	f3bf 8f4f 	dsb	sy
 8013be2:	b662      	cpsie	i
 8013be4:	61fb      	str	r3, [r7, #28]
 8013be6:	e7fe      	b.n	8013be6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013be8:	f001 fa04 	bl	8014ff4 <xTaskGetSchedulerState>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d102      	bne.n	8013bf8 <xQueueSemaphoreTake+0x64>
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d101      	bne.n	8013bfc <xQueueSemaphoreTake+0x68>
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	e000      	b.n	8013bfe <xQueueSemaphoreTake+0x6a>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d10b      	bne.n	8013c1a <xQueueSemaphoreTake+0x86>
 8013c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c06:	b672      	cpsid	i
 8013c08:	f383 8811 	msr	BASEPRI, r3
 8013c0c:	f3bf 8f6f 	isb	sy
 8013c10:	f3bf 8f4f 	dsb	sy
 8013c14:	b662      	cpsie	i
 8013c16:	61bb      	str	r3, [r7, #24]
 8013c18:	e7fe      	b.n	8013c18 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c1a:	f002 f82d 	bl	8015c78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c22:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d024      	beq.n	8013c74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2c:	1e5a      	subs	r2, r3, #1
 8013c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c30:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d104      	bne.n	8013c44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013c3a:	f001 fb55 	bl	80152e8 <pvTaskIncrementMutexHeldCount>
 8013c3e:	4602      	mov	r2, r0
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c46:	691b      	ldr	r3, [r3, #16]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d00f      	beq.n	8013c6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4e:	3310      	adds	r3, #16
 8013c50:	4618      	mov	r0, r3
 8013c52:	f001 f801 	bl	8014c58 <xTaskRemoveFromEventList>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d007      	beq.n	8013c6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013c5c:	4b54      	ldr	r3, [pc, #336]	; (8013db0 <xQueueSemaphoreTake+0x21c>)
 8013c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c62:	601a      	str	r2, [r3, #0]
 8013c64:	f3bf 8f4f 	dsb	sy
 8013c68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c6c:	f002 f836 	bl	8015cdc <vPortExitCritical>
				return pdPASS;
 8013c70:	2301      	movs	r3, #1
 8013c72:	e098      	b.n	8013da6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d112      	bne.n	8013ca0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d00b      	beq.n	8013c98 <xQueueSemaphoreTake+0x104>
 8013c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c84:	b672      	cpsid	i
 8013c86:	f383 8811 	msr	BASEPRI, r3
 8013c8a:	f3bf 8f6f 	isb	sy
 8013c8e:	f3bf 8f4f 	dsb	sy
 8013c92:	b662      	cpsie	i
 8013c94:	617b      	str	r3, [r7, #20]
 8013c96:	e7fe      	b.n	8013c96 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013c98:	f002 f820 	bl	8015cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	e082      	b.n	8013da6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d106      	bne.n	8013cb4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ca6:	f107 030c 	add.w	r3, r7, #12
 8013caa:	4618      	mov	r0, r3
 8013cac:	f001 f838 	bl	8014d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cb4:	f002 f812 	bl	8015cdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cb8:	f000 fd96 	bl	80147e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cbc:	f001 ffdc 	bl	8015c78 <vPortEnterCritical>
 8013cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cc6:	b25b      	sxtb	r3, r3
 8013cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ccc:	d103      	bne.n	8013cd6 <xQueueSemaphoreTake+0x142>
 8013cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cdc:	b25b      	sxtb	r3, r3
 8013cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce2:	d103      	bne.n	8013cec <xQueueSemaphoreTake+0x158>
 8013ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013cec:	f001 fff6 	bl	8015cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013cf0:	463a      	mov	r2, r7
 8013cf2:	f107 030c 	add.w	r3, r7, #12
 8013cf6:	4611      	mov	r1, r2
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f001 f827 	bl	8014d4c <xTaskCheckForTimeOut>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d132      	bne.n	8013d6a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d06:	f000 f9f6 	bl	80140f6 <prvIsQueueEmpty>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d026      	beq.n	8013d5e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d109      	bne.n	8013d2c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013d18:	f001 ffae 	bl	8015c78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1e:	689b      	ldr	r3, [r3, #8]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f001 f985 	bl	8015030 <xTaskPriorityInherit>
 8013d26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013d28:	f001 ffd8 	bl	8015cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2e:	3324      	adds	r3, #36	; 0x24
 8013d30:	683a      	ldr	r2, [r7, #0]
 8013d32:	4611      	mov	r1, r2
 8013d34:	4618      	mov	r0, r3
 8013d36:	f000 ff3d 	bl	8014bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d3c:	f000 f989 	bl	8014052 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d40:	f000 fd60 	bl	8014804 <xTaskResumeAll>
 8013d44:	4603      	mov	r3, r0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f47f af67 	bne.w	8013c1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013d4c:	4b18      	ldr	r3, [pc, #96]	; (8013db0 <xQueueSemaphoreTake+0x21c>)
 8013d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d52:	601a      	str	r2, [r3, #0]
 8013d54:	f3bf 8f4f 	dsb	sy
 8013d58:	f3bf 8f6f 	isb	sy
 8013d5c:	e75d      	b.n	8013c1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013d5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d60:	f000 f977 	bl	8014052 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d64:	f000 fd4e 	bl	8014804 <xTaskResumeAll>
 8013d68:	e757      	b.n	8013c1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013d6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d6c:	f000 f971 	bl	8014052 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d70:	f000 fd48 	bl	8014804 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d76:	f000 f9be 	bl	80140f6 <prvIsQueueEmpty>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f43f af4c 	beq.w	8013c1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00d      	beq.n	8013da4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013d88:	f001 ff76 	bl	8015c78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d8e:	f000 f8b8 	bl	8013f02 <prvGetDisinheritPriorityAfterTimeout>
 8013d92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d96:	689b      	ldr	r3, [r3, #8]
 8013d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f001 fa20 	bl	80151e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013da0:	f001 ff9c 	bl	8015cdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013da4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3738      	adds	r7, #56	; 0x38
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	e000ed04 	.word	0xe000ed04

08013db4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b08e      	sub	sp, #56	; 0x38
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d10b      	bne.n	8013de2 <xQueueReceiveFromISR+0x2e>
 8013dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dce:	b672      	cpsid	i
 8013dd0:	f383 8811 	msr	BASEPRI, r3
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	f3bf 8f4f 	dsb	sy
 8013ddc:	b662      	cpsie	i
 8013dde:	623b      	str	r3, [r7, #32]
 8013de0:	e7fe      	b.n	8013de0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d103      	bne.n	8013df0 <xQueueReceiveFromISR+0x3c>
 8013de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d101      	bne.n	8013df4 <xQueueReceiveFromISR+0x40>
 8013df0:	2301      	movs	r3, #1
 8013df2:	e000      	b.n	8013df6 <xQueueReceiveFromISR+0x42>
 8013df4:	2300      	movs	r3, #0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d10b      	bne.n	8013e12 <xQueueReceiveFromISR+0x5e>
 8013dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dfe:	b672      	cpsid	i
 8013e00:	f383 8811 	msr	BASEPRI, r3
 8013e04:	f3bf 8f6f 	isb	sy
 8013e08:	f3bf 8f4f 	dsb	sy
 8013e0c:	b662      	cpsie	i
 8013e0e:	61fb      	str	r3, [r7, #28]
 8013e10:	e7fe      	b.n	8013e10 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e12:	f002 f811 	bl	8015e38 <vPortValidateInterruptPriority>
	__asm volatile
 8013e16:	f3ef 8211 	mrs	r2, BASEPRI
 8013e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1e:	b672      	cpsid	i
 8013e20:	f383 8811 	msr	BASEPRI, r3
 8013e24:	f3bf 8f6f 	isb	sy
 8013e28:	f3bf 8f4f 	dsb	sy
 8013e2c:	b662      	cpsie	i
 8013e2e:	61ba      	str	r2, [r7, #24]
 8013e30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013e32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d02f      	beq.n	8013ea2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e4c:	68b9      	ldr	r1, [r7, #8]
 8013e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e50:	f000 f8d9 	bl	8014006 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e56:	1e5a      	subs	r2, r3, #1
 8013e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e64:	d112      	bne.n	8013e8c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d016      	beq.n	8013e9c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e70:	3310      	adds	r3, #16
 8013e72:	4618      	mov	r0, r3
 8013e74:	f000 fef0 	bl	8014c58 <xTaskRemoveFromEventList>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d00e      	beq.n	8013e9c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d00b      	beq.n	8013e9c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2201      	movs	r2, #1
 8013e88:	601a      	str	r2, [r3, #0]
 8013e8a:	e007      	b.n	8013e9c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e90:	3301      	adds	r3, #1
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	b25a      	sxtb	r2, r3
 8013e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8013ea0:	e001      	b.n	8013ea6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8013ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3738      	adds	r7, #56	; 0x38
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}

08013eba <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013eba:	b580      	push	{r7, lr}
 8013ebc:	b084      	sub	sp, #16
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d10b      	bne.n	8013ee4 <vQueueDelete+0x2a>
	__asm volatile
 8013ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed0:	b672      	cpsid	i
 8013ed2:	f383 8811 	msr	BASEPRI, r3
 8013ed6:	f3bf 8f6f 	isb	sy
 8013eda:	f3bf 8f4f 	dsb	sy
 8013ede:	b662      	cpsie	i
 8013ee0:	60bb      	str	r3, [r7, #8]
 8013ee2:	e7fe      	b.n	8013ee2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013ee4:	68f8      	ldr	r0, [r7, #12]
 8013ee6:	f000 f95d 	bl	80141a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d102      	bne.n	8013efa <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f002 f8a9 	bl	801604c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013efa:	bf00      	nop
 8013efc:	3710      	adds	r7, #16
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013f02:	b480      	push	{r7}
 8013f04:	b085      	sub	sp, #20
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d006      	beq.n	8013f20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013f1c:	60fb      	str	r3, [r7, #12]
 8013f1e:	e001      	b.n	8013f24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013f20:	2300      	movs	r3, #0
 8013f22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013f24:	68fb      	ldr	r3, [r7, #12]
	}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr

08013f32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013f32:	b580      	push	{r7, lr}
 8013f34:	b086      	sub	sp, #24
 8013f36:	af00      	add	r7, sp, #0
 8013f38:	60f8      	str	r0, [r7, #12]
 8013f3a:	60b9      	str	r1, [r7, #8]
 8013f3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d10d      	bne.n	8013f6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d14d      	bne.n	8013ff4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f001 f8cf 	bl	8015100 <xTaskPriorityDisinherit>
 8013f62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2200      	movs	r2, #0
 8013f68:	609a      	str	r2, [r3, #8]
 8013f6a:	e043      	b.n	8013ff4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d119      	bne.n	8013fa6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	6858      	ldr	r0, [r3, #4]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f7a:	461a      	mov	r2, r3
 8013f7c:	68b9      	ldr	r1, [r7, #8]
 8013f7e:	f002 ff1f 	bl	8016dc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	685a      	ldr	r2, [r3, #4]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f8a:	441a      	add	r2, r3
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	685a      	ldr	r2, [r3, #4]
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	689b      	ldr	r3, [r3, #8]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d32b      	bcc.n	8013ff4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	605a      	str	r2, [r3, #4]
 8013fa4:	e026      	b.n	8013ff4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	68d8      	ldr	r0, [r3, #12]
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fae:	461a      	mov	r2, r3
 8013fb0:	68b9      	ldr	r1, [r7, #8]
 8013fb2:	f002 ff05 	bl	8016dc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	68da      	ldr	r2, [r3, #12]
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fbe:	425b      	negs	r3, r3
 8013fc0:	441a      	add	r2, r3
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	68da      	ldr	r2, [r3, #12]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d207      	bcs.n	8013fe2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	689a      	ldr	r2, [r3, #8]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fda:	425b      	negs	r3, r3
 8013fdc:	441a      	add	r2, r3
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b02      	cmp	r3, #2
 8013fe6:	d105      	bne.n	8013ff4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d002      	beq.n	8013ff4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	3b01      	subs	r3, #1
 8013ff2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	1c5a      	adds	r2, r3, #1
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013ffc:	697b      	ldr	r3, [r7, #20]
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3718      	adds	r7, #24
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014006:	b580      	push	{r7, lr}
 8014008:	b082      	sub	sp, #8
 801400a:	af00      	add	r7, sp, #0
 801400c:	6078      	str	r0, [r7, #4]
 801400e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014014:	2b00      	cmp	r3, #0
 8014016:	d018      	beq.n	801404a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	68da      	ldr	r2, [r3, #12]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014020:	441a      	add	r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	68da      	ldr	r2, [r3, #12]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	689b      	ldr	r3, [r3, #8]
 801402e:	429a      	cmp	r2, r3
 8014030:	d303      	bcc.n	801403a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	68d9      	ldr	r1, [r3, #12]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014042:	461a      	mov	r2, r3
 8014044:	6838      	ldr	r0, [r7, #0]
 8014046:	f002 febb 	bl	8016dc0 <memcpy>
	}
}
 801404a:	bf00      	nop
 801404c:	3708      	adds	r7, #8
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014052:	b580      	push	{r7, lr}
 8014054:	b084      	sub	sp, #16
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801405a:	f001 fe0d 	bl	8015c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014064:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014066:	e011      	b.n	801408c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801406c:	2b00      	cmp	r3, #0
 801406e:	d012      	beq.n	8014096 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	3324      	adds	r3, #36	; 0x24
 8014074:	4618      	mov	r0, r3
 8014076:	f000 fdef 	bl	8014c58 <xTaskRemoveFromEventList>
 801407a:	4603      	mov	r3, r0
 801407c:	2b00      	cmp	r3, #0
 801407e:	d001      	beq.n	8014084 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014080:	f000 fec8 	bl	8014e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014084:	7bfb      	ldrb	r3, [r7, #15]
 8014086:	3b01      	subs	r3, #1
 8014088:	b2db      	uxtb	r3, r3
 801408a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801408c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014090:	2b00      	cmp	r3, #0
 8014092:	dce9      	bgt.n	8014068 <prvUnlockQueue+0x16>
 8014094:	e000      	b.n	8014098 <prvUnlockQueue+0x46>
					break;
 8014096:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	22ff      	movs	r2, #255	; 0xff
 801409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80140a0:	f001 fe1c 	bl	8015cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80140a4:	f001 fde8 	bl	8015c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80140ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140b0:	e011      	b.n	80140d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	691b      	ldr	r3, [r3, #16]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d012      	beq.n	80140e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	3310      	adds	r3, #16
 80140be:	4618      	mov	r0, r3
 80140c0:	f000 fdca 	bl	8014c58 <xTaskRemoveFromEventList>
 80140c4:	4603      	mov	r3, r0
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d001      	beq.n	80140ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80140ca:	f000 fea3 	bl	8014e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80140ce:	7bbb      	ldrb	r3, [r7, #14]
 80140d0:	3b01      	subs	r3, #1
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	dce9      	bgt.n	80140b2 <prvUnlockQueue+0x60>
 80140de:	e000      	b.n	80140e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80140e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	22ff      	movs	r2, #255	; 0xff
 80140e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80140ea:	f001 fdf7 	bl	8015cdc <vPortExitCritical>
}
 80140ee:	bf00      	nop
 80140f0:	3710      	adds	r7, #16
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}

080140f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80140f6:	b580      	push	{r7, lr}
 80140f8:	b084      	sub	sp, #16
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80140fe:	f001 fdbb 	bl	8015c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014106:	2b00      	cmp	r3, #0
 8014108:	d102      	bne.n	8014110 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801410a:	2301      	movs	r3, #1
 801410c:	60fb      	str	r3, [r7, #12]
 801410e:	e001      	b.n	8014114 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014110:	2300      	movs	r3, #0
 8014112:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014114:	f001 fde2 	bl	8015cdc <vPortExitCritical>

	return xReturn;
 8014118:	68fb      	ldr	r3, [r7, #12]
}
 801411a:	4618      	mov	r0, r3
 801411c:	3710      	adds	r7, #16
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}

08014122 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014122:	b580      	push	{r7, lr}
 8014124:	b084      	sub	sp, #16
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801412a:	f001 fda5 	bl	8015c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014136:	429a      	cmp	r2, r3
 8014138:	d102      	bne.n	8014140 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801413a:	2301      	movs	r3, #1
 801413c:	60fb      	str	r3, [r7, #12]
 801413e:	e001      	b.n	8014144 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014140:	2300      	movs	r3, #0
 8014142:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014144:	f001 fdca 	bl	8015cdc <vPortExitCritical>

	return xReturn;
 8014148:	68fb      	ldr	r3, [r7, #12]
}
 801414a:	4618      	mov	r0, r3
 801414c:	3710      	adds	r7, #16
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}
	...

08014154 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014154:	b480      	push	{r7}
 8014156:	b085      	sub	sp, #20
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801415e:	2300      	movs	r3, #0
 8014160:	60fb      	str	r3, [r7, #12]
 8014162:	e014      	b.n	801418e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014164:	4a0e      	ldr	r2, [pc, #56]	; (80141a0 <vQueueAddToRegistry+0x4c>)
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d10b      	bne.n	8014188 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014170:	490b      	ldr	r1, [pc, #44]	; (80141a0 <vQueueAddToRegistry+0x4c>)
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	683a      	ldr	r2, [r7, #0]
 8014176:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801417a:	4a09      	ldr	r2, [pc, #36]	; (80141a0 <vQueueAddToRegistry+0x4c>)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	4413      	add	r3, r2
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014186:	e005      	b.n	8014194 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	3301      	adds	r3, #1
 801418c:	60fb      	str	r3, [r7, #12]
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2b07      	cmp	r3, #7
 8014192:	d9e7      	bls.n	8014164 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014194:	bf00      	nop
 8014196:	3714      	adds	r7, #20
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr
 80141a0:	200157b0 	.word	0x200157b0

080141a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80141a4:	b480      	push	{r7}
 80141a6:	b085      	sub	sp, #20
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80141ac:	2300      	movs	r3, #0
 80141ae:	60fb      	str	r3, [r7, #12]
 80141b0:	e016      	b.n	80141e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80141b2:	4a10      	ldr	r2, [pc, #64]	; (80141f4 <vQueueUnregisterQueue+0x50>)
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	4413      	add	r3, r2
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	429a      	cmp	r2, r3
 80141c0:	d10b      	bne.n	80141da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80141c2:	4a0c      	ldr	r2, [pc, #48]	; (80141f4 <vQueueUnregisterQueue+0x50>)
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	2100      	movs	r1, #0
 80141c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80141cc:	4a09      	ldr	r2, [pc, #36]	; (80141f4 <vQueueUnregisterQueue+0x50>)
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	00db      	lsls	r3, r3, #3
 80141d2:	4413      	add	r3, r2
 80141d4:	2200      	movs	r2, #0
 80141d6:	605a      	str	r2, [r3, #4]
				break;
 80141d8:	e005      	b.n	80141e6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	3301      	adds	r3, #1
 80141de:	60fb      	str	r3, [r7, #12]
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2b07      	cmp	r3, #7
 80141e4:	d9e5      	bls.n	80141b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80141e6:	bf00      	nop
 80141e8:	3714      	adds	r7, #20
 80141ea:	46bd      	mov	sp, r7
 80141ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f0:	4770      	bx	lr
 80141f2:	bf00      	nop
 80141f4:	200157b0 	.word	0x200157b0

080141f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	60b9      	str	r1, [r7, #8]
 8014202:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014208:	f001 fd36 	bl	8015c78 <vPortEnterCritical>
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014212:	b25b      	sxtb	r3, r3
 8014214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014218:	d103      	bne.n	8014222 <vQueueWaitForMessageRestricted+0x2a>
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	2200      	movs	r2, #0
 801421e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014228:	b25b      	sxtb	r3, r3
 801422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801422e:	d103      	bne.n	8014238 <vQueueWaitForMessageRestricted+0x40>
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	2200      	movs	r2, #0
 8014234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014238:	f001 fd50 	bl	8015cdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014240:	2b00      	cmp	r3, #0
 8014242:	d106      	bne.n	8014252 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	3324      	adds	r3, #36	; 0x24
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	68b9      	ldr	r1, [r7, #8]
 801424c:	4618      	mov	r0, r3
 801424e:	f000 fcd7 	bl	8014c00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014252:	6978      	ldr	r0, [r7, #20]
 8014254:	f7ff fefd 	bl	8014052 <prvUnlockQueue>
	}
 8014258:	bf00      	nop
 801425a:	3718      	adds	r7, #24
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014260:	b580      	push	{r7, lr}
 8014262:	b08e      	sub	sp, #56	; 0x38
 8014264:	af04      	add	r7, sp, #16
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	60b9      	str	r1, [r7, #8]
 801426a:	607a      	str	r2, [r7, #4]
 801426c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014270:	2b00      	cmp	r3, #0
 8014272:	d10b      	bne.n	801428c <xTaskCreateStatic+0x2c>
 8014274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014278:	b672      	cpsid	i
 801427a:	f383 8811 	msr	BASEPRI, r3
 801427e:	f3bf 8f6f 	isb	sy
 8014282:	f3bf 8f4f 	dsb	sy
 8014286:	b662      	cpsie	i
 8014288:	623b      	str	r3, [r7, #32]
 801428a:	e7fe      	b.n	801428a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801428e:	2b00      	cmp	r3, #0
 8014290:	d10b      	bne.n	80142aa <xTaskCreateStatic+0x4a>
 8014292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014296:	b672      	cpsid	i
 8014298:	f383 8811 	msr	BASEPRI, r3
 801429c:	f3bf 8f6f 	isb	sy
 80142a0:	f3bf 8f4f 	dsb	sy
 80142a4:	b662      	cpsie	i
 80142a6:	61fb      	str	r3, [r7, #28]
 80142a8:	e7fe      	b.n	80142a8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80142aa:	235c      	movs	r3, #92	; 0x5c
 80142ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	2b5c      	cmp	r3, #92	; 0x5c
 80142b2:	d00b      	beq.n	80142cc <xTaskCreateStatic+0x6c>
 80142b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b8:	b672      	cpsid	i
 80142ba:	f383 8811 	msr	BASEPRI, r3
 80142be:	f3bf 8f6f 	isb	sy
 80142c2:	f3bf 8f4f 	dsb	sy
 80142c6:	b662      	cpsie	i
 80142c8:	61bb      	str	r3, [r7, #24]
 80142ca:	e7fe      	b.n	80142ca <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80142cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80142ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d01e      	beq.n	8014312 <xTaskCreateStatic+0xb2>
 80142d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d01b      	beq.n	8014312 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80142da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80142e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e6:	2202      	movs	r2, #2
 80142e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80142ec:	2300      	movs	r3, #0
 80142ee:	9303      	str	r3, [sp, #12]
 80142f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f2:	9302      	str	r3, [sp, #8]
 80142f4:	f107 0314 	add.w	r3, r7, #20
 80142f8:	9301      	str	r3, [sp, #4]
 80142fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fc:	9300      	str	r3, [sp, #0]
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	687a      	ldr	r2, [r7, #4]
 8014302:	68b9      	ldr	r1, [r7, #8]
 8014304:	68f8      	ldr	r0, [r7, #12]
 8014306:	f000 f850 	bl	80143aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801430a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801430c:	f000 f8de 	bl	80144cc <prvAddNewTaskToReadyList>
 8014310:	e001      	b.n	8014316 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014312:	2300      	movs	r3, #0
 8014314:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014316:	697b      	ldr	r3, [r7, #20]
	}
 8014318:	4618      	mov	r0, r3
 801431a:	3728      	adds	r7, #40	; 0x28
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014320:	b580      	push	{r7, lr}
 8014322:	b08c      	sub	sp, #48	; 0x30
 8014324:	af04      	add	r7, sp, #16
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	60b9      	str	r1, [r7, #8]
 801432a:	603b      	str	r3, [r7, #0]
 801432c:	4613      	mov	r3, r2
 801432e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014330:	88fb      	ldrh	r3, [r7, #6]
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	4618      	mov	r0, r3
 8014336:	f001 fdc1 	bl	8015ebc <pvPortMalloc>
 801433a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d00e      	beq.n	8014360 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014342:	205c      	movs	r0, #92	; 0x5c
 8014344:	f001 fdba 	bl	8015ebc <pvPortMalloc>
 8014348:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801434a:	69fb      	ldr	r3, [r7, #28]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d003      	beq.n	8014358 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	697a      	ldr	r2, [r7, #20]
 8014354:	631a      	str	r2, [r3, #48]	; 0x30
 8014356:	e005      	b.n	8014364 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014358:	6978      	ldr	r0, [r7, #20]
 801435a:	f001 fe77 	bl	801604c <vPortFree>
 801435e:	e001      	b.n	8014364 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014360:	2300      	movs	r3, #0
 8014362:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014364:	69fb      	ldr	r3, [r7, #28]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d017      	beq.n	801439a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801436a:	69fb      	ldr	r3, [r7, #28]
 801436c:	2200      	movs	r2, #0
 801436e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014372:	88fa      	ldrh	r2, [r7, #6]
 8014374:	2300      	movs	r3, #0
 8014376:	9303      	str	r3, [sp, #12]
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	9302      	str	r3, [sp, #8]
 801437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437e:	9301      	str	r3, [sp, #4]
 8014380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	68b9      	ldr	r1, [r7, #8]
 8014388:	68f8      	ldr	r0, [r7, #12]
 801438a:	f000 f80e 	bl	80143aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801438e:	69f8      	ldr	r0, [r7, #28]
 8014390:	f000 f89c 	bl	80144cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014394:	2301      	movs	r3, #1
 8014396:	61bb      	str	r3, [r7, #24]
 8014398:	e002      	b.n	80143a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801439a:	f04f 33ff 	mov.w	r3, #4294967295
 801439e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80143a0:	69bb      	ldr	r3, [r7, #24]
	}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3720      	adds	r7, #32
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}

080143aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80143aa:	b580      	push	{r7, lr}
 80143ac:	b088      	sub	sp, #32
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	60f8      	str	r0, [r7, #12]
 80143b2:	60b9      	str	r1, [r7, #8]
 80143b4:	607a      	str	r2, [r7, #4]
 80143b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80143b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	461a      	mov	r2, r3
 80143c2:	21a5      	movs	r1, #165	; 0xa5
 80143c4:	f002 fd07 	bl	8016dd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80143c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143cc:	6879      	ldr	r1, [r7, #4]
 80143ce:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80143d2:	440b      	add	r3, r1
 80143d4:	009b      	lsls	r3, r3, #2
 80143d6:	4413      	add	r3, r2
 80143d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80143da:	69bb      	ldr	r3, [r7, #24]
 80143dc:	f023 0307 	bic.w	r3, r3, #7
 80143e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	f003 0307 	and.w	r3, r3, #7
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00b      	beq.n	8014404 <prvInitialiseNewTask+0x5a>
 80143ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f0:	b672      	cpsid	i
 80143f2:	f383 8811 	msr	BASEPRI, r3
 80143f6:	f3bf 8f6f 	isb	sy
 80143fa:	f3bf 8f4f 	dsb	sy
 80143fe:	b662      	cpsie	i
 8014400:	617b      	str	r3, [r7, #20]
 8014402:	e7fe      	b.n	8014402 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d01f      	beq.n	801444a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801440a:	2300      	movs	r3, #0
 801440c:	61fb      	str	r3, [r7, #28]
 801440e:	e012      	b.n	8014436 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014410:	68ba      	ldr	r2, [r7, #8]
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	4413      	add	r3, r2
 8014416:	7819      	ldrb	r1, [r3, #0]
 8014418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	4413      	add	r3, r2
 801441e:	3334      	adds	r3, #52	; 0x34
 8014420:	460a      	mov	r2, r1
 8014422:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014424:	68ba      	ldr	r2, [r7, #8]
 8014426:	69fb      	ldr	r3, [r7, #28]
 8014428:	4413      	add	r3, r2
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d006      	beq.n	801443e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014430:	69fb      	ldr	r3, [r7, #28]
 8014432:	3301      	adds	r3, #1
 8014434:	61fb      	str	r3, [r7, #28]
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	2b0f      	cmp	r3, #15
 801443a:	d9e9      	bls.n	8014410 <prvInitialiseNewTask+0x66>
 801443c:	e000      	b.n	8014440 <prvInitialiseNewTask+0x96>
			{
				break;
 801443e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014442:	2200      	movs	r2, #0
 8014444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014448:	e003      	b.n	8014452 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444c:	2200      	movs	r2, #0
 801444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014454:	2b37      	cmp	r3, #55	; 0x37
 8014456:	d901      	bls.n	801445c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014458:	2337      	movs	r3, #55	; 0x37
 801445a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014460:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801446a:	2200      	movs	r2, #0
 801446c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014470:	3304      	adds	r3, #4
 8014472:	4618      	mov	r0, r3
 8014474:	f7fe fd5c 	bl	8012f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801447a:	3318      	adds	r3, #24
 801447c:	4618      	mov	r0, r3
 801447e:	f7fe fd57 	bl	8012f30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014486:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801448a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014490:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014496:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449a:	2200      	movs	r2, #0
 801449c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144a0:	2200      	movs	r2, #0
 80144a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80144a6:	683a      	ldr	r2, [r7, #0]
 80144a8:	68f9      	ldr	r1, [r7, #12]
 80144aa:	69b8      	ldr	r0, [r7, #24]
 80144ac:	f001 fad8 	bl	8015a60 <pxPortInitialiseStack>
 80144b0:	4602      	mov	r2, r0
 80144b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80144b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d002      	beq.n	80144c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80144bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144c2:	bf00      	nop
 80144c4:	3720      	adds	r7, #32
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
	...

080144cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80144d4:	f001 fbd0 	bl	8015c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80144d8:	4b2d      	ldr	r3, [pc, #180]	; (8014590 <prvAddNewTaskToReadyList+0xc4>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	3301      	adds	r3, #1
 80144de:	4a2c      	ldr	r2, [pc, #176]	; (8014590 <prvAddNewTaskToReadyList+0xc4>)
 80144e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80144e2:	4b2c      	ldr	r3, [pc, #176]	; (8014594 <prvAddNewTaskToReadyList+0xc8>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d109      	bne.n	80144fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80144ea:	4a2a      	ldr	r2, [pc, #168]	; (8014594 <prvAddNewTaskToReadyList+0xc8>)
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80144f0:	4b27      	ldr	r3, [pc, #156]	; (8014590 <prvAddNewTaskToReadyList+0xc4>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d110      	bne.n	801451a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80144f8:	f000 fcb0 	bl	8014e5c <prvInitialiseTaskLists>
 80144fc:	e00d      	b.n	801451a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80144fe:	4b26      	ldr	r3, [pc, #152]	; (8014598 <prvAddNewTaskToReadyList+0xcc>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d109      	bne.n	801451a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014506:	4b23      	ldr	r3, [pc, #140]	; (8014594 <prvAddNewTaskToReadyList+0xc8>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014510:	429a      	cmp	r2, r3
 8014512:	d802      	bhi.n	801451a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014514:	4a1f      	ldr	r2, [pc, #124]	; (8014594 <prvAddNewTaskToReadyList+0xc8>)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801451a:	4b20      	ldr	r3, [pc, #128]	; (801459c <prvAddNewTaskToReadyList+0xd0>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	3301      	adds	r3, #1
 8014520:	4a1e      	ldr	r2, [pc, #120]	; (801459c <prvAddNewTaskToReadyList+0xd0>)
 8014522:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014524:	4b1d      	ldr	r3, [pc, #116]	; (801459c <prvAddNewTaskToReadyList+0xd0>)
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014530:	4b1b      	ldr	r3, [pc, #108]	; (80145a0 <prvAddNewTaskToReadyList+0xd4>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	429a      	cmp	r2, r3
 8014536:	d903      	bls.n	8014540 <prvAddNewTaskToReadyList+0x74>
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801453c:	4a18      	ldr	r2, [pc, #96]	; (80145a0 <prvAddNewTaskToReadyList+0xd4>)
 801453e:	6013      	str	r3, [r2, #0]
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014544:	4613      	mov	r3, r2
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	4413      	add	r3, r2
 801454a:	009b      	lsls	r3, r3, #2
 801454c:	4a15      	ldr	r2, [pc, #84]	; (80145a4 <prvAddNewTaskToReadyList+0xd8>)
 801454e:	441a      	add	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	3304      	adds	r3, #4
 8014554:	4619      	mov	r1, r3
 8014556:	4610      	mov	r0, r2
 8014558:	f7fe fcf7 	bl	8012f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801455c:	f001 fbbe 	bl	8015cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014560:	4b0d      	ldr	r3, [pc, #52]	; (8014598 <prvAddNewTaskToReadyList+0xcc>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d00e      	beq.n	8014586 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014568:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <prvAddNewTaskToReadyList+0xc8>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014572:	429a      	cmp	r2, r3
 8014574:	d207      	bcs.n	8014586 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014576:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <prvAddNewTaskToReadyList+0xdc>)
 8014578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801457c:	601a      	str	r2, [r3, #0]
 801457e:	f3bf 8f4f 	dsb	sy
 8014582:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014586:	bf00      	nop
 8014588:	3708      	adds	r7, #8
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	20000ef8 	.word	0x20000ef8
 8014594:	20000a24 	.word	0x20000a24
 8014598:	20000f04 	.word	0x20000f04
 801459c:	20000f14 	.word	0x20000f14
 80145a0:	20000f00 	.word	0x20000f00
 80145a4:	20000a28 	.word	0x20000a28
 80145a8:	e000ed04 	.word	0xe000ed04

080145ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b08a      	sub	sp, #40	; 0x28
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80145b6:	2300      	movs	r3, #0
 80145b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10b      	bne.n	80145d8 <vTaskDelayUntil+0x2c>
 80145c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c4:	b672      	cpsid	i
 80145c6:	f383 8811 	msr	BASEPRI, r3
 80145ca:	f3bf 8f6f 	isb	sy
 80145ce:	f3bf 8f4f 	dsb	sy
 80145d2:	b662      	cpsie	i
 80145d4:	617b      	str	r3, [r7, #20]
 80145d6:	e7fe      	b.n	80145d6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d10b      	bne.n	80145f6 <vTaskDelayUntil+0x4a>
 80145de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e2:	b672      	cpsid	i
 80145e4:	f383 8811 	msr	BASEPRI, r3
 80145e8:	f3bf 8f6f 	isb	sy
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	b662      	cpsie	i
 80145f2:	613b      	str	r3, [r7, #16]
 80145f4:	e7fe      	b.n	80145f4 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 80145f6:	4b2a      	ldr	r3, [pc, #168]	; (80146a0 <vTaskDelayUntil+0xf4>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d00b      	beq.n	8014616 <vTaskDelayUntil+0x6a>
 80145fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014602:	b672      	cpsid	i
 8014604:	f383 8811 	msr	BASEPRI, r3
 8014608:	f3bf 8f6f 	isb	sy
 801460c:	f3bf 8f4f 	dsb	sy
 8014610:	b662      	cpsie	i
 8014612:	60fb      	str	r3, [r7, #12]
 8014614:	e7fe      	b.n	8014614 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8014616:	f000 f8e7 	bl	80147e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801461a:	4b22      	ldr	r3, [pc, #136]	; (80146a4 <vTaskDelayUntil+0xf8>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	683a      	ldr	r2, [r7, #0]
 8014626:	4413      	add	r3, r2
 8014628:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	6a3a      	ldr	r2, [r7, #32]
 8014630:	429a      	cmp	r2, r3
 8014632:	d20b      	bcs.n	801464c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	69fa      	ldr	r2, [r7, #28]
 801463a:	429a      	cmp	r2, r3
 801463c:	d211      	bcs.n	8014662 <vTaskDelayUntil+0xb6>
 801463e:	69fa      	ldr	r2, [r7, #28]
 8014640:	6a3b      	ldr	r3, [r7, #32]
 8014642:	429a      	cmp	r2, r3
 8014644:	d90d      	bls.n	8014662 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8014646:	2301      	movs	r3, #1
 8014648:	627b      	str	r3, [r7, #36]	; 0x24
 801464a:	e00a      	b.n	8014662 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	69fa      	ldr	r2, [r7, #28]
 8014652:	429a      	cmp	r2, r3
 8014654:	d303      	bcc.n	801465e <vTaskDelayUntil+0xb2>
 8014656:	69fa      	ldr	r2, [r7, #28]
 8014658:	6a3b      	ldr	r3, [r7, #32]
 801465a:	429a      	cmp	r2, r3
 801465c:	d901      	bls.n	8014662 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801465e:	2301      	movs	r3, #1
 8014660:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	69fa      	ldr	r2, [r7, #28]
 8014666:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801466a:	2b00      	cmp	r3, #0
 801466c:	d006      	beq.n	801467c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801466e:	69fa      	ldr	r2, [r7, #28]
 8014670:	6a3b      	ldr	r3, [r7, #32]
 8014672:	1ad3      	subs	r3, r2, r3
 8014674:	2100      	movs	r1, #0
 8014676:	4618      	mov	r0, r3
 8014678:	f000 fe4a 	bl	8015310 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801467c:	f000 f8c2 	bl	8014804 <xTaskResumeAll>
 8014680:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d107      	bne.n	8014698 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8014688:	4b07      	ldr	r3, [pc, #28]	; (80146a8 <vTaskDelayUntil+0xfc>)
 801468a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801468e:	601a      	str	r2, [r3, #0]
 8014690:	f3bf 8f4f 	dsb	sy
 8014694:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014698:	bf00      	nop
 801469a:	3728      	adds	r7, #40	; 0x28
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	20000f20 	.word	0x20000f20
 80146a4:	20000efc 	.word	0x20000efc
 80146a8:	e000ed04 	.word	0xe000ed04

080146ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80146b4:	2300      	movs	r3, #0
 80146b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d018      	beq.n	80146f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80146be:	4b14      	ldr	r3, [pc, #80]	; (8014710 <vTaskDelay+0x64>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00b      	beq.n	80146de <vTaskDelay+0x32>
 80146c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ca:	b672      	cpsid	i
 80146cc:	f383 8811 	msr	BASEPRI, r3
 80146d0:	f3bf 8f6f 	isb	sy
 80146d4:	f3bf 8f4f 	dsb	sy
 80146d8:	b662      	cpsie	i
 80146da:	60bb      	str	r3, [r7, #8]
 80146dc:	e7fe      	b.n	80146dc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80146de:	f000 f883 	bl	80147e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80146e2:	2100      	movs	r1, #0
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f000 fe13 	bl	8015310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80146ea:	f000 f88b 	bl	8014804 <xTaskResumeAll>
 80146ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d107      	bne.n	8014706 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80146f6:	4b07      	ldr	r3, [pc, #28]	; (8014714 <vTaskDelay+0x68>)
 80146f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146fc:	601a      	str	r2, [r3, #0]
 80146fe:	f3bf 8f4f 	dsb	sy
 8014702:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014706:	bf00      	nop
 8014708:	3710      	adds	r7, #16
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	20000f20 	.word	0x20000f20
 8014714:	e000ed04 	.word	0xe000ed04

08014718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b08a      	sub	sp, #40	; 0x28
 801471c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801471e:	2300      	movs	r3, #0
 8014720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014722:	2300      	movs	r3, #0
 8014724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014726:	463a      	mov	r2, r7
 8014728:	1d39      	adds	r1, r7, #4
 801472a:	f107 0308 	add.w	r3, r7, #8
 801472e:	4618      	mov	r0, r3
 8014730:	f7fe fbaa 	bl	8012e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014734:	6839      	ldr	r1, [r7, #0]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	68ba      	ldr	r2, [r7, #8]
 801473a:	9202      	str	r2, [sp, #8]
 801473c:	9301      	str	r3, [sp, #4]
 801473e:	2300      	movs	r3, #0
 8014740:	9300      	str	r3, [sp, #0]
 8014742:	2300      	movs	r3, #0
 8014744:	460a      	mov	r2, r1
 8014746:	4922      	ldr	r1, [pc, #136]	; (80147d0 <vTaskStartScheduler+0xb8>)
 8014748:	4822      	ldr	r0, [pc, #136]	; (80147d4 <vTaskStartScheduler+0xbc>)
 801474a:	f7ff fd89 	bl	8014260 <xTaskCreateStatic>
 801474e:	4602      	mov	r2, r0
 8014750:	4b21      	ldr	r3, [pc, #132]	; (80147d8 <vTaskStartScheduler+0xc0>)
 8014752:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014754:	4b20      	ldr	r3, [pc, #128]	; (80147d8 <vTaskStartScheduler+0xc0>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d002      	beq.n	8014762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801475c:	2301      	movs	r3, #1
 801475e:	617b      	str	r3, [r7, #20]
 8014760:	e001      	b.n	8014766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014762:	2300      	movs	r3, #0
 8014764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	2b01      	cmp	r3, #1
 801476a:	d102      	bne.n	8014772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801476c:	f000 fe24 	bl	80153b8 <xTimerCreateTimerTask>
 8014770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	2b01      	cmp	r3, #1
 8014776:	d117      	bne.n	80147a8 <vTaskStartScheduler+0x90>
 8014778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477c:	b672      	cpsid	i
 801477e:	f383 8811 	msr	BASEPRI, r3
 8014782:	f3bf 8f6f 	isb	sy
 8014786:	f3bf 8f4f 	dsb	sy
 801478a:	b662      	cpsie	i
 801478c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801478e:	4b13      	ldr	r3, [pc, #76]	; (80147dc <vTaskStartScheduler+0xc4>)
 8014790:	f04f 32ff 	mov.w	r2, #4294967295
 8014794:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014796:	4b12      	ldr	r3, [pc, #72]	; (80147e0 <vTaskStartScheduler+0xc8>)
 8014798:	2201      	movs	r2, #1
 801479a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801479c:	4b11      	ldr	r3, [pc, #68]	; (80147e4 <vTaskStartScheduler+0xcc>)
 801479e:	2200      	movs	r2, #0
 80147a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80147a2:	f001 f9ed 	bl	8015b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80147a6:	e00f      	b.n	80147c8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ae:	d10b      	bne.n	80147c8 <vTaskStartScheduler+0xb0>
 80147b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b4:	b672      	cpsid	i
 80147b6:	f383 8811 	msr	BASEPRI, r3
 80147ba:	f3bf 8f6f 	isb	sy
 80147be:	f3bf 8f4f 	dsb	sy
 80147c2:	b662      	cpsie	i
 80147c4:	60fb      	str	r3, [r7, #12]
 80147c6:	e7fe      	b.n	80147c6 <vTaskStartScheduler+0xae>
}
 80147c8:	bf00      	nop
 80147ca:	3718      	adds	r7, #24
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}
 80147d0:	08019fc0 	.word	0x08019fc0
 80147d4:	08014e2d 	.word	0x08014e2d
 80147d8:	20000f1c 	.word	0x20000f1c
 80147dc:	20000f18 	.word	0x20000f18
 80147e0:	20000f04 	.word	0x20000f04
 80147e4:	20000efc 	.word	0x20000efc

080147e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80147e8:	b480      	push	{r7}
 80147ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80147ec:	4b04      	ldr	r3, [pc, #16]	; (8014800 <vTaskSuspendAll+0x18>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	3301      	adds	r3, #1
 80147f2:	4a03      	ldr	r2, [pc, #12]	; (8014800 <vTaskSuspendAll+0x18>)
 80147f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80147f6:	bf00      	nop
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr
 8014800:	20000f20 	.word	0x20000f20

08014804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801480a:	2300      	movs	r3, #0
 801480c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801480e:	2300      	movs	r3, #0
 8014810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014812:	4b42      	ldr	r3, [pc, #264]	; (801491c <xTaskResumeAll+0x118>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d10b      	bne.n	8014832 <xTaskResumeAll+0x2e>
 801481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801481e:	b672      	cpsid	i
 8014820:	f383 8811 	msr	BASEPRI, r3
 8014824:	f3bf 8f6f 	isb	sy
 8014828:	f3bf 8f4f 	dsb	sy
 801482c:	b662      	cpsie	i
 801482e:	603b      	str	r3, [r7, #0]
 8014830:	e7fe      	b.n	8014830 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014832:	f001 fa21 	bl	8015c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014836:	4b39      	ldr	r3, [pc, #228]	; (801491c <xTaskResumeAll+0x118>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	3b01      	subs	r3, #1
 801483c:	4a37      	ldr	r2, [pc, #220]	; (801491c <xTaskResumeAll+0x118>)
 801483e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014840:	4b36      	ldr	r3, [pc, #216]	; (801491c <xTaskResumeAll+0x118>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d162      	bne.n	801490e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014848:	4b35      	ldr	r3, [pc, #212]	; (8014920 <xTaskResumeAll+0x11c>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d05e      	beq.n	801490e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014850:	e02f      	b.n	80148b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014852:	4b34      	ldr	r3, [pc, #208]	; (8014924 <xTaskResumeAll+0x120>)
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	3318      	adds	r3, #24
 801485e:	4618      	mov	r0, r3
 8014860:	f7fe fbd0 	bl	8013004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	3304      	adds	r3, #4
 8014868:	4618      	mov	r0, r3
 801486a:	f7fe fbcb 	bl	8013004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014872:	4b2d      	ldr	r3, [pc, #180]	; (8014928 <xTaskResumeAll+0x124>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	429a      	cmp	r2, r3
 8014878:	d903      	bls.n	8014882 <xTaskResumeAll+0x7e>
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801487e:	4a2a      	ldr	r2, [pc, #168]	; (8014928 <xTaskResumeAll+0x124>)
 8014880:	6013      	str	r3, [r2, #0]
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014886:	4613      	mov	r3, r2
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	4413      	add	r3, r2
 801488c:	009b      	lsls	r3, r3, #2
 801488e:	4a27      	ldr	r2, [pc, #156]	; (801492c <xTaskResumeAll+0x128>)
 8014890:	441a      	add	r2, r3
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	3304      	adds	r3, #4
 8014896:	4619      	mov	r1, r3
 8014898:	4610      	mov	r0, r2
 801489a:	f7fe fb56 	bl	8012f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148a2:	4b23      	ldr	r3, [pc, #140]	; (8014930 <xTaskResumeAll+0x12c>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d302      	bcc.n	80148b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80148ac:	4b21      	ldr	r3, [pc, #132]	; (8014934 <xTaskResumeAll+0x130>)
 80148ae:	2201      	movs	r2, #1
 80148b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148b2:	4b1c      	ldr	r3, [pc, #112]	; (8014924 <xTaskResumeAll+0x120>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d1cb      	bne.n	8014852 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d001      	beq.n	80148c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80148c0:	f000 fb68 	bl	8014f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80148c4:	4b1c      	ldr	r3, [pc, #112]	; (8014938 <xTaskResumeAll+0x134>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d010      	beq.n	80148f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80148d0:	f000 f858 	bl	8014984 <xTaskIncrementTick>
 80148d4:	4603      	mov	r3, r0
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d002      	beq.n	80148e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80148da:	4b16      	ldr	r3, [pc, #88]	; (8014934 <xTaskResumeAll+0x130>)
 80148dc:	2201      	movs	r2, #1
 80148de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	3b01      	subs	r3, #1
 80148e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d1f1      	bne.n	80148d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80148ec:	4b12      	ldr	r3, [pc, #72]	; (8014938 <xTaskResumeAll+0x134>)
 80148ee:	2200      	movs	r2, #0
 80148f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80148f2:	4b10      	ldr	r3, [pc, #64]	; (8014934 <xTaskResumeAll+0x130>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d009      	beq.n	801490e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80148fa:	2301      	movs	r3, #1
 80148fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80148fe:	4b0f      	ldr	r3, [pc, #60]	; (801493c <xTaskResumeAll+0x138>)
 8014900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014904:	601a      	str	r2, [r3, #0]
 8014906:	f3bf 8f4f 	dsb	sy
 801490a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801490e:	f001 f9e5 	bl	8015cdc <vPortExitCritical>

	return xAlreadyYielded;
 8014912:	68bb      	ldr	r3, [r7, #8]
}
 8014914:	4618      	mov	r0, r3
 8014916:	3710      	adds	r7, #16
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	20000f20 	.word	0x20000f20
 8014920:	20000ef8 	.word	0x20000ef8
 8014924:	20000eb8 	.word	0x20000eb8
 8014928:	20000f00 	.word	0x20000f00
 801492c:	20000a28 	.word	0x20000a28
 8014930:	20000a24 	.word	0x20000a24
 8014934:	20000f0c 	.word	0x20000f0c
 8014938:	20000f08 	.word	0x20000f08
 801493c:	e000ed04 	.word	0xe000ed04

08014940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014940:	b480      	push	{r7}
 8014942:	b083      	sub	sp, #12
 8014944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014946:	4b05      	ldr	r3, [pc, #20]	; (801495c <xTaskGetTickCount+0x1c>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801494c:	687b      	ldr	r3, [r7, #4]
}
 801494e:	4618      	mov	r0, r3
 8014950:	370c      	adds	r7, #12
 8014952:	46bd      	mov	sp, r7
 8014954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014958:	4770      	bx	lr
 801495a:	bf00      	nop
 801495c:	20000efc 	.word	0x20000efc

08014960 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014966:	f001 fa67 	bl	8015e38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801496a:	2300      	movs	r3, #0
 801496c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801496e:	4b04      	ldr	r3, [pc, #16]	; (8014980 <xTaskGetTickCountFromISR+0x20>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014974:	683b      	ldr	r3, [r7, #0]
}
 8014976:	4618      	mov	r0, r3
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	20000efc 	.word	0x20000efc

08014984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b086      	sub	sp, #24
 8014988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801498a:	2300      	movs	r3, #0
 801498c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801498e:	4b4f      	ldr	r3, [pc, #316]	; (8014acc <xTaskIncrementTick+0x148>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	f040 808a 	bne.w	8014aac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014998:	4b4d      	ldr	r3, [pc, #308]	; (8014ad0 <xTaskIncrementTick+0x14c>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	3301      	adds	r3, #1
 801499e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80149a0:	4a4b      	ldr	r2, [pc, #300]	; (8014ad0 <xTaskIncrementTick+0x14c>)
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d121      	bne.n	80149f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80149ac:	4b49      	ldr	r3, [pc, #292]	; (8014ad4 <xTaskIncrementTick+0x150>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00b      	beq.n	80149ce <xTaskIncrementTick+0x4a>
 80149b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ba:	b672      	cpsid	i
 80149bc:	f383 8811 	msr	BASEPRI, r3
 80149c0:	f3bf 8f6f 	isb	sy
 80149c4:	f3bf 8f4f 	dsb	sy
 80149c8:	b662      	cpsie	i
 80149ca:	603b      	str	r3, [r7, #0]
 80149cc:	e7fe      	b.n	80149cc <xTaskIncrementTick+0x48>
 80149ce:	4b41      	ldr	r3, [pc, #260]	; (8014ad4 <xTaskIncrementTick+0x150>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	60fb      	str	r3, [r7, #12]
 80149d4:	4b40      	ldr	r3, [pc, #256]	; (8014ad8 <xTaskIncrementTick+0x154>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	4a3e      	ldr	r2, [pc, #248]	; (8014ad4 <xTaskIncrementTick+0x150>)
 80149da:	6013      	str	r3, [r2, #0]
 80149dc:	4a3e      	ldr	r2, [pc, #248]	; (8014ad8 <xTaskIncrementTick+0x154>)
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	4b3e      	ldr	r3, [pc, #248]	; (8014adc <xTaskIncrementTick+0x158>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	3301      	adds	r3, #1
 80149e8:	4a3c      	ldr	r2, [pc, #240]	; (8014adc <xTaskIncrementTick+0x158>)
 80149ea:	6013      	str	r3, [r2, #0]
 80149ec:	f000 fad2 	bl	8014f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80149f0:	4b3b      	ldr	r3, [pc, #236]	; (8014ae0 <xTaskIncrementTick+0x15c>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	693a      	ldr	r2, [r7, #16]
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d349      	bcc.n	8014a8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149fa:	4b36      	ldr	r3, [pc, #216]	; (8014ad4 <xTaskIncrementTick+0x150>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d104      	bne.n	8014a0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a04:	4b36      	ldr	r3, [pc, #216]	; (8014ae0 <xTaskIncrementTick+0x15c>)
 8014a06:	f04f 32ff 	mov.w	r2, #4294967295
 8014a0a:	601a      	str	r2, [r3, #0]
					break;
 8014a0c:	e03f      	b.n	8014a8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a0e:	4b31      	ldr	r3, [pc, #196]	; (8014ad4 <xTaskIncrementTick+0x150>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	68db      	ldr	r3, [r3, #12]
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	685b      	ldr	r3, [r3, #4]
 8014a1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a1e:	693a      	ldr	r2, [r7, #16]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d203      	bcs.n	8014a2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a26:	4a2e      	ldr	r2, [pc, #184]	; (8014ae0 <xTaskIncrementTick+0x15c>)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a2c:	e02f      	b.n	8014a8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	3304      	adds	r3, #4
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7fe fae6 	bl	8013004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d004      	beq.n	8014a4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	3318      	adds	r3, #24
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fe fadd 	bl	8013004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a4e:	4b25      	ldr	r3, [pc, #148]	; (8014ae4 <xTaskIncrementTick+0x160>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d903      	bls.n	8014a5e <xTaskIncrementTick+0xda>
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a5a:	4a22      	ldr	r2, [pc, #136]	; (8014ae4 <xTaskIncrementTick+0x160>)
 8014a5c:	6013      	str	r3, [r2, #0]
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a62:	4613      	mov	r3, r2
 8014a64:	009b      	lsls	r3, r3, #2
 8014a66:	4413      	add	r3, r2
 8014a68:	009b      	lsls	r3, r3, #2
 8014a6a:	4a1f      	ldr	r2, [pc, #124]	; (8014ae8 <xTaskIncrementTick+0x164>)
 8014a6c:	441a      	add	r2, r3
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	3304      	adds	r3, #4
 8014a72:	4619      	mov	r1, r3
 8014a74:	4610      	mov	r0, r2
 8014a76:	f7fe fa68 	bl	8012f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a7e:	4b1b      	ldr	r3, [pc, #108]	; (8014aec <xTaskIncrementTick+0x168>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d3b8      	bcc.n	80149fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014a88:	2301      	movs	r3, #1
 8014a8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a8c:	e7b5      	b.n	80149fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a8e:	4b17      	ldr	r3, [pc, #92]	; (8014aec <xTaskIncrementTick+0x168>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a94:	4914      	ldr	r1, [pc, #80]	; (8014ae8 <xTaskIncrementTick+0x164>)
 8014a96:	4613      	mov	r3, r2
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	4413      	add	r3, r2
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	440b      	add	r3, r1
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d907      	bls.n	8014ab6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	617b      	str	r3, [r7, #20]
 8014aaa:	e004      	b.n	8014ab6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014aac:	4b10      	ldr	r3, [pc, #64]	; (8014af0 <xTaskIncrementTick+0x16c>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	4a0f      	ldr	r2, [pc, #60]	; (8014af0 <xTaskIncrementTick+0x16c>)
 8014ab4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014ab6:	4b0f      	ldr	r3, [pc, #60]	; (8014af4 <xTaskIncrementTick+0x170>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d001      	beq.n	8014ac2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8014abe:	2301      	movs	r3, #1
 8014ac0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014ac2:	697b      	ldr	r3, [r7, #20]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3718      	adds	r7, #24
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}
 8014acc:	20000f20 	.word	0x20000f20
 8014ad0:	20000efc 	.word	0x20000efc
 8014ad4:	20000eb0 	.word	0x20000eb0
 8014ad8:	20000eb4 	.word	0x20000eb4
 8014adc:	20000f10 	.word	0x20000f10
 8014ae0:	20000f18 	.word	0x20000f18
 8014ae4:	20000f00 	.word	0x20000f00
 8014ae8:	20000a28 	.word	0x20000a28
 8014aec:	20000a24 	.word	0x20000a24
 8014af0:	20000f08 	.word	0x20000f08
 8014af4:	20000f0c 	.word	0x20000f0c

08014af8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014af8:	b480      	push	{r7}
 8014afa:	b085      	sub	sp, #20
 8014afc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014afe:	4b28      	ldr	r3, [pc, #160]	; (8014ba0 <vTaskSwitchContext+0xa8>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d003      	beq.n	8014b0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b06:	4b27      	ldr	r3, [pc, #156]	; (8014ba4 <vTaskSwitchContext+0xac>)
 8014b08:	2201      	movs	r2, #1
 8014b0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b0c:	e042      	b.n	8014b94 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8014b0e:	4b25      	ldr	r3, [pc, #148]	; (8014ba4 <vTaskSwitchContext+0xac>)
 8014b10:	2200      	movs	r2, #0
 8014b12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b14:	4b24      	ldr	r3, [pc, #144]	; (8014ba8 <vTaskSwitchContext+0xb0>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	60fb      	str	r3, [r7, #12]
 8014b1a:	e011      	b.n	8014b40 <vTaskSwitchContext+0x48>
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d10b      	bne.n	8014b3a <vTaskSwitchContext+0x42>
 8014b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b26:	b672      	cpsid	i
 8014b28:	f383 8811 	msr	BASEPRI, r3
 8014b2c:	f3bf 8f6f 	isb	sy
 8014b30:	f3bf 8f4f 	dsb	sy
 8014b34:	b662      	cpsie	i
 8014b36:	607b      	str	r3, [r7, #4]
 8014b38:	e7fe      	b.n	8014b38 <vTaskSwitchContext+0x40>
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	3b01      	subs	r3, #1
 8014b3e:	60fb      	str	r3, [r7, #12]
 8014b40:	491a      	ldr	r1, [pc, #104]	; (8014bac <vTaskSwitchContext+0xb4>)
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	4613      	mov	r3, r2
 8014b46:	009b      	lsls	r3, r3, #2
 8014b48:	4413      	add	r3, r2
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	440b      	add	r3, r1
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d0e3      	beq.n	8014b1c <vTaskSwitchContext+0x24>
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	4613      	mov	r3, r2
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	4413      	add	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4a13      	ldr	r2, [pc, #76]	; (8014bac <vTaskSwitchContext+0xb4>)
 8014b60:	4413      	add	r3, r2
 8014b62:	60bb      	str	r3, [r7, #8]
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	685a      	ldr	r2, [r3, #4]
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	605a      	str	r2, [r3, #4]
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	685a      	ldr	r2, [r3, #4]
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	3308      	adds	r3, #8
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d104      	bne.n	8014b84 <vTaskSwitchContext+0x8c>
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	685b      	ldr	r3, [r3, #4]
 8014b7e:	685a      	ldr	r2, [r3, #4]
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	605a      	str	r2, [r3, #4]
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	685b      	ldr	r3, [r3, #4]
 8014b88:	68db      	ldr	r3, [r3, #12]
 8014b8a:	4a09      	ldr	r2, [pc, #36]	; (8014bb0 <vTaskSwitchContext+0xb8>)
 8014b8c:	6013      	str	r3, [r2, #0]
 8014b8e:	4a06      	ldr	r2, [pc, #24]	; (8014ba8 <vTaskSwitchContext+0xb0>)
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	6013      	str	r3, [r2, #0]
}
 8014b94:	bf00      	nop
 8014b96:	3714      	adds	r7, #20
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr
 8014ba0:	20000f20 	.word	0x20000f20
 8014ba4:	20000f0c 	.word	0x20000f0c
 8014ba8:	20000f00 	.word	0x20000f00
 8014bac:	20000a28 	.word	0x20000a28
 8014bb0:	20000a24 	.word	0x20000a24

08014bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b084      	sub	sp, #16
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d10b      	bne.n	8014bdc <vTaskPlaceOnEventList+0x28>
 8014bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc8:	b672      	cpsid	i
 8014bca:	f383 8811 	msr	BASEPRI, r3
 8014bce:	f3bf 8f6f 	isb	sy
 8014bd2:	f3bf 8f4f 	dsb	sy
 8014bd6:	b662      	cpsie	i
 8014bd8:	60fb      	str	r3, [r7, #12]
 8014bda:	e7fe      	b.n	8014bda <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bdc:	4b07      	ldr	r3, [pc, #28]	; (8014bfc <vTaskPlaceOnEventList+0x48>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	3318      	adds	r3, #24
 8014be2:	4619      	mov	r1, r3
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f7fe f9d4 	bl	8012f92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014bea:	2101      	movs	r1, #1
 8014bec:	6838      	ldr	r0, [r7, #0]
 8014bee:	f000 fb8f 	bl	8015310 <prvAddCurrentTaskToDelayedList>
}
 8014bf2:	bf00      	nop
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	20000a24 	.word	0x20000a24

08014c00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b086      	sub	sp, #24
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d10b      	bne.n	8014c2a <vTaskPlaceOnEventListRestricted+0x2a>
 8014c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c16:	b672      	cpsid	i
 8014c18:	f383 8811 	msr	BASEPRI, r3
 8014c1c:	f3bf 8f6f 	isb	sy
 8014c20:	f3bf 8f4f 	dsb	sy
 8014c24:	b662      	cpsie	i
 8014c26:	617b      	str	r3, [r7, #20]
 8014c28:	e7fe      	b.n	8014c28 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c2a:	4b0a      	ldr	r3, [pc, #40]	; (8014c54 <vTaskPlaceOnEventListRestricted+0x54>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	3318      	adds	r3, #24
 8014c30:	4619      	mov	r1, r3
 8014c32:	68f8      	ldr	r0, [r7, #12]
 8014c34:	f7fe f989 	bl	8012f4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d002      	beq.n	8014c44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8014c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014c44:	6879      	ldr	r1, [r7, #4]
 8014c46:	68b8      	ldr	r0, [r7, #8]
 8014c48:	f000 fb62 	bl	8015310 <prvAddCurrentTaskToDelayedList>
	}
 8014c4c:	bf00      	nop
 8014c4e:	3718      	adds	r7, #24
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	20000a24 	.word	0x20000a24

08014c58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d10b      	bne.n	8014c86 <xTaskRemoveFromEventList+0x2e>
 8014c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c72:	b672      	cpsid	i
 8014c74:	f383 8811 	msr	BASEPRI, r3
 8014c78:	f3bf 8f6f 	isb	sy
 8014c7c:	f3bf 8f4f 	dsb	sy
 8014c80:	b662      	cpsie	i
 8014c82:	60fb      	str	r3, [r7, #12]
 8014c84:	e7fe      	b.n	8014c84 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	3318      	adds	r3, #24
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7fe f9ba 	bl	8013004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c90:	4b1d      	ldr	r3, [pc, #116]	; (8014d08 <xTaskRemoveFromEventList+0xb0>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d11d      	bne.n	8014cd4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	3304      	adds	r3, #4
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7fe f9b1 	bl	8013004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca6:	4b19      	ldr	r3, [pc, #100]	; (8014d0c <xTaskRemoveFromEventList+0xb4>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d903      	bls.n	8014cb6 <xTaskRemoveFromEventList+0x5e>
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cb2:	4a16      	ldr	r2, [pc, #88]	; (8014d0c <xTaskRemoveFromEventList+0xb4>)
 8014cb4:	6013      	str	r3, [r2, #0]
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cba:	4613      	mov	r3, r2
 8014cbc:	009b      	lsls	r3, r3, #2
 8014cbe:	4413      	add	r3, r2
 8014cc0:	009b      	lsls	r3, r3, #2
 8014cc2:	4a13      	ldr	r2, [pc, #76]	; (8014d10 <xTaskRemoveFromEventList+0xb8>)
 8014cc4:	441a      	add	r2, r3
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	3304      	adds	r3, #4
 8014cca:	4619      	mov	r1, r3
 8014ccc:	4610      	mov	r0, r2
 8014cce:	f7fe f93c 	bl	8012f4a <vListInsertEnd>
 8014cd2:	e005      	b.n	8014ce0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	3318      	adds	r3, #24
 8014cd8:	4619      	mov	r1, r3
 8014cda:	480e      	ldr	r0, [pc, #56]	; (8014d14 <xTaskRemoveFromEventList+0xbc>)
 8014cdc:	f7fe f935 	bl	8012f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ce4:	4b0c      	ldr	r3, [pc, #48]	; (8014d18 <xTaskRemoveFromEventList+0xc0>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d905      	bls.n	8014cfa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014cee:	2301      	movs	r3, #1
 8014cf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014cf2:	4b0a      	ldr	r3, [pc, #40]	; (8014d1c <xTaskRemoveFromEventList+0xc4>)
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	601a      	str	r2, [r3, #0]
 8014cf8:	e001      	b.n	8014cfe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014cfe:	697b      	ldr	r3, [r7, #20]
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3718      	adds	r7, #24
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}
 8014d08:	20000f20 	.word	0x20000f20
 8014d0c:	20000f00 	.word	0x20000f00
 8014d10:	20000a28 	.word	0x20000a28
 8014d14:	20000eb8 	.word	0x20000eb8
 8014d18:	20000a24 	.word	0x20000a24
 8014d1c:	20000f0c 	.word	0x20000f0c

08014d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d28:	4b06      	ldr	r3, [pc, #24]	; (8014d44 <vTaskInternalSetTimeOutState+0x24>)
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d30:	4b05      	ldr	r3, [pc, #20]	; (8014d48 <vTaskInternalSetTimeOutState+0x28>)
 8014d32:	681a      	ldr	r2, [r3, #0]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	605a      	str	r2, [r3, #4]
}
 8014d38:	bf00      	nop
 8014d3a:	370c      	adds	r7, #12
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d42:	4770      	bx	lr
 8014d44:	20000f10 	.word	0x20000f10
 8014d48:	20000efc 	.word	0x20000efc

08014d4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b088      	sub	sp, #32
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d10b      	bne.n	8014d74 <xTaskCheckForTimeOut+0x28>
 8014d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d60:	b672      	cpsid	i
 8014d62:	f383 8811 	msr	BASEPRI, r3
 8014d66:	f3bf 8f6f 	isb	sy
 8014d6a:	f3bf 8f4f 	dsb	sy
 8014d6e:	b662      	cpsie	i
 8014d70:	613b      	str	r3, [r7, #16]
 8014d72:	e7fe      	b.n	8014d72 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d10b      	bne.n	8014d92 <xTaskCheckForTimeOut+0x46>
 8014d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d7e:	b672      	cpsid	i
 8014d80:	f383 8811 	msr	BASEPRI, r3
 8014d84:	f3bf 8f6f 	isb	sy
 8014d88:	f3bf 8f4f 	dsb	sy
 8014d8c:	b662      	cpsie	i
 8014d8e:	60fb      	str	r3, [r7, #12]
 8014d90:	e7fe      	b.n	8014d90 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8014d92:	f000 ff71 	bl	8015c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014d96:	4b1d      	ldr	r3, [pc, #116]	; (8014e0c <xTaskCheckForTimeOut+0xc0>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	69ba      	ldr	r2, [r7, #24]
 8014da2:	1ad3      	subs	r3, r2, r3
 8014da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dae:	d102      	bne.n	8014db6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014db0:	2300      	movs	r3, #0
 8014db2:	61fb      	str	r3, [r7, #28]
 8014db4:	e023      	b.n	8014dfe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	4b15      	ldr	r3, [pc, #84]	; (8014e10 <xTaskCheckForTimeOut+0xc4>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d007      	beq.n	8014dd2 <xTaskCheckForTimeOut+0x86>
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	69ba      	ldr	r2, [r7, #24]
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d302      	bcc.n	8014dd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014dcc:	2301      	movs	r3, #1
 8014dce:	61fb      	str	r3, [r7, #28]
 8014dd0:	e015      	b.n	8014dfe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	697a      	ldr	r2, [r7, #20]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d20b      	bcs.n	8014df4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	681a      	ldr	r2, [r3, #0]
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	1ad2      	subs	r2, r2, r3
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f7ff ff99 	bl	8014d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014dee:	2300      	movs	r3, #0
 8014df0:	61fb      	str	r3, [r7, #28]
 8014df2:	e004      	b.n	8014dfe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	2200      	movs	r2, #0
 8014df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014dfe:	f000 ff6d 	bl	8015cdc <vPortExitCritical>

	return xReturn;
 8014e02:	69fb      	ldr	r3, [r7, #28]
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3720      	adds	r7, #32
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	20000efc 	.word	0x20000efc
 8014e10:	20000f10 	.word	0x20000f10

08014e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e14:	b480      	push	{r7}
 8014e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e18:	4b03      	ldr	r3, [pc, #12]	; (8014e28 <vTaskMissedYield+0x14>)
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	601a      	str	r2, [r3, #0]
}
 8014e1e:	bf00      	nop
 8014e20:	46bd      	mov	sp, r7
 8014e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e26:	4770      	bx	lr
 8014e28:	20000f0c 	.word	0x20000f0c

08014e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b082      	sub	sp, #8
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014e34:	f000 f852 	bl	8014edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014e38:	4b06      	ldr	r3, [pc, #24]	; (8014e54 <prvIdleTask+0x28>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d9f9      	bls.n	8014e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014e40:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <prvIdleTask+0x2c>)
 8014e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e46:	601a      	str	r2, [r3, #0]
 8014e48:	f3bf 8f4f 	dsb	sy
 8014e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014e50:	e7f0      	b.n	8014e34 <prvIdleTask+0x8>
 8014e52:	bf00      	nop
 8014e54:	20000a28 	.word	0x20000a28
 8014e58:	e000ed04 	.word	0xe000ed04

08014e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e62:	2300      	movs	r3, #0
 8014e64:	607b      	str	r3, [r7, #4]
 8014e66:	e00c      	b.n	8014e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014e68:	687a      	ldr	r2, [r7, #4]
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	4413      	add	r3, r2
 8014e70:	009b      	lsls	r3, r3, #2
 8014e72:	4a12      	ldr	r2, [pc, #72]	; (8014ebc <prvInitialiseTaskLists+0x60>)
 8014e74:	4413      	add	r3, r2
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fe f83a 	bl	8012ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	3301      	adds	r3, #1
 8014e80:	607b      	str	r3, [r7, #4]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2b37      	cmp	r3, #55	; 0x37
 8014e86:	d9ef      	bls.n	8014e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014e88:	480d      	ldr	r0, [pc, #52]	; (8014ec0 <prvInitialiseTaskLists+0x64>)
 8014e8a:	f7fe f831 	bl	8012ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014e8e:	480d      	ldr	r0, [pc, #52]	; (8014ec4 <prvInitialiseTaskLists+0x68>)
 8014e90:	f7fe f82e 	bl	8012ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014e94:	480c      	ldr	r0, [pc, #48]	; (8014ec8 <prvInitialiseTaskLists+0x6c>)
 8014e96:	f7fe f82b 	bl	8012ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014e9a:	480c      	ldr	r0, [pc, #48]	; (8014ecc <prvInitialiseTaskLists+0x70>)
 8014e9c:	f7fe f828 	bl	8012ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ea0:	480b      	ldr	r0, [pc, #44]	; (8014ed0 <prvInitialiseTaskLists+0x74>)
 8014ea2:	f7fe f825 	bl	8012ef0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014ea6:	4b0b      	ldr	r3, [pc, #44]	; (8014ed4 <prvInitialiseTaskLists+0x78>)
 8014ea8:	4a05      	ldr	r2, [pc, #20]	; (8014ec0 <prvInitialiseTaskLists+0x64>)
 8014eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014eac:	4b0a      	ldr	r3, [pc, #40]	; (8014ed8 <prvInitialiseTaskLists+0x7c>)
 8014eae:	4a05      	ldr	r2, [pc, #20]	; (8014ec4 <prvInitialiseTaskLists+0x68>)
 8014eb0:	601a      	str	r2, [r3, #0]
}
 8014eb2:	bf00      	nop
 8014eb4:	3708      	adds	r7, #8
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	20000a28 	.word	0x20000a28
 8014ec0:	20000e88 	.word	0x20000e88
 8014ec4:	20000e9c 	.word	0x20000e9c
 8014ec8:	20000eb8 	.word	0x20000eb8
 8014ecc:	20000ecc 	.word	0x20000ecc
 8014ed0:	20000ee4 	.word	0x20000ee4
 8014ed4:	20000eb0 	.word	0x20000eb0
 8014ed8:	20000eb4 	.word	0x20000eb4

08014edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ee2:	e019      	b.n	8014f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014ee4:	f000 fec8 	bl	8015c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ee8:	4b0f      	ldr	r3, [pc, #60]	; (8014f28 <prvCheckTasksWaitingTermination+0x4c>)
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	3304      	adds	r3, #4
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7fe f885 	bl	8013004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014efa:	4b0c      	ldr	r3, [pc, #48]	; (8014f2c <prvCheckTasksWaitingTermination+0x50>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	3b01      	subs	r3, #1
 8014f00:	4a0a      	ldr	r2, [pc, #40]	; (8014f2c <prvCheckTasksWaitingTermination+0x50>)
 8014f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f04:	4b0a      	ldr	r3, [pc, #40]	; (8014f30 <prvCheckTasksWaitingTermination+0x54>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	4a09      	ldr	r2, [pc, #36]	; (8014f30 <prvCheckTasksWaitingTermination+0x54>)
 8014f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f0e:	f000 fee5 	bl	8015cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f000 f80e 	bl	8014f34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f18:	4b05      	ldr	r3, [pc, #20]	; (8014f30 <prvCheckTasksWaitingTermination+0x54>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d1e1      	bne.n	8014ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f20:	bf00      	nop
 8014f22:	3708      	adds	r7, #8
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	20000ecc 	.word	0x20000ecc
 8014f2c:	20000ef8 	.word	0x20000ef8
 8014f30:	20000ee0 	.word	0x20000ee0

08014f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d108      	bne.n	8014f58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f001 f87e 	bl	801604c <vPortFree>
				vPortFree( pxTCB );
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f001 f87b 	bl	801604c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014f56:	e019      	b.n	8014f8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d103      	bne.n	8014f6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f001 f872 	bl	801604c <vPortFree>
	}
 8014f68:	e010      	b.n	8014f8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	d00b      	beq.n	8014f8c <prvDeleteTCB+0x58>
 8014f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f78:	b672      	cpsid	i
 8014f7a:	f383 8811 	msr	BASEPRI, r3
 8014f7e:	f3bf 8f6f 	isb	sy
 8014f82:	f3bf 8f4f 	dsb	sy
 8014f86:	b662      	cpsie	i
 8014f88:	60fb      	str	r3, [r7, #12]
 8014f8a:	e7fe      	b.n	8014f8a <prvDeleteTCB+0x56>
	}
 8014f8c:	bf00      	nop
 8014f8e:	3710      	adds	r7, #16
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}

08014f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014f94:	b480      	push	{r7}
 8014f96:	b083      	sub	sp, #12
 8014f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f9a:	4b0c      	ldr	r3, [pc, #48]	; (8014fcc <prvResetNextTaskUnblockTime+0x38>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d104      	bne.n	8014fae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014fa4:	4b0a      	ldr	r3, [pc, #40]	; (8014fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8014fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8014faa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014fac:	e008      	b.n	8014fc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fae:	4b07      	ldr	r3, [pc, #28]	; (8014fcc <prvResetNextTaskUnblockTime+0x38>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	68db      	ldr	r3, [r3, #12]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	4a04      	ldr	r2, [pc, #16]	; (8014fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8014fbe:	6013      	str	r3, [r2, #0]
}
 8014fc0:	bf00      	nop
 8014fc2:	370c      	adds	r7, #12
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fca:	4770      	bx	lr
 8014fcc:	20000eb0 	.word	0x20000eb0
 8014fd0:	20000f18 	.word	0x20000f18

08014fd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014fda:	4b05      	ldr	r3, [pc, #20]	; (8014ff0 <xTaskGetCurrentTaskHandle+0x1c>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014fe0:	687b      	ldr	r3, [r7, #4]
	}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	370c      	adds	r7, #12
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fec:	4770      	bx	lr
 8014fee:	bf00      	nop
 8014ff0:	20000a24 	.word	0x20000a24

08014ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014ffa:	4b0b      	ldr	r3, [pc, #44]	; (8015028 <xTaskGetSchedulerState+0x34>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d102      	bne.n	8015008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015002:	2301      	movs	r3, #1
 8015004:	607b      	str	r3, [r7, #4]
 8015006:	e008      	b.n	801501a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015008:	4b08      	ldr	r3, [pc, #32]	; (801502c <xTaskGetSchedulerState+0x38>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d102      	bne.n	8015016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015010:	2302      	movs	r3, #2
 8015012:	607b      	str	r3, [r7, #4]
 8015014:	e001      	b.n	801501a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015016:	2300      	movs	r3, #0
 8015018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801501a:	687b      	ldr	r3, [r7, #4]
	}
 801501c:	4618      	mov	r0, r3
 801501e:	370c      	adds	r7, #12
 8015020:	46bd      	mov	sp, r7
 8015022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015026:	4770      	bx	lr
 8015028:	20000f04 	.word	0x20000f04
 801502c:	20000f20 	.word	0x20000f20

08015030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015030:	b580      	push	{r7, lr}
 8015032:	b084      	sub	sp, #16
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801503c:	2300      	movs	r3, #0
 801503e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d051      	beq.n	80150ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801504a:	4b2a      	ldr	r3, [pc, #168]	; (80150f4 <xTaskPriorityInherit+0xc4>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015050:	429a      	cmp	r2, r3
 8015052:	d241      	bcs.n	80150d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	699b      	ldr	r3, [r3, #24]
 8015058:	2b00      	cmp	r3, #0
 801505a:	db06      	blt.n	801506a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801505c:	4b25      	ldr	r3, [pc, #148]	; (80150f4 <xTaskPriorityInherit+0xc4>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015062:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	6959      	ldr	r1, [r3, #20]
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015072:	4613      	mov	r3, r2
 8015074:	009b      	lsls	r3, r3, #2
 8015076:	4413      	add	r3, r2
 8015078:	009b      	lsls	r3, r3, #2
 801507a:	4a1f      	ldr	r2, [pc, #124]	; (80150f8 <xTaskPriorityInherit+0xc8>)
 801507c:	4413      	add	r3, r2
 801507e:	4299      	cmp	r1, r3
 8015080:	d122      	bne.n	80150c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	3304      	adds	r3, #4
 8015086:	4618      	mov	r0, r3
 8015088:	f7fd ffbc 	bl	8013004 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801508c:	4b19      	ldr	r3, [pc, #100]	; (80150f4 <xTaskPriorityInherit+0xc4>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801509a:	4b18      	ldr	r3, [pc, #96]	; (80150fc <xTaskPriorityInherit+0xcc>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	429a      	cmp	r2, r3
 80150a0:	d903      	bls.n	80150aa <xTaskPriorityInherit+0x7a>
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a6:	4a15      	ldr	r2, [pc, #84]	; (80150fc <xTaskPriorityInherit+0xcc>)
 80150a8:	6013      	str	r3, [r2, #0]
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ae:	4613      	mov	r3, r2
 80150b0:	009b      	lsls	r3, r3, #2
 80150b2:	4413      	add	r3, r2
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	4a10      	ldr	r2, [pc, #64]	; (80150f8 <xTaskPriorityInherit+0xc8>)
 80150b8:	441a      	add	r2, r3
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	3304      	adds	r3, #4
 80150be:	4619      	mov	r1, r3
 80150c0:	4610      	mov	r0, r2
 80150c2:	f7fd ff42 	bl	8012f4a <vListInsertEnd>
 80150c6:	e004      	b.n	80150d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80150c8:	4b0a      	ldr	r3, [pc, #40]	; (80150f4 <xTaskPriorityInherit+0xc4>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80150d2:	2301      	movs	r3, #1
 80150d4:	60fb      	str	r3, [r7, #12]
 80150d6:	e008      	b.n	80150ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80150dc:	4b05      	ldr	r3, [pc, #20]	; (80150f4 <xTaskPriorityInherit+0xc4>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d201      	bcs.n	80150ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80150e6:	2301      	movs	r3, #1
 80150e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80150ea:	68fb      	ldr	r3, [r7, #12]
	}
 80150ec:	4618      	mov	r0, r3
 80150ee:	3710      	adds	r7, #16
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	20000a24 	.word	0x20000a24
 80150f8:	20000a28 	.word	0x20000a28
 80150fc:	20000f00 	.word	0x20000f00

08015100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015100:	b580      	push	{r7, lr}
 8015102:	b086      	sub	sp, #24
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801510c:	2300      	movs	r3, #0
 801510e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d058      	beq.n	80151c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015116:	4b2f      	ldr	r3, [pc, #188]	; (80151d4 <xTaskPriorityDisinherit+0xd4>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	693a      	ldr	r2, [r7, #16]
 801511c:	429a      	cmp	r2, r3
 801511e:	d00b      	beq.n	8015138 <xTaskPriorityDisinherit+0x38>
 8015120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015124:	b672      	cpsid	i
 8015126:	f383 8811 	msr	BASEPRI, r3
 801512a:	f3bf 8f6f 	isb	sy
 801512e:	f3bf 8f4f 	dsb	sy
 8015132:	b662      	cpsie	i
 8015134:	60fb      	str	r3, [r7, #12]
 8015136:	e7fe      	b.n	8015136 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801513c:	2b00      	cmp	r3, #0
 801513e:	d10b      	bne.n	8015158 <xTaskPriorityDisinherit+0x58>
 8015140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015144:	b672      	cpsid	i
 8015146:	f383 8811 	msr	BASEPRI, r3
 801514a:	f3bf 8f6f 	isb	sy
 801514e:	f3bf 8f4f 	dsb	sy
 8015152:	b662      	cpsie	i
 8015154:	60bb      	str	r3, [r7, #8]
 8015156:	e7fe      	b.n	8015156 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801515c:	1e5a      	subs	r2, r3, #1
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801516a:	429a      	cmp	r2, r3
 801516c:	d02c      	beq.n	80151c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015172:	2b00      	cmp	r3, #0
 8015174:	d128      	bne.n	80151c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	3304      	adds	r3, #4
 801517a:	4618      	mov	r0, r3
 801517c:	f7fd ff42 	bl	8013004 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801518c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015198:	4b0f      	ldr	r3, [pc, #60]	; (80151d8 <xTaskPriorityDisinherit+0xd8>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	429a      	cmp	r2, r3
 801519e:	d903      	bls.n	80151a8 <xTaskPriorityDisinherit+0xa8>
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151a4:	4a0c      	ldr	r2, [pc, #48]	; (80151d8 <xTaskPriorityDisinherit+0xd8>)
 80151a6:	6013      	str	r3, [r2, #0]
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ac:	4613      	mov	r3, r2
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	4413      	add	r3, r2
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	4a09      	ldr	r2, [pc, #36]	; (80151dc <xTaskPriorityDisinherit+0xdc>)
 80151b6:	441a      	add	r2, r3
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	3304      	adds	r3, #4
 80151bc:	4619      	mov	r1, r3
 80151be:	4610      	mov	r0, r2
 80151c0:	f7fd fec3 	bl	8012f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80151c4:	2301      	movs	r3, #1
 80151c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80151c8:	697b      	ldr	r3, [r7, #20]
	}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3718      	adds	r7, #24
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	20000a24 	.word	0x20000a24
 80151d8:	20000f00 	.word	0x20000f00
 80151dc:	20000a28 	.word	0x20000a28

080151e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b088      	sub	sp, #32
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80151ee:	2301      	movs	r3, #1
 80151f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d06c      	beq.n	80152d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80151f8:	69bb      	ldr	r3, [r7, #24]
 80151fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d10b      	bne.n	8015218 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8015200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015204:	b672      	cpsid	i
 8015206:	f383 8811 	msr	BASEPRI, r3
 801520a:	f3bf 8f6f 	isb	sy
 801520e:	f3bf 8f4f 	dsb	sy
 8015212:	b662      	cpsie	i
 8015214:	60fb      	str	r3, [r7, #12]
 8015216:	e7fe      	b.n	8015216 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015218:	69bb      	ldr	r3, [r7, #24]
 801521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801521c:	683a      	ldr	r2, [r7, #0]
 801521e:	429a      	cmp	r2, r3
 8015220:	d902      	bls.n	8015228 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	61fb      	str	r3, [r7, #28]
 8015226:	e002      	b.n	801522e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015228:	69bb      	ldr	r3, [r7, #24]
 801522a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801522c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801522e:	69bb      	ldr	r3, [r7, #24]
 8015230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015232:	69fa      	ldr	r2, [r7, #28]
 8015234:	429a      	cmp	r2, r3
 8015236:	d04c      	beq.n	80152d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801523c:	697a      	ldr	r2, [r7, #20]
 801523e:	429a      	cmp	r2, r3
 8015240:	d147      	bne.n	80152d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015242:	4b26      	ldr	r3, [pc, #152]	; (80152dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	69ba      	ldr	r2, [r7, #24]
 8015248:	429a      	cmp	r2, r3
 801524a:	d10b      	bne.n	8015264 <vTaskPriorityDisinheritAfterTimeout+0x84>
 801524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015250:	b672      	cpsid	i
 8015252:	f383 8811 	msr	BASEPRI, r3
 8015256:	f3bf 8f6f 	isb	sy
 801525a:	f3bf 8f4f 	dsb	sy
 801525e:	b662      	cpsie	i
 8015260:	60bb      	str	r3, [r7, #8]
 8015262:	e7fe      	b.n	8015262 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015264:	69bb      	ldr	r3, [r7, #24]
 8015266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015268:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801526a:	69bb      	ldr	r3, [r7, #24]
 801526c:	69fa      	ldr	r2, [r7, #28]
 801526e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	699b      	ldr	r3, [r3, #24]
 8015274:	2b00      	cmp	r3, #0
 8015276:	db04      	blt.n	8015282 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015278:	69fb      	ldr	r3, [r7, #28]
 801527a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	6959      	ldr	r1, [r3, #20]
 8015286:	693a      	ldr	r2, [r7, #16]
 8015288:	4613      	mov	r3, r2
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	4413      	add	r3, r2
 801528e:	009b      	lsls	r3, r3, #2
 8015290:	4a13      	ldr	r2, [pc, #76]	; (80152e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015292:	4413      	add	r3, r2
 8015294:	4299      	cmp	r1, r3
 8015296:	d11c      	bne.n	80152d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015298:	69bb      	ldr	r3, [r7, #24]
 801529a:	3304      	adds	r3, #4
 801529c:	4618      	mov	r0, r3
 801529e:	f7fd feb1 	bl	8013004 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80152a2:	69bb      	ldr	r3, [r7, #24]
 80152a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152a6:	4b0f      	ldr	r3, [pc, #60]	; (80152e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d903      	bls.n	80152b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152b2:	4a0c      	ldr	r2, [pc, #48]	; (80152e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80152b4:	6013      	str	r3, [r2, #0]
 80152b6:	69bb      	ldr	r3, [r7, #24]
 80152b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ba:	4613      	mov	r3, r2
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	4413      	add	r3, r2
 80152c0:	009b      	lsls	r3, r3, #2
 80152c2:	4a07      	ldr	r2, [pc, #28]	; (80152e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80152c4:	441a      	add	r2, r3
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	3304      	adds	r3, #4
 80152ca:	4619      	mov	r1, r3
 80152cc:	4610      	mov	r0, r2
 80152ce:	f7fd fe3c 	bl	8012f4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80152d2:	bf00      	nop
 80152d4:	3720      	adds	r7, #32
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	20000a24 	.word	0x20000a24
 80152e0:	20000a28 	.word	0x20000a28
 80152e4:	20000f00 	.word	0x20000f00

080152e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80152e8:	b480      	push	{r7}
 80152ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80152ec:	4b07      	ldr	r3, [pc, #28]	; (801530c <pvTaskIncrementMutexHeldCount+0x24>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d004      	beq.n	80152fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80152f4:	4b05      	ldr	r3, [pc, #20]	; (801530c <pvTaskIncrementMutexHeldCount+0x24>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152fa:	3201      	adds	r2, #1
 80152fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80152fe:	4b03      	ldr	r3, [pc, #12]	; (801530c <pvTaskIncrementMutexHeldCount+0x24>)
 8015300:	681b      	ldr	r3, [r3, #0]
	}
 8015302:	4618      	mov	r0, r3
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr
 801530c:	20000a24 	.word	0x20000a24

08015310 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b084      	sub	sp, #16
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801531a:	4b21      	ldr	r3, [pc, #132]	; (80153a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015320:	4b20      	ldr	r3, [pc, #128]	; (80153a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	3304      	adds	r3, #4
 8015326:	4618      	mov	r0, r3
 8015328:	f7fd fe6c 	bl	8013004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015332:	d10a      	bne.n	801534a <prvAddCurrentTaskToDelayedList+0x3a>
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d007      	beq.n	801534a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801533a:	4b1a      	ldr	r3, [pc, #104]	; (80153a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	3304      	adds	r3, #4
 8015340:	4619      	mov	r1, r3
 8015342:	4819      	ldr	r0, [pc, #100]	; (80153a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015344:	f7fd fe01 	bl	8012f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015348:	e026      	b.n	8015398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801534a:	68fa      	ldr	r2, [r7, #12]
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	4413      	add	r3, r2
 8015350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015352:	4b14      	ldr	r3, [pc, #80]	; (80153a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	68ba      	ldr	r2, [r7, #8]
 8015358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801535a:	68ba      	ldr	r2, [r7, #8]
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	429a      	cmp	r2, r3
 8015360:	d209      	bcs.n	8015376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015362:	4b12      	ldr	r3, [pc, #72]	; (80153ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	4b0f      	ldr	r3, [pc, #60]	; (80153a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	3304      	adds	r3, #4
 801536c:	4619      	mov	r1, r3
 801536e:	4610      	mov	r0, r2
 8015370:	f7fd fe0f 	bl	8012f92 <vListInsert>
}
 8015374:	e010      	b.n	8015398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015376:	4b0e      	ldr	r3, [pc, #56]	; (80153b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	4b0a      	ldr	r3, [pc, #40]	; (80153a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	3304      	adds	r3, #4
 8015380:	4619      	mov	r1, r3
 8015382:	4610      	mov	r0, r2
 8015384:	f7fd fe05 	bl	8012f92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015388:	4b0a      	ldr	r3, [pc, #40]	; (80153b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	68ba      	ldr	r2, [r7, #8]
 801538e:	429a      	cmp	r2, r3
 8015390:	d202      	bcs.n	8015398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015392:	4a08      	ldr	r2, [pc, #32]	; (80153b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	6013      	str	r3, [r2, #0]
}
 8015398:	bf00      	nop
 801539a:	3710      	adds	r7, #16
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	20000efc 	.word	0x20000efc
 80153a4:	20000a24 	.word	0x20000a24
 80153a8:	20000ee4 	.word	0x20000ee4
 80153ac:	20000eb4 	.word	0x20000eb4
 80153b0:	20000eb0 	.word	0x20000eb0
 80153b4:	20000f18 	.word	0x20000f18

080153b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b08a      	sub	sp, #40	; 0x28
 80153bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80153be:	2300      	movs	r3, #0
 80153c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80153c2:	f000 fb0d 	bl	80159e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80153c6:	4b1d      	ldr	r3, [pc, #116]	; (801543c <xTimerCreateTimerTask+0x84>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d021      	beq.n	8015412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80153ce:	2300      	movs	r3, #0
 80153d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80153d2:	2300      	movs	r3, #0
 80153d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80153d6:	1d3a      	adds	r2, r7, #4
 80153d8:	f107 0108 	add.w	r1, r7, #8
 80153dc:	f107 030c 	add.w	r3, r7, #12
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7fd fd6b 	bl	8012ebc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80153e6:	6879      	ldr	r1, [r7, #4]
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	68fa      	ldr	r2, [r7, #12]
 80153ec:	9202      	str	r2, [sp, #8]
 80153ee:	9301      	str	r3, [sp, #4]
 80153f0:	2302      	movs	r3, #2
 80153f2:	9300      	str	r3, [sp, #0]
 80153f4:	2300      	movs	r3, #0
 80153f6:	460a      	mov	r2, r1
 80153f8:	4911      	ldr	r1, [pc, #68]	; (8015440 <xTimerCreateTimerTask+0x88>)
 80153fa:	4812      	ldr	r0, [pc, #72]	; (8015444 <xTimerCreateTimerTask+0x8c>)
 80153fc:	f7fe ff30 	bl	8014260 <xTaskCreateStatic>
 8015400:	4602      	mov	r2, r0
 8015402:	4b11      	ldr	r3, [pc, #68]	; (8015448 <xTimerCreateTimerTask+0x90>)
 8015404:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015406:	4b10      	ldr	r3, [pc, #64]	; (8015448 <xTimerCreateTimerTask+0x90>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d001      	beq.n	8015412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801540e:	2301      	movs	r3, #1
 8015410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d10b      	bne.n	8015430 <xTimerCreateTimerTask+0x78>
 8015418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541c:	b672      	cpsid	i
 801541e:	f383 8811 	msr	BASEPRI, r3
 8015422:	f3bf 8f6f 	isb	sy
 8015426:	f3bf 8f4f 	dsb	sy
 801542a:	b662      	cpsie	i
 801542c:	613b      	str	r3, [r7, #16]
 801542e:	e7fe      	b.n	801542e <xTimerCreateTimerTask+0x76>
	return xReturn;
 8015430:	697b      	ldr	r3, [r7, #20]
}
 8015432:	4618      	mov	r0, r3
 8015434:	3718      	adds	r7, #24
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	20000f54 	.word	0x20000f54
 8015440:	08019fc8 	.word	0x08019fc8
 8015444:	08015585 	.word	0x08015585
 8015448:	20000f58 	.word	0x20000f58

0801544c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b08a      	sub	sp, #40	; 0x28
 8015450:	af00      	add	r7, sp, #0
 8015452:	60f8      	str	r0, [r7, #12]
 8015454:	60b9      	str	r1, [r7, #8]
 8015456:	607a      	str	r2, [r7, #4]
 8015458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801545a:	2300      	movs	r3, #0
 801545c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d10b      	bne.n	801547c <xTimerGenericCommand+0x30>
 8015464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015468:	b672      	cpsid	i
 801546a:	f383 8811 	msr	BASEPRI, r3
 801546e:	f3bf 8f6f 	isb	sy
 8015472:	f3bf 8f4f 	dsb	sy
 8015476:	b662      	cpsie	i
 8015478:	623b      	str	r3, [r7, #32]
 801547a:	e7fe      	b.n	801547a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801547c:	4b19      	ldr	r3, [pc, #100]	; (80154e4 <xTimerGenericCommand+0x98>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d02a      	beq.n	80154da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	2b05      	cmp	r3, #5
 8015494:	dc18      	bgt.n	80154c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015496:	f7ff fdad 	bl	8014ff4 <xTaskGetSchedulerState>
 801549a:	4603      	mov	r3, r0
 801549c:	2b02      	cmp	r3, #2
 801549e:	d109      	bne.n	80154b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80154a0:	4b10      	ldr	r3, [pc, #64]	; (80154e4 <xTimerGenericCommand+0x98>)
 80154a2:	6818      	ldr	r0, [r3, #0]
 80154a4:	f107 0110 	add.w	r1, r7, #16
 80154a8:	2300      	movs	r3, #0
 80154aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154ac:	f7fe f860 	bl	8013570 <xQueueGenericSend>
 80154b0:	6278      	str	r0, [r7, #36]	; 0x24
 80154b2:	e012      	b.n	80154da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80154b4:	4b0b      	ldr	r3, [pc, #44]	; (80154e4 <xTimerGenericCommand+0x98>)
 80154b6:	6818      	ldr	r0, [r3, #0]
 80154b8:	f107 0110 	add.w	r1, r7, #16
 80154bc:	2300      	movs	r3, #0
 80154be:	2200      	movs	r2, #0
 80154c0:	f7fe f856 	bl	8013570 <xQueueGenericSend>
 80154c4:	6278      	str	r0, [r7, #36]	; 0x24
 80154c6:	e008      	b.n	80154da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80154c8:	4b06      	ldr	r3, [pc, #24]	; (80154e4 <xTimerGenericCommand+0x98>)
 80154ca:	6818      	ldr	r0, [r3, #0]
 80154cc:	f107 0110 	add.w	r1, r7, #16
 80154d0:	2300      	movs	r3, #0
 80154d2:	683a      	ldr	r2, [r7, #0]
 80154d4:	f7fe f94e 	bl	8013774 <xQueueGenericSendFromISR>
 80154d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80154da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3728      	adds	r7, #40	; 0x28
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	20000f54 	.word	0x20000f54

080154e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b088      	sub	sp, #32
 80154ec:	af02      	add	r7, sp, #8
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154f2:	4b23      	ldr	r3, [pc, #140]	; (8015580 <prvProcessExpiredTimer+0x98>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	68db      	ldr	r3, [r3, #12]
 80154f8:	68db      	ldr	r3, [r3, #12]
 80154fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	3304      	adds	r3, #4
 8015500:	4618      	mov	r0, r3
 8015502:	f7fd fd7f 	bl	8013004 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801550c:	f003 0304 	and.w	r3, r3, #4
 8015510:	2b00      	cmp	r3, #0
 8015512:	d023      	beq.n	801555c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	699a      	ldr	r2, [r3, #24]
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	18d1      	adds	r1, r2, r3
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	683a      	ldr	r2, [r7, #0]
 8015520:	6978      	ldr	r0, [r7, #20]
 8015522:	f000 f8d3 	bl	80156cc <prvInsertTimerInActiveList>
 8015526:	4603      	mov	r3, r0
 8015528:	2b00      	cmp	r3, #0
 801552a:	d020      	beq.n	801556e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801552c:	2300      	movs	r3, #0
 801552e:	9300      	str	r3, [sp, #0]
 8015530:	2300      	movs	r3, #0
 8015532:	687a      	ldr	r2, [r7, #4]
 8015534:	2100      	movs	r1, #0
 8015536:	6978      	ldr	r0, [r7, #20]
 8015538:	f7ff ff88 	bl	801544c <xTimerGenericCommand>
 801553c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d114      	bne.n	801556e <prvProcessExpiredTimer+0x86>
 8015544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015548:	b672      	cpsid	i
 801554a:	f383 8811 	msr	BASEPRI, r3
 801554e:	f3bf 8f6f 	isb	sy
 8015552:	f3bf 8f4f 	dsb	sy
 8015556:	b662      	cpsie	i
 8015558:	60fb      	str	r3, [r7, #12]
 801555a:	e7fe      	b.n	801555a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015562:	f023 0301 	bic.w	r3, r3, #1
 8015566:	b2da      	uxtb	r2, r3
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	6a1b      	ldr	r3, [r3, #32]
 8015572:	6978      	ldr	r0, [r7, #20]
 8015574:	4798      	blx	r3
}
 8015576:	bf00      	nop
 8015578:	3718      	adds	r7, #24
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}
 801557e:	bf00      	nop
 8015580:	20000f4c 	.word	0x20000f4c

08015584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801558c:	f107 0308 	add.w	r3, r7, #8
 8015590:	4618      	mov	r0, r3
 8015592:	f000 f857 	bl	8015644 <prvGetNextExpireTime>
 8015596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	4619      	mov	r1, r3
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f000 f803 	bl	80155a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80155a2:	f000 f8d5 	bl	8015750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80155a6:	e7f1      	b.n	801558c <prvTimerTask+0x8>

080155a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b084      	sub	sp, #16
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80155b2:	f7ff f919 	bl	80147e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80155b6:	f107 0308 	add.w	r3, r7, #8
 80155ba:	4618      	mov	r0, r3
 80155bc:	f000 f866 	bl	801568c <prvSampleTimeNow>
 80155c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d130      	bne.n	801562a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d10a      	bne.n	80155e4 <prvProcessTimerOrBlockTask+0x3c>
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d806      	bhi.n	80155e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80155d6:	f7ff f915 	bl	8014804 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80155da:	68f9      	ldr	r1, [r7, #12]
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	f7ff ff83 	bl	80154e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80155e2:	e024      	b.n	801562e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d008      	beq.n	80155fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80155ea:	4b13      	ldr	r3, [pc, #76]	; (8015638 <prvProcessTimerOrBlockTask+0x90>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d101      	bne.n	80155f8 <prvProcessTimerOrBlockTask+0x50>
 80155f4:	2301      	movs	r3, #1
 80155f6:	e000      	b.n	80155fa <prvProcessTimerOrBlockTask+0x52>
 80155f8:	2300      	movs	r3, #0
 80155fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80155fc:	4b0f      	ldr	r3, [pc, #60]	; (801563c <prvProcessTimerOrBlockTask+0x94>)
 80155fe:	6818      	ldr	r0, [r3, #0]
 8015600:	687a      	ldr	r2, [r7, #4]
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	1ad3      	subs	r3, r2, r3
 8015606:	683a      	ldr	r2, [r7, #0]
 8015608:	4619      	mov	r1, r3
 801560a:	f7fe fdf5 	bl	80141f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801560e:	f7ff f8f9 	bl	8014804 <xTaskResumeAll>
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	d10a      	bne.n	801562e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015618:	4b09      	ldr	r3, [pc, #36]	; (8015640 <prvProcessTimerOrBlockTask+0x98>)
 801561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801561e:	601a      	str	r2, [r3, #0]
 8015620:	f3bf 8f4f 	dsb	sy
 8015624:	f3bf 8f6f 	isb	sy
}
 8015628:	e001      	b.n	801562e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801562a:	f7ff f8eb 	bl	8014804 <xTaskResumeAll>
}
 801562e:	bf00      	nop
 8015630:	3710      	adds	r7, #16
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
 8015636:	bf00      	nop
 8015638:	20000f50 	.word	0x20000f50
 801563c:	20000f54 	.word	0x20000f54
 8015640:	e000ed04 	.word	0xe000ed04

08015644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015644:	b480      	push	{r7}
 8015646:	b085      	sub	sp, #20
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801564c:	4b0e      	ldr	r3, [pc, #56]	; (8015688 <prvGetNextExpireTime+0x44>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d101      	bne.n	801565a <prvGetNextExpireTime+0x16>
 8015656:	2201      	movs	r2, #1
 8015658:	e000      	b.n	801565c <prvGetNextExpireTime+0x18>
 801565a:	2200      	movs	r2, #0
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d105      	bne.n	8015674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015668:	4b07      	ldr	r3, [pc, #28]	; (8015688 <prvGetNextExpireTime+0x44>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	60fb      	str	r3, [r7, #12]
 8015672:	e001      	b.n	8015678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015674:	2300      	movs	r3, #0
 8015676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015678:	68fb      	ldr	r3, [r7, #12]
}
 801567a:	4618      	mov	r0, r3
 801567c:	3714      	adds	r7, #20
 801567e:	46bd      	mov	sp, r7
 8015680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015684:	4770      	bx	lr
 8015686:	bf00      	nop
 8015688:	20000f4c 	.word	0x20000f4c

0801568c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015694:	f7ff f954 	bl	8014940 <xTaskGetTickCount>
 8015698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801569a:	4b0b      	ldr	r3, [pc, #44]	; (80156c8 <prvSampleTimeNow+0x3c>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	68fa      	ldr	r2, [r7, #12]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d205      	bcs.n	80156b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80156a4:	f000 f936 	bl	8015914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2201      	movs	r2, #1
 80156ac:	601a      	str	r2, [r3, #0]
 80156ae:	e002      	b.n	80156b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2200      	movs	r2, #0
 80156b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80156b6:	4a04      	ldr	r2, [pc, #16]	; (80156c8 <prvSampleTimeNow+0x3c>)
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80156bc:	68fb      	ldr	r3, [r7, #12]
}
 80156be:	4618      	mov	r0, r3
 80156c0:	3710      	adds	r7, #16
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	20000f5c 	.word	0x20000f5c

080156cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b086      	sub	sp, #24
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	60f8      	str	r0, [r7, #12]
 80156d4:	60b9      	str	r1, [r7, #8]
 80156d6:	607a      	str	r2, [r7, #4]
 80156d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80156da:	2300      	movs	r3, #0
 80156dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	68ba      	ldr	r2, [r7, #8]
 80156e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	68fa      	ldr	r2, [r7, #12]
 80156e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80156ea:	68ba      	ldr	r2, [r7, #8]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d812      	bhi.n	8015718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	1ad2      	subs	r2, r2, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	699b      	ldr	r3, [r3, #24]
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d302      	bcc.n	8015706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015700:	2301      	movs	r3, #1
 8015702:	617b      	str	r3, [r7, #20]
 8015704:	e01b      	b.n	801573e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015706:	4b10      	ldr	r3, [pc, #64]	; (8015748 <prvInsertTimerInActiveList+0x7c>)
 8015708:	681a      	ldr	r2, [r3, #0]
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	3304      	adds	r3, #4
 801570e:	4619      	mov	r1, r3
 8015710:	4610      	mov	r0, r2
 8015712:	f7fd fc3e 	bl	8012f92 <vListInsert>
 8015716:	e012      	b.n	801573e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	429a      	cmp	r2, r3
 801571e:	d206      	bcs.n	801572e <prvInsertTimerInActiveList+0x62>
 8015720:	68ba      	ldr	r2, [r7, #8]
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	429a      	cmp	r2, r3
 8015726:	d302      	bcc.n	801572e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015728:	2301      	movs	r3, #1
 801572a:	617b      	str	r3, [r7, #20]
 801572c:	e007      	b.n	801573e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801572e:	4b07      	ldr	r3, [pc, #28]	; (801574c <prvInsertTimerInActiveList+0x80>)
 8015730:	681a      	ldr	r2, [r3, #0]
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	3304      	adds	r3, #4
 8015736:	4619      	mov	r1, r3
 8015738:	4610      	mov	r0, r2
 801573a:	f7fd fc2a 	bl	8012f92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801573e:	697b      	ldr	r3, [r7, #20]
}
 8015740:	4618      	mov	r0, r3
 8015742:	3718      	adds	r7, #24
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	20000f50 	.word	0x20000f50
 801574c:	20000f4c 	.word	0x20000f4c

08015750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b08e      	sub	sp, #56	; 0x38
 8015754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015756:	e0cc      	b.n	80158f2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2b00      	cmp	r3, #0
 801575c:	da19      	bge.n	8015792 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801575e:	1d3b      	adds	r3, r7, #4
 8015760:	3304      	adds	r3, #4
 8015762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015766:	2b00      	cmp	r3, #0
 8015768:	d10b      	bne.n	8015782 <prvProcessReceivedCommands+0x32>
 801576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801576e:	b672      	cpsid	i
 8015770:	f383 8811 	msr	BASEPRI, r3
 8015774:	f3bf 8f6f 	isb	sy
 8015778:	f3bf 8f4f 	dsb	sy
 801577c:	b662      	cpsie	i
 801577e:	61fb      	str	r3, [r7, #28]
 8015780:	e7fe      	b.n	8015780 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015788:	6850      	ldr	r0, [r2, #4]
 801578a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801578c:	6892      	ldr	r2, [r2, #8]
 801578e:	4611      	mov	r1, r2
 8015790:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	f2c0 80ab 	blt.w	80158f0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a0:	695b      	ldr	r3, [r3, #20]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d004      	beq.n	80157b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80157a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a8:	3304      	adds	r3, #4
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7fd fc2a 	bl	8013004 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80157b0:	463b      	mov	r3, r7
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7ff ff6a 	bl	801568c <prvSampleTimeNow>
 80157b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2b09      	cmp	r3, #9
 80157be:	f200 8098 	bhi.w	80158f2 <prvProcessReceivedCommands+0x1a2>
 80157c2:	a201      	add	r2, pc, #4	; (adr r2, 80157c8 <prvProcessReceivedCommands+0x78>)
 80157c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157c8:	080157f1 	.word	0x080157f1
 80157cc:	080157f1 	.word	0x080157f1
 80157d0:	080157f1 	.word	0x080157f1
 80157d4:	08015867 	.word	0x08015867
 80157d8:	0801587b 	.word	0x0801587b
 80157dc:	080158c7 	.word	0x080158c7
 80157e0:	080157f1 	.word	0x080157f1
 80157e4:	080157f1 	.word	0x080157f1
 80157e8:	08015867 	.word	0x08015867
 80157ec:	0801587b 	.word	0x0801587b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80157f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157f6:	f043 0301 	orr.w	r3, r3, #1
 80157fa:	b2da      	uxtb	r2, r3
 80157fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015802:	68ba      	ldr	r2, [r7, #8]
 8015804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015806:	699b      	ldr	r3, [r3, #24]
 8015808:	18d1      	adds	r1, r2, r3
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801580e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015810:	f7ff ff5c 	bl	80156cc <prvInsertTimerInActiveList>
 8015814:	4603      	mov	r3, r0
 8015816:	2b00      	cmp	r3, #0
 8015818:	d06b      	beq.n	80158f2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801581c:	6a1b      	ldr	r3, [r3, #32]
 801581e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015828:	f003 0304 	and.w	r3, r3, #4
 801582c:	2b00      	cmp	r3, #0
 801582e:	d060      	beq.n	80158f2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015830:	68ba      	ldr	r2, [r7, #8]
 8015832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015834:	699b      	ldr	r3, [r3, #24]
 8015836:	441a      	add	r2, r3
 8015838:	2300      	movs	r3, #0
 801583a:	9300      	str	r3, [sp, #0]
 801583c:	2300      	movs	r3, #0
 801583e:	2100      	movs	r1, #0
 8015840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015842:	f7ff fe03 	bl	801544c <xTimerGenericCommand>
 8015846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015848:	6a3b      	ldr	r3, [r7, #32]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d151      	bne.n	80158f2 <prvProcessReceivedCommands+0x1a2>
 801584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015852:	b672      	cpsid	i
 8015854:	f383 8811 	msr	BASEPRI, r3
 8015858:	f3bf 8f6f 	isb	sy
 801585c:	f3bf 8f4f 	dsb	sy
 8015860:	b662      	cpsie	i
 8015862:	61bb      	str	r3, [r7, #24]
 8015864:	e7fe      	b.n	8015864 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801586c:	f023 0301 	bic.w	r3, r3, #1
 8015870:	b2da      	uxtb	r2, r3
 8015872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015878:	e03b      	b.n	80158f2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801587c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015880:	f043 0301 	orr.w	r3, r3, #1
 8015884:	b2da      	uxtb	r2, r3
 8015886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801588c:	68ba      	ldr	r2, [r7, #8]
 801588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015890:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015894:	699b      	ldr	r3, [r3, #24]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d10b      	bne.n	80158b2 <prvProcessReceivedCommands+0x162>
 801589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801589e:	b672      	cpsid	i
 80158a0:	f383 8811 	msr	BASEPRI, r3
 80158a4:	f3bf 8f6f 	isb	sy
 80158a8:	f3bf 8f4f 	dsb	sy
 80158ac:	b662      	cpsie	i
 80158ae:	617b      	str	r3, [r7, #20]
 80158b0:	e7fe      	b.n	80158b0 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80158b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b4:	699a      	ldr	r2, [r3, #24]
 80158b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b8:	18d1      	adds	r1, r2, r3
 80158ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158c0:	f7ff ff04 	bl	80156cc <prvInsertTimerInActiveList>
					break;
 80158c4:	e015      	b.n	80158f2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80158c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158cc:	f003 0302 	and.w	r3, r3, #2
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d103      	bne.n	80158dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80158d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158d6:	f000 fbb9 	bl	801604c <vPortFree>
 80158da:	e00a      	b.n	80158f2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80158dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158e2:	f023 0301 	bic.w	r3, r3, #1
 80158e6:	b2da      	uxtb	r2, r3
 80158e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80158ee:	e000      	b.n	80158f2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80158f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80158f2:	4b07      	ldr	r3, [pc, #28]	; (8015910 <prvProcessReceivedCommands+0x1c0>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	1d39      	adds	r1, r7, #4
 80158f8:	2200      	movs	r2, #0
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7fe f868 	bl	80139d0 <xQueueReceive>
 8015900:	4603      	mov	r3, r0
 8015902:	2b00      	cmp	r3, #0
 8015904:	f47f af28 	bne.w	8015758 <prvProcessReceivedCommands+0x8>
	}
}
 8015908:	bf00      	nop
 801590a:	3730      	adds	r7, #48	; 0x30
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	20000f54 	.word	0x20000f54

08015914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b088      	sub	sp, #32
 8015918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801591a:	e049      	b.n	80159b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801591c:	4b2e      	ldr	r3, [pc, #184]	; (80159d8 <prvSwitchTimerLists+0xc4>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	68db      	ldr	r3, [r3, #12]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015926:	4b2c      	ldr	r3, [pc, #176]	; (80159d8 <prvSwitchTimerLists+0xc4>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	68db      	ldr	r3, [r3, #12]
 801592e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	3304      	adds	r3, #4
 8015934:	4618      	mov	r0, r3
 8015936:	f7fd fb65 	bl	8013004 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	6a1b      	ldr	r3, [r3, #32]
 801593e:	68f8      	ldr	r0, [r7, #12]
 8015940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015948:	f003 0304 	and.w	r3, r3, #4
 801594c:	2b00      	cmp	r3, #0
 801594e:	d02f      	beq.n	80159b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	699b      	ldr	r3, [r3, #24]
 8015954:	693a      	ldr	r2, [r7, #16]
 8015956:	4413      	add	r3, r2
 8015958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801595a:	68ba      	ldr	r2, [r7, #8]
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	429a      	cmp	r2, r3
 8015960:	d90e      	bls.n	8015980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	68ba      	ldr	r2, [r7, #8]
 8015966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801596e:	4b1a      	ldr	r3, [pc, #104]	; (80159d8 <prvSwitchTimerLists+0xc4>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	3304      	adds	r3, #4
 8015976:	4619      	mov	r1, r3
 8015978:	4610      	mov	r0, r2
 801597a:	f7fd fb0a 	bl	8012f92 <vListInsert>
 801597e:	e017      	b.n	80159b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015980:	2300      	movs	r3, #0
 8015982:	9300      	str	r3, [sp, #0]
 8015984:	2300      	movs	r3, #0
 8015986:	693a      	ldr	r2, [r7, #16]
 8015988:	2100      	movs	r1, #0
 801598a:	68f8      	ldr	r0, [r7, #12]
 801598c:	f7ff fd5e 	bl	801544c <xTimerGenericCommand>
 8015990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d10b      	bne.n	80159b0 <prvSwitchTimerLists+0x9c>
 8015998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599c:	b672      	cpsid	i
 801599e:	f383 8811 	msr	BASEPRI, r3
 80159a2:	f3bf 8f6f 	isb	sy
 80159a6:	f3bf 8f4f 	dsb	sy
 80159aa:	b662      	cpsie	i
 80159ac:	603b      	str	r3, [r7, #0]
 80159ae:	e7fe      	b.n	80159ae <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80159b0:	4b09      	ldr	r3, [pc, #36]	; (80159d8 <prvSwitchTimerLists+0xc4>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d1b0      	bne.n	801591c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80159ba:	4b07      	ldr	r3, [pc, #28]	; (80159d8 <prvSwitchTimerLists+0xc4>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80159c0:	4b06      	ldr	r3, [pc, #24]	; (80159dc <prvSwitchTimerLists+0xc8>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	4a04      	ldr	r2, [pc, #16]	; (80159d8 <prvSwitchTimerLists+0xc4>)
 80159c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80159c8:	4a04      	ldr	r2, [pc, #16]	; (80159dc <prvSwitchTimerLists+0xc8>)
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	6013      	str	r3, [r2, #0]
}
 80159ce:	bf00      	nop
 80159d0:	3718      	adds	r7, #24
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	bf00      	nop
 80159d8:	20000f4c 	.word	0x20000f4c
 80159dc:	20000f50 	.word	0x20000f50

080159e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b082      	sub	sp, #8
 80159e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80159e6:	f000 f947 	bl	8015c78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80159ea:	4b15      	ldr	r3, [pc, #84]	; (8015a40 <prvCheckForValidListAndQueue+0x60>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d120      	bne.n	8015a34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80159f2:	4814      	ldr	r0, [pc, #80]	; (8015a44 <prvCheckForValidListAndQueue+0x64>)
 80159f4:	f7fd fa7c 	bl	8012ef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80159f8:	4813      	ldr	r0, [pc, #76]	; (8015a48 <prvCheckForValidListAndQueue+0x68>)
 80159fa:	f7fd fa79 	bl	8012ef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80159fe:	4b13      	ldr	r3, [pc, #76]	; (8015a4c <prvCheckForValidListAndQueue+0x6c>)
 8015a00:	4a10      	ldr	r2, [pc, #64]	; (8015a44 <prvCheckForValidListAndQueue+0x64>)
 8015a02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015a04:	4b12      	ldr	r3, [pc, #72]	; (8015a50 <prvCheckForValidListAndQueue+0x70>)
 8015a06:	4a10      	ldr	r2, [pc, #64]	; (8015a48 <prvCheckForValidListAndQueue+0x68>)
 8015a08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	9300      	str	r3, [sp, #0]
 8015a0e:	4b11      	ldr	r3, [pc, #68]	; (8015a54 <prvCheckForValidListAndQueue+0x74>)
 8015a10:	4a11      	ldr	r2, [pc, #68]	; (8015a58 <prvCheckForValidListAndQueue+0x78>)
 8015a12:	2110      	movs	r1, #16
 8015a14:	200a      	movs	r0, #10
 8015a16:	f7fd fb89 	bl	801312c <xQueueGenericCreateStatic>
 8015a1a:	4602      	mov	r2, r0
 8015a1c:	4b08      	ldr	r3, [pc, #32]	; (8015a40 <prvCheckForValidListAndQueue+0x60>)
 8015a1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015a20:	4b07      	ldr	r3, [pc, #28]	; (8015a40 <prvCheckForValidListAndQueue+0x60>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d005      	beq.n	8015a34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015a28:	4b05      	ldr	r3, [pc, #20]	; (8015a40 <prvCheckForValidListAndQueue+0x60>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	490b      	ldr	r1, [pc, #44]	; (8015a5c <prvCheckForValidListAndQueue+0x7c>)
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7fe fb90 	bl	8014154 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a34:	f000 f952 	bl	8015cdc <vPortExitCritical>
}
 8015a38:	bf00      	nop
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
 8015a3e:	bf00      	nop
 8015a40:	20000f54 	.word	0x20000f54
 8015a44:	20000f24 	.word	0x20000f24
 8015a48:	20000f38 	.word	0x20000f38
 8015a4c:	20000f4c 	.word	0x20000f4c
 8015a50:	20000f50 	.word	0x20000f50
 8015a54:	20001000 	.word	0x20001000
 8015a58:	20000f60 	.word	0x20000f60
 8015a5c:	08019fd0 	.word	0x08019fd0

08015a60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015a60:	b480      	push	{r7}
 8015a62:	b085      	sub	sp, #20
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	3b04      	subs	r3, #4
 8015a70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	3b04      	subs	r3, #4
 8015a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	f023 0201 	bic.w	r2, r3, #1
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	3b04      	subs	r3, #4
 8015a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015a90:	4a0c      	ldr	r2, [pc, #48]	; (8015ac4 <pxPortInitialiseStack+0x64>)
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	3b14      	subs	r3, #20
 8015a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015a9c:	687a      	ldr	r2, [r7, #4]
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	3b04      	subs	r3, #4
 8015aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	f06f 0202 	mvn.w	r2, #2
 8015aae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	3b20      	subs	r3, #32
 8015ab4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3714      	adds	r7, #20
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr
 8015ac4:	08015ac9 	.word	0x08015ac9

08015ac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015ac8:	b480      	push	{r7}
 8015aca:	b085      	sub	sp, #20
 8015acc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015ad2:	4b13      	ldr	r3, [pc, #76]	; (8015b20 <prvTaskExitError+0x58>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ada:	d00b      	beq.n	8015af4 <prvTaskExitError+0x2c>
 8015adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ae0:	b672      	cpsid	i
 8015ae2:	f383 8811 	msr	BASEPRI, r3
 8015ae6:	f3bf 8f6f 	isb	sy
 8015aea:	f3bf 8f4f 	dsb	sy
 8015aee:	b662      	cpsie	i
 8015af0:	60fb      	str	r3, [r7, #12]
 8015af2:	e7fe      	b.n	8015af2 <prvTaskExitError+0x2a>
 8015af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af8:	b672      	cpsid	i
 8015afa:	f383 8811 	msr	BASEPRI, r3
 8015afe:	f3bf 8f6f 	isb	sy
 8015b02:	f3bf 8f4f 	dsb	sy
 8015b06:	b662      	cpsie	i
 8015b08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015b0a:	bf00      	nop
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d0fc      	beq.n	8015b0c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015b12:	bf00      	nop
 8015b14:	3714      	adds	r7, #20
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr
 8015b1e:	bf00      	nop
 8015b20:	2000011c 	.word	0x2000011c
	...

08015b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015b30:	4b07      	ldr	r3, [pc, #28]	; (8015b50 <pxCurrentTCBConst2>)
 8015b32:	6819      	ldr	r1, [r3, #0]
 8015b34:	6808      	ldr	r0, [r1, #0]
 8015b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3a:	f380 8809 	msr	PSP, r0
 8015b3e:	f3bf 8f6f 	isb	sy
 8015b42:	f04f 0000 	mov.w	r0, #0
 8015b46:	f380 8811 	msr	BASEPRI, r0
 8015b4a:	4770      	bx	lr
 8015b4c:	f3af 8000 	nop.w

08015b50 <pxCurrentTCBConst2>:
 8015b50:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015b54:	bf00      	nop
 8015b56:	bf00      	nop

08015b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015b58:	4808      	ldr	r0, [pc, #32]	; (8015b7c <prvPortStartFirstTask+0x24>)
 8015b5a:	6800      	ldr	r0, [r0, #0]
 8015b5c:	6800      	ldr	r0, [r0, #0]
 8015b5e:	f380 8808 	msr	MSP, r0
 8015b62:	f04f 0000 	mov.w	r0, #0
 8015b66:	f380 8814 	msr	CONTROL, r0
 8015b6a:	b662      	cpsie	i
 8015b6c:	b661      	cpsie	f
 8015b6e:	f3bf 8f4f 	dsb	sy
 8015b72:	f3bf 8f6f 	isb	sy
 8015b76:	df00      	svc	0
 8015b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015b7a:	bf00      	nop
 8015b7c:	e000ed08 	.word	0xe000ed08

08015b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b084      	sub	sp, #16
 8015b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b86:	4b36      	ldr	r3, [pc, #216]	; (8015c60 <xPortStartScheduler+0xe0>)
 8015b88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	22ff      	movs	r2, #255	; 0xff
 8015b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ba0:	78fb      	ldrb	r3, [r7, #3]
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	4b2e      	ldr	r3, [pc, #184]	; (8015c64 <xPortStartScheduler+0xe4>)
 8015bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015bae:	4b2e      	ldr	r3, [pc, #184]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015bb0:	2207      	movs	r2, #7
 8015bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015bb4:	e009      	b.n	8015bca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015bb6:	4b2c      	ldr	r3, [pc, #176]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	3b01      	subs	r3, #1
 8015bbc:	4a2a      	ldr	r2, [pc, #168]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015bc0:	78fb      	ldrb	r3, [r7, #3]
 8015bc2:	b2db      	uxtb	r3, r3
 8015bc4:	005b      	lsls	r3, r3, #1
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015bca:	78fb      	ldrb	r3, [r7, #3]
 8015bcc:	b2db      	uxtb	r3, r3
 8015bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015bd2:	2b80      	cmp	r3, #128	; 0x80
 8015bd4:	d0ef      	beq.n	8015bb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015bd6:	4b24      	ldr	r3, [pc, #144]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	f1c3 0307 	rsb	r3, r3, #7
 8015bde:	2b04      	cmp	r3, #4
 8015be0:	d00b      	beq.n	8015bfa <xPortStartScheduler+0x7a>
 8015be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be6:	b672      	cpsid	i
 8015be8:	f383 8811 	msr	BASEPRI, r3
 8015bec:	f3bf 8f6f 	isb	sy
 8015bf0:	f3bf 8f4f 	dsb	sy
 8015bf4:	b662      	cpsie	i
 8015bf6:	60bb      	str	r3, [r7, #8]
 8015bf8:	e7fe      	b.n	8015bf8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015bfa:	4b1b      	ldr	r3, [pc, #108]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	021b      	lsls	r3, r3, #8
 8015c00:	4a19      	ldr	r2, [pc, #100]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015c02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015c04:	4b18      	ldr	r3, [pc, #96]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015c0c:	4a16      	ldr	r2, [pc, #88]	; (8015c68 <xPortStartScheduler+0xe8>)
 8015c0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	b2da      	uxtb	r2, r3
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015c18:	4b14      	ldr	r3, [pc, #80]	; (8015c6c <xPortStartScheduler+0xec>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	4a13      	ldr	r2, [pc, #76]	; (8015c6c <xPortStartScheduler+0xec>)
 8015c1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c24:	4b11      	ldr	r3, [pc, #68]	; (8015c6c <xPortStartScheduler+0xec>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	4a10      	ldr	r2, [pc, #64]	; (8015c6c <xPortStartScheduler+0xec>)
 8015c2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c30:	f000 f8d4 	bl	8015ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c34:	4b0e      	ldr	r3, [pc, #56]	; (8015c70 <xPortStartScheduler+0xf0>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c3a:	f000 f8f3 	bl	8015e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015c3e:	4b0d      	ldr	r3, [pc, #52]	; (8015c74 <xPortStartScheduler+0xf4>)
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	4a0c      	ldr	r2, [pc, #48]	; (8015c74 <xPortStartScheduler+0xf4>)
 8015c44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015c48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c4a:	f7ff ff85 	bl	8015b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015c4e:	f7fe ff53 	bl	8014af8 <vTaskSwitchContext>
	prvTaskExitError();
 8015c52:	f7ff ff39 	bl	8015ac8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c56:	2300      	movs	r3, #0
}
 8015c58:	4618      	mov	r0, r3
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	e000e400 	.word	0xe000e400
 8015c64:	20001050 	.word	0x20001050
 8015c68:	20001054 	.word	0x20001054
 8015c6c:	e000ed20 	.word	0xe000ed20
 8015c70:	2000011c 	.word	0x2000011c
 8015c74:	e000ef34 	.word	0xe000ef34

08015c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c78:	b480      	push	{r7}
 8015c7a:	b083      	sub	sp, #12
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c82:	b672      	cpsid	i
 8015c84:	f383 8811 	msr	BASEPRI, r3
 8015c88:	f3bf 8f6f 	isb	sy
 8015c8c:	f3bf 8f4f 	dsb	sy
 8015c90:	b662      	cpsie	i
 8015c92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c94:	4b0f      	ldr	r3, [pc, #60]	; (8015cd4 <vPortEnterCritical+0x5c>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	4a0e      	ldr	r2, [pc, #56]	; (8015cd4 <vPortEnterCritical+0x5c>)
 8015c9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c9e:	4b0d      	ldr	r3, [pc, #52]	; (8015cd4 <vPortEnterCritical+0x5c>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	2b01      	cmp	r3, #1
 8015ca4:	d110      	bne.n	8015cc8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015ca6:	4b0c      	ldr	r3, [pc, #48]	; (8015cd8 <vPortEnterCritical+0x60>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00b      	beq.n	8015cc8 <vPortEnterCritical+0x50>
 8015cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb4:	b672      	cpsid	i
 8015cb6:	f383 8811 	msr	BASEPRI, r3
 8015cba:	f3bf 8f6f 	isb	sy
 8015cbe:	f3bf 8f4f 	dsb	sy
 8015cc2:	b662      	cpsie	i
 8015cc4:	603b      	str	r3, [r7, #0]
 8015cc6:	e7fe      	b.n	8015cc6 <vPortEnterCritical+0x4e>
	}
}
 8015cc8:	bf00      	nop
 8015cca:	370c      	adds	r7, #12
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd2:	4770      	bx	lr
 8015cd4:	2000011c 	.word	0x2000011c
 8015cd8:	e000ed04 	.word	0xe000ed04

08015cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b083      	sub	sp, #12
 8015ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015ce2:	4b12      	ldr	r3, [pc, #72]	; (8015d2c <vPortExitCritical+0x50>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d10b      	bne.n	8015d02 <vPortExitCritical+0x26>
 8015cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cee:	b672      	cpsid	i
 8015cf0:	f383 8811 	msr	BASEPRI, r3
 8015cf4:	f3bf 8f6f 	isb	sy
 8015cf8:	f3bf 8f4f 	dsb	sy
 8015cfc:	b662      	cpsie	i
 8015cfe:	607b      	str	r3, [r7, #4]
 8015d00:	e7fe      	b.n	8015d00 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015d02:	4b0a      	ldr	r3, [pc, #40]	; (8015d2c <vPortExitCritical+0x50>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	3b01      	subs	r3, #1
 8015d08:	4a08      	ldr	r2, [pc, #32]	; (8015d2c <vPortExitCritical+0x50>)
 8015d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015d0c:	4b07      	ldr	r3, [pc, #28]	; (8015d2c <vPortExitCritical+0x50>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d104      	bne.n	8015d1e <vPortExitCritical+0x42>
 8015d14:	2300      	movs	r3, #0
 8015d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d1e:	bf00      	nop
 8015d20:	370c      	adds	r7, #12
 8015d22:	46bd      	mov	sp, r7
 8015d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d28:	4770      	bx	lr
 8015d2a:	bf00      	nop
 8015d2c:	2000011c 	.word	0x2000011c

08015d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d30:	f3ef 8009 	mrs	r0, PSP
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	4b15      	ldr	r3, [pc, #84]	; (8015d90 <pxCurrentTCBConst>)
 8015d3a:	681a      	ldr	r2, [r3, #0]
 8015d3c:	f01e 0f10 	tst.w	lr, #16
 8015d40:	bf08      	it	eq
 8015d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d4a:	6010      	str	r0, [r2, #0]
 8015d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015d54:	b672      	cpsid	i
 8015d56:	f380 8811 	msr	BASEPRI, r0
 8015d5a:	f3bf 8f4f 	dsb	sy
 8015d5e:	f3bf 8f6f 	isb	sy
 8015d62:	b662      	cpsie	i
 8015d64:	f7fe fec8 	bl	8014af8 <vTaskSwitchContext>
 8015d68:	f04f 0000 	mov.w	r0, #0
 8015d6c:	f380 8811 	msr	BASEPRI, r0
 8015d70:	bc09      	pop	{r0, r3}
 8015d72:	6819      	ldr	r1, [r3, #0]
 8015d74:	6808      	ldr	r0, [r1, #0]
 8015d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d7a:	f01e 0f10 	tst.w	lr, #16
 8015d7e:	bf08      	it	eq
 8015d80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d84:	f380 8809 	msr	PSP, r0
 8015d88:	f3bf 8f6f 	isb	sy
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop

08015d90 <pxCurrentTCBConst>:
 8015d90:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d94:	bf00      	nop
 8015d96:	bf00      	nop

08015d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da2:	b672      	cpsid	i
 8015da4:	f383 8811 	msr	BASEPRI, r3
 8015da8:	f3bf 8f6f 	isb	sy
 8015dac:	f3bf 8f4f 	dsb	sy
 8015db0:	b662      	cpsie	i
 8015db2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015db4:	f7fe fde6 	bl	8014984 <xTaskIncrementTick>
 8015db8:	4603      	mov	r3, r0
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d003      	beq.n	8015dc6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015dbe:	4b06      	ldr	r3, [pc, #24]	; (8015dd8 <SysTick_Handler+0x40>)
 8015dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dc4:	601a      	str	r2, [r3, #0]
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015dd0:	bf00      	nop
 8015dd2:	3708      	adds	r7, #8
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	e000ed04 	.word	0xe000ed04

08015ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015ddc:	b480      	push	{r7}
 8015dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015de0:	4b0b      	ldr	r3, [pc, #44]	; (8015e10 <vPortSetupTimerInterrupt+0x34>)
 8015de2:	2200      	movs	r2, #0
 8015de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015de6:	4b0b      	ldr	r3, [pc, #44]	; (8015e14 <vPortSetupTimerInterrupt+0x38>)
 8015de8:	2200      	movs	r2, #0
 8015dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015dec:	4b0a      	ldr	r3, [pc, #40]	; (8015e18 <vPortSetupTimerInterrupt+0x3c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4a0a      	ldr	r2, [pc, #40]	; (8015e1c <vPortSetupTimerInterrupt+0x40>)
 8015df2:	fba2 2303 	umull	r2, r3, r2, r3
 8015df6:	099b      	lsrs	r3, r3, #6
 8015df8:	4a09      	ldr	r2, [pc, #36]	; (8015e20 <vPortSetupTimerInterrupt+0x44>)
 8015dfa:	3b01      	subs	r3, #1
 8015dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015dfe:	4b04      	ldr	r3, [pc, #16]	; (8015e10 <vPortSetupTimerInterrupt+0x34>)
 8015e00:	2207      	movs	r2, #7
 8015e02:	601a      	str	r2, [r3, #0]
}
 8015e04:	bf00      	nop
 8015e06:	46bd      	mov	sp, r7
 8015e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop
 8015e10:	e000e010 	.word	0xe000e010
 8015e14:	e000e018 	.word	0xe000e018
 8015e18:	20000000 	.word	0x20000000
 8015e1c:	10624dd3 	.word	0x10624dd3
 8015e20:	e000e014 	.word	0xe000e014

08015e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015e34 <vPortEnableVFP+0x10>
 8015e28:	6801      	ldr	r1, [r0, #0]
 8015e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015e2e:	6001      	str	r1, [r0, #0]
 8015e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015e32:	bf00      	nop
 8015e34:	e000ed88 	.word	0xe000ed88

08015e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015e38:	b480      	push	{r7}
 8015e3a:	b085      	sub	sp, #20
 8015e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e3e:	f3ef 8305 	mrs	r3, IPSR
 8015e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2b0f      	cmp	r3, #15
 8015e48:	d915      	bls.n	8015e76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015e4a:	4a18      	ldr	r2, [pc, #96]	; (8015eac <vPortValidateInterruptPriority+0x74>)
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	4413      	add	r3, r2
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015e54:	4b16      	ldr	r3, [pc, #88]	; (8015eb0 <vPortValidateInterruptPriority+0x78>)
 8015e56:	781b      	ldrb	r3, [r3, #0]
 8015e58:	7afa      	ldrb	r2, [r7, #11]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d20b      	bcs.n	8015e76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8015e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e62:	b672      	cpsid	i
 8015e64:	f383 8811 	msr	BASEPRI, r3
 8015e68:	f3bf 8f6f 	isb	sy
 8015e6c:	f3bf 8f4f 	dsb	sy
 8015e70:	b662      	cpsie	i
 8015e72:	607b      	str	r3, [r7, #4]
 8015e74:	e7fe      	b.n	8015e74 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e76:	4b0f      	ldr	r3, [pc, #60]	; (8015eb4 <vPortValidateInterruptPriority+0x7c>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015e7e:	4b0e      	ldr	r3, [pc, #56]	; (8015eb8 <vPortValidateInterruptPriority+0x80>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d90b      	bls.n	8015e9e <vPortValidateInterruptPriority+0x66>
 8015e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e8a:	b672      	cpsid	i
 8015e8c:	f383 8811 	msr	BASEPRI, r3
 8015e90:	f3bf 8f6f 	isb	sy
 8015e94:	f3bf 8f4f 	dsb	sy
 8015e98:	b662      	cpsie	i
 8015e9a:	603b      	str	r3, [r7, #0]
 8015e9c:	e7fe      	b.n	8015e9c <vPortValidateInterruptPriority+0x64>
	}
 8015e9e:	bf00      	nop
 8015ea0:	3714      	adds	r7, #20
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea8:	4770      	bx	lr
 8015eaa:	bf00      	nop
 8015eac:	e000e3f0 	.word	0xe000e3f0
 8015eb0:	20001050 	.word	0x20001050
 8015eb4:	e000ed0c 	.word	0xe000ed0c
 8015eb8:	20001054 	.word	0x20001054

08015ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b08a      	sub	sp, #40	; 0x28
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015ec8:	f7fe fc8e 	bl	80147e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ecc:	4b5a      	ldr	r3, [pc, #360]	; (8016038 <pvPortMalloc+0x17c>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d101      	bne.n	8015ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ed4:	f000 f916 	bl	8016104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ed8:	4b58      	ldr	r3, [pc, #352]	; (801603c <pvPortMalloc+0x180>)
 8015eda:	681a      	ldr	r2, [r3, #0]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	4013      	ands	r3, r2
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	f040 8090 	bne.w	8016006 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d01e      	beq.n	8015f2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8015eec:	2208      	movs	r2, #8
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	4413      	add	r3, r2
 8015ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f003 0307 	and.w	r3, r3, #7
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d015      	beq.n	8015f2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f023 0307 	bic.w	r3, r3, #7
 8015f04:	3308      	adds	r3, #8
 8015f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f003 0307 	and.w	r3, r3, #7
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d00b      	beq.n	8015f2a <pvPortMalloc+0x6e>
 8015f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f16:	b672      	cpsid	i
 8015f18:	f383 8811 	msr	BASEPRI, r3
 8015f1c:	f3bf 8f6f 	isb	sy
 8015f20:	f3bf 8f4f 	dsb	sy
 8015f24:	b662      	cpsie	i
 8015f26:	617b      	str	r3, [r7, #20]
 8015f28:	e7fe      	b.n	8015f28 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d06a      	beq.n	8016006 <pvPortMalloc+0x14a>
 8015f30:	4b43      	ldr	r3, [pc, #268]	; (8016040 <pvPortMalloc+0x184>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	687a      	ldr	r2, [r7, #4]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d865      	bhi.n	8016006 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f3a:	4b42      	ldr	r3, [pc, #264]	; (8016044 <pvPortMalloc+0x188>)
 8015f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f3e:	4b41      	ldr	r3, [pc, #260]	; (8016044 <pvPortMalloc+0x188>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f44:	e004      	b.n	8015f50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d903      	bls.n	8015f62 <pvPortMalloc+0xa6>
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1f1      	bne.n	8015f46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f62:	4b35      	ldr	r3, [pc, #212]	; (8016038 <pvPortMalloc+0x17c>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d04c      	beq.n	8016006 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	2208      	movs	r2, #8
 8015f72:	4413      	add	r3, r2
 8015f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	6a3b      	ldr	r3, [r7, #32]
 8015f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f80:	685a      	ldr	r2, [r3, #4]
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	1ad2      	subs	r2, r2, r3
 8015f86:	2308      	movs	r3, #8
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	429a      	cmp	r2, r3
 8015f8c:	d920      	bls.n	8015fd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	4413      	add	r3, r2
 8015f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	f003 0307 	and.w	r3, r3, #7
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00b      	beq.n	8015fb8 <pvPortMalloc+0xfc>
 8015fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa4:	b672      	cpsid	i
 8015fa6:	f383 8811 	msr	BASEPRI, r3
 8015faa:	f3bf 8f6f 	isb	sy
 8015fae:	f3bf 8f4f 	dsb	sy
 8015fb2:	b662      	cpsie	i
 8015fb4:	613b      	str	r3, [r7, #16]
 8015fb6:	e7fe      	b.n	8015fb6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fba:	685a      	ldr	r2, [r3, #4]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	1ad2      	subs	r2, r2, r3
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015fca:	69b8      	ldr	r0, [r7, #24]
 8015fcc:	f000 f8fc 	bl	80161c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015fd0:	4b1b      	ldr	r3, [pc, #108]	; (8016040 <pvPortMalloc+0x184>)
 8015fd2:	681a      	ldr	r2, [r3, #0]
 8015fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	1ad3      	subs	r3, r2, r3
 8015fda:	4a19      	ldr	r2, [pc, #100]	; (8016040 <pvPortMalloc+0x184>)
 8015fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015fde:	4b18      	ldr	r3, [pc, #96]	; (8016040 <pvPortMalloc+0x184>)
 8015fe0:	681a      	ldr	r2, [r3, #0]
 8015fe2:	4b19      	ldr	r3, [pc, #100]	; (8016048 <pvPortMalloc+0x18c>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d203      	bcs.n	8015ff2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fea:	4b15      	ldr	r3, [pc, #84]	; (8016040 <pvPortMalloc+0x184>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	4a16      	ldr	r2, [pc, #88]	; (8016048 <pvPortMalloc+0x18c>)
 8015ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff4:	685a      	ldr	r2, [r3, #4]
 8015ff6:	4b11      	ldr	r3, [pc, #68]	; (801603c <pvPortMalloc+0x180>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	431a      	orrs	r2, r3
 8015ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016002:	2200      	movs	r2, #0
 8016004:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016006:	f7fe fbfd 	bl	8014804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801600a:	69fb      	ldr	r3, [r7, #28]
 801600c:	f003 0307 	and.w	r3, r3, #7
 8016010:	2b00      	cmp	r3, #0
 8016012:	d00b      	beq.n	801602c <pvPortMalloc+0x170>
 8016014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016018:	b672      	cpsid	i
 801601a:	f383 8811 	msr	BASEPRI, r3
 801601e:	f3bf 8f6f 	isb	sy
 8016022:	f3bf 8f4f 	dsb	sy
 8016026:	b662      	cpsie	i
 8016028:	60fb      	str	r3, [r7, #12]
 801602a:	e7fe      	b.n	801602a <pvPortMalloc+0x16e>
	return pvReturn;
 801602c:	69fb      	ldr	r3, [r7, #28]
}
 801602e:	4618      	mov	r0, r3
 8016030:	3728      	adds	r7, #40	; 0x28
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}
 8016036:	bf00      	nop
 8016038:	20008860 	.word	0x20008860
 801603c:	2000886c 	.word	0x2000886c
 8016040:	20008864 	.word	0x20008864
 8016044:	20008858 	.word	0x20008858
 8016048:	20008868 	.word	0x20008868

0801604c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d04a      	beq.n	80160f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801605e:	2308      	movs	r3, #8
 8016060:	425b      	negs	r3, r3
 8016062:	697a      	ldr	r2, [r7, #20]
 8016064:	4413      	add	r3, r2
 8016066:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016068:	697b      	ldr	r3, [r7, #20]
 801606a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	685a      	ldr	r2, [r3, #4]
 8016070:	4b22      	ldr	r3, [pc, #136]	; (80160fc <vPortFree+0xb0>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4013      	ands	r3, r2
 8016076:	2b00      	cmp	r3, #0
 8016078:	d10b      	bne.n	8016092 <vPortFree+0x46>
 801607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801607e:	b672      	cpsid	i
 8016080:	f383 8811 	msr	BASEPRI, r3
 8016084:	f3bf 8f6f 	isb	sy
 8016088:	f3bf 8f4f 	dsb	sy
 801608c:	b662      	cpsie	i
 801608e:	60fb      	str	r3, [r7, #12]
 8016090:	e7fe      	b.n	8016090 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d00b      	beq.n	80160b2 <vPortFree+0x66>
 801609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801609e:	b672      	cpsid	i
 80160a0:	f383 8811 	msr	BASEPRI, r3
 80160a4:	f3bf 8f6f 	isb	sy
 80160a8:	f3bf 8f4f 	dsb	sy
 80160ac:	b662      	cpsie	i
 80160ae:	60bb      	str	r3, [r7, #8]
 80160b0:	e7fe      	b.n	80160b0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	685a      	ldr	r2, [r3, #4]
 80160b6:	4b11      	ldr	r3, [pc, #68]	; (80160fc <vPortFree+0xb0>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	4013      	ands	r3, r2
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d019      	beq.n	80160f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d115      	bne.n	80160f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	685a      	ldr	r2, [r3, #4]
 80160cc:	4b0b      	ldr	r3, [pc, #44]	; (80160fc <vPortFree+0xb0>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	43db      	mvns	r3, r3
 80160d2:	401a      	ands	r2, r3
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80160d8:	f7fe fb86 	bl	80147e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	685a      	ldr	r2, [r3, #4]
 80160e0:	4b07      	ldr	r3, [pc, #28]	; (8016100 <vPortFree+0xb4>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	4413      	add	r3, r2
 80160e6:	4a06      	ldr	r2, [pc, #24]	; (8016100 <vPortFree+0xb4>)
 80160e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160ea:	6938      	ldr	r0, [r7, #16]
 80160ec:	f000 f86c 	bl	80161c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80160f0:	f7fe fb88 	bl	8014804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160f4:	bf00      	nop
 80160f6:	3718      	adds	r7, #24
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}
 80160fc:	2000886c 	.word	0x2000886c
 8016100:	20008864 	.word	0x20008864

08016104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016104:	b480      	push	{r7}
 8016106:	b085      	sub	sp, #20
 8016108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801610a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801610e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016110:	4b27      	ldr	r3, [pc, #156]	; (80161b0 <prvHeapInit+0xac>)
 8016112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	f003 0307 	and.w	r3, r3, #7
 801611a:	2b00      	cmp	r3, #0
 801611c:	d00c      	beq.n	8016138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	3307      	adds	r3, #7
 8016122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	f023 0307 	bic.w	r3, r3, #7
 801612a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	1ad3      	subs	r3, r2, r3
 8016132:	4a1f      	ldr	r2, [pc, #124]	; (80161b0 <prvHeapInit+0xac>)
 8016134:	4413      	add	r3, r2
 8016136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801613c:	4a1d      	ldr	r2, [pc, #116]	; (80161b4 <prvHeapInit+0xb0>)
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016142:	4b1c      	ldr	r3, [pc, #112]	; (80161b4 <prvHeapInit+0xb0>)
 8016144:	2200      	movs	r2, #0
 8016146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	4413      	add	r3, r2
 801614e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016150:	2208      	movs	r2, #8
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	1a9b      	subs	r3, r3, r2
 8016156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f023 0307 	bic.w	r3, r3, #7
 801615e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	4a15      	ldr	r2, [pc, #84]	; (80161b8 <prvHeapInit+0xb4>)
 8016164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016166:	4b14      	ldr	r3, [pc, #80]	; (80161b8 <prvHeapInit+0xb4>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	2200      	movs	r2, #0
 801616c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801616e:	4b12      	ldr	r3, [pc, #72]	; (80161b8 <prvHeapInit+0xb4>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	2200      	movs	r2, #0
 8016174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	68fa      	ldr	r2, [r7, #12]
 801617e:	1ad2      	subs	r2, r2, r3
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016184:	4b0c      	ldr	r3, [pc, #48]	; (80161b8 <prvHeapInit+0xb4>)
 8016186:	681a      	ldr	r2, [r3, #0]
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	4a0a      	ldr	r2, [pc, #40]	; (80161bc <prvHeapInit+0xb8>)
 8016192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	4a09      	ldr	r2, [pc, #36]	; (80161c0 <prvHeapInit+0xbc>)
 801619a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801619c:	4b09      	ldr	r3, [pc, #36]	; (80161c4 <prvHeapInit+0xc0>)
 801619e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80161a2:	601a      	str	r2, [r3, #0]
}
 80161a4:	bf00      	nop
 80161a6:	3714      	adds	r7, #20
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr
 80161b0:	20001058 	.word	0x20001058
 80161b4:	20008858 	.word	0x20008858
 80161b8:	20008860 	.word	0x20008860
 80161bc:	20008868 	.word	0x20008868
 80161c0:	20008864 	.word	0x20008864
 80161c4:	2000886c 	.word	0x2000886c

080161c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80161c8:	b480      	push	{r7}
 80161ca:	b085      	sub	sp, #20
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80161d0:	4b28      	ldr	r3, [pc, #160]	; (8016274 <prvInsertBlockIntoFreeList+0xac>)
 80161d2:	60fb      	str	r3, [r7, #12]
 80161d4:	e002      	b.n	80161dc <prvInsertBlockIntoFreeList+0x14>
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	60fb      	str	r3, [r7, #12]
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d8f7      	bhi.n	80161d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	685b      	ldr	r3, [r3, #4]
 80161ee:	68ba      	ldr	r2, [r7, #8]
 80161f0:	4413      	add	r3, r2
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	429a      	cmp	r2, r3
 80161f6:	d108      	bne.n	801620a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	685a      	ldr	r2, [r3, #4]
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	441a      	add	r2, r3
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	685b      	ldr	r3, [r3, #4]
 8016212:	68ba      	ldr	r2, [r7, #8]
 8016214:	441a      	add	r2, r3
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	429a      	cmp	r2, r3
 801621c:	d118      	bne.n	8016250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	4b15      	ldr	r3, [pc, #84]	; (8016278 <prvInsertBlockIntoFreeList+0xb0>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	429a      	cmp	r2, r3
 8016228:	d00d      	beq.n	8016246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	685a      	ldr	r2, [r3, #4]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	441a      	add	r2, r3
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	681a      	ldr	r2, [r3, #0]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	601a      	str	r2, [r3, #0]
 8016244:	e008      	b.n	8016258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016246:	4b0c      	ldr	r3, [pc, #48]	; (8016278 <prvInsertBlockIntoFreeList+0xb0>)
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	601a      	str	r2, [r3, #0]
 801624e:	e003      	b.n	8016258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681a      	ldr	r2, [r3, #0]
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016258:	68fa      	ldr	r2, [r7, #12]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	429a      	cmp	r2, r3
 801625e:	d002      	beq.n	8016266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016266:	bf00      	nop
 8016268:	3714      	adds	r7, #20
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop
 8016274:	20008858 	.word	0x20008858
 8016278:	20008860 	.word	0x20008860

0801627c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016280:	2200      	movs	r2, #0
 8016282:	4912      	ldr	r1, [pc, #72]	; (80162cc <MX_USB_DEVICE_Init+0x50>)
 8016284:	4812      	ldr	r0, [pc, #72]	; (80162d0 <MX_USB_DEVICE_Init+0x54>)
 8016286:	f7f7 ff29 	bl	800e0dc <USBD_Init>
 801628a:	4603      	mov	r3, r0
 801628c:	2b00      	cmp	r3, #0
 801628e:	d001      	beq.n	8016294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016290:	f7eb fb44 	bl	800191c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016294:	490f      	ldr	r1, [pc, #60]	; (80162d4 <MX_USB_DEVICE_Init+0x58>)
 8016296:	480e      	ldr	r0, [pc, #56]	; (80162d0 <MX_USB_DEVICE_Init+0x54>)
 8016298:	f7f7 ff56 	bl	800e148 <USBD_RegisterClass>
 801629c:	4603      	mov	r3, r0
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d001      	beq.n	80162a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162a2:	f7eb fb3b 	bl	800191c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80162a6:	490c      	ldr	r1, [pc, #48]	; (80162d8 <MX_USB_DEVICE_Init+0x5c>)
 80162a8:	4809      	ldr	r0, [pc, #36]	; (80162d0 <MX_USB_DEVICE_Init+0x54>)
 80162aa:	f7f7 fe7b 	bl	800dfa4 <USBD_CDC_RegisterInterface>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d001      	beq.n	80162b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80162b4:	f7eb fb32 	bl	800191c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80162b8:	4805      	ldr	r0, [pc, #20]	; (80162d0 <MX_USB_DEVICE_Init+0x54>)
 80162ba:	f7f7 ff66 	bl	800e18a <USBD_Start>
 80162be:	4603      	mov	r3, r0
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d001      	beq.n	80162c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80162c4:	f7eb fb2a 	bl	800191c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80162c8:	bf00      	nop
 80162ca:	bd80      	pop	{r7, pc}
 80162cc:	20000134 	.word	0x20000134
 80162d0:	200157f0 	.word	0x200157f0
 80162d4:	20000018 	.word	0x20000018
 80162d8:	20000120 	.word	0x20000120

080162dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80162e0:	2200      	movs	r2, #0
 80162e2:	4905      	ldr	r1, [pc, #20]	; (80162f8 <CDC_Init_FS+0x1c>)
 80162e4:	4805      	ldr	r0, [pc, #20]	; (80162fc <CDC_Init_FS+0x20>)
 80162e6:	f7f7 fe72 	bl	800dfce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80162ea:	4905      	ldr	r1, [pc, #20]	; (8016300 <CDC_Init_FS+0x24>)
 80162ec:	4803      	ldr	r0, [pc, #12]	; (80162fc <CDC_Init_FS+0x20>)
 80162ee:	f7f7 fe87 	bl	800e000 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80162f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	200162c0 	.word	0x200162c0
 80162fc:	200157f0 	.word	0x200157f0
 8016300:	20015ac0 	.word	0x20015ac0

08016304 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016304:	b480      	push	{r7}
 8016306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801630a:	4618      	mov	r0, r3
 801630c:	46bd      	mov	sp, r7
 801630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016312:	4770      	bx	lr

08016314 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016314:	b480      	push	{r7}
 8016316:	b083      	sub	sp, #12
 8016318:	af00      	add	r7, sp, #0
 801631a:	4603      	mov	r3, r0
 801631c:	6039      	str	r1, [r7, #0]
 801631e:	71fb      	strb	r3, [r7, #7]
 8016320:	4613      	mov	r3, r2
 8016322:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016324:	79fb      	ldrb	r3, [r7, #7]
 8016326:	2b23      	cmp	r3, #35	; 0x23
 8016328:	d84a      	bhi.n	80163c0 <CDC_Control_FS+0xac>
 801632a:	a201      	add	r2, pc, #4	; (adr r2, 8016330 <CDC_Control_FS+0x1c>)
 801632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016330:	080163c1 	.word	0x080163c1
 8016334:	080163c1 	.word	0x080163c1
 8016338:	080163c1 	.word	0x080163c1
 801633c:	080163c1 	.word	0x080163c1
 8016340:	080163c1 	.word	0x080163c1
 8016344:	080163c1 	.word	0x080163c1
 8016348:	080163c1 	.word	0x080163c1
 801634c:	080163c1 	.word	0x080163c1
 8016350:	080163c1 	.word	0x080163c1
 8016354:	080163c1 	.word	0x080163c1
 8016358:	080163c1 	.word	0x080163c1
 801635c:	080163c1 	.word	0x080163c1
 8016360:	080163c1 	.word	0x080163c1
 8016364:	080163c1 	.word	0x080163c1
 8016368:	080163c1 	.word	0x080163c1
 801636c:	080163c1 	.word	0x080163c1
 8016370:	080163c1 	.word	0x080163c1
 8016374:	080163c1 	.word	0x080163c1
 8016378:	080163c1 	.word	0x080163c1
 801637c:	080163c1 	.word	0x080163c1
 8016380:	080163c1 	.word	0x080163c1
 8016384:	080163c1 	.word	0x080163c1
 8016388:	080163c1 	.word	0x080163c1
 801638c:	080163c1 	.word	0x080163c1
 8016390:	080163c1 	.word	0x080163c1
 8016394:	080163c1 	.word	0x080163c1
 8016398:	080163c1 	.word	0x080163c1
 801639c:	080163c1 	.word	0x080163c1
 80163a0:	080163c1 	.word	0x080163c1
 80163a4:	080163c1 	.word	0x080163c1
 80163a8:	080163c1 	.word	0x080163c1
 80163ac:	080163c1 	.word	0x080163c1
 80163b0:	080163c1 	.word	0x080163c1
 80163b4:	080163c1 	.word	0x080163c1
 80163b8:	080163c1 	.word	0x080163c1
 80163bc:	080163c1 	.word	0x080163c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80163c0:	bf00      	nop
  }

  return (USBD_OK);
 80163c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	370c      	adds	r7, #12
 80163c8:	46bd      	mov	sp, r7
 80163ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ce:	4770      	bx	lr

080163d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80163da:	6879      	ldr	r1, [r7, #4]
 80163dc:	4805      	ldr	r0, [pc, #20]	; (80163f4 <CDC_Receive_FS+0x24>)
 80163de:	f7f7 fe0f 	bl	800e000 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80163e2:	4804      	ldr	r0, [pc, #16]	; (80163f4 <CDC_Receive_FS+0x24>)
 80163e4:	f7f7 fe50 	bl	800e088 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80163e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3708      	adds	r7, #8
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	200157f0 	.word	0x200157f0

080163f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b084      	sub	sp, #16
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	460b      	mov	r3, r1
 8016402:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016404:	2300      	movs	r3, #0
 8016406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016408:	4b0d      	ldr	r3, [pc, #52]	; (8016440 <CDC_Transmit_FS+0x48>)
 801640a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801640e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016416:	2b00      	cmp	r3, #0
 8016418:	d001      	beq.n	801641e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801641a:	2301      	movs	r3, #1
 801641c:	e00b      	b.n	8016436 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801641e:	887b      	ldrh	r3, [r7, #2]
 8016420:	461a      	mov	r2, r3
 8016422:	6879      	ldr	r1, [r7, #4]
 8016424:	4806      	ldr	r0, [pc, #24]	; (8016440 <CDC_Transmit_FS+0x48>)
 8016426:	f7f7 fdd2 	bl	800dfce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801642a:	4805      	ldr	r0, [pc, #20]	; (8016440 <CDC_Transmit_FS+0x48>)
 801642c:	f7f7 fdfc 	bl	800e028 <USBD_CDC_TransmitPacket>
 8016430:	4603      	mov	r3, r0
 8016432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016434:	7bfb      	ldrb	r3, [r7, #15]
}
 8016436:	4618      	mov	r0, r3
 8016438:	3710      	adds	r7, #16
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	200157f0 	.word	0x200157f0

08016444 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016444:	b480      	push	{r7}
 8016446:	b087      	sub	sp, #28
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	4613      	mov	r3, r2
 8016450:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016452:	2300      	movs	r3, #0
 8016454:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801645a:	4618      	mov	r0, r3
 801645c:	371c      	adds	r7, #28
 801645e:	46bd      	mov	sp, r7
 8016460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016464:	4770      	bx	lr
	...

08016468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016468:	b480      	push	{r7}
 801646a:	b083      	sub	sp, #12
 801646c:	af00      	add	r7, sp, #0
 801646e:	4603      	mov	r3, r0
 8016470:	6039      	str	r1, [r7, #0]
 8016472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	2212      	movs	r2, #18
 8016478:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801647a:	4b03      	ldr	r3, [pc, #12]	; (8016488 <USBD_FS_DeviceDescriptor+0x20>)
}
 801647c:	4618      	mov	r0, r3
 801647e:	370c      	adds	r7, #12
 8016480:	46bd      	mov	sp, r7
 8016482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016486:	4770      	bx	lr
 8016488:	20000154 	.word	0x20000154

0801648c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801648c:	b480      	push	{r7}
 801648e:	b083      	sub	sp, #12
 8016490:	af00      	add	r7, sp, #0
 8016492:	4603      	mov	r3, r0
 8016494:	6039      	str	r1, [r7, #0]
 8016496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	2204      	movs	r2, #4
 801649c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801649e:	4b03      	ldr	r3, [pc, #12]	; (80164ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	370c      	adds	r7, #12
 80164a4:	46bd      	mov	sp, r7
 80164a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164aa:	4770      	bx	lr
 80164ac:	20000174 	.word	0x20000174

080164b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	4603      	mov	r3, r0
 80164b8:	6039      	str	r1, [r7, #0]
 80164ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80164bc:	79fb      	ldrb	r3, [r7, #7]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d105      	bne.n	80164ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80164c2:	683a      	ldr	r2, [r7, #0]
 80164c4:	4907      	ldr	r1, [pc, #28]	; (80164e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80164c6:	4808      	ldr	r0, [pc, #32]	; (80164e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80164c8:	f7f8 fe57 	bl	800f17a <USBD_GetString>
 80164cc:	e004      	b.n	80164d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	4904      	ldr	r1, [pc, #16]	; (80164e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80164d2:	4805      	ldr	r0, [pc, #20]	; (80164e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80164d4:	f7f8 fe51 	bl	800f17a <USBD_GetString>
  }
  return USBD_StrDesc;
 80164d8:	4b02      	ldr	r3, [pc, #8]	; (80164e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3708      	adds	r7, #8
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}
 80164e2:	bf00      	nop
 80164e4:	20016ac0 	.word	0x20016ac0
 80164e8:	08019fd8 	.word	0x08019fd8

080164ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	4603      	mov	r3, r0
 80164f4:	6039      	str	r1, [r7, #0]
 80164f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80164f8:	683a      	ldr	r2, [r7, #0]
 80164fa:	4904      	ldr	r1, [pc, #16]	; (801650c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80164fc:	4804      	ldr	r0, [pc, #16]	; (8016510 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80164fe:	f7f8 fe3c 	bl	800f17a <USBD_GetString>
  return USBD_StrDesc;
 8016502:	4b02      	ldr	r3, [pc, #8]	; (801650c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016504:	4618      	mov	r0, r3
 8016506:	3708      	adds	r7, #8
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}
 801650c:	20016ac0 	.word	0x20016ac0
 8016510:	08019ff0 	.word	0x08019ff0

08016514 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af00      	add	r7, sp, #0
 801651a:	4603      	mov	r3, r0
 801651c:	6039      	str	r1, [r7, #0]
 801651e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	221a      	movs	r2, #26
 8016524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016526:	f000 f855 	bl	80165d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801652a:	4b02      	ldr	r3, [pc, #8]	; (8016534 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801652c:	4618      	mov	r0, r3
 801652e:	3708      	adds	r7, #8
 8016530:	46bd      	mov	sp, r7
 8016532:	bd80      	pop	{r7, pc}
 8016534:	20000178 	.word	0x20000178

08016538 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
 801653e:	4603      	mov	r3, r0
 8016540:	6039      	str	r1, [r7, #0]
 8016542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016544:	79fb      	ldrb	r3, [r7, #7]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d105      	bne.n	8016556 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801654a:	683a      	ldr	r2, [r7, #0]
 801654c:	4907      	ldr	r1, [pc, #28]	; (801656c <USBD_FS_ConfigStrDescriptor+0x34>)
 801654e:	4808      	ldr	r0, [pc, #32]	; (8016570 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016550:	f7f8 fe13 	bl	800f17a <USBD_GetString>
 8016554:	e004      	b.n	8016560 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016556:	683a      	ldr	r2, [r7, #0]
 8016558:	4904      	ldr	r1, [pc, #16]	; (801656c <USBD_FS_ConfigStrDescriptor+0x34>)
 801655a:	4805      	ldr	r0, [pc, #20]	; (8016570 <USBD_FS_ConfigStrDescriptor+0x38>)
 801655c:	f7f8 fe0d 	bl	800f17a <USBD_GetString>
  }
  return USBD_StrDesc;
 8016560:	4b02      	ldr	r3, [pc, #8]	; (801656c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016562:	4618      	mov	r0, r3
 8016564:	3708      	adds	r7, #8
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	20016ac0 	.word	0x20016ac0
 8016570:	0801a004 	.word	0x0801a004

08016574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	4603      	mov	r3, r0
 801657c:	6039      	str	r1, [r7, #0]
 801657e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016580:	79fb      	ldrb	r3, [r7, #7]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d105      	bne.n	8016592 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016586:	683a      	ldr	r2, [r7, #0]
 8016588:	4907      	ldr	r1, [pc, #28]	; (80165a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801658a:	4808      	ldr	r0, [pc, #32]	; (80165ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 801658c:	f7f8 fdf5 	bl	800f17a <USBD_GetString>
 8016590:	e004      	b.n	801659c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	4904      	ldr	r1, [pc, #16]	; (80165a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016596:	4805      	ldr	r0, [pc, #20]	; (80165ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016598:	f7f8 fdef 	bl	800f17a <USBD_GetString>
  }
  return USBD_StrDesc;
 801659c:	4b02      	ldr	r3, [pc, #8]	; (80165a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801659e:	4618      	mov	r0, r3
 80165a0:	3708      	adds	r7, #8
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	20016ac0 	.word	0x20016ac0
 80165ac:	0801a010 	.word	0x0801a010

080165b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165b0:	b480      	push	{r7}
 80165b2:	b083      	sub	sp, #12
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	4603      	mov	r3, r0
 80165b8:	6039      	str	r1, [r7, #0]
 80165ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	220c      	movs	r2, #12
 80165c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80165c2:	4b03      	ldr	r3, [pc, #12]	; (80165d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	370c      	adds	r7, #12
 80165c8:	46bd      	mov	sp, r7
 80165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ce:	4770      	bx	lr
 80165d0:	20000168 	.word	0x20000168

080165d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80165da:	4b0f      	ldr	r3, [pc, #60]	; (8016618 <Get_SerialNum+0x44>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80165e0:	4b0e      	ldr	r3, [pc, #56]	; (801661c <Get_SerialNum+0x48>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80165e6:	4b0e      	ldr	r3, [pc, #56]	; (8016620 <Get_SerialNum+0x4c>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80165ec:	68fa      	ldr	r2, [r7, #12]
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	4413      	add	r3, r2
 80165f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d009      	beq.n	801660e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80165fa:	2208      	movs	r2, #8
 80165fc:	4909      	ldr	r1, [pc, #36]	; (8016624 <Get_SerialNum+0x50>)
 80165fe:	68f8      	ldr	r0, [r7, #12]
 8016600:	f000 f814 	bl	801662c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016604:	2204      	movs	r2, #4
 8016606:	4908      	ldr	r1, [pc, #32]	; (8016628 <Get_SerialNum+0x54>)
 8016608:	68b8      	ldr	r0, [r7, #8]
 801660a:	f000 f80f 	bl	801662c <IntToUnicode>
  }
}
 801660e:	bf00      	nop
 8016610:	3710      	adds	r7, #16
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	1ff0f420 	.word	0x1ff0f420
 801661c:	1ff0f424 	.word	0x1ff0f424
 8016620:	1ff0f428 	.word	0x1ff0f428
 8016624:	2000017a 	.word	0x2000017a
 8016628:	2000018a 	.word	0x2000018a

0801662c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801662c:	b480      	push	{r7}
 801662e:	b087      	sub	sp, #28
 8016630:	af00      	add	r7, sp, #0
 8016632:	60f8      	str	r0, [r7, #12]
 8016634:	60b9      	str	r1, [r7, #8]
 8016636:	4613      	mov	r3, r2
 8016638:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801663a:	2300      	movs	r3, #0
 801663c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801663e:	2300      	movs	r3, #0
 8016640:	75fb      	strb	r3, [r7, #23]
 8016642:	e027      	b.n	8016694 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	0f1b      	lsrs	r3, r3, #28
 8016648:	2b09      	cmp	r3, #9
 801664a:	d80b      	bhi.n	8016664 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	0f1b      	lsrs	r3, r3, #28
 8016650:	b2da      	uxtb	r2, r3
 8016652:	7dfb      	ldrb	r3, [r7, #23]
 8016654:	005b      	lsls	r3, r3, #1
 8016656:	4619      	mov	r1, r3
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	440b      	add	r3, r1
 801665c:	3230      	adds	r2, #48	; 0x30
 801665e:	b2d2      	uxtb	r2, r2
 8016660:	701a      	strb	r2, [r3, #0]
 8016662:	e00a      	b.n	801667a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	0f1b      	lsrs	r3, r3, #28
 8016668:	b2da      	uxtb	r2, r3
 801666a:	7dfb      	ldrb	r3, [r7, #23]
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	4619      	mov	r1, r3
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	440b      	add	r3, r1
 8016674:	3237      	adds	r2, #55	; 0x37
 8016676:	b2d2      	uxtb	r2, r2
 8016678:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	011b      	lsls	r3, r3, #4
 801667e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016680:	7dfb      	ldrb	r3, [r7, #23]
 8016682:	005b      	lsls	r3, r3, #1
 8016684:	3301      	adds	r3, #1
 8016686:	68ba      	ldr	r2, [r7, #8]
 8016688:	4413      	add	r3, r2
 801668a:	2200      	movs	r2, #0
 801668c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801668e:	7dfb      	ldrb	r3, [r7, #23]
 8016690:	3301      	adds	r3, #1
 8016692:	75fb      	strb	r3, [r7, #23]
 8016694:	7dfa      	ldrb	r2, [r7, #23]
 8016696:	79fb      	ldrb	r3, [r7, #7]
 8016698:	429a      	cmp	r2, r3
 801669a:	d3d3      	bcc.n	8016644 <IntToUnicode+0x18>
  }
}
 801669c:	bf00      	nop
 801669e:	371c      	adds	r7, #28
 80166a0:	46bd      	mov	sp, r7
 80166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a6:	4770      	bx	lr

080166a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b08a      	sub	sp, #40	; 0x28
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80166b0:	f107 0314 	add.w	r3, r7, #20
 80166b4:	2200      	movs	r2, #0
 80166b6:	601a      	str	r2, [r3, #0]
 80166b8:	605a      	str	r2, [r3, #4]
 80166ba:	609a      	str	r2, [r3, #8]
 80166bc:	60da      	str	r2, [r3, #12]
 80166be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80166c8:	d13c      	bne.n	8016744 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80166ca:	4b20      	ldr	r3, [pc, #128]	; (801674c <HAL_PCD_MspInit+0xa4>)
 80166cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166ce:	4a1f      	ldr	r2, [pc, #124]	; (801674c <HAL_PCD_MspInit+0xa4>)
 80166d0:	f043 0301 	orr.w	r3, r3, #1
 80166d4:	6313      	str	r3, [r2, #48]	; 0x30
 80166d6:	4b1d      	ldr	r3, [pc, #116]	; (801674c <HAL_PCD_MspInit+0xa4>)
 80166d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166da:	f003 0301 	and.w	r3, r3, #1
 80166de:	613b      	str	r3, [r7, #16]
 80166e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80166e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80166e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166e8:	2302      	movs	r3, #2
 80166ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166ec:	2300      	movs	r3, #0
 80166ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166f0:	2303      	movs	r3, #3
 80166f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80166f4:	230a      	movs	r3, #10
 80166f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80166f8:	f107 0314 	add.w	r3, r7, #20
 80166fc:	4619      	mov	r1, r3
 80166fe:	4814      	ldr	r0, [pc, #80]	; (8016750 <HAL_PCD_MspInit+0xa8>)
 8016700:	f7ef f92c 	bl	800595c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016704:	4b11      	ldr	r3, [pc, #68]	; (801674c <HAL_PCD_MspInit+0xa4>)
 8016706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016708:	4a10      	ldr	r2, [pc, #64]	; (801674c <HAL_PCD_MspInit+0xa4>)
 801670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801670e:	6353      	str	r3, [r2, #52]	; 0x34
 8016710:	4b0e      	ldr	r3, [pc, #56]	; (801674c <HAL_PCD_MspInit+0xa4>)
 8016712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016718:	60fb      	str	r3, [r7, #12]
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	4b0b      	ldr	r3, [pc, #44]	; (801674c <HAL_PCD_MspInit+0xa4>)
 801671e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016720:	4a0a      	ldr	r2, [pc, #40]	; (801674c <HAL_PCD_MspInit+0xa4>)
 8016722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016726:	6453      	str	r3, [r2, #68]	; 0x44
 8016728:	4b08      	ldr	r3, [pc, #32]	; (801674c <HAL_PCD_MspInit+0xa4>)
 801672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801672c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016730:	60bb      	str	r3, [r7, #8]
 8016732:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016734:	2200      	movs	r2, #0
 8016736:	2105      	movs	r1, #5
 8016738:	2043      	movs	r0, #67	; 0x43
 801673a:	f7ee fd41 	bl	80051c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801673e:	2043      	movs	r0, #67	; 0x43
 8016740:	f7ee fd5a 	bl	80051f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016744:	bf00      	nop
 8016746:	3728      	adds	r7, #40	; 0x28
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	40023800 	.word	0x40023800
 8016750:	40020000 	.word	0x40020000

08016754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016768:	4619      	mov	r1, r3
 801676a:	4610      	mov	r0, r2
 801676c:	f7f7 fd58 	bl	800e220 <USBD_LL_SetupStage>
}
 8016770:	bf00      	nop
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	460b      	mov	r3, r1
 8016782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801678a:	78fa      	ldrb	r2, [r7, #3]
 801678c:	6879      	ldr	r1, [r7, #4]
 801678e:	4613      	mov	r3, r2
 8016790:	00db      	lsls	r3, r3, #3
 8016792:	1a9b      	subs	r3, r3, r2
 8016794:	009b      	lsls	r3, r3, #2
 8016796:	440b      	add	r3, r1
 8016798:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801679c:	681a      	ldr	r2, [r3, #0]
 801679e:	78fb      	ldrb	r3, [r7, #3]
 80167a0:	4619      	mov	r1, r3
 80167a2:	f7f7 fd90 	bl	800e2c6 <USBD_LL_DataOutStage>
}
 80167a6:	bf00      	nop
 80167a8:	3708      	adds	r7, #8
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}

080167ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ae:	b580      	push	{r7, lr}
 80167b0:	b082      	sub	sp, #8
 80167b2:	af00      	add	r7, sp, #0
 80167b4:	6078      	str	r0, [r7, #4]
 80167b6:	460b      	mov	r3, r1
 80167b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80167c0:	78fa      	ldrb	r2, [r7, #3]
 80167c2:	6879      	ldr	r1, [r7, #4]
 80167c4:	4613      	mov	r3, r2
 80167c6:	00db      	lsls	r3, r3, #3
 80167c8:	1a9b      	subs	r3, r3, r2
 80167ca:	009b      	lsls	r3, r3, #2
 80167cc:	440b      	add	r3, r1
 80167ce:	3348      	adds	r3, #72	; 0x48
 80167d0:	681a      	ldr	r2, [r3, #0]
 80167d2:	78fb      	ldrb	r3, [r7, #3]
 80167d4:	4619      	mov	r1, r3
 80167d6:	f7f7 fdd9 	bl	800e38c <USBD_LL_DataInStage>
}
 80167da:	bf00      	nop
 80167dc:	3708      	adds	r7, #8
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}

080167e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167e2:	b580      	push	{r7, lr}
 80167e4:	b082      	sub	sp, #8
 80167e6:	af00      	add	r7, sp, #0
 80167e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7f7 fedd 	bl	800e5b0 <USBD_LL_SOF>
}
 80167f6:	bf00      	nop
 80167f8:	3708      	adds	r7, #8
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}

080167fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80167fe:	b580      	push	{r7, lr}
 8016800:	b084      	sub	sp, #16
 8016802:	af00      	add	r7, sp, #0
 8016804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016806:	2301      	movs	r3, #1
 8016808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	68db      	ldr	r3, [r3, #12]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d102      	bne.n	8016818 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016812:	2300      	movs	r3, #0
 8016814:	73fb      	strb	r3, [r7, #15]
 8016816:	e008      	b.n	801682a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	68db      	ldr	r3, [r3, #12]
 801681c:	2b02      	cmp	r3, #2
 801681e:	d102      	bne.n	8016826 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016820:	2301      	movs	r3, #1
 8016822:	73fb      	strb	r3, [r7, #15]
 8016824:	e001      	b.n	801682a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016826:	f7eb f879 	bl	800191c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016830:	7bfa      	ldrb	r2, [r7, #15]
 8016832:	4611      	mov	r1, r2
 8016834:	4618      	mov	r0, r3
 8016836:	f7f7 fe80 	bl	800e53a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016840:	4618      	mov	r0, r3
 8016842:	f7f7 fe39 	bl	800e4b8 <USBD_LL_Reset>
}
 8016846:	bf00      	nop
 8016848:	3710      	adds	r7, #16
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
	...

08016850 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801685e:	4618      	mov	r0, r3
 8016860:	f7f7 fe7b 	bl	800e55a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	687a      	ldr	r2, [r7, #4]
 8016870:	6812      	ldr	r2, [r2, #0]
 8016872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016876:	f043 0301 	orr.w	r3, r3, #1
 801687a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6a1b      	ldr	r3, [r3, #32]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d005      	beq.n	8016890 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016884:	4b04      	ldr	r3, [pc, #16]	; (8016898 <HAL_PCD_SuspendCallback+0x48>)
 8016886:	691b      	ldr	r3, [r3, #16]
 8016888:	4a03      	ldr	r2, [pc, #12]	; (8016898 <HAL_PCD_SuspendCallback+0x48>)
 801688a:	f043 0306 	orr.w	r3, r3, #6
 801688e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016890:	bf00      	nop
 8016892:	3708      	adds	r7, #8
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}
 8016898:	e000ed00 	.word	0xe000ed00

0801689c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b082      	sub	sp, #8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7f7 fe6a 	bl	800e584 <USBD_LL_Resume>
}
 80168b0:	bf00      	nop
 80168b2:	3708      	adds	r7, #8
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
 80168c0:	460b      	mov	r3, r1
 80168c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80168ca:	78fa      	ldrb	r2, [r7, #3]
 80168cc:	4611      	mov	r1, r2
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7f7 fe95 	bl	800e5fe <USBD_LL_IsoOUTIncomplete>
}
 80168d4:	bf00      	nop
 80168d6:	3708      	adds	r7, #8
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}

080168dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	460b      	mov	r3, r1
 80168e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80168ee:	78fa      	ldrb	r2, [r7, #3]
 80168f0:	4611      	mov	r1, r2
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7f7 fe76 	bl	800e5e4 <USBD_LL_IsoINIncomplete>
}
 80168f8:	bf00      	nop
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801690e:	4618      	mov	r0, r3
 8016910:	f7f7 fe82 	bl	800e618 <USBD_LL_DevConnected>
}
 8016914:	bf00      	nop
 8016916:	3708      	adds	r7, #8
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801692a:	4618      	mov	r0, r3
 801692c:	f7f7 fe7f 	bl	800e62e <USBD_LL_DevDisconnected>
}
 8016930:	bf00      	nop
 8016932:	3708      	adds	r7, #8
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}

08016938 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d13c      	bne.n	80169c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016948:	4a20      	ldr	r2, [pc, #128]	; (80169cc <USBD_LL_Init+0x94>)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	4a1e      	ldr	r2, [pc, #120]	; (80169cc <USBD_LL_Init+0x94>)
 8016954:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016958:	4b1c      	ldr	r3, [pc, #112]	; (80169cc <USBD_LL_Init+0x94>)
 801695a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801695e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016960:	4b1a      	ldr	r3, [pc, #104]	; (80169cc <USBD_LL_Init+0x94>)
 8016962:	2206      	movs	r2, #6
 8016964:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016966:	4b19      	ldr	r3, [pc, #100]	; (80169cc <USBD_LL_Init+0x94>)
 8016968:	2202      	movs	r2, #2
 801696a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801696c:	4b17      	ldr	r3, [pc, #92]	; (80169cc <USBD_LL_Init+0x94>)
 801696e:	2200      	movs	r2, #0
 8016970:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016972:	4b16      	ldr	r3, [pc, #88]	; (80169cc <USBD_LL_Init+0x94>)
 8016974:	2202      	movs	r2, #2
 8016976:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016978:	4b14      	ldr	r3, [pc, #80]	; (80169cc <USBD_LL_Init+0x94>)
 801697a:	2200      	movs	r2, #0
 801697c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801697e:	4b13      	ldr	r3, [pc, #76]	; (80169cc <USBD_LL_Init+0x94>)
 8016980:	2200      	movs	r2, #0
 8016982:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016984:	4b11      	ldr	r3, [pc, #68]	; (80169cc <USBD_LL_Init+0x94>)
 8016986:	2200      	movs	r2, #0
 8016988:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801698a:	4b10      	ldr	r3, [pc, #64]	; (80169cc <USBD_LL_Init+0x94>)
 801698c:	2200      	movs	r2, #0
 801698e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016990:	4b0e      	ldr	r3, [pc, #56]	; (80169cc <USBD_LL_Init+0x94>)
 8016992:	2200      	movs	r2, #0
 8016994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016996:	480d      	ldr	r0, [pc, #52]	; (80169cc <USBD_LL_Init+0x94>)
 8016998:	f7ef f9a3 	bl	8005ce2 <HAL_PCD_Init>
 801699c:	4603      	mov	r3, r0
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d001      	beq.n	80169a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80169a2:	f7ea ffbb 	bl	800191c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80169a6:	2180      	movs	r1, #128	; 0x80
 80169a8:	4808      	ldr	r0, [pc, #32]	; (80169cc <USBD_LL_Init+0x94>)
 80169aa:	f7f0 fb24 	bl	8006ff6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80169ae:	2240      	movs	r2, #64	; 0x40
 80169b0:	2100      	movs	r1, #0
 80169b2:	4806      	ldr	r0, [pc, #24]	; (80169cc <USBD_LL_Init+0x94>)
 80169b4:	f7f0 fad8 	bl	8006f68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80169b8:	2280      	movs	r2, #128	; 0x80
 80169ba:	2101      	movs	r1, #1
 80169bc:	4803      	ldr	r0, [pc, #12]	; (80169cc <USBD_LL_Init+0x94>)
 80169be:	f7f0 fad3 	bl	8006f68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80169c2:	2300      	movs	r3, #0
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	3708      	adds	r7, #8
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	20016cc0 	.word	0x20016cc0

080169d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b084      	sub	sp, #16
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169d8:	2300      	movs	r3, #0
 80169da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169dc:	2300      	movs	r3, #0
 80169de:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7ef fa9f 	bl	8005f2a <HAL_PCD_Start>
 80169ec:	4603      	mov	r3, r0
 80169ee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80169f0:	7bfb      	ldrb	r3, [r7, #15]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f000 f97e 	bl	8016cf4 <USBD_Get_USB_Status>
 80169f8:	4603      	mov	r3, r0
 80169fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80169fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	3710      	adds	r7, #16
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}

08016a06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a06:	b580      	push	{r7, lr}
 8016a08:	b084      	sub	sp, #16
 8016a0a:	af00      	add	r7, sp, #0
 8016a0c:	6078      	str	r0, [r7, #4]
 8016a0e:	4608      	mov	r0, r1
 8016a10:	4611      	mov	r1, r2
 8016a12:	461a      	mov	r2, r3
 8016a14:	4603      	mov	r3, r0
 8016a16:	70fb      	strb	r3, [r7, #3]
 8016a18:	460b      	mov	r3, r1
 8016a1a:	70bb      	strb	r3, [r7, #2]
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a20:	2300      	movs	r3, #0
 8016a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a24:	2300      	movs	r3, #0
 8016a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016a2e:	78bb      	ldrb	r3, [r7, #2]
 8016a30:	883a      	ldrh	r2, [r7, #0]
 8016a32:	78f9      	ldrb	r1, [r7, #3]
 8016a34:	f7ef fe9f 	bl	8006776 <HAL_PCD_EP_Open>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a3c:	7bfb      	ldrb	r3, [r7, #15]
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f000 f958 	bl	8016cf4 <USBD_Get_USB_Status>
 8016a44:	4603      	mov	r3, r0
 8016a46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3710      	adds	r7, #16
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}

08016a52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a52:	b580      	push	{r7, lr}
 8016a54:	b084      	sub	sp, #16
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	6078      	str	r0, [r7, #4]
 8016a5a:	460b      	mov	r3, r1
 8016a5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a62:	2300      	movs	r3, #0
 8016a64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a6c:	78fa      	ldrb	r2, [r7, #3]
 8016a6e:	4611      	mov	r1, r2
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7ef fee8 	bl	8006846 <HAL_PCD_EP_Close>
 8016a76:	4603      	mov	r3, r0
 8016a78:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016a7a:	7bfb      	ldrb	r3, [r7, #15]
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f000 f939 	bl	8016cf4 <USBD_Get_USB_Status>
 8016a82:	4603      	mov	r3, r0
 8016a84:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3710      	adds	r7, #16
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}

08016a90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b084      	sub	sp, #16
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016aaa:	78fa      	ldrb	r2, [r7, #3]
 8016aac:	4611      	mov	r1, r2
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7ef ffc0 	bl	8006a34 <HAL_PCD_EP_SetStall>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ab8:	7bfb      	ldrb	r3, [r7, #15]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f000 f91a 	bl	8016cf4 <USBD_Get_USB_Status>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3710      	adds	r7, #16
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}

08016ace <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ace:	b580      	push	{r7, lr}
 8016ad0:	b084      	sub	sp, #16
 8016ad2:	af00      	add	r7, sp, #0
 8016ad4:	6078      	str	r0, [r7, #4]
 8016ad6:	460b      	mov	r3, r1
 8016ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ada:	2300      	movs	r3, #0
 8016adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ae8:	78fa      	ldrb	r2, [r7, #3]
 8016aea:	4611      	mov	r1, r2
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7f0 f805 	bl	8006afc <HAL_PCD_EP_ClrStall>
 8016af2:	4603      	mov	r3, r0
 8016af4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016af6:	7bfb      	ldrb	r3, [r7, #15]
 8016af8:	4618      	mov	r0, r3
 8016afa:	f000 f8fb 	bl	8016cf4 <USBD_Get_USB_Status>
 8016afe:	4603      	mov	r3, r0
 8016b00:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	3710      	adds	r7, #16
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b0c:	b480      	push	{r7}
 8016b0e:	b085      	sub	sp, #20
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	460b      	mov	r3, r1
 8016b16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b1e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	da0b      	bge.n	8016b40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016b28:	78fb      	ldrb	r3, [r7, #3]
 8016b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b2e:	68f9      	ldr	r1, [r7, #12]
 8016b30:	4613      	mov	r3, r2
 8016b32:	00db      	lsls	r3, r3, #3
 8016b34:	1a9b      	subs	r3, r3, r2
 8016b36:	009b      	lsls	r3, r3, #2
 8016b38:	440b      	add	r3, r1
 8016b3a:	333e      	adds	r3, #62	; 0x3e
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	e00b      	b.n	8016b58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016b40:	78fb      	ldrb	r3, [r7, #3]
 8016b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b46:	68f9      	ldr	r1, [r7, #12]
 8016b48:	4613      	mov	r3, r2
 8016b4a:	00db      	lsls	r3, r3, #3
 8016b4c:	1a9b      	subs	r3, r3, r2
 8016b4e:	009b      	lsls	r3, r3, #2
 8016b50:	440b      	add	r3, r1
 8016b52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3714      	adds	r7, #20
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b62:	4770      	bx	lr

08016b64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b70:	2300      	movs	r3, #0
 8016b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b74:	2300      	movs	r3, #0
 8016b76:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b7e:	78fa      	ldrb	r2, [r7, #3]
 8016b80:	4611      	mov	r1, r2
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7ef fdd2 	bl	800672c <HAL_PCD_SetAddress>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b8c:	7bfb      	ldrb	r3, [r7, #15]
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f000 f8b0 	bl	8016cf4 <USBD_Get_USB_Status>
 8016b94:	4603      	mov	r3, r0
 8016b96:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3710      	adds	r7, #16
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}

08016ba2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016ba2:	b580      	push	{r7, lr}
 8016ba4:	b086      	sub	sp, #24
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	60f8      	str	r0, [r7, #12]
 8016baa:	607a      	str	r2, [r7, #4]
 8016bac:	603b      	str	r3, [r7, #0]
 8016bae:	460b      	mov	r3, r1
 8016bb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016bc0:	7af9      	ldrb	r1, [r7, #11]
 8016bc2:	683b      	ldr	r3, [r7, #0]
 8016bc4:	687a      	ldr	r2, [r7, #4]
 8016bc6:	f7ef feeb 	bl	80069a0 <HAL_PCD_EP_Transmit>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016bce:	7dfb      	ldrb	r3, [r7, #23]
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f000 f88f 	bl	8016cf4 <USBD_Get_USB_Status>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016bda:	7dbb      	ldrb	r3, [r7, #22]
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	3718      	adds	r7, #24
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}

08016be4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b086      	sub	sp, #24
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	60f8      	str	r0, [r7, #12]
 8016bec:	607a      	str	r2, [r7, #4]
 8016bee:	603b      	str	r3, [r7, #0]
 8016bf0:	460b      	mov	r3, r1
 8016bf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c02:	7af9      	ldrb	r1, [r7, #11]
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	687a      	ldr	r2, [r7, #4]
 8016c08:	f7ef fe67 	bl	80068da <HAL_PCD_EP_Receive>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016c10:	7dfb      	ldrb	r3, [r7, #23]
 8016c12:	4618      	mov	r0, r3
 8016c14:	f000 f86e 	bl	8016cf4 <USBD_Get_USB_Status>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016c1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c1e:	4618      	mov	r0, r3
 8016c20:	3718      	adds	r7, #24
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd80      	pop	{r7, pc}

08016c26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c26:	b580      	push	{r7, lr}
 8016c28:	b082      	sub	sp, #8
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	6078      	str	r0, [r7, #4]
 8016c2e:	460b      	mov	r3, r1
 8016c30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c38:	78fa      	ldrb	r2, [r7, #3]
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7ef fe97 	bl	8006970 <HAL_PCD_EP_GetRxCount>
 8016c42:	4603      	mov	r3, r0
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3708      	adds	r7, #8
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}

08016c4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	460b      	mov	r3, r1
 8016c56:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016c58:	78fb      	ldrb	r3, [r7, #3]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d002      	beq.n	8016c64 <HAL_PCDEx_LPM_Callback+0x18>
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d01f      	beq.n	8016ca2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8016c62:	e03b      	b.n	8016cdc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6a1b      	ldr	r3, [r3, #32]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d007      	beq.n	8016c7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016c6c:	f000 f83c 	bl	8016ce8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c70:	4b1c      	ldr	r3, [pc, #112]	; (8016ce4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016c72:	691b      	ldr	r3, [r3, #16]
 8016c74:	4a1b      	ldr	r2, [pc, #108]	; (8016ce4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016c76:	f023 0306 	bic.w	r3, r3, #6
 8016c7a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	6812      	ldr	r2, [r2, #0]
 8016c8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c8e:	f023 0301 	bic.w	r3, r3, #1
 8016c92:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7f7 fc72 	bl	800e584 <USBD_LL_Resume>
    break;
 8016ca0:	e01c      	b.n	8016cdc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	6812      	ldr	r2, [r2, #0]
 8016cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016cb4:	f043 0301 	orr.w	r3, r3, #1
 8016cb8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7f7 fc4a 	bl	800e55a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	6a1b      	ldr	r3, [r3, #32]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d005      	beq.n	8016cda <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016cce:	4b05      	ldr	r3, [pc, #20]	; (8016ce4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016cd0:	691b      	ldr	r3, [r3, #16]
 8016cd2:	4a04      	ldr	r2, [pc, #16]	; (8016ce4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016cd4:	f043 0306 	orr.w	r3, r3, #6
 8016cd8:	6113      	str	r3, [r2, #16]
    break;   
 8016cda:	bf00      	nop
}
 8016cdc:	bf00      	nop
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	e000ed00 	.word	0xe000ed00

08016ce8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016cec:	f7ea fbdc 	bl	80014a8 <SystemClock_Config>
}
 8016cf0:	bf00      	nop
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016cf4:	b480      	push	{r7}
 8016cf6:	b085      	sub	sp, #20
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016d02:	79fb      	ldrb	r3, [r7, #7]
 8016d04:	2b03      	cmp	r3, #3
 8016d06:	d817      	bhi.n	8016d38 <USBD_Get_USB_Status+0x44>
 8016d08:	a201      	add	r2, pc, #4	; (adr r2, 8016d10 <USBD_Get_USB_Status+0x1c>)
 8016d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d0e:	bf00      	nop
 8016d10:	08016d21 	.word	0x08016d21
 8016d14:	08016d27 	.word	0x08016d27
 8016d18:	08016d2d 	.word	0x08016d2d
 8016d1c:	08016d33 	.word	0x08016d33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016d20:	2300      	movs	r3, #0
 8016d22:	73fb      	strb	r3, [r7, #15]
    break;
 8016d24:	e00b      	b.n	8016d3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016d26:	2303      	movs	r3, #3
 8016d28:	73fb      	strb	r3, [r7, #15]
    break;
 8016d2a:	e008      	b.n	8016d3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8016d30:	e005      	b.n	8016d3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016d32:	2303      	movs	r3, #3
 8016d34:	73fb      	strb	r3, [r7, #15]
    break;
 8016d36:	e002      	b.n	8016d3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016d38:	2303      	movs	r3, #3
 8016d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8016d3c:	bf00      	nop
  }
  return usb_status;
 8016d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	3714      	adds	r7, #20
 8016d44:	46bd      	mov	sp, r7
 8016d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4a:	4770      	bx	lr

08016d4c <__errno>:
 8016d4c:	4b01      	ldr	r3, [pc, #4]	; (8016d54 <__errno+0x8>)
 8016d4e:	6818      	ldr	r0, [r3, #0]
 8016d50:	4770      	bx	lr
 8016d52:	bf00      	nop
 8016d54:	20000194 	.word	0x20000194

08016d58 <__libc_init_array>:
 8016d58:	b570      	push	{r4, r5, r6, lr}
 8016d5a:	4e0d      	ldr	r6, [pc, #52]	; (8016d90 <__libc_init_array+0x38>)
 8016d5c:	4c0d      	ldr	r4, [pc, #52]	; (8016d94 <__libc_init_array+0x3c>)
 8016d5e:	1ba4      	subs	r4, r4, r6
 8016d60:	10a4      	asrs	r4, r4, #2
 8016d62:	2500      	movs	r5, #0
 8016d64:	42a5      	cmp	r5, r4
 8016d66:	d109      	bne.n	8016d7c <__libc_init_array+0x24>
 8016d68:	4e0b      	ldr	r6, [pc, #44]	; (8016d98 <__libc_init_array+0x40>)
 8016d6a:	4c0c      	ldr	r4, [pc, #48]	; (8016d9c <__libc_init_array+0x44>)
 8016d6c:	f002 fe60 	bl	8019a30 <_init>
 8016d70:	1ba4      	subs	r4, r4, r6
 8016d72:	10a4      	asrs	r4, r4, #2
 8016d74:	2500      	movs	r5, #0
 8016d76:	42a5      	cmp	r5, r4
 8016d78:	d105      	bne.n	8016d86 <__libc_init_array+0x2e>
 8016d7a:	bd70      	pop	{r4, r5, r6, pc}
 8016d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d80:	4798      	blx	r3
 8016d82:	3501      	adds	r5, #1
 8016d84:	e7ee      	b.n	8016d64 <__libc_init_array+0xc>
 8016d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d8a:	4798      	blx	r3
 8016d8c:	3501      	adds	r5, #1
 8016d8e:	e7f2      	b.n	8016d76 <__libc_init_array+0x1e>
 8016d90:	0801a2e0 	.word	0x0801a2e0
 8016d94:	0801a2e0 	.word	0x0801a2e0
 8016d98:	0801a2e0 	.word	0x0801a2e0
 8016d9c:	0801a2e4 	.word	0x0801a2e4

08016da0 <malloc>:
 8016da0:	4b02      	ldr	r3, [pc, #8]	; (8016dac <malloc+0xc>)
 8016da2:	4601      	mov	r1, r0
 8016da4:	6818      	ldr	r0, [r3, #0]
 8016da6:	f000 b86d 	b.w	8016e84 <_malloc_r>
 8016daa:	bf00      	nop
 8016dac:	20000194 	.word	0x20000194

08016db0 <free>:
 8016db0:	4b02      	ldr	r3, [pc, #8]	; (8016dbc <free+0xc>)
 8016db2:	4601      	mov	r1, r0
 8016db4:	6818      	ldr	r0, [r3, #0]
 8016db6:	f000 b817 	b.w	8016de8 <_free_r>
 8016dba:	bf00      	nop
 8016dbc:	20000194 	.word	0x20000194

08016dc0 <memcpy>:
 8016dc0:	b510      	push	{r4, lr}
 8016dc2:	1e43      	subs	r3, r0, #1
 8016dc4:	440a      	add	r2, r1
 8016dc6:	4291      	cmp	r1, r2
 8016dc8:	d100      	bne.n	8016dcc <memcpy+0xc>
 8016dca:	bd10      	pop	{r4, pc}
 8016dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016dd4:	e7f7      	b.n	8016dc6 <memcpy+0x6>

08016dd6 <memset>:
 8016dd6:	4402      	add	r2, r0
 8016dd8:	4603      	mov	r3, r0
 8016dda:	4293      	cmp	r3, r2
 8016ddc:	d100      	bne.n	8016de0 <memset+0xa>
 8016dde:	4770      	bx	lr
 8016de0:	f803 1b01 	strb.w	r1, [r3], #1
 8016de4:	e7f9      	b.n	8016dda <memset+0x4>
	...

08016de8 <_free_r>:
 8016de8:	b538      	push	{r3, r4, r5, lr}
 8016dea:	4605      	mov	r5, r0
 8016dec:	2900      	cmp	r1, #0
 8016dee:	d045      	beq.n	8016e7c <_free_r+0x94>
 8016df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016df4:	1f0c      	subs	r4, r1, #4
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	bfb8      	it	lt
 8016dfa:	18e4      	addlt	r4, r4, r3
 8016dfc:	f000 fc1c 	bl	8017638 <__malloc_lock>
 8016e00:	4a1f      	ldr	r2, [pc, #124]	; (8016e80 <_free_r+0x98>)
 8016e02:	6813      	ldr	r3, [r2, #0]
 8016e04:	4610      	mov	r0, r2
 8016e06:	b933      	cbnz	r3, 8016e16 <_free_r+0x2e>
 8016e08:	6063      	str	r3, [r4, #4]
 8016e0a:	6014      	str	r4, [r2, #0]
 8016e0c:	4628      	mov	r0, r5
 8016e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e12:	f000 bc12 	b.w	801763a <__malloc_unlock>
 8016e16:	42a3      	cmp	r3, r4
 8016e18:	d90c      	bls.n	8016e34 <_free_r+0x4c>
 8016e1a:	6821      	ldr	r1, [r4, #0]
 8016e1c:	1862      	adds	r2, r4, r1
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	bf04      	itt	eq
 8016e22:	681a      	ldreq	r2, [r3, #0]
 8016e24:	685b      	ldreq	r3, [r3, #4]
 8016e26:	6063      	str	r3, [r4, #4]
 8016e28:	bf04      	itt	eq
 8016e2a:	1852      	addeq	r2, r2, r1
 8016e2c:	6022      	streq	r2, [r4, #0]
 8016e2e:	6004      	str	r4, [r0, #0]
 8016e30:	e7ec      	b.n	8016e0c <_free_r+0x24>
 8016e32:	4613      	mov	r3, r2
 8016e34:	685a      	ldr	r2, [r3, #4]
 8016e36:	b10a      	cbz	r2, 8016e3c <_free_r+0x54>
 8016e38:	42a2      	cmp	r2, r4
 8016e3a:	d9fa      	bls.n	8016e32 <_free_r+0x4a>
 8016e3c:	6819      	ldr	r1, [r3, #0]
 8016e3e:	1858      	adds	r0, r3, r1
 8016e40:	42a0      	cmp	r0, r4
 8016e42:	d10b      	bne.n	8016e5c <_free_r+0x74>
 8016e44:	6820      	ldr	r0, [r4, #0]
 8016e46:	4401      	add	r1, r0
 8016e48:	1858      	adds	r0, r3, r1
 8016e4a:	4282      	cmp	r2, r0
 8016e4c:	6019      	str	r1, [r3, #0]
 8016e4e:	d1dd      	bne.n	8016e0c <_free_r+0x24>
 8016e50:	6810      	ldr	r0, [r2, #0]
 8016e52:	6852      	ldr	r2, [r2, #4]
 8016e54:	605a      	str	r2, [r3, #4]
 8016e56:	4401      	add	r1, r0
 8016e58:	6019      	str	r1, [r3, #0]
 8016e5a:	e7d7      	b.n	8016e0c <_free_r+0x24>
 8016e5c:	d902      	bls.n	8016e64 <_free_r+0x7c>
 8016e5e:	230c      	movs	r3, #12
 8016e60:	602b      	str	r3, [r5, #0]
 8016e62:	e7d3      	b.n	8016e0c <_free_r+0x24>
 8016e64:	6820      	ldr	r0, [r4, #0]
 8016e66:	1821      	adds	r1, r4, r0
 8016e68:	428a      	cmp	r2, r1
 8016e6a:	bf04      	itt	eq
 8016e6c:	6811      	ldreq	r1, [r2, #0]
 8016e6e:	6852      	ldreq	r2, [r2, #4]
 8016e70:	6062      	str	r2, [r4, #4]
 8016e72:	bf04      	itt	eq
 8016e74:	1809      	addeq	r1, r1, r0
 8016e76:	6021      	streq	r1, [r4, #0]
 8016e78:	605c      	str	r4, [r3, #4]
 8016e7a:	e7c7      	b.n	8016e0c <_free_r+0x24>
 8016e7c:	bd38      	pop	{r3, r4, r5, pc}
 8016e7e:	bf00      	nop
 8016e80:	20008870 	.word	0x20008870

08016e84 <_malloc_r>:
 8016e84:	b570      	push	{r4, r5, r6, lr}
 8016e86:	1ccd      	adds	r5, r1, #3
 8016e88:	f025 0503 	bic.w	r5, r5, #3
 8016e8c:	3508      	adds	r5, #8
 8016e8e:	2d0c      	cmp	r5, #12
 8016e90:	bf38      	it	cc
 8016e92:	250c      	movcc	r5, #12
 8016e94:	2d00      	cmp	r5, #0
 8016e96:	4606      	mov	r6, r0
 8016e98:	db01      	blt.n	8016e9e <_malloc_r+0x1a>
 8016e9a:	42a9      	cmp	r1, r5
 8016e9c:	d903      	bls.n	8016ea6 <_malloc_r+0x22>
 8016e9e:	230c      	movs	r3, #12
 8016ea0:	6033      	str	r3, [r6, #0]
 8016ea2:	2000      	movs	r0, #0
 8016ea4:	bd70      	pop	{r4, r5, r6, pc}
 8016ea6:	f000 fbc7 	bl	8017638 <__malloc_lock>
 8016eaa:	4a21      	ldr	r2, [pc, #132]	; (8016f30 <_malloc_r+0xac>)
 8016eac:	6814      	ldr	r4, [r2, #0]
 8016eae:	4621      	mov	r1, r4
 8016eb0:	b991      	cbnz	r1, 8016ed8 <_malloc_r+0x54>
 8016eb2:	4c20      	ldr	r4, [pc, #128]	; (8016f34 <_malloc_r+0xb0>)
 8016eb4:	6823      	ldr	r3, [r4, #0]
 8016eb6:	b91b      	cbnz	r3, 8016ec0 <_malloc_r+0x3c>
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f000 f8a1 	bl	8017000 <_sbrk_r>
 8016ebe:	6020      	str	r0, [r4, #0]
 8016ec0:	4629      	mov	r1, r5
 8016ec2:	4630      	mov	r0, r6
 8016ec4:	f000 f89c 	bl	8017000 <_sbrk_r>
 8016ec8:	1c43      	adds	r3, r0, #1
 8016eca:	d124      	bne.n	8016f16 <_malloc_r+0x92>
 8016ecc:	230c      	movs	r3, #12
 8016ece:	6033      	str	r3, [r6, #0]
 8016ed0:	4630      	mov	r0, r6
 8016ed2:	f000 fbb2 	bl	801763a <__malloc_unlock>
 8016ed6:	e7e4      	b.n	8016ea2 <_malloc_r+0x1e>
 8016ed8:	680b      	ldr	r3, [r1, #0]
 8016eda:	1b5b      	subs	r3, r3, r5
 8016edc:	d418      	bmi.n	8016f10 <_malloc_r+0x8c>
 8016ede:	2b0b      	cmp	r3, #11
 8016ee0:	d90f      	bls.n	8016f02 <_malloc_r+0x7e>
 8016ee2:	600b      	str	r3, [r1, #0]
 8016ee4:	50cd      	str	r5, [r1, r3]
 8016ee6:	18cc      	adds	r4, r1, r3
 8016ee8:	4630      	mov	r0, r6
 8016eea:	f000 fba6 	bl	801763a <__malloc_unlock>
 8016eee:	f104 000b 	add.w	r0, r4, #11
 8016ef2:	1d23      	adds	r3, r4, #4
 8016ef4:	f020 0007 	bic.w	r0, r0, #7
 8016ef8:	1ac3      	subs	r3, r0, r3
 8016efa:	d0d3      	beq.n	8016ea4 <_malloc_r+0x20>
 8016efc:	425a      	negs	r2, r3
 8016efe:	50e2      	str	r2, [r4, r3]
 8016f00:	e7d0      	b.n	8016ea4 <_malloc_r+0x20>
 8016f02:	428c      	cmp	r4, r1
 8016f04:	684b      	ldr	r3, [r1, #4]
 8016f06:	bf16      	itet	ne
 8016f08:	6063      	strne	r3, [r4, #4]
 8016f0a:	6013      	streq	r3, [r2, #0]
 8016f0c:	460c      	movne	r4, r1
 8016f0e:	e7eb      	b.n	8016ee8 <_malloc_r+0x64>
 8016f10:	460c      	mov	r4, r1
 8016f12:	6849      	ldr	r1, [r1, #4]
 8016f14:	e7cc      	b.n	8016eb0 <_malloc_r+0x2c>
 8016f16:	1cc4      	adds	r4, r0, #3
 8016f18:	f024 0403 	bic.w	r4, r4, #3
 8016f1c:	42a0      	cmp	r0, r4
 8016f1e:	d005      	beq.n	8016f2c <_malloc_r+0xa8>
 8016f20:	1a21      	subs	r1, r4, r0
 8016f22:	4630      	mov	r0, r6
 8016f24:	f000 f86c 	bl	8017000 <_sbrk_r>
 8016f28:	3001      	adds	r0, #1
 8016f2a:	d0cf      	beq.n	8016ecc <_malloc_r+0x48>
 8016f2c:	6025      	str	r5, [r4, #0]
 8016f2e:	e7db      	b.n	8016ee8 <_malloc_r+0x64>
 8016f30:	20008870 	.word	0x20008870
 8016f34:	20008874 	.word	0x20008874

08016f38 <_puts_r>:
 8016f38:	b570      	push	{r4, r5, r6, lr}
 8016f3a:	460e      	mov	r6, r1
 8016f3c:	4605      	mov	r5, r0
 8016f3e:	b118      	cbz	r0, 8016f48 <_puts_r+0x10>
 8016f40:	6983      	ldr	r3, [r0, #24]
 8016f42:	b90b      	cbnz	r3, 8016f48 <_puts_r+0x10>
 8016f44:	f000 fa8a 	bl	801745c <__sinit>
 8016f48:	69ab      	ldr	r3, [r5, #24]
 8016f4a:	68ac      	ldr	r4, [r5, #8]
 8016f4c:	b913      	cbnz	r3, 8016f54 <_puts_r+0x1c>
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f000 fa84 	bl	801745c <__sinit>
 8016f54:	4b23      	ldr	r3, [pc, #140]	; (8016fe4 <_puts_r+0xac>)
 8016f56:	429c      	cmp	r4, r3
 8016f58:	d117      	bne.n	8016f8a <_puts_r+0x52>
 8016f5a:	686c      	ldr	r4, [r5, #4]
 8016f5c:	89a3      	ldrh	r3, [r4, #12]
 8016f5e:	071b      	lsls	r3, r3, #28
 8016f60:	d51d      	bpl.n	8016f9e <_puts_r+0x66>
 8016f62:	6923      	ldr	r3, [r4, #16]
 8016f64:	b1db      	cbz	r3, 8016f9e <_puts_r+0x66>
 8016f66:	3e01      	subs	r6, #1
 8016f68:	68a3      	ldr	r3, [r4, #8]
 8016f6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016f6e:	3b01      	subs	r3, #1
 8016f70:	60a3      	str	r3, [r4, #8]
 8016f72:	b9e9      	cbnz	r1, 8016fb0 <_puts_r+0x78>
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	da2e      	bge.n	8016fd6 <_puts_r+0x9e>
 8016f78:	4622      	mov	r2, r4
 8016f7a:	210a      	movs	r1, #10
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f000 f8bd 	bl	80170fc <__swbuf_r>
 8016f82:	3001      	adds	r0, #1
 8016f84:	d011      	beq.n	8016faa <_puts_r+0x72>
 8016f86:	200a      	movs	r0, #10
 8016f88:	e011      	b.n	8016fae <_puts_r+0x76>
 8016f8a:	4b17      	ldr	r3, [pc, #92]	; (8016fe8 <_puts_r+0xb0>)
 8016f8c:	429c      	cmp	r4, r3
 8016f8e:	d101      	bne.n	8016f94 <_puts_r+0x5c>
 8016f90:	68ac      	ldr	r4, [r5, #8]
 8016f92:	e7e3      	b.n	8016f5c <_puts_r+0x24>
 8016f94:	4b15      	ldr	r3, [pc, #84]	; (8016fec <_puts_r+0xb4>)
 8016f96:	429c      	cmp	r4, r3
 8016f98:	bf08      	it	eq
 8016f9a:	68ec      	ldreq	r4, [r5, #12]
 8016f9c:	e7de      	b.n	8016f5c <_puts_r+0x24>
 8016f9e:	4621      	mov	r1, r4
 8016fa0:	4628      	mov	r0, r5
 8016fa2:	f000 f8fd 	bl	80171a0 <__swsetup_r>
 8016fa6:	2800      	cmp	r0, #0
 8016fa8:	d0dd      	beq.n	8016f66 <_puts_r+0x2e>
 8016faa:	f04f 30ff 	mov.w	r0, #4294967295
 8016fae:	bd70      	pop	{r4, r5, r6, pc}
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	da04      	bge.n	8016fbe <_puts_r+0x86>
 8016fb4:	69a2      	ldr	r2, [r4, #24]
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	dc06      	bgt.n	8016fc8 <_puts_r+0x90>
 8016fba:	290a      	cmp	r1, #10
 8016fbc:	d004      	beq.n	8016fc8 <_puts_r+0x90>
 8016fbe:	6823      	ldr	r3, [r4, #0]
 8016fc0:	1c5a      	adds	r2, r3, #1
 8016fc2:	6022      	str	r2, [r4, #0]
 8016fc4:	7019      	strb	r1, [r3, #0]
 8016fc6:	e7cf      	b.n	8016f68 <_puts_r+0x30>
 8016fc8:	4622      	mov	r2, r4
 8016fca:	4628      	mov	r0, r5
 8016fcc:	f000 f896 	bl	80170fc <__swbuf_r>
 8016fd0:	3001      	adds	r0, #1
 8016fd2:	d1c9      	bne.n	8016f68 <_puts_r+0x30>
 8016fd4:	e7e9      	b.n	8016faa <_puts_r+0x72>
 8016fd6:	6823      	ldr	r3, [r4, #0]
 8016fd8:	200a      	movs	r0, #10
 8016fda:	1c5a      	adds	r2, r3, #1
 8016fdc:	6022      	str	r2, [r4, #0]
 8016fde:	7018      	strb	r0, [r3, #0]
 8016fe0:	e7e5      	b.n	8016fae <_puts_r+0x76>
 8016fe2:	bf00      	nop
 8016fe4:	0801a1f4 	.word	0x0801a1f4
 8016fe8:	0801a214 	.word	0x0801a214
 8016fec:	0801a1d4 	.word	0x0801a1d4

08016ff0 <puts>:
 8016ff0:	4b02      	ldr	r3, [pc, #8]	; (8016ffc <puts+0xc>)
 8016ff2:	4601      	mov	r1, r0
 8016ff4:	6818      	ldr	r0, [r3, #0]
 8016ff6:	f7ff bf9f 	b.w	8016f38 <_puts_r>
 8016ffa:	bf00      	nop
 8016ffc:	20000194 	.word	0x20000194

08017000 <_sbrk_r>:
 8017000:	b538      	push	{r3, r4, r5, lr}
 8017002:	4c06      	ldr	r4, [pc, #24]	; (801701c <_sbrk_r+0x1c>)
 8017004:	2300      	movs	r3, #0
 8017006:	4605      	mov	r5, r0
 8017008:	4608      	mov	r0, r1
 801700a:	6023      	str	r3, [r4, #0]
 801700c:	f7eb feb4 	bl	8002d78 <_sbrk>
 8017010:	1c43      	adds	r3, r0, #1
 8017012:	d102      	bne.n	801701a <_sbrk_r+0x1a>
 8017014:	6823      	ldr	r3, [r4, #0]
 8017016:	b103      	cbz	r3, 801701a <_sbrk_r+0x1a>
 8017018:	602b      	str	r3, [r5, #0]
 801701a:	bd38      	pop	{r3, r4, r5, pc}
 801701c:	200170c4 	.word	0x200170c4

08017020 <sniprintf>:
 8017020:	b40c      	push	{r2, r3}
 8017022:	b530      	push	{r4, r5, lr}
 8017024:	4b17      	ldr	r3, [pc, #92]	; (8017084 <sniprintf+0x64>)
 8017026:	1e0c      	subs	r4, r1, #0
 8017028:	b09d      	sub	sp, #116	; 0x74
 801702a:	681d      	ldr	r5, [r3, #0]
 801702c:	da08      	bge.n	8017040 <sniprintf+0x20>
 801702e:	238b      	movs	r3, #139	; 0x8b
 8017030:	602b      	str	r3, [r5, #0]
 8017032:	f04f 30ff 	mov.w	r0, #4294967295
 8017036:	b01d      	add	sp, #116	; 0x74
 8017038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801703c:	b002      	add	sp, #8
 801703e:	4770      	bx	lr
 8017040:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017044:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017048:	bf14      	ite	ne
 801704a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801704e:	4623      	moveq	r3, r4
 8017050:	9304      	str	r3, [sp, #16]
 8017052:	9307      	str	r3, [sp, #28]
 8017054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017058:	9002      	str	r0, [sp, #8]
 801705a:	9006      	str	r0, [sp, #24]
 801705c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017060:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017062:	ab21      	add	r3, sp, #132	; 0x84
 8017064:	a902      	add	r1, sp, #8
 8017066:	4628      	mov	r0, r5
 8017068:	9301      	str	r3, [sp, #4]
 801706a:	f000 fb41 	bl	80176f0 <_svfiprintf_r>
 801706e:	1c43      	adds	r3, r0, #1
 8017070:	bfbc      	itt	lt
 8017072:	238b      	movlt	r3, #139	; 0x8b
 8017074:	602b      	strlt	r3, [r5, #0]
 8017076:	2c00      	cmp	r4, #0
 8017078:	d0dd      	beq.n	8017036 <sniprintf+0x16>
 801707a:	9b02      	ldr	r3, [sp, #8]
 801707c:	2200      	movs	r2, #0
 801707e:	701a      	strb	r2, [r3, #0]
 8017080:	e7d9      	b.n	8017036 <sniprintf+0x16>
 8017082:	bf00      	nop
 8017084:	20000194 	.word	0x20000194

08017088 <_vsniprintf_r>:
 8017088:	b530      	push	{r4, r5, lr}
 801708a:	1e14      	subs	r4, r2, #0
 801708c:	4605      	mov	r5, r0
 801708e:	b09b      	sub	sp, #108	; 0x6c
 8017090:	4618      	mov	r0, r3
 8017092:	da05      	bge.n	80170a0 <_vsniprintf_r+0x18>
 8017094:	238b      	movs	r3, #139	; 0x8b
 8017096:	602b      	str	r3, [r5, #0]
 8017098:	f04f 30ff 	mov.w	r0, #4294967295
 801709c:	b01b      	add	sp, #108	; 0x6c
 801709e:	bd30      	pop	{r4, r5, pc}
 80170a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80170a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80170a8:	bf14      	ite	ne
 80170aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80170ae:	4623      	moveq	r3, r4
 80170b0:	9302      	str	r3, [sp, #8]
 80170b2:	9305      	str	r3, [sp, #20]
 80170b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170b8:	9100      	str	r1, [sp, #0]
 80170ba:	9104      	str	r1, [sp, #16]
 80170bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80170c0:	4602      	mov	r2, r0
 80170c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80170c4:	4669      	mov	r1, sp
 80170c6:	4628      	mov	r0, r5
 80170c8:	f000 fb12 	bl	80176f0 <_svfiprintf_r>
 80170cc:	1c43      	adds	r3, r0, #1
 80170ce:	bfbc      	itt	lt
 80170d0:	238b      	movlt	r3, #139	; 0x8b
 80170d2:	602b      	strlt	r3, [r5, #0]
 80170d4:	2c00      	cmp	r4, #0
 80170d6:	d0e1      	beq.n	801709c <_vsniprintf_r+0x14>
 80170d8:	9b00      	ldr	r3, [sp, #0]
 80170da:	2200      	movs	r2, #0
 80170dc:	701a      	strb	r2, [r3, #0]
 80170de:	e7dd      	b.n	801709c <_vsniprintf_r+0x14>

080170e0 <vsniprintf>:
 80170e0:	b507      	push	{r0, r1, r2, lr}
 80170e2:	9300      	str	r3, [sp, #0]
 80170e4:	4613      	mov	r3, r2
 80170e6:	460a      	mov	r2, r1
 80170e8:	4601      	mov	r1, r0
 80170ea:	4803      	ldr	r0, [pc, #12]	; (80170f8 <vsniprintf+0x18>)
 80170ec:	6800      	ldr	r0, [r0, #0]
 80170ee:	f7ff ffcb 	bl	8017088 <_vsniprintf_r>
 80170f2:	b003      	add	sp, #12
 80170f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80170f8:	20000194 	.word	0x20000194

080170fc <__swbuf_r>:
 80170fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170fe:	460e      	mov	r6, r1
 8017100:	4614      	mov	r4, r2
 8017102:	4605      	mov	r5, r0
 8017104:	b118      	cbz	r0, 801710e <__swbuf_r+0x12>
 8017106:	6983      	ldr	r3, [r0, #24]
 8017108:	b90b      	cbnz	r3, 801710e <__swbuf_r+0x12>
 801710a:	f000 f9a7 	bl	801745c <__sinit>
 801710e:	4b21      	ldr	r3, [pc, #132]	; (8017194 <__swbuf_r+0x98>)
 8017110:	429c      	cmp	r4, r3
 8017112:	d12a      	bne.n	801716a <__swbuf_r+0x6e>
 8017114:	686c      	ldr	r4, [r5, #4]
 8017116:	69a3      	ldr	r3, [r4, #24]
 8017118:	60a3      	str	r3, [r4, #8]
 801711a:	89a3      	ldrh	r3, [r4, #12]
 801711c:	071a      	lsls	r2, r3, #28
 801711e:	d52e      	bpl.n	801717e <__swbuf_r+0x82>
 8017120:	6923      	ldr	r3, [r4, #16]
 8017122:	b363      	cbz	r3, 801717e <__swbuf_r+0x82>
 8017124:	6923      	ldr	r3, [r4, #16]
 8017126:	6820      	ldr	r0, [r4, #0]
 8017128:	1ac0      	subs	r0, r0, r3
 801712a:	6963      	ldr	r3, [r4, #20]
 801712c:	b2f6      	uxtb	r6, r6
 801712e:	4283      	cmp	r3, r0
 8017130:	4637      	mov	r7, r6
 8017132:	dc04      	bgt.n	801713e <__swbuf_r+0x42>
 8017134:	4621      	mov	r1, r4
 8017136:	4628      	mov	r0, r5
 8017138:	f000 f926 	bl	8017388 <_fflush_r>
 801713c:	bb28      	cbnz	r0, 801718a <__swbuf_r+0x8e>
 801713e:	68a3      	ldr	r3, [r4, #8]
 8017140:	3b01      	subs	r3, #1
 8017142:	60a3      	str	r3, [r4, #8]
 8017144:	6823      	ldr	r3, [r4, #0]
 8017146:	1c5a      	adds	r2, r3, #1
 8017148:	6022      	str	r2, [r4, #0]
 801714a:	701e      	strb	r6, [r3, #0]
 801714c:	6963      	ldr	r3, [r4, #20]
 801714e:	3001      	adds	r0, #1
 8017150:	4283      	cmp	r3, r0
 8017152:	d004      	beq.n	801715e <__swbuf_r+0x62>
 8017154:	89a3      	ldrh	r3, [r4, #12]
 8017156:	07db      	lsls	r3, r3, #31
 8017158:	d519      	bpl.n	801718e <__swbuf_r+0x92>
 801715a:	2e0a      	cmp	r6, #10
 801715c:	d117      	bne.n	801718e <__swbuf_r+0x92>
 801715e:	4621      	mov	r1, r4
 8017160:	4628      	mov	r0, r5
 8017162:	f000 f911 	bl	8017388 <_fflush_r>
 8017166:	b190      	cbz	r0, 801718e <__swbuf_r+0x92>
 8017168:	e00f      	b.n	801718a <__swbuf_r+0x8e>
 801716a:	4b0b      	ldr	r3, [pc, #44]	; (8017198 <__swbuf_r+0x9c>)
 801716c:	429c      	cmp	r4, r3
 801716e:	d101      	bne.n	8017174 <__swbuf_r+0x78>
 8017170:	68ac      	ldr	r4, [r5, #8]
 8017172:	e7d0      	b.n	8017116 <__swbuf_r+0x1a>
 8017174:	4b09      	ldr	r3, [pc, #36]	; (801719c <__swbuf_r+0xa0>)
 8017176:	429c      	cmp	r4, r3
 8017178:	bf08      	it	eq
 801717a:	68ec      	ldreq	r4, [r5, #12]
 801717c:	e7cb      	b.n	8017116 <__swbuf_r+0x1a>
 801717e:	4621      	mov	r1, r4
 8017180:	4628      	mov	r0, r5
 8017182:	f000 f80d 	bl	80171a0 <__swsetup_r>
 8017186:	2800      	cmp	r0, #0
 8017188:	d0cc      	beq.n	8017124 <__swbuf_r+0x28>
 801718a:	f04f 37ff 	mov.w	r7, #4294967295
 801718e:	4638      	mov	r0, r7
 8017190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017192:	bf00      	nop
 8017194:	0801a1f4 	.word	0x0801a1f4
 8017198:	0801a214 	.word	0x0801a214
 801719c:	0801a1d4 	.word	0x0801a1d4

080171a0 <__swsetup_r>:
 80171a0:	4b32      	ldr	r3, [pc, #200]	; (801726c <__swsetup_r+0xcc>)
 80171a2:	b570      	push	{r4, r5, r6, lr}
 80171a4:	681d      	ldr	r5, [r3, #0]
 80171a6:	4606      	mov	r6, r0
 80171a8:	460c      	mov	r4, r1
 80171aa:	b125      	cbz	r5, 80171b6 <__swsetup_r+0x16>
 80171ac:	69ab      	ldr	r3, [r5, #24]
 80171ae:	b913      	cbnz	r3, 80171b6 <__swsetup_r+0x16>
 80171b0:	4628      	mov	r0, r5
 80171b2:	f000 f953 	bl	801745c <__sinit>
 80171b6:	4b2e      	ldr	r3, [pc, #184]	; (8017270 <__swsetup_r+0xd0>)
 80171b8:	429c      	cmp	r4, r3
 80171ba:	d10f      	bne.n	80171dc <__swsetup_r+0x3c>
 80171bc:	686c      	ldr	r4, [r5, #4]
 80171be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	0715      	lsls	r5, r2, #28
 80171c6:	d42c      	bmi.n	8017222 <__swsetup_r+0x82>
 80171c8:	06d0      	lsls	r0, r2, #27
 80171ca:	d411      	bmi.n	80171f0 <__swsetup_r+0x50>
 80171cc:	2209      	movs	r2, #9
 80171ce:	6032      	str	r2, [r6, #0]
 80171d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171d4:	81a3      	strh	r3, [r4, #12]
 80171d6:	f04f 30ff 	mov.w	r0, #4294967295
 80171da:	e03e      	b.n	801725a <__swsetup_r+0xba>
 80171dc:	4b25      	ldr	r3, [pc, #148]	; (8017274 <__swsetup_r+0xd4>)
 80171de:	429c      	cmp	r4, r3
 80171e0:	d101      	bne.n	80171e6 <__swsetup_r+0x46>
 80171e2:	68ac      	ldr	r4, [r5, #8]
 80171e4:	e7eb      	b.n	80171be <__swsetup_r+0x1e>
 80171e6:	4b24      	ldr	r3, [pc, #144]	; (8017278 <__swsetup_r+0xd8>)
 80171e8:	429c      	cmp	r4, r3
 80171ea:	bf08      	it	eq
 80171ec:	68ec      	ldreq	r4, [r5, #12]
 80171ee:	e7e6      	b.n	80171be <__swsetup_r+0x1e>
 80171f0:	0751      	lsls	r1, r2, #29
 80171f2:	d512      	bpl.n	801721a <__swsetup_r+0x7a>
 80171f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171f6:	b141      	cbz	r1, 801720a <__swsetup_r+0x6a>
 80171f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171fc:	4299      	cmp	r1, r3
 80171fe:	d002      	beq.n	8017206 <__swsetup_r+0x66>
 8017200:	4630      	mov	r0, r6
 8017202:	f7ff fdf1 	bl	8016de8 <_free_r>
 8017206:	2300      	movs	r3, #0
 8017208:	6363      	str	r3, [r4, #52]	; 0x34
 801720a:	89a3      	ldrh	r3, [r4, #12]
 801720c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017210:	81a3      	strh	r3, [r4, #12]
 8017212:	2300      	movs	r3, #0
 8017214:	6063      	str	r3, [r4, #4]
 8017216:	6923      	ldr	r3, [r4, #16]
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	89a3      	ldrh	r3, [r4, #12]
 801721c:	f043 0308 	orr.w	r3, r3, #8
 8017220:	81a3      	strh	r3, [r4, #12]
 8017222:	6923      	ldr	r3, [r4, #16]
 8017224:	b94b      	cbnz	r3, 801723a <__swsetup_r+0x9a>
 8017226:	89a3      	ldrh	r3, [r4, #12]
 8017228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801722c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017230:	d003      	beq.n	801723a <__swsetup_r+0x9a>
 8017232:	4621      	mov	r1, r4
 8017234:	4630      	mov	r0, r6
 8017236:	f000 f9bf 	bl	80175b8 <__smakebuf_r>
 801723a:	89a2      	ldrh	r2, [r4, #12]
 801723c:	f012 0301 	ands.w	r3, r2, #1
 8017240:	d00c      	beq.n	801725c <__swsetup_r+0xbc>
 8017242:	2300      	movs	r3, #0
 8017244:	60a3      	str	r3, [r4, #8]
 8017246:	6963      	ldr	r3, [r4, #20]
 8017248:	425b      	negs	r3, r3
 801724a:	61a3      	str	r3, [r4, #24]
 801724c:	6923      	ldr	r3, [r4, #16]
 801724e:	b953      	cbnz	r3, 8017266 <__swsetup_r+0xc6>
 8017250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017254:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017258:	d1ba      	bne.n	80171d0 <__swsetup_r+0x30>
 801725a:	bd70      	pop	{r4, r5, r6, pc}
 801725c:	0792      	lsls	r2, r2, #30
 801725e:	bf58      	it	pl
 8017260:	6963      	ldrpl	r3, [r4, #20]
 8017262:	60a3      	str	r3, [r4, #8]
 8017264:	e7f2      	b.n	801724c <__swsetup_r+0xac>
 8017266:	2000      	movs	r0, #0
 8017268:	e7f7      	b.n	801725a <__swsetup_r+0xba>
 801726a:	bf00      	nop
 801726c:	20000194 	.word	0x20000194
 8017270:	0801a1f4 	.word	0x0801a1f4
 8017274:	0801a214 	.word	0x0801a214
 8017278:	0801a1d4 	.word	0x0801a1d4

0801727c <__sflush_r>:
 801727c:	898a      	ldrh	r2, [r1, #12]
 801727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017282:	4605      	mov	r5, r0
 8017284:	0710      	lsls	r0, r2, #28
 8017286:	460c      	mov	r4, r1
 8017288:	d458      	bmi.n	801733c <__sflush_r+0xc0>
 801728a:	684b      	ldr	r3, [r1, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	dc05      	bgt.n	801729c <__sflush_r+0x20>
 8017290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017292:	2b00      	cmp	r3, #0
 8017294:	dc02      	bgt.n	801729c <__sflush_r+0x20>
 8017296:	2000      	movs	r0, #0
 8017298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801729c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801729e:	2e00      	cmp	r6, #0
 80172a0:	d0f9      	beq.n	8017296 <__sflush_r+0x1a>
 80172a2:	2300      	movs	r3, #0
 80172a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80172a8:	682f      	ldr	r7, [r5, #0]
 80172aa:	6a21      	ldr	r1, [r4, #32]
 80172ac:	602b      	str	r3, [r5, #0]
 80172ae:	d032      	beq.n	8017316 <__sflush_r+0x9a>
 80172b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80172b2:	89a3      	ldrh	r3, [r4, #12]
 80172b4:	075a      	lsls	r2, r3, #29
 80172b6:	d505      	bpl.n	80172c4 <__sflush_r+0x48>
 80172b8:	6863      	ldr	r3, [r4, #4]
 80172ba:	1ac0      	subs	r0, r0, r3
 80172bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172be:	b10b      	cbz	r3, 80172c4 <__sflush_r+0x48>
 80172c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172c2:	1ac0      	subs	r0, r0, r3
 80172c4:	2300      	movs	r3, #0
 80172c6:	4602      	mov	r2, r0
 80172c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172ca:	6a21      	ldr	r1, [r4, #32]
 80172cc:	4628      	mov	r0, r5
 80172ce:	47b0      	blx	r6
 80172d0:	1c43      	adds	r3, r0, #1
 80172d2:	89a3      	ldrh	r3, [r4, #12]
 80172d4:	d106      	bne.n	80172e4 <__sflush_r+0x68>
 80172d6:	6829      	ldr	r1, [r5, #0]
 80172d8:	291d      	cmp	r1, #29
 80172da:	d848      	bhi.n	801736e <__sflush_r+0xf2>
 80172dc:	4a29      	ldr	r2, [pc, #164]	; (8017384 <__sflush_r+0x108>)
 80172de:	40ca      	lsrs	r2, r1
 80172e0:	07d6      	lsls	r6, r2, #31
 80172e2:	d544      	bpl.n	801736e <__sflush_r+0xf2>
 80172e4:	2200      	movs	r2, #0
 80172e6:	6062      	str	r2, [r4, #4]
 80172e8:	04d9      	lsls	r1, r3, #19
 80172ea:	6922      	ldr	r2, [r4, #16]
 80172ec:	6022      	str	r2, [r4, #0]
 80172ee:	d504      	bpl.n	80172fa <__sflush_r+0x7e>
 80172f0:	1c42      	adds	r2, r0, #1
 80172f2:	d101      	bne.n	80172f8 <__sflush_r+0x7c>
 80172f4:	682b      	ldr	r3, [r5, #0]
 80172f6:	b903      	cbnz	r3, 80172fa <__sflush_r+0x7e>
 80172f8:	6560      	str	r0, [r4, #84]	; 0x54
 80172fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172fc:	602f      	str	r7, [r5, #0]
 80172fe:	2900      	cmp	r1, #0
 8017300:	d0c9      	beq.n	8017296 <__sflush_r+0x1a>
 8017302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017306:	4299      	cmp	r1, r3
 8017308:	d002      	beq.n	8017310 <__sflush_r+0x94>
 801730a:	4628      	mov	r0, r5
 801730c:	f7ff fd6c 	bl	8016de8 <_free_r>
 8017310:	2000      	movs	r0, #0
 8017312:	6360      	str	r0, [r4, #52]	; 0x34
 8017314:	e7c0      	b.n	8017298 <__sflush_r+0x1c>
 8017316:	2301      	movs	r3, #1
 8017318:	4628      	mov	r0, r5
 801731a:	47b0      	blx	r6
 801731c:	1c41      	adds	r1, r0, #1
 801731e:	d1c8      	bne.n	80172b2 <__sflush_r+0x36>
 8017320:	682b      	ldr	r3, [r5, #0]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d0c5      	beq.n	80172b2 <__sflush_r+0x36>
 8017326:	2b1d      	cmp	r3, #29
 8017328:	d001      	beq.n	801732e <__sflush_r+0xb2>
 801732a:	2b16      	cmp	r3, #22
 801732c:	d101      	bne.n	8017332 <__sflush_r+0xb6>
 801732e:	602f      	str	r7, [r5, #0]
 8017330:	e7b1      	b.n	8017296 <__sflush_r+0x1a>
 8017332:	89a3      	ldrh	r3, [r4, #12]
 8017334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017338:	81a3      	strh	r3, [r4, #12]
 801733a:	e7ad      	b.n	8017298 <__sflush_r+0x1c>
 801733c:	690f      	ldr	r7, [r1, #16]
 801733e:	2f00      	cmp	r7, #0
 8017340:	d0a9      	beq.n	8017296 <__sflush_r+0x1a>
 8017342:	0793      	lsls	r3, r2, #30
 8017344:	680e      	ldr	r6, [r1, #0]
 8017346:	bf08      	it	eq
 8017348:	694b      	ldreq	r3, [r1, #20]
 801734a:	600f      	str	r7, [r1, #0]
 801734c:	bf18      	it	ne
 801734e:	2300      	movne	r3, #0
 8017350:	eba6 0807 	sub.w	r8, r6, r7
 8017354:	608b      	str	r3, [r1, #8]
 8017356:	f1b8 0f00 	cmp.w	r8, #0
 801735a:	dd9c      	ble.n	8017296 <__sflush_r+0x1a>
 801735c:	4643      	mov	r3, r8
 801735e:	463a      	mov	r2, r7
 8017360:	6a21      	ldr	r1, [r4, #32]
 8017362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017364:	4628      	mov	r0, r5
 8017366:	47b0      	blx	r6
 8017368:	2800      	cmp	r0, #0
 801736a:	dc06      	bgt.n	801737a <__sflush_r+0xfe>
 801736c:	89a3      	ldrh	r3, [r4, #12]
 801736e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017372:	81a3      	strh	r3, [r4, #12]
 8017374:	f04f 30ff 	mov.w	r0, #4294967295
 8017378:	e78e      	b.n	8017298 <__sflush_r+0x1c>
 801737a:	4407      	add	r7, r0
 801737c:	eba8 0800 	sub.w	r8, r8, r0
 8017380:	e7e9      	b.n	8017356 <__sflush_r+0xda>
 8017382:	bf00      	nop
 8017384:	20400001 	.word	0x20400001

08017388 <_fflush_r>:
 8017388:	b538      	push	{r3, r4, r5, lr}
 801738a:	690b      	ldr	r3, [r1, #16]
 801738c:	4605      	mov	r5, r0
 801738e:	460c      	mov	r4, r1
 8017390:	b1db      	cbz	r3, 80173ca <_fflush_r+0x42>
 8017392:	b118      	cbz	r0, 801739c <_fflush_r+0x14>
 8017394:	6983      	ldr	r3, [r0, #24]
 8017396:	b90b      	cbnz	r3, 801739c <_fflush_r+0x14>
 8017398:	f000 f860 	bl	801745c <__sinit>
 801739c:	4b0c      	ldr	r3, [pc, #48]	; (80173d0 <_fflush_r+0x48>)
 801739e:	429c      	cmp	r4, r3
 80173a0:	d109      	bne.n	80173b6 <_fflush_r+0x2e>
 80173a2:	686c      	ldr	r4, [r5, #4]
 80173a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173a8:	b17b      	cbz	r3, 80173ca <_fflush_r+0x42>
 80173aa:	4621      	mov	r1, r4
 80173ac:	4628      	mov	r0, r5
 80173ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173b2:	f7ff bf63 	b.w	801727c <__sflush_r>
 80173b6:	4b07      	ldr	r3, [pc, #28]	; (80173d4 <_fflush_r+0x4c>)
 80173b8:	429c      	cmp	r4, r3
 80173ba:	d101      	bne.n	80173c0 <_fflush_r+0x38>
 80173bc:	68ac      	ldr	r4, [r5, #8]
 80173be:	e7f1      	b.n	80173a4 <_fflush_r+0x1c>
 80173c0:	4b05      	ldr	r3, [pc, #20]	; (80173d8 <_fflush_r+0x50>)
 80173c2:	429c      	cmp	r4, r3
 80173c4:	bf08      	it	eq
 80173c6:	68ec      	ldreq	r4, [r5, #12]
 80173c8:	e7ec      	b.n	80173a4 <_fflush_r+0x1c>
 80173ca:	2000      	movs	r0, #0
 80173cc:	bd38      	pop	{r3, r4, r5, pc}
 80173ce:	bf00      	nop
 80173d0:	0801a1f4 	.word	0x0801a1f4
 80173d4:	0801a214 	.word	0x0801a214
 80173d8:	0801a1d4 	.word	0x0801a1d4

080173dc <std>:
 80173dc:	2300      	movs	r3, #0
 80173de:	b510      	push	{r4, lr}
 80173e0:	4604      	mov	r4, r0
 80173e2:	e9c0 3300 	strd	r3, r3, [r0]
 80173e6:	6083      	str	r3, [r0, #8]
 80173e8:	8181      	strh	r1, [r0, #12]
 80173ea:	6643      	str	r3, [r0, #100]	; 0x64
 80173ec:	81c2      	strh	r2, [r0, #14]
 80173ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173f2:	6183      	str	r3, [r0, #24]
 80173f4:	4619      	mov	r1, r3
 80173f6:	2208      	movs	r2, #8
 80173f8:	305c      	adds	r0, #92	; 0x5c
 80173fa:	f7ff fcec 	bl	8016dd6 <memset>
 80173fe:	4b05      	ldr	r3, [pc, #20]	; (8017414 <std+0x38>)
 8017400:	6263      	str	r3, [r4, #36]	; 0x24
 8017402:	4b05      	ldr	r3, [pc, #20]	; (8017418 <std+0x3c>)
 8017404:	62a3      	str	r3, [r4, #40]	; 0x28
 8017406:	4b05      	ldr	r3, [pc, #20]	; (801741c <std+0x40>)
 8017408:	62e3      	str	r3, [r4, #44]	; 0x2c
 801740a:	4b05      	ldr	r3, [pc, #20]	; (8017420 <std+0x44>)
 801740c:	6224      	str	r4, [r4, #32]
 801740e:	6323      	str	r3, [r4, #48]	; 0x30
 8017410:	bd10      	pop	{r4, pc}
 8017412:	bf00      	nop
 8017414:	08017bf1 	.word	0x08017bf1
 8017418:	08017c13 	.word	0x08017c13
 801741c:	08017c4b 	.word	0x08017c4b
 8017420:	08017c6f 	.word	0x08017c6f

08017424 <_cleanup_r>:
 8017424:	4901      	ldr	r1, [pc, #4]	; (801742c <_cleanup_r+0x8>)
 8017426:	f000 b885 	b.w	8017534 <_fwalk_reent>
 801742a:	bf00      	nop
 801742c:	08017389 	.word	0x08017389

08017430 <__sfmoreglue>:
 8017430:	b570      	push	{r4, r5, r6, lr}
 8017432:	1e4a      	subs	r2, r1, #1
 8017434:	2568      	movs	r5, #104	; 0x68
 8017436:	4355      	muls	r5, r2
 8017438:	460e      	mov	r6, r1
 801743a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801743e:	f7ff fd21 	bl	8016e84 <_malloc_r>
 8017442:	4604      	mov	r4, r0
 8017444:	b140      	cbz	r0, 8017458 <__sfmoreglue+0x28>
 8017446:	2100      	movs	r1, #0
 8017448:	e9c0 1600 	strd	r1, r6, [r0]
 801744c:	300c      	adds	r0, #12
 801744e:	60a0      	str	r0, [r4, #8]
 8017450:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017454:	f7ff fcbf 	bl	8016dd6 <memset>
 8017458:	4620      	mov	r0, r4
 801745a:	bd70      	pop	{r4, r5, r6, pc}

0801745c <__sinit>:
 801745c:	6983      	ldr	r3, [r0, #24]
 801745e:	b510      	push	{r4, lr}
 8017460:	4604      	mov	r4, r0
 8017462:	bb33      	cbnz	r3, 80174b2 <__sinit+0x56>
 8017464:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017468:	6503      	str	r3, [r0, #80]	; 0x50
 801746a:	4b12      	ldr	r3, [pc, #72]	; (80174b4 <__sinit+0x58>)
 801746c:	4a12      	ldr	r2, [pc, #72]	; (80174b8 <__sinit+0x5c>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	6282      	str	r2, [r0, #40]	; 0x28
 8017472:	4298      	cmp	r0, r3
 8017474:	bf04      	itt	eq
 8017476:	2301      	moveq	r3, #1
 8017478:	6183      	streq	r3, [r0, #24]
 801747a:	f000 f81f 	bl	80174bc <__sfp>
 801747e:	6060      	str	r0, [r4, #4]
 8017480:	4620      	mov	r0, r4
 8017482:	f000 f81b 	bl	80174bc <__sfp>
 8017486:	60a0      	str	r0, [r4, #8]
 8017488:	4620      	mov	r0, r4
 801748a:	f000 f817 	bl	80174bc <__sfp>
 801748e:	2200      	movs	r2, #0
 8017490:	60e0      	str	r0, [r4, #12]
 8017492:	2104      	movs	r1, #4
 8017494:	6860      	ldr	r0, [r4, #4]
 8017496:	f7ff ffa1 	bl	80173dc <std>
 801749a:	2201      	movs	r2, #1
 801749c:	2109      	movs	r1, #9
 801749e:	68a0      	ldr	r0, [r4, #8]
 80174a0:	f7ff ff9c 	bl	80173dc <std>
 80174a4:	2202      	movs	r2, #2
 80174a6:	2112      	movs	r1, #18
 80174a8:	68e0      	ldr	r0, [r4, #12]
 80174aa:	f7ff ff97 	bl	80173dc <std>
 80174ae:	2301      	movs	r3, #1
 80174b0:	61a3      	str	r3, [r4, #24]
 80174b2:	bd10      	pop	{r4, pc}
 80174b4:	0801a1d0 	.word	0x0801a1d0
 80174b8:	08017425 	.word	0x08017425

080174bc <__sfp>:
 80174bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174be:	4b1b      	ldr	r3, [pc, #108]	; (801752c <__sfp+0x70>)
 80174c0:	681e      	ldr	r6, [r3, #0]
 80174c2:	69b3      	ldr	r3, [r6, #24]
 80174c4:	4607      	mov	r7, r0
 80174c6:	b913      	cbnz	r3, 80174ce <__sfp+0x12>
 80174c8:	4630      	mov	r0, r6
 80174ca:	f7ff ffc7 	bl	801745c <__sinit>
 80174ce:	3648      	adds	r6, #72	; 0x48
 80174d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80174d4:	3b01      	subs	r3, #1
 80174d6:	d503      	bpl.n	80174e0 <__sfp+0x24>
 80174d8:	6833      	ldr	r3, [r6, #0]
 80174da:	b133      	cbz	r3, 80174ea <__sfp+0x2e>
 80174dc:	6836      	ldr	r6, [r6, #0]
 80174de:	e7f7      	b.n	80174d0 <__sfp+0x14>
 80174e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80174e4:	b16d      	cbz	r5, 8017502 <__sfp+0x46>
 80174e6:	3468      	adds	r4, #104	; 0x68
 80174e8:	e7f4      	b.n	80174d4 <__sfp+0x18>
 80174ea:	2104      	movs	r1, #4
 80174ec:	4638      	mov	r0, r7
 80174ee:	f7ff ff9f 	bl	8017430 <__sfmoreglue>
 80174f2:	6030      	str	r0, [r6, #0]
 80174f4:	2800      	cmp	r0, #0
 80174f6:	d1f1      	bne.n	80174dc <__sfp+0x20>
 80174f8:	230c      	movs	r3, #12
 80174fa:	603b      	str	r3, [r7, #0]
 80174fc:	4604      	mov	r4, r0
 80174fe:	4620      	mov	r0, r4
 8017500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017502:	4b0b      	ldr	r3, [pc, #44]	; (8017530 <__sfp+0x74>)
 8017504:	6665      	str	r5, [r4, #100]	; 0x64
 8017506:	e9c4 5500 	strd	r5, r5, [r4]
 801750a:	60a5      	str	r5, [r4, #8]
 801750c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017510:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017514:	2208      	movs	r2, #8
 8017516:	4629      	mov	r1, r5
 8017518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801751c:	f7ff fc5b 	bl	8016dd6 <memset>
 8017520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017528:	e7e9      	b.n	80174fe <__sfp+0x42>
 801752a:	bf00      	nop
 801752c:	0801a1d0 	.word	0x0801a1d0
 8017530:	ffff0001 	.word	0xffff0001

08017534 <_fwalk_reent>:
 8017534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017538:	4680      	mov	r8, r0
 801753a:	4689      	mov	r9, r1
 801753c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017540:	2600      	movs	r6, #0
 8017542:	b914      	cbnz	r4, 801754a <_fwalk_reent+0x16>
 8017544:	4630      	mov	r0, r6
 8017546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801754a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801754e:	3f01      	subs	r7, #1
 8017550:	d501      	bpl.n	8017556 <_fwalk_reent+0x22>
 8017552:	6824      	ldr	r4, [r4, #0]
 8017554:	e7f5      	b.n	8017542 <_fwalk_reent+0xe>
 8017556:	89ab      	ldrh	r3, [r5, #12]
 8017558:	2b01      	cmp	r3, #1
 801755a:	d907      	bls.n	801756c <_fwalk_reent+0x38>
 801755c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017560:	3301      	adds	r3, #1
 8017562:	d003      	beq.n	801756c <_fwalk_reent+0x38>
 8017564:	4629      	mov	r1, r5
 8017566:	4640      	mov	r0, r8
 8017568:	47c8      	blx	r9
 801756a:	4306      	orrs	r6, r0
 801756c:	3568      	adds	r5, #104	; 0x68
 801756e:	e7ee      	b.n	801754e <_fwalk_reent+0x1a>

08017570 <__swhatbuf_r>:
 8017570:	b570      	push	{r4, r5, r6, lr}
 8017572:	460e      	mov	r6, r1
 8017574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017578:	2900      	cmp	r1, #0
 801757a:	b096      	sub	sp, #88	; 0x58
 801757c:	4614      	mov	r4, r2
 801757e:	461d      	mov	r5, r3
 8017580:	da07      	bge.n	8017592 <__swhatbuf_r+0x22>
 8017582:	2300      	movs	r3, #0
 8017584:	602b      	str	r3, [r5, #0]
 8017586:	89b3      	ldrh	r3, [r6, #12]
 8017588:	061a      	lsls	r2, r3, #24
 801758a:	d410      	bmi.n	80175ae <__swhatbuf_r+0x3e>
 801758c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017590:	e00e      	b.n	80175b0 <__swhatbuf_r+0x40>
 8017592:	466a      	mov	r2, sp
 8017594:	f000 fb92 	bl	8017cbc <_fstat_r>
 8017598:	2800      	cmp	r0, #0
 801759a:	dbf2      	blt.n	8017582 <__swhatbuf_r+0x12>
 801759c:	9a01      	ldr	r2, [sp, #4]
 801759e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80175a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80175a6:	425a      	negs	r2, r3
 80175a8:	415a      	adcs	r2, r3
 80175aa:	602a      	str	r2, [r5, #0]
 80175ac:	e7ee      	b.n	801758c <__swhatbuf_r+0x1c>
 80175ae:	2340      	movs	r3, #64	; 0x40
 80175b0:	2000      	movs	r0, #0
 80175b2:	6023      	str	r3, [r4, #0]
 80175b4:	b016      	add	sp, #88	; 0x58
 80175b6:	bd70      	pop	{r4, r5, r6, pc}

080175b8 <__smakebuf_r>:
 80175b8:	898b      	ldrh	r3, [r1, #12]
 80175ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80175bc:	079d      	lsls	r5, r3, #30
 80175be:	4606      	mov	r6, r0
 80175c0:	460c      	mov	r4, r1
 80175c2:	d507      	bpl.n	80175d4 <__smakebuf_r+0x1c>
 80175c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80175c8:	6023      	str	r3, [r4, #0]
 80175ca:	6123      	str	r3, [r4, #16]
 80175cc:	2301      	movs	r3, #1
 80175ce:	6163      	str	r3, [r4, #20]
 80175d0:	b002      	add	sp, #8
 80175d2:	bd70      	pop	{r4, r5, r6, pc}
 80175d4:	ab01      	add	r3, sp, #4
 80175d6:	466a      	mov	r2, sp
 80175d8:	f7ff ffca 	bl	8017570 <__swhatbuf_r>
 80175dc:	9900      	ldr	r1, [sp, #0]
 80175de:	4605      	mov	r5, r0
 80175e0:	4630      	mov	r0, r6
 80175e2:	f7ff fc4f 	bl	8016e84 <_malloc_r>
 80175e6:	b948      	cbnz	r0, 80175fc <__smakebuf_r+0x44>
 80175e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ec:	059a      	lsls	r2, r3, #22
 80175ee:	d4ef      	bmi.n	80175d0 <__smakebuf_r+0x18>
 80175f0:	f023 0303 	bic.w	r3, r3, #3
 80175f4:	f043 0302 	orr.w	r3, r3, #2
 80175f8:	81a3      	strh	r3, [r4, #12]
 80175fa:	e7e3      	b.n	80175c4 <__smakebuf_r+0xc>
 80175fc:	4b0d      	ldr	r3, [pc, #52]	; (8017634 <__smakebuf_r+0x7c>)
 80175fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8017600:	89a3      	ldrh	r3, [r4, #12]
 8017602:	6020      	str	r0, [r4, #0]
 8017604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017608:	81a3      	strh	r3, [r4, #12]
 801760a:	9b00      	ldr	r3, [sp, #0]
 801760c:	6163      	str	r3, [r4, #20]
 801760e:	9b01      	ldr	r3, [sp, #4]
 8017610:	6120      	str	r0, [r4, #16]
 8017612:	b15b      	cbz	r3, 801762c <__smakebuf_r+0x74>
 8017614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017618:	4630      	mov	r0, r6
 801761a:	f000 fb61 	bl	8017ce0 <_isatty_r>
 801761e:	b128      	cbz	r0, 801762c <__smakebuf_r+0x74>
 8017620:	89a3      	ldrh	r3, [r4, #12]
 8017622:	f023 0303 	bic.w	r3, r3, #3
 8017626:	f043 0301 	orr.w	r3, r3, #1
 801762a:	81a3      	strh	r3, [r4, #12]
 801762c:	89a3      	ldrh	r3, [r4, #12]
 801762e:	431d      	orrs	r5, r3
 8017630:	81a5      	strh	r5, [r4, #12]
 8017632:	e7cd      	b.n	80175d0 <__smakebuf_r+0x18>
 8017634:	08017425 	.word	0x08017425

08017638 <__malloc_lock>:
 8017638:	4770      	bx	lr

0801763a <__malloc_unlock>:
 801763a:	4770      	bx	lr

0801763c <__ssputs_r>:
 801763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017640:	688e      	ldr	r6, [r1, #8]
 8017642:	429e      	cmp	r6, r3
 8017644:	4682      	mov	sl, r0
 8017646:	460c      	mov	r4, r1
 8017648:	4690      	mov	r8, r2
 801764a:	4699      	mov	r9, r3
 801764c:	d837      	bhi.n	80176be <__ssputs_r+0x82>
 801764e:	898a      	ldrh	r2, [r1, #12]
 8017650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017654:	d031      	beq.n	80176ba <__ssputs_r+0x7e>
 8017656:	6825      	ldr	r5, [r4, #0]
 8017658:	6909      	ldr	r1, [r1, #16]
 801765a:	1a6f      	subs	r7, r5, r1
 801765c:	6965      	ldr	r5, [r4, #20]
 801765e:	2302      	movs	r3, #2
 8017660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017664:	fb95 f5f3 	sdiv	r5, r5, r3
 8017668:	f109 0301 	add.w	r3, r9, #1
 801766c:	443b      	add	r3, r7
 801766e:	429d      	cmp	r5, r3
 8017670:	bf38      	it	cc
 8017672:	461d      	movcc	r5, r3
 8017674:	0553      	lsls	r3, r2, #21
 8017676:	d530      	bpl.n	80176da <__ssputs_r+0x9e>
 8017678:	4629      	mov	r1, r5
 801767a:	f7ff fc03 	bl	8016e84 <_malloc_r>
 801767e:	4606      	mov	r6, r0
 8017680:	b950      	cbnz	r0, 8017698 <__ssputs_r+0x5c>
 8017682:	230c      	movs	r3, #12
 8017684:	f8ca 3000 	str.w	r3, [sl]
 8017688:	89a3      	ldrh	r3, [r4, #12]
 801768a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801768e:	81a3      	strh	r3, [r4, #12]
 8017690:	f04f 30ff 	mov.w	r0, #4294967295
 8017694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017698:	463a      	mov	r2, r7
 801769a:	6921      	ldr	r1, [r4, #16]
 801769c:	f7ff fb90 	bl	8016dc0 <memcpy>
 80176a0:	89a3      	ldrh	r3, [r4, #12]
 80176a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80176a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176aa:	81a3      	strh	r3, [r4, #12]
 80176ac:	6126      	str	r6, [r4, #16]
 80176ae:	6165      	str	r5, [r4, #20]
 80176b0:	443e      	add	r6, r7
 80176b2:	1bed      	subs	r5, r5, r7
 80176b4:	6026      	str	r6, [r4, #0]
 80176b6:	60a5      	str	r5, [r4, #8]
 80176b8:	464e      	mov	r6, r9
 80176ba:	454e      	cmp	r6, r9
 80176bc:	d900      	bls.n	80176c0 <__ssputs_r+0x84>
 80176be:	464e      	mov	r6, r9
 80176c0:	4632      	mov	r2, r6
 80176c2:	4641      	mov	r1, r8
 80176c4:	6820      	ldr	r0, [r4, #0]
 80176c6:	f000 fb2d 	bl	8017d24 <memmove>
 80176ca:	68a3      	ldr	r3, [r4, #8]
 80176cc:	1b9b      	subs	r3, r3, r6
 80176ce:	60a3      	str	r3, [r4, #8]
 80176d0:	6823      	ldr	r3, [r4, #0]
 80176d2:	441e      	add	r6, r3
 80176d4:	6026      	str	r6, [r4, #0]
 80176d6:	2000      	movs	r0, #0
 80176d8:	e7dc      	b.n	8017694 <__ssputs_r+0x58>
 80176da:	462a      	mov	r2, r5
 80176dc:	f000 fb3b 	bl	8017d56 <_realloc_r>
 80176e0:	4606      	mov	r6, r0
 80176e2:	2800      	cmp	r0, #0
 80176e4:	d1e2      	bne.n	80176ac <__ssputs_r+0x70>
 80176e6:	6921      	ldr	r1, [r4, #16]
 80176e8:	4650      	mov	r0, sl
 80176ea:	f7ff fb7d 	bl	8016de8 <_free_r>
 80176ee:	e7c8      	b.n	8017682 <__ssputs_r+0x46>

080176f0 <_svfiprintf_r>:
 80176f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176f4:	461d      	mov	r5, r3
 80176f6:	898b      	ldrh	r3, [r1, #12]
 80176f8:	061f      	lsls	r7, r3, #24
 80176fa:	b09d      	sub	sp, #116	; 0x74
 80176fc:	4680      	mov	r8, r0
 80176fe:	460c      	mov	r4, r1
 8017700:	4616      	mov	r6, r2
 8017702:	d50f      	bpl.n	8017724 <_svfiprintf_r+0x34>
 8017704:	690b      	ldr	r3, [r1, #16]
 8017706:	b96b      	cbnz	r3, 8017724 <_svfiprintf_r+0x34>
 8017708:	2140      	movs	r1, #64	; 0x40
 801770a:	f7ff fbbb 	bl	8016e84 <_malloc_r>
 801770e:	6020      	str	r0, [r4, #0]
 8017710:	6120      	str	r0, [r4, #16]
 8017712:	b928      	cbnz	r0, 8017720 <_svfiprintf_r+0x30>
 8017714:	230c      	movs	r3, #12
 8017716:	f8c8 3000 	str.w	r3, [r8]
 801771a:	f04f 30ff 	mov.w	r0, #4294967295
 801771e:	e0c8      	b.n	80178b2 <_svfiprintf_r+0x1c2>
 8017720:	2340      	movs	r3, #64	; 0x40
 8017722:	6163      	str	r3, [r4, #20]
 8017724:	2300      	movs	r3, #0
 8017726:	9309      	str	r3, [sp, #36]	; 0x24
 8017728:	2320      	movs	r3, #32
 801772a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801772e:	2330      	movs	r3, #48	; 0x30
 8017730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017734:	9503      	str	r5, [sp, #12]
 8017736:	f04f 0b01 	mov.w	fp, #1
 801773a:	4637      	mov	r7, r6
 801773c:	463d      	mov	r5, r7
 801773e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017742:	b10b      	cbz	r3, 8017748 <_svfiprintf_r+0x58>
 8017744:	2b25      	cmp	r3, #37	; 0x25
 8017746:	d13e      	bne.n	80177c6 <_svfiprintf_r+0xd6>
 8017748:	ebb7 0a06 	subs.w	sl, r7, r6
 801774c:	d00b      	beq.n	8017766 <_svfiprintf_r+0x76>
 801774e:	4653      	mov	r3, sl
 8017750:	4632      	mov	r2, r6
 8017752:	4621      	mov	r1, r4
 8017754:	4640      	mov	r0, r8
 8017756:	f7ff ff71 	bl	801763c <__ssputs_r>
 801775a:	3001      	adds	r0, #1
 801775c:	f000 80a4 	beq.w	80178a8 <_svfiprintf_r+0x1b8>
 8017760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017762:	4453      	add	r3, sl
 8017764:	9309      	str	r3, [sp, #36]	; 0x24
 8017766:	783b      	ldrb	r3, [r7, #0]
 8017768:	2b00      	cmp	r3, #0
 801776a:	f000 809d 	beq.w	80178a8 <_svfiprintf_r+0x1b8>
 801776e:	2300      	movs	r3, #0
 8017770:	f04f 32ff 	mov.w	r2, #4294967295
 8017774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017778:	9304      	str	r3, [sp, #16]
 801777a:	9307      	str	r3, [sp, #28]
 801777c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017780:	931a      	str	r3, [sp, #104]	; 0x68
 8017782:	462f      	mov	r7, r5
 8017784:	2205      	movs	r2, #5
 8017786:	f817 1b01 	ldrb.w	r1, [r7], #1
 801778a:	4850      	ldr	r0, [pc, #320]	; (80178cc <_svfiprintf_r+0x1dc>)
 801778c:	f7e8 fd48 	bl	8000220 <memchr>
 8017790:	9b04      	ldr	r3, [sp, #16]
 8017792:	b9d0      	cbnz	r0, 80177ca <_svfiprintf_r+0xda>
 8017794:	06d9      	lsls	r1, r3, #27
 8017796:	bf44      	itt	mi
 8017798:	2220      	movmi	r2, #32
 801779a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801779e:	071a      	lsls	r2, r3, #28
 80177a0:	bf44      	itt	mi
 80177a2:	222b      	movmi	r2, #43	; 0x2b
 80177a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177a8:	782a      	ldrb	r2, [r5, #0]
 80177aa:	2a2a      	cmp	r2, #42	; 0x2a
 80177ac:	d015      	beq.n	80177da <_svfiprintf_r+0xea>
 80177ae:	9a07      	ldr	r2, [sp, #28]
 80177b0:	462f      	mov	r7, r5
 80177b2:	2000      	movs	r0, #0
 80177b4:	250a      	movs	r5, #10
 80177b6:	4639      	mov	r1, r7
 80177b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177bc:	3b30      	subs	r3, #48	; 0x30
 80177be:	2b09      	cmp	r3, #9
 80177c0:	d94d      	bls.n	801785e <_svfiprintf_r+0x16e>
 80177c2:	b1b8      	cbz	r0, 80177f4 <_svfiprintf_r+0x104>
 80177c4:	e00f      	b.n	80177e6 <_svfiprintf_r+0xf6>
 80177c6:	462f      	mov	r7, r5
 80177c8:	e7b8      	b.n	801773c <_svfiprintf_r+0x4c>
 80177ca:	4a40      	ldr	r2, [pc, #256]	; (80178cc <_svfiprintf_r+0x1dc>)
 80177cc:	1a80      	subs	r0, r0, r2
 80177ce:	fa0b f000 	lsl.w	r0, fp, r0
 80177d2:	4318      	orrs	r0, r3
 80177d4:	9004      	str	r0, [sp, #16]
 80177d6:	463d      	mov	r5, r7
 80177d8:	e7d3      	b.n	8017782 <_svfiprintf_r+0x92>
 80177da:	9a03      	ldr	r2, [sp, #12]
 80177dc:	1d11      	adds	r1, r2, #4
 80177de:	6812      	ldr	r2, [r2, #0]
 80177e0:	9103      	str	r1, [sp, #12]
 80177e2:	2a00      	cmp	r2, #0
 80177e4:	db01      	blt.n	80177ea <_svfiprintf_r+0xfa>
 80177e6:	9207      	str	r2, [sp, #28]
 80177e8:	e004      	b.n	80177f4 <_svfiprintf_r+0x104>
 80177ea:	4252      	negs	r2, r2
 80177ec:	f043 0302 	orr.w	r3, r3, #2
 80177f0:	9207      	str	r2, [sp, #28]
 80177f2:	9304      	str	r3, [sp, #16]
 80177f4:	783b      	ldrb	r3, [r7, #0]
 80177f6:	2b2e      	cmp	r3, #46	; 0x2e
 80177f8:	d10c      	bne.n	8017814 <_svfiprintf_r+0x124>
 80177fa:	787b      	ldrb	r3, [r7, #1]
 80177fc:	2b2a      	cmp	r3, #42	; 0x2a
 80177fe:	d133      	bne.n	8017868 <_svfiprintf_r+0x178>
 8017800:	9b03      	ldr	r3, [sp, #12]
 8017802:	1d1a      	adds	r2, r3, #4
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	9203      	str	r2, [sp, #12]
 8017808:	2b00      	cmp	r3, #0
 801780a:	bfb8      	it	lt
 801780c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017810:	3702      	adds	r7, #2
 8017812:	9305      	str	r3, [sp, #20]
 8017814:	4d2e      	ldr	r5, [pc, #184]	; (80178d0 <_svfiprintf_r+0x1e0>)
 8017816:	7839      	ldrb	r1, [r7, #0]
 8017818:	2203      	movs	r2, #3
 801781a:	4628      	mov	r0, r5
 801781c:	f7e8 fd00 	bl	8000220 <memchr>
 8017820:	b138      	cbz	r0, 8017832 <_svfiprintf_r+0x142>
 8017822:	2340      	movs	r3, #64	; 0x40
 8017824:	1b40      	subs	r0, r0, r5
 8017826:	fa03 f000 	lsl.w	r0, r3, r0
 801782a:	9b04      	ldr	r3, [sp, #16]
 801782c:	4303      	orrs	r3, r0
 801782e:	3701      	adds	r7, #1
 8017830:	9304      	str	r3, [sp, #16]
 8017832:	7839      	ldrb	r1, [r7, #0]
 8017834:	4827      	ldr	r0, [pc, #156]	; (80178d4 <_svfiprintf_r+0x1e4>)
 8017836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801783a:	2206      	movs	r2, #6
 801783c:	1c7e      	adds	r6, r7, #1
 801783e:	f7e8 fcef 	bl	8000220 <memchr>
 8017842:	2800      	cmp	r0, #0
 8017844:	d038      	beq.n	80178b8 <_svfiprintf_r+0x1c8>
 8017846:	4b24      	ldr	r3, [pc, #144]	; (80178d8 <_svfiprintf_r+0x1e8>)
 8017848:	bb13      	cbnz	r3, 8017890 <_svfiprintf_r+0x1a0>
 801784a:	9b03      	ldr	r3, [sp, #12]
 801784c:	3307      	adds	r3, #7
 801784e:	f023 0307 	bic.w	r3, r3, #7
 8017852:	3308      	adds	r3, #8
 8017854:	9303      	str	r3, [sp, #12]
 8017856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017858:	444b      	add	r3, r9
 801785a:	9309      	str	r3, [sp, #36]	; 0x24
 801785c:	e76d      	b.n	801773a <_svfiprintf_r+0x4a>
 801785e:	fb05 3202 	mla	r2, r5, r2, r3
 8017862:	2001      	movs	r0, #1
 8017864:	460f      	mov	r7, r1
 8017866:	e7a6      	b.n	80177b6 <_svfiprintf_r+0xc6>
 8017868:	2300      	movs	r3, #0
 801786a:	3701      	adds	r7, #1
 801786c:	9305      	str	r3, [sp, #20]
 801786e:	4619      	mov	r1, r3
 8017870:	250a      	movs	r5, #10
 8017872:	4638      	mov	r0, r7
 8017874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017878:	3a30      	subs	r2, #48	; 0x30
 801787a:	2a09      	cmp	r2, #9
 801787c:	d903      	bls.n	8017886 <_svfiprintf_r+0x196>
 801787e:	2b00      	cmp	r3, #0
 8017880:	d0c8      	beq.n	8017814 <_svfiprintf_r+0x124>
 8017882:	9105      	str	r1, [sp, #20]
 8017884:	e7c6      	b.n	8017814 <_svfiprintf_r+0x124>
 8017886:	fb05 2101 	mla	r1, r5, r1, r2
 801788a:	2301      	movs	r3, #1
 801788c:	4607      	mov	r7, r0
 801788e:	e7f0      	b.n	8017872 <_svfiprintf_r+0x182>
 8017890:	ab03      	add	r3, sp, #12
 8017892:	9300      	str	r3, [sp, #0]
 8017894:	4622      	mov	r2, r4
 8017896:	4b11      	ldr	r3, [pc, #68]	; (80178dc <_svfiprintf_r+0x1ec>)
 8017898:	a904      	add	r1, sp, #16
 801789a:	4640      	mov	r0, r8
 801789c:	f3af 8000 	nop.w
 80178a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80178a4:	4681      	mov	r9, r0
 80178a6:	d1d6      	bne.n	8017856 <_svfiprintf_r+0x166>
 80178a8:	89a3      	ldrh	r3, [r4, #12]
 80178aa:	065b      	lsls	r3, r3, #25
 80178ac:	f53f af35 	bmi.w	801771a <_svfiprintf_r+0x2a>
 80178b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178b2:	b01d      	add	sp, #116	; 0x74
 80178b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b8:	ab03      	add	r3, sp, #12
 80178ba:	9300      	str	r3, [sp, #0]
 80178bc:	4622      	mov	r2, r4
 80178be:	4b07      	ldr	r3, [pc, #28]	; (80178dc <_svfiprintf_r+0x1ec>)
 80178c0:	a904      	add	r1, sp, #16
 80178c2:	4640      	mov	r0, r8
 80178c4:	f000 f882 	bl	80179cc <_printf_i>
 80178c8:	e7ea      	b.n	80178a0 <_svfiprintf_r+0x1b0>
 80178ca:	bf00      	nop
 80178cc:	0801a234 	.word	0x0801a234
 80178d0:	0801a23a 	.word	0x0801a23a
 80178d4:	0801a23e 	.word	0x0801a23e
 80178d8:	00000000 	.word	0x00000000
 80178dc:	0801763d 	.word	0x0801763d

080178e0 <_printf_common>:
 80178e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178e4:	4691      	mov	r9, r2
 80178e6:	461f      	mov	r7, r3
 80178e8:	688a      	ldr	r2, [r1, #8]
 80178ea:	690b      	ldr	r3, [r1, #16]
 80178ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80178f0:	4293      	cmp	r3, r2
 80178f2:	bfb8      	it	lt
 80178f4:	4613      	movlt	r3, r2
 80178f6:	f8c9 3000 	str.w	r3, [r9]
 80178fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80178fe:	4606      	mov	r6, r0
 8017900:	460c      	mov	r4, r1
 8017902:	b112      	cbz	r2, 801790a <_printf_common+0x2a>
 8017904:	3301      	adds	r3, #1
 8017906:	f8c9 3000 	str.w	r3, [r9]
 801790a:	6823      	ldr	r3, [r4, #0]
 801790c:	0699      	lsls	r1, r3, #26
 801790e:	bf42      	ittt	mi
 8017910:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017914:	3302      	addmi	r3, #2
 8017916:	f8c9 3000 	strmi.w	r3, [r9]
 801791a:	6825      	ldr	r5, [r4, #0]
 801791c:	f015 0506 	ands.w	r5, r5, #6
 8017920:	d107      	bne.n	8017932 <_printf_common+0x52>
 8017922:	f104 0a19 	add.w	sl, r4, #25
 8017926:	68e3      	ldr	r3, [r4, #12]
 8017928:	f8d9 2000 	ldr.w	r2, [r9]
 801792c:	1a9b      	subs	r3, r3, r2
 801792e:	42ab      	cmp	r3, r5
 8017930:	dc28      	bgt.n	8017984 <_printf_common+0xa4>
 8017932:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017936:	6822      	ldr	r2, [r4, #0]
 8017938:	3300      	adds	r3, #0
 801793a:	bf18      	it	ne
 801793c:	2301      	movne	r3, #1
 801793e:	0692      	lsls	r2, r2, #26
 8017940:	d42d      	bmi.n	801799e <_printf_common+0xbe>
 8017942:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017946:	4639      	mov	r1, r7
 8017948:	4630      	mov	r0, r6
 801794a:	47c0      	blx	r8
 801794c:	3001      	adds	r0, #1
 801794e:	d020      	beq.n	8017992 <_printf_common+0xb2>
 8017950:	6823      	ldr	r3, [r4, #0]
 8017952:	68e5      	ldr	r5, [r4, #12]
 8017954:	f8d9 2000 	ldr.w	r2, [r9]
 8017958:	f003 0306 	and.w	r3, r3, #6
 801795c:	2b04      	cmp	r3, #4
 801795e:	bf08      	it	eq
 8017960:	1aad      	subeq	r5, r5, r2
 8017962:	68a3      	ldr	r3, [r4, #8]
 8017964:	6922      	ldr	r2, [r4, #16]
 8017966:	bf0c      	ite	eq
 8017968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801796c:	2500      	movne	r5, #0
 801796e:	4293      	cmp	r3, r2
 8017970:	bfc4      	itt	gt
 8017972:	1a9b      	subgt	r3, r3, r2
 8017974:	18ed      	addgt	r5, r5, r3
 8017976:	f04f 0900 	mov.w	r9, #0
 801797a:	341a      	adds	r4, #26
 801797c:	454d      	cmp	r5, r9
 801797e:	d11a      	bne.n	80179b6 <_printf_common+0xd6>
 8017980:	2000      	movs	r0, #0
 8017982:	e008      	b.n	8017996 <_printf_common+0xb6>
 8017984:	2301      	movs	r3, #1
 8017986:	4652      	mov	r2, sl
 8017988:	4639      	mov	r1, r7
 801798a:	4630      	mov	r0, r6
 801798c:	47c0      	blx	r8
 801798e:	3001      	adds	r0, #1
 8017990:	d103      	bne.n	801799a <_printf_common+0xba>
 8017992:	f04f 30ff 	mov.w	r0, #4294967295
 8017996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801799a:	3501      	adds	r5, #1
 801799c:	e7c3      	b.n	8017926 <_printf_common+0x46>
 801799e:	18e1      	adds	r1, r4, r3
 80179a0:	1c5a      	adds	r2, r3, #1
 80179a2:	2030      	movs	r0, #48	; 0x30
 80179a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179a8:	4422      	add	r2, r4
 80179aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179b2:	3302      	adds	r3, #2
 80179b4:	e7c5      	b.n	8017942 <_printf_common+0x62>
 80179b6:	2301      	movs	r3, #1
 80179b8:	4622      	mov	r2, r4
 80179ba:	4639      	mov	r1, r7
 80179bc:	4630      	mov	r0, r6
 80179be:	47c0      	blx	r8
 80179c0:	3001      	adds	r0, #1
 80179c2:	d0e6      	beq.n	8017992 <_printf_common+0xb2>
 80179c4:	f109 0901 	add.w	r9, r9, #1
 80179c8:	e7d8      	b.n	801797c <_printf_common+0x9c>
	...

080179cc <_printf_i>:
 80179cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80179d4:	460c      	mov	r4, r1
 80179d6:	7e09      	ldrb	r1, [r1, #24]
 80179d8:	b085      	sub	sp, #20
 80179da:	296e      	cmp	r1, #110	; 0x6e
 80179dc:	4617      	mov	r7, r2
 80179de:	4606      	mov	r6, r0
 80179e0:	4698      	mov	r8, r3
 80179e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80179e4:	f000 80b3 	beq.w	8017b4e <_printf_i+0x182>
 80179e8:	d822      	bhi.n	8017a30 <_printf_i+0x64>
 80179ea:	2963      	cmp	r1, #99	; 0x63
 80179ec:	d036      	beq.n	8017a5c <_printf_i+0x90>
 80179ee:	d80a      	bhi.n	8017a06 <_printf_i+0x3a>
 80179f0:	2900      	cmp	r1, #0
 80179f2:	f000 80b9 	beq.w	8017b68 <_printf_i+0x19c>
 80179f6:	2958      	cmp	r1, #88	; 0x58
 80179f8:	f000 8083 	beq.w	8017b02 <_printf_i+0x136>
 80179fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017a04:	e032      	b.n	8017a6c <_printf_i+0xa0>
 8017a06:	2964      	cmp	r1, #100	; 0x64
 8017a08:	d001      	beq.n	8017a0e <_printf_i+0x42>
 8017a0a:	2969      	cmp	r1, #105	; 0x69
 8017a0c:	d1f6      	bne.n	80179fc <_printf_i+0x30>
 8017a0e:	6820      	ldr	r0, [r4, #0]
 8017a10:	6813      	ldr	r3, [r2, #0]
 8017a12:	0605      	lsls	r5, r0, #24
 8017a14:	f103 0104 	add.w	r1, r3, #4
 8017a18:	d52a      	bpl.n	8017a70 <_printf_i+0xa4>
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	6011      	str	r1, [r2, #0]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	da03      	bge.n	8017a2a <_printf_i+0x5e>
 8017a22:	222d      	movs	r2, #45	; 0x2d
 8017a24:	425b      	negs	r3, r3
 8017a26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017a2a:	486f      	ldr	r0, [pc, #444]	; (8017be8 <_printf_i+0x21c>)
 8017a2c:	220a      	movs	r2, #10
 8017a2e:	e039      	b.n	8017aa4 <_printf_i+0xd8>
 8017a30:	2973      	cmp	r1, #115	; 0x73
 8017a32:	f000 809d 	beq.w	8017b70 <_printf_i+0x1a4>
 8017a36:	d808      	bhi.n	8017a4a <_printf_i+0x7e>
 8017a38:	296f      	cmp	r1, #111	; 0x6f
 8017a3a:	d020      	beq.n	8017a7e <_printf_i+0xb2>
 8017a3c:	2970      	cmp	r1, #112	; 0x70
 8017a3e:	d1dd      	bne.n	80179fc <_printf_i+0x30>
 8017a40:	6823      	ldr	r3, [r4, #0]
 8017a42:	f043 0320 	orr.w	r3, r3, #32
 8017a46:	6023      	str	r3, [r4, #0]
 8017a48:	e003      	b.n	8017a52 <_printf_i+0x86>
 8017a4a:	2975      	cmp	r1, #117	; 0x75
 8017a4c:	d017      	beq.n	8017a7e <_printf_i+0xb2>
 8017a4e:	2978      	cmp	r1, #120	; 0x78
 8017a50:	d1d4      	bne.n	80179fc <_printf_i+0x30>
 8017a52:	2378      	movs	r3, #120	; 0x78
 8017a54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017a58:	4864      	ldr	r0, [pc, #400]	; (8017bec <_printf_i+0x220>)
 8017a5a:	e055      	b.n	8017b08 <_printf_i+0x13c>
 8017a5c:	6813      	ldr	r3, [r2, #0]
 8017a5e:	1d19      	adds	r1, r3, #4
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	6011      	str	r1, [r2, #0]
 8017a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a6c:	2301      	movs	r3, #1
 8017a6e:	e08c      	b.n	8017b8a <_printf_i+0x1be>
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	6011      	str	r1, [r2, #0]
 8017a74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017a78:	bf18      	it	ne
 8017a7a:	b21b      	sxthne	r3, r3
 8017a7c:	e7cf      	b.n	8017a1e <_printf_i+0x52>
 8017a7e:	6813      	ldr	r3, [r2, #0]
 8017a80:	6825      	ldr	r5, [r4, #0]
 8017a82:	1d18      	adds	r0, r3, #4
 8017a84:	6010      	str	r0, [r2, #0]
 8017a86:	0628      	lsls	r0, r5, #24
 8017a88:	d501      	bpl.n	8017a8e <_printf_i+0xc2>
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	e002      	b.n	8017a94 <_printf_i+0xc8>
 8017a8e:	0668      	lsls	r0, r5, #25
 8017a90:	d5fb      	bpl.n	8017a8a <_printf_i+0xbe>
 8017a92:	881b      	ldrh	r3, [r3, #0]
 8017a94:	4854      	ldr	r0, [pc, #336]	; (8017be8 <_printf_i+0x21c>)
 8017a96:	296f      	cmp	r1, #111	; 0x6f
 8017a98:	bf14      	ite	ne
 8017a9a:	220a      	movne	r2, #10
 8017a9c:	2208      	moveq	r2, #8
 8017a9e:	2100      	movs	r1, #0
 8017aa0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017aa4:	6865      	ldr	r5, [r4, #4]
 8017aa6:	60a5      	str	r5, [r4, #8]
 8017aa8:	2d00      	cmp	r5, #0
 8017aaa:	f2c0 8095 	blt.w	8017bd8 <_printf_i+0x20c>
 8017aae:	6821      	ldr	r1, [r4, #0]
 8017ab0:	f021 0104 	bic.w	r1, r1, #4
 8017ab4:	6021      	str	r1, [r4, #0]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d13d      	bne.n	8017b36 <_printf_i+0x16a>
 8017aba:	2d00      	cmp	r5, #0
 8017abc:	f040 808e 	bne.w	8017bdc <_printf_i+0x210>
 8017ac0:	4665      	mov	r5, ip
 8017ac2:	2a08      	cmp	r2, #8
 8017ac4:	d10b      	bne.n	8017ade <_printf_i+0x112>
 8017ac6:	6823      	ldr	r3, [r4, #0]
 8017ac8:	07db      	lsls	r3, r3, #31
 8017aca:	d508      	bpl.n	8017ade <_printf_i+0x112>
 8017acc:	6923      	ldr	r3, [r4, #16]
 8017ace:	6862      	ldr	r2, [r4, #4]
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	bfde      	ittt	le
 8017ad4:	2330      	movle	r3, #48	; 0x30
 8017ad6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017ada:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ade:	ebac 0305 	sub.w	r3, ip, r5
 8017ae2:	6123      	str	r3, [r4, #16]
 8017ae4:	f8cd 8000 	str.w	r8, [sp]
 8017ae8:	463b      	mov	r3, r7
 8017aea:	aa03      	add	r2, sp, #12
 8017aec:	4621      	mov	r1, r4
 8017aee:	4630      	mov	r0, r6
 8017af0:	f7ff fef6 	bl	80178e0 <_printf_common>
 8017af4:	3001      	adds	r0, #1
 8017af6:	d14d      	bne.n	8017b94 <_printf_i+0x1c8>
 8017af8:	f04f 30ff 	mov.w	r0, #4294967295
 8017afc:	b005      	add	sp, #20
 8017afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b02:	4839      	ldr	r0, [pc, #228]	; (8017be8 <_printf_i+0x21c>)
 8017b04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017b08:	6813      	ldr	r3, [r2, #0]
 8017b0a:	6821      	ldr	r1, [r4, #0]
 8017b0c:	1d1d      	adds	r5, r3, #4
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	6015      	str	r5, [r2, #0]
 8017b12:	060a      	lsls	r2, r1, #24
 8017b14:	d50b      	bpl.n	8017b2e <_printf_i+0x162>
 8017b16:	07ca      	lsls	r2, r1, #31
 8017b18:	bf44      	itt	mi
 8017b1a:	f041 0120 	orrmi.w	r1, r1, #32
 8017b1e:	6021      	strmi	r1, [r4, #0]
 8017b20:	b91b      	cbnz	r3, 8017b2a <_printf_i+0x15e>
 8017b22:	6822      	ldr	r2, [r4, #0]
 8017b24:	f022 0220 	bic.w	r2, r2, #32
 8017b28:	6022      	str	r2, [r4, #0]
 8017b2a:	2210      	movs	r2, #16
 8017b2c:	e7b7      	b.n	8017a9e <_printf_i+0xd2>
 8017b2e:	064d      	lsls	r5, r1, #25
 8017b30:	bf48      	it	mi
 8017b32:	b29b      	uxthmi	r3, r3
 8017b34:	e7ef      	b.n	8017b16 <_printf_i+0x14a>
 8017b36:	4665      	mov	r5, ip
 8017b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b3c:	fb02 3311 	mls	r3, r2, r1, r3
 8017b40:	5cc3      	ldrb	r3, [r0, r3]
 8017b42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017b46:	460b      	mov	r3, r1
 8017b48:	2900      	cmp	r1, #0
 8017b4a:	d1f5      	bne.n	8017b38 <_printf_i+0x16c>
 8017b4c:	e7b9      	b.n	8017ac2 <_printf_i+0xf6>
 8017b4e:	6813      	ldr	r3, [r2, #0]
 8017b50:	6825      	ldr	r5, [r4, #0]
 8017b52:	6961      	ldr	r1, [r4, #20]
 8017b54:	1d18      	adds	r0, r3, #4
 8017b56:	6010      	str	r0, [r2, #0]
 8017b58:	0628      	lsls	r0, r5, #24
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	d501      	bpl.n	8017b62 <_printf_i+0x196>
 8017b5e:	6019      	str	r1, [r3, #0]
 8017b60:	e002      	b.n	8017b68 <_printf_i+0x19c>
 8017b62:	066a      	lsls	r2, r5, #25
 8017b64:	d5fb      	bpl.n	8017b5e <_printf_i+0x192>
 8017b66:	8019      	strh	r1, [r3, #0]
 8017b68:	2300      	movs	r3, #0
 8017b6a:	6123      	str	r3, [r4, #16]
 8017b6c:	4665      	mov	r5, ip
 8017b6e:	e7b9      	b.n	8017ae4 <_printf_i+0x118>
 8017b70:	6813      	ldr	r3, [r2, #0]
 8017b72:	1d19      	adds	r1, r3, #4
 8017b74:	6011      	str	r1, [r2, #0]
 8017b76:	681d      	ldr	r5, [r3, #0]
 8017b78:	6862      	ldr	r2, [r4, #4]
 8017b7a:	2100      	movs	r1, #0
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	f7e8 fb4f 	bl	8000220 <memchr>
 8017b82:	b108      	cbz	r0, 8017b88 <_printf_i+0x1bc>
 8017b84:	1b40      	subs	r0, r0, r5
 8017b86:	6060      	str	r0, [r4, #4]
 8017b88:	6863      	ldr	r3, [r4, #4]
 8017b8a:	6123      	str	r3, [r4, #16]
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b92:	e7a7      	b.n	8017ae4 <_printf_i+0x118>
 8017b94:	6923      	ldr	r3, [r4, #16]
 8017b96:	462a      	mov	r2, r5
 8017b98:	4639      	mov	r1, r7
 8017b9a:	4630      	mov	r0, r6
 8017b9c:	47c0      	blx	r8
 8017b9e:	3001      	adds	r0, #1
 8017ba0:	d0aa      	beq.n	8017af8 <_printf_i+0x12c>
 8017ba2:	6823      	ldr	r3, [r4, #0]
 8017ba4:	079b      	lsls	r3, r3, #30
 8017ba6:	d413      	bmi.n	8017bd0 <_printf_i+0x204>
 8017ba8:	68e0      	ldr	r0, [r4, #12]
 8017baa:	9b03      	ldr	r3, [sp, #12]
 8017bac:	4298      	cmp	r0, r3
 8017bae:	bfb8      	it	lt
 8017bb0:	4618      	movlt	r0, r3
 8017bb2:	e7a3      	b.n	8017afc <_printf_i+0x130>
 8017bb4:	2301      	movs	r3, #1
 8017bb6:	464a      	mov	r2, r9
 8017bb8:	4639      	mov	r1, r7
 8017bba:	4630      	mov	r0, r6
 8017bbc:	47c0      	blx	r8
 8017bbe:	3001      	adds	r0, #1
 8017bc0:	d09a      	beq.n	8017af8 <_printf_i+0x12c>
 8017bc2:	3501      	adds	r5, #1
 8017bc4:	68e3      	ldr	r3, [r4, #12]
 8017bc6:	9a03      	ldr	r2, [sp, #12]
 8017bc8:	1a9b      	subs	r3, r3, r2
 8017bca:	42ab      	cmp	r3, r5
 8017bcc:	dcf2      	bgt.n	8017bb4 <_printf_i+0x1e8>
 8017bce:	e7eb      	b.n	8017ba8 <_printf_i+0x1dc>
 8017bd0:	2500      	movs	r5, #0
 8017bd2:	f104 0919 	add.w	r9, r4, #25
 8017bd6:	e7f5      	b.n	8017bc4 <_printf_i+0x1f8>
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d1ac      	bne.n	8017b36 <_printf_i+0x16a>
 8017bdc:	7803      	ldrb	r3, [r0, #0]
 8017bde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017be2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017be6:	e76c      	b.n	8017ac2 <_printf_i+0xf6>
 8017be8:	0801a245 	.word	0x0801a245
 8017bec:	0801a256 	.word	0x0801a256

08017bf0 <__sread>:
 8017bf0:	b510      	push	{r4, lr}
 8017bf2:	460c      	mov	r4, r1
 8017bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bf8:	f000 f8d4 	bl	8017da4 <_read_r>
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	bfab      	itete	ge
 8017c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c02:	89a3      	ldrhlt	r3, [r4, #12]
 8017c04:	181b      	addge	r3, r3, r0
 8017c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c0a:	bfac      	ite	ge
 8017c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c0e:	81a3      	strhlt	r3, [r4, #12]
 8017c10:	bd10      	pop	{r4, pc}

08017c12 <__swrite>:
 8017c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c16:	461f      	mov	r7, r3
 8017c18:	898b      	ldrh	r3, [r1, #12]
 8017c1a:	05db      	lsls	r3, r3, #23
 8017c1c:	4605      	mov	r5, r0
 8017c1e:	460c      	mov	r4, r1
 8017c20:	4616      	mov	r6, r2
 8017c22:	d505      	bpl.n	8017c30 <__swrite+0x1e>
 8017c24:	2302      	movs	r3, #2
 8017c26:	2200      	movs	r2, #0
 8017c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c2c:	f000 f868 	bl	8017d00 <_lseek_r>
 8017c30:	89a3      	ldrh	r3, [r4, #12]
 8017c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c3a:	81a3      	strh	r3, [r4, #12]
 8017c3c:	4632      	mov	r2, r6
 8017c3e:	463b      	mov	r3, r7
 8017c40:	4628      	mov	r0, r5
 8017c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c46:	f000 b817 	b.w	8017c78 <_write_r>

08017c4a <__sseek>:
 8017c4a:	b510      	push	{r4, lr}
 8017c4c:	460c      	mov	r4, r1
 8017c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c52:	f000 f855 	bl	8017d00 <_lseek_r>
 8017c56:	1c43      	adds	r3, r0, #1
 8017c58:	89a3      	ldrh	r3, [r4, #12]
 8017c5a:	bf15      	itete	ne
 8017c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c66:	81a3      	strheq	r3, [r4, #12]
 8017c68:	bf18      	it	ne
 8017c6a:	81a3      	strhne	r3, [r4, #12]
 8017c6c:	bd10      	pop	{r4, pc}

08017c6e <__sclose>:
 8017c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c72:	f000 b813 	b.w	8017c9c <_close_r>
	...

08017c78 <_write_r>:
 8017c78:	b538      	push	{r3, r4, r5, lr}
 8017c7a:	4c07      	ldr	r4, [pc, #28]	; (8017c98 <_write_r+0x20>)
 8017c7c:	4605      	mov	r5, r0
 8017c7e:	4608      	mov	r0, r1
 8017c80:	4611      	mov	r1, r2
 8017c82:	2200      	movs	r2, #0
 8017c84:	6022      	str	r2, [r4, #0]
 8017c86:	461a      	mov	r2, r3
 8017c88:	f7eb f825 	bl	8002cd6 <_write>
 8017c8c:	1c43      	adds	r3, r0, #1
 8017c8e:	d102      	bne.n	8017c96 <_write_r+0x1e>
 8017c90:	6823      	ldr	r3, [r4, #0]
 8017c92:	b103      	cbz	r3, 8017c96 <_write_r+0x1e>
 8017c94:	602b      	str	r3, [r5, #0]
 8017c96:	bd38      	pop	{r3, r4, r5, pc}
 8017c98:	200170c4 	.word	0x200170c4

08017c9c <_close_r>:
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	4c06      	ldr	r4, [pc, #24]	; (8017cb8 <_close_r+0x1c>)
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	4605      	mov	r5, r0
 8017ca4:	4608      	mov	r0, r1
 8017ca6:	6023      	str	r3, [r4, #0]
 8017ca8:	f7eb f831 	bl	8002d0e <_close>
 8017cac:	1c43      	adds	r3, r0, #1
 8017cae:	d102      	bne.n	8017cb6 <_close_r+0x1a>
 8017cb0:	6823      	ldr	r3, [r4, #0]
 8017cb2:	b103      	cbz	r3, 8017cb6 <_close_r+0x1a>
 8017cb4:	602b      	str	r3, [r5, #0]
 8017cb6:	bd38      	pop	{r3, r4, r5, pc}
 8017cb8:	200170c4 	.word	0x200170c4

08017cbc <_fstat_r>:
 8017cbc:	b538      	push	{r3, r4, r5, lr}
 8017cbe:	4c07      	ldr	r4, [pc, #28]	; (8017cdc <_fstat_r+0x20>)
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	4605      	mov	r5, r0
 8017cc4:	4608      	mov	r0, r1
 8017cc6:	4611      	mov	r1, r2
 8017cc8:	6023      	str	r3, [r4, #0]
 8017cca:	f7eb f82c 	bl	8002d26 <_fstat>
 8017cce:	1c43      	adds	r3, r0, #1
 8017cd0:	d102      	bne.n	8017cd8 <_fstat_r+0x1c>
 8017cd2:	6823      	ldr	r3, [r4, #0]
 8017cd4:	b103      	cbz	r3, 8017cd8 <_fstat_r+0x1c>
 8017cd6:	602b      	str	r3, [r5, #0]
 8017cd8:	bd38      	pop	{r3, r4, r5, pc}
 8017cda:	bf00      	nop
 8017cdc:	200170c4 	.word	0x200170c4

08017ce0 <_isatty_r>:
 8017ce0:	b538      	push	{r3, r4, r5, lr}
 8017ce2:	4c06      	ldr	r4, [pc, #24]	; (8017cfc <_isatty_r+0x1c>)
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	4605      	mov	r5, r0
 8017ce8:	4608      	mov	r0, r1
 8017cea:	6023      	str	r3, [r4, #0]
 8017cec:	f7eb f82b 	bl	8002d46 <_isatty>
 8017cf0:	1c43      	adds	r3, r0, #1
 8017cf2:	d102      	bne.n	8017cfa <_isatty_r+0x1a>
 8017cf4:	6823      	ldr	r3, [r4, #0]
 8017cf6:	b103      	cbz	r3, 8017cfa <_isatty_r+0x1a>
 8017cf8:	602b      	str	r3, [r5, #0]
 8017cfa:	bd38      	pop	{r3, r4, r5, pc}
 8017cfc:	200170c4 	.word	0x200170c4

08017d00 <_lseek_r>:
 8017d00:	b538      	push	{r3, r4, r5, lr}
 8017d02:	4c07      	ldr	r4, [pc, #28]	; (8017d20 <_lseek_r+0x20>)
 8017d04:	4605      	mov	r5, r0
 8017d06:	4608      	mov	r0, r1
 8017d08:	4611      	mov	r1, r2
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	6022      	str	r2, [r4, #0]
 8017d0e:	461a      	mov	r2, r3
 8017d10:	f7eb f824 	bl	8002d5c <_lseek>
 8017d14:	1c43      	adds	r3, r0, #1
 8017d16:	d102      	bne.n	8017d1e <_lseek_r+0x1e>
 8017d18:	6823      	ldr	r3, [r4, #0]
 8017d1a:	b103      	cbz	r3, 8017d1e <_lseek_r+0x1e>
 8017d1c:	602b      	str	r3, [r5, #0]
 8017d1e:	bd38      	pop	{r3, r4, r5, pc}
 8017d20:	200170c4 	.word	0x200170c4

08017d24 <memmove>:
 8017d24:	4288      	cmp	r0, r1
 8017d26:	b510      	push	{r4, lr}
 8017d28:	eb01 0302 	add.w	r3, r1, r2
 8017d2c:	d807      	bhi.n	8017d3e <memmove+0x1a>
 8017d2e:	1e42      	subs	r2, r0, #1
 8017d30:	4299      	cmp	r1, r3
 8017d32:	d00a      	beq.n	8017d4a <memmove+0x26>
 8017d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017d3c:	e7f8      	b.n	8017d30 <memmove+0xc>
 8017d3e:	4283      	cmp	r3, r0
 8017d40:	d9f5      	bls.n	8017d2e <memmove+0xa>
 8017d42:	1881      	adds	r1, r0, r2
 8017d44:	1ad2      	subs	r2, r2, r3
 8017d46:	42d3      	cmn	r3, r2
 8017d48:	d100      	bne.n	8017d4c <memmove+0x28>
 8017d4a:	bd10      	pop	{r4, pc}
 8017d4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017d54:	e7f7      	b.n	8017d46 <memmove+0x22>

08017d56 <_realloc_r>:
 8017d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d58:	4607      	mov	r7, r0
 8017d5a:	4614      	mov	r4, r2
 8017d5c:	460e      	mov	r6, r1
 8017d5e:	b921      	cbnz	r1, 8017d6a <_realloc_r+0x14>
 8017d60:	4611      	mov	r1, r2
 8017d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d66:	f7ff b88d 	b.w	8016e84 <_malloc_r>
 8017d6a:	b922      	cbnz	r2, 8017d76 <_realloc_r+0x20>
 8017d6c:	f7ff f83c 	bl	8016de8 <_free_r>
 8017d70:	4625      	mov	r5, r4
 8017d72:	4628      	mov	r0, r5
 8017d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d76:	f000 f827 	bl	8017dc8 <_malloc_usable_size_r>
 8017d7a:	42a0      	cmp	r0, r4
 8017d7c:	d20f      	bcs.n	8017d9e <_realloc_r+0x48>
 8017d7e:	4621      	mov	r1, r4
 8017d80:	4638      	mov	r0, r7
 8017d82:	f7ff f87f 	bl	8016e84 <_malloc_r>
 8017d86:	4605      	mov	r5, r0
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	d0f2      	beq.n	8017d72 <_realloc_r+0x1c>
 8017d8c:	4631      	mov	r1, r6
 8017d8e:	4622      	mov	r2, r4
 8017d90:	f7ff f816 	bl	8016dc0 <memcpy>
 8017d94:	4631      	mov	r1, r6
 8017d96:	4638      	mov	r0, r7
 8017d98:	f7ff f826 	bl	8016de8 <_free_r>
 8017d9c:	e7e9      	b.n	8017d72 <_realloc_r+0x1c>
 8017d9e:	4635      	mov	r5, r6
 8017da0:	e7e7      	b.n	8017d72 <_realloc_r+0x1c>
	...

08017da4 <_read_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4c07      	ldr	r4, [pc, #28]	; (8017dc4 <_read_r+0x20>)
 8017da8:	4605      	mov	r5, r0
 8017daa:	4608      	mov	r0, r1
 8017dac:	4611      	mov	r1, r2
 8017dae:	2200      	movs	r2, #0
 8017db0:	6022      	str	r2, [r4, #0]
 8017db2:	461a      	mov	r2, r3
 8017db4:	f7ea ff72 	bl	8002c9c <_read>
 8017db8:	1c43      	adds	r3, r0, #1
 8017dba:	d102      	bne.n	8017dc2 <_read_r+0x1e>
 8017dbc:	6823      	ldr	r3, [r4, #0]
 8017dbe:	b103      	cbz	r3, 8017dc2 <_read_r+0x1e>
 8017dc0:	602b      	str	r3, [r5, #0]
 8017dc2:	bd38      	pop	{r3, r4, r5, pc}
 8017dc4:	200170c4 	.word	0x200170c4

08017dc8 <_malloc_usable_size_r>:
 8017dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dcc:	1f18      	subs	r0, r3, #4
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	bfbc      	itt	lt
 8017dd2:	580b      	ldrlt	r3, [r1, r0]
 8017dd4:	18c0      	addlt	r0, r0, r3
 8017dd6:	4770      	bx	lr

08017dd8 <fmax>:
 8017dd8:	b508      	push	{r3, lr}
 8017dda:	ed2d 8b04 	vpush	{d8-d9}
 8017dde:	eeb0 8a40 	vmov.f32	s16, s0
 8017de2:	eef0 8a60 	vmov.f32	s17, s1
 8017de6:	eeb0 9a41 	vmov.f32	s18, s2
 8017dea:	eef0 9a61 	vmov.f32	s19, s3
 8017dee:	f000 f841 	bl	8017e74 <__fpclassifyd>
 8017df2:	b168      	cbz	r0, 8017e10 <fmax+0x38>
 8017df4:	eeb0 0a49 	vmov.f32	s0, s18
 8017df8:	eef0 0a69 	vmov.f32	s1, s19
 8017dfc:	f000 f83a 	bl	8017e74 <__fpclassifyd>
 8017e00:	b150      	cbz	r0, 8017e18 <fmax+0x40>
 8017e02:	ec53 2b19 	vmov	r2, r3, d9
 8017e06:	ec51 0b18 	vmov	r0, r1, d8
 8017e0a:	f7e8 fea5 	bl	8000b58 <__aeabi_dcmpgt>
 8017e0e:	b918      	cbnz	r0, 8017e18 <fmax+0x40>
 8017e10:	eeb0 8a49 	vmov.f32	s16, s18
 8017e14:	eef0 8a69 	vmov.f32	s17, s19
 8017e18:	eeb0 0a48 	vmov.f32	s0, s16
 8017e1c:	eef0 0a68 	vmov.f32	s1, s17
 8017e20:	ecbd 8b04 	vpop	{d8-d9}
 8017e24:	bd08      	pop	{r3, pc}

08017e26 <fmin>:
 8017e26:	b508      	push	{r3, lr}
 8017e28:	ed2d 8b04 	vpush	{d8-d9}
 8017e2c:	eeb0 8a40 	vmov.f32	s16, s0
 8017e30:	eef0 8a60 	vmov.f32	s17, s1
 8017e34:	eeb0 9a41 	vmov.f32	s18, s2
 8017e38:	eef0 9a61 	vmov.f32	s19, s3
 8017e3c:	f000 f81a 	bl	8017e74 <__fpclassifyd>
 8017e40:	b168      	cbz	r0, 8017e5e <fmin+0x38>
 8017e42:	eeb0 0a49 	vmov.f32	s0, s18
 8017e46:	eef0 0a69 	vmov.f32	s1, s19
 8017e4a:	f000 f813 	bl	8017e74 <__fpclassifyd>
 8017e4e:	b150      	cbz	r0, 8017e66 <fmin+0x40>
 8017e50:	ec53 2b19 	vmov	r2, r3, d9
 8017e54:	ec51 0b18 	vmov	r0, r1, d8
 8017e58:	f7e8 fe60 	bl	8000b1c <__aeabi_dcmplt>
 8017e5c:	b918      	cbnz	r0, 8017e66 <fmin+0x40>
 8017e5e:	eeb0 8a49 	vmov.f32	s16, s18
 8017e62:	eef0 8a69 	vmov.f32	s17, s19
 8017e66:	eeb0 0a48 	vmov.f32	s0, s16
 8017e6a:	eef0 0a68 	vmov.f32	s1, s17
 8017e6e:	ecbd 8b04 	vpop	{d8-d9}
 8017e72:	bd08      	pop	{r3, pc}

08017e74 <__fpclassifyd>:
 8017e74:	ec51 0b10 	vmov	r0, r1, d0
 8017e78:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 8017e7c:	b510      	push	{r4, lr}
 8017e7e:	460b      	mov	r3, r1
 8017e80:	d01b      	beq.n	8017eba <__fpclassifyd+0x46>
 8017e82:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8017e86:	490f      	ldr	r1, [pc, #60]	; (8017ec4 <__fpclassifyd+0x50>)
 8017e88:	428c      	cmp	r4, r1
 8017e8a:	d910      	bls.n	8017eae <__fpclassifyd+0x3a>
 8017e8c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8017e90:	490c      	ldr	r1, [pc, #48]	; (8017ec4 <__fpclassifyd+0x50>)
 8017e92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017e96:	428b      	cmp	r3, r1
 8017e98:	d909      	bls.n	8017eae <__fpclassifyd+0x3a>
 8017e9a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8017e9e:	d308      	bcc.n	8017eb2 <__fpclassifyd+0x3e>
 8017ea0:	4b09      	ldr	r3, [pc, #36]	; (8017ec8 <__fpclassifyd+0x54>)
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d107      	bne.n	8017eb6 <__fpclassifyd+0x42>
 8017ea6:	fab0 f080 	clz	r0, r0
 8017eaa:	0940      	lsrs	r0, r0, #5
 8017eac:	bd10      	pop	{r4, pc}
 8017eae:	2004      	movs	r0, #4
 8017eb0:	e7fc      	b.n	8017eac <__fpclassifyd+0x38>
 8017eb2:	2003      	movs	r0, #3
 8017eb4:	e7fa      	b.n	8017eac <__fpclassifyd+0x38>
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	e7f8      	b.n	8017eac <__fpclassifyd+0x38>
 8017eba:	2800      	cmp	r0, #0
 8017ebc:	d1e6      	bne.n	8017e8c <__fpclassifyd+0x18>
 8017ebe:	2002      	movs	r0, #2
 8017ec0:	e7f4      	b.n	8017eac <__fpclassifyd+0x38>
 8017ec2:	bf00      	nop
 8017ec4:	7fdfffff 	.word	0x7fdfffff
 8017ec8:	7ff00000 	.word	0x7ff00000

08017ecc <pow>:
 8017ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed0:	ed2d 8b04 	vpush	{d8-d9}
 8017ed4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80181a8 <pow+0x2dc>
 8017ed8:	b08d      	sub	sp, #52	; 0x34
 8017eda:	ec57 6b10 	vmov	r6, r7, d0
 8017ede:	ec55 4b11 	vmov	r4, r5, d1
 8017ee2:	f000 fb21 	bl	8018528 <__ieee754_pow>
 8017ee6:	f999 3000 	ldrsb.w	r3, [r9]
 8017eea:	9300      	str	r3, [sp, #0]
 8017eec:	3301      	adds	r3, #1
 8017eee:	eeb0 8a40 	vmov.f32	s16, s0
 8017ef2:	eef0 8a60 	vmov.f32	s17, s1
 8017ef6:	46c8      	mov	r8, r9
 8017ef8:	d05f      	beq.n	8017fba <pow+0xee>
 8017efa:	4622      	mov	r2, r4
 8017efc:	462b      	mov	r3, r5
 8017efe:	4620      	mov	r0, r4
 8017f00:	4629      	mov	r1, r5
 8017f02:	f7e8 fe33 	bl	8000b6c <__aeabi_dcmpun>
 8017f06:	4683      	mov	fp, r0
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	d156      	bne.n	8017fba <pow+0xee>
 8017f0c:	4632      	mov	r2, r6
 8017f0e:	463b      	mov	r3, r7
 8017f10:	4630      	mov	r0, r6
 8017f12:	4639      	mov	r1, r7
 8017f14:	f7e8 fe2a 	bl	8000b6c <__aeabi_dcmpun>
 8017f18:	9001      	str	r0, [sp, #4]
 8017f1a:	b1e8      	cbz	r0, 8017f58 <pow+0x8c>
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	2300      	movs	r3, #0
 8017f20:	4620      	mov	r0, r4
 8017f22:	4629      	mov	r1, r5
 8017f24:	f7e8 fdf0 	bl	8000b08 <__aeabi_dcmpeq>
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d046      	beq.n	8017fba <pow+0xee>
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	9302      	str	r3, [sp, #8]
 8017f30:	4b96      	ldr	r3, [pc, #600]	; (801818c <pow+0x2c0>)
 8017f32:	9303      	str	r3, [sp, #12]
 8017f34:	4b96      	ldr	r3, [pc, #600]	; (8018190 <pow+0x2c4>)
 8017f36:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017f40:	9b00      	ldr	r3, [sp, #0]
 8017f42:	2b02      	cmp	r3, #2
 8017f44:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017f48:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017f4c:	d033      	beq.n	8017fb6 <pow+0xea>
 8017f4e:	a802      	add	r0, sp, #8
 8017f50:	f001 fb7c 	bl	801964c <matherr>
 8017f54:	bb48      	cbnz	r0, 8017faa <pow+0xde>
 8017f56:	e05d      	b.n	8018014 <pow+0x148>
 8017f58:	f04f 0a00 	mov.w	sl, #0
 8017f5c:	f04f 0b00 	mov.w	fp, #0
 8017f60:	4652      	mov	r2, sl
 8017f62:	465b      	mov	r3, fp
 8017f64:	4630      	mov	r0, r6
 8017f66:	4639      	mov	r1, r7
 8017f68:	f7e8 fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8017f6c:	ec4b ab19 	vmov	d9, sl, fp
 8017f70:	2800      	cmp	r0, #0
 8017f72:	d054      	beq.n	801801e <pow+0x152>
 8017f74:	4652      	mov	r2, sl
 8017f76:	465b      	mov	r3, fp
 8017f78:	4620      	mov	r0, r4
 8017f7a:	4629      	mov	r1, r5
 8017f7c:	f7e8 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8017f80:	4680      	mov	r8, r0
 8017f82:	b318      	cbz	r0, 8017fcc <pow+0x100>
 8017f84:	2301      	movs	r3, #1
 8017f86:	9302      	str	r3, [sp, #8]
 8017f88:	4b80      	ldr	r3, [pc, #512]	; (801818c <pow+0x2c0>)
 8017f8a:	9303      	str	r3, [sp, #12]
 8017f8c:	9b01      	ldr	r3, [sp, #4]
 8017f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8017f90:	9b00      	ldr	r3, [sp, #0]
 8017f92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017f96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017f9a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d0d5      	beq.n	8017f4e <pow+0x82>
 8017fa2:	4b7b      	ldr	r3, [pc, #492]	; (8018190 <pow+0x2c4>)
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fac:	b11b      	cbz	r3, 8017fb6 <pow+0xea>
 8017fae:	f7fe fecd 	bl	8016d4c <__errno>
 8017fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fb4:	6003      	str	r3, [r0, #0]
 8017fb6:	ed9d 8b08 	vldr	d8, [sp, #32]
 8017fba:	eeb0 0a48 	vmov.f32	s0, s16
 8017fbe:	eef0 0a68 	vmov.f32	s1, s17
 8017fc2:	b00d      	add	sp, #52	; 0x34
 8017fc4:	ecbd 8b04 	vpop	{d8-d9}
 8017fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fcc:	ec45 4b10 	vmov	d0, r4, r5
 8017fd0:	f001 fb34 	bl	801963c <finite>
 8017fd4:	2800      	cmp	r0, #0
 8017fd6:	d0f0      	beq.n	8017fba <pow+0xee>
 8017fd8:	4652      	mov	r2, sl
 8017fda:	465b      	mov	r3, fp
 8017fdc:	4620      	mov	r0, r4
 8017fde:	4629      	mov	r1, r5
 8017fe0:	f7e8 fd9c 	bl	8000b1c <__aeabi_dcmplt>
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d0e8      	beq.n	8017fba <pow+0xee>
 8017fe8:	2301      	movs	r3, #1
 8017fea:	9302      	str	r3, [sp, #8]
 8017fec:	4b67      	ldr	r3, [pc, #412]	; (801818c <pow+0x2c0>)
 8017fee:	9303      	str	r3, [sp, #12]
 8017ff0:	f999 3000 	ldrsb.w	r3, [r9]
 8017ff4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8017ff8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017ffc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018000:	b913      	cbnz	r3, 8018008 <pow+0x13c>
 8018002:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018006:	e7a2      	b.n	8017f4e <pow+0x82>
 8018008:	4962      	ldr	r1, [pc, #392]	; (8018194 <pow+0x2c8>)
 801800a:	2000      	movs	r0, #0
 801800c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018010:	2b02      	cmp	r3, #2
 8018012:	d19c      	bne.n	8017f4e <pow+0x82>
 8018014:	f7fe fe9a 	bl	8016d4c <__errno>
 8018018:	2321      	movs	r3, #33	; 0x21
 801801a:	6003      	str	r3, [r0, #0]
 801801c:	e7c5      	b.n	8017faa <pow+0xde>
 801801e:	eeb0 0a48 	vmov.f32	s0, s16
 8018022:	eef0 0a68 	vmov.f32	s1, s17
 8018026:	f001 fb09 	bl	801963c <finite>
 801802a:	9000      	str	r0, [sp, #0]
 801802c:	2800      	cmp	r0, #0
 801802e:	f040 8081 	bne.w	8018134 <pow+0x268>
 8018032:	ec47 6b10 	vmov	d0, r6, r7
 8018036:	f001 fb01 	bl	801963c <finite>
 801803a:	2800      	cmp	r0, #0
 801803c:	d07a      	beq.n	8018134 <pow+0x268>
 801803e:	ec45 4b10 	vmov	d0, r4, r5
 8018042:	f001 fafb 	bl	801963c <finite>
 8018046:	2800      	cmp	r0, #0
 8018048:	d074      	beq.n	8018134 <pow+0x268>
 801804a:	ec53 2b18 	vmov	r2, r3, d8
 801804e:	ee18 0a10 	vmov	r0, s16
 8018052:	4619      	mov	r1, r3
 8018054:	f7e8 fd8a 	bl	8000b6c <__aeabi_dcmpun>
 8018058:	f999 9000 	ldrsb.w	r9, [r9]
 801805c:	4b4b      	ldr	r3, [pc, #300]	; (801818c <pow+0x2c0>)
 801805e:	b1b0      	cbz	r0, 801808e <pow+0x1c2>
 8018060:	2201      	movs	r2, #1
 8018062:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018066:	9b00      	ldr	r3, [sp, #0]
 8018068:	930a      	str	r3, [sp, #40]	; 0x28
 801806a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801806e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018072:	f1b9 0f00 	cmp.w	r9, #0
 8018076:	d0c4      	beq.n	8018002 <pow+0x136>
 8018078:	4652      	mov	r2, sl
 801807a:	465b      	mov	r3, fp
 801807c:	4650      	mov	r0, sl
 801807e:	4659      	mov	r1, fp
 8018080:	f7e8 fc04 	bl	800088c <__aeabi_ddiv>
 8018084:	f1b9 0f02 	cmp.w	r9, #2
 8018088:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801808c:	e7c1      	b.n	8018012 <pow+0x146>
 801808e:	2203      	movs	r2, #3
 8018090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018094:	900a      	str	r0, [sp, #40]	; 0x28
 8018096:	4629      	mov	r1, r5
 8018098:	4620      	mov	r0, r4
 801809a:	2200      	movs	r2, #0
 801809c:	4b3e      	ldr	r3, [pc, #248]	; (8018198 <pow+0x2cc>)
 801809e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80180a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80180a6:	f7e8 fac7 	bl	8000638 <__aeabi_dmul>
 80180aa:	4604      	mov	r4, r0
 80180ac:	460d      	mov	r5, r1
 80180ae:	f1b9 0f00 	cmp.w	r9, #0
 80180b2:	d124      	bne.n	80180fe <pow+0x232>
 80180b4:	4b39      	ldr	r3, [pc, #228]	; (801819c <pow+0x2d0>)
 80180b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80180ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80180be:	4630      	mov	r0, r6
 80180c0:	4652      	mov	r2, sl
 80180c2:	465b      	mov	r3, fp
 80180c4:	4639      	mov	r1, r7
 80180c6:	f7e8 fd29 	bl	8000b1c <__aeabi_dcmplt>
 80180ca:	2800      	cmp	r0, #0
 80180cc:	d056      	beq.n	801817c <pow+0x2b0>
 80180ce:	ec45 4b10 	vmov	d0, r4, r5
 80180d2:	f001 fac5 	bl	8019660 <rint>
 80180d6:	4622      	mov	r2, r4
 80180d8:	462b      	mov	r3, r5
 80180da:	ec51 0b10 	vmov	r0, r1, d0
 80180de:	f7e8 fd13 	bl	8000b08 <__aeabi_dcmpeq>
 80180e2:	b920      	cbnz	r0, 80180ee <pow+0x222>
 80180e4:	4b2e      	ldr	r3, [pc, #184]	; (80181a0 <pow+0x2d4>)
 80180e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80180ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80180ee:	f998 3000 	ldrsb.w	r3, [r8]
 80180f2:	2b02      	cmp	r3, #2
 80180f4:	d142      	bne.n	801817c <pow+0x2b0>
 80180f6:	f7fe fe29 	bl	8016d4c <__errno>
 80180fa:	2322      	movs	r3, #34	; 0x22
 80180fc:	e78d      	b.n	801801a <pow+0x14e>
 80180fe:	4b29      	ldr	r3, [pc, #164]	; (80181a4 <pow+0x2d8>)
 8018100:	2200      	movs	r2, #0
 8018102:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018106:	4630      	mov	r0, r6
 8018108:	4652      	mov	r2, sl
 801810a:	465b      	mov	r3, fp
 801810c:	4639      	mov	r1, r7
 801810e:	f7e8 fd05 	bl	8000b1c <__aeabi_dcmplt>
 8018112:	2800      	cmp	r0, #0
 8018114:	d0eb      	beq.n	80180ee <pow+0x222>
 8018116:	ec45 4b10 	vmov	d0, r4, r5
 801811a:	f001 faa1 	bl	8019660 <rint>
 801811e:	4622      	mov	r2, r4
 8018120:	462b      	mov	r3, r5
 8018122:	ec51 0b10 	vmov	r0, r1, d0
 8018126:	f7e8 fcef 	bl	8000b08 <__aeabi_dcmpeq>
 801812a:	2800      	cmp	r0, #0
 801812c:	d1df      	bne.n	80180ee <pow+0x222>
 801812e:	2200      	movs	r2, #0
 8018130:	4b18      	ldr	r3, [pc, #96]	; (8018194 <pow+0x2c8>)
 8018132:	e7da      	b.n	80180ea <pow+0x21e>
 8018134:	2200      	movs	r2, #0
 8018136:	2300      	movs	r3, #0
 8018138:	ec51 0b18 	vmov	r0, r1, d8
 801813c:	f7e8 fce4 	bl	8000b08 <__aeabi_dcmpeq>
 8018140:	2800      	cmp	r0, #0
 8018142:	f43f af3a 	beq.w	8017fba <pow+0xee>
 8018146:	ec47 6b10 	vmov	d0, r6, r7
 801814a:	f001 fa77 	bl	801963c <finite>
 801814e:	2800      	cmp	r0, #0
 8018150:	f43f af33 	beq.w	8017fba <pow+0xee>
 8018154:	ec45 4b10 	vmov	d0, r4, r5
 8018158:	f001 fa70 	bl	801963c <finite>
 801815c:	2800      	cmp	r0, #0
 801815e:	f43f af2c 	beq.w	8017fba <pow+0xee>
 8018162:	2304      	movs	r3, #4
 8018164:	9302      	str	r3, [sp, #8]
 8018166:	4b09      	ldr	r3, [pc, #36]	; (801818c <pow+0x2c0>)
 8018168:	9303      	str	r3, [sp, #12]
 801816a:	2300      	movs	r3, #0
 801816c:	930a      	str	r3, [sp, #40]	; 0x28
 801816e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018172:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018176:	ed8d 9b08 	vstr	d9, [sp, #32]
 801817a:	e7b8      	b.n	80180ee <pow+0x222>
 801817c:	a802      	add	r0, sp, #8
 801817e:	f001 fa65 	bl	801964c <matherr>
 8018182:	2800      	cmp	r0, #0
 8018184:	f47f af11 	bne.w	8017faa <pow+0xde>
 8018188:	e7b5      	b.n	80180f6 <pow+0x22a>
 801818a:	bf00      	nop
 801818c:	0801a267 	.word	0x0801a267
 8018190:	3ff00000 	.word	0x3ff00000
 8018194:	fff00000 	.word	0xfff00000
 8018198:	3fe00000 	.word	0x3fe00000
 801819c:	47efffff 	.word	0x47efffff
 80181a0:	c7efffff 	.word	0xc7efffff
 80181a4:	7ff00000 	.word	0x7ff00000
 80181a8:	200001f8 	.word	0x200001f8

080181ac <sqrt>:
 80181ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181b0:	ed2d 8b02 	vpush	{d8}
 80181b4:	b08b      	sub	sp, #44	; 0x2c
 80181b6:	ec55 4b10 	vmov	r4, r5, d0
 80181ba:	f000 fec3 	bl	8018f44 <__ieee754_sqrt>
 80181be:	4b26      	ldr	r3, [pc, #152]	; (8018258 <sqrt+0xac>)
 80181c0:	eeb0 8a40 	vmov.f32	s16, s0
 80181c4:	eef0 8a60 	vmov.f32	s17, s1
 80181c8:	f993 6000 	ldrsb.w	r6, [r3]
 80181cc:	1c73      	adds	r3, r6, #1
 80181ce:	d02a      	beq.n	8018226 <sqrt+0x7a>
 80181d0:	4622      	mov	r2, r4
 80181d2:	462b      	mov	r3, r5
 80181d4:	4620      	mov	r0, r4
 80181d6:	4629      	mov	r1, r5
 80181d8:	f7e8 fcc8 	bl	8000b6c <__aeabi_dcmpun>
 80181dc:	4607      	mov	r7, r0
 80181de:	bb10      	cbnz	r0, 8018226 <sqrt+0x7a>
 80181e0:	f04f 0800 	mov.w	r8, #0
 80181e4:	f04f 0900 	mov.w	r9, #0
 80181e8:	4642      	mov	r2, r8
 80181ea:	464b      	mov	r3, r9
 80181ec:	4620      	mov	r0, r4
 80181ee:	4629      	mov	r1, r5
 80181f0:	f7e8 fc94 	bl	8000b1c <__aeabi_dcmplt>
 80181f4:	b1b8      	cbz	r0, 8018226 <sqrt+0x7a>
 80181f6:	2301      	movs	r3, #1
 80181f8:	9300      	str	r3, [sp, #0]
 80181fa:	4b18      	ldr	r3, [pc, #96]	; (801825c <sqrt+0xb0>)
 80181fc:	9301      	str	r3, [sp, #4]
 80181fe:	9708      	str	r7, [sp, #32]
 8018200:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018204:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018208:	b9b6      	cbnz	r6, 8018238 <sqrt+0x8c>
 801820a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801820e:	4668      	mov	r0, sp
 8018210:	f001 fa1c 	bl	801964c <matherr>
 8018214:	b1d0      	cbz	r0, 801824c <sqrt+0xa0>
 8018216:	9b08      	ldr	r3, [sp, #32]
 8018218:	b11b      	cbz	r3, 8018222 <sqrt+0x76>
 801821a:	f7fe fd97 	bl	8016d4c <__errno>
 801821e:	9b08      	ldr	r3, [sp, #32]
 8018220:	6003      	str	r3, [r0, #0]
 8018222:	ed9d 8b06 	vldr	d8, [sp, #24]
 8018226:	eeb0 0a48 	vmov.f32	s0, s16
 801822a:	eef0 0a68 	vmov.f32	s1, s17
 801822e:	b00b      	add	sp, #44	; 0x2c
 8018230:	ecbd 8b02 	vpop	{d8}
 8018234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018238:	4642      	mov	r2, r8
 801823a:	464b      	mov	r3, r9
 801823c:	4640      	mov	r0, r8
 801823e:	4649      	mov	r1, r9
 8018240:	f7e8 fb24 	bl	800088c <__aeabi_ddiv>
 8018244:	2e02      	cmp	r6, #2
 8018246:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801824a:	d1e0      	bne.n	801820e <sqrt+0x62>
 801824c:	f7fe fd7e 	bl	8016d4c <__errno>
 8018250:	2321      	movs	r3, #33	; 0x21
 8018252:	6003      	str	r3, [r0, #0]
 8018254:	e7df      	b.n	8018216 <sqrt+0x6a>
 8018256:	bf00      	nop
 8018258:	200001f8 	.word	0x200001f8
 801825c:	0801a26b 	.word	0x0801a26b

08018260 <powf>:
 8018260:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8018264:	ed2d 8b04 	vpush	{d8-d9}
 8018268:	4ca7      	ldr	r4, [pc, #668]	; (8018508 <powf+0x2a8>)
 801826a:	b08a      	sub	sp, #40	; 0x28
 801826c:	eef0 8a40 	vmov.f32	s17, s0
 8018270:	eeb0 8a60 	vmov.f32	s16, s1
 8018274:	f000 ff16 	bl	80190a4 <__ieee754_powf>
 8018278:	f994 5000 	ldrsb.w	r5, [r4]
 801827c:	1c6b      	adds	r3, r5, #1
 801827e:	eeb0 9a40 	vmov.f32	s18, s0
 8018282:	4626      	mov	r6, r4
 8018284:	d05f      	beq.n	8018346 <powf+0xe6>
 8018286:	eeb4 8a48 	vcmp.f32	s16, s16
 801828a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801828e:	d65a      	bvs.n	8018346 <powf+0xe6>
 8018290:	eef4 8a68 	vcmp.f32	s17, s17
 8018294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018298:	d721      	bvc.n	80182de <powf+0x7e>
 801829a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182a2:	d150      	bne.n	8018346 <powf+0xe6>
 80182a4:	2301      	movs	r3, #1
 80182a6:	9300      	str	r3, [sp, #0]
 80182a8:	4b98      	ldr	r3, [pc, #608]	; (801850c <powf+0x2ac>)
 80182aa:	9301      	str	r3, [sp, #4]
 80182ac:	ee18 0a90 	vmov	r0, s17
 80182b0:	2300      	movs	r3, #0
 80182b2:	9308      	str	r3, [sp, #32]
 80182b4:	f7e8 f968 	bl	8000588 <__aeabi_f2d>
 80182b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182bc:	ee18 0a10 	vmov	r0, s16
 80182c0:	f7e8 f962 	bl	8000588 <__aeabi_f2d>
 80182c4:	4b92      	ldr	r3, [pc, #584]	; (8018510 <powf+0x2b0>)
 80182c6:	2200      	movs	r2, #0
 80182c8:	2d02      	cmp	r5, #2
 80182ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80182ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80182d2:	d032      	beq.n	801833a <powf+0xda>
 80182d4:	4668      	mov	r0, sp
 80182d6:	f001 f9b9 	bl	801964c <matherr>
 80182da:	bb40      	cbnz	r0, 801832e <powf+0xce>
 80182dc:	e065      	b.n	80183aa <powf+0x14a>
 80182de:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8018514 <powf+0x2b4>
 80182e2:	eef4 8a69 	vcmp.f32	s17, s19
 80182e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ea:	d163      	bne.n	80183b4 <powf+0x154>
 80182ec:	eeb4 8a69 	vcmp.f32	s16, s19
 80182f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182f4:	d12e      	bne.n	8018354 <powf+0xf4>
 80182f6:	2301      	movs	r3, #1
 80182f8:	9300      	str	r3, [sp, #0]
 80182fa:	4b84      	ldr	r3, [pc, #528]	; (801850c <powf+0x2ac>)
 80182fc:	9301      	str	r3, [sp, #4]
 80182fe:	ee18 0a90 	vmov	r0, s17
 8018302:	2300      	movs	r3, #0
 8018304:	9308      	str	r3, [sp, #32]
 8018306:	f7e8 f93f 	bl	8000588 <__aeabi_f2d>
 801830a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801830e:	ee18 0a10 	vmov	r0, s16
 8018312:	f7e8 f939 	bl	8000588 <__aeabi_f2d>
 8018316:	2200      	movs	r2, #0
 8018318:	2300      	movs	r3, #0
 801831a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801831e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018322:	2d00      	cmp	r5, #0
 8018324:	d0d6      	beq.n	80182d4 <powf+0x74>
 8018326:	4b7a      	ldr	r3, [pc, #488]	; (8018510 <powf+0x2b0>)
 8018328:	2200      	movs	r2, #0
 801832a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801832e:	9b08      	ldr	r3, [sp, #32]
 8018330:	b11b      	cbz	r3, 801833a <powf+0xda>
 8018332:	f7fe fd0b 	bl	8016d4c <__errno>
 8018336:	9b08      	ldr	r3, [sp, #32]
 8018338:	6003      	str	r3, [r0, #0]
 801833a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801833e:	f7e8 fc2b 	bl	8000b98 <__aeabi_d2f>
 8018342:	ee09 0a10 	vmov	s18, r0
 8018346:	eeb0 0a49 	vmov.f32	s0, s18
 801834a:	b00a      	add	sp, #40	; 0x28
 801834c:	ecbd 8b04 	vpop	{d8-d9}
 8018350:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8018354:	eeb0 0a48 	vmov.f32	s0, s16
 8018358:	f001 fa83 	bl	8019862 <finitef>
 801835c:	2800      	cmp	r0, #0
 801835e:	d0f2      	beq.n	8018346 <powf+0xe6>
 8018360:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018368:	d5ed      	bpl.n	8018346 <powf+0xe6>
 801836a:	2301      	movs	r3, #1
 801836c:	9300      	str	r3, [sp, #0]
 801836e:	4b67      	ldr	r3, [pc, #412]	; (801850c <powf+0x2ac>)
 8018370:	9301      	str	r3, [sp, #4]
 8018372:	ee18 0a90 	vmov	r0, s17
 8018376:	2300      	movs	r3, #0
 8018378:	9308      	str	r3, [sp, #32]
 801837a:	f7e8 f905 	bl	8000588 <__aeabi_f2d>
 801837e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018382:	ee18 0a10 	vmov	r0, s16
 8018386:	f7e8 f8ff 	bl	8000588 <__aeabi_f2d>
 801838a:	f994 3000 	ldrsb.w	r3, [r4]
 801838e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018392:	b923      	cbnz	r3, 801839e <powf+0x13e>
 8018394:	2200      	movs	r2, #0
 8018396:	2300      	movs	r3, #0
 8018398:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801839c:	e79a      	b.n	80182d4 <powf+0x74>
 801839e:	495e      	ldr	r1, [pc, #376]	; (8018518 <powf+0x2b8>)
 80183a0:	2000      	movs	r0, #0
 80183a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80183a6:	2b02      	cmp	r3, #2
 80183a8:	d194      	bne.n	80182d4 <powf+0x74>
 80183aa:	f7fe fccf 	bl	8016d4c <__errno>
 80183ae:	2321      	movs	r3, #33	; 0x21
 80183b0:	6003      	str	r3, [r0, #0]
 80183b2:	e7bc      	b.n	801832e <powf+0xce>
 80183b4:	f001 fa55 	bl	8019862 <finitef>
 80183b8:	4605      	mov	r5, r0
 80183ba:	2800      	cmp	r0, #0
 80183bc:	d173      	bne.n	80184a6 <powf+0x246>
 80183be:	eeb0 0a68 	vmov.f32	s0, s17
 80183c2:	f001 fa4e 	bl	8019862 <finitef>
 80183c6:	2800      	cmp	r0, #0
 80183c8:	d06d      	beq.n	80184a6 <powf+0x246>
 80183ca:	eeb0 0a48 	vmov.f32	s0, s16
 80183ce:	f001 fa48 	bl	8019862 <finitef>
 80183d2:	2800      	cmp	r0, #0
 80183d4:	d067      	beq.n	80184a6 <powf+0x246>
 80183d6:	ee18 0a90 	vmov	r0, s17
 80183da:	f7e8 f8d5 	bl	8000588 <__aeabi_f2d>
 80183de:	4680      	mov	r8, r0
 80183e0:	ee18 0a10 	vmov	r0, s16
 80183e4:	4689      	mov	r9, r1
 80183e6:	f7e8 f8cf 	bl	8000588 <__aeabi_f2d>
 80183ea:	eeb4 9a49 	vcmp.f32	s18, s18
 80183ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183f2:	f994 4000 	ldrsb.w	r4, [r4]
 80183f6:	4b45      	ldr	r3, [pc, #276]	; (801850c <powf+0x2ac>)
 80183f8:	d713      	bvc.n	8018422 <powf+0x1c2>
 80183fa:	2201      	movs	r2, #1
 80183fc:	e9cd 2300 	strd	r2, r3, [sp]
 8018400:	9508      	str	r5, [sp, #32]
 8018402:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801840a:	2c00      	cmp	r4, #0
 801840c:	d0c2      	beq.n	8018394 <powf+0x134>
 801840e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8018412:	ee17 0a90 	vmov	r0, s15
 8018416:	f7e8 f8b7 	bl	8000588 <__aeabi_f2d>
 801841a:	2c02      	cmp	r4, #2
 801841c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018420:	e7c2      	b.n	80183a8 <powf+0x148>
 8018422:	2203      	movs	r2, #3
 8018424:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018428:	e9cd 2300 	strd	r2, r3, [sp]
 801842c:	9508      	str	r5, [sp, #32]
 801842e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018436:	ee28 8a27 	vmul.f32	s16, s16, s15
 801843a:	b9fc      	cbnz	r4, 801847c <powf+0x21c>
 801843c:	4b37      	ldr	r3, [pc, #220]	; (801851c <powf+0x2bc>)
 801843e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018442:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801844a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801844e:	d553      	bpl.n	80184f8 <powf+0x298>
 8018450:	eeb0 0a48 	vmov.f32	s0, s16
 8018454:	f001 fa16 	bl	8019884 <rintf>
 8018458:	eeb4 0a48 	vcmp.f32	s0, s16
 801845c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018460:	d004      	beq.n	801846c <powf+0x20c>
 8018462:	4b2f      	ldr	r3, [pc, #188]	; (8018520 <powf+0x2c0>)
 8018464:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018468:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801846c:	f996 3000 	ldrsb.w	r3, [r6]
 8018470:	2b02      	cmp	r3, #2
 8018472:	d141      	bne.n	80184f8 <powf+0x298>
 8018474:	f7fe fc6a 	bl	8016d4c <__errno>
 8018478:	2322      	movs	r3, #34	; 0x22
 801847a:	e799      	b.n	80183b0 <powf+0x150>
 801847c:	4b29      	ldr	r3, [pc, #164]	; (8018524 <powf+0x2c4>)
 801847e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018482:	2200      	movs	r2, #0
 8018484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018488:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801848c:	d5ee      	bpl.n	801846c <powf+0x20c>
 801848e:	eeb0 0a48 	vmov.f32	s0, s16
 8018492:	f001 f9f7 	bl	8019884 <rintf>
 8018496:	eeb4 0a48 	vcmp.f32	s0, s16
 801849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801849e:	d0e5      	beq.n	801846c <powf+0x20c>
 80184a0:	2200      	movs	r2, #0
 80184a2:	4b1d      	ldr	r3, [pc, #116]	; (8018518 <powf+0x2b8>)
 80184a4:	e7e0      	b.n	8018468 <powf+0x208>
 80184a6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80184aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ae:	f47f af4a 	bne.w	8018346 <powf+0xe6>
 80184b2:	eeb0 0a68 	vmov.f32	s0, s17
 80184b6:	f001 f9d4 	bl	8019862 <finitef>
 80184ba:	2800      	cmp	r0, #0
 80184bc:	f43f af43 	beq.w	8018346 <powf+0xe6>
 80184c0:	eeb0 0a48 	vmov.f32	s0, s16
 80184c4:	f001 f9cd 	bl	8019862 <finitef>
 80184c8:	2800      	cmp	r0, #0
 80184ca:	f43f af3c 	beq.w	8018346 <powf+0xe6>
 80184ce:	2304      	movs	r3, #4
 80184d0:	9300      	str	r3, [sp, #0]
 80184d2:	4b0e      	ldr	r3, [pc, #56]	; (801850c <powf+0x2ac>)
 80184d4:	9301      	str	r3, [sp, #4]
 80184d6:	ee18 0a90 	vmov	r0, s17
 80184da:	2300      	movs	r3, #0
 80184dc:	9308      	str	r3, [sp, #32]
 80184de:	f7e8 f853 	bl	8000588 <__aeabi_f2d>
 80184e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184e6:	ee18 0a10 	vmov	r0, s16
 80184ea:	f7e8 f84d 	bl	8000588 <__aeabi_f2d>
 80184ee:	2200      	movs	r2, #0
 80184f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80184f4:	2300      	movs	r3, #0
 80184f6:	e7b7      	b.n	8018468 <powf+0x208>
 80184f8:	4668      	mov	r0, sp
 80184fa:	f001 f8a7 	bl	801964c <matherr>
 80184fe:	2800      	cmp	r0, #0
 8018500:	f47f af15 	bne.w	801832e <powf+0xce>
 8018504:	e7b6      	b.n	8018474 <powf+0x214>
 8018506:	bf00      	nop
 8018508:	200001f8 	.word	0x200001f8
 801850c:	0801a270 	.word	0x0801a270
 8018510:	3ff00000 	.word	0x3ff00000
 8018514:	00000000 	.word	0x00000000
 8018518:	fff00000 	.word	0xfff00000
 801851c:	47efffff 	.word	0x47efffff
 8018520:	c7efffff 	.word	0xc7efffff
 8018524:	7ff00000 	.word	0x7ff00000

08018528 <__ieee754_pow>:
 8018528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852c:	b091      	sub	sp, #68	; 0x44
 801852e:	ed8d 1b00 	vstr	d1, [sp]
 8018532:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018536:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801853a:	ea58 0302 	orrs.w	r3, r8, r2
 801853e:	ec57 6b10 	vmov	r6, r7, d0
 8018542:	f000 84be 	beq.w	8018ec2 <__ieee754_pow+0x99a>
 8018546:	4b7a      	ldr	r3, [pc, #488]	; (8018730 <__ieee754_pow+0x208>)
 8018548:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801854c:	429c      	cmp	r4, r3
 801854e:	463d      	mov	r5, r7
 8018550:	ee10 aa10 	vmov	sl, s0
 8018554:	dc09      	bgt.n	801856a <__ieee754_pow+0x42>
 8018556:	d103      	bne.n	8018560 <__ieee754_pow+0x38>
 8018558:	b93e      	cbnz	r6, 801856a <__ieee754_pow+0x42>
 801855a:	45a0      	cmp	r8, r4
 801855c:	dc0d      	bgt.n	801857a <__ieee754_pow+0x52>
 801855e:	e001      	b.n	8018564 <__ieee754_pow+0x3c>
 8018560:	4598      	cmp	r8, r3
 8018562:	dc02      	bgt.n	801856a <__ieee754_pow+0x42>
 8018564:	4598      	cmp	r8, r3
 8018566:	d10e      	bne.n	8018586 <__ieee754_pow+0x5e>
 8018568:	b16a      	cbz	r2, 8018586 <__ieee754_pow+0x5e>
 801856a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801856e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018572:	ea54 030a 	orrs.w	r3, r4, sl
 8018576:	f000 84a4 	beq.w	8018ec2 <__ieee754_pow+0x99a>
 801857a:	486e      	ldr	r0, [pc, #440]	; (8018734 <__ieee754_pow+0x20c>)
 801857c:	b011      	add	sp, #68	; 0x44
 801857e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018582:	f001 b865 	b.w	8019650 <nan>
 8018586:	2d00      	cmp	r5, #0
 8018588:	da53      	bge.n	8018632 <__ieee754_pow+0x10a>
 801858a:	4b6b      	ldr	r3, [pc, #428]	; (8018738 <__ieee754_pow+0x210>)
 801858c:	4598      	cmp	r8, r3
 801858e:	dc4d      	bgt.n	801862c <__ieee754_pow+0x104>
 8018590:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018594:	4598      	cmp	r8, r3
 8018596:	dd4c      	ble.n	8018632 <__ieee754_pow+0x10a>
 8018598:	ea4f 5328 	mov.w	r3, r8, asr #20
 801859c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80185a0:	2b14      	cmp	r3, #20
 80185a2:	dd26      	ble.n	80185f2 <__ieee754_pow+0xca>
 80185a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80185a8:	fa22 f103 	lsr.w	r1, r2, r3
 80185ac:	fa01 f303 	lsl.w	r3, r1, r3
 80185b0:	4293      	cmp	r3, r2
 80185b2:	d13e      	bne.n	8018632 <__ieee754_pow+0x10a>
 80185b4:	f001 0101 	and.w	r1, r1, #1
 80185b8:	f1c1 0b02 	rsb	fp, r1, #2
 80185bc:	2a00      	cmp	r2, #0
 80185be:	d15b      	bne.n	8018678 <__ieee754_pow+0x150>
 80185c0:	4b5b      	ldr	r3, [pc, #364]	; (8018730 <__ieee754_pow+0x208>)
 80185c2:	4598      	cmp	r8, r3
 80185c4:	d124      	bne.n	8018610 <__ieee754_pow+0xe8>
 80185c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80185ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80185ce:	ea53 030a 	orrs.w	r3, r3, sl
 80185d2:	f000 8476 	beq.w	8018ec2 <__ieee754_pow+0x99a>
 80185d6:	4b59      	ldr	r3, [pc, #356]	; (801873c <__ieee754_pow+0x214>)
 80185d8:	429c      	cmp	r4, r3
 80185da:	dd2d      	ble.n	8018638 <__ieee754_pow+0x110>
 80185dc:	f1b9 0f00 	cmp.w	r9, #0
 80185e0:	f280 8473 	bge.w	8018eca <__ieee754_pow+0x9a2>
 80185e4:	2000      	movs	r0, #0
 80185e6:	2100      	movs	r1, #0
 80185e8:	ec41 0b10 	vmov	d0, r0, r1
 80185ec:	b011      	add	sp, #68	; 0x44
 80185ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f2:	2a00      	cmp	r2, #0
 80185f4:	d13e      	bne.n	8018674 <__ieee754_pow+0x14c>
 80185f6:	f1c3 0314 	rsb	r3, r3, #20
 80185fa:	fa48 f103 	asr.w	r1, r8, r3
 80185fe:	fa01 f303 	lsl.w	r3, r1, r3
 8018602:	4543      	cmp	r3, r8
 8018604:	f040 8469 	bne.w	8018eda <__ieee754_pow+0x9b2>
 8018608:	f001 0101 	and.w	r1, r1, #1
 801860c:	f1c1 0b02 	rsb	fp, r1, #2
 8018610:	4b4b      	ldr	r3, [pc, #300]	; (8018740 <__ieee754_pow+0x218>)
 8018612:	4598      	cmp	r8, r3
 8018614:	d118      	bne.n	8018648 <__ieee754_pow+0x120>
 8018616:	f1b9 0f00 	cmp.w	r9, #0
 801861a:	f280 845a 	bge.w	8018ed2 <__ieee754_pow+0x9aa>
 801861e:	4948      	ldr	r1, [pc, #288]	; (8018740 <__ieee754_pow+0x218>)
 8018620:	4632      	mov	r2, r6
 8018622:	463b      	mov	r3, r7
 8018624:	2000      	movs	r0, #0
 8018626:	f7e8 f931 	bl	800088c <__aeabi_ddiv>
 801862a:	e7dd      	b.n	80185e8 <__ieee754_pow+0xc0>
 801862c:	f04f 0b02 	mov.w	fp, #2
 8018630:	e7c4      	b.n	80185bc <__ieee754_pow+0x94>
 8018632:	f04f 0b00 	mov.w	fp, #0
 8018636:	e7c1      	b.n	80185bc <__ieee754_pow+0x94>
 8018638:	f1b9 0f00 	cmp.w	r9, #0
 801863c:	dad2      	bge.n	80185e4 <__ieee754_pow+0xbc>
 801863e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018642:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018646:	e7cf      	b.n	80185e8 <__ieee754_pow+0xc0>
 8018648:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801864c:	d106      	bne.n	801865c <__ieee754_pow+0x134>
 801864e:	4632      	mov	r2, r6
 8018650:	463b      	mov	r3, r7
 8018652:	4610      	mov	r0, r2
 8018654:	4619      	mov	r1, r3
 8018656:	f7e7 ffef 	bl	8000638 <__aeabi_dmul>
 801865a:	e7c5      	b.n	80185e8 <__ieee754_pow+0xc0>
 801865c:	4b39      	ldr	r3, [pc, #228]	; (8018744 <__ieee754_pow+0x21c>)
 801865e:	4599      	cmp	r9, r3
 8018660:	d10a      	bne.n	8018678 <__ieee754_pow+0x150>
 8018662:	2d00      	cmp	r5, #0
 8018664:	db08      	blt.n	8018678 <__ieee754_pow+0x150>
 8018666:	ec47 6b10 	vmov	d0, r6, r7
 801866a:	b011      	add	sp, #68	; 0x44
 801866c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018670:	f000 bc68 	b.w	8018f44 <__ieee754_sqrt>
 8018674:	f04f 0b00 	mov.w	fp, #0
 8018678:	ec47 6b10 	vmov	d0, r6, r7
 801867c:	f000 ffd5 	bl	801962a <fabs>
 8018680:	ec51 0b10 	vmov	r0, r1, d0
 8018684:	f1ba 0f00 	cmp.w	sl, #0
 8018688:	d127      	bne.n	80186da <__ieee754_pow+0x1b2>
 801868a:	b124      	cbz	r4, 8018696 <__ieee754_pow+0x16e>
 801868c:	4b2c      	ldr	r3, [pc, #176]	; (8018740 <__ieee754_pow+0x218>)
 801868e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018692:	429a      	cmp	r2, r3
 8018694:	d121      	bne.n	80186da <__ieee754_pow+0x1b2>
 8018696:	f1b9 0f00 	cmp.w	r9, #0
 801869a:	da05      	bge.n	80186a8 <__ieee754_pow+0x180>
 801869c:	4602      	mov	r2, r0
 801869e:	460b      	mov	r3, r1
 80186a0:	2000      	movs	r0, #0
 80186a2:	4927      	ldr	r1, [pc, #156]	; (8018740 <__ieee754_pow+0x218>)
 80186a4:	f7e8 f8f2 	bl	800088c <__aeabi_ddiv>
 80186a8:	2d00      	cmp	r5, #0
 80186aa:	da9d      	bge.n	80185e8 <__ieee754_pow+0xc0>
 80186ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80186b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80186b4:	ea54 030b 	orrs.w	r3, r4, fp
 80186b8:	d108      	bne.n	80186cc <__ieee754_pow+0x1a4>
 80186ba:	4602      	mov	r2, r0
 80186bc:	460b      	mov	r3, r1
 80186be:	4610      	mov	r0, r2
 80186c0:	4619      	mov	r1, r3
 80186c2:	f7e7 fe01 	bl	80002c8 <__aeabi_dsub>
 80186c6:	4602      	mov	r2, r0
 80186c8:	460b      	mov	r3, r1
 80186ca:	e7ac      	b.n	8018626 <__ieee754_pow+0xfe>
 80186cc:	f1bb 0f01 	cmp.w	fp, #1
 80186d0:	d18a      	bne.n	80185e8 <__ieee754_pow+0xc0>
 80186d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186d6:	4619      	mov	r1, r3
 80186d8:	e786      	b.n	80185e8 <__ieee754_pow+0xc0>
 80186da:	0fed      	lsrs	r5, r5, #31
 80186dc:	1e6b      	subs	r3, r5, #1
 80186de:	930d      	str	r3, [sp, #52]	; 0x34
 80186e0:	ea5b 0303 	orrs.w	r3, fp, r3
 80186e4:	d102      	bne.n	80186ec <__ieee754_pow+0x1c4>
 80186e6:	4632      	mov	r2, r6
 80186e8:	463b      	mov	r3, r7
 80186ea:	e7e8      	b.n	80186be <__ieee754_pow+0x196>
 80186ec:	4b16      	ldr	r3, [pc, #88]	; (8018748 <__ieee754_pow+0x220>)
 80186ee:	4598      	cmp	r8, r3
 80186f0:	f340 80fe 	ble.w	80188f0 <__ieee754_pow+0x3c8>
 80186f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80186f8:	4598      	cmp	r8, r3
 80186fa:	dd0a      	ble.n	8018712 <__ieee754_pow+0x1ea>
 80186fc:	4b0f      	ldr	r3, [pc, #60]	; (801873c <__ieee754_pow+0x214>)
 80186fe:	429c      	cmp	r4, r3
 8018700:	dc0d      	bgt.n	801871e <__ieee754_pow+0x1f6>
 8018702:	f1b9 0f00 	cmp.w	r9, #0
 8018706:	f6bf af6d 	bge.w	80185e4 <__ieee754_pow+0xbc>
 801870a:	a307      	add	r3, pc, #28	; (adr r3, 8018728 <__ieee754_pow+0x200>)
 801870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018710:	e79f      	b.n	8018652 <__ieee754_pow+0x12a>
 8018712:	4b0e      	ldr	r3, [pc, #56]	; (801874c <__ieee754_pow+0x224>)
 8018714:	429c      	cmp	r4, r3
 8018716:	ddf4      	ble.n	8018702 <__ieee754_pow+0x1da>
 8018718:	4b09      	ldr	r3, [pc, #36]	; (8018740 <__ieee754_pow+0x218>)
 801871a:	429c      	cmp	r4, r3
 801871c:	dd18      	ble.n	8018750 <__ieee754_pow+0x228>
 801871e:	f1b9 0f00 	cmp.w	r9, #0
 8018722:	dcf2      	bgt.n	801870a <__ieee754_pow+0x1e2>
 8018724:	e75e      	b.n	80185e4 <__ieee754_pow+0xbc>
 8018726:	bf00      	nop
 8018728:	8800759c 	.word	0x8800759c
 801872c:	7e37e43c 	.word	0x7e37e43c
 8018730:	7ff00000 	.word	0x7ff00000
 8018734:	0801a239 	.word	0x0801a239
 8018738:	433fffff 	.word	0x433fffff
 801873c:	3fefffff 	.word	0x3fefffff
 8018740:	3ff00000 	.word	0x3ff00000
 8018744:	3fe00000 	.word	0x3fe00000
 8018748:	41e00000 	.word	0x41e00000
 801874c:	3feffffe 	.word	0x3feffffe
 8018750:	2200      	movs	r2, #0
 8018752:	4b63      	ldr	r3, [pc, #396]	; (80188e0 <__ieee754_pow+0x3b8>)
 8018754:	f7e7 fdb8 	bl	80002c8 <__aeabi_dsub>
 8018758:	a355      	add	r3, pc, #340	; (adr r3, 80188b0 <__ieee754_pow+0x388>)
 801875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801875e:	4604      	mov	r4, r0
 8018760:	460d      	mov	r5, r1
 8018762:	f7e7 ff69 	bl	8000638 <__aeabi_dmul>
 8018766:	a354      	add	r3, pc, #336	; (adr r3, 80188b8 <__ieee754_pow+0x390>)
 8018768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801876c:	4606      	mov	r6, r0
 801876e:	460f      	mov	r7, r1
 8018770:	4620      	mov	r0, r4
 8018772:	4629      	mov	r1, r5
 8018774:	f7e7 ff60 	bl	8000638 <__aeabi_dmul>
 8018778:	2200      	movs	r2, #0
 801877a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801877e:	4b59      	ldr	r3, [pc, #356]	; (80188e4 <__ieee754_pow+0x3bc>)
 8018780:	4620      	mov	r0, r4
 8018782:	4629      	mov	r1, r5
 8018784:	f7e7 ff58 	bl	8000638 <__aeabi_dmul>
 8018788:	4602      	mov	r2, r0
 801878a:	460b      	mov	r3, r1
 801878c:	a14c      	add	r1, pc, #304	; (adr r1, 80188c0 <__ieee754_pow+0x398>)
 801878e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018792:	f7e7 fd99 	bl	80002c8 <__aeabi_dsub>
 8018796:	4622      	mov	r2, r4
 8018798:	462b      	mov	r3, r5
 801879a:	f7e7 ff4d 	bl	8000638 <__aeabi_dmul>
 801879e:	4602      	mov	r2, r0
 80187a0:	460b      	mov	r3, r1
 80187a2:	2000      	movs	r0, #0
 80187a4:	4950      	ldr	r1, [pc, #320]	; (80188e8 <__ieee754_pow+0x3c0>)
 80187a6:	f7e7 fd8f 	bl	80002c8 <__aeabi_dsub>
 80187aa:	4622      	mov	r2, r4
 80187ac:	462b      	mov	r3, r5
 80187ae:	4680      	mov	r8, r0
 80187b0:	4689      	mov	r9, r1
 80187b2:	4620      	mov	r0, r4
 80187b4:	4629      	mov	r1, r5
 80187b6:	f7e7 ff3f 	bl	8000638 <__aeabi_dmul>
 80187ba:	4602      	mov	r2, r0
 80187bc:	460b      	mov	r3, r1
 80187be:	4640      	mov	r0, r8
 80187c0:	4649      	mov	r1, r9
 80187c2:	f7e7 ff39 	bl	8000638 <__aeabi_dmul>
 80187c6:	a340      	add	r3, pc, #256	; (adr r3, 80188c8 <__ieee754_pow+0x3a0>)
 80187c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187cc:	f7e7 ff34 	bl	8000638 <__aeabi_dmul>
 80187d0:	4602      	mov	r2, r0
 80187d2:	460b      	mov	r3, r1
 80187d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187d8:	f7e7 fd76 	bl	80002c8 <__aeabi_dsub>
 80187dc:	4602      	mov	r2, r0
 80187de:	460b      	mov	r3, r1
 80187e0:	4604      	mov	r4, r0
 80187e2:	460d      	mov	r5, r1
 80187e4:	4630      	mov	r0, r6
 80187e6:	4639      	mov	r1, r7
 80187e8:	f7e7 fd70 	bl	80002cc <__adddf3>
 80187ec:	2000      	movs	r0, #0
 80187ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80187f2:	4632      	mov	r2, r6
 80187f4:	463b      	mov	r3, r7
 80187f6:	f7e7 fd67 	bl	80002c8 <__aeabi_dsub>
 80187fa:	4602      	mov	r2, r0
 80187fc:	460b      	mov	r3, r1
 80187fe:	4620      	mov	r0, r4
 8018800:	4629      	mov	r1, r5
 8018802:	f7e7 fd61 	bl	80002c8 <__aeabi_dsub>
 8018806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018808:	f10b 33ff 	add.w	r3, fp, #4294967295
 801880c:	4313      	orrs	r3, r2
 801880e:	4606      	mov	r6, r0
 8018810:	460f      	mov	r7, r1
 8018812:	f040 81eb 	bne.w	8018bec <__ieee754_pow+0x6c4>
 8018816:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80188d0 <__ieee754_pow+0x3a8>
 801881a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801881e:	2400      	movs	r4, #0
 8018820:	4622      	mov	r2, r4
 8018822:	462b      	mov	r3, r5
 8018824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018828:	ed8d 7b02 	vstr	d7, [sp, #8]
 801882c:	f7e7 fd4c 	bl	80002c8 <__aeabi_dsub>
 8018830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018834:	f7e7 ff00 	bl	8000638 <__aeabi_dmul>
 8018838:	e9dd 2300 	ldrd	r2, r3, [sp]
 801883c:	4680      	mov	r8, r0
 801883e:	4689      	mov	r9, r1
 8018840:	4630      	mov	r0, r6
 8018842:	4639      	mov	r1, r7
 8018844:	f7e7 fef8 	bl	8000638 <__aeabi_dmul>
 8018848:	4602      	mov	r2, r0
 801884a:	460b      	mov	r3, r1
 801884c:	4640      	mov	r0, r8
 801884e:	4649      	mov	r1, r9
 8018850:	f7e7 fd3c 	bl	80002cc <__adddf3>
 8018854:	4622      	mov	r2, r4
 8018856:	462b      	mov	r3, r5
 8018858:	4680      	mov	r8, r0
 801885a:	4689      	mov	r9, r1
 801885c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018860:	f7e7 feea 	bl	8000638 <__aeabi_dmul>
 8018864:	460b      	mov	r3, r1
 8018866:	4604      	mov	r4, r0
 8018868:	460d      	mov	r5, r1
 801886a:	4602      	mov	r2, r0
 801886c:	4649      	mov	r1, r9
 801886e:	4640      	mov	r0, r8
 8018870:	e9cd 4500 	strd	r4, r5, [sp]
 8018874:	f7e7 fd2a 	bl	80002cc <__adddf3>
 8018878:	4b1c      	ldr	r3, [pc, #112]	; (80188ec <__ieee754_pow+0x3c4>)
 801887a:	4299      	cmp	r1, r3
 801887c:	4606      	mov	r6, r0
 801887e:	460f      	mov	r7, r1
 8018880:	468b      	mov	fp, r1
 8018882:	f340 82f7 	ble.w	8018e74 <__ieee754_pow+0x94c>
 8018886:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801888a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801888e:	4303      	orrs	r3, r0
 8018890:	f000 81ea 	beq.w	8018c68 <__ieee754_pow+0x740>
 8018894:	a310      	add	r3, pc, #64	; (adr r3, 80188d8 <__ieee754_pow+0x3b0>)
 8018896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801889a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801889e:	f7e7 fecb 	bl	8000638 <__aeabi_dmul>
 80188a2:	a30d      	add	r3, pc, #52	; (adr r3, 80188d8 <__ieee754_pow+0x3b0>)
 80188a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188a8:	e6d5      	b.n	8018656 <__ieee754_pow+0x12e>
 80188aa:	bf00      	nop
 80188ac:	f3af 8000 	nop.w
 80188b0:	60000000 	.word	0x60000000
 80188b4:	3ff71547 	.word	0x3ff71547
 80188b8:	f85ddf44 	.word	0xf85ddf44
 80188bc:	3e54ae0b 	.word	0x3e54ae0b
 80188c0:	55555555 	.word	0x55555555
 80188c4:	3fd55555 	.word	0x3fd55555
 80188c8:	652b82fe 	.word	0x652b82fe
 80188cc:	3ff71547 	.word	0x3ff71547
 80188d0:	00000000 	.word	0x00000000
 80188d4:	bff00000 	.word	0xbff00000
 80188d8:	8800759c 	.word	0x8800759c
 80188dc:	7e37e43c 	.word	0x7e37e43c
 80188e0:	3ff00000 	.word	0x3ff00000
 80188e4:	3fd00000 	.word	0x3fd00000
 80188e8:	3fe00000 	.word	0x3fe00000
 80188ec:	408fffff 	.word	0x408fffff
 80188f0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80188f4:	f04f 0200 	mov.w	r2, #0
 80188f8:	da05      	bge.n	8018906 <__ieee754_pow+0x3de>
 80188fa:	4bd3      	ldr	r3, [pc, #844]	; (8018c48 <__ieee754_pow+0x720>)
 80188fc:	f7e7 fe9c 	bl	8000638 <__aeabi_dmul>
 8018900:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018904:	460c      	mov	r4, r1
 8018906:	1523      	asrs	r3, r4, #20
 8018908:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801890c:	4413      	add	r3, r2
 801890e:	9309      	str	r3, [sp, #36]	; 0x24
 8018910:	4bce      	ldr	r3, [pc, #824]	; (8018c4c <__ieee754_pow+0x724>)
 8018912:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018916:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801891a:	429c      	cmp	r4, r3
 801891c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018920:	dd08      	ble.n	8018934 <__ieee754_pow+0x40c>
 8018922:	4bcb      	ldr	r3, [pc, #812]	; (8018c50 <__ieee754_pow+0x728>)
 8018924:	429c      	cmp	r4, r3
 8018926:	f340 815e 	ble.w	8018be6 <__ieee754_pow+0x6be>
 801892a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801892c:	3301      	adds	r3, #1
 801892e:	9309      	str	r3, [sp, #36]	; 0x24
 8018930:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018934:	f04f 0a00 	mov.w	sl, #0
 8018938:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801893c:	930c      	str	r3, [sp, #48]	; 0x30
 801893e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018940:	4bc4      	ldr	r3, [pc, #784]	; (8018c54 <__ieee754_pow+0x72c>)
 8018942:	4413      	add	r3, r2
 8018944:	ed93 7b00 	vldr	d7, [r3]
 8018948:	4629      	mov	r1, r5
 801894a:	ec53 2b17 	vmov	r2, r3, d7
 801894e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018952:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018956:	f7e7 fcb7 	bl	80002c8 <__aeabi_dsub>
 801895a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801895e:	4606      	mov	r6, r0
 8018960:	460f      	mov	r7, r1
 8018962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018966:	f7e7 fcb1 	bl	80002cc <__adddf3>
 801896a:	4602      	mov	r2, r0
 801896c:	460b      	mov	r3, r1
 801896e:	2000      	movs	r0, #0
 8018970:	49b9      	ldr	r1, [pc, #740]	; (8018c58 <__ieee754_pow+0x730>)
 8018972:	f7e7 ff8b 	bl	800088c <__aeabi_ddiv>
 8018976:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801897a:	4602      	mov	r2, r0
 801897c:	460b      	mov	r3, r1
 801897e:	4630      	mov	r0, r6
 8018980:	4639      	mov	r1, r7
 8018982:	f7e7 fe59 	bl	8000638 <__aeabi_dmul>
 8018986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801898a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801898e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8018992:	2300      	movs	r3, #0
 8018994:	9302      	str	r3, [sp, #8]
 8018996:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801899a:	106d      	asrs	r5, r5, #1
 801899c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80189a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80189a4:	2200      	movs	r2, #0
 80189a6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80189aa:	4640      	mov	r0, r8
 80189ac:	4649      	mov	r1, r9
 80189ae:	4614      	mov	r4, r2
 80189b0:	461d      	mov	r5, r3
 80189b2:	f7e7 fe41 	bl	8000638 <__aeabi_dmul>
 80189b6:	4602      	mov	r2, r0
 80189b8:	460b      	mov	r3, r1
 80189ba:	4630      	mov	r0, r6
 80189bc:	4639      	mov	r1, r7
 80189be:	f7e7 fc83 	bl	80002c8 <__aeabi_dsub>
 80189c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80189c6:	4606      	mov	r6, r0
 80189c8:	460f      	mov	r7, r1
 80189ca:	4620      	mov	r0, r4
 80189cc:	4629      	mov	r1, r5
 80189ce:	f7e7 fc7b 	bl	80002c8 <__aeabi_dsub>
 80189d2:	4602      	mov	r2, r0
 80189d4:	460b      	mov	r3, r1
 80189d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80189da:	f7e7 fc75 	bl	80002c8 <__aeabi_dsub>
 80189de:	4642      	mov	r2, r8
 80189e0:	464b      	mov	r3, r9
 80189e2:	f7e7 fe29 	bl	8000638 <__aeabi_dmul>
 80189e6:	4602      	mov	r2, r0
 80189e8:	460b      	mov	r3, r1
 80189ea:	4630      	mov	r0, r6
 80189ec:	4639      	mov	r1, r7
 80189ee:	f7e7 fc6b 	bl	80002c8 <__aeabi_dsub>
 80189f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80189f6:	f7e7 fe1f 	bl	8000638 <__aeabi_dmul>
 80189fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80189fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018a02:	4610      	mov	r0, r2
 8018a04:	4619      	mov	r1, r3
 8018a06:	f7e7 fe17 	bl	8000638 <__aeabi_dmul>
 8018a0a:	a37b      	add	r3, pc, #492	; (adr r3, 8018bf8 <__ieee754_pow+0x6d0>)
 8018a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a10:	4604      	mov	r4, r0
 8018a12:	460d      	mov	r5, r1
 8018a14:	f7e7 fe10 	bl	8000638 <__aeabi_dmul>
 8018a18:	a379      	add	r3, pc, #484	; (adr r3, 8018c00 <__ieee754_pow+0x6d8>)
 8018a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a1e:	f7e7 fc55 	bl	80002cc <__adddf3>
 8018a22:	4622      	mov	r2, r4
 8018a24:	462b      	mov	r3, r5
 8018a26:	f7e7 fe07 	bl	8000638 <__aeabi_dmul>
 8018a2a:	a377      	add	r3, pc, #476	; (adr r3, 8018c08 <__ieee754_pow+0x6e0>)
 8018a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a30:	f7e7 fc4c 	bl	80002cc <__adddf3>
 8018a34:	4622      	mov	r2, r4
 8018a36:	462b      	mov	r3, r5
 8018a38:	f7e7 fdfe 	bl	8000638 <__aeabi_dmul>
 8018a3c:	a374      	add	r3, pc, #464	; (adr r3, 8018c10 <__ieee754_pow+0x6e8>)
 8018a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a42:	f7e7 fc43 	bl	80002cc <__adddf3>
 8018a46:	4622      	mov	r2, r4
 8018a48:	462b      	mov	r3, r5
 8018a4a:	f7e7 fdf5 	bl	8000638 <__aeabi_dmul>
 8018a4e:	a372      	add	r3, pc, #456	; (adr r3, 8018c18 <__ieee754_pow+0x6f0>)
 8018a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a54:	f7e7 fc3a 	bl	80002cc <__adddf3>
 8018a58:	4622      	mov	r2, r4
 8018a5a:	462b      	mov	r3, r5
 8018a5c:	f7e7 fdec 	bl	8000638 <__aeabi_dmul>
 8018a60:	a36f      	add	r3, pc, #444	; (adr r3, 8018c20 <__ieee754_pow+0x6f8>)
 8018a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a66:	f7e7 fc31 	bl	80002cc <__adddf3>
 8018a6a:	4622      	mov	r2, r4
 8018a6c:	4606      	mov	r6, r0
 8018a6e:	460f      	mov	r7, r1
 8018a70:	462b      	mov	r3, r5
 8018a72:	4620      	mov	r0, r4
 8018a74:	4629      	mov	r1, r5
 8018a76:	f7e7 fddf 	bl	8000638 <__aeabi_dmul>
 8018a7a:	4602      	mov	r2, r0
 8018a7c:	460b      	mov	r3, r1
 8018a7e:	4630      	mov	r0, r6
 8018a80:	4639      	mov	r1, r7
 8018a82:	f7e7 fdd9 	bl	8000638 <__aeabi_dmul>
 8018a86:	4642      	mov	r2, r8
 8018a88:	4604      	mov	r4, r0
 8018a8a:	460d      	mov	r5, r1
 8018a8c:	464b      	mov	r3, r9
 8018a8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a92:	f7e7 fc1b 	bl	80002cc <__adddf3>
 8018a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018a9a:	f7e7 fdcd 	bl	8000638 <__aeabi_dmul>
 8018a9e:	4622      	mov	r2, r4
 8018aa0:	462b      	mov	r3, r5
 8018aa2:	f7e7 fc13 	bl	80002cc <__adddf3>
 8018aa6:	4642      	mov	r2, r8
 8018aa8:	4606      	mov	r6, r0
 8018aaa:	460f      	mov	r7, r1
 8018aac:	464b      	mov	r3, r9
 8018aae:	4640      	mov	r0, r8
 8018ab0:	4649      	mov	r1, r9
 8018ab2:	f7e7 fdc1 	bl	8000638 <__aeabi_dmul>
 8018ab6:	2200      	movs	r2, #0
 8018ab8:	4b68      	ldr	r3, [pc, #416]	; (8018c5c <__ieee754_pow+0x734>)
 8018aba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018abe:	f7e7 fc05 	bl	80002cc <__adddf3>
 8018ac2:	4632      	mov	r2, r6
 8018ac4:	463b      	mov	r3, r7
 8018ac6:	f7e7 fc01 	bl	80002cc <__adddf3>
 8018aca:	9802      	ldr	r0, [sp, #8]
 8018acc:	460d      	mov	r5, r1
 8018ace:	4604      	mov	r4, r0
 8018ad0:	4602      	mov	r2, r0
 8018ad2:	460b      	mov	r3, r1
 8018ad4:	4640      	mov	r0, r8
 8018ad6:	4649      	mov	r1, r9
 8018ad8:	f7e7 fdae 	bl	8000638 <__aeabi_dmul>
 8018adc:	2200      	movs	r2, #0
 8018ade:	4680      	mov	r8, r0
 8018ae0:	4689      	mov	r9, r1
 8018ae2:	4b5e      	ldr	r3, [pc, #376]	; (8018c5c <__ieee754_pow+0x734>)
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	4629      	mov	r1, r5
 8018ae8:	f7e7 fbee 	bl	80002c8 <__aeabi_dsub>
 8018aec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018af0:	f7e7 fbea 	bl	80002c8 <__aeabi_dsub>
 8018af4:	4602      	mov	r2, r0
 8018af6:	460b      	mov	r3, r1
 8018af8:	4630      	mov	r0, r6
 8018afa:	4639      	mov	r1, r7
 8018afc:	f7e7 fbe4 	bl	80002c8 <__aeabi_dsub>
 8018b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018b04:	f7e7 fd98 	bl	8000638 <__aeabi_dmul>
 8018b08:	4622      	mov	r2, r4
 8018b0a:	4606      	mov	r6, r0
 8018b0c:	460f      	mov	r7, r1
 8018b0e:	462b      	mov	r3, r5
 8018b10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018b14:	f7e7 fd90 	bl	8000638 <__aeabi_dmul>
 8018b18:	4602      	mov	r2, r0
 8018b1a:	460b      	mov	r3, r1
 8018b1c:	4630      	mov	r0, r6
 8018b1e:	4639      	mov	r1, r7
 8018b20:	f7e7 fbd4 	bl	80002cc <__adddf3>
 8018b24:	4606      	mov	r6, r0
 8018b26:	460f      	mov	r7, r1
 8018b28:	4602      	mov	r2, r0
 8018b2a:	460b      	mov	r3, r1
 8018b2c:	4640      	mov	r0, r8
 8018b2e:	4649      	mov	r1, r9
 8018b30:	f7e7 fbcc 	bl	80002cc <__adddf3>
 8018b34:	9802      	ldr	r0, [sp, #8]
 8018b36:	a33c      	add	r3, pc, #240	; (adr r3, 8018c28 <__ieee754_pow+0x700>)
 8018b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3c:	4604      	mov	r4, r0
 8018b3e:	460d      	mov	r5, r1
 8018b40:	f7e7 fd7a 	bl	8000638 <__aeabi_dmul>
 8018b44:	4642      	mov	r2, r8
 8018b46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b4a:	464b      	mov	r3, r9
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	4629      	mov	r1, r5
 8018b50:	f7e7 fbba 	bl	80002c8 <__aeabi_dsub>
 8018b54:	4602      	mov	r2, r0
 8018b56:	460b      	mov	r3, r1
 8018b58:	4630      	mov	r0, r6
 8018b5a:	4639      	mov	r1, r7
 8018b5c:	f7e7 fbb4 	bl	80002c8 <__aeabi_dsub>
 8018b60:	a333      	add	r3, pc, #204	; (adr r3, 8018c30 <__ieee754_pow+0x708>)
 8018b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b66:	f7e7 fd67 	bl	8000638 <__aeabi_dmul>
 8018b6a:	a333      	add	r3, pc, #204	; (adr r3, 8018c38 <__ieee754_pow+0x710>)
 8018b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b70:	4606      	mov	r6, r0
 8018b72:	460f      	mov	r7, r1
 8018b74:	4620      	mov	r0, r4
 8018b76:	4629      	mov	r1, r5
 8018b78:	f7e7 fd5e 	bl	8000638 <__aeabi_dmul>
 8018b7c:	4602      	mov	r2, r0
 8018b7e:	460b      	mov	r3, r1
 8018b80:	4630      	mov	r0, r6
 8018b82:	4639      	mov	r1, r7
 8018b84:	f7e7 fba2 	bl	80002cc <__adddf3>
 8018b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b8a:	4b35      	ldr	r3, [pc, #212]	; (8018c60 <__ieee754_pow+0x738>)
 8018b8c:	4413      	add	r3, r2
 8018b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b92:	f7e7 fb9b 	bl	80002cc <__adddf3>
 8018b96:	4604      	mov	r4, r0
 8018b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b9a:	460d      	mov	r5, r1
 8018b9c:	f7e7 fce2 	bl	8000564 <__aeabi_i2d>
 8018ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ba2:	4b30      	ldr	r3, [pc, #192]	; (8018c64 <__ieee754_pow+0x73c>)
 8018ba4:	4413      	add	r3, r2
 8018ba6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018baa:	4606      	mov	r6, r0
 8018bac:	460f      	mov	r7, r1
 8018bae:	4622      	mov	r2, r4
 8018bb0:	462b      	mov	r3, r5
 8018bb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018bb6:	f7e7 fb89 	bl	80002cc <__adddf3>
 8018bba:	4642      	mov	r2, r8
 8018bbc:	464b      	mov	r3, r9
 8018bbe:	f7e7 fb85 	bl	80002cc <__adddf3>
 8018bc2:	4632      	mov	r2, r6
 8018bc4:	463b      	mov	r3, r7
 8018bc6:	f7e7 fb81 	bl	80002cc <__adddf3>
 8018bca:	9802      	ldr	r0, [sp, #8]
 8018bcc:	4632      	mov	r2, r6
 8018bce:	463b      	mov	r3, r7
 8018bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bd4:	f7e7 fb78 	bl	80002c8 <__aeabi_dsub>
 8018bd8:	4642      	mov	r2, r8
 8018bda:	464b      	mov	r3, r9
 8018bdc:	f7e7 fb74 	bl	80002c8 <__aeabi_dsub>
 8018be0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018be4:	e607      	b.n	80187f6 <__ieee754_pow+0x2ce>
 8018be6:	f04f 0a01 	mov.w	sl, #1
 8018bea:	e6a5      	b.n	8018938 <__ieee754_pow+0x410>
 8018bec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018c40 <__ieee754_pow+0x718>
 8018bf0:	e613      	b.n	801881a <__ieee754_pow+0x2f2>
 8018bf2:	bf00      	nop
 8018bf4:	f3af 8000 	nop.w
 8018bf8:	4a454eef 	.word	0x4a454eef
 8018bfc:	3fca7e28 	.word	0x3fca7e28
 8018c00:	93c9db65 	.word	0x93c9db65
 8018c04:	3fcd864a 	.word	0x3fcd864a
 8018c08:	a91d4101 	.word	0xa91d4101
 8018c0c:	3fd17460 	.word	0x3fd17460
 8018c10:	518f264d 	.word	0x518f264d
 8018c14:	3fd55555 	.word	0x3fd55555
 8018c18:	db6fabff 	.word	0xdb6fabff
 8018c1c:	3fdb6db6 	.word	0x3fdb6db6
 8018c20:	33333303 	.word	0x33333303
 8018c24:	3fe33333 	.word	0x3fe33333
 8018c28:	e0000000 	.word	0xe0000000
 8018c2c:	3feec709 	.word	0x3feec709
 8018c30:	dc3a03fd 	.word	0xdc3a03fd
 8018c34:	3feec709 	.word	0x3feec709
 8018c38:	145b01f5 	.word	0x145b01f5
 8018c3c:	be3e2fe0 	.word	0xbe3e2fe0
 8018c40:	00000000 	.word	0x00000000
 8018c44:	3ff00000 	.word	0x3ff00000
 8018c48:	43400000 	.word	0x43400000
 8018c4c:	0003988e 	.word	0x0003988e
 8018c50:	000bb679 	.word	0x000bb679
 8018c54:	0801a278 	.word	0x0801a278
 8018c58:	3ff00000 	.word	0x3ff00000
 8018c5c:	40080000 	.word	0x40080000
 8018c60:	0801a298 	.word	0x0801a298
 8018c64:	0801a288 	.word	0x0801a288
 8018c68:	a3b4      	add	r3, pc, #720	; (adr r3, 8018f3c <__ieee754_pow+0xa14>)
 8018c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c6e:	4640      	mov	r0, r8
 8018c70:	4649      	mov	r1, r9
 8018c72:	f7e7 fb2b 	bl	80002cc <__adddf3>
 8018c76:	4622      	mov	r2, r4
 8018c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c7c:	462b      	mov	r3, r5
 8018c7e:	4630      	mov	r0, r6
 8018c80:	4639      	mov	r1, r7
 8018c82:	f7e7 fb21 	bl	80002c8 <__aeabi_dsub>
 8018c86:	4602      	mov	r2, r0
 8018c88:	460b      	mov	r3, r1
 8018c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c8e:	f7e7 ff63 	bl	8000b58 <__aeabi_dcmpgt>
 8018c92:	2800      	cmp	r0, #0
 8018c94:	f47f adfe 	bne.w	8018894 <__ieee754_pow+0x36c>
 8018c98:	4aa3      	ldr	r2, [pc, #652]	; (8018f28 <__ieee754_pow+0xa00>)
 8018c9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018c9e:	4293      	cmp	r3, r2
 8018ca0:	f340 810a 	ble.w	8018eb8 <__ieee754_pow+0x990>
 8018ca4:	151b      	asrs	r3, r3, #20
 8018ca6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018caa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018cae:	fa4a f303 	asr.w	r3, sl, r3
 8018cb2:	445b      	add	r3, fp
 8018cb4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018cb8:	4e9c      	ldr	r6, [pc, #624]	; (8018f2c <__ieee754_pow+0xa04>)
 8018cba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018cbe:	4116      	asrs	r6, r2
 8018cc0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018cc4:	2000      	movs	r0, #0
 8018cc6:	ea23 0106 	bic.w	r1, r3, r6
 8018cca:	f1c2 0214 	rsb	r2, r2, #20
 8018cce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018cd2:	fa4a fa02 	asr.w	sl, sl, r2
 8018cd6:	f1bb 0f00 	cmp.w	fp, #0
 8018cda:	4602      	mov	r2, r0
 8018cdc:	460b      	mov	r3, r1
 8018cde:	4620      	mov	r0, r4
 8018ce0:	4629      	mov	r1, r5
 8018ce2:	bfb8      	it	lt
 8018ce4:	f1ca 0a00 	rsblt	sl, sl, #0
 8018ce8:	f7e7 faee 	bl	80002c8 <__aeabi_dsub>
 8018cec:	e9cd 0100 	strd	r0, r1, [sp]
 8018cf0:	4642      	mov	r2, r8
 8018cf2:	464b      	mov	r3, r9
 8018cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018cf8:	f7e7 fae8 	bl	80002cc <__adddf3>
 8018cfc:	2000      	movs	r0, #0
 8018cfe:	a378      	add	r3, pc, #480	; (adr r3, 8018ee0 <__ieee754_pow+0x9b8>)
 8018d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d04:	4604      	mov	r4, r0
 8018d06:	460d      	mov	r5, r1
 8018d08:	f7e7 fc96 	bl	8000638 <__aeabi_dmul>
 8018d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d10:	4606      	mov	r6, r0
 8018d12:	460f      	mov	r7, r1
 8018d14:	4620      	mov	r0, r4
 8018d16:	4629      	mov	r1, r5
 8018d18:	f7e7 fad6 	bl	80002c8 <__aeabi_dsub>
 8018d1c:	4602      	mov	r2, r0
 8018d1e:	460b      	mov	r3, r1
 8018d20:	4640      	mov	r0, r8
 8018d22:	4649      	mov	r1, r9
 8018d24:	f7e7 fad0 	bl	80002c8 <__aeabi_dsub>
 8018d28:	a36f      	add	r3, pc, #444	; (adr r3, 8018ee8 <__ieee754_pow+0x9c0>)
 8018d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d2e:	f7e7 fc83 	bl	8000638 <__aeabi_dmul>
 8018d32:	a36f      	add	r3, pc, #444	; (adr r3, 8018ef0 <__ieee754_pow+0x9c8>)
 8018d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d38:	4680      	mov	r8, r0
 8018d3a:	4689      	mov	r9, r1
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	4629      	mov	r1, r5
 8018d40:	f7e7 fc7a 	bl	8000638 <__aeabi_dmul>
 8018d44:	4602      	mov	r2, r0
 8018d46:	460b      	mov	r3, r1
 8018d48:	4640      	mov	r0, r8
 8018d4a:	4649      	mov	r1, r9
 8018d4c:	f7e7 fabe 	bl	80002cc <__adddf3>
 8018d50:	4604      	mov	r4, r0
 8018d52:	460d      	mov	r5, r1
 8018d54:	4602      	mov	r2, r0
 8018d56:	460b      	mov	r3, r1
 8018d58:	4630      	mov	r0, r6
 8018d5a:	4639      	mov	r1, r7
 8018d5c:	f7e7 fab6 	bl	80002cc <__adddf3>
 8018d60:	4632      	mov	r2, r6
 8018d62:	463b      	mov	r3, r7
 8018d64:	4680      	mov	r8, r0
 8018d66:	4689      	mov	r9, r1
 8018d68:	f7e7 faae 	bl	80002c8 <__aeabi_dsub>
 8018d6c:	4602      	mov	r2, r0
 8018d6e:	460b      	mov	r3, r1
 8018d70:	4620      	mov	r0, r4
 8018d72:	4629      	mov	r1, r5
 8018d74:	f7e7 faa8 	bl	80002c8 <__aeabi_dsub>
 8018d78:	4642      	mov	r2, r8
 8018d7a:	4606      	mov	r6, r0
 8018d7c:	460f      	mov	r7, r1
 8018d7e:	464b      	mov	r3, r9
 8018d80:	4640      	mov	r0, r8
 8018d82:	4649      	mov	r1, r9
 8018d84:	f7e7 fc58 	bl	8000638 <__aeabi_dmul>
 8018d88:	a35b      	add	r3, pc, #364	; (adr r3, 8018ef8 <__ieee754_pow+0x9d0>)
 8018d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d8e:	4604      	mov	r4, r0
 8018d90:	460d      	mov	r5, r1
 8018d92:	f7e7 fc51 	bl	8000638 <__aeabi_dmul>
 8018d96:	a35a      	add	r3, pc, #360	; (adr r3, 8018f00 <__ieee754_pow+0x9d8>)
 8018d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d9c:	f7e7 fa94 	bl	80002c8 <__aeabi_dsub>
 8018da0:	4622      	mov	r2, r4
 8018da2:	462b      	mov	r3, r5
 8018da4:	f7e7 fc48 	bl	8000638 <__aeabi_dmul>
 8018da8:	a357      	add	r3, pc, #348	; (adr r3, 8018f08 <__ieee754_pow+0x9e0>)
 8018daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dae:	f7e7 fa8d 	bl	80002cc <__adddf3>
 8018db2:	4622      	mov	r2, r4
 8018db4:	462b      	mov	r3, r5
 8018db6:	f7e7 fc3f 	bl	8000638 <__aeabi_dmul>
 8018dba:	a355      	add	r3, pc, #340	; (adr r3, 8018f10 <__ieee754_pow+0x9e8>)
 8018dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc0:	f7e7 fa82 	bl	80002c8 <__aeabi_dsub>
 8018dc4:	4622      	mov	r2, r4
 8018dc6:	462b      	mov	r3, r5
 8018dc8:	f7e7 fc36 	bl	8000638 <__aeabi_dmul>
 8018dcc:	a352      	add	r3, pc, #328	; (adr r3, 8018f18 <__ieee754_pow+0x9f0>)
 8018dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd2:	f7e7 fa7b 	bl	80002cc <__adddf3>
 8018dd6:	4622      	mov	r2, r4
 8018dd8:	462b      	mov	r3, r5
 8018dda:	f7e7 fc2d 	bl	8000638 <__aeabi_dmul>
 8018dde:	4602      	mov	r2, r0
 8018de0:	460b      	mov	r3, r1
 8018de2:	4640      	mov	r0, r8
 8018de4:	4649      	mov	r1, r9
 8018de6:	f7e7 fa6f 	bl	80002c8 <__aeabi_dsub>
 8018dea:	4604      	mov	r4, r0
 8018dec:	460d      	mov	r5, r1
 8018dee:	4602      	mov	r2, r0
 8018df0:	460b      	mov	r3, r1
 8018df2:	4640      	mov	r0, r8
 8018df4:	4649      	mov	r1, r9
 8018df6:	f7e7 fc1f 	bl	8000638 <__aeabi_dmul>
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	e9cd 0100 	strd	r0, r1, [sp]
 8018e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018e04:	4620      	mov	r0, r4
 8018e06:	4629      	mov	r1, r5
 8018e08:	f7e7 fa5e 	bl	80002c8 <__aeabi_dsub>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	460b      	mov	r3, r1
 8018e10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e14:	f7e7 fd3a 	bl	800088c <__aeabi_ddiv>
 8018e18:	4632      	mov	r2, r6
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	460d      	mov	r5, r1
 8018e1e:	463b      	mov	r3, r7
 8018e20:	4640      	mov	r0, r8
 8018e22:	4649      	mov	r1, r9
 8018e24:	f7e7 fc08 	bl	8000638 <__aeabi_dmul>
 8018e28:	4632      	mov	r2, r6
 8018e2a:	463b      	mov	r3, r7
 8018e2c:	f7e7 fa4e 	bl	80002cc <__adddf3>
 8018e30:	4602      	mov	r2, r0
 8018e32:	460b      	mov	r3, r1
 8018e34:	4620      	mov	r0, r4
 8018e36:	4629      	mov	r1, r5
 8018e38:	f7e7 fa46 	bl	80002c8 <__aeabi_dsub>
 8018e3c:	4642      	mov	r2, r8
 8018e3e:	464b      	mov	r3, r9
 8018e40:	f7e7 fa42 	bl	80002c8 <__aeabi_dsub>
 8018e44:	4602      	mov	r2, r0
 8018e46:	460b      	mov	r3, r1
 8018e48:	2000      	movs	r0, #0
 8018e4a:	4939      	ldr	r1, [pc, #228]	; (8018f30 <__ieee754_pow+0xa08>)
 8018e4c:	f7e7 fa3c 	bl	80002c8 <__aeabi_dsub>
 8018e50:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8018e54:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018e58:	4602      	mov	r2, r0
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	da2f      	bge.n	8018ebe <__ieee754_pow+0x996>
 8018e5e:	4650      	mov	r0, sl
 8018e60:	ec43 2b10 	vmov	d0, r2, r3
 8018e64:	f000 fc80 	bl	8019768 <scalbn>
 8018e68:	ec51 0b10 	vmov	r0, r1, d0
 8018e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e70:	f7ff bbf1 	b.w	8018656 <__ieee754_pow+0x12e>
 8018e74:	4b2f      	ldr	r3, [pc, #188]	; (8018f34 <__ieee754_pow+0xa0c>)
 8018e76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018e7a:	429e      	cmp	r6, r3
 8018e7c:	f77f af0c 	ble.w	8018c98 <__ieee754_pow+0x770>
 8018e80:	4b2d      	ldr	r3, [pc, #180]	; (8018f38 <__ieee754_pow+0xa10>)
 8018e82:	440b      	add	r3, r1
 8018e84:	4303      	orrs	r3, r0
 8018e86:	d00b      	beq.n	8018ea0 <__ieee754_pow+0x978>
 8018e88:	a325      	add	r3, pc, #148	; (adr r3, 8018f20 <__ieee754_pow+0x9f8>)
 8018e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018e92:	f7e7 fbd1 	bl	8000638 <__aeabi_dmul>
 8018e96:	a322      	add	r3, pc, #136	; (adr r3, 8018f20 <__ieee754_pow+0x9f8>)
 8018e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e9c:	f7ff bbdb 	b.w	8018656 <__ieee754_pow+0x12e>
 8018ea0:	4622      	mov	r2, r4
 8018ea2:	462b      	mov	r3, r5
 8018ea4:	f7e7 fa10 	bl	80002c8 <__aeabi_dsub>
 8018ea8:	4642      	mov	r2, r8
 8018eaa:	464b      	mov	r3, r9
 8018eac:	f7e7 fe4a 	bl	8000b44 <__aeabi_dcmpge>
 8018eb0:	2800      	cmp	r0, #0
 8018eb2:	f43f aef1 	beq.w	8018c98 <__ieee754_pow+0x770>
 8018eb6:	e7e7      	b.n	8018e88 <__ieee754_pow+0x960>
 8018eb8:	f04f 0a00 	mov.w	sl, #0
 8018ebc:	e718      	b.n	8018cf0 <__ieee754_pow+0x7c8>
 8018ebe:	4621      	mov	r1, r4
 8018ec0:	e7d4      	b.n	8018e6c <__ieee754_pow+0x944>
 8018ec2:	2000      	movs	r0, #0
 8018ec4:	491a      	ldr	r1, [pc, #104]	; (8018f30 <__ieee754_pow+0xa08>)
 8018ec6:	f7ff bb8f 	b.w	80185e8 <__ieee754_pow+0xc0>
 8018eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018ece:	f7ff bb8b 	b.w	80185e8 <__ieee754_pow+0xc0>
 8018ed2:	4630      	mov	r0, r6
 8018ed4:	4639      	mov	r1, r7
 8018ed6:	f7ff bb87 	b.w	80185e8 <__ieee754_pow+0xc0>
 8018eda:	4693      	mov	fp, r2
 8018edc:	f7ff bb98 	b.w	8018610 <__ieee754_pow+0xe8>
 8018ee0:	00000000 	.word	0x00000000
 8018ee4:	3fe62e43 	.word	0x3fe62e43
 8018ee8:	fefa39ef 	.word	0xfefa39ef
 8018eec:	3fe62e42 	.word	0x3fe62e42
 8018ef0:	0ca86c39 	.word	0x0ca86c39
 8018ef4:	be205c61 	.word	0xbe205c61
 8018ef8:	72bea4d0 	.word	0x72bea4d0
 8018efc:	3e663769 	.word	0x3e663769
 8018f00:	c5d26bf1 	.word	0xc5d26bf1
 8018f04:	3ebbbd41 	.word	0x3ebbbd41
 8018f08:	af25de2c 	.word	0xaf25de2c
 8018f0c:	3f11566a 	.word	0x3f11566a
 8018f10:	16bebd93 	.word	0x16bebd93
 8018f14:	3f66c16c 	.word	0x3f66c16c
 8018f18:	5555553e 	.word	0x5555553e
 8018f1c:	3fc55555 	.word	0x3fc55555
 8018f20:	c2f8f359 	.word	0xc2f8f359
 8018f24:	01a56e1f 	.word	0x01a56e1f
 8018f28:	3fe00000 	.word	0x3fe00000
 8018f2c:	000fffff 	.word	0x000fffff
 8018f30:	3ff00000 	.word	0x3ff00000
 8018f34:	4090cbff 	.word	0x4090cbff
 8018f38:	3f6f3400 	.word	0x3f6f3400
 8018f3c:	652b82fe 	.word	0x652b82fe
 8018f40:	3c971547 	.word	0x3c971547

08018f44 <__ieee754_sqrt>:
 8018f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f48:	4955      	ldr	r1, [pc, #340]	; (80190a0 <__ieee754_sqrt+0x15c>)
 8018f4a:	ec55 4b10 	vmov	r4, r5, d0
 8018f4e:	43a9      	bics	r1, r5
 8018f50:	462b      	mov	r3, r5
 8018f52:	462a      	mov	r2, r5
 8018f54:	d112      	bne.n	8018f7c <__ieee754_sqrt+0x38>
 8018f56:	ee10 2a10 	vmov	r2, s0
 8018f5a:	ee10 0a10 	vmov	r0, s0
 8018f5e:	4629      	mov	r1, r5
 8018f60:	f7e7 fb6a 	bl	8000638 <__aeabi_dmul>
 8018f64:	4602      	mov	r2, r0
 8018f66:	460b      	mov	r3, r1
 8018f68:	4620      	mov	r0, r4
 8018f6a:	4629      	mov	r1, r5
 8018f6c:	f7e7 f9ae 	bl	80002cc <__adddf3>
 8018f70:	4604      	mov	r4, r0
 8018f72:	460d      	mov	r5, r1
 8018f74:	ec45 4b10 	vmov	d0, r4, r5
 8018f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f7c:	2d00      	cmp	r5, #0
 8018f7e:	ee10 0a10 	vmov	r0, s0
 8018f82:	4621      	mov	r1, r4
 8018f84:	dc0f      	bgt.n	8018fa6 <__ieee754_sqrt+0x62>
 8018f86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018f8a:	4330      	orrs	r0, r6
 8018f8c:	d0f2      	beq.n	8018f74 <__ieee754_sqrt+0x30>
 8018f8e:	b155      	cbz	r5, 8018fa6 <__ieee754_sqrt+0x62>
 8018f90:	ee10 2a10 	vmov	r2, s0
 8018f94:	4620      	mov	r0, r4
 8018f96:	4629      	mov	r1, r5
 8018f98:	f7e7 f996 	bl	80002c8 <__aeabi_dsub>
 8018f9c:	4602      	mov	r2, r0
 8018f9e:	460b      	mov	r3, r1
 8018fa0:	f7e7 fc74 	bl	800088c <__aeabi_ddiv>
 8018fa4:	e7e4      	b.n	8018f70 <__ieee754_sqrt+0x2c>
 8018fa6:	151b      	asrs	r3, r3, #20
 8018fa8:	d073      	beq.n	8019092 <__ieee754_sqrt+0x14e>
 8018faa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018fae:	07dd      	lsls	r5, r3, #31
 8018fb0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018fb4:	bf48      	it	mi
 8018fb6:	0fc8      	lsrmi	r0, r1, #31
 8018fb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018fbc:	bf44      	itt	mi
 8018fbe:	0049      	lslmi	r1, r1, #1
 8018fc0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8018fc4:	2500      	movs	r5, #0
 8018fc6:	1058      	asrs	r0, r3, #1
 8018fc8:	0fcb      	lsrs	r3, r1, #31
 8018fca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018fce:	0049      	lsls	r1, r1, #1
 8018fd0:	2316      	movs	r3, #22
 8018fd2:	462c      	mov	r4, r5
 8018fd4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8018fd8:	19a7      	adds	r7, r4, r6
 8018fda:	4297      	cmp	r7, r2
 8018fdc:	bfde      	ittt	le
 8018fde:	19bc      	addle	r4, r7, r6
 8018fe0:	1bd2      	suble	r2, r2, r7
 8018fe2:	19ad      	addle	r5, r5, r6
 8018fe4:	0fcf      	lsrs	r7, r1, #31
 8018fe6:	3b01      	subs	r3, #1
 8018fe8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8018fec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018ff0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018ff4:	d1f0      	bne.n	8018fd8 <__ieee754_sqrt+0x94>
 8018ff6:	f04f 0c20 	mov.w	ip, #32
 8018ffa:	469e      	mov	lr, r3
 8018ffc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019000:	42a2      	cmp	r2, r4
 8019002:	eb06 070e 	add.w	r7, r6, lr
 8019006:	dc02      	bgt.n	801900e <__ieee754_sqrt+0xca>
 8019008:	d112      	bne.n	8019030 <__ieee754_sqrt+0xec>
 801900a:	428f      	cmp	r7, r1
 801900c:	d810      	bhi.n	8019030 <__ieee754_sqrt+0xec>
 801900e:	2f00      	cmp	r7, #0
 8019010:	eb07 0e06 	add.w	lr, r7, r6
 8019014:	da42      	bge.n	801909c <__ieee754_sqrt+0x158>
 8019016:	f1be 0f00 	cmp.w	lr, #0
 801901a:	db3f      	blt.n	801909c <__ieee754_sqrt+0x158>
 801901c:	f104 0801 	add.w	r8, r4, #1
 8019020:	1b12      	subs	r2, r2, r4
 8019022:	428f      	cmp	r7, r1
 8019024:	bf88      	it	hi
 8019026:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801902a:	1bc9      	subs	r1, r1, r7
 801902c:	4433      	add	r3, r6
 801902e:	4644      	mov	r4, r8
 8019030:	0052      	lsls	r2, r2, #1
 8019032:	f1bc 0c01 	subs.w	ip, ip, #1
 8019036:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801903a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801903e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019042:	d1dd      	bne.n	8019000 <__ieee754_sqrt+0xbc>
 8019044:	430a      	orrs	r2, r1
 8019046:	d006      	beq.n	8019056 <__ieee754_sqrt+0x112>
 8019048:	1c5c      	adds	r4, r3, #1
 801904a:	bf13      	iteet	ne
 801904c:	3301      	addne	r3, #1
 801904e:	3501      	addeq	r5, #1
 8019050:	4663      	moveq	r3, ip
 8019052:	f023 0301 	bicne.w	r3, r3, #1
 8019056:	106a      	asrs	r2, r5, #1
 8019058:	085b      	lsrs	r3, r3, #1
 801905a:	07e9      	lsls	r1, r5, #31
 801905c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019060:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019064:	bf48      	it	mi
 8019066:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801906a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801906e:	461c      	mov	r4, r3
 8019070:	e780      	b.n	8018f74 <__ieee754_sqrt+0x30>
 8019072:	0aca      	lsrs	r2, r1, #11
 8019074:	3815      	subs	r0, #21
 8019076:	0549      	lsls	r1, r1, #21
 8019078:	2a00      	cmp	r2, #0
 801907a:	d0fa      	beq.n	8019072 <__ieee754_sqrt+0x12e>
 801907c:	02d6      	lsls	r6, r2, #11
 801907e:	d50a      	bpl.n	8019096 <__ieee754_sqrt+0x152>
 8019080:	f1c3 0420 	rsb	r4, r3, #32
 8019084:	fa21 f404 	lsr.w	r4, r1, r4
 8019088:	1e5d      	subs	r5, r3, #1
 801908a:	4099      	lsls	r1, r3
 801908c:	4322      	orrs	r2, r4
 801908e:	1b43      	subs	r3, r0, r5
 8019090:	e78b      	b.n	8018faa <__ieee754_sqrt+0x66>
 8019092:	4618      	mov	r0, r3
 8019094:	e7f0      	b.n	8019078 <__ieee754_sqrt+0x134>
 8019096:	0052      	lsls	r2, r2, #1
 8019098:	3301      	adds	r3, #1
 801909a:	e7ef      	b.n	801907c <__ieee754_sqrt+0x138>
 801909c:	46a0      	mov	r8, r4
 801909e:	e7bf      	b.n	8019020 <__ieee754_sqrt+0xdc>
 80190a0:	7ff00000 	.word	0x7ff00000

080190a4 <__ieee754_powf>:
 80190a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190a8:	ee10 5a90 	vmov	r5, s1
 80190ac:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80190b0:	ed2d 8b02 	vpush	{d8}
 80190b4:	eeb0 8a40 	vmov.f32	s16, s0
 80190b8:	eef0 8a60 	vmov.f32	s17, s1
 80190bc:	f000 8293 	beq.w	80195e6 <__ieee754_powf+0x542>
 80190c0:	ee10 8a10 	vmov	r8, s0
 80190c4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80190c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80190cc:	dc06      	bgt.n	80190dc <__ieee754_powf+0x38>
 80190ce:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80190d2:	dd0a      	ble.n	80190ea <__ieee754_powf+0x46>
 80190d4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80190d8:	f000 8285 	beq.w	80195e6 <__ieee754_powf+0x542>
 80190dc:	ecbd 8b02 	vpop	{d8}
 80190e0:	48d9      	ldr	r0, [pc, #868]	; (8019448 <__ieee754_powf+0x3a4>)
 80190e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190e6:	f000 bbc7 	b.w	8019878 <nanf>
 80190ea:	f1b8 0f00 	cmp.w	r8, #0
 80190ee:	da1d      	bge.n	801912c <__ieee754_powf+0x88>
 80190f0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80190f4:	da2c      	bge.n	8019150 <__ieee754_powf+0xac>
 80190f6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80190fa:	db30      	blt.n	801915e <__ieee754_powf+0xba>
 80190fc:	15fb      	asrs	r3, r7, #23
 80190fe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8019102:	fa47 f603 	asr.w	r6, r7, r3
 8019106:	fa06 f303 	lsl.w	r3, r6, r3
 801910a:	42bb      	cmp	r3, r7
 801910c:	d127      	bne.n	801915e <__ieee754_powf+0xba>
 801910e:	f006 0601 	and.w	r6, r6, #1
 8019112:	f1c6 0602 	rsb	r6, r6, #2
 8019116:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801911a:	d122      	bne.n	8019162 <__ieee754_powf+0xbe>
 801911c:	2d00      	cmp	r5, #0
 801911e:	f280 8268 	bge.w	80195f2 <__ieee754_powf+0x54e>
 8019122:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019126:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801912a:	e00d      	b.n	8019148 <__ieee754_powf+0xa4>
 801912c:	2600      	movs	r6, #0
 801912e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8019132:	d1f0      	bne.n	8019116 <__ieee754_powf+0x72>
 8019134:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019138:	f000 8255 	beq.w	80195e6 <__ieee754_powf+0x542>
 801913c:	dd0a      	ble.n	8019154 <__ieee754_powf+0xb0>
 801913e:	2d00      	cmp	r5, #0
 8019140:	f280 8254 	bge.w	80195ec <__ieee754_powf+0x548>
 8019144:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801944c <__ieee754_powf+0x3a8>
 8019148:	ecbd 8b02 	vpop	{d8}
 801914c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019150:	2602      	movs	r6, #2
 8019152:	e7ec      	b.n	801912e <__ieee754_powf+0x8a>
 8019154:	2d00      	cmp	r5, #0
 8019156:	daf5      	bge.n	8019144 <__ieee754_powf+0xa0>
 8019158:	eeb1 0a68 	vneg.f32	s0, s17
 801915c:	e7f4      	b.n	8019148 <__ieee754_powf+0xa4>
 801915e:	2600      	movs	r6, #0
 8019160:	e7d9      	b.n	8019116 <__ieee754_powf+0x72>
 8019162:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8019166:	d102      	bne.n	801916e <__ieee754_powf+0xca>
 8019168:	ee28 0a08 	vmul.f32	s0, s16, s16
 801916c:	e7ec      	b.n	8019148 <__ieee754_powf+0xa4>
 801916e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8019172:	eeb0 0a48 	vmov.f32	s0, s16
 8019176:	d108      	bne.n	801918a <__ieee754_powf+0xe6>
 8019178:	f1b8 0f00 	cmp.w	r8, #0
 801917c:	db05      	blt.n	801918a <__ieee754_powf+0xe6>
 801917e:	ecbd 8b02 	vpop	{d8}
 8019182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019186:	f000 ba4d 	b.w	8019624 <__ieee754_sqrtf>
 801918a:	f000 fb63 	bl	8019854 <fabsf>
 801918e:	b124      	cbz	r4, 801919a <__ieee754_powf+0xf6>
 8019190:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8019194:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019198:	d117      	bne.n	80191ca <__ieee754_powf+0x126>
 801919a:	2d00      	cmp	r5, #0
 801919c:	bfbc      	itt	lt
 801919e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80191a2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80191a6:	f1b8 0f00 	cmp.w	r8, #0
 80191aa:	dacd      	bge.n	8019148 <__ieee754_powf+0xa4>
 80191ac:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80191b0:	ea54 0306 	orrs.w	r3, r4, r6
 80191b4:	d104      	bne.n	80191c0 <__ieee754_powf+0x11c>
 80191b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80191ba:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80191be:	e7c3      	b.n	8019148 <__ieee754_powf+0xa4>
 80191c0:	2e01      	cmp	r6, #1
 80191c2:	d1c1      	bne.n	8019148 <__ieee754_powf+0xa4>
 80191c4:	eeb1 0a40 	vneg.f32	s0, s0
 80191c8:	e7be      	b.n	8019148 <__ieee754_powf+0xa4>
 80191ca:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80191ce:	3801      	subs	r0, #1
 80191d0:	ea56 0300 	orrs.w	r3, r6, r0
 80191d4:	d104      	bne.n	80191e0 <__ieee754_powf+0x13c>
 80191d6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80191da:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80191de:	e7b3      	b.n	8019148 <__ieee754_powf+0xa4>
 80191e0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80191e4:	dd6d      	ble.n	80192c2 <__ieee754_powf+0x21e>
 80191e6:	4b9a      	ldr	r3, [pc, #616]	; (8019450 <__ieee754_powf+0x3ac>)
 80191e8:	429c      	cmp	r4, r3
 80191ea:	dc06      	bgt.n	80191fa <__ieee754_powf+0x156>
 80191ec:	2d00      	cmp	r5, #0
 80191ee:	daa9      	bge.n	8019144 <__ieee754_powf+0xa0>
 80191f0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8019454 <__ieee754_powf+0x3b0>
 80191f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80191f8:	e7a6      	b.n	8019148 <__ieee754_powf+0xa4>
 80191fa:	4b97      	ldr	r3, [pc, #604]	; (8019458 <__ieee754_powf+0x3b4>)
 80191fc:	429c      	cmp	r4, r3
 80191fe:	dd02      	ble.n	8019206 <__ieee754_powf+0x162>
 8019200:	2d00      	cmp	r5, #0
 8019202:	dcf5      	bgt.n	80191f0 <__ieee754_powf+0x14c>
 8019204:	e79e      	b.n	8019144 <__ieee754_powf+0xa0>
 8019206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801920a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801920e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801945c <__ieee754_powf+0x3b8>
 8019212:	eef1 6a40 	vneg.f32	s13, s0
 8019216:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801921a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801921e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019222:	eee7 7a40 	vfms.f32	s15, s14, s0
 8019226:	ee60 0a00 	vmul.f32	s1, s0, s0
 801922a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8019460 <__ieee754_powf+0x3bc>
 801922e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8019232:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8019464 <__ieee754_powf+0x3c0>
 8019236:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801923a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801923e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019468 <__ieee754_powf+0x3c4>
 8019242:	eeb0 6a67 	vmov.f32	s12, s15
 8019246:	eea0 6a07 	vfma.f32	s12, s0, s14
 801924a:	ee16 3a10 	vmov	r3, s12
 801924e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019252:	f023 030f 	bic.w	r3, r3, #15
 8019256:	ee00 3a90 	vmov	s1, r3
 801925a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801925e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019262:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8019266:	f025 050f 	bic.w	r5, r5, #15
 801926a:	ee07 5a10 	vmov	s14, r5
 801926e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019272:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8019276:	ee07 3a90 	vmov	s15, r3
 801927a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801927e:	3e01      	subs	r6, #1
 8019280:	ea56 0200 	orrs.w	r2, r6, r0
 8019284:	ee07 5a10 	vmov	s14, r5
 8019288:	ee67 7a87 	vmul.f32	s15, s15, s14
 801928c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8019290:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019294:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8019298:	ee17 4a10 	vmov	r4, s14
 801929c:	bf08      	it	eq
 801929e:	eeb0 8a40 	vmoveq.f32	s16, s0
 80192a2:	2c00      	cmp	r4, #0
 80192a4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80192a8:	f340 8184 	ble.w	80195b4 <__ieee754_powf+0x510>
 80192ac:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80192b0:	f340 80fc 	ble.w	80194ac <__ieee754_powf+0x408>
 80192b4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8019454 <__ieee754_powf+0x3b0>
 80192b8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80192bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80192c0:	e742      	b.n	8019148 <__ieee754_powf+0xa4>
 80192c2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80192c6:	bfbf      	itttt	lt
 80192c8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801946c <__ieee754_powf+0x3c8>
 80192cc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80192d0:	f06f 0217 	mvnlt.w	r2, #23
 80192d4:	ee17 4a90 	vmovlt	r4, s15
 80192d8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80192dc:	bfa8      	it	ge
 80192de:	2200      	movge	r2, #0
 80192e0:	3b7f      	subs	r3, #127	; 0x7f
 80192e2:	4413      	add	r3, r2
 80192e4:	4a62      	ldr	r2, [pc, #392]	; (8019470 <__ieee754_powf+0x3cc>)
 80192e6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80192ea:	4294      	cmp	r4, r2
 80192ec:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80192f0:	dd06      	ble.n	8019300 <__ieee754_powf+0x25c>
 80192f2:	4a60      	ldr	r2, [pc, #384]	; (8019474 <__ieee754_powf+0x3d0>)
 80192f4:	4294      	cmp	r4, r2
 80192f6:	f340 80a5 	ble.w	8019444 <__ieee754_powf+0x3a0>
 80192fa:	3301      	adds	r3, #1
 80192fc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019300:	2400      	movs	r4, #0
 8019302:	4a5d      	ldr	r2, [pc, #372]	; (8019478 <__ieee754_powf+0x3d4>)
 8019304:	00a7      	lsls	r7, r4, #2
 8019306:	443a      	add	r2, r7
 8019308:	ee07 1a90 	vmov	s15, r1
 801930c:	ed92 7a00 	vldr	s14, [r2]
 8019310:	4a5a      	ldr	r2, [pc, #360]	; (801947c <__ieee754_powf+0x3d8>)
 8019312:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019316:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801931a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801931e:	1049      	asrs	r1, r1, #1
 8019320:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8019324:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8019328:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801932c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8019330:	ee06 1a10 	vmov	s12, r1
 8019334:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8019338:	ee14 ca90 	vmov	ip, s9
 801933c:	ea02 0c0c 	and.w	ip, r2, ip
 8019340:	ee05 ca10 	vmov	s10, ip
 8019344:	eeb1 4a45 	vneg.f32	s8, s10
 8019348:	eee4 5a06 	vfma.f32	s11, s8, s12
 801934c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019350:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019480 <__ieee754_powf+0x3dc>
 8019354:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8019358:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801935c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019360:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8019364:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8019368:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019484 <__ieee754_powf+0x3e0>
 801936c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019370:	eddf 5a45 	vldr	s11, [pc, #276]	; 8019488 <__ieee754_powf+0x3e4>
 8019374:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019378:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801945c <__ieee754_powf+0x3b8>
 801937c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019380:	eddf 5a42 	vldr	s11, [pc, #264]	; 801948c <__ieee754_powf+0x3e8>
 8019384:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019388:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019490 <__ieee754_powf+0x3ec>
 801938c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8019390:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019394:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019398:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801939c:	eef0 7a65 	vmov.f32	s15, s11
 80193a0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80193a4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80193a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80193ac:	ee17 1a90 	vmov	r1, s15
 80193b0:	4011      	ands	r1, r2
 80193b2:	ee07 1a90 	vmov	s15, r1
 80193b6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80193ba:	eddf 5a36 	vldr	s11, [pc, #216]	; 8019494 <__ieee754_powf+0x3f0>
 80193be:	eea4 7a05 	vfma.f32	s14, s8, s10
 80193c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80193c6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80193ca:	eea7 7a86 	vfma.f32	s14, s15, s12
 80193ce:	eeb0 6a47 	vmov.f32	s12, s14
 80193d2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80193d6:	ee16 1a10 	vmov	r1, s12
 80193da:	4011      	ands	r1, r2
 80193dc:	ee06 1a90 	vmov	s13, r1
 80193e0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80193e4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019498 <__ieee754_powf+0x3f4>
 80193e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80193ec:	ee06 1a10 	vmov	s12, r1
 80193f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80193f4:	eddf 7a29 	vldr	s15, [pc, #164]	; 801949c <__ieee754_powf+0x3f8>
 80193f8:	4929      	ldr	r1, [pc, #164]	; (80194a0 <__ieee754_powf+0x3fc>)
 80193fa:	eea6 7a27 	vfma.f32	s14, s12, s15
 80193fe:	4439      	add	r1, r7
 8019400:	edd1 7a00 	vldr	s15, [r1]
 8019404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019408:	ee07 3a90 	vmov	s15, r3
 801940c:	eef0 0a47 	vmov.f32	s1, s14
 8019410:	4b24      	ldr	r3, [pc, #144]	; (80194a4 <__ieee754_powf+0x400>)
 8019412:	eee6 0a25 	vfma.f32	s1, s12, s11
 8019416:	443b      	add	r3, r7
 8019418:	ed93 5a00 	vldr	s10, [r3]
 801941c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019420:	ee70 0a85 	vadd.f32	s1, s1, s10
 8019424:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8019428:	ee17 3a90 	vmov	r3, s15
 801942c:	4013      	ands	r3, r2
 801942e:	ee07 3a90 	vmov	s15, r3
 8019432:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019436:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801943a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801943e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019442:	e70e      	b.n	8019262 <__ieee754_powf+0x1be>
 8019444:	2401      	movs	r4, #1
 8019446:	e75c      	b.n	8019302 <__ieee754_powf+0x25e>
 8019448:	0801a239 	.word	0x0801a239
 801944c:	00000000 	.word	0x00000000
 8019450:	3f7ffff7 	.word	0x3f7ffff7
 8019454:	7149f2ca 	.word	0x7149f2ca
 8019458:	3f800007 	.word	0x3f800007
 801945c:	3eaaaaab 	.word	0x3eaaaaab
 8019460:	36eca570 	.word	0x36eca570
 8019464:	3fb8aa3b 	.word	0x3fb8aa3b
 8019468:	3fb8aa00 	.word	0x3fb8aa00
 801946c:	4b800000 	.word	0x4b800000
 8019470:	001cc471 	.word	0x001cc471
 8019474:	005db3d6 	.word	0x005db3d6
 8019478:	0801a2a8 	.word	0x0801a2a8
 801947c:	fffff000 	.word	0xfffff000
 8019480:	3e6c3255 	.word	0x3e6c3255
 8019484:	3e53f142 	.word	0x3e53f142
 8019488:	3e8ba305 	.word	0x3e8ba305
 801948c:	3edb6db7 	.word	0x3edb6db7
 8019490:	3f19999a 	.word	0x3f19999a
 8019494:	3f763800 	.word	0x3f763800
 8019498:	3f76384f 	.word	0x3f76384f
 801949c:	369dc3a0 	.word	0x369dc3a0
 80194a0:	0801a2b8 	.word	0x0801a2b8
 80194a4:	0801a2b0 	.word	0x0801a2b0
 80194a8:	3338aa3c 	.word	0x3338aa3c
 80194ac:	f040 8092 	bne.w	80195d4 <__ieee754_powf+0x530>
 80194b0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80194a8 <__ieee754_powf+0x404>
 80194b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80194b8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80194bc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80194c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c4:	f73f aef6 	bgt.w	80192b4 <__ieee754_powf+0x210>
 80194c8:	15db      	asrs	r3, r3, #23
 80194ca:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80194ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80194d2:	4103      	asrs	r3, r0
 80194d4:	4423      	add	r3, r4
 80194d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80194da:	4947      	ldr	r1, [pc, #284]	; (80195f8 <__ieee754_powf+0x554>)
 80194dc:	3a7f      	subs	r2, #127	; 0x7f
 80194de:	4111      	asrs	r1, r2
 80194e0:	ea23 0101 	bic.w	r1, r3, r1
 80194e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80194e8:	ee07 1a10 	vmov	s14, r1
 80194ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80194f0:	f1c2 0217 	rsb	r2, r2, #23
 80194f4:	4110      	asrs	r0, r2
 80194f6:	2c00      	cmp	r4, #0
 80194f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194fc:	bfb8      	it	lt
 80194fe:	4240      	neglt	r0, r0
 8019500:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019504:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80195fc <__ieee754_powf+0x558>
 8019508:	ee17 3a10 	vmov	r3, s14
 801950c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019510:	f023 030f 	bic.w	r3, r3, #15
 8019514:	ee07 3a10 	vmov	s14, r3
 8019518:	ee77 7a67 	vsub.f32	s15, s14, s15
 801951c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019520:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019600 <__ieee754_powf+0x55c>
 8019524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019528:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801952c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8019604 <__ieee754_powf+0x560>
 8019530:	eeb0 0a67 	vmov.f32	s0, s15
 8019534:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019538:	eeb0 6a40 	vmov.f32	s12, s0
 801953c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019540:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019544:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019548:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019608 <__ieee754_powf+0x564>
 801954c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801960c <__ieee754_powf+0x568>
 8019550:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019554:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019610 <__ieee754_powf+0x56c>
 8019558:	eee6 6a07 	vfma.f32	s13, s12, s14
 801955c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019614 <__ieee754_powf+0x570>
 8019560:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019564:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019618 <__ieee754_powf+0x574>
 8019568:	eee6 6a07 	vfma.f32	s13, s12, s14
 801956c:	eeb0 6a40 	vmov.f32	s12, s0
 8019570:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019574:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019578:	eeb0 7a46 	vmov.f32	s14, s12
 801957c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019580:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019584:	eee0 7a27 	vfma.f32	s15, s0, s15
 8019588:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801958c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019590:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019594:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019598:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801959c:	ee10 3a10 	vmov	r3, s0
 80195a0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80195a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80195a8:	da1a      	bge.n	80195e0 <__ieee754_powf+0x53c>
 80195aa:	f000 f9c5 	bl	8019938 <scalbnf>
 80195ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 80195b2:	e5c9      	b.n	8019148 <__ieee754_powf+0xa4>
 80195b4:	4a19      	ldr	r2, [pc, #100]	; (801961c <__ieee754_powf+0x578>)
 80195b6:	4293      	cmp	r3, r2
 80195b8:	dd02      	ble.n	80195c0 <__ieee754_powf+0x51c>
 80195ba:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019620 <__ieee754_powf+0x57c>
 80195be:	e67b      	b.n	80192b8 <__ieee754_powf+0x214>
 80195c0:	d108      	bne.n	80195d4 <__ieee754_powf+0x530>
 80195c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80195c6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80195ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ce:	f6ff af7b 	blt.w	80194c8 <__ieee754_powf+0x424>
 80195d2:	e7f2      	b.n	80195ba <__ieee754_powf+0x516>
 80195d4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80195d8:	f73f af76 	bgt.w	80194c8 <__ieee754_powf+0x424>
 80195dc:	2000      	movs	r0, #0
 80195de:	e78f      	b.n	8019500 <__ieee754_powf+0x45c>
 80195e0:	ee00 3a10 	vmov	s0, r3
 80195e4:	e7e3      	b.n	80195ae <__ieee754_powf+0x50a>
 80195e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80195ea:	e5ad      	b.n	8019148 <__ieee754_powf+0xa4>
 80195ec:	eeb0 0a68 	vmov.f32	s0, s17
 80195f0:	e5aa      	b.n	8019148 <__ieee754_powf+0xa4>
 80195f2:	eeb0 0a48 	vmov.f32	s0, s16
 80195f6:	e5a7      	b.n	8019148 <__ieee754_powf+0xa4>
 80195f8:	007fffff 	.word	0x007fffff
 80195fc:	3f317218 	.word	0x3f317218
 8019600:	35bfbe8c 	.word	0x35bfbe8c
 8019604:	3f317200 	.word	0x3f317200
 8019608:	3331bb4c 	.word	0x3331bb4c
 801960c:	b5ddea0e 	.word	0xb5ddea0e
 8019610:	388ab355 	.word	0x388ab355
 8019614:	bb360b61 	.word	0xbb360b61
 8019618:	3e2aaaab 	.word	0x3e2aaaab
 801961c:	43160000 	.word	0x43160000
 8019620:	0da24260 	.word	0x0da24260

08019624 <__ieee754_sqrtf>:
 8019624:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019628:	4770      	bx	lr

0801962a <fabs>:
 801962a:	ec51 0b10 	vmov	r0, r1, d0
 801962e:	ee10 2a10 	vmov	r2, s0
 8019632:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019636:	ec43 2b10 	vmov	d0, r2, r3
 801963a:	4770      	bx	lr

0801963c <finite>:
 801963c:	ee10 3a90 	vmov	r3, s1
 8019640:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8019644:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019648:	0fc0      	lsrs	r0, r0, #31
 801964a:	4770      	bx	lr

0801964c <matherr>:
 801964c:	2000      	movs	r0, #0
 801964e:	4770      	bx	lr

08019650 <nan>:
 8019650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019658 <nan+0x8>
 8019654:	4770      	bx	lr
 8019656:	bf00      	nop
 8019658:	00000000 	.word	0x00000000
 801965c:	7ff80000 	.word	0x7ff80000

08019660 <rint>:
 8019660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019662:	ec51 0b10 	vmov	r0, r1, d0
 8019666:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801966a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801966e:	2e13      	cmp	r6, #19
 8019670:	460b      	mov	r3, r1
 8019672:	ee10 4a10 	vmov	r4, s0
 8019676:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801967a:	dc56      	bgt.n	801972a <rint+0xca>
 801967c:	2e00      	cmp	r6, #0
 801967e:	da2b      	bge.n	80196d8 <rint+0x78>
 8019680:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019684:	4302      	orrs	r2, r0
 8019686:	d023      	beq.n	80196d0 <rint+0x70>
 8019688:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801968c:	4302      	orrs	r2, r0
 801968e:	4254      	negs	r4, r2
 8019690:	4314      	orrs	r4, r2
 8019692:	0c4b      	lsrs	r3, r1, #17
 8019694:	0b24      	lsrs	r4, r4, #12
 8019696:	045b      	lsls	r3, r3, #17
 8019698:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801969c:	ea44 0103 	orr.w	r1, r4, r3
 80196a0:	460b      	mov	r3, r1
 80196a2:	492f      	ldr	r1, [pc, #188]	; (8019760 <rint+0x100>)
 80196a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80196a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80196ac:	4602      	mov	r2, r0
 80196ae:	4639      	mov	r1, r7
 80196b0:	4630      	mov	r0, r6
 80196b2:	f7e6 fe0b 	bl	80002cc <__adddf3>
 80196b6:	e9cd 0100 	strd	r0, r1, [sp]
 80196ba:	463b      	mov	r3, r7
 80196bc:	4632      	mov	r2, r6
 80196be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80196c2:	f7e6 fe01 	bl	80002c8 <__aeabi_dsub>
 80196c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80196ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80196ce:	4639      	mov	r1, r7
 80196d0:	ec41 0b10 	vmov	d0, r0, r1
 80196d4:	b003      	add	sp, #12
 80196d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196d8:	4a22      	ldr	r2, [pc, #136]	; (8019764 <rint+0x104>)
 80196da:	4132      	asrs	r2, r6
 80196dc:	ea01 0702 	and.w	r7, r1, r2
 80196e0:	4307      	orrs	r7, r0
 80196e2:	d0f5      	beq.n	80196d0 <rint+0x70>
 80196e4:	0852      	lsrs	r2, r2, #1
 80196e6:	4011      	ands	r1, r2
 80196e8:	430c      	orrs	r4, r1
 80196ea:	d00b      	beq.n	8019704 <rint+0xa4>
 80196ec:	ea23 0202 	bic.w	r2, r3, r2
 80196f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80196f4:	2e13      	cmp	r6, #19
 80196f6:	fa43 f306 	asr.w	r3, r3, r6
 80196fa:	bf0c      	ite	eq
 80196fc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019700:	2400      	movne	r4, #0
 8019702:	4313      	orrs	r3, r2
 8019704:	4916      	ldr	r1, [pc, #88]	; (8019760 <rint+0x100>)
 8019706:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801970a:	4622      	mov	r2, r4
 801970c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019710:	4620      	mov	r0, r4
 8019712:	4629      	mov	r1, r5
 8019714:	f7e6 fdda 	bl	80002cc <__adddf3>
 8019718:	e9cd 0100 	strd	r0, r1, [sp]
 801971c:	4622      	mov	r2, r4
 801971e:	462b      	mov	r3, r5
 8019720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019724:	f7e6 fdd0 	bl	80002c8 <__aeabi_dsub>
 8019728:	e7d2      	b.n	80196d0 <rint+0x70>
 801972a:	2e33      	cmp	r6, #51	; 0x33
 801972c:	dd07      	ble.n	801973e <rint+0xde>
 801972e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019732:	d1cd      	bne.n	80196d0 <rint+0x70>
 8019734:	ee10 2a10 	vmov	r2, s0
 8019738:	f7e6 fdc8 	bl	80002cc <__adddf3>
 801973c:	e7c8      	b.n	80196d0 <rint+0x70>
 801973e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8019742:	f04f 32ff 	mov.w	r2, #4294967295
 8019746:	40f2      	lsrs	r2, r6
 8019748:	4210      	tst	r0, r2
 801974a:	d0c1      	beq.n	80196d0 <rint+0x70>
 801974c:	0852      	lsrs	r2, r2, #1
 801974e:	4210      	tst	r0, r2
 8019750:	bf1f      	itttt	ne
 8019752:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019756:	ea20 0202 	bicne.w	r2, r0, r2
 801975a:	4134      	asrne	r4, r6
 801975c:	4314      	orrne	r4, r2
 801975e:	e7d1      	b.n	8019704 <rint+0xa4>
 8019760:	0801a2c0 	.word	0x0801a2c0
 8019764:	000fffff 	.word	0x000fffff

08019768 <scalbn>:
 8019768:	b570      	push	{r4, r5, r6, lr}
 801976a:	ec55 4b10 	vmov	r4, r5, d0
 801976e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019772:	4606      	mov	r6, r0
 8019774:	462b      	mov	r3, r5
 8019776:	b9aa      	cbnz	r2, 80197a4 <scalbn+0x3c>
 8019778:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801977c:	4323      	orrs	r3, r4
 801977e:	d03b      	beq.n	80197f8 <scalbn+0x90>
 8019780:	4b31      	ldr	r3, [pc, #196]	; (8019848 <scalbn+0xe0>)
 8019782:	4629      	mov	r1, r5
 8019784:	2200      	movs	r2, #0
 8019786:	ee10 0a10 	vmov	r0, s0
 801978a:	f7e6 ff55 	bl	8000638 <__aeabi_dmul>
 801978e:	4b2f      	ldr	r3, [pc, #188]	; (801984c <scalbn+0xe4>)
 8019790:	429e      	cmp	r6, r3
 8019792:	4604      	mov	r4, r0
 8019794:	460d      	mov	r5, r1
 8019796:	da12      	bge.n	80197be <scalbn+0x56>
 8019798:	a327      	add	r3, pc, #156	; (adr r3, 8019838 <scalbn+0xd0>)
 801979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801979e:	f7e6 ff4b 	bl	8000638 <__aeabi_dmul>
 80197a2:	e009      	b.n	80197b8 <scalbn+0x50>
 80197a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80197a8:	428a      	cmp	r2, r1
 80197aa:	d10c      	bne.n	80197c6 <scalbn+0x5e>
 80197ac:	ee10 2a10 	vmov	r2, s0
 80197b0:	4620      	mov	r0, r4
 80197b2:	4629      	mov	r1, r5
 80197b4:	f7e6 fd8a 	bl	80002cc <__adddf3>
 80197b8:	4604      	mov	r4, r0
 80197ba:	460d      	mov	r5, r1
 80197bc:	e01c      	b.n	80197f8 <scalbn+0x90>
 80197be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80197c2:	460b      	mov	r3, r1
 80197c4:	3a36      	subs	r2, #54	; 0x36
 80197c6:	4432      	add	r2, r6
 80197c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80197cc:	428a      	cmp	r2, r1
 80197ce:	dd0b      	ble.n	80197e8 <scalbn+0x80>
 80197d0:	ec45 4b11 	vmov	d1, r4, r5
 80197d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019840 <scalbn+0xd8>
 80197d8:	f000 f90e 	bl	80199f8 <copysign>
 80197dc:	a318      	add	r3, pc, #96	; (adr r3, 8019840 <scalbn+0xd8>)
 80197de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e2:	ec51 0b10 	vmov	r0, r1, d0
 80197e6:	e7da      	b.n	801979e <scalbn+0x36>
 80197e8:	2a00      	cmp	r2, #0
 80197ea:	dd08      	ble.n	80197fe <scalbn+0x96>
 80197ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80197f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80197f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80197f8:	ec45 4b10 	vmov	d0, r4, r5
 80197fc:	bd70      	pop	{r4, r5, r6, pc}
 80197fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019802:	da0d      	bge.n	8019820 <scalbn+0xb8>
 8019804:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019808:	429e      	cmp	r6, r3
 801980a:	ec45 4b11 	vmov	d1, r4, r5
 801980e:	dce1      	bgt.n	80197d4 <scalbn+0x6c>
 8019810:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8019838 <scalbn+0xd0>
 8019814:	f000 f8f0 	bl	80199f8 <copysign>
 8019818:	a307      	add	r3, pc, #28	; (adr r3, 8019838 <scalbn+0xd0>)
 801981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801981e:	e7e0      	b.n	80197e2 <scalbn+0x7a>
 8019820:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019824:	3236      	adds	r2, #54	; 0x36
 8019826:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801982a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801982e:	4620      	mov	r0, r4
 8019830:	4629      	mov	r1, r5
 8019832:	2200      	movs	r2, #0
 8019834:	4b06      	ldr	r3, [pc, #24]	; (8019850 <scalbn+0xe8>)
 8019836:	e7b2      	b.n	801979e <scalbn+0x36>
 8019838:	c2f8f359 	.word	0xc2f8f359
 801983c:	01a56e1f 	.word	0x01a56e1f
 8019840:	8800759c 	.word	0x8800759c
 8019844:	7e37e43c 	.word	0x7e37e43c
 8019848:	43500000 	.word	0x43500000
 801984c:	ffff3cb0 	.word	0xffff3cb0
 8019850:	3c900000 	.word	0x3c900000

08019854 <fabsf>:
 8019854:	ee10 3a10 	vmov	r3, s0
 8019858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801985c:	ee00 3a10 	vmov	s0, r3
 8019860:	4770      	bx	lr

08019862 <finitef>:
 8019862:	ee10 3a10 	vmov	r3, s0
 8019866:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801986a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801986e:	bfac      	ite	ge
 8019870:	2000      	movge	r0, #0
 8019872:	2001      	movlt	r0, #1
 8019874:	4770      	bx	lr
	...

08019878 <nanf>:
 8019878:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019880 <nanf+0x8>
 801987c:	4770      	bx	lr
 801987e:	bf00      	nop
 8019880:	7fc00000 	.word	0x7fc00000

08019884 <rintf>:
 8019884:	b513      	push	{r0, r1, r4, lr}
 8019886:	ee10 1a10 	vmov	r1, s0
 801988a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801988e:	0ddc      	lsrs	r4, r3, #23
 8019890:	3c7f      	subs	r4, #127	; 0x7f
 8019892:	2c16      	cmp	r4, #22
 8019894:	dc46      	bgt.n	8019924 <rintf+0xa0>
 8019896:	b32b      	cbz	r3, 80198e4 <rintf+0x60>
 8019898:	2c00      	cmp	r4, #0
 801989a:	ee10 2a10 	vmov	r2, s0
 801989e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80198a2:	da21      	bge.n	80198e8 <rintf+0x64>
 80198a4:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80198a8:	425b      	negs	r3, r3
 80198aa:	4a21      	ldr	r2, [pc, #132]	; (8019930 <rintf+0xac>)
 80198ac:	0a5b      	lsrs	r3, r3, #9
 80198ae:	0d09      	lsrs	r1, r1, #20
 80198b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80198b4:	0509      	lsls	r1, r1, #20
 80198b6:	430b      	orrs	r3, r1
 80198b8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80198bc:	ee07 3a90 	vmov	s15, r3
 80198c0:	edd2 6a00 	vldr	s13, [r2]
 80198c4:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80198c8:	ed8d 7a01 	vstr	s14, [sp, #4]
 80198cc:	eddd 7a01 	vldr	s15, [sp, #4]
 80198d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80198d4:	ee17 3a90 	vmov	r3, s15
 80198d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80198dc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80198e0:	ee00 3a10 	vmov	s0, r3
 80198e4:	b002      	add	sp, #8
 80198e6:	bd10      	pop	{r4, pc}
 80198e8:	4b12      	ldr	r3, [pc, #72]	; (8019934 <rintf+0xb0>)
 80198ea:	4123      	asrs	r3, r4
 80198ec:	4219      	tst	r1, r3
 80198ee:	d0f9      	beq.n	80198e4 <rintf+0x60>
 80198f0:	085b      	lsrs	r3, r3, #1
 80198f2:	4219      	tst	r1, r3
 80198f4:	d006      	beq.n	8019904 <rintf+0x80>
 80198f6:	ea21 0203 	bic.w	r2, r1, r3
 80198fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80198fe:	fa43 f404 	asr.w	r4, r3, r4
 8019902:	4322      	orrs	r2, r4
 8019904:	4b0a      	ldr	r3, [pc, #40]	; (8019930 <rintf+0xac>)
 8019906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801990a:	ed90 7a00 	vldr	s14, [r0]
 801990e:	ee07 2a90 	vmov	s15, r2
 8019912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019916:	edcd 7a01 	vstr	s15, [sp, #4]
 801991a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801991e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019922:	e7df      	b.n	80198e4 <rintf+0x60>
 8019924:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019928:	d3dc      	bcc.n	80198e4 <rintf+0x60>
 801992a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801992e:	e7d9      	b.n	80198e4 <rintf+0x60>
 8019930:	0801a2d0 	.word	0x0801a2d0
 8019934:	007fffff 	.word	0x007fffff

08019938 <scalbnf>:
 8019938:	b508      	push	{r3, lr}
 801993a:	ee10 2a10 	vmov	r2, s0
 801993e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019942:	ed2d 8b02 	vpush	{d8}
 8019946:	eef0 0a40 	vmov.f32	s1, s0
 801994a:	d004      	beq.n	8019956 <scalbnf+0x1e>
 801994c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019950:	d306      	bcc.n	8019960 <scalbnf+0x28>
 8019952:	ee70 0a00 	vadd.f32	s1, s0, s0
 8019956:	ecbd 8b02 	vpop	{d8}
 801995a:	eeb0 0a60 	vmov.f32	s0, s1
 801995e:	bd08      	pop	{r3, pc}
 8019960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019964:	d21c      	bcs.n	80199a0 <scalbnf+0x68>
 8019966:	4b1f      	ldr	r3, [pc, #124]	; (80199e4 <scalbnf+0xac>)
 8019968:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80199e8 <scalbnf+0xb0>
 801996c:	4298      	cmp	r0, r3
 801996e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8019972:	db10      	blt.n	8019996 <scalbnf+0x5e>
 8019974:	ee10 2a90 	vmov	r2, s1
 8019978:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801997c:	3b19      	subs	r3, #25
 801997e:	4403      	add	r3, r0
 8019980:	2bfe      	cmp	r3, #254	; 0xfe
 8019982:	dd0f      	ble.n	80199a4 <scalbnf+0x6c>
 8019984:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80199ec <scalbnf+0xb4>
 8019988:	eeb0 0a48 	vmov.f32	s0, s16
 801998c:	f000 f843 	bl	8019a16 <copysignf>
 8019990:	ee60 0a08 	vmul.f32	s1, s0, s16
 8019994:	e7df      	b.n	8019956 <scalbnf+0x1e>
 8019996:	eddf 7a16 	vldr	s15, [pc, #88]	; 80199f0 <scalbnf+0xb8>
 801999a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801999e:	e7da      	b.n	8019956 <scalbnf+0x1e>
 80199a0:	0ddb      	lsrs	r3, r3, #23
 80199a2:	e7ec      	b.n	801997e <scalbnf+0x46>
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	dd06      	ble.n	80199b6 <scalbnf+0x7e>
 80199a8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80199ac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80199b0:	ee00 3a90 	vmov	s1, r3
 80199b4:	e7cf      	b.n	8019956 <scalbnf+0x1e>
 80199b6:	f113 0f16 	cmn.w	r3, #22
 80199ba:	da06      	bge.n	80199ca <scalbnf+0x92>
 80199bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80199c0:	4298      	cmp	r0, r3
 80199c2:	dcdf      	bgt.n	8019984 <scalbnf+0x4c>
 80199c4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80199f0 <scalbnf+0xb8>
 80199c8:	e7de      	b.n	8019988 <scalbnf+0x50>
 80199ca:	3319      	adds	r3, #25
 80199cc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80199d0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80199d4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80199f4 <scalbnf+0xbc>
 80199d8:	ee07 3a10 	vmov	s14, r3
 80199dc:	ee67 0a27 	vmul.f32	s1, s14, s15
 80199e0:	e7b9      	b.n	8019956 <scalbnf+0x1e>
 80199e2:	bf00      	nop
 80199e4:	ffff3cb0 	.word	0xffff3cb0
 80199e8:	4c000000 	.word	0x4c000000
 80199ec:	7149f2ca 	.word	0x7149f2ca
 80199f0:	0da24260 	.word	0x0da24260
 80199f4:	33000000 	.word	0x33000000

080199f8 <copysign>:
 80199f8:	ec51 0b10 	vmov	r0, r1, d0
 80199fc:	ee11 0a90 	vmov	r0, s3
 8019a00:	ee10 2a10 	vmov	r2, s0
 8019a04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019a08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8019a0c:	ea41 0300 	orr.w	r3, r1, r0
 8019a10:	ec43 2b10 	vmov	d0, r2, r3
 8019a14:	4770      	bx	lr

08019a16 <copysignf>:
 8019a16:	ee10 3a10 	vmov	r3, s0
 8019a1a:	ee10 2a90 	vmov	r2, s1
 8019a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019a22:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8019a26:	4313      	orrs	r3, r2
 8019a28:	ee00 3a10 	vmov	s0, r3
 8019a2c:	4770      	bx	lr
	...

08019a30 <_init>:
 8019a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a32:	bf00      	nop
 8019a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a36:	bc08      	pop	{r3}
 8019a38:	469e      	mov	lr, r3
 8019a3a:	4770      	bx	lr

08019a3c <_fini>:
 8019a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a3e:	bf00      	nop
 8019a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a42:	bc08      	pop	{r3}
 8019a44:	469e      	mov	lr, r3
 8019a46:	4770      	bx	lr
